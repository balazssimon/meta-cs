//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Balazs\source\repos\meta-cs\src\Samples\MetaDslx.Languages.Soal\Syntax\InternalSyntax\SoalParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Soal.Syntax.InternalSyntax {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SoalParser : Parser {
	public const int
		KNamespace=1, KEnum=2, KException=3, KStruct=4, KInterface=5, KThrows=6, 
		KOneway=7, KReturn=8, KBinding=9, KTransport=10, KEncoding=11, KProtocol=12, 
		KEndpoint=13, KAddress=14, KDatabase=15, KEntity=16, KAbstract=17, KComponent=18, 
		KComposite=19, KReference=20, KService=21, KWire=22, KTo=23, KImplementation=24, 
		KLanguage=25, KAssembly=26, KDeployment=27, KEnvironment=28, KRuntime=29, 
		KNull=30, KTrue=31, KFalse=32, KObject=33, KString=34, KInt=35, KLong=36, 
		KFloat=37, KDouble=38, KByte=39, KBool=40, KAny=41, KTypeof=42, KVoid=43, 
		TSemicolon=44, TColon=45, TDot=46, TComma=47, TAssign=48, TOpenParen=49, 
		TCloseParen=50, TOpenBracket=51, TCloseBracket=52, TOpenBrace=53, TCloseBrace=54, 
		TLessThan=55, TGreaterThan=56, TQuestion=57, TQuestionQuestion=58, TAmpersand=59, 
		THat=60, TBar=61, TAndAlso=62, TOrElse=63, TPlusPlus=64, TMinusMinus=65, 
		TPlus=66, TMinus=67, TTilde=68, TExclamation=69, TSlash=70, TAsterisk=71, 
		TPercent=72, TLessThanOrEqual=73, TGreaterThanOrEqual=74, TEqual=75, TNotEqual=76, 
		TAsteriskAssign=77, TSlashAssign=78, TPercentAssign=79, TPlusAssign=80, 
		TMinusAssign=81, TLeftShiftAssign=82, TRightShiftAssign=83, TAmpersandAssign=84, 
		THatAssign=85, TBarAssign=86, IDate=87, ITime=88, IDateTime=89, ITimeSpan=90, 
		IVersion=91, IStyle=92, IMTOM=93, ISSL=94, IHTTP=95, IREST=96, IWebSocket=97, 
		ISOAP=98, IXML=99, IJSON=100, IClientAuthentication=101, IWsAddressing=102, 
		IdentifierNormal=103, IdentifierVerbatim=104, LInteger=105, LDecimal=106, 
		LScientific=107, LDateTimeOffset=108, LDateTime=109, LDate=110, LTime=111, 
		LRegularString=112, LGuid=113, LUtf8Bom=114, LWhiteSpace=115, LCrLf=116, 
		LLineEnd=117, LSingleLineComment=118, LMultiLineComment=119, LDoubleQuoteVerbatimString=120, 
		LSingleQuoteVerbatimString=121, DoubleQuoteVerbatimStringLiteralStart=122, 
		SingleQuoteVerbatimStringLiteralStart=123, LCommentStart=124;
	public const int
		RULE_main = 0, RULE_name = 1, RULE_qualifiedName = 2, RULE_qualifier = 3, 
		RULE_identifierList = 4, RULE_qualifierList = 5, RULE_annotationList = 6, 
		RULE_returnAnnotationList = 7, RULE_annotation = 8, RULE_returnAnnotation = 9, 
		RULE_annotationHead = 10, RULE_annotationBody = 11, RULE_annotationPropertyList = 12, 
		RULE_annotationProperty = 13, RULE_annotationPropertyValue = 14, RULE_namespaceDeclaration = 15, 
		RULE_namespacePrefix = 16, RULE_namespaceUri = 17, RULE_namespaceBody = 18, 
		RULE_declaration = 19, RULE_enumDeclaration = 20, RULE_enumBase = 21, 
		RULE_enumBody = 22, RULE_enumLiterals = 23, RULE_enumLiteral = 24, RULE_structDeclaration = 25, 
		RULE_structBody = 26, RULE_propertyDeclaration = 27, RULE_databaseDeclaration = 28, 
		RULE_databaseBody = 29, RULE_entityReference = 30, RULE_interfaceDeclaration = 31, 
		RULE_interfaceBody = 32, RULE_operationDeclaration = 33, RULE_operationHead = 34, 
		RULE_parameterList = 35, RULE_parameter = 36, RULE_operationResult = 37, 
		RULE_throwsList = 38, RULE_componentDeclaration = 39, RULE_componentBase = 40, 
		RULE_componentBody = 41, RULE_componentElements = 42, RULE_componentElement = 43, 
		RULE_componentService = 44, RULE_componentReference = 45, RULE_componentServiceOrReferenceBody = 46, 
		RULE_componentServiceOrReferenceElement = 47, RULE_componentProperty = 48, 
		RULE_componentImplementation = 49, RULE_componentLanguage = 50, RULE_compositeDeclaration = 51, 
		RULE_compositeBody = 52, RULE_assemblyDeclaration = 53, RULE_compositeElements = 54, 
		RULE_compositeElement = 55, RULE_compositeComponent = 56, RULE_compositeWire = 57, 
		RULE_wireSource = 58, RULE_wireTarget = 59, RULE_deploymentDeclaration = 60, 
		RULE_deploymentBody = 61, RULE_deploymentElements = 62, RULE_deploymentElement = 63, 
		RULE_environmentDeclaration = 64, RULE_environmentBody = 65, RULE_runtimeDeclaration = 66, 
		RULE_runtimeReference = 67, RULE_assemblyReference = 68, RULE_databaseReference = 69, 
		RULE_bindingDeclaration = 70, RULE_bindingBody = 71, RULE_bindingLayers = 72, 
		RULE_transportLayer = 73, RULE_httpTransportLayer = 74, RULE_httpTransportLayerBody = 75, 
		RULE_restTransportLayer = 76, RULE_restTransportLayerBody = 77, RULE_webSocketTransportLayer = 78, 
		RULE_webSocketTransportLayerBody = 79, RULE_httpTransportLayerProperties = 80, 
		RULE_httpSslProperty = 81, RULE_httpClientAuthenticationProperty = 82, 
		RULE_encodingLayer = 83, RULE_soapEncodingLayer = 84, RULE_soapEncodingLayerBody = 85, 
		RULE_xmlEncodingLayer = 86, RULE_xmlEncodingLayerBody = 87, RULE_jsonEncodingLayer = 88, 
		RULE_jsonEncodingLayerBody = 89, RULE_soapEncodingProperties = 90, RULE_soapVersionProperty = 91, 
		RULE_soapMtomProperty = 92, RULE_soapStyleProperty = 93, RULE_protocolLayer = 94, 
		RULE_protocolLayerKind = 95, RULE_wsAddressing = 96, RULE_endpointDeclaration = 97, 
		RULE_endpointBody = 98, RULE_endpointProperties = 99, RULE_endpointProperty = 100, 
		RULE_endpointBindingProperty = 101, RULE_endpointAddressProperty = 102, 
		RULE_returnType = 103, RULE_typeReference = 104, RULE_simpleType = 105, 
		RULE_nulledType = 106, RULE_referenceType = 107, RULE_objectType = 108, 
		RULE_valueType = 109, RULE_voidType = 110, RULE_onewayType = 111, RULE_operationReturnType = 112, 
		RULE_nullableType = 113, RULE_nonNullableType = 114, RULE_nonNullableArrayType = 115, 
		RULE_arrayType = 116, RULE_simpleArrayType = 117, RULE_nulledArrayType = 118, 
		RULE_constantValue = 119, RULE_typeofValue = 120, RULE_identifier = 121, 
		RULE_identifiers = 122, RULE_literal = 123, RULE_nullLiteral = 124, RULE_booleanLiteral = 125, 
		RULE_integerLiteral = 126, RULE_decimalLiteral = 127, RULE_scientificLiteral = 128, 
		RULE_stringLiteral = 129, RULE_contextualKeywords = 130;
	public static readonly string[] ruleNames = {
		"main", "name", "qualifiedName", "qualifier", "identifierList", "qualifierList", 
		"annotationList", "returnAnnotationList", "annotation", "returnAnnotation", 
		"annotationHead", "annotationBody", "annotationPropertyList", "annotationProperty", 
		"annotationPropertyValue", "namespaceDeclaration", "namespacePrefix", 
		"namespaceUri", "namespaceBody", "declaration", "enumDeclaration", "enumBase", 
		"enumBody", "enumLiterals", "enumLiteral", "structDeclaration", "structBody", 
		"propertyDeclaration", "databaseDeclaration", "databaseBody", "entityReference", 
		"interfaceDeclaration", "interfaceBody", "operationDeclaration", "operationHead", 
		"parameterList", "parameter", "operationResult", "throwsList", "componentDeclaration", 
		"componentBase", "componentBody", "componentElements", "componentElement", 
		"componentService", "componentReference", "componentServiceOrReferenceBody", 
		"componentServiceOrReferenceElement", "componentProperty", "componentImplementation", 
		"componentLanguage", "compositeDeclaration", "compositeBody", "assemblyDeclaration", 
		"compositeElements", "compositeElement", "compositeComponent", "compositeWire", 
		"wireSource", "wireTarget", "deploymentDeclaration", "deploymentBody", 
		"deploymentElements", "deploymentElement", "environmentDeclaration", "environmentBody", 
		"runtimeDeclaration", "runtimeReference", "assemblyReference", "databaseReference", 
		"bindingDeclaration", "bindingBody", "bindingLayers", "transportLayer", 
		"httpTransportLayer", "httpTransportLayerBody", "restTransportLayer", 
		"restTransportLayerBody", "webSocketTransportLayer", "webSocketTransportLayerBody", 
		"httpTransportLayerProperties", "httpSslProperty", "httpClientAuthenticationProperty", 
		"encodingLayer", "soapEncodingLayer", "soapEncodingLayerBody", "xmlEncodingLayer", 
		"xmlEncodingLayerBody", "jsonEncodingLayer", "jsonEncodingLayerBody", 
		"soapEncodingProperties", "soapVersionProperty", "soapMtomProperty", "soapStyleProperty", 
		"protocolLayer", "protocolLayerKind", "wsAddressing", "endpointDeclaration", 
		"endpointBody", "endpointProperties", "endpointProperty", "endpointBindingProperty", 
		"endpointAddressProperty", "returnType", "typeReference", "simpleType", 
		"nulledType", "referenceType", "objectType", "valueType", "voidType", 
		"onewayType", "operationReturnType", "nullableType", "nonNullableType", 
		"nonNullableArrayType", "arrayType", "simpleArrayType", "nulledArrayType", 
		"constantValue", "typeofValue", "identifier", "identifiers", "literal", 
		"nullLiteral", "booleanLiteral", "integerLiteral", "decimalLiteral", "scientificLiteral", 
		"stringLiteral", "contextualKeywords"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'enum'", "'exception'", "'struct'", "'interface'", 
		"'throws'", "'oneway'", "'return'", "'binding'", "'transport'", "'encoding'", 
		"'protocol'", "'endpoint'", "'address'", "'database'", "'entity'", "'abstract'", 
		"'component'", "'composite'", "'reference'", "'service'", "'wire'", "'to'", 
		"'implementation'", "'language'", "'assembly'", "'deployment'", "'environment'", 
		"'runtime'", "'null'", "'true'", "'false'", "'object'", "'string'", "'int'", 
		"'long'", "'float'", "'double'", "'byte'", "'bool'", "'any'", "'typeof'", 
		"'void'", "';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", 
		"'<='", "'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'&='", "'^='", "'|='", "'Date'", "'Time'", "'DateTime'", 
		"'TimeSpan'", "'Version'", "'Style'", "'MTOM'", "'SSL'", "'HTTP'", "'REST'", 
		"'WebSocket'", "'SOAP'", "'XML'", "'JSON'", "'ClientAuthentication'", 
		"'WsAddressing'", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'\"'", "'''", "'@\"'", 
		"'@''", "'/*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KEnum", "KException", "KStruct", "KInterface", "KThrows", 
		"KOneway", "KReturn", "KBinding", "KTransport", "KEncoding", "KProtocol", 
		"KEndpoint", "KAddress", "KDatabase", "KEntity", "KAbstract", "KComponent", 
		"KComposite", "KReference", "KService", "KWire", "KTo", "KImplementation", 
		"KLanguage", "KAssembly", "KDeployment", "KEnvironment", "KRuntime", "KNull", 
		"KTrue", "KFalse", "KObject", "KString", "KInt", "KLong", "KFloat", "KDouble", 
		"KByte", "KBool", "KAny", "KTypeof", "KVoid", "TSemicolon", "TColon", 
		"TDot", "TComma", "TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", 
		"TCloseBracket", "TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", 
		"TQuestion", "TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", 
		"TOrElse", "TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IDate", "ITime", "IDateTime", 
		"ITimeSpan", "IVersion", "IStyle", "IMTOM", "ISSL", "IHTTP", "IREST", 
		"IWebSocket", "ISOAP", "IXML", "IJSON", "IClientAuthentication", "IWsAddressing", 
		"IdentifierNormal", "IdentifierVerbatim", "LInteger", "LDecimal", "LScientific", 
		"LDateTimeOffset", "LDateTime", "LDate", "LTime", "LRegularString", "LGuid", 
		"LUtf8Bom", "LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", 
		"LMultiLineComment", "LDoubleQuoteVerbatimString", "LSingleQuoteVerbatimString", 
		"DoubleQuoteVerbatimStringLiteralStart", "SingleQuoteVerbatimStringLiteralStart", 
		"LCommentStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SoalParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SoalParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SoalParser.Eof, 0); }
		public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KNamespace || _la==TOpenBracket) {
				{
				{
				State = 262; namespaceDeclaration();
				}
				}
				State = 267;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 268; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(SoalParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(SoalParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		QualifierContext _localctx = new QualifierContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; identifier();
			State = 279;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TDot) {
				{
				{
				State = 275; Match(TDot);
				State = 276; identifier();
				}
				}
				State = 281;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; identifier();
			State = 287;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 283; Match(TComma);
				State = 284; identifier();
				}
				}
				State = 289;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierListContext : ParserRuleContext {
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public QualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierListContext qualifierList() {
		QualifierListContext _localctx = new QualifierListContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_qualifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; qualifier();
			State = 295;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 291; Match(TComma);
				State = 292; qualifier();
				}
				}
				State = 297;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_annotationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 298; annotation();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 301;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnAnnotationListContext : ParserRuleContext {
		public ReturnAnnotationContext[] returnAnnotation() {
			return GetRuleContexts<ReturnAnnotationContext>();
		}
		public ReturnAnnotationContext returnAnnotation(int i) {
			return GetRuleContext<ReturnAnnotationContext>(i);
		}
		public ReturnAnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnAnnotationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReturnAnnotationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReturnAnnotationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnAnnotationListContext returnAnnotationList() {
		ReturnAnnotationListContext _localctx = new ReturnAnnotationListContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_returnAnnotationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 303; returnAnnotation();
				}
				}
				State = 306;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TOpenBracket );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public AnnotationHeadContext annotationHead() {
			return GetRuleContext<AnnotationHeadContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(TOpenBracket);
			State = 309; annotationHead();
			State = 310; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnAnnotationContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode KReturn() { return GetToken(SoalParser.KReturn, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public AnnotationHeadContext annotationHead() {
			return GetRuleContext<AnnotationHeadContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public ReturnAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReturnAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReturnAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnAnnotationContext returnAnnotation() {
		ReturnAnnotationContext _localctx = new ReturnAnnotationContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_returnAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(TOpenBracket);
			State = 313; Match(KReturn);
			State = 314; Match(TColon);
			State = 315; annotationHead();
			State = 316; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationHeadContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public AnnotationHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationHead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationHead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationHead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationHeadContext annotationHead() {
		AnnotationHeadContext _localctx = new AnnotationHeadContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_annotationHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; name();
			State = 320;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOpenParen) {
				{
				State = 319; annotationBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationBodyContext : ParserRuleContext {
		public ITerminalNode TOpenParen() { return GetToken(SoalParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(SoalParser.TCloseParen, 0); }
		public AnnotationPropertyListContext annotationPropertyList() {
			return GetRuleContext<AnnotationPropertyListContext>(0);
		}
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_annotationBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(TOpenParen);
			State = 324;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 323; annotationPropertyList();
				}
			}

			State = 326; Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationPropertyListContext : ParserRuleContext {
		public AnnotationPropertyContext[] annotationProperty() {
			return GetRuleContexts<AnnotationPropertyContext>();
		}
		public AnnotationPropertyContext annotationProperty(int i) {
			return GetRuleContext<AnnotationPropertyContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public AnnotationPropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationPropertyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationPropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationPropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationPropertyListContext annotationPropertyList() {
		AnnotationPropertyListContext _localctx = new AnnotationPropertyListContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_annotationPropertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; annotationProperty();
			State = 333;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 329; Match(TComma);
				State = 330; annotationProperty();
				}
				}
				State = 335;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationPropertyContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public AnnotationPropertyValueContext annotationPropertyValue() {
			return GetRuleContext<AnnotationPropertyValueContext>(0);
		}
		public AnnotationPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationPropertyContext annotationProperty() {
		AnnotationPropertyContext _localctx = new AnnotationPropertyContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_annotationProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; name();
			State = 337; Match(TAssign);
			State = 338; annotationPropertyValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationPropertyValueContext : ParserRuleContext {
		public ConstantValueContext constantValue() {
			return GetRuleContext<ConstantValueContext>(0);
		}
		public TypeofValueContext typeofValue() {
			return GetRuleContext<TypeofValueContext>(0);
		}
		public AnnotationPropertyValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationPropertyValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAnnotationPropertyValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAnnotationPropertyValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationPropertyValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationPropertyValueContext annotationPropertyValue() {
		AnnotationPropertyValueContext _localctx = new AnnotationPropertyValueContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_annotationPropertyValue);
		try {
			State = 342;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KNull:
			case KTrue:
			case KFalse:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
			case LInteger:
			case LDecimal:
			case LScientific:
			case LRegularString:
			case LDoubleQuoteVerbatimString:
			case LSingleQuoteVerbatimString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340; constantValue();
				}
				break;
			case KTypeof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341; typeofValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(SoalParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public NamespaceUriContext namespaceUri() {
			return GetRuleContext<NamespaceUriContext>(0);
		}
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public NamespacePrefixContext namespacePrefix() {
			return GetRuleContext<NamespacePrefixContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOpenBracket) {
				{
				State = 344; annotationList();
				}
			}

			State = 347; Match(KNamespace);
			State = 348; qualifiedName();
			State = 349; Match(TAssign);
			State = 353;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 350; namespacePrefix();
				State = 351; Match(TColon);
				}
			}

			State = 355; namespaceUri();
			State = 356; namespaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacePrefixContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NamespacePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacePrefix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNamespacePrefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNamespacePrefix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacePrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacePrefixContext namespacePrefix() {
		NamespacePrefixContext _localctx = new NamespacePrefixContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_namespacePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceUriContext : ParserRuleContext {
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public NamespaceUriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceUri; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNamespaceUri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNamespaceUri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceUri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceUriContext namespaceUri() {
		NamespaceUriContext _localctx = new NamespaceUriContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_namespaceUri);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNamespaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNamespaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(TOpenBrace);
			State = 366;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEnum) | (1L << KStruct) | (1L << KInterface) | (1L << KBinding) | (1L << KEndpoint) | (1L << KDatabase) | (1L << KAbstract) | (1L << KComponent) | (1L << KComposite) | (1L << KAssembly) | (1L << KDeployment) | (1L << TOpenBracket))) != 0)) {
				{
				{
				State = 363; declaration();
				}
				}
				State = 368;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 369; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public DatabaseDeclarationContext databaseDeclaration() {
			return GetRuleContext<DatabaseDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ComponentDeclarationContext componentDeclaration() {
			return GetRuleContext<ComponentDeclarationContext>(0);
		}
		public CompositeDeclarationContext compositeDeclaration() {
			return GetRuleContext<CompositeDeclarationContext>(0);
		}
		public AssemblyDeclarationContext assemblyDeclaration() {
			return GetRuleContext<AssemblyDeclarationContext>(0);
		}
		public BindingDeclarationContext bindingDeclaration() {
			return GetRuleContext<BindingDeclarationContext>(0);
		}
		public EndpointDeclarationContext endpointDeclaration() {
			return GetRuleContext<EndpointDeclarationContext>(0);
		}
		public DeploymentDeclarationContext deploymentDeclaration() {
			return GetRuleContext<DeploymentDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_declaration);
		try {
			State = 381;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 371; enumDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 372; structDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 373; databaseDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 374; interfaceDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 375; componentDeclaration();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 376; compositeDeclaration();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 377; assemblyDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 378; bindingDeclaration();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 379; endpointDeclaration();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 380; deploymentDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnum() { return GetToken(SoalParser.KEnum, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public EnumBaseContext enumBase() {
			return GetRuleContext<EnumBaseContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOpenBracket) {
				{
				State = 383; annotationList();
				}
			}

			State = 386; Match(KEnum);
			State = 387; name();
			State = 390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TColon) {
				{
				State = 388; Match(TColon);
				State = 389; enumBase();
				}
			}

			State = 392; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBaseContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public EnumBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBaseContext enumBase() {
		EnumBaseContext _localctx = new EnumBaseContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_enumBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EnumLiteralsContext enumLiterals() {
			return GetRuleContext<EnumLiteralsContext>(0);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(TOpenBrace);
			State = 398;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TOpenBracket - 51)) | (1L << (IDate - 51)) | (1L << (ITime - 51)) | (1L << (IDateTime - 51)) | (1L << (ITimeSpan - 51)) | (1L << (IVersion - 51)) | (1L << (IStyle - 51)) | (1L << (IMTOM - 51)) | (1L << (ISSL - 51)) | (1L << (IHTTP - 51)) | (1L << (IREST - 51)) | (1L << (IWebSocket - 51)) | (1L << (ISOAP - 51)) | (1L << (IXML - 51)) | (1L << (IJSON - 51)) | (1L << (IClientAuthentication - 51)) | (1L << (IdentifierNormal - 51)) | (1L << (IdentifierVerbatim - 51)))) != 0)) {
				{
				State = 397; enumLiterals();
				}
			}

			State = 400; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralsContext : ParserRuleContext {
		public EnumLiteralContext[] enumLiteral() {
			return GetRuleContexts<EnumLiteralContext>();
		}
		public EnumLiteralContext enumLiteral(int i) {
			return GetRuleContext<EnumLiteralContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public EnumLiteralsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiterals; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumLiterals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumLiterals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiterals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralsContext enumLiterals() {
		EnumLiteralsContext _localctx = new EnumLiteralsContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_enumLiterals);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 402; enumLiteral();
			State = 407;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 403; Match(TComma);
					State = 404; enumLiteral();
					}
					} 
				}
				State = 409;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			State = 411;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TComma) {
				{
				State = 410; Match(TComma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public EnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnumLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnumLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralContext enumLiteral() {
		EnumLiteralContext _localctx = new EnumLiteralContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_enumLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOpenBracket) {
				{
				State = 413; annotationList();
				}
			}

			State = 416; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode KStruct() { return GetToken(SoalParser.KStruct, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOpenBracket) {
				{
				State = 418; annotationList();
				}
			}

			State = 421; Match(KStruct);
			State = 422; name();
			State = 425;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TColon) {
				{
				State = 423; Match(TColon);
				State = 424; qualifier();
				}
			}

			State = 427; structBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStructBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStructBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructBodyContext structBody() {
		StructBodyContext _localctx = new StructBodyContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_structBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; Match(TOpenBrace);
			State = 433;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				{
				State = 430; propertyDeclaration();
				}
				}
				State = 435;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 436; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_propertyDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOpenBracket) {
				{
				State = 438; annotationList();
				}
			}

			State = 441; typeReference();
			State = 442; name();
			State = 443; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseDeclarationContext : ParserRuleContext {
		public ITerminalNode KDatabase() { return GetToken(SoalParser.KDatabase, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DatabaseBodyContext databaseBody() {
			return GetRuleContext<DatabaseBodyContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public DatabaseDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseDeclarationContext databaseDeclaration() {
		DatabaseDeclarationContext _localctx = new DatabaseDeclarationContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_databaseDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOpenBracket) {
				{
				State = 445; annotationList();
				}
			}

			State = 448; Match(KDatabase);
			State = 449; name();
			State = 450; databaseBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EntityReferenceContext[] entityReference() {
			return GetRuleContexts<EntityReferenceContext>();
		}
		public EntityReferenceContext entityReference(int i) {
			return GetRuleContext<EntityReferenceContext>(i);
		}
		public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public DatabaseBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseBodyContext databaseBody() {
		DatabaseBodyContext _localctx = new DatabaseBodyContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_databaseBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; Match(TOpenBrace);
			State = 456;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KEntity) {
				{
				{
				State = 453; entityReference();
				}
				}
				State = 458;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 462;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KOneway) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KVoid) | (1L << TOpenBracket))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				{
				State = 459; operationDeclaration();
				}
				}
				State = 464;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 465; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityReferenceContext : ParserRuleContext {
		public ITerminalNode KEntity() { return GetToken(SoalParser.KEntity, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EntityReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEntityReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEntityReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityReferenceContext entityReference() {
		EntityReferenceContext _localctx = new EntityReferenceContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_entityReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; Match(KEntity);
			State = 468; qualifier();
			State = 469; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KInterface() { return GetToken(SoalParser.KInterface, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOpenBracket) {
				{
				State = 471; annotationList();
				}
			}

			State = 474; Match(KInterface);
			State = 475; name();
			State = 476; interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478; Match(TOpenBrace);
			State = 482;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KOneway) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KVoid) | (1L << TOpenBracket))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				{
				State = 479; operationDeclaration();
				}
				}
				State = 484;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 485; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public OperationHeadContext operationHead() {
			return GetRuleContext<OperationHeadContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_operationDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; operationHead();
			State = 488; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationHeadContext : ParserRuleContext {
		public OperationResultContext operationResult() {
			return GetRuleContext<OperationResultContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(SoalParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(SoalParser.TCloseParen, 0); }
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ThrowsListContext throwsList() {
			return GetRuleContext<ThrowsListContext>(0);
		}
		public OperationHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationHead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationHead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationHead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationHeadContext operationHead() {
		OperationHeadContext _localctx = new OperationHeadContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_operationHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 490; annotationList();
				}
				break;
			}
			State = 493; operationResult();
			State = 494; name();
			State = 495; Match(TOpenParen);
			State = 497;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 496; parameterList();
				}
			}

			State = 499; Match(TCloseParen);
			State = 501;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==KThrows) {
				{
				State = 500; throwsList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; parameter();
			State = 508;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 504; Match(TComma);
				State = 505; parameter();
				}
				}
				State = 510;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOpenBracket) {
				{
				State = 511; annotationList();
				}
			}

			State = 514; typeReference();
			State = 515; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationResultContext : ParserRuleContext {
		public OperationReturnTypeContext operationReturnType() {
			return GetRuleContext<OperationReturnTypeContext>(0);
		}
		public ReturnAnnotationListContext returnAnnotationList() {
			return GetRuleContext<ReturnAnnotationListContext>(0);
		}
		public OperationResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationResult; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationResult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationResult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationResultContext operationResult() {
		OperationResultContext _localctx = new OperationResultContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_operationResult);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOpenBracket) {
				{
				State = 517; returnAnnotationList();
				}
			}

			State = 520; operationReturnType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsListContext : ParserRuleContext {
		public ITerminalNode KThrows() { return GetToken(SoalParser.KThrows, 0); }
		public QualifierListContext qualifierList() {
			return GetRuleContext<QualifierListContext>(0);
		}
		public ThrowsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterThrowsList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitThrowsList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsListContext throwsList() {
		ThrowsListContext _localctx = new ThrowsListContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_throwsList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522; Match(KThrows);
			State = 523; qualifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentDeclarationContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ComponentBodyContext componentBody() {
			return GetRuleContext<ComponentBodyContext>(0);
		}
		public ITerminalNode KAbstract() { return GetToken(SoalParser.KAbstract, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public ComponentBaseContext componentBase() {
			return GetRuleContext<ComponentBaseContext>(0);
		}
		public ComponentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDeclarationContext componentDeclaration() {
		ComponentDeclarationContext _localctx = new ComponentDeclarationContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_componentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==KAbstract) {
				{
				State = 525; Match(KAbstract);
				}
			}

			State = 528; Match(KComponent);
			State = 529; name();
			State = 532;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TColon) {
				{
				State = 530; Match(TColon);
				State = 531; componentBase();
				}
			}

			State = 534; componentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentBaseContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ComponentBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentBaseContext componentBase() {
		ComponentBaseContext _localctx = new ComponentBaseContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_componentBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ComponentElementsContext componentElements() {
			return GetRuleContext<ComponentElementsContext>(0);
		}
		public ComponentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentBodyContext componentBody() {
		ComponentBodyContext _localctx = new ComponentBodyContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_componentBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; Match(TOpenBrace);
			State = 540;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 539; componentElements();
				}
			}

			State = 542; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementsContext : ParserRuleContext {
		public ComponentElementContext[] componentElement() {
			return GetRuleContexts<ComponentElementContext>();
		}
		public ComponentElementContext componentElement(int i) {
			return GetRuleContext<ComponentElementContext>(i);
		}
		public ComponentElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementsContext componentElements() {
		ComponentElementsContext _localctx = new ComponentElementsContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_componentElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 544; componentElement();
				}
				}
				State = 547;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public ComponentImplementationContext componentImplementation() {
			return GetRuleContext<ComponentImplementationContext>(0);
		}
		public ComponentLanguageContext componentLanguage() {
			return GetRuleContext<ComponentLanguageContext>(0);
		}
		public ComponentElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementContext componentElement() {
		ComponentElementContext _localctx = new ComponentElementContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_componentElement);
		try {
			State = 554;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 549; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 550; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 551; componentProperty();
				}
				break;
			case KImplementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 552; componentImplementation();
				}
				break;
			case KLanguage:
				EnterOuterAlt(_localctx, 5);
				{
				State = 553; componentLanguage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceContext : ParserRuleContext {
		public ITerminalNode KService() { return GetToken(SoalParser.KService, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ComponentServiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentService; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentService(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentService(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentService(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceContext componentService() {
		ComponentServiceContext _localctx = new ComponentServiceContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_componentService);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556; Match(KService);
			State = 557; qualifier();
			State = 559;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 558; name();
				}
			}

			State = 561; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentReferenceContext : ParserRuleContext {
		public ITerminalNode KReference() { return GetToken(SoalParser.KReference, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ComponentReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentReferenceContext componentReference() {
		ComponentReferenceContext _localctx = new ComponentReferenceContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_componentReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563; Match(KReference);
			State = 564; qualifier();
			State = 566;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 565; name();
				}
			}

			State = 568; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceBodyContext : ParserRuleContext {
		public ComponentServiceOrReferenceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceBody; } }
	 
		public ComponentServiceOrReferenceBodyContext() { }
		public virtual void CopyFrom(ComponentServiceOrReferenceBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComponentServiceOrReferenceEmptyBodyContext : ComponentServiceOrReferenceBodyContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentServiceOrReferenceEmptyBodyContext(ComponentServiceOrReferenceBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComponentServiceOrReferenceNonEmptyBodyContext : ComponentServiceOrReferenceBodyContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ComponentServiceOrReferenceElementContext[] componentServiceOrReferenceElement() {
			return GetRuleContexts<ComponentServiceOrReferenceElementContext>();
		}
		public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement(int i) {
			return GetRuleContext<ComponentServiceOrReferenceElementContext>(i);
		}
		public ComponentServiceOrReferenceNonEmptyBodyContext(ComponentServiceOrReferenceBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceNonEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceNonEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceNonEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
		ComponentServiceOrReferenceBodyContext _localctx = new ComponentServiceOrReferenceBodyContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_componentServiceOrReferenceBody);
		int _la;
		try {
			State = 579;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TSemicolon:
				_localctx = new ComponentServiceOrReferenceEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 570; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				_localctx = new ComponentServiceOrReferenceNonEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 571; Match(TOpenBrace);
				State = 575;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==KBinding) {
					{
					{
					State = 572; componentServiceOrReferenceElement();
					}
					}
					State = 577;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 578; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceElementContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentServiceOrReferenceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement() {
		ComponentServiceOrReferenceElementContext _localctx = new ComponentServiceOrReferenceElementContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_componentServiceOrReferenceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581; Match(KBinding);
			State = 582; qualifier();
			State = 583; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentPropertyContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentPropertyContext componentProperty() {
		ComponentPropertyContext _localctx = new ComponentPropertyContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_componentProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585; typeReference();
			State = 586; name();
			State = 587; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentImplementationContext : ParserRuleContext {
		public ITerminalNode KImplementation() { return GetToken(SoalParser.KImplementation, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentImplementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentImplementation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentImplementation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentImplementation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentImplementation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentImplementationContext componentImplementation() {
		ComponentImplementationContext _localctx = new ComponentImplementationContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_componentImplementation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; Match(KImplementation);
			State = 590; name();
			State = 591; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentLanguageContext : ParserRuleContext {
		public ITerminalNode KLanguage() { return GetToken(SoalParser.KLanguage, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentLanguageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentLanguage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentLanguage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentLanguage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentLanguageContext componentLanguage() {
		ComponentLanguageContext _localctx = new ComponentLanguageContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_componentLanguage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593; Match(KLanguage);
			State = 594; name();
			State = 595; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeDeclarationContext : ParserRuleContext {
		public ITerminalNode KComposite() { return GetToken(SoalParser.KComposite, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public CompositeBodyContext compositeBody() {
			return GetRuleContext<CompositeBodyContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public ComponentBaseContext componentBase() {
			return GetRuleContext<ComponentBaseContext>(0);
		}
		public CompositeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeDeclarationContext compositeDeclaration() {
		CompositeDeclarationContext _localctx = new CompositeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_compositeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597; Match(KComposite);
			State = 598; name();
			State = 601;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TColon) {
				{
				State = 599; Match(TColon);
				State = 600; componentBase();
				}
			}

			State = 603; compositeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public CompositeElementsContext compositeElements() {
			return GetRuleContext<CompositeElementsContext>(0);
		}
		public CompositeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeBodyContext compositeBody() {
		CompositeBodyContext _localctx = new CompositeBodyContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_compositeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605; Match(TOpenBrace);
			State = 607;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0)) {
				{
				State = 606; compositeElements();
				}
			}

			State = 609; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyDeclarationContext : ParserRuleContext {
		public ITerminalNode KAssembly() { return GetToken(SoalParser.KAssembly, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public CompositeBodyContext compositeBody() {
			return GetRuleContext<CompositeBodyContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public ComponentBaseContext componentBase() {
			return GetRuleContext<ComponentBaseContext>(0);
		}
		public AssemblyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAssemblyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAssemblyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyDeclarationContext assemblyDeclaration() {
		AssemblyDeclarationContext _localctx = new AssemblyDeclarationContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_assemblyDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611; Match(KAssembly);
			State = 612; name();
			State = 615;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TColon) {
				{
				State = 613; Match(TColon);
				State = 614; componentBase();
				}
			}

			State = 617; compositeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementsContext : ParserRuleContext {
		public CompositeElementContext[] compositeElement() {
			return GetRuleContexts<CompositeElementContext>();
		}
		public CompositeElementContext compositeElement(int i) {
			return GetRuleContext<CompositeElementContext>(i);
		}
		public CompositeElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementsContext compositeElements() {
		CompositeElementsContext _localctx = new CompositeElementsContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_compositeElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 619; compositeElement();
				}
				}
				State = 622;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)) | (1L << (IdentifierNormal - 87)) | (1L << (IdentifierVerbatim - 87)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public ComponentImplementationContext componentImplementation() {
			return GetRuleContext<ComponentImplementationContext>(0);
		}
		public ComponentLanguageContext componentLanguage() {
			return GetRuleContext<ComponentLanguageContext>(0);
		}
		public CompositeComponentContext compositeComponent() {
			return GetRuleContext<CompositeComponentContext>(0);
		}
		public CompositeWireContext compositeWire() {
			return GetRuleContext<CompositeWireContext>(0);
		}
		public CompositeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementContext compositeElement() {
		CompositeElementContext _localctx = new CompositeElementContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_compositeElement);
		try {
			State = 631;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 625; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 626; componentProperty();
				}
				break;
			case KImplementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 627; componentImplementation();
				}
				break;
			case KLanguage:
				EnterOuterAlt(_localctx, 5);
				{
				State = 628; componentLanguage();
				}
				break;
			case KComponent:
				EnterOuterAlt(_localctx, 6);
				{
				State = 629; compositeComponent();
				}
				break;
			case KWire:
				EnterOuterAlt(_localctx, 7);
				{
				State = 630; compositeWire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeComponentContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeComponentContext compositeComponent() {
		CompositeComponentContext _localctx = new CompositeComponentContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_compositeComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633; Match(KComponent);
			State = 634; qualifier();
			State = 635; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeWireContext : ParserRuleContext {
		public ITerminalNode KWire() { return GetToken(SoalParser.KWire, 0); }
		public WireSourceContext wireSource() {
			return GetRuleContext<WireSourceContext>(0);
		}
		public ITerminalNode KTo() { return GetToken(SoalParser.KTo, 0); }
		public WireTargetContext wireTarget() {
			return GetRuleContext<WireTargetContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeWireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeWire; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeWire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeWire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeWire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeWireContext compositeWire() {
		CompositeWireContext _localctx = new CompositeWireContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_compositeWire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637; Match(KWire);
			State = 638; wireSource();
			State = 639; Match(KTo);
			State = 640; wireTarget();
			State = 641; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireSourceContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public WireSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireSourceContext wireSource() {
		WireSourceContext _localctx = new WireSourceContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_wireSource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireTargetContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public WireTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireTargetContext wireTarget() {
		WireTargetContext _localctx = new WireTargetContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_wireTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentDeclarationContext : ParserRuleContext {
		public ITerminalNode KDeployment() { return GetToken(SoalParser.KDeployment, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DeploymentBodyContext deploymentBody() {
			return GetRuleContext<DeploymentBodyContext>(0);
		}
		public DeploymentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentDeclarationContext deploymentDeclaration() {
		DeploymentDeclarationContext _localctx = new DeploymentDeclarationContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_deploymentDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647; Match(KDeployment);
			State = 648; name();
			State = 649; deploymentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public DeploymentElementsContext deploymentElements() {
			return GetRuleContext<DeploymentElementsContext>(0);
		}
		public DeploymentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentBodyContext deploymentBody() {
		DeploymentBodyContext _localctx = new DeploymentBodyContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_deploymentBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651; Match(TOpenBrace);
			State = 653;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==KWire || _la==KEnvironment) {
				{
				State = 652; deploymentElements();
				}
			}

			State = 655; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentElementsContext : ParserRuleContext {
		public DeploymentElementContext[] deploymentElement() {
			return GetRuleContexts<DeploymentElementContext>();
		}
		public DeploymentElementContext deploymentElement(int i) {
			return GetRuleContext<DeploymentElementContext>(i);
		}
		public DeploymentElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentElementsContext deploymentElements() {
		DeploymentElementsContext _localctx = new DeploymentElementsContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_deploymentElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 657; deploymentElement();
				}
				}
				State = 660;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==KWire || _la==KEnvironment );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentElementContext : ParserRuleContext {
		public EnvironmentDeclarationContext environmentDeclaration() {
			return GetRuleContext<EnvironmentDeclarationContext>(0);
		}
		public CompositeWireContext compositeWire() {
			return GetRuleContext<CompositeWireContext>(0);
		}
		public DeploymentElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentElementContext deploymentElement() {
		DeploymentElementContext _localctx = new DeploymentElementContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_deploymentElement);
		try {
			State = 664;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KEnvironment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 662; environmentDeclaration();
				}
				break;
			case KWire:
				EnterOuterAlt(_localctx, 2);
				{
				State = 663; compositeWire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvironmentDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnvironment() { return GetToken(SoalParser.KEnvironment, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EnvironmentBodyContext environmentBody() {
			return GetRuleContext<EnvironmentBodyContext>(0);
		}
		public EnvironmentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_environmentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnvironmentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnvironmentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnvironmentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnvironmentDeclarationContext environmentDeclaration() {
		EnvironmentDeclarationContext _localctx = new EnvironmentDeclarationContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_environmentDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666; Match(KEnvironment);
			State = 667; name();
			State = 668; environmentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvironmentBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public RuntimeDeclarationContext runtimeDeclaration() {
			return GetRuleContext<RuntimeDeclarationContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public RuntimeReferenceContext[] runtimeReference() {
			return GetRuleContexts<RuntimeReferenceContext>();
		}
		public RuntimeReferenceContext runtimeReference(int i) {
			return GetRuleContext<RuntimeReferenceContext>(i);
		}
		public EnvironmentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_environmentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnvironmentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnvironmentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnvironmentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnvironmentBodyContext environmentBody() {
		EnvironmentBodyContext _localctx = new EnvironmentBodyContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_environmentBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670; Match(TOpenBrace);
			State = 671; runtimeDeclaration();
			State = 675;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KDatabase || _la==KAssembly) {
				{
				{
				State = 672; runtimeReference();
				}
				}
				State = 677;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 678; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeDeclarationContext : ParserRuleContext {
		public ITerminalNode KRuntime() { return GetToken(SoalParser.KRuntime, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public RuntimeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRuntimeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRuntimeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeDeclarationContext runtimeDeclaration() {
		RuntimeDeclarationContext _localctx = new RuntimeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_runtimeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; Match(KRuntime);
			State = 681; name();
			State = 682; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeReferenceContext : ParserRuleContext {
		public AssemblyReferenceContext assemblyReference() {
			return GetRuleContext<AssemblyReferenceContext>(0);
		}
		public DatabaseReferenceContext databaseReference() {
			return GetRuleContext<DatabaseReferenceContext>(0);
		}
		public RuntimeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRuntimeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRuntimeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeReferenceContext runtimeReference() {
		RuntimeReferenceContext _localctx = new RuntimeReferenceContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_runtimeReference);
		try {
			State = 686;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KAssembly:
				EnterOuterAlt(_localctx, 1);
				{
				State = 684; assemblyReference();
				}
				break;
			case KDatabase:
				EnterOuterAlt(_localctx, 2);
				{
				State = 685; databaseReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyReferenceContext : ParserRuleContext {
		public ITerminalNode KAssembly() { return GetToken(SoalParser.KAssembly, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public AssemblyReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAssemblyReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAssemblyReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyReferenceContext assemblyReference() {
		AssemblyReferenceContext _localctx = new AssemblyReferenceContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_assemblyReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688; Match(KAssembly);
			State = 689; qualifier();
			State = 690; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseReferenceContext : ParserRuleContext {
		public ITerminalNode KDatabase() { return GetToken(SoalParser.KDatabase, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public DatabaseReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseReferenceContext databaseReference() {
		DatabaseReferenceContext _localctx = new DatabaseReferenceContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_databaseReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692; Match(KDatabase);
			State = 693; qualifier();
			State = 694; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingDeclarationContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public BindingBodyContext bindingBody() {
			return GetRuleContext<BindingBodyContext>(0);
		}
		public BindingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingDeclarationContext bindingDeclaration() {
		BindingDeclarationContext _localctx = new BindingDeclarationContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_bindingDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696; Match(KBinding);
			State = 697; name();
			State = 698; bindingBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public BindingLayersContext bindingLayers() {
			return GetRuleContext<BindingLayersContext>(0);
		}
		public BindingBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingBodyContext bindingBody() {
		BindingBodyContext _localctx = new BindingBodyContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_bindingBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700; Match(TOpenBrace);
			State = 702;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==KTransport) {
				{
				State = 701; bindingLayers();
				}
			}

			State = 704; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingLayersContext : ParserRuleContext {
		public TransportLayerContext transportLayer() {
			return GetRuleContext<TransportLayerContext>(0);
		}
		public EncodingLayerContext[] encodingLayer() {
			return GetRuleContexts<EncodingLayerContext>();
		}
		public EncodingLayerContext encodingLayer(int i) {
			return GetRuleContext<EncodingLayerContext>(i);
		}
		public ProtocolLayerContext[] protocolLayer() {
			return GetRuleContexts<ProtocolLayerContext>();
		}
		public ProtocolLayerContext protocolLayer(int i) {
			return GetRuleContext<ProtocolLayerContext>(i);
		}
		public BindingLayersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingLayers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingLayers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingLayers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingLayers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingLayersContext bindingLayers() {
		BindingLayersContext _localctx = new BindingLayersContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_bindingLayers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706; transportLayer();
			State = 708;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 707; encodingLayer();
				}
				}
				State = 710;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==KEncoding );
			State = 715;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KProtocol) {
				{
				{
				State = 712; protocolLayer();
				}
				}
				State = 717;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransportLayerContext : ParserRuleContext {
		public HttpTransportLayerContext httpTransportLayer() {
			return GetRuleContext<HttpTransportLayerContext>(0);
		}
		public RestTransportLayerContext restTransportLayer() {
			return GetRuleContext<RestTransportLayerContext>(0);
		}
		public WebSocketTransportLayerContext webSocketTransportLayer() {
			return GetRuleContext<WebSocketTransportLayerContext>(0);
		}
		public TransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransportLayerContext transportLayer() {
		TransportLayerContext _localctx = new TransportLayerContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_transportLayer);
		try {
			State = 721;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 718; httpTransportLayer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 719; restTransportLayer();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 720; webSocketTransportLayer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IHTTP() { return GetToken(SoalParser.IHTTP, 0); }
		public HttpTransportLayerBodyContext httpTransportLayerBody() {
			return GetRuleContext<HttpTransportLayerBodyContext>(0);
		}
		public HttpTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpTransportLayerContext httpTransportLayer() {
		HttpTransportLayerContext _localctx = new HttpTransportLayerContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_httpTransportLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; Match(KTransport);
			State = 724; Match(IHTTP);
			State = 725; httpTransportLayerBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpTransportLayerBodyContext : ParserRuleContext {
		public HttpTransportLayerBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpTransportLayerBody; } }
	 
		public HttpTransportLayerBodyContext() { }
		public virtual void CopyFrom(HttpTransportLayerBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HttpTransportLayerEmptyBodyContext : HttpTransportLayerBodyContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public HttpTransportLayerEmptyBodyContext(HttpTransportLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpTransportLayerEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpTransportLayerEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpTransportLayerEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HttpTransportLayerNonEmptyBodyContext : HttpTransportLayerBodyContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public HttpTransportLayerPropertiesContext[] httpTransportLayerProperties() {
			return GetRuleContexts<HttpTransportLayerPropertiesContext>();
		}
		public HttpTransportLayerPropertiesContext httpTransportLayerProperties(int i) {
			return GetRuleContext<HttpTransportLayerPropertiesContext>(i);
		}
		public HttpTransportLayerNonEmptyBodyContext(HttpTransportLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpTransportLayerNonEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpTransportLayerNonEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpTransportLayerNonEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpTransportLayerBodyContext httpTransportLayerBody() {
		HttpTransportLayerBodyContext _localctx = new HttpTransportLayerBodyContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_httpTransportLayerBody);
		int _la;
		try {
			State = 736;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TSemicolon:
				_localctx = new HttpTransportLayerEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 727; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				_localctx = new HttpTransportLayerNonEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 728; Match(TOpenBrace);
				State = 732;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ISSL || _la==IClientAuthentication) {
					{
					{
					State = 729; httpTransportLayerProperties();
					}
					}
					State = 734;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 735; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IREST() { return GetToken(SoalParser.IREST, 0); }
		public RestTransportLayerBodyContext restTransportLayerBody() {
			return GetRuleContext<RestTransportLayerBodyContext>(0);
		}
		public RestTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRestTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRestTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestTransportLayerContext restTransportLayer() {
		RestTransportLayerContext _localctx = new RestTransportLayerContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_restTransportLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738; Match(KTransport);
			State = 739; Match(IREST);
			State = 740; restTransportLayerBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestTransportLayerBodyContext : ParserRuleContext {
		public RestTransportLayerBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restTransportLayerBody; } }
	 
		public RestTransportLayerBodyContext() { }
		public virtual void CopyFrom(RestTransportLayerBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RestTransportLayerEmptyBodyContext : RestTransportLayerBodyContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public RestTransportLayerEmptyBodyContext(RestTransportLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRestTransportLayerEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRestTransportLayerEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestTransportLayerEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RestTransportLayerNonEmptyBodyContext : RestTransportLayerBodyContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public RestTransportLayerNonEmptyBodyContext(RestTransportLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRestTransportLayerNonEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRestTransportLayerNonEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestTransportLayerNonEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestTransportLayerBodyContext restTransportLayerBody() {
		RestTransportLayerBodyContext _localctx = new RestTransportLayerBodyContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_restTransportLayerBody);
		try {
			State = 745;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TSemicolon:
				_localctx = new RestTransportLayerEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 742; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				_localctx = new RestTransportLayerNonEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 743; Match(TOpenBrace);
				State = 744; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WebSocketTransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public ITerminalNode IWebSocket() { return GetToken(SoalParser.IWebSocket, 0); }
		public WebSocketTransportLayerBodyContext webSocketTransportLayerBody() {
			return GetRuleContext<WebSocketTransportLayerBodyContext>(0);
		}
		public WebSocketTransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_webSocketTransportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWebSocketTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWebSocketTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWebSocketTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WebSocketTransportLayerContext webSocketTransportLayer() {
		WebSocketTransportLayerContext _localctx = new WebSocketTransportLayerContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_webSocketTransportLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747; Match(KTransport);
			State = 748; Match(IWebSocket);
			State = 749; webSocketTransportLayerBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WebSocketTransportLayerBodyContext : ParserRuleContext {
		public WebSocketTransportLayerBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_webSocketTransportLayerBody; } }
	 
		public WebSocketTransportLayerBodyContext() { }
		public virtual void CopyFrom(WebSocketTransportLayerBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WebSocketTransportLayerEmptyBodyContext : WebSocketTransportLayerBodyContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public WebSocketTransportLayerEmptyBodyContext(WebSocketTransportLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWebSocketTransportLayerEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWebSocketTransportLayerEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWebSocketTransportLayerEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WebSocketTransportLayerNonEmptyBodyContext : WebSocketTransportLayerBodyContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public WebSocketTransportLayerNonEmptyBodyContext(WebSocketTransportLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWebSocketTransportLayerNonEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWebSocketTransportLayerNonEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWebSocketTransportLayerNonEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WebSocketTransportLayerBodyContext webSocketTransportLayerBody() {
		WebSocketTransportLayerBodyContext _localctx = new WebSocketTransportLayerBodyContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_webSocketTransportLayerBody);
		try {
			State = 754;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TSemicolon:
				_localctx = new WebSocketTransportLayerEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 751; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				_localctx = new WebSocketTransportLayerNonEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 752; Match(TOpenBrace);
				State = 753; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpTransportLayerPropertiesContext : ParserRuleContext {
		public HttpSslPropertyContext httpSslProperty() {
			return GetRuleContext<HttpSslPropertyContext>(0);
		}
		public HttpClientAuthenticationPropertyContext httpClientAuthenticationProperty() {
			return GetRuleContext<HttpClientAuthenticationPropertyContext>(0);
		}
		public HttpTransportLayerPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpTransportLayerProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpTransportLayerProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpTransportLayerProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpTransportLayerProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpTransportLayerPropertiesContext httpTransportLayerProperties() {
		HttpTransportLayerPropertiesContext _localctx = new HttpTransportLayerPropertiesContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_httpTransportLayerProperties);
		try {
			State = 758;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ISSL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 756; httpSslProperty();
				}
				break;
			case IClientAuthentication:
				EnterOuterAlt(_localctx, 2);
				{
				State = 757; httpClientAuthenticationProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpSslPropertyContext : ParserRuleContext {
		public ITerminalNode ISSL() { return GetToken(SoalParser.ISSL, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public HttpSslPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpSslProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpSslProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpSslProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpSslProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpSslPropertyContext httpSslProperty() {
		HttpSslPropertyContext _localctx = new HttpSslPropertyContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_httpSslProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; Match(ISSL);
			State = 761; Match(TAssign);
			State = 762; booleanLiteral();
			State = 763; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpClientAuthenticationPropertyContext : ParserRuleContext {
		public ITerminalNode IClientAuthentication() { return GetToken(SoalParser.IClientAuthentication, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public HttpClientAuthenticationPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpClientAuthenticationProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterHttpClientAuthenticationProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitHttpClientAuthenticationProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpClientAuthenticationProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpClientAuthenticationPropertyContext httpClientAuthenticationProperty() {
		HttpClientAuthenticationPropertyContext _localctx = new HttpClientAuthenticationPropertyContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_httpClientAuthenticationProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765; Match(IClientAuthentication);
			State = 766; Match(TAssign);
			State = 767; booleanLiteral();
			State = 768; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingLayerContext : ParserRuleContext {
		public SoapEncodingLayerContext soapEncodingLayer() {
			return GetRuleContext<SoapEncodingLayerContext>(0);
		}
		public XmlEncodingLayerContext xmlEncodingLayer() {
			return GetRuleContext<XmlEncodingLayerContext>(0);
		}
		public JsonEncodingLayerContext jsonEncodingLayer() {
			return GetRuleContext<JsonEncodingLayerContext>(0);
		}
		public EncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingLayerContext encodingLayer() {
		EncodingLayerContext _localctx = new EncodingLayerContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_encodingLayer);
		try {
			State = 773;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 770; soapEncodingLayer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 771; xmlEncodingLayer();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 772; jsonEncodingLayer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode ISOAP() { return GetToken(SoalParser.ISOAP, 0); }
		public SoapEncodingLayerBodyContext soapEncodingLayerBody() {
			return GetRuleContext<SoapEncodingLayerBodyContext>(0);
		}
		public SoapEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapEncodingLayerContext soapEncodingLayer() {
		SoapEncodingLayerContext _localctx = new SoapEncodingLayerContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_soapEncodingLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775; Match(KEncoding);
			State = 776; Match(ISOAP);
			State = 777; soapEncodingLayerBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapEncodingLayerBodyContext : ParserRuleContext {
		public SoapEncodingLayerBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapEncodingLayerBody; } }
	 
		public SoapEncodingLayerBodyContext() { }
		public virtual void CopyFrom(SoapEncodingLayerBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SoapEncodingLayerEmptyBodyContext : SoapEncodingLayerBodyContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapEncodingLayerEmptyBodyContext(SoapEncodingLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapEncodingLayerEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapEncodingLayerEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapEncodingLayerEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SoapEncodingLayerNonEmptyBodyContext : SoapEncodingLayerBodyContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public SoapEncodingPropertiesContext[] soapEncodingProperties() {
			return GetRuleContexts<SoapEncodingPropertiesContext>();
		}
		public SoapEncodingPropertiesContext soapEncodingProperties(int i) {
			return GetRuleContext<SoapEncodingPropertiesContext>(i);
		}
		public SoapEncodingLayerNonEmptyBodyContext(SoapEncodingLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapEncodingLayerNonEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapEncodingLayerNonEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapEncodingLayerNonEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapEncodingLayerBodyContext soapEncodingLayerBody() {
		SoapEncodingLayerBodyContext _localctx = new SoapEncodingLayerBodyContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_soapEncodingLayerBody);
		int _la;
		try {
			State = 788;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TSemicolon:
				_localctx = new SoapEncodingLayerEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 779; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				_localctx = new SoapEncodingLayerNonEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 780; Match(TOpenBrace);
				State = 784;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (IVersion - 91)) | (1L << (IStyle - 91)) | (1L << (IMTOM - 91)))) != 0)) {
					{
					{
					State = 781; soapEncodingProperties();
					}
					}
					State = 786;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 787; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode IXML() { return GetToken(SoalParser.IXML, 0); }
		public XmlEncodingLayerBodyContext xmlEncodingLayerBody() {
			return GetRuleContext<XmlEncodingLayerBodyContext>(0);
		}
		public XmlEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterXmlEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitXmlEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlEncodingLayerContext xmlEncodingLayer() {
		XmlEncodingLayerContext _localctx = new XmlEncodingLayerContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_xmlEncodingLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790; Match(KEncoding);
			State = 791; Match(IXML);
			State = 792; xmlEncodingLayerBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlEncodingLayerBodyContext : ParserRuleContext {
		public XmlEncodingLayerBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlEncodingLayerBody; } }
	 
		public XmlEncodingLayerBodyContext() { }
		public virtual void CopyFrom(XmlEncodingLayerBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class XmlEncodingLayerEmptyBodyContext : XmlEncodingLayerBodyContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public XmlEncodingLayerEmptyBodyContext(XmlEncodingLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterXmlEncodingLayerEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitXmlEncodingLayerEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlEncodingLayerEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XmlEncodingLayerNonEmptyBodyContext : XmlEncodingLayerBodyContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public XmlEncodingLayerNonEmptyBodyContext(XmlEncodingLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterXmlEncodingLayerNonEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitXmlEncodingLayerNonEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlEncodingLayerNonEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlEncodingLayerBodyContext xmlEncodingLayerBody() {
		XmlEncodingLayerBodyContext _localctx = new XmlEncodingLayerBodyContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_xmlEncodingLayerBody);
		try {
			State = 797;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TSemicolon:
				_localctx = new XmlEncodingLayerEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 794; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				_localctx = new XmlEncodingLayerNonEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 795; Match(TOpenBrace);
				State = 796; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonEncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public ITerminalNode IJSON() { return GetToken(SoalParser.IJSON, 0); }
		public JsonEncodingLayerBodyContext jsonEncodingLayerBody() {
			return GetRuleContext<JsonEncodingLayerBodyContext>(0);
		}
		public JsonEncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonEncodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterJsonEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitJsonEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonEncodingLayerContext jsonEncodingLayer() {
		JsonEncodingLayerContext _localctx = new JsonEncodingLayerContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_jsonEncodingLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799; Match(KEncoding);
			State = 800; Match(IJSON);
			State = 801; jsonEncodingLayerBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonEncodingLayerBodyContext : ParserRuleContext {
		public JsonEncodingLayerBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonEncodingLayerBody; } }
	 
		public JsonEncodingLayerBodyContext() { }
		public virtual void CopyFrom(JsonEncodingLayerBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JsonEncodingLayerEmptyBodyContext : JsonEncodingLayerBodyContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public JsonEncodingLayerEmptyBodyContext(JsonEncodingLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterJsonEncodingLayerEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitJsonEncodingLayerEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEncodingLayerEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonEncodingLayerNonEmptyBodyContext : JsonEncodingLayerBodyContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public JsonEncodingLayerNonEmptyBodyContext(JsonEncodingLayerBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterJsonEncodingLayerNonEmptyBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitJsonEncodingLayerNonEmptyBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEncodingLayerNonEmptyBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonEncodingLayerBodyContext jsonEncodingLayerBody() {
		JsonEncodingLayerBodyContext _localctx = new JsonEncodingLayerBodyContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_jsonEncodingLayerBody);
		try {
			State = 806;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TSemicolon:
				_localctx = new JsonEncodingLayerEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 803; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				_localctx = new JsonEncodingLayerNonEmptyBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 804; Match(TOpenBrace);
				State = 805; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapEncodingPropertiesContext : ParserRuleContext {
		public SoapVersionPropertyContext soapVersionProperty() {
			return GetRuleContext<SoapVersionPropertyContext>(0);
		}
		public SoapMtomPropertyContext soapMtomProperty() {
			return GetRuleContext<SoapMtomPropertyContext>(0);
		}
		public SoapStylePropertyContext soapStyleProperty() {
			return GetRuleContext<SoapStylePropertyContext>(0);
		}
		public SoapEncodingPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapEncodingProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapEncodingProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapEncodingProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapEncodingProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapEncodingPropertiesContext soapEncodingProperties() {
		SoapEncodingPropertiesContext _localctx = new SoapEncodingPropertiesContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_soapEncodingProperties);
		try {
			State = 811;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IVersion:
				EnterOuterAlt(_localctx, 1);
				{
				State = 808; soapVersionProperty();
				}
				break;
			case IMTOM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 809; soapMtomProperty();
				}
				break;
			case IStyle:
				EnterOuterAlt(_localctx, 3);
				{
				State = 810; soapStyleProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapVersionPropertyContext : ParserRuleContext {
		public ITerminalNode IVersion() { return GetToken(SoalParser.IVersion, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapVersionPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapVersionProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapVersionProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapVersionProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapVersionProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapVersionPropertyContext soapVersionProperty() {
		SoapVersionPropertyContext _localctx = new SoapVersionPropertyContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_soapVersionProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813; Match(IVersion);
			State = 814; Match(TAssign);
			State = 815; identifier();
			State = 816; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapMtomPropertyContext : ParserRuleContext {
		public ITerminalNode IMTOM() { return GetToken(SoalParser.IMTOM, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapMtomPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapMtomProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapMtomProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapMtomProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapMtomProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapMtomPropertyContext soapMtomProperty() {
		SoapMtomPropertyContext _localctx = new SoapMtomPropertyContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_soapMtomProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818; Match(IMTOM);
			State = 819; Match(TAssign);
			State = 820; booleanLiteral();
			State = 821; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoapStylePropertyContext : ParserRuleContext {
		public ITerminalNode IStyle() { return GetToken(SoalParser.IStyle, 0); }
		public ITerminalNode TAssign() { return GetToken(SoalParser.TAssign, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public SoapStylePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soapStyleProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSoapStyleProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSoapStyleProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoapStyleProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoapStylePropertyContext soapStyleProperty() {
		SoapStylePropertyContext _localctx = new SoapStylePropertyContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_soapStyleProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; Match(IStyle);
			State = 824; Match(TAssign);
			State = 825; identifier();
			State = 826; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerContext : ParserRuleContext {
		public ITerminalNode KProtocol() { return GetToken(SoalParser.KProtocol, 0); }
		public ProtocolLayerKindContext protocolLayerKind() {
			return GetRuleContext<ProtocolLayerKindContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ProtocolLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerContext protocolLayer() {
		ProtocolLayerContext _localctx = new ProtocolLayerContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_protocolLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 828; Match(KProtocol);
			State = 829; protocolLayerKind();
			State = 830; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerKindContext : ParserRuleContext {
		public WsAddressingContext wsAddressing() {
			return GetRuleContext<WsAddressingContext>(0);
		}
		public ProtocolLayerKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayerKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayerKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayerKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayerKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerKindContext protocolLayerKind() {
		ProtocolLayerKindContext _localctx = new ProtocolLayerKindContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_protocolLayerKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832; wsAddressing();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsAddressingContext : ParserRuleContext {
		public ITerminalNode IWsAddressing() { return GetToken(SoalParser.IWsAddressing, 0); }
		public WsAddressingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wsAddressing; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWsAddressing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWsAddressing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWsAddressing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsAddressingContext wsAddressing() {
		WsAddressingContext _localctx = new WsAddressingContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_wsAddressing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834; Match(IWsAddressing);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointDeclarationContext : ParserRuleContext {
		public ITerminalNode KEndpoint() { return GetToken(SoalParser.KEndpoint, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public EndpointBodyContext endpointBody() {
			return GetRuleContext<EndpointBodyContext>(0);
		}
		public EndpointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointDeclarationContext endpointDeclaration() {
		EndpointDeclarationContext _localctx = new EndpointDeclarationContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_endpointDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836; Match(KEndpoint);
			State = 837; name();
			State = 838; Match(TColon);
			State = 839; qualifier();
			State = 840; endpointBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EndpointPropertiesContext endpointProperties() {
			return GetRuleContext<EndpointPropertiesContext>(0);
		}
		public EndpointBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointBodyContext endpointBody() {
		EndpointBodyContext _localctx = new EndpointBodyContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_endpointBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842; Match(TOpenBrace);
			State = 844;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==KBinding || _la==KAddress) {
				{
				State = 843; endpointProperties();
				}
			}

			State = 846; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertiesContext : ParserRuleContext {
		public EndpointPropertyContext[] endpointProperty() {
			return GetRuleContexts<EndpointPropertyContext>();
		}
		public EndpointPropertyContext endpointProperty(int i) {
			return GetRuleContext<EndpointPropertyContext>(i);
		}
		public EndpointPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertiesContext endpointProperties() {
		EndpointPropertiesContext _localctx = new EndpointPropertiesContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_endpointProperties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 848; endpointProperty();
				}
				}
				State = 851;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==KBinding || _la==KAddress );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertyContext : ParserRuleContext {
		public EndpointBindingPropertyContext endpointBindingProperty() {
			return GetRuleContext<EndpointBindingPropertyContext>(0);
		}
		public EndpointAddressPropertyContext endpointAddressProperty() {
			return GetRuleContext<EndpointAddressPropertyContext>(0);
		}
		public EndpointPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertyContext endpointProperty() {
		EndpointPropertyContext _localctx = new EndpointPropertyContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_endpointProperty);
		try {
			State = 855;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KBinding:
				EnterOuterAlt(_localctx, 1);
				{
				State = 853; endpointBindingProperty();
				}
				break;
			case KAddress:
				EnterOuterAlt(_localctx, 2);
				{
				State = 854; endpointAddressProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointBindingPropertyContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointBindingPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointBindingProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointBindingProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointBindingProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointBindingProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointBindingPropertyContext endpointBindingProperty() {
		EndpointBindingPropertyContext _localctx = new EndpointBindingPropertyContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_endpointBindingProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857; Match(KBinding);
			State = 858; qualifier();
			State = 859; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointAddressPropertyContext : ParserRuleContext {
		public ITerminalNode KAddress() { return GetToken(SoalParser.KAddress, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointAddressPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointAddressProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointAddressProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointAddressProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointAddressProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointAddressPropertyContext endpointAddressProperty() {
		EndpointAddressPropertyContext _localctx = new EndpointAddressPropertyContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_endpointAddressProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861; Match(KAddress);
			State = 862; stringLiteral();
			State = 863; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_returnType);
		try {
			State = 867;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVoid:
				EnterOuterAlt(_localctx, 1);
				{
				State = 865; voidType();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 866; typeReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public NonNullableArrayTypeContext nonNullableArrayType() {
			return GetRuleContext<NonNullableArrayTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public NulledTypeContext nulledType() {
			return GetRuleContext<NulledTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_typeReference);
		try {
			State = 873;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 869; nonNullableArrayType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 870; arrayType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 871; simpleType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 872; nulledType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_simpleType);
		try {
			State = 878;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 875; valueType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 876; objectType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 877; qualifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NulledTypeContext : ParserRuleContext {
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public NonNullableTypeContext nonNullableType() {
			return GetRuleContext<NonNullableTypeContext>(0);
		}
		public NulledTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulledType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNulledType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNulledType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNulledType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NulledTypeContext nulledType() {
		NulledTypeContext _localctx = new NulledTypeContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_nulledType);
		try {
			State = 882;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 880; nullableType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 881; nonNullableType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_referenceType);
		try {
			State = 886;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KObject:
			case KString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 884; objectType();
				}
				break;
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 885; qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(SoalParser.KObject, 0); }
		public ITerminalNode KString() { return GetToken(SoalParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			_la = _input.La(1);
			if ( !(_la==KObject || _la==KString) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(SoalParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(SoalParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(SoalParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(SoalParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(SoalParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(SoalParser.KBool, 0); }
		public ITerminalNode IDate() { return GetToken(SoalParser.IDate, 0); }
		public ITerminalNode ITime() { return GetToken(SoalParser.ITime, 0); }
		public ITerminalNode IDateTime() { return GetToken(SoalParser.IDateTime, 0); }
		public ITerminalNode ITimeSpan() { return GetToken(SoalParser.ITimeSpan, 0); }
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterValueType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitValueType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		ValueTypeContext _localctx = new ValueTypeContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_valueType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890;
			_la = _input.La(1);
			if ( !(((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & ((1L << (KInt - 35)) | (1L << (KLong - 35)) | (1L << (KFloat - 35)) | (1L << (KDouble - 35)) | (1L << (KByte - 35)) | (1L << (KBool - 35)) | (1L << (IDate - 35)) | (1L << (ITime - 35)) | (1L << (IDateTime - 35)) | (1L << (ITimeSpan - 35)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(SoalParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnewayTypeContext : ParserRuleContext {
		public ITerminalNode KOneway() { return GetToken(SoalParser.KOneway, 0); }
		public OnewayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onewayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOnewayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOnewayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnewayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnewayTypeContext onewayType() {
		OnewayTypeContext _localctx = new OnewayTypeContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_onewayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894; Match(KOneway);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationReturnTypeContext : ParserRuleContext {
		public OnewayTypeContext onewayType() {
			return GetRuleContext<OnewayTypeContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public OperationReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationReturnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationReturnTypeContext operationReturnType() {
		OperationReturnTypeContext _localctx = new OperationReturnTypeContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_operationReturnType);
		try {
			State = 899;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KOneway:
				EnterOuterAlt(_localctx, 1);
				{
				State = 896; onewayType();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 897; voidType();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 898; typeReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(SoalParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901; valueType();
			State = 902; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNullableTypeContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ITerminalNode TExclamation() { return GetToken(SoalParser.TExclamation, 0); }
		public NonNullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNonNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNonNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonNullableTypeContext nonNullableType() {
		NonNullableTypeContext _localctx = new NonNullableTypeContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_nonNullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904; referenceType();
			State = 905; Match(TExclamation);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNullableArrayTypeContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ITerminalNode TExclamation() { return GetToken(SoalParser.TExclamation, 0); }
		public NonNullableArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNullableArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNonNullableArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNonNullableArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonNullableArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonNullableArrayTypeContext nonNullableArrayType() {
		NonNullableArrayTypeContext _localctx = new NonNullableArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_nonNullableArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907; arrayType();
			State = 908; Match(TExclamation);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public SimpleArrayTypeContext simpleArrayType() {
			return GetRuleContext<SimpleArrayTypeContext>(0);
		}
		public NulledArrayTypeContext nulledArrayType() {
			return GetRuleContext<NulledArrayTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_arrayType);
		try {
			State = 912;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 910; simpleArrayType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 911; nulledArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleArrayTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public SimpleArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSimpleArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSimpleArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleArrayTypeContext simpleArrayType() {
		SimpleArrayTypeContext _localctx = new SimpleArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_simpleArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914; simpleType();
			State = 915; Match(TOpenBracket);
			State = 916; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NulledArrayTypeContext : ParserRuleContext {
		public NulledTypeContext nulledType() {
			return GetRuleContext<NulledTypeContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public NulledArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulledArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNulledArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNulledArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNulledArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NulledArrayTypeContext nulledArrayType() {
		NulledArrayTypeContext _localctx = new NulledArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_nulledArrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918; nulledType();
			State = 919; Match(TOpenBracket);
			State = 920; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantValueContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstantValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterConstantValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitConstantValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantValueContext constantValue() {
		ConstantValueContext _localctx = new ConstantValueContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_constantValue);
		try {
			State = 924;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KNull:
			case KTrue:
			case KFalse:
			case LInteger:
			case LDecimal:
			case LScientific:
			case LRegularString:
			case LDoubleQuoteVerbatimString:
			case LSingleQuoteVerbatimString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 922; literal();
				}
				break;
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 923; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeofValueContext : ParserRuleContext {
		public ITerminalNode KTypeof() { return GetToken(SoalParser.KTypeof, 0); }
		public ITerminalNode TOpenParen() { return GetToken(SoalParser.TOpenParen, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ITerminalNode TCloseParen() { return GetToken(SoalParser.TCloseParen, 0); }
		public TypeofValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeofValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTypeofValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTypeofValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeofValueContext typeofValue() {
		TypeofValueContext _localctx = new TypeofValueContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_typeofValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926; Match(KTypeof);
			State = 927; Match(TOpenParen);
			State = 928; returnType();
			State = 929; Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public ContextualKeywordsContext contextualKeywords() {
			return GetRuleContext<ContextualKeywordsContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_identifier);
		try {
			State = 933;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 931; identifiers();
				}
				break;
			case IDate:
			case ITime:
			case IDateTime:
			case ITimeSpan:
			case IVersion:
			case IStyle:
			case IMTOM:
			case ISSL:
			case IHTTP:
			case IREST:
			case IWebSocket:
			case ISOAP:
			case IXML:
			case IJSON:
			case IClientAuthentication:
				EnterOuterAlt(_localctx, 2);
				{
				State = 932; contextualKeywords();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(SoalParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(SoalParser.IdentifierVerbatim, 0); }
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_identifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 935;
			_la = _input.La(1);
			if ( !(_la==IdentifierNormal || _la==IdentifierVerbatim) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_literal);
		try {
			State = 943;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 937; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 938; booleanLiteral();
				}
				break;
			case LInteger:
				EnterOuterAlt(_localctx, 3);
				{
				State = 939; integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 940; decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 5);
				{
				State = 941; scientificLiteral();
				}
				break;
			case LRegularString:
			case LDoubleQuoteVerbatimString:
			case LSingleQuoteVerbatimString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 942; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(SoalParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(SoalParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(SoalParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 947;
			_la = _input.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode LInteger() { return GetToken(SoalParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949; Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode LDecimal() { return GetToken(SoalParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 951; Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode LScientific() { return GetToken(SoalParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953; Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode LRegularString() { return GetToken(SoalParser.LRegularString, 0); }
		public ITerminalNode LSingleQuoteVerbatimString() { return GetToken(SoalParser.LSingleQuoteVerbatimString, 0); }
		public ITerminalNode LDoubleQuoteVerbatimString() { return GetToken(SoalParser.LDoubleQuoteVerbatimString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955;
			_la = _input.La(1);
			if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (LRegularString - 112)) | (1L << (LDoubleQuoteVerbatimString - 112)) | (1L << (LSingleQuoteVerbatimString - 112)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextualKeywordsContext : ParserRuleContext {
		public ITerminalNode IDate() { return GetToken(SoalParser.IDate, 0); }
		public ITerminalNode ITime() { return GetToken(SoalParser.ITime, 0); }
		public ITerminalNode IDateTime() { return GetToken(SoalParser.IDateTime, 0); }
		public ITerminalNode ITimeSpan() { return GetToken(SoalParser.ITimeSpan, 0); }
		public ITerminalNode IVersion() { return GetToken(SoalParser.IVersion, 0); }
		public ITerminalNode IStyle() { return GetToken(SoalParser.IStyle, 0); }
		public ITerminalNode IMTOM() { return GetToken(SoalParser.IMTOM, 0); }
		public ITerminalNode ISSL() { return GetToken(SoalParser.ISSL, 0); }
		public ITerminalNode IHTTP() { return GetToken(SoalParser.IHTTP, 0); }
		public ITerminalNode IREST() { return GetToken(SoalParser.IREST, 0); }
		public ITerminalNode IWebSocket() { return GetToken(SoalParser.IWebSocket, 0); }
		public ITerminalNode ISOAP() { return GetToken(SoalParser.ISOAP, 0); }
		public ITerminalNode IXML() { return GetToken(SoalParser.IXML, 0); }
		public ITerminalNode IJSON() { return GetToken(SoalParser.IJSON, 0); }
		public ITerminalNode IClientAuthentication() { return GetToken(SoalParser.IClientAuthentication, 0); }
		public ContextualKeywordsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextualKeywords; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterContextualKeywords(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitContextualKeywords(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextualKeywords(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextualKeywordsContext contextualKeywords() {
		ContextualKeywordsContext _localctx = new ContextualKeywordsContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_contextualKeywords);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			_la = _input.La(1);
			if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (IDate - 87)) | (1L << (ITime - 87)) | (1L << (IDateTime - 87)) | (1L << (ITimeSpan - 87)) | (1L << (IVersion - 87)) | (1L << (IStyle - 87)) | (1L << (IMTOM - 87)) | (1L << (ISSL - 87)) | (1L << (IHTTP - 87)) | (1L << (IREST - 87)) | (1L << (IWebSocket - 87)) | (1L << (ISOAP - 87)) | (1L << (IXML - 87)) | (1L << (IJSON - 87)) | (1L << (IClientAuthentication - 87)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3~\x3C2\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x3\x2\a\x2\x10A\n\x2\f\x2\xE\x2\x10D"+
		"\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\a\x5\x118"+
		"\n\x5\f\x5\xE\x5\x11B\v\x5\x3\x6\x3\x6\x3\x6\a\x6\x120\n\x6\f\x6\xE\x6"+
		"\x123\v\x6\x3\a\x3\a\x3\a\a\a\x128\n\a\f\a\xE\a\x12B\v\a\x3\b\x6\b\x12E"+
		"\n\b\r\b\xE\b\x12F\x3\t\x6\t\x133\n\t\r\t\xE\t\x134\x3\n\x3\n\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x5\f\x143\n\f\x3\r\x3\r\x5"+
		"\r\x147\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\x14E\n\xE\f\xE\xE\xE\x151"+
		"\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x5\x10\x159\n\x10\x3\x11\x5"+
		"\x11\x15C\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x164"+
		"\n\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\a\x14\x16F\n\x14\f\x14\xE\x14\x172\v\x14\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x180\n"+
		"\x15\x3\x16\x5\x16\x183\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x189"+
		"\n\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x191\n\x18\x3"+
		"\x18\x3\x18\x3\x19\x3\x19\x3\x19\a\x19\x198\n\x19\f\x19\xE\x19\x19B\v"+
		"\x19\x3\x19\x5\x19\x19E\n\x19\x3\x1A\x5\x1A\x1A1\n\x1A\x3\x1A\x3\x1A\x3"+
		"\x1B\x5\x1B\x1A6\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x1AC\n\x1B\x3"+
		"\x1B\x3\x1B\x3\x1C\x3\x1C\a\x1C\x1B2\n\x1C\f\x1C\xE\x1C\x1B5\v\x1C\x3"+
		"\x1C\x3\x1C\x3\x1D\x5\x1D\x1BA\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E"+
		"\x5\x1E\x1C1\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\a\x1F\x1C9"+
		"\n\x1F\f\x1F\xE\x1F\x1CC\v\x1F\x3\x1F\a\x1F\x1CF\n\x1F\f\x1F\xE\x1F\x1D2"+
		"\v\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3!\x5!\x1DB\n!\x3!\x3!\x3!\x3!\x3"+
		"\"\x3\"\a\"\x1E3\n\"\f\"\xE\"\x1E6\v\"\x3\"\x3\"\x3#\x3#\x3#\x3$\x5$\x1EE"+
		"\n$\x3$\x3$\x3$\x3$\x5$\x1F4\n$\x3$\x3$\x5$\x1F8\n$\x3%\x3%\x3%\a%\x1FD"+
		"\n%\f%\xE%\x200\v%\x3&\x5&\x203\n&\x3&\x3&\x3&\x3\'\x5\'\x209\n\'\x3\'"+
		"\x3\'\x3(\x3(\x3(\x3)\x5)\x211\n)\x3)\x3)\x3)\x3)\x5)\x217\n)\x3)\x3)"+
		"\x3*\x3*\x3+\x3+\x5+\x21F\n+\x3+\x3+\x3,\x6,\x224\n,\r,\xE,\x225\x3-\x3"+
		"-\x3-\x3-\x3-\x5-\x22D\n-\x3.\x3.\x3.\x5.\x232\n.\x3.\x3.\x3/\x3/\x3/"+
		"\x5/\x239\n/\x3/\x3/\x3\x30\x3\x30\x3\x30\a\x30\x240\n\x30\f\x30\xE\x30"+
		"\x243\v\x30\x3\x30\x5\x30\x246\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34"+
		"\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x25C\n\x35\x3\x35\x3\x35\x3"+
		"\x36\x3\x36\x5\x36\x262\n\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x5\x37\x26A\n\x37\x3\x37\x3\x37\x3\x38\x6\x38\x26F\n\x38\r\x38\xE\x38"+
		"\x270\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x27A\n\x39"+
		"\x3:\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3;\x3<\x3<\x3=\x3=\x3>\x3>\x3>\x3"+
		">\x3?\x3?\x5?\x290\n?\x3?\x3?\x3@\x6@\x295\n@\r@\xE@\x296\x3\x41\x3\x41"+
		"\x5\x41\x29B\n\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\a"+
		"\x43\x2A4\n\x43\f\x43\xE\x43\x2A7\v\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x45\x3\x45\x5\x45\x2B1\n\x45\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3G\x3G\x3G\x3G\x3H\x3H\x3H\x3H\x3I\x3I\x5I\x2C1\nI\x3I\x3I\x3J\x3J\x6"+
		"J\x2C7\nJ\rJ\xEJ\x2C8\x3J\aJ\x2CC\nJ\fJ\xEJ\x2CF\vJ\x3K\x3K\x3K\x5K\x2D4"+
		"\nK\x3L\x3L\x3L\x3L\x3M\x3M\x3M\aM\x2DD\nM\fM\xEM\x2E0\vM\x3M\x5M\x2E3"+
		"\nM\x3N\x3N\x3N\x3N\x3O\x3O\x3O\x5O\x2EC\nO\x3P\x3P\x3P\x3P\x3Q\x3Q\x3"+
		"Q\x5Q\x2F5\nQ\x3R\x3R\x5R\x2F9\nR\x3S\x3S\x3S\x3S\x3S\x3T\x3T\x3T\x3T"+
		"\x3T\x3U\x3U\x3U\x5U\x308\nU\x3V\x3V\x3V\x3V\x3W\x3W\x3W\aW\x311\nW\f"+
		"W\xEW\x314\vW\x3W\x5W\x317\nW\x3X\x3X\x3X\x3X\x3Y\x3Y\x3Y\x5Y\x320\nY"+
		"\x3Z\x3Z\x3Z\x3Z\x3[\x3[\x3[\x5[\x329\n[\x3\\\x3\\\x3\\\x5\\\x32E\n\\"+
		"\x3]\x3]\x3]\x3]\x3]\x3^\x3^\x3^\x3^\x3^\x3_\x3_\x3_\x3_\x3_\x3`\x3`\x3"+
		"`\x3`\x3\x61\x3\x61\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3"+
		"\x63\x3\x64\x3\x64\x5\x64\x34F\n\x64\x3\x64\x3\x64\x3\x65\x6\x65\x354"+
		"\n\x65\r\x65\xE\x65\x355\x3\x66\x3\x66\x5\x66\x35A\n\x66\x3g\x3g\x3g\x3"+
		"g\x3h\x3h\x3h\x3h\x3i\x3i\x5i\x366\ni\x3j\x3j\x3j\x3j\x5j\x36C\nj\x3k"+
		"\x3k\x3k\x5k\x371\nk\x3l\x3l\x5l\x375\nl\x3m\x3m\x5m\x379\nm\x3n\x3n\x3"+
		"o\x3o\x3p\x3p\x3q\x3q\x3r\x3r\x3r\x5r\x386\nr\x3s\x3s\x3s\x3t\x3t\x3t"+
		"\x3u\x3u\x3u\x3v\x3v\x5v\x393\nv\x3w\x3w\x3w\x3w\x3x\x3x\x3x\x3x\x3y\x3"+
		"y\x5y\x39F\ny\x3z\x3z\x3z\x3z\x3z\x3{\x3{\x5{\x3A8\n{\x3|\x3|\x3}\x3}"+
		"\x3}\x3}\x3}\x3}\x5}\x3B2\n}\x3~\x3~\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x81"+
		"\x3\x81\x3\x82\x3\x82\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84\x2\x2\x2\x85"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2"+
		"N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2"+
		"l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88"+
		"\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C"+
		"\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0"+
		"\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4"+
		"\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8"+
		"\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC"+
		"\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100"+
		"\x2\x102\x2\x104\x2\x106\x2\x2\b\x3\x2#$\x4\x2%*Y\\\x3\x2ij\x3\x2!\"\x4"+
		"\x2rrz{\x3\x2Yg\x3AB\x2\x10B\x3\x2\x2\x2\x4\x110\x3\x2\x2\x2\x6\x112\x3"+
		"\x2\x2\x2\b\x114\x3\x2\x2\x2\n\x11C\x3\x2\x2\x2\f\x124\x3\x2\x2\x2\xE"+
		"\x12D\x3\x2\x2\x2\x10\x132\x3\x2\x2\x2\x12\x136\x3\x2\x2\x2\x14\x13A\x3"+
		"\x2\x2\x2\x16\x140\x3\x2\x2\x2\x18\x144\x3\x2\x2\x2\x1A\x14A\x3\x2\x2"+
		"\x2\x1C\x152\x3\x2\x2\x2\x1E\x158\x3\x2\x2\x2 \x15B\x3\x2\x2\x2\"\x168"+
		"\x3\x2\x2\x2$\x16A\x3\x2\x2\x2&\x16C\x3\x2\x2\x2(\x17F\x3\x2\x2\x2*\x182"+
		"\x3\x2\x2\x2,\x18C\x3\x2\x2\x2.\x18E\x3\x2\x2\x2\x30\x194\x3\x2\x2\x2"+
		"\x32\x1A0\x3\x2\x2\x2\x34\x1A5\x3\x2\x2\x2\x36\x1AF\x3\x2\x2\x2\x38\x1B9"+
		"\x3\x2\x2\x2:\x1C0\x3\x2\x2\x2<\x1C6\x3\x2\x2\x2>\x1D5\x3\x2\x2\x2@\x1DA"+
		"\x3\x2\x2\x2\x42\x1E0\x3\x2\x2\x2\x44\x1E9\x3\x2\x2\x2\x46\x1ED\x3\x2"+
		"\x2\x2H\x1F9\x3\x2\x2\x2J\x202\x3\x2\x2\x2L\x208\x3\x2\x2\x2N\x20C\x3"+
		"\x2\x2\x2P\x210\x3\x2\x2\x2R\x21A\x3\x2\x2\x2T\x21C\x3\x2\x2\x2V\x223"+
		"\x3\x2\x2\x2X\x22C\x3\x2\x2\x2Z\x22E\x3\x2\x2\x2\\\x235\x3\x2\x2\x2^\x245"+
		"\x3\x2\x2\x2`\x247\x3\x2\x2\x2\x62\x24B\x3\x2\x2\x2\x64\x24F\x3\x2\x2"+
		"\x2\x66\x253\x3\x2\x2\x2h\x257\x3\x2\x2\x2j\x25F\x3\x2\x2\x2l\x265\x3"+
		"\x2\x2\x2n\x26E\x3\x2\x2\x2p\x279\x3\x2\x2\x2r\x27B\x3\x2\x2\x2t\x27F"+
		"\x3\x2\x2\x2v\x285\x3\x2\x2\x2x\x287\x3\x2\x2\x2z\x289\x3\x2\x2\x2|\x28D"+
		"\x3\x2\x2\x2~\x294\x3\x2\x2\x2\x80\x29A\x3\x2\x2\x2\x82\x29C\x3\x2\x2"+
		"\x2\x84\x2A0\x3\x2\x2\x2\x86\x2AA\x3\x2\x2\x2\x88\x2B0\x3\x2\x2\x2\x8A"+
		"\x2B2\x3\x2\x2\x2\x8C\x2B6\x3\x2\x2\x2\x8E\x2BA\x3\x2\x2\x2\x90\x2BE\x3"+
		"\x2\x2\x2\x92\x2C4\x3\x2\x2\x2\x94\x2D3\x3\x2\x2\x2\x96\x2D5\x3\x2\x2"+
		"\x2\x98\x2E2\x3\x2\x2\x2\x9A\x2E4\x3\x2\x2\x2\x9C\x2EB\x3\x2\x2\x2\x9E"+
		"\x2ED\x3\x2\x2\x2\xA0\x2F4\x3\x2\x2\x2\xA2\x2F8\x3\x2\x2\x2\xA4\x2FA\x3"+
		"\x2\x2\x2\xA6\x2FF\x3\x2\x2\x2\xA8\x307\x3\x2\x2\x2\xAA\x309\x3\x2\x2"+
		"\x2\xAC\x316\x3\x2\x2\x2\xAE\x318\x3\x2\x2\x2\xB0\x31F\x3\x2\x2\x2\xB2"+
		"\x321\x3\x2\x2\x2\xB4\x328\x3\x2\x2\x2\xB6\x32D\x3\x2\x2\x2\xB8\x32F\x3"+
		"\x2\x2\x2\xBA\x334\x3\x2\x2\x2\xBC\x339\x3\x2\x2\x2\xBE\x33E\x3\x2\x2"+
		"\x2\xC0\x342\x3\x2\x2\x2\xC2\x344\x3\x2\x2\x2\xC4\x346\x3\x2\x2\x2\xC6"+
		"\x34C\x3\x2\x2\x2\xC8\x353\x3\x2\x2\x2\xCA\x359\x3\x2\x2\x2\xCC\x35B\x3"+
		"\x2\x2\x2\xCE\x35F\x3\x2\x2\x2\xD0\x365\x3\x2\x2\x2\xD2\x36B\x3\x2\x2"+
		"\x2\xD4\x370\x3\x2\x2\x2\xD6\x374\x3\x2\x2\x2\xD8\x378\x3\x2\x2\x2\xDA"+
		"\x37A\x3\x2\x2\x2\xDC\x37C\x3\x2\x2\x2\xDE\x37E\x3\x2\x2\x2\xE0\x380\x3"+
		"\x2\x2\x2\xE2\x385\x3\x2\x2\x2\xE4\x387\x3\x2\x2\x2\xE6\x38A\x3\x2\x2"+
		"\x2\xE8\x38D\x3\x2\x2\x2\xEA\x392\x3\x2\x2\x2\xEC\x394\x3\x2\x2\x2\xEE"+
		"\x398\x3\x2\x2\x2\xF0\x39E\x3\x2\x2\x2\xF2\x3A0\x3\x2\x2\x2\xF4\x3A7\x3"+
		"\x2\x2\x2\xF6\x3A9\x3\x2\x2\x2\xF8\x3B1\x3\x2\x2\x2\xFA\x3B3\x3\x2\x2"+
		"\x2\xFC\x3B5\x3\x2\x2\x2\xFE\x3B7\x3\x2\x2\x2\x100\x3B9\x3\x2\x2\x2\x102"+
		"\x3BB\x3\x2\x2\x2\x104\x3BD\x3\x2\x2\x2\x106\x3BF\x3\x2\x2\x2\x108\x10A"+
		"\x5 \x11\x2\x109\x108\x3\x2\x2\x2\x10A\x10D\x3\x2\x2\x2\x10B\x109\x3\x2"+
		"\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10E\x3\x2\x2\x2\x10D\x10B\x3\x2\x2"+
		"\x2\x10E\x10F\a\x2\x2\x3\x10F\x3\x3\x2\x2\x2\x110\x111\x5\xF4{\x2\x111"+
		"\x5\x3\x2\x2\x2\x112\x113\x5\b\x5\x2\x113\a\x3\x2\x2\x2\x114\x119\x5\xF4"+
		"{\x2\x115\x116\a\x30\x2\x2\x116\x118\x5\xF4{\x2\x117\x115\x3\x2\x2\x2"+
		"\x118\x11B\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A"+
		"\t\x3\x2\x2\x2\x11B\x119\x3\x2\x2\x2\x11C\x121\x5\xF4{\x2\x11D\x11E\a"+
		"\x31\x2\x2\x11E\x120\x5\xF4{\x2\x11F\x11D\x3\x2\x2\x2\x120\x123\x3\x2"+
		"\x2\x2\x121\x11F\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\v\x3\x2\x2\x2"+
		"\x123\x121\x3\x2\x2\x2\x124\x129\x5\b\x5\x2\x125\x126\a\x31\x2\x2\x126"+
		"\x128\x5\b\x5\x2\x127\x125\x3\x2\x2\x2\x128\x12B\x3\x2\x2\x2\x129\x127"+
		"\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\r\x3\x2\x2\x2\x12B\x129\x3\x2"+
		"\x2\x2\x12C\x12E\x5\x12\n\x2\x12D\x12C\x3\x2\x2\x2\x12E\x12F\x3\x2\x2"+
		"\x2\x12F\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\xF\x3\x2\x2\x2\x131"+
		"\x133\x5\x14\v\x2\x132\x131\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134\x132"+
		"\x3\x2\x2\x2\x134\x135\x3\x2\x2\x2\x135\x11\x3\x2\x2\x2\x136\x137\a\x35"+
		"\x2\x2\x137\x138\x5\x16\f\x2\x138\x139\a\x36\x2\x2\x139\x13\x3\x2\x2\x2"+
		"\x13A\x13B\a\x35\x2\x2\x13B\x13C\a\n\x2\x2\x13C\x13D\a/\x2\x2\x13D\x13E"+
		"\x5\x16\f\x2\x13E\x13F\a\x36\x2\x2\x13F\x15\x3\x2\x2\x2\x140\x142\x5\x4"+
		"\x3\x2\x141\x143\x5\x18\r\x2\x142\x141\x3\x2\x2\x2\x142\x143\x3\x2\x2"+
		"\x2\x143\x17\x3\x2\x2\x2\x144\x146\a\x33\x2\x2\x145\x147\x5\x1A\xE\x2"+
		"\x146\x145\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2\x148"+
		"\x149\a\x34\x2\x2\x149\x19\x3\x2\x2\x2\x14A\x14F\x5\x1C\xF\x2\x14B\x14C"+
		"\a\x31\x2\x2\x14C\x14E\x5\x1C\xF\x2\x14D\x14B\x3\x2\x2\x2\x14E\x151\x3"+
		"\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x1B\x3\x2\x2"+
		"\x2\x151\x14F\x3\x2\x2\x2\x152\x153\x5\x4\x3\x2\x153\x154\a\x32\x2\x2"+
		"\x154\x155\x5\x1E\x10\x2\x155\x1D\x3\x2\x2\x2\x156\x159\x5\xF0y\x2\x157"+
		"\x159\x5\xF2z\x2\x158\x156\x3\x2\x2\x2\x158\x157\x3\x2\x2\x2\x159\x1F"+
		"\x3\x2\x2\x2\x15A\x15C\x5\xE\b\x2\x15B\x15A\x3\x2\x2\x2\x15B\x15C\x3\x2"+
		"\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15E\a\x3\x2\x2\x15E\x15F\x5\x6\x4\x2"+
		"\x15F\x163\a\x32\x2\x2\x160\x161\x5\"\x12\x2\x161\x162\a/\x2\x2\x162\x164"+
		"\x3\x2\x2\x2\x163\x160\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x165\x3"+
		"\x2\x2\x2\x165\x166\x5$\x13\x2\x166\x167\x5&\x14\x2\x167!\x3\x2\x2\x2"+
		"\x168\x169\x5\xF4{\x2\x169#\x3\x2\x2\x2\x16A\x16B\x5\x104\x83\x2\x16B"+
		"%\x3\x2\x2\x2\x16C\x170\a\x37\x2\x2\x16D\x16F\x5(\x15\x2\x16E\x16D\x3"+
		"\x2\x2\x2\x16F\x172\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x170\x171\x3\x2"+
		"\x2\x2\x171\x173\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x173\x174\a\x38\x2"+
		"\x2\x174\'\x3\x2\x2\x2\x175\x180\x5*\x16\x2\x176\x180\x5\x34\x1B\x2\x177"+
		"\x180\x5:\x1E\x2\x178\x180\x5@!\x2\x179\x180\x5P)\x2\x17A\x180\x5h\x35"+
		"\x2\x17B\x180\x5l\x37\x2\x17C\x180\x5\x8EH\x2\x17D\x180\x5\xC4\x63\x2"+
		"\x17E\x180\x5z>\x2\x17F\x175\x3\x2\x2\x2\x17F\x176\x3\x2\x2\x2\x17F\x177"+
		"\x3\x2\x2\x2\x17F\x178\x3\x2\x2\x2\x17F\x179\x3\x2\x2\x2\x17F\x17A\x3"+
		"\x2\x2\x2\x17F\x17B\x3\x2\x2\x2\x17F\x17C\x3\x2\x2\x2\x17F\x17D\x3\x2"+
		"\x2\x2\x17F\x17E\x3\x2\x2\x2\x180)\x3\x2\x2\x2\x181\x183\x5\xE\b\x2\x182"+
		"\x181\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x185"+
		"\a\x4\x2\x2\x185\x188\x5\x4\x3\x2\x186\x187\a/\x2\x2\x187\x189\x5,\x17"+
		"\x2\x188\x186\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2"+
		"\x18A\x18B\x5.\x18\x2\x18B+\x3\x2\x2\x2\x18C\x18D\x5\b\x5\x2\x18D-\x3"+
		"\x2\x2\x2\x18E\x190\a\x37\x2\x2\x18F\x191\x5\x30\x19\x2\x190\x18F\x3\x2"+
		"\x2\x2\x190\x191\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2\x192\x193\a\x38\x2"+
		"\x2\x193/\x3\x2\x2\x2\x194\x199\x5\x32\x1A\x2\x195\x196\a\x31\x2\x2\x196"+
		"\x198\x5\x32\x1A\x2\x197\x195\x3\x2\x2\x2\x198\x19B\x3\x2\x2\x2\x199\x197"+
		"\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A\x19D\x3\x2\x2\x2\x19B\x199\x3"+
		"\x2\x2\x2\x19C\x19E\a\x31\x2\x2\x19D\x19C\x3\x2\x2\x2\x19D\x19E\x3\x2"+
		"\x2\x2\x19E\x31\x3\x2\x2\x2\x19F\x1A1\x5\xE\b\x2\x1A0\x19F\x3\x2\x2\x2"+
		"\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A3\x5\x4\x3\x2\x1A3"+
		"\x33\x3\x2\x2\x2\x1A4\x1A6\x5\xE\b\x2\x1A5\x1A4\x3\x2\x2\x2\x1A5\x1A6"+
		"\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7\x1A8\a\x6\x2\x2\x1A8\x1AB\x5\x4"+
		"\x3\x2\x1A9\x1AA\a/\x2\x2\x1AA\x1AC\x5\b\x5\x2\x1AB\x1A9\x3\x2\x2\x2\x1AB"+
		"\x1AC\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AE\x5\x36\x1C\x2\x1AE\x35"+
		"\x3\x2\x2\x2\x1AF\x1B3\a\x37\x2\x2\x1B0\x1B2\x5\x38\x1D\x2\x1B1\x1B0\x3"+
		"\x2\x2\x2\x1B2\x1B5\x3\x2\x2\x2\x1B3\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2"+
		"\x2\x2\x1B4\x1B6\x3\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B6\x1B7\a\x38\x2"+
		"\x2\x1B7\x37\x3\x2\x2\x2\x1B8\x1BA\x5\xE\b\x2\x1B9\x1B8\x3\x2\x2\x2\x1B9"+
		"\x1BA\x3\x2\x2\x2\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1BC\x5\xD2j\x2\x1BC\x1BD"+
		"\x5\x4\x3\x2\x1BD\x1BE\a.\x2\x2\x1BE\x39\x3\x2\x2\x2\x1BF\x1C1\x5\xE\b"+
		"\x2\x1C0\x1BF\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2"+
		"\x1C2\x1C3\a\x11\x2\x2\x1C3\x1C4\x5\x4\x3\x2\x1C4\x1C5\x5<\x1F\x2\x1C5"+
		";\x3\x2\x2\x2\x1C6\x1CA\a\x37\x2\x2\x1C7\x1C9\x5> \x2\x1C8\x1C7\x3\x2"+
		"\x2\x2\x1C9\x1CC\x3\x2\x2\x2\x1CA\x1C8\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2"+
		"\x2\x1CB\x1D0\x3\x2\x2\x2\x1CC\x1CA\x3\x2\x2\x2\x1CD\x1CF\x5\x44#\x2\x1CE"+
		"\x1CD\x3\x2\x2\x2\x1CF\x1D2\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1D1"+
		"\x3\x2\x2\x2\x1D1\x1D3\x3\x2\x2\x2\x1D2\x1D0\x3\x2\x2\x2\x1D3\x1D4\a\x38"+
		"\x2\x2\x1D4=\x3\x2\x2\x2\x1D5\x1D6\a\x12\x2\x2\x1D6\x1D7\x5\b\x5\x2\x1D7"+
		"\x1D8\a.\x2\x2\x1D8?\x3\x2\x2\x2\x1D9\x1DB\x5\xE\b\x2\x1DA\x1D9\x3\x2"+
		"\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DD\a\a\x2\x2"+
		"\x1DD\x1DE\x5\x4\x3\x2\x1DE\x1DF\x5\x42\"\x2\x1DF\x41\x3\x2\x2\x2\x1E0"+
		"\x1E4\a\x37\x2\x2\x1E1\x1E3\x5\x44#\x2\x1E2\x1E1\x3\x2\x2\x2\x1E3\x1E6"+
		"\x3\x2\x2\x2\x1E4\x1E2\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E7\x3"+
		"\x2\x2\x2\x1E6\x1E4\x3\x2\x2\x2\x1E7\x1E8\a\x38\x2\x2\x1E8\x43\x3\x2\x2"+
		"\x2\x1E9\x1EA\x5\x46$\x2\x1EA\x1EB\a.\x2\x2\x1EB\x45\x3\x2\x2\x2\x1EC"+
		"\x1EE\x5\xE\b\x2\x1ED\x1EC\x3\x2\x2\x2\x1ED\x1EE\x3\x2\x2\x2\x1EE\x1EF"+
		"\x3\x2\x2\x2\x1EF\x1F0\x5L\'\x2\x1F0\x1F1\x5\x4\x3\x2\x1F1\x1F3\a\x33"+
		"\x2\x2\x1F2\x1F4\x5H%\x2\x1F3\x1F2\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4"+
		"\x1F5\x3\x2\x2\x2\x1F5\x1F7\a\x34\x2\x2\x1F6\x1F8\x5N(\x2\x1F7\x1F6\x3"+
		"\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8G\x3\x2\x2\x2\x1F9\x1FE\x5J&\x2\x1FA"+
		"\x1FB\a\x31\x2\x2\x1FB\x1FD\x5J&\x2\x1FC\x1FA\x3\x2\x2\x2\x1FD\x200\x3"+
		"\x2\x2\x2\x1FE\x1FC\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FFI\x3\x2\x2\x2"+
		"\x200\x1FE\x3\x2\x2\x2\x201\x203\x5\xE\b\x2\x202\x201\x3\x2\x2\x2\x202"+
		"\x203\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204\x205\x5\xD2j\x2\x205\x206"+
		"\x5\x4\x3\x2\x206K\x3\x2\x2\x2\x207\x209\x5\x10\t\x2\x208\x207\x3\x2\x2"+
		"\x2\x208\x209\x3\x2\x2\x2\x209\x20A\x3\x2\x2\x2\x20A\x20B\x5\xE2r\x2\x20B"+
		"M\x3\x2\x2\x2\x20C\x20D\a\b\x2\x2\x20D\x20E\x5\f\a\x2\x20EO\x3\x2\x2\x2"+
		"\x20F\x211\a\x13\x2\x2\x210\x20F\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211"+
		"\x212\x3\x2\x2\x2\x212\x213\a\x14\x2\x2\x213\x216\x5\x4\x3\x2\x214\x215"+
		"\a/\x2\x2\x215\x217\x5R*\x2\x216\x214\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2"+
		"\x217\x218\x3\x2\x2\x2\x218\x219\x5T+\x2\x219Q\x3\x2\x2\x2\x21A\x21B\x5"+
		"\b\x5\x2\x21BS\x3\x2\x2\x2\x21C\x21E\a\x37\x2\x2\x21D\x21F\x5V,\x2\x21E"+
		"\x21D\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x221"+
		"\a\x38\x2\x2\x221U\x3\x2\x2\x2\x222\x224\x5X-\x2\x223\x222\x3\x2\x2\x2"+
		"\x224\x225\x3\x2\x2\x2\x225\x223\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226"+
		"W\x3\x2\x2\x2\x227\x22D\x5Z.\x2\x228\x22D\x5\\/\x2\x229\x22D\x5\x62\x32"+
		"\x2\x22A\x22D\x5\x64\x33\x2\x22B\x22D\x5\x66\x34\x2\x22C\x227\x3\x2\x2"+
		"\x2\x22C\x228\x3\x2\x2\x2\x22C\x229\x3\x2\x2\x2\x22C\x22A\x3\x2\x2\x2"+
		"\x22C\x22B\x3\x2\x2\x2\x22DY\x3\x2\x2\x2\x22E\x22F\a\x17\x2\x2\x22F\x231"+
		"\x5\b\x5\x2\x230\x232\x5\x4\x3\x2\x231\x230\x3\x2\x2\x2\x231\x232\x3\x2"+
		"\x2\x2\x232\x233\x3\x2\x2\x2\x233\x234\x5^\x30\x2\x234[\x3\x2\x2\x2\x235"+
		"\x236\a\x16\x2\x2\x236\x238\x5\b\x5\x2\x237\x239\x5\x4\x3\x2\x238\x237"+
		"\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x23A\x3\x2\x2\x2\x23A\x23B\x5"+
		"^\x30\x2\x23B]\x3\x2\x2\x2\x23C\x246\a.\x2\x2\x23D\x241\a\x37\x2\x2\x23E"+
		"\x240\x5`\x31\x2\x23F\x23E\x3\x2\x2\x2\x240\x243\x3\x2\x2\x2\x241\x23F"+
		"\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2\x242\x244\x3\x2\x2\x2\x243\x241\x3"+
		"\x2\x2\x2\x244\x246\a\x38\x2\x2\x245\x23C\x3\x2\x2\x2\x245\x23D\x3\x2"+
		"\x2\x2\x246_\x3\x2\x2\x2\x247\x248\a\v\x2\x2\x248\x249\x5\b\x5\x2\x249"+
		"\x24A\a.\x2\x2\x24A\x61\x3\x2\x2\x2\x24B\x24C\x5\xD2j\x2\x24C\x24D\x5"+
		"\x4\x3\x2\x24D\x24E\a.\x2\x2\x24E\x63\x3\x2\x2\x2\x24F\x250\a\x1A\x2\x2"+
		"\x250\x251\x5\x4\x3\x2\x251\x252\a.\x2\x2\x252\x65\x3\x2\x2\x2\x253\x254"+
		"\a\x1B\x2\x2\x254\x255\x5\x4\x3\x2\x255\x256\a.\x2\x2\x256g\x3\x2\x2\x2"+
		"\x257\x258\a\x15\x2\x2\x258\x25B\x5\x4\x3\x2\x259\x25A\a/\x2\x2\x25A\x25C"+
		"\x5R*\x2\x25B\x259\x3\x2\x2\x2\x25B\x25C\x3\x2\x2\x2\x25C\x25D\x3\x2\x2"+
		"\x2\x25D\x25E\x5j\x36\x2\x25Ei\x3\x2\x2\x2\x25F\x261\a\x37\x2\x2\x260"+
		"\x262\x5n\x38\x2\x261\x260\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x263"+
		"\x3\x2\x2\x2\x263\x264\a\x38\x2\x2\x264k\x3\x2\x2\x2\x265\x266\a\x1C\x2"+
		"\x2\x266\x269\x5\x4\x3\x2\x267\x268\a/\x2\x2\x268\x26A\x5R*\x2\x269\x267"+
		"\x3\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26C\x5"+
		"j\x36\x2\x26Cm\x3\x2\x2\x2\x26D\x26F\x5p\x39\x2\x26E\x26D\x3\x2\x2\x2"+
		"\x26F\x270\x3\x2\x2\x2\x270\x26E\x3\x2\x2\x2\x270\x271\x3\x2\x2\x2\x271"+
		"o\x3\x2\x2\x2\x272\x27A\x5Z.\x2\x273\x27A\x5\\/\x2\x274\x27A\x5\x62\x32"+
		"\x2\x275\x27A\x5\x64\x33\x2\x276\x27A\x5\x66\x34\x2\x277\x27A\x5r:\x2"+
		"\x278\x27A\x5t;\x2\x279\x272\x3\x2\x2\x2\x279\x273\x3\x2\x2\x2\x279\x274"+
		"\x3\x2\x2\x2\x279\x275\x3\x2\x2\x2\x279\x276\x3\x2\x2\x2\x279\x277\x3"+
		"\x2\x2\x2\x279\x278\x3\x2\x2\x2\x27Aq\x3\x2\x2\x2\x27B\x27C\a\x14\x2\x2"+
		"\x27C\x27D\x5\b\x5\x2\x27D\x27E\a.\x2\x2\x27Es\x3\x2\x2\x2\x27F\x280\a"+
		"\x18\x2\x2\x280\x281\x5v<\x2\x281\x282\a\x19\x2\x2\x282\x283\x5x=\x2\x283"+
		"\x284\a.\x2\x2\x284u\x3\x2\x2\x2\x285\x286\x5\b\x5\x2\x286w\x3\x2\x2\x2"+
		"\x287\x288\x5\b\x5\x2\x288y\x3\x2\x2\x2\x289\x28A\a\x1D\x2\x2\x28A\x28B"+
		"\x5\x4\x3\x2\x28B\x28C\x5|?\x2\x28C{\x3\x2\x2\x2\x28D\x28F\a\x37\x2\x2"+
		"\x28E\x290\x5~@\x2\x28F\x28E\x3\x2\x2\x2\x28F\x290\x3\x2\x2\x2\x290\x291"+
		"\x3\x2\x2\x2\x291\x292\a\x38\x2\x2\x292}\x3\x2\x2\x2\x293\x295\x5\x80"+
		"\x41\x2\x294\x293\x3\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296\x294\x3\x2\x2"+
		"\x2\x296\x297\x3\x2\x2\x2\x297\x7F\x3\x2\x2\x2\x298\x29B\x5\x82\x42\x2"+
		"\x299\x29B\x5t;\x2\x29A\x298\x3\x2\x2\x2\x29A\x299\x3\x2\x2\x2\x29B\x81"+
		"\x3\x2\x2\x2\x29C\x29D\a\x1E\x2\x2\x29D\x29E\x5\x4\x3\x2\x29E\x29F\x5"+
		"\x84\x43\x2\x29F\x83\x3\x2\x2\x2\x2A0\x2A1\a\x37\x2\x2\x2A1\x2A5\x5\x86"+
		"\x44\x2\x2A2\x2A4\x5\x88\x45\x2\x2A3\x2A2\x3\x2\x2\x2\x2A4\x2A7\x3\x2"+
		"\x2\x2\x2A5\x2A3\x3\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2A8\x3\x2\x2"+
		"\x2\x2A7\x2A5\x3\x2\x2\x2\x2A8\x2A9\a\x38\x2\x2\x2A9\x85\x3\x2\x2\x2\x2AA"+
		"\x2AB\a\x1F\x2\x2\x2AB\x2AC\x5\x4\x3\x2\x2AC\x2AD\a.\x2\x2\x2AD\x87\x3"+
		"\x2\x2\x2\x2AE\x2B1\x5\x8A\x46\x2\x2AF\x2B1\x5\x8CG\x2\x2B0\x2AE\x3\x2"+
		"\x2\x2\x2B0\x2AF\x3\x2\x2\x2\x2B1\x89\x3\x2\x2\x2\x2B2\x2B3\a\x1C\x2\x2"+
		"\x2B3\x2B4\x5\b\x5\x2\x2B4\x2B5\a.\x2\x2\x2B5\x8B\x3\x2\x2\x2\x2B6\x2B7"+
		"\a\x11\x2\x2\x2B7\x2B8\x5\b\x5\x2\x2B8\x2B9\a.\x2\x2\x2B9\x8D\x3\x2\x2"+
		"\x2\x2BA\x2BB\a\v\x2\x2\x2BB\x2BC\x5\x4\x3\x2\x2BC\x2BD\x5\x90I\x2\x2BD"+
		"\x8F\x3\x2\x2\x2\x2BE\x2C0\a\x37\x2\x2\x2BF\x2C1\x5\x92J\x2\x2C0\x2BF"+
		"\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C2\x3\x2\x2\x2\x2C2\x2C3\a\x38"+
		"\x2\x2\x2C3\x91\x3\x2\x2\x2\x2C4\x2C6\x5\x94K\x2\x2C5\x2C7\x5\xA8U\x2"+
		"\x2C6\x2C5\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\x2C6\x3\x2\x2\x2\x2C8"+
		"\x2C9\x3\x2\x2\x2\x2C9\x2CD\x3\x2\x2\x2\x2CA\x2CC\x5\xBE`\x2\x2CB\x2CA"+
		"\x3\x2\x2\x2\x2CC\x2CF\x3\x2\x2\x2\x2CD\x2CB\x3\x2\x2\x2\x2CD\x2CE\x3"+
		"\x2\x2\x2\x2CE\x93\x3\x2\x2\x2\x2CF\x2CD\x3\x2\x2\x2\x2D0\x2D4\x5\x96"+
		"L\x2\x2D1\x2D4\x5\x9AN\x2\x2D2\x2D4\x5\x9EP\x2\x2D3\x2D0\x3\x2\x2\x2\x2D3"+
		"\x2D1\x3\x2\x2\x2\x2D3\x2D2\x3\x2\x2\x2\x2D4\x95\x3\x2\x2\x2\x2D5\x2D6"+
		"\a\f\x2\x2\x2D6\x2D7\a\x61\x2\x2\x2D7\x2D8\x5\x98M\x2\x2D8\x97\x3\x2\x2"+
		"\x2\x2D9\x2E3\a.\x2\x2\x2DA\x2DE\a\x37\x2\x2\x2DB\x2DD\x5\xA2R\x2\x2DC"+
		"\x2DB\x3\x2\x2\x2\x2DD\x2E0\x3\x2\x2\x2\x2DE\x2DC\x3\x2\x2\x2\x2DE\x2DF"+
		"\x3\x2\x2\x2\x2DF\x2E1\x3\x2\x2\x2\x2E0\x2DE\x3\x2\x2\x2\x2E1\x2E3\a\x38"+
		"\x2\x2\x2E2\x2D9\x3\x2\x2\x2\x2E2\x2DA\x3\x2\x2\x2\x2E3\x99\x3\x2\x2\x2"+
		"\x2E4\x2E5\a\f\x2\x2\x2E5\x2E6\a\x62\x2\x2\x2E6\x2E7\x5\x9CO\x2\x2E7\x9B"+
		"\x3\x2\x2\x2\x2E8\x2EC\a.\x2\x2\x2E9\x2EA\a\x37\x2\x2\x2EA\x2EC\a\x38"+
		"\x2\x2\x2EB\x2E8\x3\x2\x2\x2\x2EB\x2E9\x3\x2\x2\x2\x2EC\x9D\x3\x2\x2\x2"+
		"\x2ED\x2EE\a\f\x2\x2\x2EE\x2EF\a\x63\x2\x2\x2EF\x2F0\x5\xA0Q\x2\x2F0\x9F"+
		"\x3\x2\x2\x2\x2F1\x2F5\a.\x2\x2\x2F2\x2F3\a\x37\x2\x2\x2F3\x2F5\a\x38"+
		"\x2\x2\x2F4\x2F1\x3\x2\x2\x2\x2F4\x2F2\x3\x2\x2\x2\x2F5\xA1\x3\x2\x2\x2"+
		"\x2F6\x2F9\x5\xA4S\x2\x2F7\x2F9\x5\xA6T\x2\x2F8\x2F6\x3\x2\x2\x2\x2F8"+
		"\x2F7\x3\x2\x2\x2\x2F9\xA3\x3\x2\x2\x2\x2FA\x2FB\a`\x2\x2\x2FB\x2FC\a"+
		"\x32\x2\x2\x2FC\x2FD\x5\xFC\x7F\x2\x2FD\x2FE\a.\x2\x2\x2FE\xA5\x3\x2\x2"+
		"\x2\x2FF\x300\ag\x2\x2\x300\x301\a\x32\x2\x2\x301\x302\x5\xFC\x7F\x2\x302"+
		"\x303\a.\x2\x2\x303\xA7\x3\x2\x2\x2\x304\x308\x5\xAAV\x2\x305\x308\x5"+
		"\xAEX\x2\x306\x308\x5\xB2Z\x2\x307\x304\x3\x2\x2\x2\x307\x305\x3\x2\x2"+
		"\x2\x307\x306\x3\x2\x2\x2\x308\xA9\x3\x2\x2\x2\x309\x30A\a\r\x2\x2\x30A"+
		"\x30B\a\x64\x2\x2\x30B\x30C\x5\xACW\x2\x30C\xAB\x3\x2\x2\x2\x30D\x317"+
		"\a.\x2\x2\x30E\x312\a\x37\x2\x2\x30F\x311\x5\xB6\\\x2\x310\x30F\x3\x2"+
		"\x2\x2\x311\x314\x3\x2\x2\x2\x312\x310\x3\x2\x2\x2\x312\x313\x3\x2\x2"+
		"\x2\x313\x315\x3\x2\x2\x2\x314\x312\x3\x2\x2\x2\x315\x317\a\x38\x2\x2"+
		"\x316\x30D\x3\x2\x2\x2\x316\x30E\x3\x2\x2\x2\x317\xAD\x3\x2\x2\x2\x318"+
		"\x319\a\r\x2\x2\x319\x31A\a\x65\x2\x2\x31A\x31B\x5\xB0Y\x2\x31B\xAF\x3"+
		"\x2\x2\x2\x31C\x320\a.\x2\x2\x31D\x31E\a\x37\x2\x2\x31E\x320\a\x38\x2"+
		"\x2\x31F\x31C\x3\x2\x2\x2\x31F\x31D\x3\x2\x2\x2\x320\xB1\x3\x2\x2\x2\x321"+
		"\x322\a\r\x2\x2\x322\x323\a\x66\x2\x2\x323\x324\x5\xB4[\x2\x324\xB3\x3"+
		"\x2\x2\x2\x325\x329\a.\x2\x2\x326\x327\a\x37\x2\x2\x327\x329\a\x38\x2"+
		"\x2\x328\x325\x3\x2\x2\x2\x328\x326\x3\x2\x2\x2\x329\xB5\x3\x2\x2\x2\x32A"+
		"\x32E\x5\xB8]\x2\x32B\x32E\x5\xBA^\x2\x32C\x32E\x5\xBC_\x2\x32D\x32A\x3"+
		"\x2\x2\x2\x32D\x32B\x3\x2\x2\x2\x32D\x32C\x3\x2\x2\x2\x32E\xB7\x3\x2\x2"+
		"\x2\x32F\x330\a]\x2\x2\x330\x331\a\x32\x2\x2\x331\x332\x5\xF4{\x2\x332"+
		"\x333\a.\x2\x2\x333\xB9\x3\x2\x2\x2\x334\x335\a_\x2\x2\x335\x336\a\x32"+
		"\x2\x2\x336\x337\x5\xFC\x7F\x2\x337\x338\a.\x2\x2\x338\xBB\x3\x2\x2\x2"+
		"\x339\x33A\a^\x2\x2\x33A\x33B\a\x32\x2\x2\x33B\x33C\x5\xF4{\x2\x33C\x33D"+
		"\a.\x2\x2\x33D\xBD\x3\x2\x2\x2\x33E\x33F\a\xE\x2\x2\x33F\x340\x5\xC0\x61"+
		"\x2\x340\x341\a.\x2\x2\x341\xBF\x3\x2\x2\x2\x342\x343\x5\xC2\x62\x2\x343"+
		"\xC1\x3\x2\x2\x2\x344\x345\ah\x2\x2\x345\xC3\x3\x2\x2\x2\x346\x347\a\xF"+
		"\x2\x2\x347\x348\x5\x4\x3\x2\x348\x349\a/\x2\x2\x349\x34A\x5\b\x5\x2\x34A"+
		"\x34B\x5\xC6\x64\x2\x34B\xC5\x3\x2\x2\x2\x34C\x34E\a\x37\x2\x2\x34D\x34F"+
		"\x5\xC8\x65\x2\x34E\x34D\x3\x2\x2\x2\x34E\x34F\x3\x2\x2\x2\x34F\x350\x3"+
		"\x2\x2\x2\x350\x351\a\x38\x2\x2\x351\xC7\x3\x2\x2\x2\x352\x354\x5\xCA"+
		"\x66\x2\x353\x352\x3\x2\x2\x2\x354\x355\x3\x2\x2\x2\x355\x353\x3\x2\x2"+
		"\x2\x355\x356\x3\x2\x2\x2\x356\xC9\x3\x2\x2\x2\x357\x35A\x5\xCCg\x2\x358"+
		"\x35A\x5\xCEh\x2\x359\x357\x3\x2\x2\x2\x359\x358\x3\x2\x2\x2\x35A\xCB"+
		"\x3\x2\x2\x2\x35B\x35C\a\v\x2\x2\x35C\x35D\x5\b\x5\x2\x35D\x35E\a.\x2"+
		"\x2\x35E\xCD\x3\x2\x2\x2\x35F\x360\a\x10\x2\x2\x360\x361\x5\x104\x83\x2"+
		"\x361\x362\a.\x2\x2\x362\xCF\x3\x2\x2\x2\x363\x366\x5\xDEp\x2\x364\x366"+
		"\x5\xD2j\x2\x365\x363\x3\x2\x2\x2\x365\x364\x3\x2\x2\x2\x366\xD1\x3\x2"+
		"\x2\x2\x367\x36C\x5\xE8u\x2\x368\x36C\x5\xEAv\x2\x369\x36C\x5\xD4k\x2"+
		"\x36A\x36C\x5\xD6l\x2\x36B\x367\x3\x2\x2\x2\x36B\x368\x3\x2\x2\x2\x36B"+
		"\x369\x3\x2\x2\x2\x36B\x36A\x3\x2\x2\x2\x36C\xD3\x3\x2\x2\x2\x36D\x371"+
		"\x5\xDCo\x2\x36E\x371\x5\xDAn\x2\x36F\x371\x5\b\x5\x2\x370\x36D\x3\x2"+
		"\x2\x2\x370\x36E\x3\x2\x2\x2\x370\x36F\x3\x2\x2\x2\x371\xD5\x3\x2\x2\x2"+
		"\x372\x375\x5\xE4s\x2\x373\x375\x5\xE6t\x2\x374\x372\x3\x2\x2\x2\x374"+
		"\x373\x3\x2\x2\x2\x375\xD7\x3\x2\x2\x2\x376\x379\x5\xDAn\x2\x377\x379"+
		"\x5\b\x5\x2\x378\x376\x3\x2\x2\x2\x378\x377\x3\x2\x2\x2\x379\xD9\x3\x2"+
		"\x2\x2\x37A\x37B\t\x2\x2\x2\x37B\xDB\x3\x2\x2\x2\x37C\x37D\t\x3\x2\x2"+
		"\x37D\xDD\x3\x2\x2\x2\x37E\x37F\a-\x2\x2\x37F\xDF\x3\x2\x2\x2\x380\x381"+
		"\a\t\x2\x2\x381\xE1\x3\x2\x2\x2\x382\x386\x5\xE0q\x2\x383\x386\x5\xDE"+
		"p\x2\x384\x386\x5\xD2j\x2\x385\x382\x3\x2\x2\x2\x385\x383\x3\x2\x2\x2"+
		"\x385\x384\x3\x2\x2\x2\x386\xE3\x3\x2\x2\x2\x387\x388\x5\xDCo\x2\x388"+
		"\x389\a;\x2\x2\x389\xE5\x3\x2\x2\x2\x38A\x38B\x5\xD8m\x2\x38B\x38C\aG"+
		"\x2\x2\x38C\xE7\x3\x2\x2\x2\x38D\x38E\x5\xEAv\x2\x38E\x38F\aG\x2\x2\x38F"+
		"\xE9\x3\x2\x2\x2\x390\x393\x5\xECw\x2\x391\x393\x5\xEEx\x2\x392\x390\x3"+
		"\x2\x2\x2\x392\x391\x3\x2\x2\x2\x393\xEB\x3\x2\x2\x2\x394\x395\x5\xD4"+
		"k\x2\x395\x396\a\x35\x2\x2\x396\x397\a\x36\x2\x2\x397\xED\x3\x2\x2\x2"+
		"\x398\x399\x5\xD6l\x2\x399\x39A\a\x35\x2\x2\x39A\x39B\a\x36\x2\x2\x39B"+
		"\xEF\x3\x2\x2\x2\x39C\x39F\x5\xF8}\x2\x39D\x39F\x5\xF4{\x2\x39E\x39C\x3"+
		"\x2\x2\x2\x39E\x39D\x3\x2\x2\x2\x39F\xF1\x3\x2\x2\x2\x3A0\x3A1\a,\x2\x2"+
		"\x3A1\x3A2\a\x33\x2\x2\x3A2\x3A3\x5\xD0i\x2\x3A3\x3A4\a\x34\x2\x2\x3A4"+
		"\xF3\x3\x2\x2\x2\x3A5\x3A8\x5\xF6|\x2\x3A6\x3A8\x5\x106\x84\x2\x3A7\x3A5"+
		"\x3\x2\x2\x2\x3A7\x3A6\x3\x2\x2\x2\x3A8\xF5\x3\x2\x2\x2\x3A9\x3AA\t\x4"+
		"\x2\x2\x3AA\xF7\x3\x2\x2\x2\x3AB\x3B2\x5\xFA~\x2\x3AC\x3B2\x5\xFC\x7F"+
		"\x2\x3AD\x3B2\x5\xFE\x80\x2\x3AE\x3B2\x5\x100\x81\x2\x3AF\x3B2\x5\x102"+
		"\x82\x2\x3B0\x3B2\x5\x104\x83\x2\x3B1\x3AB\x3\x2\x2\x2\x3B1\x3AC\x3\x2"+
		"\x2\x2\x3B1\x3AD\x3\x2\x2\x2\x3B1\x3AE\x3\x2\x2\x2\x3B1\x3AF\x3\x2\x2"+
		"\x2\x3B1\x3B0\x3\x2\x2\x2\x3B2\xF9\x3\x2\x2\x2\x3B3\x3B4\a \x2\x2\x3B4"+
		"\xFB\x3\x2\x2\x2\x3B5\x3B6\t\x5\x2\x2\x3B6\xFD\x3\x2\x2\x2\x3B7\x3B8\a"+
		"k\x2\x2\x3B8\xFF\x3\x2\x2\x2\x3B9\x3BA\al\x2\x2\x3BA\x101\x3\x2\x2\x2"+
		"\x3BB\x3BC\am\x2\x2\x3BC\x103\x3\x2\x2\x2\x3BD\x3BE\t\x6\x2\x2\x3BE\x105"+
		"\x3\x2\x2\x2\x3BF\x3C0\t\a\x2\x2\x3C0\x107\x3\x2\x2\x2T\x10B\x119\x121"+
		"\x129\x12F\x134\x142\x146\x14F\x158\x15B\x163\x170\x17F\x182\x188\x190"+
		"\x199\x19D\x1A0\x1A5\x1AB\x1B3\x1B9\x1C0\x1CA\x1D0\x1DA\x1E4\x1ED\x1F3"+
		"\x1F7\x1FE\x202\x208\x210\x216\x21E\x225\x22C\x231\x238\x241\x245\x25B"+
		"\x261\x269\x270\x279\x28F\x296\x29A\x2A5\x2B0\x2C0\x2C8\x2CD\x2D3\x2DE"+
		"\x2E2\x2EB\x2F4\x2F8\x307\x312\x316\x31F\x328\x32D\x34E\x355\x359\x365"+
		"\x36B\x370\x374\x378\x385\x392\x39E\x3A7\x3B1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Languages.Soal.Syntax.InternalSyntax
