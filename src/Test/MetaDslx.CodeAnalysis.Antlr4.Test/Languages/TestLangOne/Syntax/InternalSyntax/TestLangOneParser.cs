//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Balazs\source\repos\meta-cs\src\Test\MetaDslx.CodeAnalysis.Antlr4.Test\Languages\TestLangOne\Syntax\InternalSyntax\TestLangOneParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.CodeAnalysis.Antlr4Test.Languages.TestLanguageOne.Syntax.InternalSyntax {

using MetaDslx.CodeAnalysis.Antlr4Test.Languages.TestLanguageOne.Model;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TestLangOneParser : Parser {
	public const int
		KNamespace=1, KScope=2, KMember=3, KClass=4, KVertex=5, KOptional=6, KArrow=7, 
		KStatic=8, KTrue=9, KFalse=10, KTest01=11, KTest02=12, KTest03=13, KTest04=14, 
		KTest05=15, KTest06=16, KTest07=17, KTest08=18, KTest09=19, KTest10=20, 
		KTest11=21, KTest12=22, KTest13=23, KTest14=24, KTest15=25, KTest16=26, 
		KTest17=27, KTest18=28, KTest19=29, KNull=30, TSemicolon=31, TColon=32, 
		TDot=33, TComma=34, TAssign=35, TOpenParen=36, TCloseParen=37, TOpenBracket=38, 
		TCloseBracket=39, TOpenBrace=40, TCloseBrace=41, TLessThan=42, TGreaterThan=43, 
		TQuestion=44, TQuestionQuestion=45, TAmpersand=46, THat=47, TBar=48, TAndAlso=49, 
		TOrElse=50, TPlusPlus=51, TMinusMinus=52, TPlus=53, TMinus=54, TTilde=55, 
		TExclamation=56, TSlash=57, TAsterisk=58, TPercent=59, TLessThanOrEqual=60, 
		TGreaterThanOrEqual=61, TEqual=62, TNotEqual=63, TAsteriskAssign=64, TSlashAssign=65, 
		TPercentAssign=66, TPlusAssign=67, TMinusAssign=68, TLeftShiftAssign=69, 
		TRightShiftAssign=70, TAmpersandAssign=71, THatAssign=72, TBarAssign=73, 
		TArrow=74, IUri=75, IdentifierNormal=76, IdentifierVerbatim=77, LInteger=78, 
		LDecimal=79, LScientific=80, LDateTimeOffset=81, LDateTime=82, LDate=83, 
		LTime=84, LRegularString=85, LGuid=86, LUtf8Bom=87, LWhiteSpace=88, LCrLf=89, 
		LLineEnd=90, LSingleLineComment=91, LComment=92, LDoubleQuoteVerbatimString=93, 
		LSingleQuoteVerbatimString=94, DoubleQuoteVerbatimStringLiteralStart=95, 
		SingleQuoteVerbatimStringLiteralStart=96, LCommentStart=97;
	public const int
		RULE_main = 0, RULE_test = 1, RULE_test01 = 2, RULE_namespaceDeclaration01 = 3, 
		RULE_namespaceBody01 = 4, RULE_declaration01 = 5, RULE_vertex01 = 6, RULE_arrow01 = 7, 
		RULE_test02 = 8, RULE_namespaceDeclaration02 = 9, RULE_namespaceBody02 = 10, 
		RULE_declaration02 = 11, RULE_vertex02 = 12, RULE_arrow02 = 13, RULE_source02 = 14, 
		RULE_target02 = 15, RULE_test03 = 16, RULE_namespaceDeclaration03 = 17, 
		RULE_namespaceBody03 = 18, RULE_declaration03 = 19, RULE_vertex03 = 20, 
		RULE_arrow03 = 21, RULE_source03 = 22, RULE_target03 = 23, RULE_test04 = 24, 
		RULE_namespaceDeclaration04 = 25, RULE_namespaceBody04 = 26, RULE_declaration04 = 27, 
		RULE_vertex04 = 28, RULE_arrow04 = 29, RULE_test05 = 30, RULE_namespaceDeclaration05 = 31, 
		RULE_namespaceBody05 = 32, RULE_declaration05 = 33, RULE_vertex05 = 34, 
		RULE_arrow05 = 35, RULE_test06 = 36, RULE_namespaceDeclaration06 = 37, 
		RULE_namespaceBody06 = 38, RULE_declaration06 = 39, RULE_vertex06 = 40, 
		RULE_arrow06 = 41, RULE_test07 = 42, RULE_namespaceDeclaration07 = 43, 
		RULE_namespaceBody07 = 44, RULE_declaration07 = 45, RULE_vertex07 = 46, 
		RULE_arrow07 = 47, RULE_source07 = 48, RULE_target07 = 49, RULE_test08 = 50, 
		RULE_namespaceDeclaration08 = 51, RULE_namespaceBody08 = 52, RULE_declaration08 = 53, 
		RULE_vertex08 = 54, RULE_arrow08 = 55, RULE_source08 = 56, RULE_target08 = 57, 
		RULE_test09 = 58, RULE_namespaceDeclaration09 = 59, RULE_namespaceBody09 = 60, 
		RULE_declaration09 = 61, RULE_vertex09 = 62, RULE_arrow09 = 63, RULE_test10 = 64, 
		RULE_namespaceDeclaration10 = 65, RULE_namespaceBody10 = 66, RULE_declaration10 = 67, 
		RULE_vertex10 = 68, RULE_arrow10 = 69, RULE_test11 = 70, RULE_namespaceDeclaration11 = 71, 
		RULE_namespaceBody11 = 72, RULE_declaration11 = 73, RULE_vertex11 = 74, 
		RULE_arrow11 = 75, RULE_name = 76, RULE_qualifiedName = 77, RULE_qualifier = 78, 
		RULE_identifier = 79, RULE_literal = 80, RULE_nullLiteral = 81, RULE_booleanLiteral = 82, 
		RULE_integerLiteral = 83, RULE_decimalLiteral = 84, RULE_scientificLiteral = 85, 
		RULE_stringLiteral = 86;
	public static readonly string[] ruleNames = {
		"main", "test", "test01", "namespaceDeclaration01", "namespaceBody01", 
		"declaration01", "vertex01", "arrow01", "test02", "namespaceDeclaration02", 
		"namespaceBody02", "declaration02", "vertex02", "arrow02", "source02", 
		"target02", "test03", "namespaceDeclaration03", "namespaceBody03", "declaration03", 
		"vertex03", "arrow03", "source03", "target03", "test04", "namespaceDeclaration04", 
		"namespaceBody04", "declaration04", "vertex04", "arrow04", "test05", "namespaceDeclaration05", 
		"namespaceBody05", "declaration05", "vertex05", "arrow05", "test06", "namespaceDeclaration06", 
		"namespaceBody06", "declaration06", "vertex06", "arrow06", "test07", "namespaceDeclaration07", 
		"namespaceBody07", "declaration07", "vertex07", "arrow07", "source07", 
		"target07", "test08", "namespaceDeclaration08", "namespaceBody08", "declaration08", 
		"vertex08", "arrow08", "source08", "target08", "test09", "namespaceDeclaration09", 
		"namespaceBody09", "declaration09", "vertex09", "arrow09", "test10", "namespaceDeclaration10", 
		"namespaceBody10", "declaration10", "vertex10", "arrow10", "test11", "namespaceDeclaration11", 
		"namespaceBody11", "declaration11", "vertex11", "arrow11", "name", "qualifiedName", 
		"qualifier", "identifier", "literal", "nullLiteral", "booleanLiteral", 
		"integerLiteral", "decimalLiteral", "scientificLiteral", "stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'scope'", "'member'", "'class'", "'vertex'", "'optional'", 
		"'arrow'", "'static'", "'true'", "'false'", "'test01'", "'test02'", "'test03'", 
		"'test04'", "'test05'", "'test06'", "'test07'", "'test08'", "'test09'", 
		"'test10'", "'test11'", "'test12'", "'test13'", "'test14'", "'test15'", 
		"'test16'", "'test17'", "'test18'", "'test19'", "'null'", "';'", "':'", 
		"'.'", "','", "'='", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", 
		"'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", "'||'", "'++'", "'--'", 
		"'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", "'<='", "'>='", "'=='", 
		"'!='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", 
		"'^='", "'|='", "'->'", "'Uri'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'\"'", "'''", 
		"'@\"'", "'@''", "'/*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KScope", "KMember", "KClass", "KVertex", "KOptional", 
		"KArrow", "KStatic", "KTrue", "KFalse", "KTest01", "KTest02", "KTest03", 
		"KTest04", "KTest05", "KTest06", "KTest07", "KTest08", "KTest09", "KTest10", 
		"KTest11", "KTest12", "KTest13", "KTest14", "KTest15", "KTest16", "KTest17", 
		"KTest18", "KTest19", "KNull", "TSemicolon", "TColon", "TDot", "TComma", 
		"TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", "TCloseBracket", 
		"TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", "TQuestion", 
		"TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", "TOrElse", 
		"TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "TArrow", "IUri", "IdentifierNormal", 
		"IdentifierVerbatim", "LInteger", "LDecimal", "LScientific", "LDateTimeOffset", 
		"LDateTime", "LDate", "LTime", "LRegularString", "LGuid", "LUtf8Bom", 
		"LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", "LComment", 
		"LDoubleQuoteVerbatimString", "LSingleQuoteVerbatimString", "DoubleQuoteVerbatimStringLiteralStart", 
		"SingleQuoteVerbatimStringLiteralStart", "LCommentStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TestLangOneParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TestLangOneParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TestLangOneParser.Eof, 0); }
		public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_main, out MainContext existingContext)) return existingContext;
		MainContext _localctx = new MainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KTest01) | (1L << KTest02) | (1L << KTest03) | (1L << KTest04) | (1L << KTest05) | (1L << KTest06) | (1L << KTest07) | (1L << KTest08) | (1L << KTest09) | (1L << KTest10) | (1L << KTest11))) != 0)) {
				{
				{
				State = 174; test();
				}
				}
				State = 179;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 180; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Test01Context test01() {
			return GetRuleContext<Test01Context>(0);
		}
		public Test02Context test02() {
			return GetRuleContext<Test02Context>(0);
		}
		public Test03Context test03() {
			return GetRuleContext<Test03Context>(0);
		}
		public Test04Context test04() {
			return GetRuleContext<Test04Context>(0);
		}
		public Test05Context test05() {
			return GetRuleContext<Test05Context>(0);
		}
		public Test06Context test06() {
			return GetRuleContext<Test06Context>(0);
		}
		public Test07Context test07() {
			return GetRuleContext<Test07Context>(0);
		}
		public Test08Context test08() {
			return GetRuleContext<Test08Context>(0);
		}
		public Test09Context test09() {
			return GetRuleContext<Test09Context>(0);
		}
		public Test10Context test10() {
			return GetRuleContext<Test10Context>(0);
		}
		public Test11Context test11() {
			return GetRuleContext<Test11Context>(0);
		}
		public TestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestContext test() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test, out TestContext existingContext)) return existingContext;
		TestContext _localctx = new TestContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_test);
		try {
			State = 193;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KTest01:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; test01();
				}
				break;
			case KTest02:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; test02();
				}
				break;
			case KTest03:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184; test03();
				}
				break;
			case KTest04:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185; test04();
				}
				break;
			case KTest05:
				EnterOuterAlt(_localctx, 5);
				{
				State = 186; test05();
				}
				break;
			case KTest06:
				EnterOuterAlt(_localctx, 6);
				{
				State = 187; test06();
				}
				break;
			case KTest07:
				EnterOuterAlt(_localctx, 7);
				{
				State = 188; test07();
				}
				break;
			case KTest08:
				EnterOuterAlt(_localctx, 8);
				{
				State = 189; test08();
				}
				break;
			case KTest09:
				EnterOuterAlt(_localctx, 9);
				{
				State = 190; test09();
				}
				break;
			case KTest10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 191; test10();
				}
				break;
			case KTest11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 192; test11();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test01Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTest01() { return GetToken(TestLangOneParser.KTest01, 0); }
		public NamespaceDeclaration01Context namespaceDeclaration01() {
			return GetRuleContext<NamespaceDeclaration01Context>(0);
		}
		public Test01Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test01; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest01(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test01Context test01() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test01, out Test01Context existingContext)) return existingContext;
		Test01Context _localctx = new Test01Context(_ctx, State);
		EnterRule(_localctx, 4, RULE_test01);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(KTest01);
			State = 196; namespaceDeclaration01();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclaration01Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(TestLangOneParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBody01Context namespaceBody01() {
			return GetRuleContext<NamespaceBody01Context>(0);
		}
		public NamespaceDeclaration01Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration01; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration01(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclaration01Context namespaceDeclaration01() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceDeclaration01, out NamespaceDeclaration01Context existingContext)) return existingContext;
		NamespaceDeclaration01Context _localctx = new NamespaceDeclaration01Context(_ctx, State);
		EnterRule(_localctx, 6, RULE_namespaceDeclaration01);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(KNamespace);
			State = 199; qualifiedName();
			State = 200; namespaceBody01();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBody01Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(TestLangOneParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(TestLangOneParser.TCloseBrace, 0); }
		public Declaration01Context[] declaration01() {
			return GetRuleContexts<Declaration01Context>();
		}
		public Declaration01Context declaration01(int i) {
			return GetRuleContext<Declaration01Context>(i);
		}
		public NamespaceBody01Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody01; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody01(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBody01Context namespaceBody01() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceBody01, out NamespaceBody01Context existingContext)) return existingContext;
		NamespaceBody01Context _localctx = new NamespaceBody01Context(_ctx, State);
		EnterRule(_localctx, 8, RULE_namespaceBody01);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(TOpenBrace);
			State = 206;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KVertex || _la==KArrow) {
				{
				{
				State = 203; declaration01();
				}
				}
				State = 208;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 209; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration01Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Vertex01Context vertex01() {
			return GetRuleContext<Vertex01Context>(0);
		}
		public Arrow01Context arrow01() {
			return GetRuleContext<Arrow01Context>(0);
		}
		public Declaration01Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration01; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration01(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration01Context declaration01() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_declaration01, out Declaration01Context existingContext)) return existingContext;
		Declaration01Context _localctx = new Declaration01Context(_ctx, State);
		EnterRule(_localctx, 10, RULE_declaration01);
		try {
			State = 213;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVertex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211; vertex01();
				}
				break;
			case KArrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; arrow01();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertex01Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KVertex() { return GetToken(TestLangOneParser.KVertex, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Vertex01Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex01; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex01(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vertex01Context vertex01() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_vertex01, out Vertex01Context existingContext)) return existingContext;
		Vertex01Context _localctx = new Vertex01Context(_ctx, State);
		EnterRule(_localctx, 12, RULE_vertex01);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(KVertex);
			State = 216; name();
			State = 217; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow01Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public QualifierContext source;
		public QualifierContext target;
		public ITerminalNode KArrow() { return GetToken(TestLangOneParser.KArrow, 0); }
		public ITerminalNode TArrow() { return GetToken(TestLangOneParser.TArrow, 0); }
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public Arrow01Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow01; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow01(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arrow01Context arrow01() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_arrow01, out Arrow01Context existingContext)) return existingContext;
		Arrow01Context _localctx = new Arrow01Context(_ctx, State);
		EnterRule(_localctx, 14, RULE_arrow01);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(KArrow);
			State = 220; _localctx.source = qualifier();
			State = 221; Match(TArrow);
			State = 222; _localctx.target = qualifier();
			State = 223; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test02Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTest02() { return GetToken(TestLangOneParser.KTest02, 0); }
		public NamespaceDeclaration02Context namespaceDeclaration02() {
			return GetRuleContext<NamespaceDeclaration02Context>(0);
		}
		public Test02Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test02; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest02(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test02Context test02() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test02, out Test02Context existingContext)) return existingContext;
		Test02Context _localctx = new Test02Context(_ctx, State);
		EnterRule(_localctx, 16, RULE_test02);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(KTest02);
			State = 226; namespaceDeclaration02();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclaration02Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(TestLangOneParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBody02Context namespaceBody02() {
			return GetRuleContext<NamespaceBody02Context>(0);
		}
		public NamespaceDeclaration02Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration02; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration02(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclaration02Context namespaceDeclaration02() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceDeclaration02, out NamespaceDeclaration02Context existingContext)) return existingContext;
		NamespaceDeclaration02Context _localctx = new NamespaceDeclaration02Context(_ctx, State);
		EnterRule(_localctx, 18, RULE_namespaceDeclaration02);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(KNamespace);
			State = 229; qualifiedName();
			State = 230; namespaceBody02();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBody02Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(TestLangOneParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(TestLangOneParser.TCloseBrace, 0); }
		public Declaration02Context[] declaration02() {
			return GetRuleContexts<Declaration02Context>();
		}
		public Declaration02Context declaration02(int i) {
			return GetRuleContext<Declaration02Context>(i);
		}
		public NamespaceBody02Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody02; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody02(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBody02Context namespaceBody02() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceBody02, out NamespaceBody02Context existingContext)) return existingContext;
		NamespaceBody02Context _localctx = new NamespaceBody02Context(_ctx, State);
		EnterRule(_localctx, 20, RULE_namespaceBody02);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(TOpenBrace);
			State = 236;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KVertex || _la==KArrow) {
				{
				{
				State = 233; declaration02();
				}
				}
				State = 238;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 239; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration02Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Vertex02Context vertex02() {
			return GetRuleContext<Vertex02Context>(0);
		}
		public Arrow02Context arrow02() {
			return GetRuleContext<Arrow02Context>(0);
		}
		public Declaration02Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration02; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration02(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration02Context declaration02() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_declaration02, out Declaration02Context existingContext)) return existingContext;
		Declaration02Context _localctx = new Declaration02Context(_ctx, State);
		EnterRule(_localctx, 22, RULE_declaration02);
		try {
			State = 243;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVertex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241; vertex02();
				}
				break;
			case KArrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242; arrow02();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertex02Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KVertex() { return GetToken(TestLangOneParser.KVertex, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Vertex02Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex02; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex02(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vertex02Context vertex02() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_vertex02, out Vertex02Context existingContext)) return existingContext;
		Vertex02Context _localctx = new Vertex02Context(_ctx, State);
		EnterRule(_localctx, 24, RULE_vertex02);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(KVertex);
			State = 246; name();
			State = 247; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow02Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KArrow() { return GetToken(TestLangOneParser.KArrow, 0); }
		public Source02Context source02() {
			return GetRuleContext<Source02Context>(0);
		}
		public ITerminalNode TArrow() { return GetToken(TestLangOneParser.TArrow, 0); }
		public Target02Context target02() {
			return GetRuleContext<Target02Context>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Arrow02Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow02; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow02(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arrow02Context arrow02() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_arrow02, out Arrow02Context existingContext)) return existingContext;
		Arrow02Context _localctx = new Arrow02Context(_ctx, State);
		EnterRule(_localctx, 26, RULE_arrow02);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(KArrow);
			State = 250; source02();
			State = 251; Match(TArrow);
			State = 252; target02();
			State = 253; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Source02Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public Source02Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source02; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource02(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Source02Context source02() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_source02, out Source02Context existingContext)) return existingContext;
		Source02Context _localctx = new Source02Context(_ctx, State);
		EnterRule(_localctx, 28, RULE_source02);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target02Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public Target02Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target02; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget02(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target02Context target02() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_target02, out Target02Context existingContext)) return existingContext;
		Target02Context _localctx = new Target02Context(_ctx, State);
		EnterRule(_localctx, 30, RULE_target02);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test03Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTest03() { return GetToken(TestLangOneParser.KTest03, 0); }
		public NamespaceDeclaration03Context namespaceDeclaration03() {
			return GetRuleContext<NamespaceDeclaration03Context>(0);
		}
		public Test03Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test03; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest03(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test03Context test03() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test03, out Test03Context existingContext)) return existingContext;
		Test03Context _localctx = new Test03Context(_ctx, State);
		EnterRule(_localctx, 32, RULE_test03);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(KTest03);
			State = 260; namespaceDeclaration03();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclaration03Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(TestLangOneParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBody03Context namespaceBody03() {
			return GetRuleContext<NamespaceBody03Context>(0);
		}
		public NamespaceDeclaration03Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration03; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration03(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclaration03Context namespaceDeclaration03() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceDeclaration03, out NamespaceDeclaration03Context existingContext)) return existingContext;
		NamespaceDeclaration03Context _localctx = new NamespaceDeclaration03Context(_ctx, State);
		EnterRule(_localctx, 34, RULE_namespaceDeclaration03);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(KNamespace);
			State = 263; qualifiedName();
			State = 264; namespaceBody03();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBody03Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(TestLangOneParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(TestLangOneParser.TCloseBrace, 0); }
		public Declaration03Context[] declaration03() {
			return GetRuleContexts<Declaration03Context>();
		}
		public Declaration03Context declaration03(int i) {
			return GetRuleContext<Declaration03Context>(i);
		}
		public NamespaceBody03Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody03; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody03(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBody03Context namespaceBody03() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceBody03, out NamespaceBody03Context existingContext)) return existingContext;
		NamespaceBody03Context _localctx = new NamespaceBody03Context(_ctx, State);
		EnterRule(_localctx, 36, RULE_namespaceBody03);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(TOpenBrace);
			State = 270;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KVertex || _la==KArrow) {
				{
				{
				State = 267; declaration03();
				}
				}
				State = 272;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 273; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration03Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Vertex03Context vertex03() {
			return GetRuleContext<Vertex03Context>(0);
		}
		public Arrow03Context arrow03() {
			return GetRuleContext<Arrow03Context>(0);
		}
		public Declaration03Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration03; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration03(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration03Context declaration03() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_declaration03, out Declaration03Context existingContext)) return existingContext;
		Declaration03Context _localctx = new Declaration03Context(_ctx, State);
		EnterRule(_localctx, 38, RULE_declaration03);
		try {
			State = 277;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVertex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275; vertex03();
				}
				break;
			case KArrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276; arrow03();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertex03Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KVertex() { return GetToken(TestLangOneParser.KVertex, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Vertex03Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex03; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex03(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vertex03Context vertex03() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_vertex03, out Vertex03Context existingContext)) return existingContext;
		Vertex03Context _localctx = new Vertex03Context(_ctx, State);
		EnterRule(_localctx, 40, RULE_vertex03);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(KVertex);
			State = 280; name();
			State = 281; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow03Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KArrow() { return GetToken(TestLangOneParser.KArrow, 0); }
		public Source03Context source03() {
			return GetRuleContext<Source03Context>(0);
		}
		public ITerminalNode TArrow() { return GetToken(TestLangOneParser.TArrow, 0); }
		public Target03Context target03() {
			return GetRuleContext<Target03Context>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Arrow03Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow03; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow03(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arrow03Context arrow03() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_arrow03, out Arrow03Context existingContext)) return existingContext;
		Arrow03Context _localctx = new Arrow03Context(_ctx, State);
		EnterRule(_localctx, 42, RULE_arrow03);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(KArrow);
			State = 284; source03();
			State = 285; Match(TArrow);
			State = 286; target03();
			State = 287; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Source03Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public Source03Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source03; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource03(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Source03Context source03() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_source03, out Source03Context existingContext)) return existingContext;
		Source03Context _localctx = new Source03Context(_ctx, State);
		EnterRule(_localctx, 44, RULE_source03);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target03Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public Target03Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target03; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget03(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target03Context target03() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_target03, out Target03Context existingContext)) return existingContext;
		Target03Context _localctx = new Target03Context(_ctx, State);
		EnterRule(_localctx, 46, RULE_target03);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test04Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTest04() { return GetToken(TestLangOneParser.KTest04, 0); }
		public NamespaceDeclaration04Context namespaceDeclaration04() {
			return GetRuleContext<NamespaceDeclaration04Context>(0);
		}
		public Test04Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test04; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest04(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test04Context test04() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test04, out Test04Context existingContext)) return existingContext;
		Test04Context _localctx = new Test04Context(_ctx, State);
		EnterRule(_localctx, 48, RULE_test04);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(KTest04);
			State = 294; namespaceDeclaration04();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclaration04Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(TestLangOneParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBody04Context namespaceBody04() {
			return GetRuleContext<NamespaceBody04Context>(0);
		}
		public NamespaceDeclaration04Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration04; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration04(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclaration04Context namespaceDeclaration04() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceDeclaration04, out NamespaceDeclaration04Context existingContext)) return existingContext;
		NamespaceDeclaration04Context _localctx = new NamespaceDeclaration04Context(_ctx, State);
		EnterRule(_localctx, 50, RULE_namespaceDeclaration04);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(KNamespace);
			State = 297; qualifiedName();
			State = 298; namespaceBody04();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBody04Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(TestLangOneParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(TestLangOneParser.TCloseBrace, 0); }
		public Declaration04Context[] declaration04() {
			return GetRuleContexts<Declaration04Context>();
		}
		public Declaration04Context declaration04(int i) {
			return GetRuleContext<Declaration04Context>(i);
		}
		public NamespaceBody04Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody04; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody04(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBody04Context namespaceBody04() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceBody04, out NamespaceBody04Context existingContext)) return existingContext;
		NamespaceBody04Context _localctx = new NamespaceBody04Context(_ctx, State);
		EnterRule(_localctx, 52, RULE_namespaceBody04);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(TOpenBrace);
			State = 304;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KVertex || _la==KArrow) {
				{
				{
				State = 301; declaration04();
				}
				}
				State = 306;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 307; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration04Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Vertex04Context vertex04() {
			return GetRuleContext<Vertex04Context>(0);
		}
		public Arrow04Context arrow04() {
			return GetRuleContext<Arrow04Context>(0);
		}
		public Declaration04Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration04; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration04(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration04Context declaration04() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_declaration04, out Declaration04Context existingContext)) return existingContext;
		Declaration04Context _localctx = new Declaration04Context(_ctx, State);
		EnterRule(_localctx, 54, RULE_declaration04);
		try {
			State = 311;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVertex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309; vertex04();
				}
				break;
			case KArrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310; arrow04();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertex04Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KVertex() { return GetToken(TestLangOneParser.KVertex, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Vertex04Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex04; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex04(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vertex04Context vertex04() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_vertex04, out Vertex04Context existingContext)) return existingContext;
		Vertex04Context _localctx = new Vertex04Context(_ctx, State);
		EnterRule(_localctx, 56, RULE_vertex04);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(KVertex);
			State = 314; name();
			State = 315; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow04Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public QualifierContext source;
		public QualifierContext target;
		public ITerminalNode KArrow() { return GetToken(TestLangOneParser.KArrow, 0); }
		public ITerminalNode TArrow() { return GetToken(TestLangOneParser.TArrow, 0); }
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public Arrow04Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow04; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow04(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arrow04Context arrow04() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_arrow04, out Arrow04Context existingContext)) return existingContext;
		Arrow04Context _localctx = new Arrow04Context(_ctx, State);
		EnterRule(_localctx, 58, RULE_arrow04);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(KArrow);
			State = 318; _localctx.source = qualifier();
			State = 319; Match(TArrow);
			State = 320; _localctx.target = qualifier();
			State = 321; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test05Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTest05() { return GetToken(TestLangOneParser.KTest05, 0); }
		public NamespaceDeclaration05Context namespaceDeclaration05() {
			return GetRuleContext<NamespaceDeclaration05Context>(0);
		}
		public Test05Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test05; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest05(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test05Context test05() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test05, out Test05Context existingContext)) return existingContext;
		Test05Context _localctx = new Test05Context(_ctx, State);
		EnterRule(_localctx, 60, RULE_test05);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(KTest05);
			State = 324; namespaceDeclaration05();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclaration05Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(TestLangOneParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBody05Context namespaceBody05() {
			return GetRuleContext<NamespaceBody05Context>(0);
		}
		public NamespaceDeclaration05Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration05; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration05(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclaration05Context namespaceDeclaration05() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceDeclaration05, out NamespaceDeclaration05Context existingContext)) return existingContext;
		NamespaceDeclaration05Context _localctx = new NamespaceDeclaration05Context(_ctx, State);
		EnterRule(_localctx, 62, RULE_namespaceDeclaration05);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(KNamespace);
			State = 327; qualifiedName();
			State = 328; namespaceBody05();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBody05Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(TestLangOneParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(TestLangOneParser.TCloseBrace, 0); }
		public Declaration05Context[] declaration05() {
			return GetRuleContexts<Declaration05Context>();
		}
		public Declaration05Context declaration05(int i) {
			return GetRuleContext<Declaration05Context>(i);
		}
		public NamespaceBody05Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody05; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody05(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBody05Context namespaceBody05() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceBody05, out NamespaceBody05Context existingContext)) return existingContext;
		NamespaceBody05Context _localctx = new NamespaceBody05Context(_ctx, State);
		EnterRule(_localctx, 64, RULE_namespaceBody05);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(TOpenBrace);
			State = 334;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KVertex || _la==KArrow) {
				{
				{
				State = 331; declaration05();
				}
				}
				State = 336;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 337; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration05Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Vertex05Context vertex05() {
			return GetRuleContext<Vertex05Context>(0);
		}
		public Arrow05Context arrow05() {
			return GetRuleContext<Arrow05Context>(0);
		}
		public Declaration05Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration05; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration05(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration05Context declaration05() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_declaration05, out Declaration05Context existingContext)) return existingContext;
		Declaration05Context _localctx = new Declaration05Context(_ctx, State);
		EnterRule(_localctx, 66, RULE_declaration05);
		try {
			State = 341;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVertex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339; vertex05();
				}
				break;
			case KArrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340; arrow05();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertex05Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KVertex() { return GetToken(TestLangOneParser.KVertex, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Vertex05Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex05; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex05(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vertex05Context vertex05() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_vertex05, out Vertex05Context existingContext)) return existingContext;
		Vertex05Context _localctx = new Vertex05Context(_ctx, State);
		EnterRule(_localctx, 68, RULE_vertex05);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(KVertex);
			State = 344; name();
			State = 345; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow05Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public QualifierContext source;
		public QualifierContext target;
		public ITerminalNode KArrow() { return GetToken(TestLangOneParser.KArrow, 0); }
		public ITerminalNode TArrow() { return GetToken(TestLangOneParser.TArrow, 0); }
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public Arrow05Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow05; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow05(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arrow05Context arrow05() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_arrow05, out Arrow05Context existingContext)) return existingContext;
		Arrow05Context _localctx = new Arrow05Context(_ctx, State);
		EnterRule(_localctx, 70, RULE_arrow05);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(KArrow);
			State = 348; _localctx.source = qualifier();
			State = 349; Match(TArrow);
			State = 350; _localctx.target = qualifier();
			State = 351; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test06Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTest06() { return GetToken(TestLangOneParser.KTest06, 0); }
		public NamespaceDeclaration06Context namespaceDeclaration06() {
			return GetRuleContext<NamespaceDeclaration06Context>(0);
		}
		public Test06Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test06; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest06(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test06Context test06() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test06, out Test06Context existingContext)) return existingContext;
		Test06Context _localctx = new Test06Context(_ctx, State);
		EnterRule(_localctx, 72, RULE_test06);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(KTest06);
			State = 354; namespaceDeclaration06();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclaration06Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(TestLangOneParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBody06Context namespaceBody06() {
			return GetRuleContext<NamespaceBody06Context>(0);
		}
		public NamespaceDeclaration06Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration06; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration06(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclaration06Context namespaceDeclaration06() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceDeclaration06, out NamespaceDeclaration06Context existingContext)) return existingContext;
		NamespaceDeclaration06Context _localctx = new NamespaceDeclaration06Context(_ctx, State);
		EnterRule(_localctx, 74, RULE_namespaceDeclaration06);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(KNamespace);
			State = 357; qualifiedName();
			State = 358; namespaceBody06();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBody06Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(TestLangOneParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(TestLangOneParser.TCloseBrace, 0); }
		public Declaration06Context[] declaration06() {
			return GetRuleContexts<Declaration06Context>();
		}
		public Declaration06Context declaration06(int i) {
			return GetRuleContext<Declaration06Context>(i);
		}
		public NamespaceBody06Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody06; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody06(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBody06Context namespaceBody06() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceBody06, out NamespaceBody06Context existingContext)) return existingContext;
		NamespaceBody06Context _localctx = new NamespaceBody06Context(_ctx, State);
		EnterRule(_localctx, 76, RULE_namespaceBody06);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(TOpenBrace);
			State = 364;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KVertex || _la==KArrow) {
				{
				{
				State = 361; declaration06();
				}
				}
				State = 366;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 367; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration06Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Vertex06Context vertex06() {
			return GetRuleContext<Vertex06Context>(0);
		}
		public Arrow06Context arrow06() {
			return GetRuleContext<Arrow06Context>(0);
		}
		public Declaration06Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration06; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration06(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration06Context declaration06() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_declaration06, out Declaration06Context existingContext)) return existingContext;
		Declaration06Context _localctx = new Declaration06Context(_ctx, State);
		EnterRule(_localctx, 78, RULE_declaration06);
		try {
			State = 371;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVertex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369; vertex06();
				}
				break;
			case KArrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 370; arrow06();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertex06Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KVertex() { return GetToken(TestLangOneParser.KVertex, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Vertex06Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex06; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex06(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vertex06Context vertex06() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_vertex06, out Vertex06Context existingContext)) return existingContext;
		Vertex06Context _localctx = new Vertex06Context(_ctx, State);
		EnterRule(_localctx, 80, RULE_vertex06);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(KVertex);
			State = 374; name();
			State = 375; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow06Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public NameContext source;
		public NameContext target;
		public ITerminalNode KArrow() { return GetToken(TestLangOneParser.KArrow, 0); }
		public ITerminalNode TArrow() { return GetToken(TestLangOneParser.TArrow, 0); }
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Arrow06Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow06; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow06(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arrow06Context arrow06() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_arrow06, out Arrow06Context existingContext)) return existingContext;
		Arrow06Context _localctx = new Arrow06Context(_ctx, State);
		EnterRule(_localctx, 82, RULE_arrow06);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(KArrow);
			State = 378; _localctx.source = name();
			State = 379; Match(TArrow);
			State = 380; _localctx.target = name();
			State = 381; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test07Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTest07() { return GetToken(TestLangOneParser.KTest07, 0); }
		public NamespaceDeclaration07Context namespaceDeclaration07() {
			return GetRuleContext<NamespaceDeclaration07Context>(0);
		}
		public Test07Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test07; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest07(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test07Context test07() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test07, out Test07Context existingContext)) return existingContext;
		Test07Context _localctx = new Test07Context(_ctx, State);
		EnterRule(_localctx, 84, RULE_test07);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(KTest07);
			State = 384; namespaceDeclaration07();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclaration07Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(TestLangOneParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBody07Context namespaceBody07() {
			return GetRuleContext<NamespaceBody07Context>(0);
		}
		public NamespaceDeclaration07Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration07; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration07(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclaration07Context namespaceDeclaration07() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceDeclaration07, out NamespaceDeclaration07Context existingContext)) return existingContext;
		NamespaceDeclaration07Context _localctx = new NamespaceDeclaration07Context(_ctx, State);
		EnterRule(_localctx, 86, RULE_namespaceDeclaration07);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(KNamespace);
			State = 387; qualifiedName();
			State = 388; namespaceBody07();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBody07Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(TestLangOneParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(TestLangOneParser.TCloseBrace, 0); }
		public Declaration07Context[] declaration07() {
			return GetRuleContexts<Declaration07Context>();
		}
		public Declaration07Context declaration07(int i) {
			return GetRuleContext<Declaration07Context>(i);
		}
		public NamespaceBody07Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody07; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody07(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBody07Context namespaceBody07() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceBody07, out NamespaceBody07Context existingContext)) return existingContext;
		NamespaceBody07Context _localctx = new NamespaceBody07Context(_ctx, State);
		EnterRule(_localctx, 88, RULE_namespaceBody07);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(TOpenBrace);
			State = 394;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KVertex || _la==KArrow) {
				{
				{
				State = 391; declaration07();
				}
				}
				State = 396;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 397; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration07Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Vertex07Context vertex07() {
			return GetRuleContext<Vertex07Context>(0);
		}
		public Arrow07Context arrow07() {
			return GetRuleContext<Arrow07Context>(0);
		}
		public Declaration07Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration07; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration07(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration07Context declaration07() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_declaration07, out Declaration07Context existingContext)) return existingContext;
		Declaration07Context _localctx = new Declaration07Context(_ctx, State);
		EnterRule(_localctx, 90, RULE_declaration07);
		try {
			State = 401;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVertex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 399; vertex07();
				}
				break;
			case KArrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 400; arrow07();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertex07Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KVertex() { return GetToken(TestLangOneParser.KVertex, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Vertex07Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex07; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex07(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vertex07Context vertex07() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_vertex07, out Vertex07Context existingContext)) return existingContext;
		Vertex07Context _localctx = new Vertex07Context(_ctx, State);
		EnterRule(_localctx, 92, RULE_vertex07);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(KVertex);
			State = 404; name();
			State = 405; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow07Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KArrow() { return GetToken(TestLangOneParser.KArrow, 0); }
		public Source07Context source07() {
			return GetRuleContext<Source07Context>(0);
		}
		public ITerminalNode TArrow() { return GetToken(TestLangOneParser.TArrow, 0); }
		public Target07Context target07() {
			return GetRuleContext<Target07Context>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Arrow07Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow07; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow07(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arrow07Context arrow07() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_arrow07, out Arrow07Context existingContext)) return existingContext;
		Arrow07Context _localctx = new Arrow07Context(_ctx, State);
		EnterRule(_localctx, 94, RULE_arrow07);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(KArrow);
			State = 408; source07();
			State = 409; Match(TArrow);
			State = 410; target07();
			State = 411; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Source07Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Source07Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source07; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource07(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Source07Context source07() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_source07, out Source07Context existingContext)) return existingContext;
		Source07Context _localctx = new Source07Context(_ctx, State);
		EnterRule(_localctx, 96, RULE_source07);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target07Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Target07Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target07; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget07(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target07Context target07() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_target07, out Target07Context existingContext)) return existingContext;
		Target07Context _localctx = new Target07Context(_ctx, State);
		EnterRule(_localctx, 98, RULE_target07);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test08Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTest08() { return GetToken(TestLangOneParser.KTest08, 0); }
		public NamespaceDeclaration08Context namespaceDeclaration08() {
			return GetRuleContext<NamespaceDeclaration08Context>(0);
		}
		public Test08Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test08; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest08(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test08Context test08() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test08, out Test08Context existingContext)) return existingContext;
		Test08Context _localctx = new Test08Context(_ctx, State);
		EnterRule(_localctx, 100, RULE_test08);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(KTest08);
			State = 418; namespaceDeclaration08();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclaration08Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(TestLangOneParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBody08Context namespaceBody08() {
			return GetRuleContext<NamespaceBody08Context>(0);
		}
		public NamespaceDeclaration08Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration08; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration08(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclaration08Context namespaceDeclaration08() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceDeclaration08, out NamespaceDeclaration08Context existingContext)) return existingContext;
		NamespaceDeclaration08Context _localctx = new NamespaceDeclaration08Context(_ctx, State);
		EnterRule(_localctx, 102, RULE_namespaceDeclaration08);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(KNamespace);
			State = 421; qualifiedName();
			State = 422; namespaceBody08();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBody08Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(TestLangOneParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(TestLangOneParser.TCloseBrace, 0); }
		public Declaration08Context[] declaration08() {
			return GetRuleContexts<Declaration08Context>();
		}
		public Declaration08Context declaration08(int i) {
			return GetRuleContext<Declaration08Context>(i);
		}
		public NamespaceBody08Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody08; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody08(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBody08Context namespaceBody08() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceBody08, out NamespaceBody08Context existingContext)) return existingContext;
		NamespaceBody08Context _localctx = new NamespaceBody08Context(_ctx, State);
		EnterRule(_localctx, 104, RULE_namespaceBody08);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(TOpenBrace);
			State = 428;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KVertex || _la==KArrow) {
				{
				{
				State = 425; declaration08();
				}
				}
				State = 430;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 431; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration08Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Vertex08Context vertex08() {
			return GetRuleContext<Vertex08Context>(0);
		}
		public Arrow08Context arrow08() {
			return GetRuleContext<Arrow08Context>(0);
		}
		public Declaration08Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration08; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration08(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration08Context declaration08() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_declaration08, out Declaration08Context existingContext)) return existingContext;
		Declaration08Context _localctx = new Declaration08Context(_ctx, State);
		EnterRule(_localctx, 106, RULE_declaration08);
		try {
			State = 435;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVertex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 433; vertex08();
				}
				break;
			case KArrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434; arrow08();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertex08Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KVertex() { return GetToken(TestLangOneParser.KVertex, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Vertex08Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex08; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex08(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vertex08Context vertex08() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_vertex08, out Vertex08Context existingContext)) return existingContext;
		Vertex08Context _localctx = new Vertex08Context(_ctx, State);
		EnterRule(_localctx, 108, RULE_vertex08);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(KVertex);
			State = 438; name();
			State = 439; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow08Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KArrow() { return GetToken(TestLangOneParser.KArrow, 0); }
		public Source08Context source08() {
			return GetRuleContext<Source08Context>(0);
		}
		public ITerminalNode TArrow() { return GetToken(TestLangOneParser.TArrow, 0); }
		public Target08Context target08() {
			return GetRuleContext<Target08Context>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Arrow08Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow08; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow08(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arrow08Context arrow08() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_arrow08, out Arrow08Context existingContext)) return existingContext;
		Arrow08Context _localctx = new Arrow08Context(_ctx, State);
		EnterRule(_localctx, 110, RULE_arrow08);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; Match(KArrow);
			State = 442; source08();
			State = 443; Match(TArrow);
			State = 444; target08();
			State = 445; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Source08Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Source08Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source08; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource08(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Source08Context source08() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_source08, out Source08Context existingContext)) return existingContext;
		Source08Context _localctx = new Source08Context(_ctx, State);
		EnterRule(_localctx, 112, RULE_source08);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target08Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Target08Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target08; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget08(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target08Context target08() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_target08, out Target08Context existingContext)) return existingContext;
		Target08Context _localctx = new Target08Context(_ctx, State);
		EnterRule(_localctx, 114, RULE_target08);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test09Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTest09() { return GetToken(TestLangOneParser.KTest09, 0); }
		public NamespaceDeclaration09Context namespaceDeclaration09() {
			return GetRuleContext<NamespaceDeclaration09Context>(0);
		}
		public Test09Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test09; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest09(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test09Context test09() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test09, out Test09Context existingContext)) return existingContext;
		Test09Context _localctx = new Test09Context(_ctx, State);
		EnterRule(_localctx, 116, RULE_test09);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(KTest09);
			State = 452; namespaceDeclaration09();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclaration09Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(TestLangOneParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBody09Context namespaceBody09() {
			return GetRuleContext<NamespaceBody09Context>(0);
		}
		public NamespaceDeclaration09Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration09; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration09(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclaration09Context namespaceDeclaration09() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceDeclaration09, out NamespaceDeclaration09Context existingContext)) return existingContext;
		NamespaceDeclaration09Context _localctx = new NamespaceDeclaration09Context(_ctx, State);
		EnterRule(_localctx, 118, RULE_namespaceDeclaration09);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(KNamespace);
			State = 455; qualifiedName();
			State = 456; namespaceBody09();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBody09Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(TestLangOneParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(TestLangOneParser.TCloseBrace, 0); }
		public Declaration09Context[] declaration09() {
			return GetRuleContexts<Declaration09Context>();
		}
		public Declaration09Context declaration09(int i) {
			return GetRuleContext<Declaration09Context>(i);
		}
		public NamespaceBody09Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody09; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody09(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBody09Context namespaceBody09() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceBody09, out NamespaceBody09Context existingContext)) return existingContext;
		NamespaceBody09Context _localctx = new NamespaceBody09Context(_ctx, State);
		EnterRule(_localctx, 120, RULE_namespaceBody09);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(TOpenBrace);
			State = 462;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KVertex || _la==KArrow) {
				{
				{
				State = 459; declaration09();
				}
				}
				State = 464;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 465; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration09Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Vertex09Context vertex09() {
			return GetRuleContext<Vertex09Context>(0);
		}
		public Arrow09Context arrow09() {
			return GetRuleContext<Arrow09Context>(0);
		}
		public Declaration09Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration09; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration09(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration09Context declaration09() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_declaration09, out Declaration09Context existingContext)) return existingContext;
		Declaration09Context _localctx = new Declaration09Context(_ctx, State);
		EnterRule(_localctx, 122, RULE_declaration09);
		try {
			State = 469;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVertex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 467; vertex09();
				}
				break;
			case KArrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 468; arrow09();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertex09Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KVertex() { return GetToken(TestLangOneParser.KVertex, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Vertex09Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex09; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex09(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vertex09Context vertex09() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_vertex09, out Vertex09Context existingContext)) return existingContext;
		Vertex09Context _localctx = new Vertex09Context(_ctx, State);
		EnterRule(_localctx, 124, RULE_vertex09);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(KVertex);
			State = 472; name();
			State = 473; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow09Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public NameContext source;
		public NameContext target;
		public ITerminalNode KArrow() { return GetToken(TestLangOneParser.KArrow, 0); }
		public ITerminalNode TArrow() { return GetToken(TestLangOneParser.TArrow, 0); }
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Arrow09Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow09; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow09(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arrow09Context arrow09() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_arrow09, out Arrow09Context existingContext)) return existingContext;
		Arrow09Context _localctx = new Arrow09Context(_ctx, State);
		EnterRule(_localctx, 126, RULE_arrow09);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475; Match(KArrow);
			State = 476; _localctx.source = name();
			State = 477; Match(TArrow);
			State = 478; _localctx.target = name();
			State = 479; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test10Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTest10() { return GetToken(TestLangOneParser.KTest10, 0); }
		public NamespaceDeclaration10Context namespaceDeclaration10() {
			return GetRuleContext<NamespaceDeclaration10Context>(0);
		}
		public Test10Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test10; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest10(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test10Context test10() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test10, out Test10Context existingContext)) return existingContext;
		Test10Context _localctx = new Test10Context(_ctx, State);
		EnterRule(_localctx, 128, RULE_test10);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(KTest10);
			State = 482; namespaceDeclaration10();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclaration10Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(TestLangOneParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBody10Context namespaceBody10() {
			return GetRuleContext<NamespaceBody10Context>(0);
		}
		public NamespaceDeclaration10Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration10; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration10(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclaration10Context namespaceDeclaration10() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceDeclaration10, out NamespaceDeclaration10Context existingContext)) return existingContext;
		NamespaceDeclaration10Context _localctx = new NamespaceDeclaration10Context(_ctx, State);
		EnterRule(_localctx, 130, RULE_namespaceDeclaration10);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484; Match(KNamespace);
			State = 485; qualifiedName();
			State = 486; namespaceBody10();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBody10Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(TestLangOneParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(TestLangOneParser.TCloseBrace, 0); }
		public Declaration10Context[] declaration10() {
			return GetRuleContexts<Declaration10Context>();
		}
		public Declaration10Context declaration10(int i) {
			return GetRuleContext<Declaration10Context>(i);
		}
		public NamespaceBody10Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody10; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody10(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBody10Context namespaceBody10() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceBody10, out NamespaceBody10Context existingContext)) return existingContext;
		NamespaceBody10Context _localctx = new NamespaceBody10Context(_ctx, State);
		EnterRule(_localctx, 132, RULE_namespaceBody10);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488; Match(TOpenBrace);
			State = 492;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KVertex || _la==KArrow) {
				{
				{
				State = 489; declaration10();
				}
				}
				State = 494;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 495; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration10Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Vertex10Context vertex10() {
			return GetRuleContext<Vertex10Context>(0);
		}
		public Arrow10Context arrow10() {
			return GetRuleContext<Arrow10Context>(0);
		}
		public Declaration10Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration10; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration10(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration10Context declaration10() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_declaration10, out Declaration10Context existingContext)) return existingContext;
		Declaration10Context _localctx = new Declaration10Context(_ctx, State);
		EnterRule(_localctx, 134, RULE_declaration10);
		try {
			State = 499;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVertex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 497; vertex10();
				}
				break;
			case KArrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 498; arrow10();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertex10Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KVertex() { return GetToken(TestLangOneParser.KVertex, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Vertex10Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex10; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex10(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vertex10Context vertex10() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_vertex10, out Vertex10Context existingContext)) return existingContext;
		Vertex10Context _localctx = new Vertex10Context(_ctx, State);
		EnterRule(_localctx, 136, RULE_vertex10);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(KVertex);
			State = 502; name();
			State = 503; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow10Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public NameContext source;
		public NameContext target;
		public ITerminalNode KArrow() { return GetToken(TestLangOneParser.KArrow, 0); }
		public ITerminalNode TArrow() { return GetToken(TestLangOneParser.TArrow, 0); }
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Arrow10Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow10; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow10(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arrow10Context arrow10() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_arrow10, out Arrow10Context existingContext)) return existingContext;
		Arrow10Context _localctx = new Arrow10Context(_ctx, State);
		EnterRule(_localctx, 138, RULE_arrow10);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(KArrow);
			State = 506; _localctx.source = name();
			State = 507; Match(TArrow);
			State = 508; _localctx.target = name();
			State = 509; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test11Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTest11() { return GetToken(TestLangOneParser.KTest11, 0); }
		public NamespaceDeclaration11Context[] namespaceDeclaration11() {
			return GetRuleContexts<NamespaceDeclaration11Context>();
		}
		public NamespaceDeclaration11Context namespaceDeclaration11(int i) {
			return GetRuleContext<NamespaceDeclaration11Context>(i);
		}
		public Test11Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test11; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest11(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test11Context test11() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_test11, out Test11Context existingContext)) return existingContext;
		Test11Context _localctx = new Test11Context(_ctx, State);
		EnterRule(_localctx, 140, RULE_test11);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; Match(KTest11);
			State = 515;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KNamespace) {
				{
				{
				State = 512; namespaceDeclaration11();
				}
				}
				State = 517;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclaration11Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(TestLangOneParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBody11Context namespaceBody11() {
			return GetRuleContext<NamespaceBody11Context>(0);
		}
		public NamespaceDeclaration11Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration11; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration11(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclaration11Context namespaceDeclaration11() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceDeclaration11, out NamespaceDeclaration11Context existingContext)) return existingContext;
		NamespaceDeclaration11Context _localctx = new NamespaceDeclaration11Context(_ctx, State);
		EnterRule(_localctx, 142, RULE_namespaceDeclaration11);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; Match(KNamespace);
			State = 519; qualifiedName();
			State = 520; namespaceBody11();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBody11Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(TestLangOneParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(TestLangOneParser.TCloseBrace, 0); }
		public Declaration11Context[] declaration11() {
			return GetRuleContexts<Declaration11Context>();
		}
		public Declaration11Context declaration11(int i) {
			return GetRuleContext<Declaration11Context>(i);
		}
		public NamespaceBody11Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody11; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody11(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBody11Context namespaceBody11() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_namespaceBody11, out NamespaceBody11Context existingContext)) return existingContext;
		NamespaceBody11Context _localctx = new NamespaceBody11Context(_ctx, State);
		EnterRule(_localctx, 144, RULE_namespaceBody11);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522; Match(TOpenBrace);
			State = 526;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KVertex || _la==KArrow) {
				{
				{
				State = 523; declaration11();
				}
				}
				State = 528;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 529; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration11Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public Vertex11Context vertex11() {
			return GetRuleContext<Vertex11Context>(0);
		}
		public Arrow11Context arrow11() {
			return GetRuleContext<Arrow11Context>(0);
		}
		public Declaration11Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration11; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration11(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration11Context declaration11() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_declaration11, out Declaration11Context existingContext)) return existingContext;
		Declaration11Context _localctx = new Declaration11Context(_ctx, State);
		EnterRule(_localctx, 146, RULE_declaration11);
		try {
			State = 533;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KVertex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 531; vertex11();
				}
				break;
			case KArrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532; arrow11();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertex11Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KVertex() { return GetToken(TestLangOneParser.KVertex, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public Vertex11Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex11; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex11(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vertex11Context vertex11() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_vertex11, out Vertex11Context existingContext)) return existingContext;
		Vertex11Context _localctx = new Vertex11Context(_ctx, State);
		EnterRule(_localctx, 148, RULE_vertex11);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535; Match(KVertex);
			State = 536; name();
			State = 537; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow11Context : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public QualifiedNameContext source;
		public QualifiedNameContext target;
		public ITerminalNode KArrow() { return GetToken(TestLangOneParser.KArrow, 0); }
		public ITerminalNode TArrow() { return GetToken(TestLangOneParser.TArrow, 0); }
		public ITerminalNode TSemicolon() { return GetToken(TestLangOneParser.TSemicolon, 0); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public Arrow11Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow11; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrow11(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arrow11Context arrow11() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_arrow11, out Arrow11Context existingContext)) return existingContext;
		Arrow11Context _localctx = new Arrow11Context(_ctx, State);
		EnterRule(_localctx, 150, RULE_arrow11);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539; Match(KArrow);
			State = 540; _localctx.source = qualifiedName();
			State = 541; Match(TArrow);
			State = 542; _localctx.target = qualifiedName();
			State = 543; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_name, out NameContext existingContext)) return existingContext;
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_qualifiedName, out QualifiedNameContext existingContext)) return existingContext;
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(TestLangOneParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(TestLangOneParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_qualifier, out QualifierContext existingContext)) return existingContext;
		QualifierContext _localctx = new QualifierContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; identifier();
			State = 554;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TDot) {
				{
				{
				State = 550; Match(TDot);
				State = 551; identifier();
				}
				}
				State = 556;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(TestLangOneParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(TestLangOneParser.IdentifierVerbatim, 0); }
		public ITerminalNode IUri() { return GetToken(TestLangOneParser.IUri, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_identifier, out IdentifierContext existingContext)) return existingContext;
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			_la = _input.La(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (IUri - 75)) | (1L << (IdentifierNormal - 75)) | (1L << (IdentifierVerbatim - 75)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_literal, out LiteralContext existingContext)) return existingContext;
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_literal);
		try {
			State = 565;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 559; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 560; booleanLiteral();
				}
				break;
			case LInteger:
				EnterOuterAlt(_localctx, 3);
				{
				State = 561; integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 562; decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 5);
				{
				State = 563; scientificLiteral();
				}
				break;
			case LRegularString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 564; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KNull() { return GetToken(TestLangOneParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_nullLiteral, out NullLiteralContext existingContext)) return existingContext;
		NullLiteralContext _localctx = new NullLiteralContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(TestLangOneParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(TestLangOneParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_booleanLiteral, out BooleanLiteralContext existingContext)) return existingContext;
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			_la = _input.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode LInteger() { return GetToken(TestLangOneParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_integerLiteral, out IntegerLiteralContext existingContext)) return existingContext;
		IntegerLiteralContext _localctx = new IntegerLiteralContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode LDecimal() { return GetToken(TestLangOneParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_decimalLiteral, out DecimalLiteralContext existingContext)) return existingContext;
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode LScientific() { return GetToken(TestLangOneParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_scientificLiteral, out ScientificLiteralContext existingContext)) return existingContext;
		ScientificLiteralContext _localctx = new ScientificLiteralContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParserRuleContext {
		public ITerminalNode LRegularString() { return GetToken(TestLangOneParser.LRegularString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestLangOneParserVisitor<TResult> typedVisitor = visitor as ITestLangOneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		if (this.TryGetIncrementalContext(_ctx, State, RULE_stringLiteral, out StringLiteralContext existingContext)) return existingContext;
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; Match(LRegularString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x63\x246\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x3\x2\a\x2\xB2\n\x2\f\x2\xE\x2\xB5\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xC4\n\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\xCF\n\x6\f\x6\xE"+
		"\x6\xD2\v\x6\x3\x6\x3\x6\x3\a\x3\a\x5\a\xD8\n\a\x3\b\x3\b\x3\b\x3\b\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3"+
		"\f\a\f\xED\n\f\f\f\xE\f\xF0\v\f\x3\f\x3\f\x3\r\x3\r\x5\r\xF6\n\r\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3"+
		"\x14\a\x14\x10F\n\x14\f\x14\xE\x14\x112\v\x14\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x5\x15\x118\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\a\x1C\x131\n\x1C\f\x1C\xE\x1C"+
		"\x134\v\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x5\x1D\x13A\n\x1D\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3"+
		"!\x3!\x3!\x3!\x3\"\x3\"\a\"\x14F\n\"\f\"\xE\"\x152\v\"\x3\"\x3\"\x3#\x3"+
		"#\x5#\x158\n#\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3\'"+
		"\x3\'\x3\'\x3\'\x3(\x3(\a(\x16D\n(\f(\xE(\x170\v(\x3(\x3(\x3)\x3)\x5)"+
		"\x176\n)\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x3-\x3-\x3"+
		"-\x3-\x3.\x3.\a.\x18B\n.\f.\xE.\x18E\v.\x3.\x3.\x3/\x3/\x5/\x194\n/\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3"+
		"\x32\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3"+
		"\x35\x3\x36\x3\x36\a\x36\x1AD\n\x36\f\x36\xE\x36\x1B0\v\x36\x3\x36\x3"+
		"\x36\x3\x37\x3\x37\x5\x37\x1B6\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39"+
		"\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3;\x3;\x3<\x3<\x3<\x3=\x3"+
		"=\x3=\x3=\x3>\x3>\a>\x1CF\n>\f>\xE>\x1D2\v>\x3>\x3>\x3?\x3?\x5?\x1D8\n"+
		"?\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3"+
		"\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\a\x44\x1ED\n\x44"+
		"\f\x44\xE\x44\x1F0\v\x44\x3\x44\x3\x44\x3\x45\x3\x45\x5\x45\x1F6\n\x45"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3H\x3H\aH\x204\n"+
		"H\fH\xEH\x207\vH\x3I\x3I\x3I\x3I\x3J\x3J\aJ\x20F\nJ\fJ\xEJ\x212\vJ\x3"+
		"J\x3J\x3K\x3K\x5K\x218\nK\x3L\x3L\x3L\x3L\x3M\x3M\x3M\x3M\x3M\x3M\x3N"+
		"\x3N\x3O\x3O\x3P\x3P\x3P\aP\x22B\nP\fP\xEP\x22E\vP\x3Q\x3Q\x3R\x3R\x3"+
		"R\x3R\x3R\x3R\x5R\x238\nR\x3S\x3S\x3T\x3T\x3U\x3U\x3V\x3V\x3W\x3W\x3X"+
		"\x3X\x3X\x2\x2\x2Y\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2"+
		".\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2"+
		"\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64"+
		"\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82"+
		"\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96"+
		"\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA"+
		"\x2\xAC\x2\xAE\x2\x2\x4\x3\x2MO\x3\x2\v\f\x216\x2\xB3\x3\x2\x2\x2\x4\xC3"+
		"\x3\x2\x2\x2\x6\xC5\x3\x2\x2\x2\b\xC8\x3\x2\x2\x2\n\xCC\x3\x2\x2\x2\f"+
		"\xD7\x3\x2\x2\x2\xE\xD9\x3\x2\x2\x2\x10\xDD\x3\x2\x2\x2\x12\xE3\x3\x2"+
		"\x2\x2\x14\xE6\x3\x2\x2\x2\x16\xEA\x3\x2\x2\x2\x18\xF5\x3\x2\x2\x2\x1A"+
		"\xF7\x3\x2\x2\x2\x1C\xFB\x3\x2\x2\x2\x1E\x101\x3\x2\x2\x2 \x103\x3\x2"+
		"\x2\x2\"\x105\x3\x2\x2\x2$\x108\x3\x2\x2\x2&\x10C\x3\x2\x2\x2(\x117\x3"+
		"\x2\x2\x2*\x119\x3\x2\x2\x2,\x11D\x3\x2\x2\x2.\x123\x3\x2\x2\x2\x30\x125"+
		"\x3\x2\x2\x2\x32\x127\x3\x2\x2\x2\x34\x12A\x3\x2\x2\x2\x36\x12E\x3\x2"+
		"\x2\x2\x38\x139\x3\x2\x2\x2:\x13B\x3\x2\x2\x2<\x13F\x3\x2\x2\x2>\x145"+
		"\x3\x2\x2\x2@\x148\x3\x2\x2\x2\x42\x14C\x3\x2\x2\x2\x44\x157\x3\x2\x2"+
		"\x2\x46\x159\x3\x2\x2\x2H\x15D\x3\x2\x2\x2J\x163\x3\x2\x2\x2L\x166\x3"+
		"\x2\x2\x2N\x16A\x3\x2\x2\x2P\x175\x3\x2\x2\x2R\x177\x3\x2\x2\x2T\x17B"+
		"\x3\x2\x2\x2V\x181\x3\x2\x2\x2X\x184\x3\x2\x2\x2Z\x188\x3\x2\x2\x2\\\x193"+
		"\x3\x2\x2\x2^\x195\x3\x2\x2\x2`\x199\x3\x2\x2\x2\x62\x19F\x3\x2\x2\x2"+
		"\x64\x1A1\x3\x2\x2\x2\x66\x1A3\x3\x2\x2\x2h\x1A6\x3\x2\x2\x2j\x1AA\x3"+
		"\x2\x2\x2l\x1B5\x3\x2\x2\x2n\x1B7\x3\x2\x2\x2p\x1BB\x3\x2\x2\x2r\x1C1"+
		"\x3\x2\x2\x2t\x1C3\x3\x2\x2\x2v\x1C5\x3\x2\x2\x2x\x1C8\x3\x2\x2\x2z\x1CC"+
		"\x3\x2\x2\x2|\x1D7\x3\x2\x2\x2~\x1D9\x3\x2\x2\x2\x80\x1DD\x3\x2\x2\x2"+
		"\x82\x1E3\x3\x2\x2\x2\x84\x1E6\x3\x2\x2\x2\x86\x1EA\x3\x2\x2\x2\x88\x1F5"+
		"\x3\x2\x2\x2\x8A\x1F7\x3\x2\x2\x2\x8C\x1FB\x3\x2\x2\x2\x8E\x201\x3\x2"+
		"\x2\x2\x90\x208\x3\x2\x2\x2\x92\x20C\x3\x2\x2\x2\x94\x217\x3\x2\x2\x2"+
		"\x96\x219\x3\x2\x2\x2\x98\x21D\x3\x2\x2\x2\x9A\x223\x3\x2\x2\x2\x9C\x225"+
		"\x3\x2\x2\x2\x9E\x227\x3\x2\x2\x2\xA0\x22F\x3\x2\x2\x2\xA2\x237\x3\x2"+
		"\x2\x2\xA4\x239\x3\x2\x2\x2\xA6\x23B\x3\x2\x2\x2\xA8\x23D\x3\x2\x2\x2"+
		"\xAA\x23F\x3\x2\x2\x2\xAC\x241\x3\x2\x2\x2\xAE\x243\x3\x2\x2\x2\xB0\xB2"+
		"\x5\x4\x3\x2\xB1\xB0\x3\x2\x2\x2\xB2\xB5\x3\x2\x2\x2\xB3\xB1\x3\x2\x2"+
		"\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB6\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB6\xB7"+
		"\a\x2\x2\x3\xB7\x3\x3\x2\x2\x2\xB8\xC4\x5\x6\x4\x2\xB9\xC4\x5\x12\n\x2"+
		"\xBA\xC4\x5\"\x12\x2\xBB\xC4\x5\x32\x1A\x2\xBC\xC4\x5> \x2\xBD\xC4\x5"+
		"J&\x2\xBE\xC4\x5V,\x2\xBF\xC4\x5\x66\x34\x2\xC0\xC4\x5v<\x2\xC1\xC4\x5"+
		"\x82\x42\x2\xC2\xC4\x5\x8EH\x2\xC3\xB8\x3\x2\x2\x2\xC3\xB9\x3\x2\x2\x2"+
		"\xC3\xBA\x3\x2\x2\x2\xC3\xBB\x3\x2\x2\x2\xC3\xBC\x3\x2\x2\x2\xC3\xBD\x3"+
		"\x2\x2\x2\xC3\xBE\x3\x2\x2\x2\xC3\xBF\x3\x2\x2\x2\xC3\xC0\x3\x2\x2\x2"+
		"\xC3\xC1\x3\x2\x2\x2\xC3\xC2\x3\x2\x2\x2\xC4\x5\x3\x2\x2\x2\xC5\xC6\a"+
		"\r\x2\x2\xC6\xC7\x5\b\x5\x2\xC7\a\x3\x2\x2\x2\xC8\xC9\a\x3\x2\x2\xC9\xCA"+
		"\x5\x9CO\x2\xCA\xCB\x5\n\x6\x2\xCB\t\x3\x2\x2\x2\xCC\xD0\a*\x2\x2\xCD"+
		"\xCF\x5\f\a\x2\xCE\xCD\x3\x2\x2\x2\xCF\xD2\x3\x2\x2\x2\xD0\xCE\x3\x2\x2"+
		"\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD3\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3\xD4"+
		"\a+\x2\x2\xD4\v\x3\x2\x2\x2\xD5\xD8\x5\xE\b\x2\xD6\xD8\x5\x10\t\x2\xD7"+
		"\xD5\x3\x2\x2\x2\xD7\xD6\x3\x2\x2\x2\xD8\r\x3\x2\x2\x2\xD9\xDA\a\a\x2"+
		"\x2\xDA\xDB\x5\x9AN\x2\xDB\xDC\a!\x2\x2\xDC\xF\x3\x2\x2\x2\xDD\xDE\a\t"+
		"\x2\x2\xDE\xDF\x5\x9EP\x2\xDF\xE0\aL\x2\x2\xE0\xE1\x5\x9EP\x2\xE1\xE2"+
		"\a!\x2\x2\xE2\x11\x3\x2\x2\x2\xE3\xE4\a\xE\x2\x2\xE4\xE5\x5\x14\v\x2\xE5"+
		"\x13\x3\x2\x2\x2\xE6\xE7\a\x3\x2\x2\xE7\xE8\x5\x9CO\x2\xE8\xE9\x5\x16"+
		"\f\x2\xE9\x15\x3\x2\x2\x2\xEA\xEE\a*\x2\x2\xEB\xED\x5\x18\r\x2\xEC\xEB"+
		"\x3\x2\x2\x2\xED\xF0\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEE\xEF\x3\x2\x2"+
		"\x2\xEF\xF1\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF1\xF2\a+\x2\x2\xF2\x17\x3"+
		"\x2\x2\x2\xF3\xF6\x5\x1A\xE\x2\xF4\xF6\x5\x1C\xF\x2\xF5\xF3\x3\x2\x2\x2"+
		"\xF5\xF4\x3\x2\x2\x2\xF6\x19\x3\x2\x2\x2\xF7\xF8\a\a\x2\x2\xF8\xF9\x5"+
		"\x9AN\x2\xF9\xFA\a!\x2\x2\xFA\x1B\x3\x2\x2\x2\xFB\xFC\a\t\x2\x2\xFC\xFD"+
		"\x5\x1E\x10\x2\xFD\xFE\aL\x2\x2\xFE\xFF\x5 \x11\x2\xFF\x100\a!\x2\x2\x100"+
		"\x1D\x3\x2\x2\x2\x101\x102\x5\x9EP\x2\x102\x1F\x3\x2\x2\x2\x103\x104\x5"+
		"\x9EP\x2\x104!\x3\x2\x2\x2\x105\x106\a\xF\x2\x2\x106\x107\x5$\x13\x2\x107"+
		"#\x3\x2\x2\x2\x108\x109\a\x3\x2\x2\x109\x10A\x5\x9CO\x2\x10A\x10B\x5&"+
		"\x14\x2\x10B%\x3\x2\x2\x2\x10C\x110\a*\x2\x2\x10D\x10F\x5(\x15\x2\x10E"+
		"\x10D\x3\x2\x2\x2\x10F\x112\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x110\x111"+
		"\x3\x2\x2\x2\x111\x113\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x113\x114\a+"+
		"\x2\x2\x114\'\x3\x2\x2\x2\x115\x118\x5*\x16\x2\x116\x118\x5,\x17\x2\x117"+
		"\x115\x3\x2\x2\x2\x117\x116\x3\x2\x2\x2\x118)\x3\x2\x2\x2\x119\x11A\a"+
		"\a\x2\x2\x11A\x11B\x5\x9AN\x2\x11B\x11C\a!\x2\x2\x11C+\x3\x2\x2\x2\x11D"+
		"\x11E\a\t\x2\x2\x11E\x11F\x5.\x18\x2\x11F\x120\aL\x2\x2\x120\x121\x5\x30"+
		"\x19\x2\x121\x122\a!\x2\x2\x122-\x3\x2\x2\x2\x123\x124\x5\x9EP\x2\x124"+
		"/\x3\x2\x2\x2\x125\x126\x5\x9EP\x2\x126\x31\x3\x2\x2\x2\x127\x128\a\x10"+
		"\x2\x2\x128\x129\x5\x34\x1B\x2\x129\x33\x3\x2\x2\x2\x12A\x12B\a\x3\x2"+
		"\x2\x12B\x12C\x5\x9CO\x2\x12C\x12D\x5\x36\x1C\x2\x12D\x35\x3\x2\x2\x2"+
		"\x12E\x132\a*\x2\x2\x12F\x131\x5\x38\x1D\x2\x130\x12F\x3\x2\x2\x2\x131"+
		"\x134\x3\x2\x2\x2\x132\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x135"+
		"\x3\x2\x2\x2\x134\x132\x3\x2\x2\x2\x135\x136\a+\x2\x2\x136\x37\x3\x2\x2"+
		"\x2\x137\x13A\x5:\x1E\x2\x138\x13A\x5<\x1F\x2\x139\x137\x3\x2\x2\x2\x139"+
		"\x138\x3\x2\x2\x2\x13A\x39\x3\x2\x2\x2\x13B\x13C\a\a\x2\x2\x13C\x13D\x5"+
		"\x9AN\x2\x13D\x13E\a!\x2\x2\x13E;\x3\x2\x2\x2\x13F\x140\a\t\x2\x2\x140"+
		"\x141\x5\x9EP\x2\x141\x142\aL\x2\x2\x142\x143\x5\x9EP\x2\x143\x144\a!"+
		"\x2\x2\x144=\x3\x2\x2\x2\x145\x146\a\x11\x2\x2\x146\x147\x5@!\x2\x147"+
		"?\x3\x2\x2\x2\x148\x149\a\x3\x2\x2\x149\x14A\x5\x9CO\x2\x14A\x14B\x5\x42"+
		"\"\x2\x14B\x41\x3\x2\x2\x2\x14C\x150\a*\x2\x2\x14D\x14F\x5\x44#\x2\x14E"+
		"\x14D\x3\x2\x2\x2\x14F\x152\x3\x2\x2\x2\x150\x14E\x3\x2\x2\x2\x150\x151"+
		"\x3\x2\x2\x2\x151\x153\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x153\x154\a+"+
		"\x2\x2\x154\x43\x3\x2\x2\x2\x155\x158\x5\x46$\x2\x156\x158\x5H%\x2\x157"+
		"\x155\x3\x2\x2\x2\x157\x156\x3\x2\x2\x2\x158\x45\x3\x2\x2\x2\x159\x15A"+
		"\a\a\x2\x2\x15A\x15B\x5\x9AN\x2\x15B\x15C\a!\x2\x2\x15CG\x3\x2\x2\x2\x15D"+
		"\x15E\a\t\x2\x2\x15E\x15F\x5\x9EP\x2\x15F\x160\aL\x2\x2\x160\x161\x5\x9E"+
		"P\x2\x161\x162\a!\x2\x2\x162I\x3\x2\x2\x2\x163\x164\a\x12\x2\x2\x164\x165"+
		"\x5L\'\x2\x165K\x3\x2\x2\x2\x166\x167\a\x3\x2\x2\x167\x168\x5\x9CO\x2"+
		"\x168\x169\x5N(\x2\x169M\x3\x2\x2\x2\x16A\x16E\a*\x2\x2\x16B\x16D\x5P"+
		")\x2\x16C\x16B\x3\x2\x2\x2\x16D\x170\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2"+
		"\x16E\x16F\x3\x2\x2\x2\x16F\x171\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x171"+
		"\x172\a+\x2\x2\x172O\x3\x2\x2\x2\x173\x176\x5R*\x2\x174\x176\x5T+\x2\x175"+
		"\x173\x3\x2\x2\x2\x175\x174\x3\x2\x2\x2\x176Q\x3\x2\x2\x2\x177\x178\a"+
		"\a\x2\x2\x178\x179\x5\x9AN\x2\x179\x17A\a!\x2\x2\x17AS\x3\x2\x2\x2\x17B"+
		"\x17C\a\t\x2\x2\x17C\x17D\x5\x9AN\x2\x17D\x17E\aL\x2\x2\x17E\x17F\x5\x9A"+
		"N\x2\x17F\x180\a!\x2\x2\x180U\x3\x2\x2\x2\x181\x182\a\x13\x2\x2\x182\x183"+
		"\x5X-\x2\x183W\x3\x2\x2\x2\x184\x185\a\x3\x2\x2\x185\x186\x5\x9CO\x2\x186"+
		"\x187\x5Z.\x2\x187Y\x3\x2\x2\x2\x188\x18C\a*\x2\x2\x189\x18B\x5\\/\x2"+
		"\x18A\x189\x3\x2\x2\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18A\x3\x2\x2\x2\x18C"+
		"\x18D\x3\x2\x2\x2\x18D\x18F\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18F\x190"+
		"\a+\x2\x2\x190[\x3\x2\x2\x2\x191\x194\x5^\x30\x2\x192\x194\x5`\x31\x2"+
		"\x193\x191\x3\x2\x2\x2\x193\x192\x3\x2\x2\x2\x194]\x3\x2\x2\x2\x195\x196"+
		"\a\a\x2\x2\x196\x197\x5\x9AN\x2\x197\x198\a!\x2\x2\x198_\x3\x2\x2\x2\x199"+
		"\x19A\a\t\x2\x2\x19A\x19B\x5\x62\x32\x2\x19B\x19C\aL\x2\x2\x19C\x19D\x5"+
		"\x64\x33\x2\x19D\x19E\a!\x2\x2\x19E\x61\x3\x2\x2\x2\x19F\x1A0\x5\x9AN"+
		"\x2\x1A0\x63\x3\x2\x2\x2\x1A1\x1A2\x5\x9AN\x2\x1A2\x65\x3\x2\x2\x2\x1A3"+
		"\x1A4\a\x14\x2\x2\x1A4\x1A5\x5h\x35\x2\x1A5g\x3\x2\x2\x2\x1A6\x1A7\a\x3"+
		"\x2\x2\x1A7\x1A8\x5\x9CO\x2\x1A8\x1A9\x5j\x36\x2\x1A9i\x3\x2\x2\x2\x1AA"+
		"\x1AE\a*\x2\x2\x1AB\x1AD\x5l\x37\x2\x1AC\x1AB\x3\x2\x2\x2\x1AD\x1B0\x3"+
		"\x2\x2\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AF\x1B1\x3\x2"+
		"\x2\x2\x1B0\x1AE\x3\x2\x2\x2\x1B1\x1B2\a+\x2\x2\x1B2k\x3\x2\x2\x2\x1B3"+
		"\x1B6\x5n\x38\x2\x1B4\x1B6\x5p\x39\x2\x1B5\x1B3\x3\x2\x2\x2\x1B5\x1B4"+
		"\x3\x2\x2\x2\x1B6m\x3\x2\x2\x2\x1B7\x1B8\a\a\x2\x2\x1B8\x1B9\x5\x9AN\x2"+
		"\x1B9\x1BA\a!\x2\x2\x1BAo\x3\x2\x2\x2\x1BB\x1BC\a\t\x2\x2\x1BC\x1BD\x5"+
		"r:\x2\x1BD\x1BE\aL\x2\x2\x1BE\x1BF\x5t;\x2\x1BF\x1C0\a!\x2\x2\x1C0q\x3"+
		"\x2\x2\x2\x1C1\x1C2\x5\x9AN\x2\x1C2s\x3\x2\x2\x2\x1C3\x1C4\x5\x9AN\x2"+
		"\x1C4u\x3\x2\x2\x2\x1C5\x1C6\a\x15\x2\x2\x1C6\x1C7\x5x=\x2\x1C7w\x3\x2"+
		"\x2\x2\x1C8\x1C9\a\x3\x2\x2\x1C9\x1CA\x5\x9CO\x2\x1CA\x1CB\x5z>\x2\x1CB"+
		"y\x3\x2\x2\x2\x1CC\x1D0\a*\x2\x2\x1CD\x1CF\x5|?\x2\x1CE\x1CD\x3\x2\x2"+
		"\x2\x1CF\x1D2\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2"+
		"\x1D1\x1D3\x3\x2\x2\x2\x1D2\x1D0\x3\x2\x2\x2\x1D3\x1D4\a+\x2\x2\x1D4{"+
		"\x3\x2\x2\x2\x1D5\x1D8\x5~@\x2\x1D6\x1D8\x5\x80\x41\x2\x1D7\x1D5\x3\x2"+
		"\x2\x2\x1D7\x1D6\x3\x2\x2\x2\x1D8}\x3\x2\x2\x2\x1D9\x1DA\a\a\x2\x2\x1DA"+
		"\x1DB\x5\x9AN\x2\x1DB\x1DC\a!\x2\x2\x1DC\x7F\x3\x2\x2\x2\x1DD\x1DE\a\t"+
		"\x2\x2\x1DE\x1DF\x5\x9AN\x2\x1DF\x1E0\aL\x2\x2\x1E0\x1E1\x5\x9AN\x2\x1E1"+
		"\x1E2\a!\x2\x2\x1E2\x81\x3\x2\x2\x2\x1E3\x1E4\a\x16\x2\x2\x1E4\x1E5\x5"+
		"\x84\x43\x2\x1E5\x83\x3\x2\x2\x2\x1E6\x1E7\a\x3\x2\x2\x1E7\x1E8\x5\x9C"+
		"O\x2\x1E8\x1E9\x5\x86\x44\x2\x1E9\x85\x3\x2\x2\x2\x1EA\x1EE\a*\x2\x2\x1EB"+
		"\x1ED\x5\x88\x45\x2\x1EC\x1EB\x3\x2\x2\x2\x1ED\x1F0\x3\x2\x2\x2\x1EE\x1EC"+
		"\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF\x1F1\x3\x2\x2\x2\x1F0\x1EE\x3"+
		"\x2\x2\x2\x1F1\x1F2\a+\x2\x2\x1F2\x87\x3\x2\x2\x2\x1F3\x1F6\x5\x8A\x46"+
		"\x2\x1F4\x1F6\x5\x8CG\x2\x1F5\x1F3\x3\x2\x2\x2\x1F5\x1F4\x3\x2\x2\x2\x1F6"+
		"\x89\x3\x2\x2\x2\x1F7\x1F8\a\a\x2\x2\x1F8\x1F9\x5\x9AN\x2\x1F9\x1FA\a"+
		"!\x2\x2\x1FA\x8B\x3\x2\x2\x2\x1FB\x1FC\a\t\x2\x2\x1FC\x1FD\x5\x9AN\x2"+
		"\x1FD\x1FE\aL\x2\x2\x1FE\x1FF\x5\x9AN\x2\x1FF\x200\a!\x2\x2\x200\x8D\x3"+
		"\x2\x2\x2\x201\x205\a\x17\x2\x2\x202\x204\x5\x90I\x2\x203\x202\x3\x2\x2"+
		"\x2\x204\x207\x3\x2\x2\x2\x205\x203\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2"+
		"\x206\x8F\x3\x2\x2\x2\x207\x205\x3\x2\x2\x2\x208\x209\a\x3\x2\x2\x209"+
		"\x20A\x5\x9CO\x2\x20A\x20B\x5\x92J\x2\x20B\x91\x3\x2\x2\x2\x20C\x210\a"+
		"*\x2\x2\x20D\x20F\x5\x94K\x2\x20E\x20D\x3\x2\x2\x2\x20F\x212\x3\x2\x2"+
		"\x2\x210\x20E\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x213\x3\x2\x2\x2"+
		"\x212\x210\x3\x2\x2\x2\x213\x214\a+\x2\x2\x214\x93\x3\x2\x2\x2\x215\x218"+
		"\x5\x96L\x2\x216\x218\x5\x98M\x2\x217\x215\x3\x2\x2\x2\x217\x216\x3\x2"+
		"\x2\x2\x218\x95\x3\x2\x2\x2\x219\x21A\a\a\x2\x2\x21A\x21B\x5\x9AN\x2\x21B"+
		"\x21C\a!\x2\x2\x21C\x97\x3\x2\x2\x2\x21D\x21E\a\t\x2\x2\x21E\x21F\x5\x9C"+
		"O\x2\x21F\x220\aL\x2\x2\x220\x221\x5\x9CO\x2\x221\x222\a!\x2\x2\x222\x99"+
		"\x3\x2\x2\x2\x223\x224\x5\xA0Q\x2\x224\x9B\x3\x2\x2\x2\x225\x226\x5\x9E"+
		"P\x2\x226\x9D\x3\x2\x2\x2\x227\x22C\x5\xA0Q\x2\x228\x229\a#\x2\x2\x229"+
		"\x22B\x5\xA0Q\x2\x22A\x228\x3\x2\x2\x2\x22B\x22E\x3\x2\x2\x2\x22C\x22A"+
		"\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x9F\x3\x2\x2\x2\x22E\x22C\x3\x2"+
		"\x2\x2\x22F\x230\t\x2\x2\x2\x230\xA1\x3\x2\x2\x2\x231\x238\x5\xA4S\x2"+
		"\x232\x238\x5\xA6T\x2\x233\x238\x5\xA8U\x2\x234\x238\x5\xAAV\x2\x235\x238"+
		"\x5\xACW\x2\x236\x238\x5\xAEX\x2\x237\x231\x3\x2\x2\x2\x237\x232\x3\x2"+
		"\x2\x2\x237\x233\x3\x2\x2\x2\x237\x234\x3\x2\x2\x2\x237\x235\x3\x2\x2"+
		"\x2\x237\x236\x3\x2\x2\x2\x238\xA3\x3\x2\x2\x2\x239\x23A\a \x2\x2\x23A"+
		"\xA5\x3\x2\x2\x2\x23B\x23C\t\x3\x2\x2\x23C\xA7\x3\x2\x2\x2\x23D\x23E\a"+
		"P\x2\x2\x23E\xA9\x3\x2\x2\x2\x23F\x240\aQ\x2\x2\x240\xAB\x3\x2\x2\x2\x241"+
		"\x242\aR\x2\x2\x242\xAD\x3\x2\x2\x2\x243\x244\aW\x2\x2\x244\xAF\x3\x2"+
		"\x2\x2\x1D\xB3\xC3\xD0\xD7\xEE\xF5\x110\x117\x132\x139\x150\x157\x16E"+
		"\x175\x18C\x193\x1AE\x1B5\x1D0\x1D7\x1EE\x1F5\x205\x210\x217\x22C\x237";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.CodeAnalysis.Antlr4Test.Languages.TestLanguageOne.Syntax.InternalSyntax
