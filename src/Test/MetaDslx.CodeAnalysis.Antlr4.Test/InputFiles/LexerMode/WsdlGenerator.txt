namespace MetaDslx.Languages.Soal.Generator;
generator WsdlGenerator for object;

using MetaDslx.Languages.Soal.Symbols;
using generator XsdGenerator;

properties Properties
	bool SingleFileWsdl = false;
	bool SeparateXsdWsdl = false;
end properties

template Generate(Namespace ns)
<?xml version="1.0" encoding="utf-8"?>
<wsdl:definitions targetNamespace="[ns.Uri]"  
	xmlns:[ns.Prefix]="[ns.Uri]"
	[loop(ins:ns.GetImportedNamespaces())]
	xmlns:[ins.Prefix]="[ins.Uri]"
	[end loop]
	xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/"
	xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl"
	xmlns:wsp="http://www.w3.org/ns/ws-policy"
	xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
	xmlns:wsoma="http://schemas.xmlsoap.org/ws/2004/09/policy/optimizedmimeserialization"
	xmlns:wsa="http://www.w3.org/2005/08/addressing" 
	xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata"
	xmlns:wsrmp="http://docs.oasis-open.org/ws-rx/wsrmp/200702"
	xmlns:wsat="http://schemas.xmlsoap.org/ws/2004/10/wsat"
	xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"
	xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512"
	xmlns:wsx="http://schemas.xmlsoap.org/ws/2004/09/mex"
>
	[GenerateWsdlPoliciesPart(ns)]
	[GenerateWsdlTypesPart(ns)]
	[GenerateWsdlAbstractPart(ns)]
	[GenerateWsdlBindingPart(ns)]
	[GenerateWsdlEndpointPart(ns)]
</wsdl:definitions>
end template


template GenerateWsdlTypesPart(Namespace ns)
^
<wsdl:types>
[if (Properties.SingleFileWsdl)]
[XsdGenerator.Generate(ns)]
[else]
	<xs:schema>
		[if (Properties.SeparateXsdWsdl)]
		<xs:import namespace="[ns.Uri]" schemaLocation="../xsd/[ns.FullName].xsd"/>
			[loop(ins:ns.GetImportedNamespaces())]
		<xs:import namespace="[ins.Uri]" schemaLocation="../xsd/[ins.FullName].xsd"/>
			[end loop]
		[else]
		<xs:import namespace="[ns.Uri]" schemaLocation="[ns.FullName].xsd"/>
			[loop(ins:ns.GetImportedNamespaces())]
		<xs:import namespace="[ins.Uri]" schemaLocation="[ins.FullName].xsd"/>
			[end loop]
		[end if]
	</xs:schema>
[end if]
</wsdl:types>
end template

template GenerateWsdlAbstractPart(Namespace ns)
[loop(ns.Declarations->intf:typeof(Interface))]
[GenerateWsdlAbstractPart(intf)]
[end loop]
end template

template GenerateWsdlAbstractPart(Interface intf)
[GenerateMessages(intf)]
[GenerateFaultMessages(intf)]
[GeneratePortType(intf)]
end template

template GenerateMessages(Interface intf)
[loop(intf.Operations->op:typeof(Operation))]
	[if (intf.HasAnnotation(SoalAnnotations.Rpc))]
^
<wsdl:message name="[intf.Name]_[op.Name]_InputMessage">
		[loop(op->param:Parameters)]
			[if (param.Type.IsArrayType() && param.Type.GetCoreType().MId != SoalInstance.Byte.MId)]
	<wsdl:part name="[param.Name]" type="[intf.Namespace.Prefix]:[op.Name + param.Name.ToPascalCase()]"/>
			[else]
	<wsdl:part name="[param.Name]" type="[param.Type.GetNamespace(intf.Namespace).Prefix]:[param.Type.GetXsdName()]"/>
			[end if]
		[end loop]
</wsdl:message>
		[if(!op.Result.IsOneway)]
^
<wsdl:message name="[intf.Name]_[op.Name]_OutputMessage">
			[if (op.Result.Type.MId != SoalInstance.Void.MId)]
				[if (op.Result.Type.IsArrayType() && op.Result.Type.GetCoreType().MId != SoalInstance.Byte.MId)]
	<wsdl:part name="result" type="[intf.Namespace.Prefix]:[op.Name + "Response"]"/>
				[else]
	<wsdl:part name="result" type="[op.Result.Type.GetNamespace(intf.Namespace).Prefix]:[op.Result.Type.GetXsdName()]"/>
				[end if]
			[end if]
</wsdl:message>
		[end if]
	[else if (intf.HasAnnotation(SoalAnnotations.NoWrap))]
^
<wsdl:message name="[intf.Name]_[op.Name]_InputMessage">
		[loop(op->param:Parameters)]
	<wsdl:part name="[param.Name]" element="[intf.Namespace.Prefix]:[op.Name][param.Name.ToPascalCase()]"/>
		[end loop]
</wsdl:message>
		[if(!op.Result.IsOneway)]
^
<wsdl:message name="[intf.Name]_[op.Name]_OutputMessage">
			[if (op.Result.Type.MId != SoalInstance.Void.MId)]
	<wsdl:part name="result" element="[intf.Namespace.Prefix]:[op.Name]Response"/>
			[end if]
</wsdl:message>
		[end if]
	[else]
^
<wsdl:message name="[intf.Name]_[op.Name]_InputMessage">
	<wsdl:part name="parameters" element="[intf.Namespace.Prefix]:[op.Name]"/>
</wsdl:message>
		[if(!op.Result.IsOneway)]
^
<wsdl:message name="[intf.Name]_[op.Name]_OutputMessage">
	<wsdl:part name="parameters" element="[intf.Namespace.Prefix]:[op.Name]Response"/>
</wsdl:message>
		[end if]
	[end if]
[end loop]
end template

template GenerateFaultMessages(Interface intf)
[loop(ex:intf.GetInterfaceExceptions())]
	[if (intf.HasAnnotation(SoalAnnotations.Rpc))]
^
<wsdl:message name="[intf.Name]_[ex.Name]_FaultMessage">
	<wsdl:part name="fault" type="[ex.Namespace.Prefix]:[ex.Name]"/>
</wsdl:message>
	[else]
^
<wsdl:message name="[intf.Name]_[ex.Name]_FaultMessage">
	<wsdl:part name="fault" element="[ex.Namespace.Prefix]:[ex.Name]"/>
</wsdl:message>
	[end if]
[end loop]
end template

template GeneratePortType(Interface intf)
^
<wsdl:portType name="[intf.Name]">
	[GenerateOperations(intf)]
</wsdl:portType>
end template

template GenerateOperations(Interface intf)
[loop(intf.Operations->op:typeof(Operation))]
	[string action = op.Action != null ? op.Action : intf.Namespace.UriWithSlash() + intf.Name + "/" + op.Name]
<wsdl:operation name="[op.Name]">
	<wsdl:input wsaw:action="[action]" message="[intf.Namespace.Prefix]:[intf.Name]_[op.Name]_InputMessage"/>
[if(!op.Result.IsOneway)]
	<wsdl:output wsaw:action="[action + "Response"]" message="[intf.Namespace.Prefix]:[intf.Name]_[op.Name]_OutputMessage"/>
	[loop(ex:op.Exceptions)]
	<wsdl:fault wsaw:action="[action + "Fault/" + ex.Name]" message="[intf.Namespace.Prefix]:[intf.Name]_[ex.Name]_FaultMessage" name="[ex.Name]"/>
	[end loop]
[end if]
</wsdl:operation>
[end loop]
end template

template GenerateWsdlBindingPart(Namespace ns)
[loop(ns.Declarations->endp:typeof(Endpoint))]
[GenerateWsdlBinding(endp)]
[end loop]
end template

template GenerateWsdlBinding(Endpoint endp)
^
[string soapPrefix = endp.Binding.GetSoapPrefix()]
<wsdl:binding name="[endp.Interface.Name]_[endp.Binding.Name]_Binding" type="[endp.Interface.Namespace.Prefix]:[endp.Interface.Name]">
	[if(endp.Binding.HasPolicy())]
	<wsp:PolicyReference URI="#[endp.Binding.Name]_Policy"/>
	[end if]
	[if(soapPrefix != null)]
		[if(endp.Binding.Transport is HttpTransportBindingElement)]
	<[soapPrefix]:binding style="[endp.Binding.GetWsdlSoapDocRpcStyle()]" transport="http://schemas.xmlsoap.org/soap/http"/>
		[else]
	<[soapPrefix]:binding style="[endp.Binding.GetWsdlSoapDocRpcStyle()]"/>
		[end if]
	[end if]
	[loop(op:endp.Interface.Operations)]
		[string action = op.Action != null ? op.Action : endp.Interface.Namespace.UriWithSlash() + endp.Interface.Name + "/" + op.Name]
	<wsdl:operation name="[op.Name]">
		[if(soapPrefix != null)]
		<[soapPrefix]:operation style="[endp.Binding.GetWsdlSoapDocRpcStyle()]" soapAction="[action]"/>
		[end if]
		<wsdl:input>
		[if(endp.Binding.HasOperationPolicy())]
			<wsp:PolicyReference URI="#[endp.Binding.Name]_Input_Policy"/>
		[end if]
		[if(soapPrefix != null)]
			<[soapPrefix]:body use="[endp.Binding.GetWsdlSoapEncLitStyle()]"/>
		[end if]
		</wsdl:input>
		[if(!op.Result.IsOneway)]
		<wsdl:output>
			[if(endp.Binding.HasOperationPolicy())]
			<wsp:PolicyReference URI="#[endp.Binding.Name]_Output_Policy"/>
			[end if]
			[if(soapPrefix != null)]
			<[soapPrefix]:body use="[endp.Binding.GetWsdlSoapEncLitStyle()]"/>
			[end if]
		</wsdl:output>
			[loop(ex:op.Exceptions)]
		<wsdl:fault name="[ex.Name]">
			[if(soapPrefix != null)]
			<[soapPrefix]:fault name="[ex.Name]" use="[endp.Binding.GetWsdlSoapEncLitStyle()]"/>
			[end if]
		</wsdl:fault>
			[end loop]
		[end if]
	</wsdl:operation>
	[end loop]
</wsdl:binding>
end template

template GenerateWsdlEndpointPart(Namespace ns)
[loop(ns.Declarations->endp:typeof(Endpoint))]
[GenerateWsdlEndpoint(endp)]
[end loop]
end template

template GenerateWsdlEndpoint(Endpoint endp)
^
[string soapPrefix = endp.Binding.GetSoapPrefix()]
<wsdl:service name="[endp.Name]">
	<wsdl:port name="[endp.Interface.Name]_[endp.Binding.Name]_Port" binding="[endp.Namespace.Prefix]:[endp.Interface.Name]_[endp.Binding.Name]_Binding">
	[if(soapPrefix != null)]
		<[soapPrefix]:address location="[endp.Address]"/>
	[end if]
	</wsdl:port>
</wsdl:service>
end template



template GenerateWsdlPoliciesPart(Namespace ns)
[loop(ns.Declarations->binding:typeof(Symbols.Binding))]
[GenerateWsdlPolicy(binding)]
[end loop]
end template

template GenerateWsdlPolicy(Symbols.Binding binding)
[if(binding.HasPolicy())]
^
<wsp:Policy wsu:Id="[binding.Name]_Policy">
	[GenerateHttpsPolicy(binding)]
	[GenerateMtomPolicy(binding)]
	[GenerateAddressingPolicy(binding)]
</wsp:Policy>
[end if]
end template

template GenerateHttpsPolicy(Symbols.Binding binding)
[if(binding.Transport is HttpTransportBindingElement && ((HttpTransportBindingElement)binding.Transport).Ssl)]
<sp:TransportBinding>
	<wsp:Policy>
		<sp:TransportToken>
			<wsp:Policy>
			[if(((HttpTransportBindingElement)binding.Transport).ClientAuthentication)]
				<sp:HttpsToken RequireClientCertificate="true"/>
			[else]
				<sp:HttpsToken RequireClientCertificate="false"/>
			[end if]
			</wsp:Policy>
		</sp:TransportToken>
		<sp:AlgorithmSuite>
			<wsp:Policy>
				<sp:Basic256/>
			</wsp:Policy>
		</sp:AlgorithmSuite>
		<sp:Layout>
			<wsp:Policy>
				<sp:Strict/>
			</wsp:Policy>
		</sp:Layout> 
	</wsp:Policy>
</sp:TransportBinding>
[end if]
end template

template GenerateMtomPolicy(Symbols.Binding binding)
[if(hasloop(binding->Encodings->enc:typeof(SoapEncodingBindingElement) where enc.Mtom))]
<wsoma:OptimizedMimeSerialization/>
[end if]
end template

template GenerateAddressingPolicy(Symbols.Binding binding)
[if(hasloop(binding->Protocols->typeof(WsAddressingBindingElement)))]
<wsam:Addressing/>
[end if]
end template
