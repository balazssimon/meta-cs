//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Balazs\source\repos\meta-cs\src\Test\MetaDslx.CodeAnalysis.Languages.Test\Languages\PilV2\Syntax\InternalSyntax\PilParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PilV2.Syntax.InternalSyntax {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PilParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IPilParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>mulDivExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulDivExpression([NotNull] PilParser.MulDivExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mulDivExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulDivExpression([NotNull] PilParser.MulDivExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>plusMinusExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPlusMinusExpression([NotNull] PilParser.PlusMinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>plusMinusExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPlusMinusExpression([NotNull] PilParser.PlusMinusExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>negateExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegateExpression([NotNull] PilParser.NegateExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>negateExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegateExpression([NotNull] PilParser.NegateExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>simpleArithmeticExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleArithmeticExpression([NotNull] PilParser.SimpleArithmeticExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>simpleArithmeticExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleArithmeticExpression([NotNull] PilParser.SimpleArithmeticExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>parenArithmeticExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenArithmeticExpression([NotNull] PilParser.ParenArithmeticExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenArithmeticExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenArithmeticExpression([NotNull] PilParser.ParenArithmeticExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>terminalArithmeticExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerminalArithmeticExpression([NotNull] PilParser.TerminalArithmeticExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>terminalArithmeticExpression</c>
	/// labeled alternative in <see cref="PilParser.arithmeticExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerminalArithmeticExpression([NotNull] PilParser.TerminalArithmeticExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] PilParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] PilParser.AndExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] PilParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] PilParser.OrExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] PilParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] PilParser.NotExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>simpleConditionalExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleConditionalExpression([NotNull] PilParser.SimpleConditionalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>simpleConditionalExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleConditionalExpression([NotNull] PilParser.SimpleConditionalExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>parenConditionalExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenConditionalExpression([NotNull] PilParser.ParenConditionalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenConditionalExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenConditionalExpression([NotNull] PilParser.ParenConditionalExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>elementOfConditionalExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementOfConditionalExpression([NotNull] PilParser.ElementOfConditionalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>elementOfConditionalExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementOfConditionalExpression([NotNull] PilParser.ElementOfConditionalExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>comparisonConditionalExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonConditionalExpression([NotNull] PilParser.ComparisonConditionalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>comparisonConditionalExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonConditionalExpression([NotNull] PilParser.ComparisonConditionalExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>terminalComparisonExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerminalComparisonExpression([NotNull] PilParser.TerminalComparisonExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>terminalComparisonExpression</c>
	/// labeled alternative in <see cref="PilParser.conditionalExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerminalComparisonExpression([NotNull] PilParser.TerminalComparisonExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMain([NotNull] PilParser.MainContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMain([NotNull] PilParser.MainContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] PilParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] PilParser.DeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.typeDefDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDefDeclaration([NotNull] PilParser.TypeDefDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.typeDefDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDefDeclaration([NotNull] PilParser.TypeDefDeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.externalParameterDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExternalParameterDeclaration([NotNull] PilParser.ExternalParameterDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.externalParameterDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExternalParameterDeclaration([NotNull] PilParser.ExternalParameterDeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.enumDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumDeclaration([NotNull] PilParser.EnumDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.enumDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumDeclaration([NotNull] PilParser.EnumDeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.enumLiterals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumLiterals([NotNull] PilParser.EnumLiteralsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.enumLiterals"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumLiterals([NotNull] PilParser.EnumLiteralsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.enumLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumLiteral([NotNull] PilParser.EnumLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.enumLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumLiteral([NotNull] PilParser.EnumLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.objectDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectDeclaration([NotNull] PilParser.ObjectDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.objectDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectDeclaration([NotNull] PilParser.ObjectDeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.objectHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectHeader([NotNull] PilParser.ObjectHeaderContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.objectHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectHeader([NotNull] PilParser.ObjectHeaderContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.ports"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPorts([NotNull] PilParser.PortsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.ports"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPorts([NotNull] PilParser.PortsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.port"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPort([NotNull] PilParser.PortContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.port"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPort([NotNull] PilParser.PortContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.objectExternalParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectExternalParameters([NotNull] PilParser.ObjectExternalParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.objectExternalParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectExternalParameters([NotNull] PilParser.ObjectExternalParametersContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.objectFields"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectFields([NotNull] PilParser.ObjectFieldsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.objectFields"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectFields([NotNull] PilParser.ObjectFieldsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.objectFunctions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectFunctions([NotNull] PilParser.ObjectFunctionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.objectFunctions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectFunctions([NotNull] PilParser.ObjectFunctionsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] PilParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] PilParser.FunctionDeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.functionHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionHeader([NotNull] PilParser.FunctionHeaderContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.functionHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionHeader([NotNull] PilParser.FunctionHeaderContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.functionParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionParams([NotNull] PilParser.FunctionParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.functionParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionParams([NotNull] PilParser.FunctionParamsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam([NotNull] PilParser.ParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam([NotNull] PilParser.ParamContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryDeclaration([NotNull] PilParser.QueryDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryDeclaration([NotNull] PilParser.QueryDeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryHeader([NotNull] PilParser.QueryHeaderContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryHeader([NotNull] PilParser.QueryHeaderContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryRequestParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryRequestParams([NotNull] PilParser.QueryRequestParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryRequestParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryRequestParams([NotNull] PilParser.QueryRequestParamsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryAcceptParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryAcceptParams([NotNull] PilParser.QueryAcceptParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryAcceptParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryAcceptParams([NotNull] PilParser.QueryAcceptParamsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryRefuseParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryRefuseParams([NotNull] PilParser.QueryRefuseParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryRefuseParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryRefuseParams([NotNull] PilParser.QueryRefuseParamsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryCancelParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryCancelParams([NotNull] PilParser.QueryCancelParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryCancelParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryCancelParams([NotNull] PilParser.QueryCancelParamsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryExternalParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryExternalParameters([NotNull] PilParser.QueryExternalParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryExternalParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryExternalParameters([NotNull] PilParser.QueryExternalParametersContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryField"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryField([NotNull] PilParser.QueryFieldContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryField"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryField([NotNull] PilParser.QueryFieldContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryFunction([NotNull] PilParser.QueryFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryFunction([NotNull] PilParser.QueryFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryObject"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryObject([NotNull] PilParser.QueryObjectContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryObject"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryObject([NotNull] PilParser.QueryObjectContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryObjectField"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryObjectField([NotNull] PilParser.QueryObjectFieldContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryObjectField"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryObjectField([NotNull] PilParser.QueryObjectFieldContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryObjectFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryObjectFunction([NotNull] PilParser.QueryObjectFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryObjectFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryObjectFunction([NotNull] PilParser.QueryObjectFunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.queryObjectEvent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryObjectEvent([NotNull] PilParser.QueryObjectEventContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.queryObjectEvent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryObjectEvent([NotNull] PilParser.QueryObjectEventContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInput([NotNull] PilParser.InputContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInput([NotNull] PilParser.InputContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.inputPortList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInputPortList([NotNull] PilParser.InputPortListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.inputPortList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInputPortList([NotNull] PilParser.InputPortListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.inputPort"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInputPort([NotNull] PilParser.InputPortContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.inputPort"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInputPort([NotNull] PilParser.InputPortContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.trigger"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrigger([NotNull] PilParser.TriggerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.trigger"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrigger([NotNull] PilParser.TriggerContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.triggerVarList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTriggerVarList([NotNull] PilParser.TriggerVarListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.triggerVarList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTriggerVarList([NotNull] PilParser.TriggerVarListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.triggerVar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTriggerVar([NotNull] PilParser.TriggerVarContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.triggerVar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTriggerVar([NotNull] PilParser.TriggerVarContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatements([NotNull] PilParser.StatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatements([NotNull] PilParser.StatementsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] PilParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] PilParser.StatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.forkStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForkStatement([NotNull] PilParser.ForkStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.forkStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForkStatement([NotNull] PilParser.ForkStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.caseBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseBranch([NotNull] PilParser.CaseBranchContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.caseBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseBranch([NotNull] PilParser.CaseBranchContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.elseBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseBranch([NotNull] PilParser.ElseBranchContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.elseBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseBranch([NotNull] PilParser.ElseBranchContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] PilParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] PilParser.IfStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.ifBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfBranch([NotNull] PilParser.IfBranchContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.ifBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfBranch([NotNull] PilParser.IfBranchContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.elseIfBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfBranch([NotNull] PilParser.ElseIfBranchContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.elseIfBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfBranch([NotNull] PilParser.ElseIfBranchContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.requestStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRequestStatement([NotNull] PilParser.RequestStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.requestStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRequestStatement([NotNull] PilParser.RequestStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.callRequest"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallRequest([NotNull] PilParser.CallRequestContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.callRequest"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallRequest([NotNull] PilParser.CallRequestContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.requestArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRequestArguments([NotNull] PilParser.RequestArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.requestArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRequestArguments([NotNull] PilParser.RequestArgumentsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.responseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResponseStatement([NotNull] PilParser.ResponseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.responseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResponseStatement([NotNull] PilParser.ResponseStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.cancelStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCancelStatement([NotNull] PilParser.CancelStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.cancelStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCancelStatement([NotNull] PilParser.CancelStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertion([NotNull] PilParser.AssertionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.assertion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertion([NotNull] PilParser.AssertionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.responseStatementKind"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResponseStatementKind([NotNull] PilParser.ResponseStatementKindContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.responseStatementKind"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResponseStatementKind([NotNull] PilParser.ResponseStatementKindContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.cancelStatementKind"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCancelStatementKind([NotNull] PilParser.CancelStatementKindContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.cancelStatementKind"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCancelStatementKind([NotNull] PilParser.CancelStatementKindContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.forkRequestStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForkRequestStatement([NotNull] PilParser.ForkRequestStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.forkRequestStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForkRequestStatement([NotNull] PilParser.ForkRequestStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.forkRequestVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForkRequestVariable([NotNull] PilParser.ForkRequestVariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.forkRequestVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForkRequestVariable([NotNull] PilParser.ForkRequestVariableContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.forkRequestIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForkRequestIdentifier([NotNull] PilParser.ForkRequestIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.forkRequestIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForkRequestIdentifier([NotNull] PilParser.ForkRequestIdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.acceptBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAcceptBranch([NotNull] PilParser.AcceptBranchContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.acceptBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAcceptBranch([NotNull] PilParser.AcceptBranchContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.refuseBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRefuseBranch([NotNull] PilParser.RefuseBranchContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.refuseBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRefuseBranch([NotNull] PilParser.RefuseBranchContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.cancelBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCancelBranch([NotNull] PilParser.CancelBranchContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.cancelBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCancelBranch([NotNull] PilParser.CancelBranchContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.variableDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationStatement([NotNull] PilParser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.variableDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationStatement([NotNull] PilParser.VariableDeclarationStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] PilParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] PilParser.VariableDeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentStatement([NotNull] PilParser.AssignmentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentStatement([NotNull] PilParser.AssignmentStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.leftSide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLeftSide([NotNull] PilParser.LeftSideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.leftSide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLeftSide([NotNull] PilParser.LeftSideContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionList([NotNull] PilParser.ExpressionListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionList([NotNull] PilParser.ExpressionListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] PilParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] PilParser.ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.arithmeticExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArithmeticExpression([NotNull] PilParser.ArithmeticExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.arithmeticExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArithmeticExpression([NotNull] PilParser.ArithmeticExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.opMulDiv"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpMulDiv([NotNull] PilParser.OpMulDivContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.opMulDiv"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpMulDiv([NotNull] PilParser.OpMulDivContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.opAddSub"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpAddSub([NotNull] PilParser.OpAddSubContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.opAddSub"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpAddSub([NotNull] PilParser.OpAddSubContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.arithmeticExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArithmeticExpressionTerminator([NotNull] PilParser.ArithmeticExpressionTerminatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.arithmeticExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArithmeticExpressionTerminator([NotNull] PilParser.ArithmeticExpressionTerminatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.opMinus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpMinus([NotNull] PilParser.OpMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.opMinus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpMinus([NotNull] PilParser.OpMinusContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.conditionalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalExpression([NotNull] PilParser.ConditionalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.conditionalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalExpression([NotNull] PilParser.ConditionalExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.andAlsoOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndAlsoOp([NotNull] PilParser.AndAlsoOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.andAlsoOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndAlsoOp([NotNull] PilParser.AndAlsoOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.orElseOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrElseOp([NotNull] PilParser.OrElseOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.orElseOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrElseOp([NotNull] PilParser.OrElseOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.opExcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpExcl([NotNull] PilParser.OpExclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.opExcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpExcl([NotNull] PilParser.OpExclContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.conditionalExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalExpressionTerminator([NotNull] PilParser.ConditionalExpressionTerminatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.conditionalExpressionTerminator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalExpressionTerminator([NotNull] PilParser.ConditionalExpressionTerminatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.comparisonExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonExpression([NotNull] PilParser.ComparisonExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.comparisonExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonExpression([NotNull] PilParser.ComparisonExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.comparisonOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonOperator([NotNull] PilParser.ComparisonOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.comparisonOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonOperator([NotNull] PilParser.ComparisonOperatorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.elementOfExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementOfExpression([NotNull] PilParser.ElementOfExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.elementOfExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementOfExpression([NotNull] PilParser.ElementOfExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.elementOfValueList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementOfValueList([NotNull] PilParser.ElementOfValueListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.elementOfValueList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementOfValueList([NotNull] PilParser.ElementOfValueListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.elementOfValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementOfValue([NotNull] PilParser.ElementOfValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.elementOfValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementOfValue([NotNull] PilParser.ElementOfValueContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.terminalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerminalExpression([NotNull] PilParser.TerminalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.terminalExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerminalExpression([NotNull] PilParser.TerminalExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.functionCallExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] PilParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.functionCallExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] PilParser.FunctionCallExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.variableReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableReference([NotNull] PilParser.VariableReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.variableReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableReference([NotNull] PilParser.VariableReferenceContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.variableReferenceIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableReferenceIdentifier([NotNull] PilParser.VariableReferenceIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.variableReferenceIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableReferenceIdentifier([NotNull] PilParser.VariableReferenceIdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComment([NotNull] PilParser.CommentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComment([NotNull] PilParser.CommentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] PilParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] PilParser.LiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.typeReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeReference([NotNull] PilParser.TypeReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.typeReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeReference([NotNull] PilParser.TypeReferenceContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.builtInType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBuiltInType([NotNull] PilParser.BuiltInTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.builtInType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBuiltInType([NotNull] PilParser.BuiltInTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.qualifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifierList([NotNull] PilParser.QualifierListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.qualifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifierList([NotNull] PilParser.QualifierListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.qualifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifier([NotNull] PilParser.QualifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.qualifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifier([NotNull] PilParser.QualifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterName([NotNull] PilParser.NameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitName([NotNull] PilParser.NameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.identifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierList([NotNull] PilParser.IdentifierListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.identifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierList([NotNull] PilParser.IdentifierListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] PilParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] PilParser.IdentifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="PilParser.resultIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResultIdentifier([NotNull] PilParser.ResultIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PilParser.resultIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResultIdentifier([NotNull] PilParser.ResultIdentifierContext context);
}
} // namespace PilV2.Syntax.InternalSyntax
