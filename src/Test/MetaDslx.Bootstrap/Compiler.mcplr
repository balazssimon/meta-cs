namespace MetaDslx.CodeAnalysis.Symbols
{
	typedef LanguageSymbolKind = "MetaDslx.CodeAnalysis.Symbols.LanguageSymbolKind";
	typedef ImmutableArray = "System.Collections.Immutable.ImmutableArray";
	typedef Location = "MetaDslx.CodeAnalysis.Location";
	typedef IEnumerable = "IEnumerable";
	typedef ICollection = "ICollection";
	typedef AttributeData = "AttributeData";
	typedef ObsoleteAttributeData = "ObsoleteAttributeData";
	typedef ModuleMetadata = "ModuleMetadata";
	typedef Language = "Language";
	typedef LanguageCompilation = "LanguageCompilation";
	typedef LexicalSortKey = "LexicalSortKey";
	typedef Accessibility = "Accessibility";
	typedef MergedDeclaration = "MergedDeclaration";
	typedef SyntaxReference = "SyntaxReference";
	typedef AssemblyIdentity = "AssemblyIdentity";
	typedef Version = "Version";
	typedef Machine = "Machine";
	typedef NamespaceExtent = "NamespaceExtent";
	typedef NamespaceKind = "NamespaceKind";
	typedef LanguageTypeKind = "LanguageTypeKind";
	typedef SpecialType = "SpecialType";
	typedef ConsList = "ConsList";
	typedef TypedConstant = "TypedConstant";

	compiler Main;

	phase Attributes;
  phase ObsoleteAttribute;
	phase Module;
	locked phase ValidatingReferencedAssemblies;
	locked phase ValidatingAddedModules;
	locked phase AttributeChecks;
	locked phase BaseTypes;
	phase Members;
	phase TypeMembers;
	locked phase ValidatingImports;
	phase MembersCompleted joins All;
	phase AliasTarget;

	abstract symbol Symbol
	{
		string Name;

		AttributeSymbol[] Attributes phase Attributes;
	}
  
	abstract symbol DeclaredSymbol : Symbol
	{
    bool IsStatic;
    bool IsVirtual;
    bool IsOverride;
    bool IsAbstract;
    bool IsSealed;
    bool IsNew;
    bool IsExtern;
    bool IsImplicitlyDeclared;
    Accessibility DeclaredAccessibility;

    DeclaredSymbol ConstructedFrom;
    
		protected string->DeclaredSymbol[] MembersByName phase Members;
		DeclaredSymbol[] Members phase MembersCompleted;
		NamedTypeSymbol[] TypeMembers phase MembersCompleted;
	}

	symbol NamespaceSymbol : DeclaredSymbol
	{
	}
    
  symbol MergedNamespaceSymbol : NamespaceSymbol
  {
  }
  
	symbol TypeSymbol : DeclaredSymbol
	{
    bool IsReferenceType;
    bool IsValueType;
    bool IsAnonymousType;
    bool IsTupleType;
    bool IsRefLikeType;
    bool IsUnmanagedType;
    bool IsReadOnly;
  
    LanguageTypeKind TypeKind;
    SpecialType SpecialType;
    NamedTypeSymbol[] BaseTypesNoUseSiteDiagnostics phase BaseTypes;
    NamedTypeSymbol[] AllBaseTypesNoUseSiteDiagnostics phase BaseTypes;
    TypeSymbol EffectiveTypeNoUseSiteDiagnostics;
	}

	symbol NamedTypeSymbol : TypeSymbol
	{
    phase BaseTypes;

    int Arity = "0";
    abstract IEnumerable<string> MemberNames;
    DeclaredSymbol[] InstanceMembers;
    DeclaredSymbol[] StaticMembers;
    MethodSymbol ScriptInitializer;
    MethodSymbol ScriptEntryPoint;
    MethodSymbol[] Operators;
    MethodSymbol[] InstanceConstructors;
    MethodSymbol[] StaticConstructors;
    MethodSymbol[] Constructors;
	}

  symbol AttributeSymbol : Symbol
  {
    NamedTypeSymbol AttributeClass;
    MethodSymbol AttributeConstructor;
    TypedConstant[] ConstructorArguments;
    KeyValuePair<string, TypedConstant>[] NamedArguments;
  }
    
  symbol ErrorTypeSymbol : NamedTypeSymbol
  {
  }
  
  symbol UnsupportedSymbol : Symbol
  {
  }
  
  symbol DiscardSymbol : Symbol
  {
  }
  
  symbol MemberSymbol : DeclaredSymbol
  {
  }
  
  symbol FieldSymbol : MemberSymbol
  {
  }
  
  symbol PropertySymbol : MemberSymbol
  {
  }
  
  symbol MethodSymbol : MemberSymbol
  {
  }
  
  symbol OperationSymbol : Symbol
  {
  }
  
  symbol StatementSymbol : OperationSymbol
  {
  }
  
  symbol ExpressionSymbol : OperationSymbol
  {
  }
  
    
  symbol AliasSymbol : DeclaredSymbol
  {
  }

  symbol DynamicTypeSymbol : TypeSymbol
  {
  }

}
