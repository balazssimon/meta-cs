parser grammar SequenceParser;

options {
	tokenVocab=SequenceLexer;
	generateCompiler=true;
}

main : interaction EOF;

$SymbolDef(Interaction)
$Scope
interaction : line*;

line : declaration? LCrLf;

$Property(Declarations)
declaration
	: title
	| destroy
	| arrow
	| alt
	| opt
	| loop
	| ref
	| note
	;

title: KTitle $Property(Name) text?;

$SymbolDef(Message)
arrow: $Property(Source) source=lifeLineName $Property(Kind) type=arrowType $Property(Target) target=lifeLineName TColon $Property(Text) $Value text?;

$SymbolDef(Destroy)
destroy: KDestroy $Property(Lifeline) lifeLineName?;

$SymbolDef(MultiFragment)
$Property(Fragments)
alt: altFragment elseFragment* end;

$SymbolDef(Fragment)
$Property(name=Kind, value=Symbols.FragmentKind.Alt)
altFragment: KAlt $Property(Text) $Value condition=text? LCrLf fragmentBody;

$SymbolDef(Fragment)
$Property(name=Kind, value=Symbols.FragmentKind.Else)
elseFragment: KElse $Property(Text) $Value condition=text? LCrLf fragmentBody;

$SymbolDef(Fragment)
$Property(name=Kind, value=Symbols.FragmentKind.Loop)
loop: loopFragment end;
loopFragment: KLoop $Property(Text) $Value condition=text? LCrLf fragmentBody;

$SymbolDef(Fragment)
$Property(name=Kind, value=Symbols.FragmentKind.Opt)
opt: optFragment end;
optFragment: KOpt $Property(Text) $Value condition=text? LCrLf fragmentBody;

$SymbolDef(RefFragment)
$Property(name=Kind, value=Symbols.FragmentKind.Ref)
ref: simpleRefFragment | messageRefFragment;

simpleRefFragment: KRef (over=text TColon)? refText=text? LCrLf $Property(Text) $Value simpleBody KEndRef;
messageRefFragment: refInput $Property(Text) $Value simpleBody refOutput;

$Property(Input)
$SymbolDef(Message)
refInput : $Property(Source) source=lifeLineName $Property(Kind) sourceType=arrowType KRef (over=text TColon)? $Property(Text) $Value message=text? LCrLf;
$Property(Output)
$SymbolDef(Message)
refOutput: KEndRef ignored=text? $Property(Kind) targetType=arrowType $Property(Target) target=lifeLineName TColon $Property(Text) $Value message=text?;

fragmentBody: line*;
end: KEnd text?;

note
	: singleLineNote
	| multiLineNote
	;

singleLineNote : KNote position=text TColon noteText=text;
multiLineNote : KNote simpleBody KEndNote;

simpleBody: simpleLine*;
simpleLine: text LCrLf;

arrowType : $Value(MessageKind.Sync) TSync | $Value(MessageKind.Async) TAsync | $Value(MessageKind.Return) TReturn | $Value(MessageKind.Create) TCreate;

$Property(name=Declarations, owner=CurrentScope)
$SymbolDef(symbolType=Lifeline, merge=true)
lifeLineName : name;

$Name
name : identifier;

$Identifier
identifier : text;

text : identifierPart+;

identifierPart: LIdentifier;


