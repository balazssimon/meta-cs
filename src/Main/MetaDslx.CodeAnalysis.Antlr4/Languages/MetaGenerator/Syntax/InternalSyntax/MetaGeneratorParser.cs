//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Balazs\source\repos\meta-cs\src\Main\MetaDslx.CodeAnalysis.Antlr4\Languages\MetaGenerator\Syntax\InternalSyntax\MetaGeneratorParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaGenerator.Syntax.InternalSyntax {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MetaGeneratorParser : Parser {
	public const int
		KNamespace=1, KGenerator=2, KUsing=3, KConfiguration=4, KProperties=5, 
		KTemplate=6, KFunction=7, KExtern=8, KReturn=9, KSwitch=10, KCase=11, 
		KType=12, KVoid=13, KEnd=14, KFor=15, KForEach=16, KIn=17, KIf=18, KElse=19, 
		KRepeat=20, KUntil=21, KWhile=22, KLoop=23, KHasLoop=24, KWhere=25, KOrderBy=26, 
		KDescending=27, KSeparator=28, KNull=29, KTrue=30, KFalse=31, KBool=32, 
		KByte=33, KChar=34, KDecimal=35, KDouble=36, KFloat=37, KInt=38, KLong=39, 
		KObject=40, KSByte=41, KShort=42, KString=43, KUInt=44, KULong=45, KUShort=46, 
		KThis=47, KNew=48, KIs=49, KAs=50, KTypeof=51, KDefault=52, TSemicolon=53, 
		TColon=54, TDot=55, TComma=56, TAssign=57, TAssignPlus=58, TAssignMinus=59, 
		TAssignAsterisk=60, TAssignSlash=61, TAssignPercent=62, TAssignAmp=63, 
		TAssignPipe=64, TAssignHat=65, TAssignLeftShift=66, TAssignRightShift=67, 
		TOpenParenthesis=68, TCloseParenthesis=69, TOpenBracket=70, TCloseBracket=71, 
		TOpenBrace=72, TCloseBrace=73, TEquals=74, TNotEquals=75, TArrow=76, TSingleArrow=77, 
		TLessThan=78, TGreaterThan=79, TLessThanOrEquals=80, TGreaterThanOrEquals=81, 
		TQuestion=82, TPlus=83, TMinus=84, TExclamation=85, TTilde=86, TAsterisk=87, 
		TSlash=88, TPercent=89, TPlusPlus=90, TMinusMinus=91, TColonColon=92, 
		TAmp=93, THat=94, TPipe=95, TAnd=96, TXor=97, TOr=98, TQuestionQuestion=99, 
		IdentifierNormal=100, IntegerLiteral=101, DecimalLiteral=102, ScientificLiteral=103, 
		DateTimeOffsetLiteral=104, DateTimeLiteral=105, DateLiteral=106, TimeLiteral=107, 
		CharLiteral=108, RegularStringLiteral=109, GuidLiteral=110, LUtf8Bom=111, 
		LWhitespace=112, LCrLf=113, LLineBreak=114, LLineComment=115, LMultiLineComment=116, 
		DoubleQuoteVerbatimStringLiteral=117, TH_TOpenParenthesis=118, TH_TCloseParenthesis=119, 
		KEndTemplate=120, TemplateLineControl=121, TemplateOutput=122, TemplateCrLf=123, 
		TemplateLineBreak=124, TemplateStatementStart=125, TemplateStatementEnd=126, 
		TS_TOpenBracket=127, TS_TCloseBracket=128, DoubleQuoteVerbatimStringLiteralStart=129, 
		COMMENT_START=130;
	public const int
		RULE_main = 0, RULE_namespaceDeclaration = 1, RULE_generatorDeclaration = 2, 
		RULE_usingDeclaration = 3, RULE_configDeclaration = 4, RULE_configProperty = 5, 
		RULE_methodDeclaration = 6, RULE_externFunctionDeclaration = 7, RULE_functionDeclaration = 8, 
		RULE_functionSignature = 9, RULE_paramList = 10, RULE_parameter = 11, 
		RULE_body = 12, RULE_statement = 13, RULE_singleStatement = 14, RULE_singleStatementSemicolon = 15, 
		RULE_variableDeclarationStatement = 16, RULE_variableDeclarationExpression = 17, 
		RULE_variableDeclarationItem = 18, RULE_voidStatement = 19, RULE_returnStatement = 20, 
		RULE_expressionStatement = 21, RULE_ifStatement = 22, RULE_elseIfStatementBody = 23, 
		RULE_ifStatementElseBody = 24, RULE_ifStatementBegin = 25, RULE_elseIfStatement = 26, 
		RULE_ifStatementElse = 27, RULE_ifStatementEnd = 28, RULE_forStatement = 29, 
		RULE_forStatementBegin = 30, RULE_forStatementEnd = 31, RULE_forInitStatement = 32, 
		RULE_whileStatement = 33, RULE_whileStatementBegin = 34, RULE_whileStatementEnd = 35, 
		RULE_whileRunExpression = 36, RULE_repeatStatement = 37, RULE_repeatStatementBegin = 38, 
		RULE_repeatStatementEnd = 39, RULE_repeatRunExpression = 40, RULE_loopStatement = 41, 
		RULE_loopStatementBegin = 42, RULE_loopStatementEnd = 43, RULE_loopChain = 44, 
		RULE_loopChainItem = 45, RULE_loopChainExpression = 46, RULE_loopWhereExpression = 47, 
		RULE_loopRunExpression = 48, RULE_separatorStatement = 49, RULE_switchStatement = 50, 
		RULE_switchStatementBegin = 51, RULE_switchStatementEnd = 52, RULE_switchBranchStatement = 53, 
		RULE_switchBranchHeadStatement = 54, RULE_switchCaseOrTypeIsHeadStatements = 55, 
		RULE_switchCaseOrTypeIsHeadStatement = 56, RULE_switchCaseHeadStatement = 57, 
		RULE_switchTypeIsHeadStatement = 58, RULE_switchTypeAsHeadStatement = 59, 
		RULE_switchDefaultStatement = 60, RULE_switchDefaultHeadStatement = 61, 
		RULE_templateDeclaration = 62, RULE_templateSignature = 63, RULE_templateBody = 64, 
		RULE_templateContentLine = 65, RULE_templateContent = 66, RULE_templateOutput = 67, 
		RULE_templateLineEnd = 68, RULE_templateStatementStartEnd = 69, RULE_templateStatement = 70, 
		RULE_typeArgumentList = 71, RULE_predefinedType = 72, RULE_typeReferenceList = 73, 
		RULE_typeReference = 74, RULE_arrayType = 75, RULE_arrayItemType = 76, 
		RULE_nullableType = 77, RULE_nullableItemType = 78, RULE_genericType = 79, 
		RULE_simpleType = 80, RULE_voidType = 81, RULE_returnType = 82, RULE_expressionList = 83, 
		RULE_variableReference = 84, RULE_rankSpecifiers = 85, RULE_rankSpecifier = 86, 
		RULE_unboundTypeName = 87, RULE_genericDimensionItem = 88, RULE_genericDimensionSpecifier = 89, 
		RULE_anonymousFunctionSignature = 90, RULE_explicitParameter = 91, RULE_implicitParameter = 92, 
		RULE_expression = 93, RULE_qualifiedName = 94, RULE_identifierList = 95, 
		RULE_identifier = 96, RULE_literal = 97, RULE_nullLiteral = 98, RULE_booleanLiteral = 99, 
		RULE_numberLiteral = 100, RULE_integerLiteral = 101, RULE_decimalLiteral = 102, 
		RULE_scientificLiteral = 103, RULE_dateOrTimeLiteral = 104, RULE_dateTimeOffsetLiteral = 105, 
		RULE_dateTimeLiteral = 106, RULE_dateLiteral = 107, RULE_timeLiteral = 108, 
		RULE_charLiteral = 109, RULE_stringLiteral = 110, RULE_guidLiteral = 111;
	public static readonly string[] ruleNames = {
		"main", "namespaceDeclaration", "generatorDeclaration", "usingDeclaration", 
		"configDeclaration", "configProperty", "methodDeclaration", "externFunctionDeclaration", 
		"functionDeclaration", "functionSignature", "paramList", "parameter", 
		"body", "statement", "singleStatement", "singleStatementSemicolon", "variableDeclarationStatement", 
		"variableDeclarationExpression", "variableDeclarationItem", "voidStatement", 
		"returnStatement", "expressionStatement", "ifStatement", "elseIfStatementBody", 
		"ifStatementElseBody", "ifStatementBegin", "elseIfStatement", "ifStatementElse", 
		"ifStatementEnd", "forStatement", "forStatementBegin", "forStatementEnd", 
		"forInitStatement", "whileStatement", "whileStatementBegin", "whileStatementEnd", 
		"whileRunExpression", "repeatStatement", "repeatStatementBegin", "repeatStatementEnd", 
		"repeatRunExpression", "loopStatement", "loopStatementBegin", "loopStatementEnd", 
		"loopChain", "loopChainItem", "loopChainExpression", "loopWhereExpression", 
		"loopRunExpression", "separatorStatement", "switchStatement", "switchStatementBegin", 
		"switchStatementEnd", "switchBranchStatement", "switchBranchHeadStatement", 
		"switchCaseOrTypeIsHeadStatements", "switchCaseOrTypeIsHeadStatement", 
		"switchCaseHeadStatement", "switchTypeIsHeadStatement", "switchTypeAsHeadStatement", 
		"switchDefaultStatement", "switchDefaultHeadStatement", "templateDeclaration", 
		"templateSignature", "templateBody", "templateContentLine", "templateContent", 
		"templateOutput", "templateLineEnd", "templateStatementStartEnd", "templateStatement", 
		"typeArgumentList", "predefinedType", "typeReferenceList", "typeReference", 
		"arrayType", "arrayItemType", "nullableType", "nullableItemType", "genericType", 
		"simpleType", "voidType", "returnType", "expressionList", "variableReference", 
		"rankSpecifiers", "rankSpecifier", "unboundTypeName", "genericDimensionItem", 
		"genericDimensionSpecifier", "anonymousFunctionSignature", "explicitParameter", 
		"implicitParameter", "expression", "qualifiedName", "identifierList", 
		"identifier", "literal", "nullLiteral", "booleanLiteral", "numberLiteral", 
		"integerLiteral", "decimalLiteral", "scientificLiteral", "dateOrTimeLiteral", 
		"dateTimeOffsetLiteral", "dateTimeLiteral", "dateLiteral", "timeLiteral", 
		"charLiteral", "stringLiteral", "guidLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'generator'", "'using'", "'configuration'", "'properties'", 
		"'template'", "'function'", "'extern'", "'return'", "'switch'", "'case'", 
		"'type'", "'void'", "'end'", "'for'", "'foreach'", "'in'", "'if'", "'else'", 
		"'repeat'", "'until'", "'while'", "'loop'", "'hasloop'", "'where'", "'orderby'", 
		"'descending'", "'separator'", "'null'", "'true'", "'false'", "'bool'", 
		"'byte'", "'char'", "'decimal'", "'double'", "'float'", "'int'", "'long'", 
		"'object'", "'sbyte'", "'short'", "'string'", "'uint'", "'ulong'", "'ushort'", 
		"'this'", "'new'", "'is'", "'as'", "'typeof'", "'default'", "';'", "':'", 
		"'.'", "','", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<='", "'>>='", "'('", "')'", null, "']'", "'{'", "'}'", "'=='", 
		"'!='", "'=>'", "'->'", "'<'", "'>'", "'<='", "'>='", "'?'", "'+'", "'-'", 
		"'!'", "'~'", null, "'/'", "'%'", "'++'", "'--'", "'::'", "'&'", "'^'", 
		"'|'", "'&&'", "'^^'", "'||'", "'??'", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'\"'", 
		null, null, null, null, null, null, null, null, null, null, null, "'@\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KGenerator", "KUsing", "KConfiguration", "KProperties", 
		"KTemplate", "KFunction", "KExtern", "KReturn", "KSwitch", "KCase", "KType", 
		"KVoid", "KEnd", "KFor", "KForEach", "KIn", "KIf", "KElse", "KRepeat", 
		"KUntil", "KWhile", "KLoop", "KHasLoop", "KWhere", "KOrderBy", "KDescending", 
		"KSeparator", "KNull", "KTrue", "KFalse", "KBool", "KByte", "KChar", "KDecimal", 
		"KDouble", "KFloat", "KInt", "KLong", "KObject", "KSByte", "KShort", "KString", 
		"KUInt", "KULong", "KUShort", "KThis", "KNew", "KIs", "KAs", "KTypeof", 
		"KDefault", "TSemicolon", "TColon", "TDot", "TComma", "TAssign", "TAssignPlus", 
		"TAssignMinus", "TAssignAsterisk", "TAssignSlash", "TAssignPercent", "TAssignAmp", 
		"TAssignPipe", "TAssignHat", "TAssignLeftShift", "TAssignRightShift", 
		"TOpenParenthesis", "TCloseParenthesis", "TOpenBracket", "TCloseBracket", 
		"TOpenBrace", "TCloseBrace", "TEquals", "TNotEquals", "TArrow", "TSingleArrow", 
		"TLessThan", "TGreaterThan", "TLessThanOrEquals", "TGreaterThanOrEquals", 
		"TQuestion", "TPlus", "TMinus", "TExclamation", "TTilde", "TAsterisk", 
		"TSlash", "TPercent", "TPlusPlus", "TMinusMinus", "TColonColon", "TAmp", 
		"THat", "TPipe", "TAnd", "TXor", "TOr", "TQuestionQuestion", "IdentifierNormal", 
		"IntegerLiteral", "DecimalLiteral", "ScientificLiteral", "DateTimeOffsetLiteral", 
		"DateTimeLiteral", "DateLiteral", "TimeLiteral", "CharLiteral", "RegularStringLiteral", 
		"GuidLiteral", "LUtf8Bom", "LWhitespace", "LCrLf", "LLineBreak", "LLineComment", 
		"LMultiLineComment", "DoubleQuoteVerbatimStringLiteral", "TH_TOpenParenthesis", 
		"TH_TCloseParenthesis", "KEndTemplate", "TemplateLineControl", "TemplateOutput", 
		"TemplateCrLf", "TemplateLineBreak", "TemplateStatementStart", "TemplateStatementEnd", 
		"TS_TOpenBracket", "TS_TCloseBracket", "DoubleQuoteVerbatimStringLiteralStart", 
		"COMMENT_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaGeneratorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaGeneratorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public GeneratorDeclarationContext generatorDeclaration() {
			return GetRuleContext<GeneratorDeclarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MetaGeneratorParser.Eof, 0); }
		public UsingDeclarationContext[] usingDeclaration() {
			return GetRuleContexts<UsingDeclarationContext>();
		}
		public UsingDeclarationContext usingDeclaration(int i) {
			return GetRuleContext<UsingDeclarationContext>(i);
		}
		public ConfigDeclarationContext configDeclaration() {
			return GetRuleContext<ConfigDeclarationContext>(0);
		}
		public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; namespaceDeclaration();
			State = 225; generatorDeclaration();
			State = 229;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KUsing) {
				{
				{
				State = 226; usingDeclaration();
				}
				}
				State = 231;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 233;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==KProperties) {
				{
				State = 232; configDeclaration();
				}
			}

			State = 238;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KTemplate) | (1L << KFunction) | (1L << KExtern))) != 0)) {
				{
				{
				State = 235; methodDeclaration();
				}
				}
				State = 240;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 241; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaGeneratorParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(KNamespace);
			State = 244; qualifiedName();
			State = 245; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorDeclarationContext : ParserRuleContext {
		public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public GeneratorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGeneratorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGeneratorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorDeclarationContext generatorDeclaration() {
		GeneratorDeclarationContext _localctx = new GeneratorDeclarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_generatorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(KGenerator);
			State = 248; identifier();
			State = 251;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TColon) {
				{
				State = 249; Match(TColon);
				State = 250; qualifiedName();
				}
			}

			State = 255;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==KFor) {
				{
				State = 253; Match(KFor);
				State = 254; typeReference();
				}
			}

			State = 257; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
	 
		public UsingDeclarationContext() { }
		public virtual void CopyFrom(UsingDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingNamespaceDeclarationContext : UsingDeclarationContext {
		public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public UsingNamespaceDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUsingNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUsingNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingGeneratorDeclarationContext : UsingDeclarationContext {
		public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UsingGeneratorDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUsingGeneratorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUsingGeneratorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_usingDeclaration);
		int _la;
		try {
			State = 271;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				_localctx = new UsingNamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 259; Match(KUsing);
				State = 260; qualifiedName();
				State = 261; Match(TSemicolon);
				}
				break;

			case 2:
				_localctx = new UsingGeneratorDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 263; Match(KUsing);
				State = 264; Match(KGenerator);
				State = 265; qualifiedName();
				State = 267;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IdentifierNormal) {
					{
					State = 266; identifier();
					}
				}

				State = 269; Match(TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigDeclarationContext : ParserRuleContext {
		public IToken startProperties;
		public IToken endProperties;
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigDeclarationContext configDeclaration() {
		ConfigDeclarationContext _localctx = new ConfigDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_configDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; _localctx.startProperties = Match(KProperties);
			State = 275;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 274; identifier();
				}
				break;
			}
			State = 280;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				{
				State = 277; configProperty();
				}
				}
				State = 282;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 283; Match(KEnd);
			State = 284; _localctx.endProperties = Match(KProperties);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigPropertyContext : ParserRuleContext {
		public ConfigPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configProperty; } }
	 
		public ConfigPropertyContext() { }
		public virtual void CopyFrom(ConfigPropertyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConfigPropertyDeclarationContext : ConfigPropertyContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConfigPropertyDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConfigPropertyGroupDeclarationContext : ConfigPropertyContext {
		public IToken startProperties;
		public IToken endProperties;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigPropertyGroupDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigPropertyGroupDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigPropertyGroupDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyGroupDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigPropertyContext configProperty() {
		ConfigPropertyContext _localctx = new ConfigPropertyContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_configProperty);
		int _la;
		try {
			State = 305;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				_localctx = new ConfigPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 286; typeReference();
				State = 287; identifier();
				State = 290;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==TAssign) {
					{
					State = 288; Match(TAssign);
					State = 289; expression(0);
					}
				}

				State = 292; Match(TSemicolon);
				}
				break;
			case KProperties:
				_localctx = new ConfigPropertyGroupDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 294; ((ConfigPropertyGroupDeclarationContext)_localctx).startProperties = Match(KProperties);
				State = 295; identifier();
				State = 299;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					{
					State = 296; configProperty();
					}
					}
					State = 301;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 302; Match(KEnd);
				State = 303; ((ConfigPropertyGroupDeclarationContext)_localctx).endProperties = Match(KProperties);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		public ExternFunctionDeclarationContext externFunctionDeclaration() {
			return GetRuleContext<ExternFunctionDeclarationContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_methodDeclaration);
		try {
			State = 310;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KFunction:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307; functionDeclaration();
				}
				break;
			case KTemplate:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308; templateDeclaration();
				}
				break;
			case KExtern:
				EnterOuterAlt(_localctx, 3);
				{
				State = 309; externFunctionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternFunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode KExtern() { return GetToken(MetaGeneratorParser.KExtern, 0); }
		public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		public ExternFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externFunctionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExternFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExternFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternFunctionDeclarationContext externFunctionDeclaration() {
		ExternFunctionDeclarationContext _localctx = new ExternFunctionDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_externFunctionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(KExtern);
			State = 313; functionSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; functionSignature();
			State = 316; body();
			State = 317; Match(KEnd);
			State = 318; Match(KFunction);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; Match(KFunction);
			State = 321; returnType();
			State = 322; identifier();
			State = 324;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TLessThan) {
				{
				State = 323; typeArgumentList();
				}
			}

			State = 326; Match(TOpenParenthesis);
			State = 328;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 327; paramList();
				}
			}

			State = 330; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; parameter();
			State = 337;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 333; Match(TComma);
				State = 334; parameter();
				}
				}
				State = 339;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; typeReference();
			State = 341; identifier();
			State = 344;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TAssign) {
				{
				State = 342; Match(TAssign);
				State = 343; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_body);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 346; statement();
					}
					} 
				}
				State = 351;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SingleStatementSemicolonContext singleStatementSemicolon() {
			return GetRuleContext<SingleStatementSemicolonContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 359;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KReturn:
			case KHasLoop:
			case KNull:
			case KTrue:
			case KFalse:
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case KThis:
			case KNew:
			case KTypeof:
			case KDefault:
			case TOpenParenthesis:
			case TPlus:
			case TMinus:
			case TExclamation:
			case TTilde:
			case TPlusPlus:
			case TMinusMinus:
			case IdentifierNormal:
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
			case DateTimeOffsetLiteral:
			case DateTimeLiteral:
			case DateLiteral:
			case TimeLiteral:
			case CharLiteral:
			case RegularStringLiteral:
			case GuidLiteral:
			case DoubleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352; singleStatementSemicolon();
				}
				break;
			case KIf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353; ifStatement();
				}
				break;
			case KFor:
				EnterOuterAlt(_localctx, 3);
				{
				State = 354; forStatement();
				}
				break;
			case KWhile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 355; whileStatement();
				}
				break;
			case KRepeat:
				EnterOuterAlt(_localctx, 5);
				{
				State = 356; repeatStatement();
				}
				break;
			case KLoop:
				EnterOuterAlt(_localctx, 6);
				{
				State = 357; loopStatement();
				}
				break;
			case KSwitch:
				EnterOuterAlt(_localctx, 7);
				{
				State = 358; switchStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementContext : ParserRuleContext {
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SingleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSingleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSingleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementContext singleStatement() {
		SingleStatementContext _localctx = new SingleStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_singleStatement);
		try {
			State = 364;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361; variableDeclarationStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362; returnStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 363; expressionStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementSemicolonContext : ParserRuleContext {
		public SingleStatementContext singleStatement() {
			return GetRuleContext<SingleStatementContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public SingleStatementSemicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatementSemicolon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSingleStatementSemicolon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSingleStatementSemicolon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatementSemicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementSemicolonContext singleStatementSemicolon() {
		SingleStatementSemicolonContext _localctx = new SingleStatementSemicolonContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_singleStatementSemicolon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; singleStatement();
			State = 367; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public VariableDeclarationExpressionContext variableDeclarationExpression() {
			return GetRuleContext<VariableDeclarationExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_variableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; variableDeclarationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationExpressionContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VariableDeclarationItemContext[] variableDeclarationItem() {
			return GetRuleContexts<VariableDeclarationItemContext>();
		}
		public VariableDeclarationItemContext variableDeclarationItem(int i) {
			return GetRuleContext<VariableDeclarationItemContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public VariableDeclarationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationExpressionContext variableDeclarationExpression() {
		VariableDeclarationExpressionContext _localctx = new VariableDeclarationExpressionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_variableDeclarationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; typeReference();
			State = 372; variableDeclarationItem();
			State = 377;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 373; Match(TComma);
				State = 374; variableDeclarationItem();
				}
				}
				State = 379;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationItemContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationItemContext variableDeclarationItem() {
		VariableDeclarationItemContext _localctx = new VariableDeclarationItemContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_variableDeclarationItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; identifier();
			State = 383;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TAssign) {
				{
				State = 381; Match(TAssign);
				State = 382; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidStatementContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VoidStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVoidStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVoidStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidStatementContext voidStatement() {
		VoidStatementContext _localctx = new VoidStatementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_voidStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; Match(KVoid);
			State = 386; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode KReturn() { return GetToken(MetaGeneratorParser.KReturn, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(KReturn);
			State = 389; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		public ElseIfStatementBodyContext[] elseIfStatementBody() {
			return GetRuleContexts<ElseIfStatementBodyContext>();
		}
		public ElseIfStatementBodyContext elseIfStatementBody(int i) {
			return GetRuleContext<ElseIfStatementBodyContext>(i);
		}
		public IfStatementElseBodyContext ifStatementElseBody() {
			return GetRuleContext<IfStatementElseBodyContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; ifStatementBegin();
			State = 394; body();
			State = 398;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 395; elseIfStatementBody();
					}
					} 
				}
				State = 400;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			State = 402;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==KElse) {
				{
				State = 401; ifStatementElseBody();
				}
			}

			State = 404; ifStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementBodyContext : ParserRuleContext {
		public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseIfStatementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementBodyContext elseIfStatementBody() {
		ElseIfStatementBodyContext _localctx = new ElseIfStatementBodyContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_elseIfStatementBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; elseIfStatement();
			State = 407; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementElseBodyContext : ParserRuleContext {
		public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public IfStatementElseBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementElseBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementElseBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementElseBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementElseBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementElseBodyContext ifStatementElseBody() {
		IfStatementElseBodyContext _localctx = new IfStatementElseBodyContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_ifStatementElseBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; ifStatementElse();
			State = 410; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementBeginContext : ParserRuleContext {
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public IfStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementBeginContext ifStatementBegin() {
		IfStatementBeginContext _localctx = new IfStatementBeginContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_ifStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(KIf);
			State = 413; Match(TOpenParenthesis);
			State = 414; expression(0);
			State = 415; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(KElse);
			State = 418; Match(KIf);
			State = 419; Match(TOpenParenthesis);
			State = 420; expression(0);
			State = 421; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementElseContext : ParserRuleContext {
		public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		public IfStatementElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementElseContext ifStatementElse() {
		IfStatementElseContext _localctx = new IfStatementElseContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_ifStatementElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; Match(KElse);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public IfStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementEndContext ifStatementEnd() {
		IfStatementEndContext _localctx = new IfStatementEndContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_ifStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425; Match(KEnd);
			State = 426; Match(KIf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ForStatementBeginContext forStatementBegin() {
			return GetRuleContext<ForStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ForStatementEndContext forStatementEnd() {
			return GetRuleContext<ForStatementEndContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; forStatementBegin();
			State = 429; body();
			State = 430; forStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementBeginContext : ParserRuleContext {
		public IToken semi1;
		public ExpressionListContext endExpression;
		public IToken semi2;
		public ExpressionListContext stepExpression;
		public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ITerminalNode[] TSemicolon() { return GetTokens(MetaGeneratorParser.TSemicolon); }
		public ITerminalNode TSemicolon(int i) {
			return GetToken(MetaGeneratorParser.TSemicolon, i);
		}
		public ForInitStatementContext forInitStatement() {
			return GetRuleContext<ForInitStatementContext>(0);
		}
		public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public ForStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterForStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitForStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementBeginContext forStatementBegin() {
		ForStatementBeginContext _localctx = new ForStatementBeginContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_forStatementBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(KFor);
			State = 433; Match(TOpenParenthesis);
			State = 435;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
				{
				State = 434; forInitStatement();
				}
			}

			State = 437; _localctx.semi1 = Match(TSemicolon);
			State = 439;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
				{
				State = 438; _localctx.endExpression = expressionList();
				}
			}

			State = 441; _localctx.semi2 = Match(TSemicolon);
			State = 443;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
				{
				State = 442; _localctx.stepExpression = expressionList();
				}
			}

			State = 445; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		public ForStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterForStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitForStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementEndContext forStatementEnd() {
		ForStatementEndContext _localctx = new ForStatementEndContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_forStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(KEnd);
			State = 448; Match(KFor);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitStatementContext : ParserRuleContext {
		public VariableDeclarationExpressionContext variableDeclarationExpression() {
			return GetRuleContext<VariableDeclarationExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterForInitStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitForInitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitStatementContext forInitStatement() {
		ForInitStatementContext _localctx = new ForInitStatementContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_forInitStatement);
		try {
			State = 452;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 450; variableDeclarationExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 451; expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public WhileStatementBeginContext whileStatementBegin() {
			return GetRuleContext<WhileStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public WhileStatementEndContext whileStatementEnd() {
			return GetRuleContext<WhileStatementEndContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; whileStatementBegin();
			State = 455; body();
			State = 456; whileStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementBeginContext : ParserRuleContext {
		public ITerminalNode KWhile() { return GetToken(MetaGeneratorParser.KWhile, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public WhileStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterWhileStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitWhileStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementBeginContext whileStatementBegin() {
		WhileStatementBeginContext _localctx = new WhileStatementBeginContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_whileStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(KWhile);
			State = 459; Match(TOpenParenthesis);
			State = 460; expression(0);
			State = 461; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KWhile() { return GetToken(MetaGeneratorParser.KWhile, 0); }
		public WhileStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterWhileStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitWhileStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementEndContext whileStatementEnd() {
		WhileStatementEndContext _localctx = new WhileStatementEndContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_whileStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(KEnd);
			State = 464; Match(KWhile);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileRunExpressionContext : ParserRuleContext {
		public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public WhileRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileRunExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterWhileRunExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitWhileRunExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileRunExpressionContext whileRunExpression() {
		WhileRunExpressionContext _localctx = new WhileRunExpressionContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_whileRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		public RepeatStatementBeginContext repeatStatementBegin() {
			return GetRuleContext<RepeatStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public RepeatStatementEndContext repeatStatementEnd() {
			return GetRuleContext<RepeatStatementEndContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; repeatStatementBegin();
			State = 469; body();
			State = 470; repeatStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementBeginContext : ParserRuleContext {
		public ITerminalNode KRepeat() { return GetToken(MetaGeneratorParser.KRepeat, 0); }
		public RepeatStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementBeginContext repeatStatementBegin() {
		RepeatStatementBeginContext _localctx = new RepeatStatementBeginContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_repeatStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; Match(KRepeat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementEndContext : ParserRuleContext {
		public ITerminalNode KUntil() { return GetToken(MetaGeneratorParser.KUntil, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public RepeatStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementEndContext repeatStatementEnd() {
		RepeatStatementEndContext _localctx = new RepeatStatementEndContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_repeatStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; Match(KUntil);
			State = 475; Match(TOpenParenthesis);
			State = 476; expression(0);
			State = 477; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatRunExpressionContext : ParserRuleContext {
		public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public RepeatRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatRunExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRepeatRunExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRepeatRunExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatRunExpressionContext repeatRunExpression() {
		RepeatRunExpressionContext _localctx = new RepeatRunExpressionContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_repeatRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479; separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; loopStatementBegin();
			State = 482; body();
			State = 483; loopStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementBeginContext : ParserRuleContext {
		public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		public LoopRunExpressionContext loopRunExpression() {
			return GetRuleContext<LoopRunExpressionContext>(0);
		}
		public LoopStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementBeginContext loopStatementBegin() {
		LoopStatementBeginContext _localctx = new LoopStatementBeginContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_loopStatementBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485; Match(KLoop);
			State = 486; Match(TOpenParenthesis);
			State = 487; loopChain();
			State = 489;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==KWhere) {
				{
				State = 488; loopWhereExpression();
				}
			}

			State = 492;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TSemicolon) {
				{
				State = 491; loopRunExpression();
				}
			}

			State = 494; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		public LoopStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementEndContext loopStatementEnd() {
		LoopStatementEndContext _localctx = new LoopStatementEndContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_loopStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496; Match(KEnd);
			State = 497; Match(KLoop);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainContext : ParserRuleContext {
		public LoopChainItemContext[] loopChainItem() {
			return GetRuleContexts<LoopChainItemContext>();
		}
		public LoopChainItemContext loopChainItem(int i) {
			return GetRuleContext<LoopChainItemContext>(i);
		}
		public ITerminalNode[] TSingleArrow() { return GetTokens(MetaGeneratorParser.TSingleArrow); }
		public ITerminalNode TSingleArrow(int i) {
			return GetToken(MetaGeneratorParser.TSingleArrow, i);
		}
		public LoopChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainContext loopChain() {
		LoopChainContext _localctx = new LoopChainContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_loopChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; loopChainItem();
			State = 504;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TSingleArrow) {
				{
				{
				State = 500; Match(TSingleArrow);
				State = 501; loopChainItem();
				}
				}
				State = 506;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainItemContext : ParserRuleContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public LoopChainItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainItemContext loopChainItem() {
		LoopChainItemContext _localctx = new LoopChainItemContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_loopChainItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 508;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					State = 507; typeReference();
					}
					break;
				}
				State = 510; identifier();
				State = 511; Match(TColon);
				}
				break;
			}
			State = 515; loopChainExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainExpressionContext : ParserRuleContext {
		public LoopChainExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainExpression; } }
	 
		public LoopChainExpressionContext() { }
		public virtual void CopyFrom(LoopChainExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopChainTypeofExpressionContext : LoopChainExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopChainTypeofExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainTypeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainIdentifierExpressionContext : LoopChainExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainIdentifierExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainMemberAccessExpressionContext : LoopChainExpressionContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainMemberAccessExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainMethodCallExpressionContext : LoopChainExpressionContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public LoopChainMethodCallExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainMethodCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainExpressionContext loopChainExpression() {
		return loopChainExpression(0);
	}

	private LoopChainExpressionContext loopChainExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		LoopChainExpressionContext _localctx = new LoopChainExpressionContext(_ctx, _parentState);
		LoopChainExpressionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_loopChainExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KTypeof:
				{
				_localctx = new LoopChainTypeofExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 518; Match(KTypeof);
				State = 519; Match(TOpenParenthesis);
				State = 520; typeReference();
				State = 521; Match(TCloseParenthesis);
				}
				break;
			case IdentifierNormal:
				{
				_localctx = new LoopChainIdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 523; identifier();
				State = 525;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					State = 524; typeArgumentList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 543;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 541;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
					case 1:
						{
						_localctx = new LoopChainMemberAccessExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 529;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 530; Match(TDot);
						State = 531; identifier();
						State = 533;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
						case 1:
							{
							State = 532; typeArgumentList();
							}
							break;
						}
						}
						break;

					case 2:
						{
						_localctx = new LoopChainMethodCallExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 535;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 536; Match(TOpenParenthesis);
						State = 538;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
							{
							State = 537; expressionList();
							}
						}

						State = 540; Match(TCloseParenthesis);
						}
						break;
					}
					} 
				}
				State = 545;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LoopWhereExpressionContext : ParserRuleContext {
		public ITerminalNode KWhere() { return GetToken(MetaGeneratorParser.KWhere, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopWhereExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopWhereExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopWhereExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopWhereExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopWhereExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopWhereExpressionContext loopWhereExpression() {
		LoopWhereExpressionContext _localctx = new LoopWhereExpressionContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_loopWhereExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546; Match(KWhere);
			State = 547; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopRunExpressionContext : ParserRuleContext {
		public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public LoopRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopRunExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopRunExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopRunExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopRunExpressionContext loopRunExpression() {
		LoopRunExpressionContext _localctx = new LoopRunExpressionContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_loopRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorStatementContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode KSeparator() { return GetToken(MetaGeneratorParser.KSeparator, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public SeparatorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSeparatorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSeparatorStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorStatementContext separatorStatement() {
		SeparatorStatementContext _localctx = new SeparatorStatementContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_separatorStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; Match(TSemicolon);
			State = 552; Match(KSeparator);
			State = 553; identifier();
			State = 554; Match(TAssign);
			State = 555; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		public SwitchBranchStatementContext[] switchBranchStatement() {
			return GetRuleContexts<SwitchBranchStatementContext>();
		}
		public SwitchBranchStatementContext switchBranchStatement(int i) {
			return GetRuleContext<SwitchBranchStatementContext>(i);
		}
		public SwitchDefaultStatementContext switchDefaultStatement() {
			return GetRuleContext<SwitchDefaultStatementContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; switchStatementBegin();
			State = 561;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KCase || _la==KType) {
				{
				{
				State = 558; switchBranchStatement();
				}
				}
				State = 563;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 565;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==KDefault) {
				{
				State = 564; switchDefaultStatement();
				}
			}

			State = 567; switchStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementBeginContext : ParserRuleContext {
		public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public SwitchStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementBeginContext switchStatementBegin() {
		SwitchStatementBeginContext _localctx = new SwitchStatementBeginContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_switchStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; Match(KSwitch);
			State = 570; Match(TOpenParenthesis);
			State = 571; expression(0);
			State = 572; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		public SwitchStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementEndContext switchStatementEnd() {
		SwitchStatementEndContext _localctx = new SwitchStatementEndContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_switchStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; Match(KEnd);
			State = 575; Match(KSwitch);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchStatementContext : ParserRuleContext {
		public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchBranchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchBranchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchBranchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchStatementContext switchBranchStatement() {
		SwitchBranchStatementContext _localctx = new SwitchBranchStatementContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_switchBranchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; switchBranchHeadStatement();
			State = 578; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchHeadStatementContext : ParserRuleContext {
		public SwitchCaseOrTypeIsHeadStatementsContext switchCaseOrTypeIsHeadStatements() {
			return GetRuleContext<SwitchCaseOrTypeIsHeadStatementsContext>(0);
		}
		public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
			return GetRuleContext<SwitchTypeAsHeadStatementContext>(0);
		}
		public SwitchBranchHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchBranchHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchBranchHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
		SwitchBranchHeadStatementContext _localctx = new SwitchBranchHeadStatementContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_switchBranchHeadStatement);
		try {
			State = 582;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 580; switchCaseOrTypeIsHeadStatements();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 581; switchTypeAsHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseOrTypeIsHeadStatementsContext : ParserRuleContext {
		public SwitchCaseOrTypeIsHeadStatementContext[] switchCaseOrTypeIsHeadStatement() {
			return GetRuleContexts<SwitchCaseOrTypeIsHeadStatementContext>();
		}
		public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement(int i) {
			return GetRuleContext<SwitchCaseOrTypeIsHeadStatementContext>(i);
		}
		public SwitchCaseOrTypeIsHeadStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseOrTypeIsHeadStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseOrTypeIsHeadStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseOrTypeIsHeadStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseOrTypeIsHeadStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseOrTypeIsHeadStatementsContext switchCaseOrTypeIsHeadStatements() {
		SwitchCaseOrTypeIsHeadStatementsContext _localctx = new SwitchCaseOrTypeIsHeadStatementsContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_switchCaseOrTypeIsHeadStatements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 584; switchCaseOrTypeIsHeadStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 587;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseOrTypeIsHeadStatementContext : ParserRuleContext {
		public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
			return GetRuleContext<SwitchCaseHeadStatementContext>(0);
		}
		public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
			return GetRuleContext<SwitchTypeIsHeadStatementContext>(0);
		}
		public SwitchCaseOrTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseOrTypeIsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseOrTypeIsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseOrTypeIsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseOrTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement() {
		SwitchCaseOrTypeIsHeadStatementContext _localctx = new SwitchCaseOrTypeIsHeadStatementContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_switchCaseOrTypeIsHeadStatement);
		try {
			State = 591;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KCase:
				EnterOuterAlt(_localctx, 1);
				{
				State = 589; switchCaseHeadStatement();
				}
				break;
			case KType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 590; switchTypeIsHeadStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseHeadStatementContext : ParserRuleContext {
		public ITerminalNode KCase() { return GetToken(MetaGeneratorParser.KCase, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchCaseHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
		SwitchCaseHeadStatementContext _localctx = new SwitchCaseHeadStatementContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_switchCaseHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593; Match(KCase);
			State = 594; expressionList();
			State = 595; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeIsHeadStatementContext : ParserRuleContext {
		public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeIsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchTypeIsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchTypeIsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
		SwitchTypeIsHeadStatementContext _localctx = new SwitchTypeIsHeadStatementContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_switchTypeIsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597; Match(KType);
			State = 598; Match(KIs);
			State = 599; typeReferenceList();
			State = 600; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeAsHeadStatementContext : ParserRuleContext {
		public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeAsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeAsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchTypeAsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchTypeAsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeAsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
		SwitchTypeAsHeadStatementContext _localctx = new SwitchTypeAsHeadStatementContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_switchTypeAsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602; Match(KType);
			State = 603; Match(KAs);
			State = 604; typeReference();
			State = 605; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultStatementContext : ParserRuleContext {
		public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchDefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchDefaultStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchDefaultStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultStatementContext switchDefaultStatement() {
		SwitchDefaultStatementContext _localctx = new SwitchDefaultStatementContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_switchDefaultStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607; switchDefaultHeadStatement();
			State = 608; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultHeadStatementContext : ParserRuleContext {
		public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchDefaultHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchDefaultHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchDefaultHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
		SwitchDefaultHeadStatementContext _localctx = new SwitchDefaultHeadStatementContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_switchDefaultHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; Match(KDefault);
			State = 611; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDeclarationContext : ParserRuleContext {
		public TemplateSignatureContext templateSignature() {
			return GetRuleContext<TemplateSignatureContext>(0);
		}
		public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		public ITerminalNode KEndTemplate() { return GetToken(MetaGeneratorParser.KEndTemplate, 0); }
		public TemplateDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDeclarationContext templateDeclaration() {
		TemplateDeclarationContext _localctx = new TemplateDeclarationContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_templateDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613; templateSignature();
			State = 614; templateBody();
			State = 615; Match(KEndTemplate);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateSignatureContext : ParserRuleContext {
		public ITerminalNode KTemplate() { return GetToken(MetaGeneratorParser.KTemplate, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public TemplateSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateSignatureContext templateSignature() {
		TemplateSignatureContext _localctx = new TemplateSignatureContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_templateSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617; Match(KTemplate);
			State = 618; identifier();
			State = 619; Match(TOpenParenthesis);
			State = 621;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 620; paramList();
				}
			}

			State = 623; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBodyContext : ParserRuleContext {
		public TemplateContentLineContext[] templateContentLine() {
			return GetRuleContexts<TemplateContentLineContext>();
		}
		public TemplateContentLineContext templateContentLine(int i) {
			return GetRuleContext<TemplateContentLineContext>(i);
		}
		public TemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBodyContext templateBody() {
		TemplateBodyContext _localctx = new TemplateBodyContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_templateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (TemplateLineControl - 121)) | (1L << (TemplateOutput - 121)) | (1L << (TemplateCrLf - 121)) | (1L << (TemplateLineBreak - 121)) | (1L << (TemplateStatementStart - 121)))) != 0)) {
				{
				{
				State = 625; templateContentLine();
				}
				}
				State = 630;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContentLineContext : ParserRuleContext {
		public TemplateLineEndContext templateLineEnd() {
			return GetRuleContext<TemplateLineEndContext>(0);
		}
		public TemplateContentContext[] templateContent() {
			return GetRuleContexts<TemplateContentContext>();
		}
		public TemplateContentContext templateContent(int i) {
			return GetRuleContext<TemplateContentContext>(i);
		}
		public TemplateContentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContentLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateContentLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateContentLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContentLineContext templateContentLine() {
		TemplateContentLineContext _localctx = new TemplateContentLineContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_templateContentLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TemplateOutput || _la==TemplateStatementStart) {
				{
				{
				State = 631; templateContent();
				}
				}
				State = 636;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 637; templateLineEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContentContext : ParserRuleContext {
		public TemplateOutputContext templateOutput() {
			return GetRuleContext<TemplateOutputContext>(0);
		}
		public TemplateStatementStartEndContext templateStatementStartEnd() {
			return GetRuleContext<TemplateStatementStartEndContext>(0);
		}
		public TemplateContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContentContext templateContent() {
		TemplateContentContext _localctx = new TemplateContentContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_templateContent);
		try {
			State = 641;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TemplateOutput:
				EnterOuterAlt(_localctx, 1);
				{
				State = 639; templateOutput();
				}
				break;
			case TemplateStatementStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 640; templateStatementStartEnd();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateOutputContext : ParserRuleContext {
		public ITerminalNode TemplateOutput() { return GetToken(MetaGeneratorParser.TemplateOutput, 0); }
		public TemplateOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateOutputContext templateOutput() {
		TemplateOutputContext _localctx = new TemplateOutputContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_templateOutput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643; Match(TemplateOutput);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateLineEndContext : ParserRuleContext {
		public ITerminalNode TemplateCrLf() { return GetToken(MetaGeneratorParser.TemplateCrLf, 0); }
		public ITerminalNode TemplateLineBreak() { return GetToken(MetaGeneratorParser.TemplateLineBreak, 0); }
		public ITerminalNode TemplateLineControl() { return GetToken(MetaGeneratorParser.TemplateLineControl, 0); }
		public TemplateLineEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateLineEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateLineEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateLineEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateLineEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateLineEndContext templateLineEnd() {
		TemplateLineEndContext _localctx = new TemplateLineEndContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_templateLineEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			_la = _input.La(1);
			if ( !(((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (TemplateLineControl - 121)) | (1L << (TemplateCrLf - 121)) | (1L << (TemplateLineBreak - 121)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementStartEndContext : ParserRuleContext {
		public ITerminalNode TemplateStatementStart() { return GetToken(MetaGeneratorParser.TemplateStatementStart, 0); }
		public ITerminalNode TemplateStatementEnd() { return GetToken(MetaGeneratorParser.TemplateStatementEnd, 0); }
		public TemplateStatementContext templateStatement() {
			return GetRuleContext<TemplateStatementContext>(0);
		}
		public TemplateStatementStartEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatementStartEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateStatementStartEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateStatementStartEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatementStartEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementStartEndContext templateStatementStartEnd() {
		TemplateStatementStartEndContext _localctx = new TemplateStatementStartEndContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_templateStatementStartEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647; Match(TemplateStatementStart);
			State = 649;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KSwitch) | (1L << KCase) | (1L << KType) | (1L << KVoid) | (1L << KEnd) | (1L << KFor) | (1L << KIf) | (1L << KElse) | (1L << KRepeat) | (1L << KUntil) | (1L << KWhile) | (1L << KLoop) | (1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
				{
				State = 648; templateStatement();
				}
			}

			State = 651; Match(TemplateStatementEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementContext : ParserRuleContext {
		public VoidStatementContext voidStatement() {
			return GetRuleContext<VoidStatementContext>(0);
		}
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		public ForStatementBeginContext forStatementBegin() {
			return GetRuleContext<ForStatementBeginContext>(0);
		}
		public ForStatementEndContext forStatementEnd() {
			return GetRuleContext<ForStatementEndContext>(0);
		}
		public WhileStatementBeginContext whileStatementBegin() {
			return GetRuleContext<WhileStatementBeginContext>(0);
		}
		public WhileStatementEndContext whileStatementEnd() {
			return GetRuleContext<WhileStatementEndContext>(0);
		}
		public RepeatStatementBeginContext repeatStatementBegin() {
			return GetRuleContext<RepeatStatementBeginContext>(0);
		}
		public RepeatStatementEndContext repeatStatementEnd() {
			return GetRuleContext<RepeatStatementEndContext>(0);
		}
		public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		public TemplateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementContext templateStatement() {
		TemplateStatementContext _localctx = new TemplateStatementContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_templateStatement);
		try {
			State = 672;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 653; voidStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 654; variableDeclarationStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 655; expressionStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 656; ifStatementBegin();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 657; elseIfStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 658; ifStatementElse();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 659; ifStatementEnd();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 660; forStatementBegin();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 661; forStatementEnd();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 662; whileStatementBegin();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 663; whileStatementEnd();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 664; repeatStatementBegin();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 665; repeatStatementEnd();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 666; loopStatementBegin();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 667; loopStatementEnd();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 668; switchStatementBegin();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 669; switchStatementEnd();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 670; switchBranchHeadStatement();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 671; switchDefaultHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_typeArgumentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674; Match(TLessThan);
			State = 675; typeReferenceList();
			State = 676; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		public ITerminalNode KBool() { return GetToken(MetaGeneratorParser.KBool, 0); }
		public ITerminalNode KByte() { return GetToken(MetaGeneratorParser.KByte, 0); }
		public ITerminalNode KChar() { return GetToken(MetaGeneratorParser.KChar, 0); }
		public ITerminalNode KDecimal() { return GetToken(MetaGeneratorParser.KDecimal, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaGeneratorParser.KDouble, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaGeneratorParser.KFloat, 0); }
		public ITerminalNode KInt() { return GetToken(MetaGeneratorParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaGeneratorParser.KLong, 0); }
		public ITerminalNode KObject() { return GetToken(MetaGeneratorParser.KObject, 0); }
		public ITerminalNode KSByte() { return GetToken(MetaGeneratorParser.KSByte, 0); }
		public ITerminalNode KShort() { return GetToken(MetaGeneratorParser.KShort, 0); }
		public ITerminalNode KString() { return GetToken(MetaGeneratorParser.KString, 0); }
		public ITerminalNode KUInt() { return GetToken(MetaGeneratorParser.KUInt, 0); }
		public ITerminalNode KULong() { return GetToken(MetaGeneratorParser.KULong, 0); }
		public ITerminalNode KUShort() { return GetToken(MetaGeneratorParser.KUShort, 0); }
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceListContext : ParserRuleContext {
		public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public TypeReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReferenceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeReferenceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeReferenceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceListContext typeReferenceList() {
		TypeReferenceListContext _localctx = new TypeReferenceListContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_typeReferenceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; typeReference();
			State = 685;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 681; Match(TComma);
				State = 682; typeReference();
				}
				}
				State = 687;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_typeReference);
		try {
			State = 692;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 688; arrayType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 689; nullableType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 690; genericType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 691; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ArrayItemTypeContext arrayItemType() {
			return GetRuleContext<ArrayItemTypeContext>(0);
		}
		public RankSpecifiersContext rankSpecifiers() {
			return GetRuleContext<RankSpecifiersContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; arrayItemType();
			State = 695; rankSpecifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayItemTypeContext : ParserRuleContext {
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ArrayItemTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayItemType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterArrayItemType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitArrayItemType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayItemType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayItemTypeContext arrayItemType() {
		ArrayItemTypeContext _localctx = new ArrayItemTypeContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_arrayItemType);
		try {
			State = 700;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 697; nullableType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 698; genericType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 699; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public NullableItemTypeContext nullableItemType() {
			return GetRuleContext<NullableItemTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702; nullableItemType();
			State = 703; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableItemTypeContext : ParserRuleContext {
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public NullableItemTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableItemType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullableItemType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullableItemType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableItemType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableItemTypeContext nullableItemType() {
		NullableItemTypeContext _localctx = new NullableItemTypeContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_nullableItemType);
		try {
			State = 707;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 705; genericType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 706; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_genericType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709; qualifiedName();
			State = 710; typeArgumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_simpleType);
		try {
			State = 714;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712; qualifiedName();
				}
				break;
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
				EnterOuterAlt(_localctx, 2);
				{
				State = 713; predefinedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_returnType);
		try {
			State = 720;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 718; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 719; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722; expression(0);
			State = 727;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 723; Match(TComma);
				State = 724; expression(0);
				}
				}
				State = 729;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifiersContext : ParserRuleContext {
		public RankSpecifierContext[] rankSpecifier() {
			return GetRuleContexts<RankSpecifierContext>();
		}
		public RankSpecifierContext rankSpecifier(int i) {
			return GetRuleContext<RankSpecifierContext>(i);
		}
		public RankSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRankSpecifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRankSpecifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifiersContext rankSpecifiers() {
		RankSpecifiersContext _localctx = new RankSpecifiersContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_rankSpecifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 732; rankSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 735;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,57,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifierContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public RankSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRankSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRankSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifierContext rankSpecifier() {
		RankSpecifierContext _localctx = new RankSpecifierContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_rankSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737; Match(TOpenBracket);
			State = 741;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 738; Match(TComma);
				}
				}
				State = 743;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 744; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnboundTypeNameContext : ParserRuleContext {
		public GenericDimensionItemContext[] genericDimensionItem() {
			return GetRuleContexts<GenericDimensionItemContext>();
		}
		public GenericDimensionItemContext genericDimensionItem(int i) {
			return GetRuleContext<GenericDimensionItemContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public UnboundTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unboundTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUnboundTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUnboundTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnboundTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnboundTypeNameContext unboundTypeName() {
		UnboundTypeNameContext _localctx = new UnboundTypeNameContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_unboundTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746; genericDimensionItem();
			State = 751;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TDot) {
				{
				{
				State = 747; Match(TDot);
				State = 748; genericDimensionItem();
				}
				}
				State = 753;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDimensionItemContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GenericDimensionSpecifierContext genericDimensionSpecifier() {
			return GetRuleContext<GenericDimensionSpecifierContext>(0);
		}
		public GenericDimensionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDimensionItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericDimensionItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericDimensionItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericDimensionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericDimensionItemContext genericDimensionItem() {
		GenericDimensionItemContext _localctx = new GenericDimensionItemContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_genericDimensionItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754; identifier();
			State = 756;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TLessThan) {
				{
				State = 755; genericDimensionSpecifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDimensionSpecifierContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public GenericDimensionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDimensionSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericDimensionSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericDimensionSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericDimensionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericDimensionSpecifierContext genericDimensionSpecifier() {
		GenericDimensionSpecifierContext _localctx = new GenericDimensionSpecifierContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_genericDimensionSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; Match(TLessThan);
			State = 762;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 759; Match(TComma);
				}
				}
				State = 764;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 765; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionSignatureContext : ParserRuleContext {
		public AnonymousFunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionSignature; } }
	 
		public AnonymousFunctionSignatureContext() { }
		public virtual void CopyFrom(AnonymousFunctionSignatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExplicitParameterContext[] explicitParameter() {
			return GetRuleContexts<ExplicitParameterContext>();
		}
		public ExplicitParameterContext explicitParameter(int i) {
			return GetRuleContext<ExplicitParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ImplicitParameterContext[] implicitParameter() {
			return GetRuleContexts<ImplicitParameterContext>();
		}
		public ImplicitParameterContext implicitParameter(int i) {
			return GetRuleContext<ImplicitParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ImplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterImplicitAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitImplicitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleParamAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ImplicitParameterContext implicitParameter() {
			return GetRuleContext<ImplicitParameterContext>(0);
		}
		public SingleParamAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSingleParamAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSingleParamAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleParamAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
		AnonymousFunctionSignatureContext _localctx = new AnonymousFunctionSignatureContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_anonymousFunctionSignature);
		int _la;
		try {
			State = 792;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				_localctx = new ExplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 767; Match(TOpenParenthesis);
				State = 776;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					State = 768; explicitParameter();
					State = 773;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==TComma) {
						{
						{
						State = 769; Match(TComma);
						State = 770; explicitParameter();
						}
						}
						State = 775;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 778; Match(TCloseParenthesis);
				}
				break;

			case 2:
				_localctx = new ImplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 779; Match(TOpenParenthesis);
				State = 788;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IdentifierNormal) {
					{
					State = 780; implicitParameter();
					State = 785;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==TComma) {
						{
						{
						State = 781; Match(TComma);
						State = 782; implicitParameter();
						}
						}
						State = 787;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 790; Match(TCloseParenthesis);
				}
				break;

			case 3:
				_localctx = new SingleParamAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 791; implicitParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExplicitParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExplicitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitParameterContext explicitParameter() {
		ExplicitParameterContext _localctx = new ExplicitParameterContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_explicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794; typeReference();
			State = 795; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterImplicitParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitImplicitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitParameterContext implicitParameter() {
		ImplicitParameterContext _localctx = new ImplicitParameterContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_implicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ITerminalNode KThis() { return GetToken(MetaGeneratorParser.KThis, 0); }
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofVoidExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofVoidExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofVoidExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofVoidExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofVoidExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofUnboundTypeExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public UnboundTypeNameContext unboundTypeName() {
			return GetRuleContext<UnboundTypeNameContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofUnboundTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofUnboundTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofUnboundTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofUnboundTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofTypeExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultValueExpressionContext : ExpressionContext {
		public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public DefaultValueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectOrCollectionWithConstructorExpressionContext : ExpressionContext {
		public ITerminalNode KNew() { return GetToken(MetaGeneratorParser.KNew, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public NewObjectOrCollectionWithConstructorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNewObjectOrCollectionWithConstructorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNewObjectOrCollectionWithConstructorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectOrCollectionWithConstructorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HasLoopExpressionContext : ExpressionContext {
		public ITerminalNode KHasLoop() { return GetToken(MetaGeneratorParser.KHasLoop, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		public HasLoopExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterHasLoopExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitHasLoopExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		public ElementAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElementAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElementAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefinedTypeMemberAccessExpressionContext : ExpressionContext {
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public PredefinedTypeMemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPredefinedTypeMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPredefinedTypeMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedTypeMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecastExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypecastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypecastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypecastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		public ITerminalNode TExclamation() { return GetToken(MetaGeneratorParser.TExclamation, 0); }
		public ITerminalNode TTilde() { return GetToken(MetaGeneratorParser.TTilde, 0); }
		public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public PostExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPostExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPostExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAsterisk() { return GetToken(MetaGeneratorParser.TAsterisk, 0); }
		public ITerminalNode TSlash() { return GetToken(MetaGeneratorParser.TSlash, 0); }
		public ITerminalNode TPercent() { return GetToken(MetaGeneratorParser.TPercent, 0); }
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public ITerminalNode TLessThanOrEquals() { return GetToken(MetaGeneratorParser.TLessThanOrEquals, 0); }
		public ITerminalNode TGreaterThanOrEquals() { return GetToken(MetaGeneratorParser.TGreaterThanOrEquals, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecheckExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		public TypecheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypecheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypecheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TEquals() { return GetToken(MetaGeneratorParser.TEquals, 0); }
		public ITerminalNode TNotEquals() { return GetToken(MetaGeneratorParser.TNotEquals, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TAmp() { return GetToken(MetaGeneratorParser.TAmp, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseXorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode THat() { return GetToken(MetaGeneratorParser.THat, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TPipe() { return GetToken(MetaGeneratorParser.TPipe, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TAnd() { return GetToken(MetaGeneratorParser.TAnd, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalXorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TXor() { return GetToken(MetaGeneratorParser.TXor, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TOr() { return GetToken(MetaGeneratorParser.TOr, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext thenBranch;
		public ExpressionContext elseBranch;
		public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ITerminalNode TAssignPlus() { return GetToken(MetaGeneratorParser.TAssignPlus, 0); }
		public ITerminalNode TAssignMinus() { return GetToken(MetaGeneratorParser.TAssignMinus, 0); }
		public ITerminalNode TAssignAsterisk() { return GetToken(MetaGeneratorParser.TAssignAsterisk, 0); }
		public ITerminalNode TAssignSlash() { return GetToken(MetaGeneratorParser.TAssignSlash, 0); }
		public ITerminalNode TAssignPercent() { return GetToken(MetaGeneratorParser.TAssignPercent, 0); }
		public ITerminalNode TAssignAmp() { return GetToken(MetaGeneratorParser.TAssignAmp, 0); }
		public ITerminalNode TAssignPipe() { return GetToken(MetaGeneratorParser.TAssignPipe, 0); }
		public ITerminalNode TAssignHat() { return GetToken(MetaGeneratorParser.TAssignHat, 0); }
		public ITerminalNode TAssignLeftShift() { return GetToken(MetaGeneratorParser.TAssignLeftShift, 0); }
		public ITerminalNode TAssignRightShift() { return GetToken(MetaGeneratorParser.TAssignRightShift, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
			return GetRuleContext<AnonymousFunctionSignatureContext>(0);
		}
		public ITerminalNode TArrow() { return GetToken(MetaGeneratorParser.TArrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 186;
		EnterRecursionRule(_localctx, 186, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				_localctx = new ThisExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 800; Match(KThis);
				}
				break;

			case 2:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 801; literal();
				}
				break;

			case 3:
				{
				_localctx = new TypeofVoidExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 802; Match(KTypeof);
				State = 803; Match(TOpenParenthesis);
				State = 804; Match(KVoid);
				State = 805; Match(TCloseParenthesis);
				}
				break;

			case 4:
				{
				_localctx = new TypeofUnboundTypeExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 806; Match(KTypeof);
				State = 807; Match(TOpenParenthesis);
				State = 808; unboundTypeName();
				State = 809; Match(TCloseParenthesis);
				}
				break;

			case 5:
				{
				_localctx = new TypeofTypeExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 811; Match(KTypeof);
				State = 812; Match(TOpenParenthesis);
				State = 813; typeReference();
				State = 814; Match(TCloseParenthesis);
				}
				break;

			case 6:
				{
				_localctx = new DefaultValueExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 816; Match(KDefault);
				State = 817; Match(TOpenParenthesis);
				State = 818; typeReference();
				State = 819; Match(TCloseParenthesis);
				}
				break;

			case 7:
				{
				_localctx = new NewObjectOrCollectionWithConstructorExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 821; Match(KNew);
				State = 822; typeReference();
				State = 823; Match(TOpenParenthesis);
				State = 825;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
					{
					State = 824; expressionList();
					}
				}

				State = 827; Match(TCloseParenthesis);
				}
				break;

			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 829; identifier();
				State = 831;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					State = 830; typeArgumentList();
					}
					break;
				}
				}
				break;

			case 9:
				{
				_localctx = new HasLoopExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 833; Match(KHasLoop);
				State = 834; Match(TOpenParenthesis);
				State = 835; loopChain();
				State = 837;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==KWhere) {
					{
					State = 836; loopWhereExpression();
					}
				}

				State = 839; Match(TCloseParenthesis);
				}
				break;

			case 10:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 841; Match(TOpenParenthesis);
				State = 842; expression(0);
				State = 843; Match(TCloseParenthesis);
				}
				break;

			case 11:
				{
				_localctx = new PredefinedTypeMemberAccessExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 845; predefinedType();
				State = 846; Match(TDot);
				State = 847; identifier();
				State = 849;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					State = 848; typeArgumentList();
					}
					break;
				}
				}
				break;

			case 12:
				{
				_localctx = new TypecastExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 851; Match(TOpenParenthesis);
				State = 852; typeReference();
				State = 853; Match(TCloseParenthesis);
				State = 854; expression(17);
				}
				break;

			case 13:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 856;
				((UnaryExpressionContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (TPlus - 83)) | (1L << (TMinus - 83)) | (1L << (TExclamation - 83)) | (1L << (TTilde - 83)) | (1L << (TPlusPlus - 83)) | (1L << (TMinusMinus - 83)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 857; expression(16);
				}
				break;

			case 14:
				{
				_localctx = new LambdaExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 858; anonymousFunctionSignature();
				State = 859; Match(TArrow);
				State = 860; expression(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 927;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,75,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 925;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicationExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 864;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 865;
						((MultiplicationExpressionContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (TAsterisk - 87)) | (1L << (TSlash - 87)) | (1L << (TPercent - 87)))) != 0)) ) {
							((MultiplicationExpressionContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 866; ((MultiplicationExpressionContext)_localctx).right = expression(15);
						}
						break;

					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditionExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 867;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 868;
						((AdditionExpressionContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==TPlus || _la==TMinus) ) {
							((AdditionExpressionContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 869; ((AdditionExpressionContext)_localctx).right = expression(14);
						}
						break;

					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 870;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 871;
						((RelationalExpressionContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (TLessThan - 78)) | (1L << (TGreaterThan - 78)) | (1L << (TLessThanOrEquals - 78)) | (1L << (TGreaterThanOrEquals - 78)))) != 0)) ) {
							((RelationalExpressionContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 872; ((RelationalExpressionContext)_localctx).right = expression(13);
						}
						break;

					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 873;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 874;
						((EqualityExpressionContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==TEquals || _la==TNotEquals) ) {
							((EqualityExpressionContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 875; ((EqualityExpressionContext)_localctx).right = expression(11);
						}
						break;

					case 5:
						{
						_localctx = new BitwiseAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 876;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 877; Match(TAmp);
						State = 878; ((BitwiseAndExpressionContext)_localctx).right = expression(10);
						}
						break;

					case 6:
						{
						_localctx = new BitwiseXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseXorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 879;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 880; Match(THat);
						State = 881; ((BitwiseXorExpressionContext)_localctx).right = expression(9);
						}
						break;

					case 7:
						{
						_localctx = new BitwiseOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 882;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 883; Match(TPipe);
						State = 884; ((BitwiseOrExpressionContext)_localctx).right = expression(8);
						}
						break;

					case 8:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 885;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 886; Match(TAnd);
						State = 887; ((LogicalAndExpressionContext)_localctx).right = expression(7);
						}
						break;

					case 9:
						{
						_localctx = new LogicalXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalXorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 888;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 889; Match(TXor);
						State = 890; ((LogicalXorExpressionContext)_localctx).right = expression(6);
						}
						break;

					case 10:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 891;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 892; Match(TOr);
						State = 893; ((LogicalOrExpressionContext)_localctx).right = expression(5);
						}
						break;

					case 11:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ConditionalExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 894;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 895; Match(TQuestion);
						State = 896; ((ConditionalExpressionContext)_localctx).thenBranch = expression(0);
						State = 897; Match(TColon);
						State = 898; ((ConditionalExpressionContext)_localctx).elseBranch = expression(4);
						}
						break;

					case 12:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 900;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 901;
						((AssignmentExpressionContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (TAssign - 57)) | (1L << (TAssignPlus - 57)) | (1L << (TAssignMinus - 57)) | (1L << (TAssignAsterisk - 57)) | (1L << (TAssignSlash - 57)) | (1L << (TAssignPercent - 57)) | (1L << (TAssignAmp - 57)) | (1L << (TAssignPipe - 57)) | (1L << (TAssignHat - 57)) | (1L << (TAssignLeftShift - 57)) | (1L << (TAssignRightShift - 57)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 902; ((AssignmentExpressionContext)_localctx).right = expression(3);
						}
						break;

					case 13:
						{
						_localctx = new ElementAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 903;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 904; Match(TOpenBracket);
						State = 905; expressionList();
						State = 906; Match(TCloseBracket);
						}
						break;

					case 14:
						{
						_localctx = new FunctionCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 908;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 909; Match(TOpenParenthesis);
						State = 911;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
							{
							State = 910; expressionList();
							}
						}

						State = 913; Match(TCloseParenthesis);
						}
						break;

					case 15:
						{
						_localctx = new MemberAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 914;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 915; Match(TDot);
						State = 916; identifier();
						State = 918;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
						case 1:
							{
							State = 917; typeArgumentList();
							}
							break;
						}
						}
						break;

					case 16:
						{
						_localctx = new PostExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 920;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 921;
						((PostExpressionContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
							((PostExpressionContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 17:
						{
						_localctx = new TypecheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypecheckExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 922;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 923;
						((TypecheckExpressionContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==KIs || _la==KAs) ) {
							((TypecheckExpressionContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 924; typeReference();
						}
						break;
					}
					} 
				}
				State = 929;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,75,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 930; identifier();
			State = 935;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 931; Match(TDot);
					State = 932; identifier();
					}
					} 
				}
				State = 937;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938; identifier();
			State = 943;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 939; Match(TComma);
				State = 940; identifier();
				}
				}
				State = 945;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaGeneratorParser.IdentifierNormal, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946; Match(IdentifierNormal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public DateOrTimeLiteralContext dateOrTimeLiteral() {
			return GetRuleContext<DateOrTimeLiteralContext>(0);
		}
		public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public GuidLiteralContext guidLiteral() {
			return GetRuleContext<GuidLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_literal);
		try {
			State = 955;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 948; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 949; booleanLiteral();
				}
				break;
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 950; numberLiteral();
				}
				break;
			case DateTimeOffsetLiteral:
			case DateTimeLiteral:
			case DateLiteral:
			case TimeLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 951; dateOrTimeLiteral();
				}
				break;
			case CharLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 952; charLiteral();
				}
				break;
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 953; stringLiteral();
				}
				break;
			case GuidLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 954; guidLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaGeneratorParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaGeneratorParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaGeneratorParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959;
			_la = _input.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_numberLiteral);
		try {
			State = 964;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 961; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 962; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 963; scientificLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(MetaGeneratorParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(MetaGeneratorParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(MetaGeneratorParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateOrTimeLiteralContext : ParserRuleContext {
		public DateTimeLiteralContext dateTimeLiteral() {
			return GetRuleContext<DateTimeLiteralContext>(0);
		}
		public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
			return GetRuleContext<DateTimeOffsetLiteralContext>(0);
		}
		public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		public TimeLiteralContext timeLiteral() {
			return GetRuleContext<TimeLiteralContext>(0);
		}
		public DateOrTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateOrTimeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateOrTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateOrTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateOrTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateOrTimeLiteralContext dateOrTimeLiteral() {
		DateOrTimeLiteralContext _localctx = new DateOrTimeLiteralContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_dateOrTimeLiteral);
		try {
			State = 976;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DateTimeLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 972; dateTimeLiteral();
				}
				break;
			case DateTimeOffsetLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 973; dateTimeOffsetLiteral();
				}
				break;
			case DateLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 974; dateLiteral();
				}
				break;
			case TimeLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 975; timeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeOffsetLiteralContext : ParserRuleContext {
		public ITerminalNode DateTimeOffsetLiteral() { return GetToken(MetaGeneratorParser.DateTimeOffsetLiteral, 0); }
		public DateTimeOffsetLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeOffsetLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateTimeOffsetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateTimeOffsetLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeOffsetLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
		DateTimeOffsetLiteralContext _localctx = new DateTimeOffsetLiteralContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_dateTimeOffsetLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978; Match(DateTimeOffsetLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeLiteralContext : ParserRuleContext {
		public ITerminalNode DateTimeLiteral() { return GetToken(MetaGeneratorParser.DateTimeLiteral, 0); }
		public DateTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeLiteralContext dateTimeLiteral() {
		DateTimeLiteralContext _localctx = new DateTimeLiteralContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_dateTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 980; Match(DateTimeLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		public ITerminalNode DateLiteral() { return GetToken(MetaGeneratorParser.DateLiteral, 0); }
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_dateLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982; Match(DateLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeLiteralContext : ParserRuleContext {
		public ITerminalNode TimeLiteral() { return GetToken(MetaGeneratorParser.TimeLiteral, 0); }
		public TimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeLiteralContext timeLiteral() {
		TimeLiteralContext _localctx = new TimeLiteralContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_timeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984; Match(TimeLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		public ITerminalNode CharLiteral() { return GetToken(MetaGeneratorParser.CharLiteral, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterCharLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitCharLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_charLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 986; Match(CharLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(MetaGeneratorParser.RegularStringLiteral, 0); }
		public ITerminalNode DoubleQuoteVerbatimStringLiteral() { return GetToken(MetaGeneratorParser.DoubleQuoteVerbatimStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			_la = _input.La(1);
			if ( !(_la==RegularStringLiteral || _la==DoubleQuoteVerbatimStringLiteral) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidLiteralContext : ParserRuleContext {
		public ITerminalNode GuidLiteral() { return GetToken(MetaGeneratorParser.GuidLiteral, 0); }
		public GuidLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guidLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGuidLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGuidLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuidLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuidLiteralContext guidLiteral() {
		GuidLiteralContext _localctx = new GuidLiteralContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_guidLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 990; Match(GuidLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 46: return loopChainExpression_sempred((LoopChainExpressionContext)_localctx, predIndex);

		case 93: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool loopChainExpression_sempred(LoopChainExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 14);

		case 3: return Precpred(_ctx, 13);

		case 4: return Precpred(_ctx, 12);

		case 5: return Precpred(_ctx, 10);

		case 6: return Precpred(_ctx, 9);

		case 7: return Precpred(_ctx, 8);

		case 8: return Precpred(_ctx, 7);

		case 9: return Precpred(_ctx, 6);

		case 10: return Precpred(_ctx, 5);

		case 11: return Precpred(_ctx, 4);

		case 12: return Precpred(_ctx, 3);

		case 13: return Precpred(_ctx, 2);

		case 14: return Precpred(_ctx, 21);

		case 15: return Precpred(_ctx, 20);

		case 16: return Precpred(_ctx, 18);

		case 17: return Precpred(_ctx, 15);

		case 18: return Precpred(_ctx, 11);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x84\x3E3\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x3\x2\x3\x2\x3\x2\a\x2\xE6\n\x2\f\x2\xE\x2\xE9\v\x2\x3\x2\x5\x2\xEC"+
		"\n\x2\x3\x2\a\x2\xEF\n\x2\f\x2\xE\x2\xF2\v\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\xFE\n\x4\x3\x4\x3\x4\x5\x4"+
		"\x102\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x5\x5\x10E\n\x5\x3\x5\x3\x5\x5\x5\x112\n\x5\x3\x6\x3\x6\x5\x6\x116\n"+
		"\x6\x3\x6\a\x6\x119\n\x6\f\x6\xE\x6\x11C\v\x6\x3\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x5\a\x125\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\a\x12C\n\a\f\a\xE"+
		"\a\x12F\v\a\x3\a\x3\a\x3\a\x5\a\x134\n\a\x3\b\x3\b\x3\b\x5\b\x139\n\b"+
		"\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x5\v\x147"+
		"\n\v\x3\v\x3\v\x5\v\x14B\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\a\f\x152\n\f\f\f"+
		"\xE\f\x155\v\f\x3\r\x3\r\x3\r\x3\r\x5\r\x15B\n\r\x3\xE\a\xE\x15E\n\xE"+
		"\f\xE\xE\xE\x161\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF"+
		"\x16A\n\xF\x3\x10\x3\x10\x3\x10\x5\x10\x16F\n\x10\x3\x11\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x17A\n\x13\f\x13\xE\x13"+
		"\x17D\v\x13\x3\x14\x3\x14\x3\x14\x5\x14\x182\n\x14\x3\x15\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\a\x18\x18F\n"+
		"\x18\f\x18\xE\x18\x192\v\x18\x3\x18\x5\x18\x195\n\x18\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x5 \x1B6\n \x3 \x3"+
		" \x5 \x1BA\n \x3 \x3 \x5 \x1BE\n \x3 \x3 \x3!\x3!\x3!\x3\"\x3\"\x5\"\x1C7"+
		"\n\"\x3#\x3#\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3&\x3&\x3\'\x3\'"+
		"\x3\'\x3\'\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3+\x3+\x3+\x3+\x3,\x3"+
		",\x3,\x3,\x5,\x1EC\n,\x3,\x5,\x1EF\n,\x3,\x3,\x3-\x3-\x3-\x3.\x3.\x3."+
		"\a.\x1F9\n.\f.\xE.\x1FC\v.\x3/\x5/\x1FF\n/\x3/\x3/\x3/\x5/\x204\n/\x3"+
		"/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x210"+
		"\n\x30\x5\x30\x212\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x218\n\x30"+
		"\x3\x30\x3\x30\x3\x30\x5\x30\x21D\n\x30\x3\x30\a\x30\x220\n\x30\f\x30"+
		"\xE\x30\x223\v\x30\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\a\x34\x232\n\x34\f\x34\xE\x34"+
		"\x235\v\x34\x3\x34\x5\x34\x238\n\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38"+
		"\x5\x38\x249\n\x38\x3\x39\x6\x39\x24C\n\x39\r\x39\xE\x39\x24D\x3:\x3:"+
		"\x5:\x252\n:\x3;\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3"+
		">\x3>\x3>\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41"+
		"\x270\n\x41\x3\x41\x3\x41\x3\x42\a\x42\x275\n\x42\f\x42\xE\x42\x278\v"+
		"\x42\x3\x43\a\x43\x27B\n\x43\f\x43\xE\x43\x27E\v\x43\x3\x43\x3\x43\x3"+
		"\x44\x3\x44\x5\x44\x284\n\x44\x3\x45\x3\x45\x3\x46\x3\x46\x3G\x3G\x5G"+
		"\x28C\nG\x3G\x3G\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3"+
		"H\x3H\x3H\x3H\x3H\x3H\x5H\x2A3\nH\x3I\x3I\x3I\x3I\x3J\x3J\x3K\x3K\x3K"+
		"\aK\x2AE\nK\fK\xEK\x2B1\vK\x3L\x3L\x3L\x3L\x5L\x2B7\nL\x3M\x3M\x3M\x3"+
		"N\x3N\x3N\x5N\x2BF\nN\x3O\x3O\x3O\x3P\x3P\x5P\x2C6\nP\x3Q\x3Q\x3Q\x3R"+
		"\x3R\x5R\x2CD\nR\x3S\x3S\x3T\x3T\x5T\x2D3\nT\x3U\x3U\x3U\aU\x2D8\nU\f"+
		"U\xEU\x2DB\vU\x3V\x3V\x3W\x6W\x2E0\nW\rW\xEW\x2E1\x3X\x3X\aX\x2E6\nX\f"+
		"X\xEX\x2E9\vX\x3X\x3X\x3Y\x3Y\x3Y\aY\x2F0\nY\fY\xEY\x2F3\vY\x3Z\x3Z\x5"+
		"Z\x2F7\nZ\x3[\x3[\a[\x2FB\n[\f[\xE[\x2FE\v[\x3[\x3[\x3\\\x3\\\x3\\\x3"+
		"\\\a\\\x306\n\\\f\\\xE\\\x309\v\\\x5\\\x30B\n\\\x3\\\x3\\\x3\\\x3\\\x3"+
		"\\\a\\\x312\n\\\f\\\xE\\\x315\v\\\x5\\\x317\n\\\x3\\\x3\\\x5\\\x31B\n"+
		"\\\x3]\x3]\x3]\x3^\x3^\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3"+
		"_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x5_\x33C\n_"+
		"\x3_\x3_\x3_\x3_\x5_\x342\n_\x3_\x3_\x3_\x3_\x5_\x348\n_\x3_\x3_\x3_\x3"+
		"_\x3_\x3_\x3_\x3_\x3_\x3_\x5_\x354\n_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_"+
		"\x3_\x3_\x3_\x5_\x361\n_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3"+
		"_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_"+
		"\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3"+
		"_\x5_\x392\n_\x3_\x3_\x3_\x3_\x3_\x5_\x399\n_\x3_\x3_\x3_\x3_\x3_\a_\x3A0"+
		"\n_\f_\xE_\x3A3\v_\x3`\x3`\x3`\a`\x3A8\n`\f`\xE`\x3AB\v`\x3\x61\x3\x61"+
		"\x3\x61\a\x61\x3B0\n\x61\f\x61\xE\x61\x3B3\v\x61\x3\x62\x3\x62\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x3BE\n\x63\x3\x64\x3"+
		"\x64\x3\x65\x3\x65\x3\x66\x3\x66\x3\x66\x5\x66\x3C7\n\x66\x3g\x3g\x3h"+
		"\x3h\x3i\x3i\x3j\x3j\x3j\x3j\x5j\x3D3\nj\x3k\x3k\x3l\x3l\x3m\x3m\x3n\x3"+
		"n\x3o\x3o\x3p\x3p\x3q\x3q\x3q\x2\x2\x4^\xBCr\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:"+
		"\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X"+
		"\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2"+
		"\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2"+
		"\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2"+
		"\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2"+
		"\xDE\x2\xE0\x2\x2\xE\x4\x2{{}~\x3\x2\"\x30\x4\x2UX\\]\x3\x2Y[\x3\x2UV"+
		"\x3\x2PS\x3\x2LM\x3\x2;\x45\x3\x2\\]\x3\x2\x33\x34\x3\x2 !\x4\x2ooww\x402"+
		"\x2\xE2\x3\x2\x2\x2\x4\xF5\x3\x2\x2\x2\x6\xF9\x3\x2\x2\x2\b\x111\x3\x2"+
		"\x2\x2\n\x113\x3\x2\x2\x2\f\x133\x3\x2\x2\x2\xE\x138\x3\x2\x2\x2\x10\x13A"+
		"\x3\x2\x2\x2\x12\x13D\x3\x2\x2\x2\x14\x142\x3\x2\x2\x2\x16\x14E\x3\x2"+
		"\x2\x2\x18\x156\x3\x2\x2\x2\x1A\x15F\x3\x2\x2\x2\x1C\x169\x3\x2\x2\x2"+
		"\x1E\x16E\x3\x2\x2\x2 \x170\x3\x2\x2\x2\"\x173\x3\x2\x2\x2$\x175\x3\x2"+
		"\x2\x2&\x17E\x3\x2\x2\x2(\x183\x3\x2\x2\x2*\x186\x3\x2\x2\x2,\x189\x3"+
		"\x2\x2\x2.\x18B\x3\x2\x2\x2\x30\x198\x3\x2\x2\x2\x32\x19B\x3\x2\x2\x2"+
		"\x34\x19E\x3\x2\x2\x2\x36\x1A3\x3\x2\x2\x2\x38\x1A9\x3\x2\x2\x2:\x1AB"+
		"\x3\x2\x2\x2<\x1AE\x3\x2\x2\x2>\x1B2\x3\x2\x2\x2@\x1C1\x3\x2\x2\x2\x42"+
		"\x1C6\x3\x2\x2\x2\x44\x1C8\x3\x2\x2\x2\x46\x1CC\x3\x2\x2\x2H\x1D1\x3\x2"+
		"\x2\x2J\x1D4\x3\x2\x2\x2L\x1D6\x3\x2\x2\x2N\x1DA\x3\x2\x2\x2P\x1DC\x3"+
		"\x2\x2\x2R\x1E1\x3\x2\x2\x2T\x1E3\x3\x2\x2\x2V\x1E7\x3\x2\x2\x2X\x1F2"+
		"\x3\x2\x2\x2Z\x1F5\x3\x2\x2\x2\\\x203\x3\x2\x2\x2^\x211\x3\x2\x2\x2`\x224"+
		"\x3\x2\x2\x2\x62\x227\x3\x2\x2\x2\x64\x229\x3\x2\x2\x2\x66\x22F\x3\x2"+
		"\x2\x2h\x23B\x3\x2\x2\x2j\x240\x3\x2\x2\x2l\x243\x3\x2\x2\x2n\x248\x3"+
		"\x2\x2\x2p\x24B\x3\x2\x2\x2r\x251\x3\x2\x2\x2t\x253\x3\x2\x2\x2v\x257"+
		"\x3\x2\x2\x2x\x25C\x3\x2\x2\x2z\x261\x3\x2\x2\x2|\x264\x3\x2\x2\x2~\x267"+
		"\x3\x2\x2\x2\x80\x26B\x3\x2\x2\x2\x82\x276\x3\x2\x2\x2\x84\x27C\x3\x2"+
		"\x2\x2\x86\x283\x3\x2\x2\x2\x88\x285\x3\x2\x2\x2\x8A\x287\x3\x2\x2\x2"+
		"\x8C\x289\x3\x2\x2\x2\x8E\x2A2\x3\x2\x2\x2\x90\x2A4\x3\x2\x2\x2\x92\x2A8"+
		"\x3\x2\x2\x2\x94\x2AA\x3\x2\x2\x2\x96\x2B6\x3\x2\x2\x2\x98\x2B8\x3\x2"+
		"\x2\x2\x9A\x2BE\x3\x2\x2\x2\x9C\x2C0\x3\x2\x2\x2\x9E\x2C5\x3\x2\x2\x2"+
		"\xA0\x2C7\x3\x2\x2\x2\xA2\x2CC\x3\x2\x2\x2\xA4\x2CE\x3\x2\x2\x2\xA6\x2D2"+
		"\x3\x2\x2\x2\xA8\x2D4\x3\x2\x2\x2\xAA\x2DC\x3\x2\x2\x2\xAC\x2DF\x3\x2"+
		"\x2\x2\xAE\x2E3\x3\x2\x2\x2\xB0\x2EC\x3\x2\x2\x2\xB2\x2F4\x3\x2\x2\x2"+
		"\xB4\x2F8\x3\x2\x2\x2\xB6\x31A\x3\x2\x2\x2\xB8\x31C\x3\x2\x2\x2\xBA\x31F"+
		"\x3\x2\x2\x2\xBC\x360\x3\x2\x2\x2\xBE\x3A4\x3\x2\x2\x2\xC0\x3AC\x3\x2"+
		"\x2\x2\xC2\x3B4\x3\x2\x2\x2\xC4\x3BD\x3\x2\x2\x2\xC6\x3BF\x3\x2\x2\x2"+
		"\xC8\x3C1\x3\x2\x2\x2\xCA\x3C6\x3\x2\x2\x2\xCC\x3C8\x3\x2\x2\x2\xCE\x3CA"+
		"\x3\x2\x2\x2\xD0\x3CC\x3\x2\x2\x2\xD2\x3D2\x3\x2\x2\x2\xD4\x3D4\x3\x2"+
		"\x2\x2\xD6\x3D6\x3\x2\x2\x2\xD8\x3D8\x3\x2\x2\x2\xDA\x3DA\x3\x2\x2\x2"+
		"\xDC\x3DC\x3\x2\x2\x2\xDE\x3DE\x3\x2\x2\x2\xE0\x3E0\x3\x2\x2\x2\xE2\xE3"+
		"\x5\x4\x3\x2\xE3\xE7\x5\x6\x4\x2\xE4\xE6\x5\b\x5\x2\xE5\xE4\x3\x2\x2\x2"+
		"\xE6\xE9\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xEB\x3"+
		"\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xEA\xEC\x5\n\x6\x2\xEB\xEA\x3\x2\x2\x2\xEB"+
		"\xEC\x3\x2\x2\x2\xEC\xF0\x3\x2\x2\x2\xED\xEF\x5\xE\b\x2\xEE\xED\x3\x2"+
		"\x2\x2\xEF\xF2\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1"+
		"\xF3\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF3\xF4\a\x2\x2\x3\xF4\x3\x3\x2\x2"+
		"\x2\xF5\xF6\a\x3\x2\x2\xF6\xF7\x5\xBE`\x2\xF7\xF8\a\x37\x2\x2\xF8\x5\x3"+
		"\x2\x2\x2\xF9\xFA\a\x4\x2\x2\xFA\xFD\x5\xC2\x62\x2\xFB\xFC\a\x38\x2\x2"+
		"\xFC\xFE\x5\xBE`\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\x101\x3"+
		"\x2\x2\x2\xFF\x100\a\x11\x2\x2\x100\x102\x5\x96L\x2\x101\xFF\x3\x2\x2"+
		"\x2\x101\x102\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103\x104\a\x37\x2\x2"+
		"\x104\a\x3\x2\x2\x2\x105\x106\a\x5\x2\x2\x106\x107\x5\xBE`\x2\x107\x108"+
		"\a\x37\x2\x2\x108\x112\x3\x2\x2\x2\x109\x10A\a\x5\x2\x2\x10A\x10B\a\x4"+
		"\x2\x2\x10B\x10D\x5\xBE`\x2\x10C\x10E\x5\xC2\x62\x2\x10D\x10C\x3\x2\x2"+
		"\x2\x10D\x10E\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x110\a\x37\x2\x2"+
		"\x110\x112\x3\x2\x2\x2\x111\x105\x3\x2\x2\x2\x111\x109\x3\x2\x2\x2\x112"+
		"\t\x3\x2\x2\x2\x113\x115\a\a\x2\x2\x114\x116\x5\xC2\x62\x2\x115\x114\x3"+
		"\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x11A\x3\x2\x2\x2\x117\x119\x5\f\a"+
		"\x2\x118\x117\x3\x2\x2\x2\x119\x11C\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2"+
		"\x11A\x11B\x3\x2\x2\x2\x11B\x11D\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11D"+
		"\x11E\a\x10\x2\x2\x11E\x11F\a\a\x2\x2\x11F\v\x3\x2\x2\x2\x120\x121\x5"+
		"\x96L\x2\x121\x124\x5\xC2\x62\x2\x122\x123\a;\x2\x2\x123\x125\x5\xBC_"+
		"\x2\x124\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2"+
		"\x126\x127\a\x37\x2\x2\x127\x134\x3\x2\x2\x2\x128\x129\a\a\x2\x2\x129"+
		"\x12D\x5\xC2\x62\x2\x12A\x12C\x5\f\a\x2\x12B\x12A\x3\x2\x2\x2\x12C\x12F"+
		"\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x130\x3"+
		"\x2\x2\x2\x12F\x12D\x3\x2\x2\x2\x130\x131\a\x10\x2\x2\x131\x132\a\a\x2"+
		"\x2\x132\x134\x3\x2\x2\x2\x133\x120\x3\x2\x2\x2\x133\x128\x3\x2\x2\x2"+
		"\x134\r\x3\x2\x2\x2\x135\x139\x5\x12\n\x2\x136\x139\x5~@\x2\x137\x139"+
		"\x5\x10\t\x2\x138\x135\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x138\x137\x3"+
		"\x2\x2\x2\x139\xF\x3\x2\x2\x2\x13A\x13B\a\n\x2\x2\x13B\x13C\x5\x14\v\x2"+
		"\x13C\x11\x3\x2\x2\x2\x13D\x13E\x5\x14\v\x2\x13E\x13F\x5\x1A\xE\x2\x13F"+
		"\x140\a\x10\x2\x2\x140\x141\a\t\x2\x2\x141\x13\x3\x2\x2\x2\x142\x143\a"+
		"\t\x2\x2\x143\x144\x5\xA6T\x2\x144\x146\x5\xC2\x62\x2\x145\x147\x5\x90"+
		"I\x2\x146\x145\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2"+
		"\x148\x14A\a\x46\x2\x2\x149\x14B\x5\x16\f\x2\x14A\x149\x3\x2\x2\x2\x14A"+
		"\x14B\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14D\aG\x2\x2\x14D\x15\x3"+
		"\x2\x2\x2\x14E\x153\x5\x18\r\x2\x14F\x150\a:\x2\x2\x150\x152\x5\x18\r"+
		"\x2\x151\x14F\x3\x2\x2\x2\x152\x155\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2"+
		"\x153\x154\x3\x2\x2\x2\x154\x17\x3\x2\x2\x2\x155\x153\x3\x2\x2\x2\x156"+
		"\x157\x5\x96L\x2\x157\x15A\x5\xC2\x62\x2\x158\x159\a;\x2\x2\x159\x15B"+
		"\x5\xBC_\x2\x15A\x158\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B\x19\x3\x2"+
		"\x2\x2\x15C\x15E\x5\x1C\xF\x2\x15D\x15C\x3\x2\x2\x2\x15E\x161\x3\x2\x2"+
		"\x2\x15F\x15D\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x1B\x3\x2\x2\x2\x161"+
		"\x15F\x3\x2\x2\x2\x162\x16A\x5 \x11\x2\x163\x16A\x5.\x18\x2\x164\x16A"+
		"\x5<\x1F\x2\x165\x16A\x5\x44#\x2\x166\x16A\x5L\'\x2\x167\x16A\x5T+\x2"+
		"\x168\x16A\x5\x66\x34\x2\x169\x162\x3\x2\x2\x2\x169\x163\x3\x2\x2\x2\x169"+
		"\x164\x3\x2\x2\x2\x169\x165\x3\x2\x2\x2\x169\x166\x3\x2\x2\x2\x169\x167"+
		"\x3\x2\x2\x2\x169\x168\x3\x2\x2\x2\x16A\x1D\x3\x2\x2\x2\x16B\x16F\x5\""+
		"\x12\x2\x16C\x16F\x5*\x16\x2\x16D\x16F\x5,\x17\x2\x16E\x16B\x3\x2\x2\x2"+
		"\x16E\x16C\x3\x2\x2\x2\x16E\x16D\x3\x2\x2\x2\x16F\x1F\x3\x2\x2\x2\x170"+
		"\x171\x5\x1E\x10\x2\x171\x172\a\x37\x2\x2\x172!\x3\x2\x2\x2\x173\x174"+
		"\x5$\x13\x2\x174#\x3\x2\x2\x2\x175\x176\x5\x96L\x2\x176\x17B\x5&\x14\x2"+
		"\x177\x178\a:\x2\x2\x178\x17A\x5&\x14\x2\x179\x177\x3\x2\x2\x2\x17A\x17D"+
		"\x3\x2\x2\x2\x17B\x179\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17C%\x3\x2\x2"+
		"\x2\x17D\x17B\x3\x2\x2\x2\x17E\x181\x5\xC2\x62\x2\x17F\x180\a;\x2\x2\x180"+
		"\x182\x5\xBC_\x2\x181\x17F\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\'\x3"+
		"\x2\x2\x2\x183\x184\a\xF\x2\x2\x184\x185\x5\xBC_\x2\x185)\x3\x2\x2\x2"+
		"\x186\x187\a\v\x2\x2\x187\x188\x5\xBC_\x2\x188+\x3\x2\x2\x2\x189\x18A"+
		"\x5\xBC_\x2\x18A-\x3\x2\x2\x2\x18B\x18C\x5\x34\x1B\x2\x18C\x190\x5\x1A"+
		"\xE\x2\x18D\x18F\x5\x30\x19\x2\x18E\x18D\x3\x2\x2\x2\x18F\x192\x3\x2\x2"+
		"\x2\x190\x18E\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191\x194\x3\x2\x2\x2"+
		"\x192\x190\x3\x2\x2\x2\x193\x195\x5\x32\x1A\x2\x194\x193\x3\x2\x2\x2\x194"+
		"\x195\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x197\x5:\x1E\x2\x197/\x3"+
		"\x2\x2\x2\x198\x199\x5\x36\x1C\x2\x199\x19A\x5\x1A\xE\x2\x19A\x31\x3\x2"+
		"\x2\x2\x19B\x19C\x5\x38\x1D\x2\x19C\x19D\x5\x1A\xE\x2\x19D\x33\x3\x2\x2"+
		"\x2\x19E\x19F\a\x14\x2\x2\x19F\x1A0\a\x46\x2\x2\x1A0\x1A1\x5\xBC_\x2\x1A1"+
		"\x1A2\aG\x2\x2\x1A2\x35\x3\x2\x2\x2\x1A3\x1A4\a\x15\x2\x2\x1A4\x1A5\a"+
		"\x14\x2\x2\x1A5\x1A6\a\x46\x2\x2\x1A6\x1A7\x5\xBC_\x2\x1A7\x1A8\aG\x2"+
		"\x2\x1A8\x37\x3\x2\x2\x2\x1A9\x1AA\a\x15\x2\x2\x1AA\x39\x3\x2\x2\x2\x1AB"+
		"\x1AC\a\x10\x2\x2\x1AC\x1AD\a\x14\x2\x2\x1AD;\x3\x2\x2\x2\x1AE\x1AF\x5"+
		"> \x2\x1AF\x1B0\x5\x1A\xE\x2\x1B0\x1B1\x5@!\x2\x1B1=\x3\x2\x2\x2\x1B2"+
		"\x1B3\a\x11\x2\x2\x1B3\x1B5\a\x46\x2\x2\x1B4\x1B6\x5\x42\"\x2\x1B5\x1B4"+
		"\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B7\x3\x2\x2\x2\x1B7\x1B9\a\x37"+
		"\x2\x2\x1B8\x1BA\x5\xA8U\x2\x1B9\x1B8\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2"+
		"\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1BD\a\x37\x2\x2\x1BC\x1BE\x5\xA8U\x2\x1BD"+
		"\x1BC\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C0"+
		"\aG\x2\x2\x1C0?\x3\x2\x2\x2\x1C1\x1C2\a\x10\x2\x2\x1C2\x1C3\a\x11\x2\x2"+
		"\x1C3\x41\x3\x2\x2\x2\x1C4\x1C7\x5$\x13\x2\x1C5\x1C7\x5\xA8U\x2\x1C6\x1C4"+
		"\x3\x2\x2\x2\x1C6\x1C5\x3\x2\x2\x2\x1C7\x43\x3\x2\x2\x2\x1C8\x1C9\x5\x46"+
		"$\x2\x1C9\x1CA\x5\x1A\xE\x2\x1CA\x1CB\x5H%\x2\x1CB\x45\x3\x2\x2\x2\x1CC"+
		"\x1CD\a\x18\x2\x2\x1CD\x1CE\a\x46\x2\x2\x1CE\x1CF\x5\xBC_\x2\x1CF\x1D0"+
		"\aG\x2\x2\x1D0G\x3\x2\x2\x2\x1D1\x1D2\a\x10\x2\x2\x1D2\x1D3\a\x18\x2\x2"+
		"\x1D3I\x3\x2\x2\x2\x1D4\x1D5\x5\x64\x33\x2\x1D5K\x3\x2\x2\x2\x1D6\x1D7"+
		"\x5N(\x2\x1D7\x1D8\x5\x1A\xE\x2\x1D8\x1D9\x5P)\x2\x1D9M\x3\x2\x2\x2\x1DA"+
		"\x1DB\a\x16\x2\x2\x1DBO\x3\x2\x2\x2\x1DC\x1DD\a\x17\x2\x2\x1DD\x1DE\a"+
		"\x46\x2\x2\x1DE\x1DF\x5\xBC_\x2\x1DF\x1E0\aG\x2\x2\x1E0Q\x3\x2\x2\x2\x1E1"+
		"\x1E2\x5\x64\x33\x2\x1E2S\x3\x2\x2\x2\x1E3\x1E4\x5V,\x2\x1E4\x1E5\x5\x1A"+
		"\xE\x2\x1E5\x1E6\x5X-\x2\x1E6U\x3\x2\x2\x2\x1E7\x1E8\a\x19\x2\x2\x1E8"+
		"\x1E9\a\x46\x2\x2\x1E9\x1EB\x5Z.\x2\x1EA\x1EC\x5`\x31\x2\x1EB\x1EA\x3"+
		"\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1EE\x3\x2\x2\x2\x1ED\x1EF\x5\x62"+
		"\x32\x2\x1EE\x1ED\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2"+
		"\x2\x1F0\x1F1\aG\x2\x2\x1F1W\x3\x2\x2\x2\x1F2\x1F3\a\x10\x2\x2\x1F3\x1F4"+
		"\a\x19\x2\x2\x1F4Y\x3\x2\x2\x2\x1F5\x1FA\x5\\/\x2\x1F6\x1F7\aO\x2\x2\x1F7"+
		"\x1F9\x5\\/\x2\x1F8\x1F6\x3\x2\x2\x2\x1F9\x1FC\x3\x2\x2\x2\x1FA\x1F8\x3"+
		"\x2\x2\x2\x1FA\x1FB\x3\x2\x2\x2\x1FB[\x3\x2\x2\x2\x1FC\x1FA\x3\x2\x2\x2"+
		"\x1FD\x1FF\x5\x96L\x2\x1FE\x1FD\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF"+
		"\x200\x3\x2\x2\x2\x200\x201\x5\xC2\x62\x2\x201\x202\a\x38\x2\x2\x202\x204"+
		"\x3\x2\x2\x2\x203\x1FE\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204\x205\x3"+
		"\x2\x2\x2\x205\x206\x5^\x30\x2\x206]\x3\x2\x2\x2\x207\x208\b\x30\x1\x2"+
		"\x208\x209\a\x35\x2\x2\x209\x20A\a\x46\x2\x2\x20A\x20B\x5\x96L\x2\x20B"+
		"\x20C\aG\x2\x2\x20C\x212\x3\x2\x2\x2\x20D\x20F\x5\xC2\x62\x2\x20E\x210"+
		"\x5\x90I\x2\x20F\x20E\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x212\x3\x2"+
		"\x2\x2\x211\x207\x3\x2\x2\x2\x211\x20D\x3\x2\x2\x2\x212\x221\x3\x2\x2"+
		"\x2\x213\x214\f\x4\x2\x2\x214\x215\a\x39\x2\x2\x215\x217\x5\xC2\x62\x2"+
		"\x216\x218\x5\x90I\x2\x217\x216\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218"+
		"\x220\x3\x2\x2\x2\x219\x21A\f\x3\x2\x2\x21A\x21C\a\x46\x2\x2\x21B\x21D"+
		"\x5\xA8U\x2\x21C\x21B\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x21E\x3\x2"+
		"\x2\x2\x21E\x220\aG\x2\x2\x21F\x213\x3\x2\x2\x2\x21F\x219\x3\x2\x2\x2"+
		"\x220\x223\x3\x2\x2\x2\x221\x21F\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2\x222"+
		"_\x3\x2\x2\x2\x223\x221\x3\x2\x2\x2\x224\x225\a\x1B\x2\x2\x225\x226\x5"+
		"\xBC_\x2\x226\x61\x3\x2\x2\x2\x227\x228\x5\x64\x33\x2\x228\x63\x3\x2\x2"+
		"\x2\x229\x22A\a\x37\x2\x2\x22A\x22B\a\x1E\x2\x2\x22B\x22C\x5\xC2\x62\x2"+
		"\x22C\x22D\a;\x2\x2\x22D\x22E\x5\xDEp\x2\x22E\x65\x3\x2\x2\x2\x22F\x233"+
		"\x5h\x35\x2\x230\x232\x5l\x37\x2\x231\x230\x3\x2\x2\x2\x232\x235\x3\x2"+
		"\x2\x2\x233\x231\x3\x2\x2\x2\x233\x234\x3\x2\x2\x2\x234\x237\x3\x2\x2"+
		"\x2\x235\x233\x3\x2\x2\x2\x236\x238\x5z>\x2\x237\x236\x3\x2\x2\x2\x237"+
		"\x238\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x23A\x5j\x36\x2\x23Ag\x3"+
		"\x2\x2\x2\x23B\x23C\a\f\x2\x2\x23C\x23D\a\x46\x2\x2\x23D\x23E\x5\xBC_"+
		"\x2\x23E\x23F\aG\x2\x2\x23Fi\x3\x2\x2\x2\x240\x241\a\x10\x2\x2\x241\x242"+
		"\a\f\x2\x2\x242k\x3\x2\x2\x2\x243\x244\x5n\x38\x2\x244\x245\x5\x1A\xE"+
		"\x2\x245m\x3\x2\x2\x2\x246\x249\x5p\x39\x2\x247\x249\x5x=\x2\x248\x246"+
		"\x3\x2\x2\x2\x248\x247\x3\x2\x2\x2\x249o\x3\x2\x2\x2\x24A\x24C\x5r:\x2"+
		"\x24B\x24A\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x24B\x3\x2\x2\x2\x24D"+
		"\x24E\x3\x2\x2\x2\x24Eq\x3\x2\x2\x2\x24F\x252\x5t;\x2\x250\x252\x5v<\x2"+
		"\x251\x24F\x3\x2\x2\x2\x251\x250\x3\x2\x2\x2\x252s\x3\x2\x2\x2\x253\x254"+
		"\a\r\x2\x2\x254\x255\x5\xA8U\x2\x255\x256\a\x38\x2\x2\x256u\x3\x2\x2\x2"+
		"\x257\x258\a\xE\x2\x2\x258\x259\a\x33\x2\x2\x259\x25A\x5\x94K\x2\x25A"+
		"\x25B\a\x38\x2\x2\x25Bw\x3\x2\x2\x2\x25C\x25D\a\xE\x2\x2\x25D\x25E\a\x34"+
		"\x2\x2\x25E\x25F\x5\x96L\x2\x25F\x260\a\x38\x2\x2\x260y\x3\x2\x2\x2\x261"+
		"\x262\x5|?\x2\x262\x263\x5\x1A\xE\x2\x263{\x3\x2\x2\x2\x264\x265\a\x36"+
		"\x2\x2\x265\x266\a\x38\x2\x2\x266}\x3\x2\x2\x2\x267\x268\x5\x80\x41\x2"+
		"\x268\x269\x5\x82\x42\x2\x269\x26A\az\x2\x2\x26A\x7F\x3\x2\x2\x2\x26B"+
		"\x26C\a\b\x2\x2\x26C\x26D\x5\xC2\x62\x2\x26D\x26F\a\x46\x2\x2\x26E\x270"+
		"\x5\x16\f\x2\x26F\x26E\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x271\x3"+
		"\x2\x2\x2\x271\x272\aG\x2\x2\x272\x81\x3\x2\x2\x2\x273\x275\x5\x84\x43"+
		"\x2\x274\x273\x3\x2\x2\x2\x275\x278\x3\x2\x2\x2\x276\x274\x3\x2\x2\x2"+
		"\x276\x277\x3\x2\x2\x2\x277\x83\x3\x2\x2\x2\x278\x276\x3\x2\x2\x2\x279"+
		"\x27B\x5\x86\x44\x2\x27A\x279\x3\x2\x2\x2\x27B\x27E\x3\x2\x2\x2\x27C\x27A"+
		"\x3\x2\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D\x27F\x3\x2\x2\x2\x27E\x27C\x3"+
		"\x2\x2\x2\x27F\x280\x5\x8A\x46\x2\x280\x85\x3\x2\x2\x2\x281\x284\x5\x88"+
		"\x45\x2\x282\x284\x5\x8CG\x2\x283\x281\x3\x2\x2\x2\x283\x282\x3\x2\x2"+
		"\x2\x284\x87\x3\x2\x2\x2\x285\x286\a|\x2\x2\x286\x89\x3\x2\x2\x2\x287"+
		"\x288\t\x2\x2\x2\x288\x8B\x3\x2\x2\x2\x289\x28B\a\x7F\x2\x2\x28A\x28C"+
		"\x5\x8EH\x2\x28B\x28A\x3\x2\x2\x2\x28B\x28C\x3\x2\x2\x2\x28C\x28D\x3\x2"+
		"\x2\x2\x28D\x28E\a\x80\x2\x2\x28E\x8D\x3\x2\x2\x2\x28F\x2A3\x5(\x15\x2"+
		"\x290\x2A3\x5\"\x12\x2\x291\x2A3\x5,\x17\x2\x292\x2A3\x5\x34\x1B\x2\x293"+
		"\x2A3\x5\x36\x1C\x2\x294\x2A3\x5\x38\x1D\x2\x295\x2A3\x5:\x1E\x2\x296"+
		"\x2A3\x5> \x2\x297\x2A3\x5@!\x2\x298\x2A3\x5\x46$\x2\x299\x2A3\x5H%\x2"+
		"\x29A\x2A3\x5N(\x2\x29B\x2A3\x5P)\x2\x29C\x2A3\x5V,\x2\x29D\x2A3\x5X-"+
		"\x2\x29E\x2A3\x5h\x35\x2\x29F\x2A3\x5j\x36\x2\x2A0\x2A3\x5n\x38\x2\x2A1"+
		"\x2A3\x5|?\x2\x2A2\x28F\x3\x2\x2\x2\x2A2\x290\x3\x2\x2\x2\x2A2\x291\x3"+
		"\x2\x2\x2\x2A2\x292\x3\x2\x2\x2\x2A2\x293\x3\x2\x2\x2\x2A2\x294\x3\x2"+
		"\x2\x2\x2A2\x295\x3\x2\x2\x2\x2A2\x296\x3\x2\x2\x2\x2A2\x297\x3\x2\x2"+
		"\x2\x2A2\x298\x3\x2\x2\x2\x2A2\x299\x3\x2\x2\x2\x2A2\x29A\x3\x2\x2\x2"+
		"\x2A2\x29B\x3\x2\x2\x2\x2A2\x29C\x3\x2\x2\x2\x2A2\x29D\x3\x2\x2\x2\x2A2"+
		"\x29E\x3\x2\x2\x2\x2A2\x29F\x3\x2\x2\x2\x2A2\x2A0\x3\x2\x2\x2\x2A2\x2A1"+
		"\x3\x2\x2\x2\x2A3\x8F\x3\x2\x2\x2\x2A4\x2A5\aP\x2\x2\x2A5\x2A6\x5\x94"+
		"K\x2\x2A6\x2A7\aQ\x2\x2\x2A7\x91\x3\x2\x2\x2\x2A8\x2A9\t\x3\x2\x2\x2A9"+
		"\x93\x3\x2\x2\x2\x2AA\x2AF\x5\x96L\x2\x2AB\x2AC\a:\x2\x2\x2AC\x2AE\x5"+
		"\x96L\x2\x2AD\x2AB\x3\x2\x2\x2\x2AE\x2B1\x3\x2\x2\x2\x2AF\x2AD\x3\x2\x2"+
		"\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x95\x3\x2\x2\x2\x2B1\x2AF\x3\x2\x2\x2\x2B2"+
		"\x2B7\x5\x98M\x2\x2B3\x2B7\x5\x9CO\x2\x2B4\x2B7\x5\xA0Q\x2\x2B5\x2B7\x5"+
		"\xA2R\x2\x2B6\x2B2\x3\x2\x2\x2\x2B6\x2B3\x3\x2\x2\x2\x2B6\x2B4\x3\x2\x2"+
		"\x2\x2B6\x2B5\x3\x2\x2\x2\x2B7\x97\x3\x2\x2\x2\x2B8\x2B9\x5\x9AN\x2\x2B9"+
		"\x2BA\x5\xACW\x2\x2BA\x99\x3\x2\x2\x2\x2BB\x2BF\x5\x9CO\x2\x2BC\x2BF\x5"+
		"\xA0Q\x2\x2BD\x2BF\x5\xA2R\x2\x2BE\x2BB\x3\x2\x2\x2\x2BE\x2BC\x3\x2\x2"+
		"\x2\x2BE\x2BD\x3\x2\x2\x2\x2BF\x9B\x3\x2\x2\x2\x2C0\x2C1\x5\x9EP\x2\x2C1"+
		"\x2C2\aT\x2\x2\x2C2\x9D\x3\x2\x2\x2\x2C3\x2C6\x5\xA0Q\x2\x2C4\x2C6\x5"+
		"\xA2R\x2\x2C5\x2C3\x3\x2\x2\x2\x2C5\x2C4\x3\x2\x2\x2\x2C6\x9F\x3\x2\x2"+
		"\x2\x2C7\x2C8\x5\xBE`\x2\x2C8\x2C9\x5\x90I\x2\x2C9\xA1\x3\x2\x2\x2\x2CA"+
		"\x2CD\x5\xBE`\x2\x2CB\x2CD\x5\x92J\x2\x2CC\x2CA\x3\x2\x2\x2\x2CC\x2CB"+
		"\x3\x2\x2\x2\x2CD\xA3\x3\x2\x2\x2\x2CE\x2CF\a\xF\x2\x2\x2CF\xA5\x3\x2"+
		"\x2\x2\x2D0\x2D3\x5\x96L\x2\x2D1\x2D3\x5\xA4S\x2\x2D2\x2D0\x3\x2\x2\x2"+
		"\x2D2\x2D1\x3\x2\x2\x2\x2D3\xA7\x3\x2\x2\x2\x2D4\x2D9\x5\xBC_\x2\x2D5"+
		"\x2D6\a:\x2\x2\x2D6\x2D8\x5\xBC_\x2\x2D7\x2D5\x3\x2\x2\x2\x2D8\x2DB\x3"+
		"\x2\x2\x2\x2D9\x2D7\x3\x2\x2\x2\x2D9\x2DA\x3\x2\x2\x2\x2DA\xA9\x3\x2\x2"+
		"\x2\x2DB\x2D9\x3\x2\x2\x2\x2DC\x2DD\x5\xBC_\x2\x2DD\xAB\x3\x2\x2\x2\x2DE"+
		"\x2E0\x5\xAEX\x2\x2DF\x2DE\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1\x2DF"+
		"\x3\x2\x2\x2\x2E1\x2E2\x3\x2\x2\x2\x2E2\xAD\x3\x2\x2\x2\x2E3\x2E7\aH\x2"+
		"\x2\x2E4\x2E6\a:\x2\x2\x2E5\x2E4\x3\x2\x2\x2\x2E6\x2E9\x3\x2\x2\x2\x2E7"+
		"\x2E5\x3\x2\x2\x2\x2E7\x2E8\x3\x2\x2\x2\x2E8\x2EA\x3\x2\x2\x2\x2E9\x2E7"+
		"\x3\x2\x2\x2\x2EA\x2EB\aI\x2\x2\x2EB\xAF\x3\x2\x2\x2\x2EC\x2F1\x5\xB2"+
		"Z\x2\x2ED\x2EE\a\x39\x2\x2\x2EE\x2F0\x5\xB2Z\x2\x2EF\x2ED\x3\x2\x2\x2"+
		"\x2F0\x2F3\x3\x2\x2\x2\x2F1\x2EF\x3\x2\x2\x2\x2F1\x2F2\x3\x2\x2\x2\x2F2"+
		"\xB1\x3\x2\x2\x2\x2F3\x2F1\x3\x2\x2\x2\x2F4\x2F6\x5\xC2\x62\x2\x2F5\x2F7"+
		"\x5\xB4[\x2\x2F6\x2F5\x3\x2\x2\x2\x2F6\x2F7\x3\x2\x2\x2\x2F7\xB3\x3\x2"+
		"\x2\x2\x2F8\x2FC\aP\x2\x2\x2F9\x2FB\a:\x2\x2\x2FA\x2F9\x3\x2\x2\x2\x2FB"+
		"\x2FE\x3\x2\x2\x2\x2FC\x2FA\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD\x2FF"+
		"\x3\x2\x2\x2\x2FE\x2FC\x3\x2\x2\x2\x2FF\x300\aQ\x2\x2\x300\xB5\x3\x2\x2"+
		"\x2\x301\x30A\a\x46\x2\x2\x302\x307\x5\xB8]\x2\x303\x304\a:\x2\x2\x304"+
		"\x306\x5\xB8]\x2\x305\x303\x3\x2\x2\x2\x306\x309\x3\x2\x2\x2\x307\x305"+
		"\x3\x2\x2\x2\x307\x308\x3\x2\x2\x2\x308\x30B\x3\x2\x2\x2\x309\x307\x3"+
		"\x2\x2\x2\x30A\x302\x3\x2\x2\x2\x30A\x30B\x3\x2\x2\x2\x30B\x30C\x3\x2"+
		"\x2\x2\x30C\x31B\aG\x2\x2\x30D\x316\a\x46\x2\x2\x30E\x313\x5\xBA^\x2\x30F"+
		"\x310\a:\x2\x2\x310\x312\x5\xBA^\x2\x311\x30F\x3\x2\x2\x2\x312\x315\x3"+
		"\x2\x2\x2\x313\x311\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314\x317\x3\x2"+
		"\x2\x2\x315\x313\x3\x2\x2\x2\x316\x30E\x3\x2\x2\x2\x316\x317\x3\x2\x2"+
		"\x2\x317\x318\x3\x2\x2\x2\x318\x31B\aG\x2\x2\x319\x31B\x5\xBA^\x2\x31A"+
		"\x301\x3\x2\x2\x2\x31A\x30D\x3\x2\x2\x2\x31A\x319\x3\x2\x2\x2\x31B\xB7"+
		"\x3\x2\x2\x2\x31C\x31D\x5\x96L\x2\x31D\x31E\x5\xC2\x62\x2\x31E\xB9\x3"+
		"\x2\x2\x2\x31F\x320\x5\xC2\x62\x2\x320\xBB\x3\x2\x2\x2\x321\x322\b_\x1"+
		"\x2\x322\x361\a\x31\x2\x2\x323\x361\x5\xC4\x63\x2\x324\x325\a\x35\x2\x2"+
		"\x325\x326\a\x46\x2\x2\x326\x327\a\xF\x2\x2\x327\x361\aG\x2\x2\x328\x329"+
		"\a\x35\x2\x2\x329\x32A\a\x46\x2\x2\x32A\x32B\x5\xB0Y\x2\x32B\x32C\aG\x2"+
		"\x2\x32C\x361\x3\x2\x2\x2\x32D\x32E\a\x35\x2\x2\x32E\x32F\a\x46\x2\x2"+
		"\x32F\x330\x5\x96L\x2\x330\x331\aG\x2\x2\x331\x361\x3\x2\x2\x2\x332\x333"+
		"\a\x36\x2\x2\x333\x334\a\x46\x2\x2\x334\x335\x5\x96L\x2\x335\x336\aG\x2"+
		"\x2\x336\x361\x3\x2\x2\x2\x337\x338\a\x32\x2\x2\x338\x339\x5\x96L\x2\x339"+
		"\x33B\a\x46\x2\x2\x33A\x33C\x5\xA8U\x2\x33B\x33A\x3\x2\x2\x2\x33B\x33C"+
		"\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\x33E\aG\x2\x2\x33E\x361\x3\x2"+
		"\x2\x2\x33F\x341\x5\xC2\x62\x2\x340\x342\x5\x90I\x2\x341\x340\x3\x2\x2"+
		"\x2\x341\x342\x3\x2\x2\x2\x342\x361\x3\x2\x2\x2\x343\x344\a\x1A\x2\x2"+
		"\x344\x345\a\x46\x2\x2\x345\x347\x5Z.\x2\x346\x348\x5`\x31\x2\x347\x346"+
		"\x3\x2\x2\x2\x347\x348\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2\x349\x34A\aG"+
		"\x2\x2\x34A\x361\x3\x2\x2\x2\x34B\x34C\a\x46\x2\x2\x34C\x34D\x5\xBC_\x2"+
		"\x34D\x34E\aG\x2\x2\x34E\x361\x3\x2\x2\x2\x34F\x350\x5\x92J\x2\x350\x351"+
		"\a\x39\x2\x2\x351\x353\x5\xC2\x62\x2\x352\x354\x5\x90I\x2\x353\x352\x3"+
		"\x2\x2\x2\x353\x354\x3\x2\x2\x2\x354\x361\x3\x2\x2\x2\x355\x356\a\x46"+
		"\x2\x2\x356\x357\x5\x96L\x2\x357\x358\aG\x2\x2\x358\x359\x5\xBC_\x13\x359"+
		"\x361\x3\x2\x2\x2\x35A\x35B\t\x4\x2\x2\x35B\x361\x5\xBC_\x12\x35C\x35D"+
		"\x5\xB6\\\x2\x35D\x35E\aN\x2\x2\x35E\x35F\x5\xBC_\x3\x35F\x361\x3\x2\x2"+
		"\x2\x360\x321\x3\x2\x2\x2\x360\x323\x3\x2\x2\x2\x360\x324\x3\x2\x2\x2"+
		"\x360\x328\x3\x2\x2\x2\x360\x32D\x3\x2\x2\x2\x360\x332\x3\x2\x2\x2\x360"+
		"\x337\x3\x2\x2\x2\x360\x33F\x3\x2\x2\x2\x360\x343\x3\x2\x2\x2\x360\x34B"+
		"\x3\x2\x2\x2\x360\x34F\x3\x2\x2\x2\x360\x355\x3\x2\x2\x2\x360\x35A\x3"+
		"\x2\x2\x2\x360\x35C\x3\x2\x2\x2\x361\x3A1\x3\x2\x2\x2\x362\x363\f\x10"+
		"\x2\x2\x363\x364\t\x5\x2\x2\x364\x3A0\x5\xBC_\x11\x365\x366\f\xF\x2\x2"+
		"\x366\x367\t\x6\x2\x2\x367\x3A0\x5\xBC_\x10\x368\x369\f\xE\x2\x2\x369"+
		"\x36A\t\a\x2\x2\x36A\x3A0\x5\xBC_\xF\x36B\x36C\f\f\x2\x2\x36C\x36D\t\b"+
		"\x2\x2\x36D\x3A0\x5\xBC_\r\x36E\x36F\f\v\x2\x2\x36F\x370\a_\x2\x2\x370"+
		"\x3A0\x5\xBC_\f\x371\x372\f\n\x2\x2\x372\x373\a`\x2\x2\x373\x3A0\x5\xBC"+
		"_\v\x374\x375\f\t\x2\x2\x375\x376\a\x61\x2\x2\x376\x3A0\x5\xBC_\n\x377"+
		"\x378\f\b\x2\x2\x378\x379\a\x62\x2\x2\x379\x3A0\x5\xBC_\t\x37A\x37B\f"+
		"\a\x2\x2\x37B\x37C\a\x63\x2\x2\x37C\x3A0\x5\xBC_\b\x37D\x37E\f\x6\x2\x2"+
		"\x37E\x37F\a\x64\x2\x2\x37F\x3A0\x5\xBC_\a\x380\x381\f\x5\x2\x2\x381\x382"+
		"\aT\x2\x2\x382\x383\x5\xBC_\x2\x383\x384\a\x38\x2\x2\x384\x385\x5\xBC"+
		"_\x6\x385\x3A0\x3\x2\x2\x2\x386\x387\f\x4\x2\x2\x387\x388\t\t\x2\x2\x388"+
		"\x3A0\x5\xBC_\x5\x389\x38A\f\x17\x2\x2\x38A\x38B\aH\x2\x2\x38B\x38C\x5"+
		"\xA8U\x2\x38C\x38D\aI\x2\x2\x38D\x3A0\x3\x2\x2\x2\x38E\x38F\f\x16\x2\x2"+
		"\x38F\x391\a\x46\x2\x2\x390\x392\x5\xA8U\x2\x391\x390\x3\x2\x2\x2\x391"+
		"\x392\x3\x2\x2\x2\x392\x393\x3\x2\x2\x2\x393\x3A0\aG\x2\x2\x394\x395\f"+
		"\x14\x2\x2\x395\x396\a\x39\x2\x2\x396\x398\x5\xC2\x62\x2\x397\x399\x5"+
		"\x90I\x2\x398\x397\x3\x2\x2\x2\x398\x399\x3\x2\x2\x2\x399\x3A0\x3\x2\x2"+
		"\x2\x39A\x39B\f\x11\x2\x2\x39B\x3A0\t\n\x2\x2\x39C\x39D\f\r\x2\x2\x39D"+
		"\x39E\t\v\x2\x2\x39E\x3A0\x5\x96L\x2\x39F\x362\x3\x2\x2\x2\x39F\x365\x3"+
		"\x2\x2\x2\x39F\x368\x3\x2\x2\x2\x39F\x36B\x3\x2\x2\x2\x39F\x36E\x3\x2"+
		"\x2\x2\x39F\x371\x3\x2\x2\x2\x39F\x374\x3\x2\x2\x2\x39F\x377\x3\x2\x2"+
		"\x2\x39F\x37A\x3\x2\x2\x2\x39F\x37D\x3\x2\x2\x2\x39F\x380\x3\x2\x2\x2"+
		"\x39F\x386\x3\x2\x2\x2\x39F\x389\x3\x2\x2\x2\x39F\x38E\x3\x2\x2\x2\x39F"+
		"\x394\x3\x2\x2\x2\x39F\x39A\x3\x2\x2\x2\x39F\x39C\x3\x2\x2\x2\x3A0\x3A3"+
		"\x3\x2\x2\x2\x3A1\x39F\x3\x2\x2\x2\x3A1\x3A2\x3\x2\x2\x2\x3A2\xBD\x3\x2"+
		"\x2\x2\x3A3\x3A1\x3\x2\x2\x2\x3A4\x3A9\x5\xC2\x62\x2\x3A5\x3A6\a\x39\x2"+
		"\x2\x3A6\x3A8\x5\xC2\x62\x2\x3A7\x3A5\x3\x2\x2\x2\x3A8\x3AB\x3\x2\x2\x2"+
		"\x3A9\x3A7\x3\x2\x2\x2\x3A9\x3AA\x3\x2\x2\x2\x3AA\xBF\x3\x2\x2\x2\x3AB"+
		"\x3A9\x3\x2\x2\x2\x3AC\x3B1\x5\xC2\x62\x2\x3AD\x3AE\a:\x2\x2\x3AE\x3B0"+
		"\x5\xC2\x62\x2\x3AF\x3AD\x3\x2\x2\x2\x3B0\x3B3\x3\x2\x2\x2\x3B1\x3AF\x3"+
		"\x2\x2\x2\x3B1\x3B2\x3\x2\x2\x2\x3B2\xC1\x3\x2\x2\x2\x3B3\x3B1\x3\x2\x2"+
		"\x2\x3B4\x3B5\a\x66\x2\x2\x3B5\xC3\x3\x2\x2\x2\x3B6\x3BE\x5\xC6\x64\x2"+
		"\x3B7\x3BE\x5\xC8\x65\x2\x3B8\x3BE\x5\xCA\x66\x2\x3B9\x3BE\x5\xD2j\x2"+
		"\x3BA\x3BE\x5\xDCo\x2\x3BB\x3BE\x5\xDEp\x2\x3BC\x3BE\x5\xE0q\x2\x3BD\x3B6"+
		"\x3\x2\x2\x2\x3BD\x3B7\x3\x2\x2\x2\x3BD\x3B8\x3\x2\x2\x2\x3BD\x3B9\x3"+
		"\x2\x2\x2\x3BD\x3BA\x3\x2\x2\x2\x3BD\x3BB\x3\x2\x2\x2\x3BD\x3BC\x3\x2"+
		"\x2\x2\x3BE\xC5\x3\x2\x2\x2\x3BF\x3C0\a\x1F\x2\x2\x3C0\xC7\x3\x2\x2\x2"+
		"\x3C1\x3C2\t\f\x2\x2\x3C2\xC9\x3\x2\x2\x2\x3C3\x3C7\x5\xCCg\x2\x3C4\x3C7"+
		"\x5\xCEh\x2\x3C5\x3C7\x5\xD0i\x2\x3C6\x3C3\x3\x2\x2\x2\x3C6\x3C4\x3\x2"+
		"\x2\x2\x3C6\x3C5\x3\x2\x2\x2\x3C7\xCB\x3\x2\x2\x2\x3C8\x3C9\ag\x2\x2\x3C9"+
		"\xCD\x3\x2\x2\x2\x3CA\x3CB\ah\x2\x2\x3CB\xCF\x3\x2\x2\x2\x3CC\x3CD\ai"+
		"\x2\x2\x3CD\xD1\x3\x2\x2\x2\x3CE\x3D3\x5\xD6l\x2\x3CF\x3D3\x5\xD4k\x2"+
		"\x3D0\x3D3\x5\xD8m\x2\x3D1\x3D3\x5\xDAn\x2\x3D2\x3CE\x3\x2\x2\x2\x3D2"+
		"\x3CF\x3\x2\x2\x2\x3D2\x3D0\x3\x2\x2\x2\x3D2\x3D1\x3\x2\x2\x2\x3D3\xD3"+
		"\x3\x2\x2\x2\x3D4\x3D5\aj\x2\x2\x3D5\xD5\x3\x2\x2\x2\x3D6\x3D7\ak\x2\x2"+
		"\x3D7\xD7\x3\x2\x2\x2\x3D8\x3D9\al\x2\x2\x3D9\xD9\x3\x2\x2\x2\x3DA\x3DB"+
		"\am\x2\x2\x3DB\xDB\x3\x2\x2\x2\x3DC\x3DD\an\x2\x2\x3DD\xDD\x3\x2\x2\x2"+
		"\x3DE\x3DF\t\r\x2\x2\x3DF\xDF\x3\x2\x2\x2\x3E0\x3E1\ap\x2\x2\x3E1\xE1"+
		"\x3\x2\x2\x2S\xE7\xEB\xF0\xFD\x101\x10D\x111\x115\x11A\x124\x12D\x133"+
		"\x138\x146\x14A\x153\x15A\x15F\x169\x16E\x17B\x181\x190\x194\x1B5\x1B9"+
		"\x1BD\x1C6\x1EB\x1EE\x1FA\x1FE\x203\x20F\x211\x217\x21C\x21F\x221\x233"+
		"\x237\x248\x24D\x251\x26F\x276\x27C\x283\x28B\x2A2\x2AF\x2B6\x2BE\x2C5"+
		"\x2CC\x2D2\x2D9\x2E1\x2E7\x2F1\x2F6\x2FC\x307\x30A\x313\x316\x31A\x33B"+
		"\x341\x347\x353\x360\x391\x398\x39F\x3A1\x3A9\x3B1\x3BD\x3C6\x3D2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Languages.MetaGenerator.Syntax.InternalSyntax
