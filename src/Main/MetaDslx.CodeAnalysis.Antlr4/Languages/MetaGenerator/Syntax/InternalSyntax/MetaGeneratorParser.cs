//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Languages\MetaGenerator\Syntax\InternalSyntax\MetaGeneratorParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaGenerator.Syntax.InternalSyntax {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class MetaGeneratorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KNamespace=1, KStandalone=2, KGenerator=3, KUsing=4, KConfiguration=5, 
		KProperties=6, KTemplate=7, KFunction=8, KExtern=9, KReturn=10, KSwitch=11, 
		KCase=12, KType=13, KVoid=14, KEnd=15, KFor=16, KForEach=17, KIn=18, KIf=19, 
		KElse=20, KRepeat=21, KUntil=22, KWhile=23, KLoop=24, KHasLoop=25, KWhere=26, 
		KOrderBy=27, KDescending=28, KSeparator=29, KNull=30, KTrue=31, KFalse=32, 
		KBool=33, KByte=34, KChar=35, KDecimal=36, KDouble=37, KFloat=38, KInt=39, 
		KLong=40, KObject=41, KSByte=42, KShort=43, KString=44, KUInt=45, KULong=46, 
		KUShort=47, KThis=48, KNew=49, KIs=50, KAs=51, KTypeof=52, KDefault=53, 
		TSemicolon=54, TColon=55, TDot=56, TQuestionDot=57, TComma=58, TAssign=59, 
		TAssignPlus=60, TAssignMinus=61, TAssignAsterisk=62, TAssignSlash=63, 
		TAssignPercent=64, TAssignAmp=65, TAssignPipe=66, TAssignHat=67, TAssignLeftShift=68, 
		TAssignRightShift=69, TOpenParenthesis=70, TCloseParenthesis=71, TOpenBracket=72, 
		TCloseBracket=73, TOpenBrace=74, TCloseBrace=75, TEquals=76, TNotEquals=77, 
		TArrow=78, TSingleArrow=79, TLessThan=80, TGreaterThan=81, TLessThanOrEquals=82, 
		TGreaterThanOrEquals=83, TQuestion=84, TPlus=85, TMinus=86, TExclamation=87, 
		TTilde=88, TAsterisk=89, TSlash=90, TPercent=91, TPlusPlus=92, TMinusMinus=93, 
		TColonColon=94, TAmp=95, THat=96, TPipe=97, TAnd=98, TXor=99, TOr=100, 
		TQuestionQuestion=101, IdentifierNormal=102, LInteger=103, LDecimal=104, 
		LScientific=105, LDateTimeOffset=106, LDateTime=107, LDate=108, LTime=109, 
		LChar=110, LRegularString=111, LGuid=112, LUtf8Bom=113, LWhitespace=114, 
		LCrLf=115, LLineBreak=116, LLineComment=117, LMultiLineComment=118, LDoubleQuoteVerbatimString=119, 
		TH_TOpenParenthesis=120, TH_TCloseParenthesis=121, KEndTemplate=122, LTemplateLineControl=123, 
		LTemplateOutput=124, LTemplateCrLf=125, LTemplateLineBreak=126, TTemplateStatementStart=127, 
		TTemplateStatementEnd=128, TS_TOpenBracket=129, TS_TCloseBracket=130, 
		DoubleQuoteVerbatimStringLiteralStart=131, COMMENT_START=132;
	public const int
		RULE_main = 0, RULE_namespaceDeclaration = 1, RULE_generatorDeclaration = 2, 
		RULE_usingDeclaration = 3, RULE_configDeclaration = 4, RULE_configProperty = 5, 
		RULE_methodDeclaration = 6, RULE_externFunctionDeclaration = 7, RULE_functionDeclaration = 8, 
		RULE_functionSignature = 9, RULE_paramList = 10, RULE_parameter = 11, 
		RULE_body = 12, RULE_statement = 13, RULE_singleStatement = 14, RULE_singleStatementSemicolon = 15, 
		RULE_variableDeclarationStatement = 16, RULE_variableDeclarationExpression = 17, 
		RULE_variableDeclarationItem = 18, RULE_voidStatement = 19, RULE_returnStatement = 20, 
		RULE_expressionStatement = 21, RULE_ifStatement = 22, RULE_elseIfStatementBody = 23, 
		RULE_ifStatementElseBody = 24, RULE_ifStatementBegin = 25, RULE_elseIfStatement = 26, 
		RULE_ifStatementElse = 27, RULE_ifStatementEnd = 28, RULE_forStatement = 29, 
		RULE_forStatementBegin = 30, RULE_forStatementEnd = 31, RULE_forInitStatement = 32, 
		RULE_whileStatement = 33, RULE_whileStatementBegin = 34, RULE_whileStatementEnd = 35, 
		RULE_whileRunExpression = 36, RULE_repeatStatement = 37, RULE_repeatStatementBegin = 38, 
		RULE_repeatStatementEnd = 39, RULE_repeatRunExpression = 40, RULE_loopStatement = 41, 
		RULE_loopStatementBegin = 42, RULE_loopStatementEnd = 43, RULE_loopChain = 44, 
		RULE_loopChainItem = 45, RULE_loopChainExpression = 46, RULE_loopWhereExpression = 47, 
		RULE_loopRunExpression = 48, RULE_separatorStatement = 49, RULE_switchStatement = 50, 
		RULE_switchStatementBegin = 51, RULE_switchStatementEnd = 52, RULE_switchBranchStatement = 53, 
		RULE_switchBranchHeadStatement = 54, RULE_switchCaseOrTypeIsHeadStatements = 55, 
		RULE_switchCaseOrTypeIsHeadStatement = 56, RULE_switchCaseHeadStatement = 57, 
		RULE_switchTypeIsHeadStatement = 58, RULE_switchTypeAsHeadStatement = 59, 
		RULE_switchDefaultStatement = 60, RULE_switchDefaultHeadStatement = 61, 
		RULE_templateDeclaration = 62, RULE_templateSignature = 63, RULE_templateBody = 64, 
		RULE_templateContentLine = 65, RULE_templateContent = 66, RULE_templateOutput = 67, 
		RULE_templateLineEnd = 68, RULE_templateStatementStartEnd = 69, RULE_templateStatement = 70, 
		RULE_typeArgumentList = 71, RULE_predefinedType = 72, RULE_typeReferenceList = 73, 
		RULE_typeReference = 74, RULE_arrayType = 75, RULE_arrayItemType = 76, 
		RULE_nullableType = 77, RULE_nullableItemType = 78, RULE_genericType = 79, 
		RULE_simpleType = 80, RULE_voidType = 81, RULE_returnType = 82, RULE_expressionList = 83, 
		RULE_variableReference = 84, RULE_rankSpecifiers = 85, RULE_rankSpecifier = 86, 
		RULE_unboundTypeName = 87, RULE_genericDimensionItem = 88, RULE_genericDimensionSpecifier = 89, 
		RULE_anonymousFunctionSignature = 90, RULE_explicitParameter = 91, RULE_implicitParameter = 92, 
		RULE_expression = 93, RULE_qualifiedName = 94, RULE_identifierList = 95, 
		RULE_identifier = 96, RULE_literal = 97, RULE_nullLiteral = 98, RULE_booleanLiteral = 99, 
		RULE_numberLiteral = 100, RULE_integerLiteral = 101, RULE_decimalLiteral = 102, 
		RULE_scientificLiteral = 103, RULE_dateOrTimeLiteral = 104, RULE_dateTimeOffsetLiteral = 105, 
		RULE_dateTimeLiteral = 106, RULE_dateLiteral = 107, RULE_timeLiteral = 108, 
		RULE_charLiteral = 109, RULE_stringLiteral = 110, RULE_guidLiteral = 111;
	public static readonly string[] ruleNames = {
		"main", "namespaceDeclaration", "generatorDeclaration", "usingDeclaration", 
		"configDeclaration", "configProperty", "methodDeclaration", "externFunctionDeclaration", 
		"functionDeclaration", "functionSignature", "paramList", "parameter", 
		"body", "statement", "singleStatement", "singleStatementSemicolon", "variableDeclarationStatement", 
		"variableDeclarationExpression", "variableDeclarationItem", "voidStatement", 
		"returnStatement", "expressionStatement", "ifStatement", "elseIfStatementBody", 
		"ifStatementElseBody", "ifStatementBegin", "elseIfStatement", "ifStatementElse", 
		"ifStatementEnd", "forStatement", "forStatementBegin", "forStatementEnd", 
		"forInitStatement", "whileStatement", "whileStatementBegin", "whileStatementEnd", 
		"whileRunExpression", "repeatStatement", "repeatStatementBegin", "repeatStatementEnd", 
		"repeatRunExpression", "loopStatement", "loopStatementBegin", "loopStatementEnd", 
		"loopChain", "loopChainItem", "loopChainExpression", "loopWhereExpression", 
		"loopRunExpression", "separatorStatement", "switchStatement", "switchStatementBegin", 
		"switchStatementEnd", "switchBranchStatement", "switchBranchHeadStatement", 
		"switchCaseOrTypeIsHeadStatements", "switchCaseOrTypeIsHeadStatement", 
		"switchCaseHeadStatement", "switchTypeIsHeadStatement", "switchTypeAsHeadStatement", 
		"switchDefaultStatement", "switchDefaultHeadStatement", "templateDeclaration", 
		"templateSignature", "templateBody", "templateContentLine", "templateContent", 
		"templateOutput", "templateLineEnd", "templateStatementStartEnd", "templateStatement", 
		"typeArgumentList", "predefinedType", "typeReferenceList", "typeReference", 
		"arrayType", "arrayItemType", "nullableType", "nullableItemType", "genericType", 
		"simpleType", "voidType", "returnType", "expressionList", "variableReference", 
		"rankSpecifiers", "rankSpecifier", "unboundTypeName", "genericDimensionItem", 
		"genericDimensionSpecifier", "anonymousFunctionSignature", "explicitParameter", 
		"implicitParameter", "expression", "qualifiedName", "identifierList", 
		"identifier", "literal", "nullLiteral", "booleanLiteral", "numberLiteral", 
		"integerLiteral", "decimalLiteral", "scientificLiteral", "dateOrTimeLiteral", 
		"dateTimeOffsetLiteral", "dateTimeLiteral", "dateLiteral", "timeLiteral", 
		"charLiteral", "stringLiteral", "guidLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'standalone'", "'generator'", "'using'", "'configuration'", 
		"'properties'", "'template'", "'function'", "'extern'", "'return'", "'switch'", 
		"'case'", "'type'", "'void'", "'end'", "'for'", "'foreach'", "'in'", "'if'", 
		"'else'", "'repeat'", "'until'", "'while'", "'loop'", "'hasloop'", "'where'", 
		"'orderby'", "'descending'", "'separator'", "'null'", "'true'", "'false'", 
		"'bool'", "'byte'", "'char'", "'decimal'", "'double'", "'float'", "'int'", 
		"'long'", "'object'", "'sbyte'", "'short'", "'string'", "'uint'", "'ulong'", 
		"'ushort'", "'this'", "'new'", "'is'", "'as'", "'typeof'", "'default'", 
		"';'", "':'", "'.'", "'?.'", "','", "'='", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'('", "')'", null, 
		"']'", "'{'", "'}'", "'=='", "'!='", "'=>'", "'->'", "'<'", "'>'", "'<='", 
		"'>='", "'?'", "'+'", "'-'", "'!'", "'~'", null, "'/'", "'%'", "'++'", 
		"'--'", "'::'", "'&'", "'^'", "'|'", "'&&'", "'^^'", "'||'", "'??'", null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'\"'", null, null, null, null, null, null, null, 
		null, null, null, null, "'@\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KStandalone", "KGenerator", "KUsing", "KConfiguration", 
		"KProperties", "KTemplate", "KFunction", "KExtern", "KReturn", "KSwitch", 
		"KCase", "KType", "KVoid", "KEnd", "KFor", "KForEach", "KIn", "KIf", "KElse", 
		"KRepeat", "KUntil", "KWhile", "KLoop", "KHasLoop", "KWhere", "KOrderBy", 
		"KDescending", "KSeparator", "KNull", "KTrue", "KFalse", "KBool", "KByte", 
		"KChar", "KDecimal", "KDouble", "KFloat", "KInt", "KLong", "KObject", 
		"KSByte", "KShort", "KString", "KUInt", "KULong", "KUShort", "KThis", 
		"KNew", "KIs", "KAs", "KTypeof", "KDefault", "TSemicolon", "TColon", "TDot", 
		"TQuestionDot", "TComma", "TAssign", "TAssignPlus", "TAssignMinus", "TAssignAsterisk", 
		"TAssignSlash", "TAssignPercent", "TAssignAmp", "TAssignPipe", "TAssignHat", 
		"TAssignLeftShift", "TAssignRightShift", "TOpenParenthesis", "TCloseParenthesis", 
		"TOpenBracket", "TCloseBracket", "TOpenBrace", "TCloseBrace", "TEquals", 
		"TNotEquals", "TArrow", "TSingleArrow", "TLessThan", "TGreaterThan", "TLessThanOrEquals", 
		"TGreaterThanOrEquals", "TQuestion", "TPlus", "TMinus", "TExclamation", 
		"TTilde", "TAsterisk", "TSlash", "TPercent", "TPlusPlus", "TMinusMinus", 
		"TColonColon", "TAmp", "THat", "TPipe", "TAnd", "TXor", "TOr", "TQuestionQuestion", 
		"IdentifierNormal", "LInteger", "LDecimal", "LScientific", "LDateTimeOffset", 
		"LDateTime", "LDate", "LTime", "LChar", "LRegularString", "LGuid", "LUtf8Bom", 
		"LWhitespace", "LCrLf", "LLineBreak", "LLineComment", "LMultiLineComment", 
		"LDoubleQuoteVerbatimString", "TH_TOpenParenthesis", "TH_TCloseParenthesis", 
		"KEndTemplate", "LTemplateLineControl", "LTemplateOutput", "LTemplateCrLf", 
		"LTemplateLineBreak", "TTemplateStatementStart", "TTemplateStatementEnd", 
		"TS_TOpenBracket", "TS_TCloseBracket", "DoubleQuoteVerbatimStringLiteralStart", 
		"COMMENT_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaGeneratorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MetaGeneratorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MetaGeneratorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MetaGeneratorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorDeclarationContext generatorDeclaration() {
			return GetRuleContext<GeneratorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MetaGeneratorParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext[] usingDeclaration() {
			return GetRuleContexts<UsingDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext usingDeclaration(int i) {
			return GetRuleContext<UsingDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigDeclarationContext configDeclaration() {
			return GetRuleContext<ConfigDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			namespaceDeclaration();
			State = 225;
			generatorDeclaration();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KUsing) {
				{
				{
				State = 226;
				usingDeclaration();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KProperties) {
				{
				State = 232;
				configDeclaration();
				}
			}

			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KTemplate) | (1L << KFunction) | (1L << KExtern))) != 0)) {
				{
				{
				State = 235;
				methodDeclaration();
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 241;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNamespace() { return GetToken(MetaGeneratorParser.KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(KNamespace);
			State = 244;
			qualifiedName();
			State = 245;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KStandalone() { return GetToken(MetaGeneratorParser.KStandalone, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public GeneratorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorDeclarationContext generatorDeclaration() {
		GeneratorDeclarationContext _localctx = new GeneratorDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_generatorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KStandalone) {
				{
				State = 247;
				Match(KStandalone);
				}
			}

			State = 250;
			Match(KGenerator);
			State = 251;
			identifier();
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TColon) {
				{
				State = 252;
				Match(TColon);
				State = 253;
				qualifiedName();
				}
			}

			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KFor) {
				{
				State = 256;
				Match(KFor);
				State = 257;
				typeReference();
				}
			}

			State = 260;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
	 
		public UsingDeclarationContext() { }
		public virtual void CopyFrom(UsingDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingNamespaceDeclarationContext : UsingDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public UsingNamespaceDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingGeneratorDeclarationContext : UsingDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UsingGeneratorDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_usingDeclaration);
		int _la;
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new UsingNamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 262;
				Match(KUsing);
				State = 263;
				qualifiedName();
				State = 264;
				Match(TSemicolon);
				}
				break;
			case 2:
				_localctx = new UsingGeneratorDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 266;
				Match(KUsing);
				State = 267;
				Match(KGenerator);
				State = 268;
				qualifiedName();
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IdentifierNormal) {
					{
					State = 269;
					identifier();
					}
				}

				State = 272;
				Match(TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigDeclarationContext : ParserRuleContext {
		public IToken startProperties;
		public IToken endProperties;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigDeclarationContext configDeclaration() {
		ConfigDeclarationContext _localctx = new ConfigDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_configDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_localctx.startProperties = Match(KProperties);
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 277;
				identifier();
				}
				break;
			}
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				{
				State = 280;
				configProperty();
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 286;
			Match(KEnd);
			State = 287;
			_localctx.endProperties = Match(KProperties);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigPropertyContext : ParserRuleContext {
		public ConfigPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configProperty; } }
	 
		public ConfigPropertyContext() { }
		public virtual void CopyFrom(ConfigPropertyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConfigPropertyGroupDeclarationContext : ConfigPropertyContext {
		public IToken startProperties;
		public IToken endProperties;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigPropertyGroupDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyGroupDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConfigPropertyDeclarationContext : ConfigPropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConfigPropertyDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigPropertyContext configProperty() {
		ConfigPropertyContext _localctx = new ConfigPropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_configProperty);
		int _la;
		try {
			State = 308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				_localctx = new ConfigPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 289;
				typeReference();
				State = 290;
				identifier();
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TAssign) {
					{
					State = 291;
					Match(TAssign);
					State = 292;
					expression(0);
					}
				}

				State = 295;
				Match(TSemicolon);
				}
				break;
			case KProperties:
				_localctx = new ConfigPropertyGroupDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 297;
				((ConfigPropertyGroupDeclarationContext)_localctx).startProperties = Match(KProperties);
				State = 298;
				identifier();
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					{
					State = 299;
					configProperty();
					}
					}
					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 305;
				Match(KEnd);
				State = 306;
				((ConfigPropertyGroupDeclarationContext)_localctx).endProperties = Match(KProperties);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternFunctionDeclarationContext externFunctionDeclaration() {
			return GetRuleContext<ExternFunctionDeclarationContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_methodDeclaration);
		try {
			State = 313;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KFunction:
				EnterOuterAlt(_localctx, 1);
				{
				State = 310;
				functionDeclaration();
				}
				break;
			case KTemplate:
				EnterOuterAlt(_localctx, 2);
				{
				State = 311;
				templateDeclaration();
				}
				break;
			case KExtern:
				EnterOuterAlt(_localctx, 3);
				{
				State = 312;
				externFunctionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KExtern() { return GetToken(MetaGeneratorParser.KExtern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		public ExternFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternFunctionDeclarationContext externFunctionDeclaration() {
		ExternFunctionDeclarationContext _localctx = new ExternFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_externFunctionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(KExtern);
			State = 316;
			functionSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			functionSignature();
			State = 319;
			body();
			State = 320;
			Match(KEnd);
			State = 321;
			Match(KFunction);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(KFunction);
			State = 324;
			returnType();
			State = 325;
			identifier();
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TLessThan) {
				{
				State = 326;
				typeArgumentList();
				}
			}

			State = 329;
			Match(TOpenParenthesis);
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 330;
				paramList();
				}
			}

			State = 333;
			Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 20, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			parameter();
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 336;
				Match(TComma);
				State = 337;
				parameter();
				}
				}
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			typeReference();
			State = 344;
			identifier();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 345;
				Match(TAssign);
				State = 346;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_body);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 349;
					statement();
					}
					} 
				}
				State = 354;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleStatementSemicolonContext singleStatementSemicolon() {
			return GetRuleContext<SingleStatementSemicolonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KReturn:
			case KHasLoop:
			case KNull:
			case KTrue:
			case KFalse:
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case KThis:
			case KNew:
			case KTypeof:
			case KDefault:
			case TOpenParenthesis:
			case TPlus:
			case TMinus:
			case TExclamation:
			case TTilde:
			case TPlusPlus:
			case TMinusMinus:
			case IdentifierNormal:
			case LInteger:
			case LDecimal:
			case LScientific:
			case LDateTimeOffset:
			case LDateTime:
			case LDate:
			case LTime:
			case LChar:
			case LRegularString:
			case LGuid:
			case LDoubleQuoteVerbatimString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355;
				singleStatementSemicolon();
				}
				break;
			case KIf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				ifStatement();
				}
				break;
			case KFor:
				EnterOuterAlt(_localctx, 3);
				{
				State = 357;
				forStatement();
				}
				break;
			case KWhile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 358;
				whileStatement();
				}
				break;
			case KRepeat:
				EnterOuterAlt(_localctx, 5);
				{
				State = 359;
				repeatStatement();
				}
				break;
			case KLoop:
				EnterOuterAlt(_localctx, 6);
				{
				State = 360;
				loopStatement();
				}
				break;
			case KSwitch:
				EnterOuterAlt(_localctx, 7);
				{
				State = 361;
				switchStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SingleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementContext singleStatement() {
		SingleStatementContext _localctx = new SingleStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_singleStatement);
		try {
			State = 367;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364;
				variableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365;
				returnStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 366;
				expressionStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementSemicolonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleStatementContext singleStatement() {
			return GetRuleContext<SingleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public SingleStatementSemicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatementSemicolon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatementSemicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementSemicolonContext singleStatementSemicolon() {
		SingleStatementSemicolonContext _localctx = new SingleStatementSemicolonContext(Context, State);
		EnterRule(_localctx, 30, RULE_singleStatementSemicolon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			singleStatement();
			State = 370;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationExpressionContext variableDeclarationExpression() {
			return GetRuleContext<VariableDeclarationExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			variableDeclarationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationItemContext[] variableDeclarationItem() {
			return GetRuleContexts<VariableDeclarationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationItemContext variableDeclarationItem(int i) {
			return GetRuleContext<VariableDeclarationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public VariableDeclarationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationExpressionContext variableDeclarationExpression() {
		VariableDeclarationExpressionContext _localctx = new VariableDeclarationExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_variableDeclarationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			typeReference();
			State = 375;
			variableDeclarationItem();
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 376;
				Match(TComma);
				State = 377;
				variableDeclarationItem();
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationItemContext variableDeclarationItem() {
		VariableDeclarationItemContext _localctx = new VariableDeclarationItemContext(Context, State);
		EnterRule(_localctx, 36, RULE_variableDeclarationItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			identifier();
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 384;
				Match(TAssign);
				State = 385;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VoidStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidStatementContext voidStatement() {
		VoidStatementContext _localctx = new VoidStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_voidStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			Match(KVoid);
			State = 389;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KReturn() { return GetToken(MetaGeneratorParser.KReturn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(KReturn);
			State = 392;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementBodyContext[] elseIfStatementBody() {
			return GetRuleContexts<ElseIfStatementBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementBodyContext elseIfStatementBody(int i) {
			return GetRuleContext<ElseIfStatementBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementElseBodyContext ifStatementElseBody() {
			return GetRuleContext<IfStatementElseBodyContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			ifStatementBegin();
			State = 397;
			body();
			State = 401;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 398;
					elseIfStatementBody();
					}
					} 
				}
				State = 403;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KElse) {
				{
				State = 404;
				ifStatementElseBody();
				}
			}

			State = 407;
			ifStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseIfStatementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatementBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementBodyContext elseIfStatementBody() {
		ElseIfStatementBodyContext _localctx = new ElseIfStatementBodyContext(Context, State);
		EnterRule(_localctx, 46, RULE_elseIfStatementBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			elseIfStatement();
			State = 410;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementElseBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public IfStatementElseBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementElseBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementElseBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementElseBodyContext ifStatementElseBody() {
		IfStatementElseBodyContext _localctx = new IfStatementElseBodyContext(Context, State);
		EnterRule(_localctx, 48, RULE_ifStatementElseBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			ifStatementElse();
			State = 413;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public IfStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementBeginContext ifStatementBegin() {
		IfStatementBeginContext _localctx = new IfStatementBeginContext(Context, State);
		EnterRule(_localctx, 50, RULE_ifStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(KIf);
			State = 416;
			Match(TOpenParenthesis);
			State = 417;
			expression(0);
			State = 418;
			Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			Match(KElse);
			State = 421;
			Match(KIf);
			State = 422;
			Match(TOpenParenthesis);
			State = 423;
			expression(0);
			State = 424;
			Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		public IfStatementElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementElse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementElseContext ifStatementElse() {
		IfStatementElseContext _localctx = new IfStatementElseContext(Context, State);
		EnterRule(_localctx, 54, RULE_ifStatementElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(KElse);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public IfStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementEndContext ifStatementEnd() {
		IfStatementEndContext _localctx = new IfStatementEndContext(Context, State);
		EnterRule(_localctx, 56, RULE_ifStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			Match(KEnd);
			State = 429;
			Match(KIf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementBeginContext forStatementBegin() {
			return GetRuleContext<ForStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementEndContext forStatementEnd() {
			return GetRuleContext<ForStatementEndContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			forStatementBegin();
			State = 432;
			body();
			State = 433;
			forStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementBeginContext : ParserRuleContext {
		public IToken semi1;
		public ExpressionListContext endExpression;
		public IToken semi2;
		public ExpressionListContext stepExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TSemicolon() { return GetTokens(MetaGeneratorParser.TSemicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon(int i) {
			return GetToken(MetaGeneratorParser.TSemicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitStatementContext forInitStatement() {
			return GetRuleContext<ForInitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public ForStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementBeginContext forStatementBegin() {
		ForStatementBeginContext _localctx = new ForStatementBeginContext(Context, State);
		EnterRule(_localctx, 60, RULE_forStatementBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(KFor);
			State = 436;
			Match(TOpenParenthesis);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (TOpenParenthesis - 70)) | (1L << (TPlus - 70)) | (1L << (TMinus - 70)) | (1L << (TExclamation - 70)) | (1L << (TTilde - 70)) | (1L << (TPlusPlus - 70)) | (1L << (TMinusMinus - 70)) | (1L << (IdentifierNormal - 70)) | (1L << (LInteger - 70)) | (1L << (LDecimal - 70)) | (1L << (LScientific - 70)) | (1L << (LDateTimeOffset - 70)) | (1L << (LDateTime - 70)) | (1L << (LDate - 70)) | (1L << (LTime - 70)) | (1L << (LChar - 70)) | (1L << (LRegularString - 70)) | (1L << (LGuid - 70)) | (1L << (LDoubleQuoteVerbatimString - 70)))) != 0)) {
				{
				State = 437;
				forInitStatement();
				}
			}

			State = 440;
			_localctx.semi1 = Match(TSemicolon);
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (TOpenParenthesis - 70)) | (1L << (TPlus - 70)) | (1L << (TMinus - 70)) | (1L << (TExclamation - 70)) | (1L << (TTilde - 70)) | (1L << (TPlusPlus - 70)) | (1L << (TMinusMinus - 70)) | (1L << (IdentifierNormal - 70)) | (1L << (LInteger - 70)) | (1L << (LDecimal - 70)) | (1L << (LScientific - 70)) | (1L << (LDateTimeOffset - 70)) | (1L << (LDateTime - 70)) | (1L << (LDate - 70)) | (1L << (LTime - 70)) | (1L << (LChar - 70)) | (1L << (LRegularString - 70)) | (1L << (LGuid - 70)) | (1L << (LDoubleQuoteVerbatimString - 70)))) != 0)) {
				{
				State = 441;
				_localctx.endExpression = expressionList();
				}
			}

			State = 444;
			_localctx.semi2 = Match(TSemicolon);
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (TOpenParenthesis - 70)) | (1L << (TPlus - 70)) | (1L << (TMinus - 70)) | (1L << (TExclamation - 70)) | (1L << (TTilde - 70)) | (1L << (TPlusPlus - 70)) | (1L << (TMinusMinus - 70)) | (1L << (IdentifierNormal - 70)) | (1L << (LInteger - 70)) | (1L << (LDecimal - 70)) | (1L << (LScientific - 70)) | (1L << (LDateTimeOffset - 70)) | (1L << (LDateTime - 70)) | (1L << (LDate - 70)) | (1L << (LTime - 70)) | (1L << (LChar - 70)) | (1L << (LRegularString - 70)) | (1L << (LGuid - 70)) | (1L << (LDoubleQuoteVerbatimString - 70)))) != 0)) {
				{
				State = 445;
				_localctx.stepExpression = expressionList();
				}
			}

			State = 448;
			Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		public ForStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementEndContext forStatementEnd() {
		ForStatementEndContext _localctx = new ForStatementEndContext(Context, State);
		EnterRule(_localctx, 62, RULE_forStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(KEnd);
			State = 451;
			Match(KFor);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationExpressionContext variableDeclarationExpression() {
			return GetRuleContext<VariableDeclarationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitStatementContext forInitStatement() {
		ForInitStatementContext _localctx = new ForInitStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_forInitStatement);
		try {
			State = 455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 453;
				variableDeclarationExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454;
				expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementBeginContext whileStatementBegin() {
			return GetRuleContext<WhileStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementEndContext whileStatementEnd() {
			return GetRuleContext<WhileStatementEndContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			whileStatementBegin();
			State = 458;
			body();
			State = 459;
			whileStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KWhile() { return GetToken(MetaGeneratorParser.KWhile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public WhileStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementBeginContext whileStatementBegin() {
		WhileStatementBeginContext _localctx = new WhileStatementBeginContext(Context, State);
		EnterRule(_localctx, 68, RULE_whileStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(KWhile);
			State = 462;
			Match(TOpenParenthesis);
			State = 463;
			expression(0);
			State = 464;
			Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KWhile() { return GetToken(MetaGeneratorParser.KWhile, 0); }
		public WhileStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementEndContext whileStatementEnd() {
		WhileStatementEndContext _localctx = new WhileStatementEndContext(Context, State);
		EnterRule(_localctx, 70, RULE_whileStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(KEnd);
			State = 467;
			Match(KWhile);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileRunExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public WhileRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileRunExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileRunExpressionContext whileRunExpression() {
		WhileRunExpressionContext _localctx = new WhileRunExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_whileRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementBeginContext repeatStatementBegin() {
			return GetRuleContext<RepeatStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementEndContext repeatStatementEnd() {
			return GetRuleContext<RepeatStatementEndContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			repeatStatementBegin();
			State = 472;
			body();
			State = 473;
			repeatStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KRepeat() { return GetToken(MetaGeneratorParser.KRepeat, 0); }
		public RepeatStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatementBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementBeginContext repeatStatementBegin() {
		RepeatStatementBeginContext _localctx = new RepeatStatementBeginContext(Context, State);
		EnterRule(_localctx, 76, RULE_repeatStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(KRepeat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUntil() { return GetToken(MetaGeneratorParser.KUntil, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public RepeatStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatementEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementEndContext repeatStatementEnd() {
		RepeatStatementEndContext _localctx = new RepeatStatementEndContext(Context, State);
		EnterRule(_localctx, 78, RULE_repeatStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(KUntil);
			State = 478;
			Match(TOpenParenthesis);
			State = 479;
			expression(0);
			State = 480;
			Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatRunExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public RepeatRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatRunExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatRunExpressionContext repeatRunExpression() {
		RepeatRunExpressionContext _localctx = new RepeatRunExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_repeatRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			loopStatementBegin();
			State = 485;
			body();
			State = 486;
			loopStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopRunExpressionContext loopRunExpression() {
			return GetRuleContext<LoopRunExpressionContext>(0);
		}
		public LoopStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementBeginContext loopStatementBegin() {
		LoopStatementBeginContext _localctx = new LoopStatementBeginContext(Context, State);
		EnterRule(_localctx, 84, RULE_loopStatementBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(KLoop);
			State = 489;
			Match(TOpenParenthesis);
			State = 490;
			loopChain();
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KWhere) {
				{
				State = 491;
				loopWhereExpression();
				}
			}

			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TSemicolon) {
				{
				State = 494;
				loopRunExpression();
				}
			}

			State = 497;
			Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		public LoopStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementEndContext loopStatementEnd() {
		LoopStatementEndContext _localctx = new LoopStatementEndContext(Context, State);
		EnterRule(_localctx, 86, RULE_loopStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			Match(KEnd);
			State = 500;
			Match(KLoop);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopChainItemContext[] loopChainItem() {
			return GetRuleContexts<LoopChainItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopChainItemContext loopChainItem(int i) {
			return GetRuleContext<LoopChainItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TSingleArrow() { return GetTokens(MetaGeneratorParser.TSingleArrow); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSingleArrow(int i) {
			return GetToken(MetaGeneratorParser.TSingleArrow, i);
		}
		public LoopChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainContext loopChain() {
		LoopChainContext _localctx = new LoopChainContext(Context, State);
		EnterRule(_localctx, 88, RULE_loopChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			loopChainItem();
			State = 507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TSingleArrow) {
				{
				{
				State = 503;
				Match(TSingleArrow);
				State = 504;
				loopChainItem();
				}
				}
				State = 509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public LoopChainItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainItemContext loopChainItem() {
		LoopChainItemContext _localctx = new LoopChainItemContext(Context, State);
		EnterRule(_localctx, 90, RULE_loopChainItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 511;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 510;
					typeReference();
					}
					break;
				}
				State = 513;
				identifier();
				State = 514;
				Match(TColon);
				}
				break;
			}
			State = 518;
			loopChainExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainExpressionContext : ParserRuleContext {
		public LoopChainExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainExpression; } }
	 
		public LoopChainExpressionContext() { }
		public virtual void CopyFrom(LoopChainExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopChainMemberAccessExpressionContext : LoopChainExpressionContext {
		public IToken dot;
		[System.Diagnostics.DebuggerNonUserCode] public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestionDot() { return GetToken(MetaGeneratorParser.TQuestionDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainMemberAccessExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainMethodCallExpressionContext : LoopChainExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public LoopChainMethodCallExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainIdentifierExpressionContext : LoopChainExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainIdentifierExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainTypeofExpressionContext : LoopChainExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopChainTypeofExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainExpressionContext loopChainExpression() {
		return loopChainExpression(0);
	}

	private LoopChainExpressionContext loopChainExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LoopChainExpressionContext _localctx = new LoopChainExpressionContext(Context, _parentState);
		LoopChainExpressionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_loopChainExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KTypeof:
				{
				_localctx = new LoopChainTypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 521;
				Match(KTypeof);
				State = 522;
				Match(TOpenParenthesis);
				State = 523;
				typeReference();
				State = 524;
				Match(TCloseParenthesis);
				}
				break;
			case IdentifierNormal:
				{
				_localctx = new LoopChainIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 526;
				identifier();
				State = 528;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 527;
					typeArgumentList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 546;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 544;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						_localctx = new LoopChainMemberAccessExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 532;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 533;
						((LoopChainMemberAccessExpressionContext)_localctx).dot = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TDot || _la==TQuestionDot) ) {
							((LoopChainMemberAccessExpressionContext)_localctx).dot = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 534;
						identifier();
						State = 536;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
						case 1:
							{
							State = 535;
							typeArgumentList();
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new LoopChainMethodCallExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 538;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 539;
						Match(TOpenParenthesis);
						State = 541;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (TOpenParenthesis - 70)) | (1L << (TPlus - 70)) | (1L << (TMinus - 70)) | (1L << (TExclamation - 70)) | (1L << (TTilde - 70)) | (1L << (TPlusPlus - 70)) | (1L << (TMinusMinus - 70)) | (1L << (IdentifierNormal - 70)) | (1L << (LInteger - 70)) | (1L << (LDecimal - 70)) | (1L << (LScientific - 70)) | (1L << (LDateTimeOffset - 70)) | (1L << (LDateTime - 70)) | (1L << (LDate - 70)) | (1L << (LTime - 70)) | (1L << (LChar - 70)) | (1L << (LRegularString - 70)) | (1L << (LGuid - 70)) | (1L << (LDoubleQuoteVerbatimString - 70)))) != 0)) {
							{
							State = 540;
							expressionList();
							}
						}

						State = 543;
						Match(TCloseParenthesis);
						}
						break;
					}
					} 
				}
				State = 548;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LoopWhereExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KWhere() { return GetToken(MetaGeneratorParser.KWhere, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopWhereExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopWhereExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopWhereExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopWhereExpressionContext loopWhereExpression() {
		LoopWhereExpressionContext _localctx = new LoopWhereExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_loopWhereExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(KWhere);
			State = 550;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopRunExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public LoopRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopRunExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopRunExpressionContext loopRunExpression() {
		LoopRunExpressionContext _localctx = new LoopRunExpressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_loopRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSeparator() { return GetToken(MetaGeneratorParser.KSeparator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public SeparatorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorStatementContext separatorStatement() {
		SeparatorStatementContext _localctx = new SeparatorStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_separatorStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(TSemicolon);
			State = 555;
			Match(KSeparator);
			State = 556;
			identifier();
			State = 557;
			Match(TAssign);
			State = 558;
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBranchStatementContext[] switchBranchStatement() {
			return GetRuleContexts<SwitchBranchStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBranchStatementContext switchBranchStatement(int i) {
			return GetRuleContext<SwitchBranchStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchDefaultStatementContext switchDefaultStatement() {
			return GetRuleContext<SwitchDefaultStatementContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			switchStatementBegin();
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KCase || _la==KType) {
				{
				{
				State = 561;
				switchBranchStatement();
				}
				}
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KDefault) {
				{
				State = 567;
				switchDefaultStatement();
				}
			}

			State = 570;
			switchStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementBeginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public SwitchStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementBegin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementBeginContext switchStatementBegin() {
		SwitchStatementBeginContext _localctx = new SwitchStatementBeginContext(Context, State);
		EnterRule(_localctx, 102, RULE_switchStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			Match(KSwitch);
			State = 573;
			Match(TOpenParenthesis);
			State = 574;
			expression(0);
			State = 575;
			Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		public SwitchStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementEndContext switchStatementEnd() {
		SwitchStatementEndContext _localctx = new SwitchStatementEndContext(Context, State);
		EnterRule(_localctx, 104, RULE_switchStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(KEnd);
			State = 578;
			Match(KSwitch);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchBranchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchStatementContext switchBranchStatement() {
		SwitchBranchStatementContext _localctx = new SwitchBranchStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_switchBranchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			switchBranchHeadStatement();
			State = 581;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchHeadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseOrTypeIsHeadStatementsContext switchCaseOrTypeIsHeadStatements() {
			return GetRuleContext<SwitchCaseOrTypeIsHeadStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
			return GetRuleContext<SwitchTypeAsHeadStatementContext>(0);
		}
		public SwitchBranchHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchHeadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
		SwitchBranchHeadStatementContext _localctx = new SwitchBranchHeadStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_switchBranchHeadStatement);
		try {
			State = 585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 583;
				switchCaseOrTypeIsHeadStatements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 584;
				switchTypeAsHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseOrTypeIsHeadStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseOrTypeIsHeadStatementContext[] switchCaseOrTypeIsHeadStatement() {
			return GetRuleContexts<SwitchCaseOrTypeIsHeadStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement(int i) {
			return GetRuleContext<SwitchCaseOrTypeIsHeadStatementContext>(i);
		}
		public SwitchCaseOrTypeIsHeadStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseOrTypeIsHeadStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseOrTypeIsHeadStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseOrTypeIsHeadStatementsContext switchCaseOrTypeIsHeadStatements() {
		SwitchCaseOrTypeIsHeadStatementsContext _localctx = new SwitchCaseOrTypeIsHeadStatementsContext(Context, State);
		EnterRule(_localctx, 110, RULE_switchCaseOrTypeIsHeadStatements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 587;
					switchCaseOrTypeIsHeadStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 590;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseOrTypeIsHeadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
			return GetRuleContext<SwitchCaseHeadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
			return GetRuleContext<SwitchTypeIsHeadStatementContext>(0);
		}
		public SwitchCaseOrTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseOrTypeIsHeadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseOrTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement() {
		SwitchCaseOrTypeIsHeadStatementContext _localctx = new SwitchCaseOrTypeIsHeadStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_switchCaseOrTypeIsHeadStatement);
		try {
			State = 594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KCase:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592;
				switchCaseHeadStatement();
				}
				break;
			case KType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593;
				switchTypeIsHeadStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseHeadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCase() { return GetToken(MetaGeneratorParser.KCase, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchCaseHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseHeadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
		SwitchCaseHeadStatementContext _localctx = new SwitchCaseHeadStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_switchCaseHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(KCase);
			State = 597;
			expressionList();
			State = 598;
			Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeIsHeadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeIsHeadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
		SwitchTypeIsHeadStatementContext _localctx = new SwitchTypeIsHeadStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_switchTypeIsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			Match(KType);
			State = 601;
			Match(KIs);
			State = 602;
			typeReferenceList();
			State = 603;
			Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeAsHeadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeAsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeAsHeadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeAsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
		SwitchTypeAsHeadStatementContext _localctx = new SwitchTypeAsHeadStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_switchTypeAsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(KType);
			State = 606;
			Match(KAs);
			State = 607;
			typeReference();
			State = 608;
			Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchDefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultStatementContext switchDefaultStatement() {
		SwitchDefaultStatementContext _localctx = new SwitchDefaultStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_switchDefaultStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			switchDefaultHeadStatement();
			State = 611;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultHeadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchDefaultHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultHeadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
		SwitchDefaultHeadStatementContext _localctx = new SwitchDefaultHeadStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_switchDefaultHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			Match(KDefault);
			State = 614;
			Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateSignatureContext templateSignature() {
			return GetRuleContext<TemplateSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEndTemplate() { return GetToken(MetaGeneratorParser.KEndTemplate, 0); }
		public TemplateDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDeclarationContext templateDeclaration() {
		TemplateDeclarationContext _localctx = new TemplateDeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_templateDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			templateSignature();
			State = 617;
			templateBody();
			State = 618;
			Match(KEndTemplate);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTemplate() { return GetToken(MetaGeneratorParser.KTemplate, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public TemplateSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateSignatureContext templateSignature() {
		TemplateSignatureContext _localctx = new TemplateSignatureContext(Context, State);
		EnterRule(_localctx, 126, RULE_templateSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(KTemplate);
			State = 621;
			identifier();
			State = 622;
			Match(TOpenParenthesis);
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 623;
				paramList();
				}
			}

			State = 626;
			Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContentLineContext[] templateContentLine() {
			return GetRuleContexts<TemplateContentLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContentLineContext templateContentLine(int i) {
			return GetRuleContext<TemplateContentLineContext>(i);
		}
		public TemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBodyContext templateBody() {
		TemplateBodyContext _localctx = new TemplateBodyContext(Context, State);
		EnterRule(_localctx, 128, RULE_templateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (LTemplateLineControl - 123)) | (1L << (LTemplateOutput - 123)) | (1L << (LTemplateCrLf - 123)) | (1L << (LTemplateLineBreak - 123)) | (1L << (TTemplateStatementStart - 123)))) != 0)) {
				{
				{
				State = 628;
				templateContentLine();
				}
				}
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContentLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateLineEndContext templateLineEnd() {
			return GetRuleContext<TemplateLineEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContentContext[] templateContent() {
			return GetRuleContexts<TemplateContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContentContext templateContent(int i) {
			return GetRuleContext<TemplateContentContext>(i);
		}
		public TemplateContentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContentLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContentLineContext templateContentLine() {
		TemplateContentLineContext _localctx = new TemplateContentLineContext(Context, State);
		EnterRule(_localctx, 130, RULE_templateContentLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LTemplateOutput || _la==TTemplateStatementStart) {
				{
				{
				State = 634;
				templateContent();
				}
				}
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 640;
			templateLineEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateOutputContext templateOutput() {
			return GetRuleContext<TemplateOutputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStatementStartEndContext templateStatementStartEnd() {
			return GetRuleContext<TemplateStatementStartEndContext>(0);
		}
		public TemplateContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContentContext templateContent() {
		TemplateContentContext _localctx = new TemplateContentContext(Context, State);
		EnterRule(_localctx, 132, RULE_templateContent);
		try {
			State = 644;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LTemplateOutput:
				EnterOuterAlt(_localctx, 1);
				{
				State = 642;
				templateOutput();
				}
				break;
			case TTemplateStatementStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 643;
				templateStatementStartEnd();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateOutputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTemplateOutput() { return GetToken(MetaGeneratorParser.LTemplateOutput, 0); }
		public TemplateOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateOutput; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateOutputContext templateOutput() {
		TemplateOutputContext _localctx = new TemplateOutputContext(Context, State);
		EnterRule(_localctx, 134, RULE_templateOutput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			Match(LTemplateOutput);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateLineEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTemplateCrLf() { return GetToken(MetaGeneratorParser.LTemplateCrLf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTemplateLineBreak() { return GetToken(MetaGeneratorParser.LTemplateLineBreak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTemplateLineControl() { return GetToken(MetaGeneratorParser.LTemplateLineControl, 0); }
		public TemplateLineEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateLineEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateLineEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateLineEndContext templateLineEnd() {
		TemplateLineEndContext _localctx = new TemplateLineEndContext(Context, State);
		EnterRule(_localctx, 136, RULE_templateLineEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (LTemplateLineControl - 123)) | (1L << (LTemplateCrLf - 123)) | (1L << (LTemplateLineBreak - 123)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementStartEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TTemplateStatementStart() { return GetToken(MetaGeneratorParser.TTemplateStatementStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TTemplateStatementEnd() { return GetToken(MetaGeneratorParser.TTemplateStatementEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStatementContext templateStatement() {
			return GetRuleContext<TemplateStatementContext>(0);
		}
		public TemplateStatementStartEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatementStartEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatementStartEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementStartEndContext templateStatementStartEnd() {
		TemplateStatementStartEndContext _localctx = new TemplateStatementStartEndContext(Context, State);
		EnterRule(_localctx, 138, RULE_templateStatementStartEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			Match(TTemplateStatementStart);
			State = 652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KSwitch) | (1L << KCase) | (1L << KType) | (1L << KVoid) | (1L << KEnd) | (1L << KFor) | (1L << KIf) | (1L << KElse) | (1L << KRepeat) | (1L << KUntil) | (1L << KWhile) | (1L << KLoop) | (1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (TOpenParenthesis - 70)) | (1L << (TPlus - 70)) | (1L << (TMinus - 70)) | (1L << (TExclamation - 70)) | (1L << (TTilde - 70)) | (1L << (TPlusPlus - 70)) | (1L << (TMinusMinus - 70)) | (1L << (IdentifierNormal - 70)) | (1L << (LInteger - 70)) | (1L << (LDecimal - 70)) | (1L << (LScientific - 70)) | (1L << (LDateTimeOffset - 70)) | (1L << (LDateTime - 70)) | (1L << (LDate - 70)) | (1L << (LTime - 70)) | (1L << (LChar - 70)) | (1L << (LRegularString - 70)) | (1L << (LGuid - 70)) | (1L << (LDoubleQuoteVerbatimString - 70)))) != 0)) {
				{
				State = 651;
				templateStatement();
				}
			}

			State = 654;
			Match(TTemplateStatementEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VoidStatementContext voidStatement() {
			return GetRuleContext<VoidStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementBeginContext forStatementBegin() {
			return GetRuleContext<ForStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementEndContext forStatementEnd() {
			return GetRuleContext<ForStatementEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementBeginContext whileStatementBegin() {
			return GetRuleContext<WhileStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementEndContext whileStatementEnd() {
			return GetRuleContext<WhileStatementEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementBeginContext repeatStatementBegin() {
			return GetRuleContext<RepeatStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementEndContext repeatStatementEnd() {
			return GetRuleContext<RepeatStatementEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		public TemplateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementContext templateStatement() {
		TemplateStatementContext _localctx = new TemplateStatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_templateStatement);
		try {
			State = 675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656;
				voidStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 657;
				variableDeclarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 658;
				expressionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 659;
				ifStatementBegin();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 660;
				elseIfStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 661;
				ifStatementElse();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 662;
				ifStatementEnd();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 663;
				forStatementBegin();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 664;
				forStatementEnd();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 665;
				whileStatementBegin();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 666;
				whileStatementEnd();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 667;
				repeatStatementBegin();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 668;
				repeatStatementEnd();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 669;
				loopStatementBegin();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 670;
				loopStatementEnd();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 671;
				switchStatementBegin();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 672;
				switchStatementEnd();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 673;
				switchBranchHeadStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 674;
				switchDefaultHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 142, RULE_typeArgumentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			Match(TLessThan);
			State = 678;
			typeReferenceList();
			State = 679;
			Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KBool() { return GetToken(MetaGeneratorParser.KBool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KByte() { return GetToken(MetaGeneratorParser.KByte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KChar() { return GetToken(MetaGeneratorParser.KChar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDecimal() { return GetToken(MetaGeneratorParser.KDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDouble() { return GetToken(MetaGeneratorParser.KDouble, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFloat() { return GetToken(MetaGeneratorParser.KFloat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KInt() { return GetToken(MetaGeneratorParser.KInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KLong() { return GetToken(MetaGeneratorParser.KLong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KObject() { return GetToken(MetaGeneratorParser.KObject, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSByte() { return GetToken(MetaGeneratorParser.KSByte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KShort() { return GetToken(MetaGeneratorParser.KShort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KString() { return GetToken(MetaGeneratorParser.KString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUInt() { return GetToken(MetaGeneratorParser.KUInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KULong() { return GetToken(MetaGeneratorParser.KULong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUShort() { return GetToken(MetaGeneratorParser.KUShort, 0); }
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public TypeReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReferenceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceListContext typeReferenceList() {
		TypeReferenceListContext _localctx = new TypeReferenceListContext(Context, State);
		EnterRule(_localctx, 146, RULE_typeReferenceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			typeReference();
			State = 688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 684;
				Match(TComma);
				State = 685;
				typeReference();
				}
				}
				State = 690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 148, RULE_typeReference);
		try {
			State = 695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 691;
				arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 692;
				nullableType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 693;
				genericType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 694;
				simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayItemTypeContext arrayItemType() {
			return GetRuleContext<ArrayItemTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RankSpecifiersContext rankSpecifiers() {
			return GetRuleContext<RankSpecifiersContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			arrayItemType();
			State = 698;
			rankSpecifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayItemTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ArrayItemTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayItemType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayItemType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayItemTypeContext arrayItemType() {
		ArrayItemTypeContext _localctx = new ArrayItemTypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_arrayItemType);
		try {
			State = 703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 700;
				nullableType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 701;
				genericType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 702;
				simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullableItemTypeContext nullableItemType() {
			return GetRuleContext<NullableItemTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 154, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			nullableItemType();
			State = 706;
			Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableItemTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public NullableItemTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableItemType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableItemType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableItemTypeContext nullableItemType() {
		NullableItemTypeContext _localctx = new NullableItemTypeContext(Context, State);
		EnterRule(_localctx, 156, RULE_nullableItemType);
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 708;
				genericType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 709;
				simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_genericType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			qualifiedName();
			State = 713;
			typeArgumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 160, RULE_simpleType);
		try {
			State = 717;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 715;
				qualifiedName();
				}
				break;
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
				EnterOuterAlt(_localctx, 2);
				{
				State = 716;
				predefinedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 162, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_returnType);
		try {
			State = 723;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 721;
				typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 722;
				voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 166, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			expression(0);
			State = 730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 726;
				Match(TComma);
				State = 727;
				expression(0);
				}
				}
				State = 732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 168, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RankSpecifierContext[] rankSpecifier() {
			return GetRuleContexts<RankSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RankSpecifierContext rankSpecifier(int i) {
			return GetRuleContext<RankSpecifierContext>(i);
		}
		public RankSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifiersContext rankSpecifiers() {
		RankSpecifiersContext _localctx = new RankSpecifiersContext(Context, State);
		EnterRule(_localctx, 170, RULE_rankSpecifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 735;
					rankSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 738;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public RankSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifierContext rankSpecifier() {
		RankSpecifierContext _localctx = new RankSpecifierContext(Context, State);
		EnterRule(_localctx, 172, RULE_rankSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			Match(TOpenBracket);
			State = 744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 741;
				Match(TComma);
				}
				}
				State = 746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 747;
			Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnboundTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericDimensionItemContext[] genericDimensionItem() {
			return GetRuleContexts<GenericDimensionItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericDimensionItemContext genericDimensionItem(int i) {
			return GetRuleContext<GenericDimensionItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public UnboundTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unboundTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnboundTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnboundTypeNameContext unboundTypeName() {
		UnboundTypeNameContext _localctx = new UnboundTypeNameContext(Context, State);
		EnterRule(_localctx, 174, RULE_unboundTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			genericDimensionItem();
			State = 754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TDot) {
				{
				{
				State = 750;
				Match(TDot);
				State = 751;
				genericDimensionItem();
				}
				}
				State = 756;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDimensionItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericDimensionSpecifierContext genericDimensionSpecifier() {
			return GetRuleContext<GenericDimensionSpecifierContext>(0);
		}
		public GenericDimensionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDimensionItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericDimensionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericDimensionItemContext genericDimensionItem() {
		GenericDimensionItemContext _localctx = new GenericDimensionItemContext(Context, State);
		EnterRule(_localctx, 176, RULE_genericDimensionItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			identifier();
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TLessThan) {
				{
				State = 758;
				genericDimensionSpecifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDimensionSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public GenericDimensionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDimensionSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericDimensionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericDimensionSpecifierContext genericDimensionSpecifier() {
		GenericDimensionSpecifierContext _localctx = new GenericDimensionSpecifierContext(Context, State);
		EnterRule(_localctx, 178, RULE_genericDimensionSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			Match(TLessThan);
			State = 765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 762;
				Match(TComma);
				}
				}
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 768;
			Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionSignatureContext : ParserRuleContext {
		public AnonymousFunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionSignature; } }
	 
		public AnonymousFunctionSignatureContext() { }
		public virtual void CopyFrom(AnonymousFunctionSignatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleParamAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitParameterContext implicitParameter() {
			return GetRuleContext<ImplicitParameterContext>(0);
		}
		public SingleParamAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleParamAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitParameterContext[] implicitParameter() {
			return GetRuleContexts<ImplicitParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitParameterContext implicitParameter(int i) {
			return GetRuleContext<ImplicitParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ImplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitParameterContext[] explicitParameter() {
			return GetRuleContexts<ExplicitParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitParameterContext explicitParameter(int i) {
			return GetRuleContext<ExplicitParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
		AnonymousFunctionSignatureContext _localctx = new AnonymousFunctionSignatureContext(Context, State);
		EnterRule(_localctx, 180, RULE_anonymousFunctionSignature);
		int _la;
		try {
			State = 795;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				_localctx = new ExplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 770;
				Match(TOpenParenthesis);
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					State = 771;
					explicitParameter();
					State = 776;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TComma) {
						{
						{
						State = 772;
						Match(TComma);
						State = 773;
						explicitParameter();
						}
						}
						State = 778;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 781;
				Match(TCloseParenthesis);
				}
				break;
			case 2:
				_localctx = new ImplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 782;
				Match(TOpenParenthesis);
				State = 791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IdentifierNormal) {
					{
					State = 783;
					implicitParameter();
					State = 788;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TComma) {
						{
						{
						State = 784;
						Match(TComma);
						State = 785;
						implicitParameter();
						}
						}
						State = 790;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 793;
				Match(TCloseParenthesis);
				}
				break;
			case 3:
				_localctx = new SingleParamAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 794;
				implicitParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitParameterContext explicitParameter() {
		ExplicitParameterContext _localctx = new ExplicitParameterContext(Context, State);
		EnterRule(_localctx, 182, RULE_explicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			typeReference();
			State = 798;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitParameterContext implicitParameter() {
		ImplicitParameterContext _localctx = new ImplicitParameterContext(Context, State);
		EnterRule(_localctx, 184, RULE_implicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeofUnboundTypeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnboundTypeNameContext unboundTypeName() {
			return GetRuleContext<UnboundTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofUnboundTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofUnboundTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecheckExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		public TypecheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThanOrEquals() { return GetToken(MetaGeneratorParser.TLessThanOrEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TGreaterThanOrEquals() { return GetToken(MetaGeneratorParser.TGreaterThanOrEquals, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public PostExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofVoidExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofVoidExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofVoidExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAmp() { return GetToken(MetaGeneratorParser.TAmp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAnd() { return GetToken(MetaGeneratorParser.TAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		public IToken dot;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestionDot() { return GetToken(MetaGeneratorParser.TQuestionDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TExclamation() { return GetToken(MetaGeneratorParser.TExclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TTilde() { return GetToken(MetaGeneratorParser.TTilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecastExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypecastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalXorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXor() { return GetToken(MetaGeneratorParser.TXor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefinedTypeMemberAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public PredefinedTypeMemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedTypeMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseXorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THat() { return GetToken(MetaGeneratorParser.THat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
			return GetRuleContext<AnonymousFunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TArrow() { return GetToken(MetaGeneratorParser.TArrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultValueExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public DefaultValueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext thenBranch;
		public ExpressionContext elseBranch;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssignPlus() { return GetToken(MetaGeneratorParser.TAssignPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssignMinus() { return GetToken(MetaGeneratorParser.TAssignMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssignAsterisk() { return GetToken(MetaGeneratorParser.TAssignAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssignSlash() { return GetToken(MetaGeneratorParser.TAssignSlash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssignPercent() { return GetToken(MetaGeneratorParser.TAssignPercent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssignAmp() { return GetToken(MetaGeneratorParser.TAssignAmp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssignPipe() { return GetToken(MetaGeneratorParser.TAssignPipe, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssignHat() { return GetToken(MetaGeneratorParser.TAssignHat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssignLeftShift() { return GetToken(MetaGeneratorParser.TAssignLeftShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssignRightShift() { return GetToken(MetaGeneratorParser.TAssignRightShift, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAsterisk() { return GetToken(MetaGeneratorParser.TAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSlash() { return GetToken(MetaGeneratorParser.TSlash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPercent() { return GetToken(MetaGeneratorParser.TPercent, 0); }
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectOrCollectionWithConstructorExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNew() { return GetToken(MetaGeneratorParser.KNew, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public NewObjectOrCollectionWithConstructorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectOrCollectionWithConstructorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOr() { return GetToken(MetaGeneratorParser.TOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPipe() { return GetToken(MetaGeneratorParser.TPipe, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HasLoopExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KHasLoop() { return GetToken(MetaGeneratorParser.KHasLoop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		public HasLoopExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KThis() { return GetToken(MetaGeneratorParser.KThis, 0); }
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		public ElementAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofTypeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEquals() { return GetToken(MetaGeneratorParser.TEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNotEquals() { return GetToken(MetaGeneratorParser.TNotEquals, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 186;
		EnterRecursionRule(_localctx, 186, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 865;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 803;
				Match(KThis);
				}
				break;
			case 2:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 804;
				literal();
				}
				break;
			case 3:
				{
				_localctx = new TypeofVoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 805;
				Match(KTypeof);
				State = 806;
				Match(TOpenParenthesis);
				State = 807;
				Match(KVoid);
				State = 808;
				Match(TCloseParenthesis);
				}
				break;
			case 4:
				{
				_localctx = new TypeofUnboundTypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 809;
				Match(KTypeof);
				State = 810;
				Match(TOpenParenthesis);
				State = 811;
				unboundTypeName();
				State = 812;
				Match(TCloseParenthesis);
				}
				break;
			case 5:
				{
				_localctx = new TypeofTypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 814;
				Match(KTypeof);
				State = 815;
				Match(TOpenParenthesis);
				State = 816;
				typeReference();
				State = 817;
				Match(TCloseParenthesis);
				}
				break;
			case 6:
				{
				_localctx = new DefaultValueExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 819;
				Match(KDefault);
				State = 820;
				Match(TOpenParenthesis);
				State = 821;
				typeReference();
				State = 822;
				Match(TCloseParenthesis);
				}
				break;
			case 7:
				{
				_localctx = new NewObjectOrCollectionWithConstructorExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 824;
				Match(KNew);
				State = 825;
				typeReference();
				State = 826;
				Match(TOpenParenthesis);
				State = 828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (TOpenParenthesis - 70)) | (1L << (TPlus - 70)) | (1L << (TMinus - 70)) | (1L << (TExclamation - 70)) | (1L << (TTilde - 70)) | (1L << (TPlusPlus - 70)) | (1L << (TMinusMinus - 70)) | (1L << (IdentifierNormal - 70)) | (1L << (LInteger - 70)) | (1L << (LDecimal - 70)) | (1L << (LScientific - 70)) | (1L << (LDateTimeOffset - 70)) | (1L << (LDateTime - 70)) | (1L << (LDate - 70)) | (1L << (LTime - 70)) | (1L << (LChar - 70)) | (1L << (LRegularString - 70)) | (1L << (LGuid - 70)) | (1L << (LDoubleQuoteVerbatimString - 70)))) != 0)) {
					{
					State = 827;
					expressionList();
					}
				}

				State = 830;
				Match(TCloseParenthesis);
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 832;
				identifier();
				State = 834;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 833;
					typeArgumentList();
					}
					break;
				}
				}
				break;
			case 9:
				{
				_localctx = new HasLoopExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 836;
				Match(KHasLoop);
				State = 837;
				Match(TOpenParenthesis);
				State = 838;
				loopChain();
				State = 840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KWhere) {
					{
					State = 839;
					loopWhereExpression();
					}
				}

				State = 842;
				Match(TCloseParenthesis);
				}
				break;
			case 10:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 844;
				Match(TOpenParenthesis);
				State = 845;
				expression(0);
				State = 846;
				Match(TCloseParenthesis);
				}
				break;
			case 11:
				{
				_localctx = new PredefinedTypeMemberAccessExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 848;
				predefinedType();
				State = 849;
				Match(TDot);
				State = 850;
				identifier();
				State = 852;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 851;
					typeArgumentList();
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new TypecastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 854;
				Match(TOpenParenthesis);
				State = 855;
				typeReference();
				State = 856;
				Match(TCloseParenthesis);
				State = 857;
				expression(17);
				}
				break;
			case 13:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 859;
				((UnaryExpressionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (TPlus - 85)) | (1L << (TMinus - 85)) | (1L << (TExclamation - 85)) | (1L << (TTilde - 85)) | (1L << (TPlusPlus - 85)) | (1L << (TMinusMinus - 85)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 860;
				expression(16);
				}
				break;
			case 14:
				{
				_localctx = new LambdaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 861;
				anonymousFunctionSignature();
				State = 862;
				Match(TArrow);
				State = 863;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 930;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 928;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicationExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 867;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 868;
						((MultiplicationExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (TAsterisk - 89)) | (1L << (TSlash - 89)) | (1L << (TPercent - 89)))) != 0)) ) {
							((MultiplicationExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 869;
						((MultiplicationExpressionContext)_localctx).right = expression(15);
						}
						break;
					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditionExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 870;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 871;
						((AdditionExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TPlus || _la==TMinus) ) {
							((AdditionExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 872;
						((AdditionExpressionContext)_localctx).right = expression(14);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 873;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 874;
						((RelationalExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (TLessThan - 80)) | (1L << (TGreaterThan - 80)) | (1L << (TLessThanOrEquals - 80)) | (1L << (TGreaterThanOrEquals - 80)))) != 0)) ) {
							((RelationalExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 875;
						((RelationalExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 876;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 877;
						((EqualityExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TEquals || _la==TNotEquals) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 878;
						((EqualityExpressionContext)_localctx).right = expression(11);
						}
						break;
					case 5:
						{
						_localctx = new BitwiseAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 879;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 880;
						Match(TAmp);
						State = 881;
						((BitwiseAndExpressionContext)_localctx).right = expression(10);
						}
						break;
					case 6:
						{
						_localctx = new BitwiseXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseXorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 882;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 883;
						Match(THat);
						State = 884;
						((BitwiseXorExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 7:
						{
						_localctx = new BitwiseOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 885;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 886;
						Match(TPipe);
						State = 887;
						((BitwiseOrExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 8:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 888;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 889;
						Match(TAnd);
						State = 890;
						((LogicalAndExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 9:
						{
						_localctx = new LogicalXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalXorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 891;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 892;
						Match(TXor);
						State = 893;
						((LogicalXorExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 10:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 894;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 895;
						Match(TOr);
						State = 896;
						((LogicalOrExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 11:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ConditionalExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 897;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 898;
						Match(TQuestion);
						State = 899;
						((ConditionalExpressionContext)_localctx).thenBranch = expression(0);
						State = 900;
						Match(TColon);
						State = 901;
						((ConditionalExpressionContext)_localctx).elseBranch = expression(4);
						}
						break;
					case 12:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 903;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 904;
						((AssignmentExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & ((1L << (TAssign - 59)) | (1L << (TAssignPlus - 59)) | (1L << (TAssignMinus - 59)) | (1L << (TAssignAsterisk - 59)) | (1L << (TAssignSlash - 59)) | (1L << (TAssignPercent - 59)) | (1L << (TAssignAmp - 59)) | (1L << (TAssignPipe - 59)) | (1L << (TAssignHat - 59)) | (1L << (TAssignLeftShift - 59)) | (1L << (TAssignRightShift - 59)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 905;
						((AssignmentExpressionContext)_localctx).right = expression(3);
						}
						break;
					case 13:
						{
						_localctx = new ElementAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 906;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 907;
						Match(TOpenBracket);
						State = 908;
						expressionList();
						State = 909;
						Match(TCloseBracket);
						}
						break;
					case 14:
						{
						_localctx = new FunctionCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 911;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 912;
						Match(TOpenParenthesis);
						State = 914;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (TOpenParenthesis - 70)) | (1L << (TPlus - 70)) | (1L << (TMinus - 70)) | (1L << (TExclamation - 70)) | (1L << (TTilde - 70)) | (1L << (TPlusPlus - 70)) | (1L << (TMinusMinus - 70)) | (1L << (IdentifierNormal - 70)) | (1L << (LInteger - 70)) | (1L << (LDecimal - 70)) | (1L << (LScientific - 70)) | (1L << (LDateTimeOffset - 70)) | (1L << (LDateTime - 70)) | (1L << (LDate - 70)) | (1L << (LTime - 70)) | (1L << (LChar - 70)) | (1L << (LRegularString - 70)) | (1L << (LGuid - 70)) | (1L << (LDoubleQuoteVerbatimString - 70)))) != 0)) {
							{
							State = 913;
							expressionList();
							}
						}

						State = 916;
						Match(TCloseParenthesis);
						}
						break;
					case 15:
						{
						_localctx = new MemberAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 917;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 918;
						((MemberAccessExpressionContext)_localctx).dot = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TDot || _la==TQuestionDot) ) {
							((MemberAccessExpressionContext)_localctx).dot = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 919;
						identifier();
						State = 921;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
						case 1:
							{
							State = 920;
							typeArgumentList();
							}
							break;
						}
						}
						break;
					case 16:
						{
						_localctx = new PostExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 923;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 924;
						((PostExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
							((PostExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 17:
						{
						_localctx = new TypecheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypecheckExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 925;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 926;
						((TypecheckExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==KIs || _la==KAs) ) {
							((TypecheckExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 927;
						typeReference();
						}
						break;
					}
					} 
				}
				State = 932;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 188, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			identifier();
			State = 938;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 934;
					Match(TDot);
					State = 935;
					identifier();
					}
					} 
				}
				State = 940;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 190, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			identifier();
			State = 946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 942;
				Match(TComma);
				State = 943;
				identifier();
				}
				}
				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentifierNormal() { return GetToken(MetaGeneratorParser.IdentifierNormal, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 192, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			Match(IdentifierNormal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateOrTimeLiteralContext dateOrTimeLiteral() {
			return GetRuleContext<DateOrTimeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GuidLiteralContext guidLiteral() {
			return GetRuleContext<GuidLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 194, RULE_literal);
		try {
			State = 958;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 951;
				nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 952;
				booleanLiteral();
				}
				break;
			case LInteger:
			case LDecimal:
			case LScientific:
				EnterOuterAlt(_localctx, 3);
				{
				State = 953;
				numberLiteral();
				}
				break;
			case LDateTimeOffset:
			case LDateTime:
			case LDate:
			case LTime:
				EnterOuterAlt(_localctx, 4);
				{
				State = 954;
				dateOrTimeLiteral();
				}
				break;
			case LChar:
				EnterOuterAlt(_localctx, 5);
				{
				State = 955;
				charLiteral();
				}
				break;
			case LRegularString:
			case LDoubleQuoteVerbatimString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 956;
				stringLiteral();
				}
				break;
			case LGuid:
				EnterOuterAlt(_localctx, 7);
				{
				State = 957;
				guidLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNull() { return GetToken(MetaGeneratorParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 196, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960;
			Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTrue() { return GetToken(MetaGeneratorParser.KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFalse() { return GetToken(MetaGeneratorParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962;
			_la = TokenStream.LA(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 200, RULE_numberLiteral);
		try {
			State = 967;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LInteger:
				EnterOuterAlt(_localctx, 1);
				{
				State = 964;
				integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 965;
				decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 3);
				{
				State = 966;
				scientificLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LInteger() { return GetToken(MetaGeneratorParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 202, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDecimal() { return GetToken(MetaGeneratorParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 204, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LScientific() { return GetToken(MetaGeneratorParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 206, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateOrTimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateTimeLiteralContext dateTimeLiteral() {
			return GetRuleContext<DateTimeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
			return GetRuleContext<DateTimeOffsetLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeLiteralContext timeLiteral() {
			return GetRuleContext<TimeLiteralContext>(0);
		}
		public DateOrTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateOrTimeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateOrTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateOrTimeLiteralContext dateOrTimeLiteral() {
		DateOrTimeLiteralContext _localctx = new DateOrTimeLiteralContext(Context, State);
		EnterRule(_localctx, 208, RULE_dateOrTimeLiteral);
		try {
			State = 979;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LDateTime:
				EnterOuterAlt(_localctx, 1);
				{
				State = 975;
				dateTimeLiteral();
				}
				break;
			case LDateTimeOffset:
				EnterOuterAlt(_localctx, 2);
				{
				State = 976;
				dateTimeOffsetLiteral();
				}
				break;
			case LDate:
				EnterOuterAlt(_localctx, 3);
				{
				State = 977;
				dateLiteral();
				}
				break;
			case LTime:
				EnterOuterAlt(_localctx, 4);
				{
				State = 978;
				timeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeOffsetLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDateTimeOffset() { return GetToken(MetaGeneratorParser.LDateTimeOffset, 0); }
		public DateTimeOffsetLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeOffsetLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeOffsetLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
		DateTimeOffsetLiteralContext _localctx = new DateTimeOffsetLiteralContext(Context, State);
		EnterRule(_localctx, 210, RULE_dateTimeOffsetLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			Match(LDateTimeOffset);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDateTime() { return GetToken(MetaGeneratorParser.LDateTime, 0); }
		public DateTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeLiteralContext dateTimeLiteral() {
		DateTimeLiteralContext _localctx = new DateTimeLiteralContext(Context, State);
		EnterRule(_localctx, 212, RULE_dateTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 983;
			Match(LDateTime);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDate() { return GetToken(MetaGeneratorParser.LDate, 0); }
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(Context, State);
		EnterRule(_localctx, 214, RULE_dateLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985;
			Match(LDate);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTime() { return GetToken(MetaGeneratorParser.LTime, 0); }
		public TimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeLiteralContext timeLiteral() {
		TimeLiteralContext _localctx = new TimeLiteralContext(Context, State);
		EnterRule(_localctx, 216, RULE_timeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987;
			Match(LTime);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LChar() { return GetToken(MetaGeneratorParser.LChar, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 218, RULE_charLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989;
			Match(LChar);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRegularString() { return GetToken(MetaGeneratorParser.LRegularString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDoubleQuoteVerbatimString() { return GetToken(MetaGeneratorParser.LDoubleQuoteVerbatimString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 220, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 991;
			_la = TokenStream.LA(1);
			if ( !(_la==LRegularString || _la==LDoubleQuoteVerbatimString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LGuid() { return GetToken(MetaGeneratorParser.LGuid, 0); }
		public GuidLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guidLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuidLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuidLiteralContext guidLiteral() {
		GuidLiteralContext _localctx = new GuidLiteralContext(Context, State);
		EnterRule(_localctx, 222, RULE_guidLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993;
			Match(LGuid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 46: return loopChainExpression_sempred((LoopChainExpressionContext)_localctx, predIndex);
		case 93: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool loopChainExpression_sempred(LoopChainExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 21);
		case 15: return Precpred(Context, 20);
		case 16: return Precpred(Context, 18);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 11);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x86', '\x3E6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\xE6', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xE9', '\v', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\xEC', '\n', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\xEF', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xF2', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x5', '\x4', '\xFB', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x101', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x105', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x111', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x115', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x119', '\n', '\x6', '\x3', '\x6', '\a', '\x6', '\x11C', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '\x11F', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x128', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x12F', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x132', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x137', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x13C', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x14A', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x14E', '\n', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', '\x155', '\n', '\f', '\f', '\f', '\xE', '\f', '\x158', '\v', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x15E', 
		'\n', '\r', '\x3', '\xE', '\a', '\xE', '\x161', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\x164', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x16D', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x172', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\a', '\x13', '\x17D', '\n', '\x13', '\f', '\x13', 
		'\xE', '\x13', '\x180', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\x185', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', 
		'\x192', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x195', '\v', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x198', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x1B9', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1BD', '\n', 
		' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1C1', '\n', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x1CA', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', 
		'*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x5', ',', '\x1EF', '\n', ',', '\x3', ',', 
		'\x5', ',', '\x1F2', '\n', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\a', '.', '\x1FC', 
		'\n', '.', '\f', '.', '\xE', '.', '\x1FF', '\v', '.', '\x3', '/', '\x5', 
		'/', '\x202', '\n', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', 
		'\x207', '\n', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x213', '\n', '\x30', '\x5', '\x30', '\x215', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x21B', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x220', '\n', '\x30', '\x3', '\x30', '\a', '\x30', 
		'\x223', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x226', '\v', '\x30', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x235', '\n', 
		'\x34', '\f', '\x34', '\xE', '\x34', '\x238', '\v', '\x34', '\x3', '\x34', 
		'\x5', '\x34', '\x23B', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x24C', '\n', '\x38', 
		'\x3', '\x39', '\x6', '\x39', '\x24F', '\n', '\x39', '\r', '\x39', '\xE', 
		'\x39', '\x250', '\x3', ':', '\x3', ':', '\x5', ':', '\x255', '\n', ':', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', 
		'\x273', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\a', 
		'\x42', '\x278', '\n', '\x42', '\f', '\x42', '\xE', '\x42', '\x27B', '\v', 
		'\x42', '\x3', '\x43', '\a', '\x43', '\x27E', '\n', '\x43', '\f', '\x43', 
		'\xE', '\x43', '\x281', '\v', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x287', '\n', '\x44', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x3', 'G', '\x5', 
		'G', '\x28F', '\n', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', 
		'\x2A6', '\n', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 
		'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\a', 'K', '\x2B1', 
		'\n', 'K', '\f', 'K', '\xE', 'K', '\x2B4', '\v', 'K', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x2BA', '\n', 'L', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', 
		'\x2C2', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 
		'P', '\x5', 'P', '\x2C9', '\n', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'R', '\x3', 'R', '\x5', 'R', '\x2D0', '\n', 'R', '\x3', 'S', '\x3', 
		'S', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x2D6', '\n', 'T', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\a', 'U', '\x2DB', '\n', 'U', '\f', 'U', '\xE', 
		'U', '\x2DE', '\v', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x6', 'W', 
		'\x2E3', '\n', 'W', '\r', 'W', '\xE', 'W', '\x2E4', '\x3', 'X', '\x3', 
		'X', '\a', 'X', '\x2E9', '\n', 'X', '\f', 'X', '\xE', 'X', '\x2EC', '\v', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\a', 
		'Y', '\x2F3', '\n', 'Y', '\f', 'Y', '\xE', 'Y', '\x2F6', '\v', 'Y', '\x3', 
		'Z', '\x3', 'Z', '\x5', 'Z', '\x2FA', '\n', 'Z', '\x3', '[', '\x3', '[', 
		'\a', '[', '\x2FE', '\n', '[', '\f', '[', '\xE', '[', '\x301', '\v', '[', 
		'\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', 
		'\\', '\a', '\\', '\x309', '\n', '\\', '\f', '\\', '\xE', '\\', '\x30C', 
		'\v', '\\', '\x5', '\\', '\x30E', '\n', '\\', '\x3', '\\', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\a', '\\', '\x315', '\n', '\\', 
		'\f', '\\', '\xE', '\\', '\x318', '\v', '\\', '\x5', '\\', '\x31A', '\n', 
		'\\', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\x31E', '\n', '\\', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x5', '_', '\x33F', '\n', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x5', '_', '\x345', '\n', '_', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x5', '_', '\x34B', '\n', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x5', '_', '\x357', '\n', '_', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x5', '_', '\x364', '\n', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x5', '_', 
		'\x395', '\n', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x5', '_', '\x39C', '\n', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\a', '_', '\x3A3', '\n', '_', '\f', '_', '\xE', 
		'_', '\x3A6', '\v', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\a', '`', 
		'\x3AB', '\n', '`', '\f', '`', '\xE', '`', '\x3AE', '\v', '`', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\a', '\x61', '\x3B3', '\n', '\x61', 
		'\f', '\x61', '\xE', '\x61', '\x3B6', '\v', '\x61', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\x3C1', '\n', '\x63', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x3CA', '\n', '\x66', '\x3', 
		'g', '\x3', 'g', '\x3', 'h', '\x3', 'h', '\x3', 'i', '\x3', 'i', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\x3D6', '\n', 'j', 
		'\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'm', '\x3', 'm', 
		'\x3', 'n', '\x3', 'n', '\x3', 'o', '\x3', 'o', '\x3', 'p', '\x3', 'p', 
		'\x3', 'q', '\x3', 'q', '\x3', 'q', '\x2', '\x4', '^', '\xBC', 'r', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', 
		'\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', 
		'|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', 
		'\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', 
		'\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', 
		'\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', 
		'\xC6', '\xC8', '\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', 
		'\xD8', '\xDA', '\xDC', '\xDE', '\xE0', '\x2', '\xF', '\x3', '\x2', ':', 
		';', '\x4', '\x2', '}', '}', '\x7F', '\x80', '\x3', '\x2', '#', '\x31', 
		'\x4', '\x2', 'W', 'Z', '^', '_', '\x3', '\x2', '[', ']', '\x3', '\x2', 
		'W', 'X', '\x3', '\x2', 'R', 'U', '\x3', '\x2', 'N', 'O', '\x3', '\x2', 
		'=', 'G', '\x3', '\x2', '^', '_', '\x3', '\x2', '\x34', '\x35', '\x3', 
		'\x2', '!', '\"', '\x4', '\x2', 'q', 'q', 'y', 'y', '\x2', '\x406', '\x2', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\x4', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\xFA', '\x3', '\x2', '\x2', '\x2', '\b', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x116', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\xE', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x12', '\x140', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x145', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x18', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x162', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x16C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x171', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\"', '\x176', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x178', '\x3', '\x2', '\x2', '\x2', '&', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x186', '\x3', '\x2', '\x2', '\x2', '*', '\x189', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x30', '\x19B', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x34', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x1A6', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x1AC', '\x3', '\x2', '\x2', '\x2', ':', '\x1AE', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x1B1', '\x3', '\x2', '\x2', '\x2', '>', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x1C4', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1CB', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1CF', '\x3', '\x2', '\x2', '\x2', 'H', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1D9', '\x3', '\x2', '\x2', '\x2', 'N', '\x1DD', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1DF', '\x3', '\x2', '\x2', '\x2', 'R', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x1EA', '\x3', '\x2', '\x2', '\x2', 'X', '\x1F5', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\\', '\x206', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x214', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x227', '\x3', '\x2', '\x2', '\x2', '\x62', '\x22A', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x66', '\x232', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x23E', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x243', '\x3', '\x2', '\x2', '\x2', 'l', '\x246', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x24B', '\x3', '\x2', '\x2', '\x2', 'p', '\x24E', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x254', '\x3', '\x2', '\x2', '\x2', 
		't', '\x256', '\x3', '\x2', '\x2', '\x2', 'v', '\x25A', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x25F', '\x3', '\x2', '\x2', '\x2', 'z', '\x264', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x267', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x80', '\x26E', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x279', '\x3', '\x2', '\x2', '\x2', '\x84', '\x27F', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x286', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x288', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x28A', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x2A7', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x94', '\x2AD', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x98', '\x2BB', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x2C1', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x2CF', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x2D1', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x2D7', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x2E2', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x2E6', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x2F7', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x31D', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x31F', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x322', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x363', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x3AF', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\x3B7', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\x3C0', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x3C2', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\x3C4', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x3C9', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\x3CB', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\x3CD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x3CF', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x3D7', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\x3D9', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\x3DB', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x3DD', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x3E1', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\x3E3', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\x5', '\x4', '\x3', '\x2', '\xE3', '\xE7', '\x5', '\x6', 
		'\x4', '\x2', '\xE4', '\xE6', '\x5', '\b', '\x5', '\x2', '\xE5', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xEC', '\x5', '\n', '\x6', '\x2', 
		'\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEF', 
		'\x5', '\xE', '\b', '\x2', '\xEE', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xF4', '\a', '\x2', '\x2', '\x3', '\xF4', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF6', '\a', '\x3', '\x2', '\x2', '\xF6', '\xF7', 
		'\x5', '\xBE', '`', '\x2', '\xF7', '\xF8', '\a', '\x38', '\x2', '\x2', 
		'\xF8', '\x5', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFB', '\a', '\x4', 
		'\x2', '\x2', '\xFA', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFD', '\a', '\x5', '\x2', '\x2', '\xFD', '\x100', '\x5', '\xC2', 
		'\x62', '\x2', '\xFE', '\xFF', '\a', '\x39', '\x2', '\x2', '\xFF', '\x101', 
		'\x5', '\xBE', '`', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x103', '\a', '\x12', '\x2', '\x2', '\x103', 
		'\x105', '\x5', '\x96', 'L', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\a', '\x38', '\x2', '\x2', 
		'\x107', '\a', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\a', '\x6', 
		'\x2', '\x2', '\x109', '\x10A', '\x5', '\xBE', '`', '\x2', '\x10A', '\x10B', 
		'\a', '\x38', '\x2', '\x2', '\x10B', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10D', '\a', '\x6', '\x2', '\x2', '\x10D', '\x10E', '\a', '\x5', 
		'\x2', '\x2', '\x10E', '\x110', '\x5', '\xBE', '`', '\x2', '\x10F', '\x111', 
		'\x5', '\xC2', '\x62', '\x2', '\x110', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x113', '\a', '\x38', '\x2', '\x2', '\x113', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x114', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x115', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x118', '\a', '\b', '\x2', '\x2', '\x117', 
		'\x119', '\x5', '\xC2', '\x62', '\x2', '\x118', '\x117', '\x3', '\x2', 
		'\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x11C', '\x5', '\f', '\a', '\x2', 
		'\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', 
		'\a', '\x11', '\x2', '\x2', '\x121', '\x122', '\a', '\b', '\x2', '\x2', 
		'\x122', '\v', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x5', '\x96', 
		'L', '\x2', '\x124', '\x127', '\x5', '\xC2', '\x62', '\x2', '\x125', '\x126', 
		'\a', '=', '\x2', '\x2', '\x126', '\x128', '\x5', '\xBC', '_', '\x2', 
		'\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12A', '\a', '\x38', '\x2', '\x2', '\x12A', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\a', '\b', '\x2', '\x2', '\x12C', '\x130', '\x5', 
		'\xC2', '\x62', '\x2', '\x12D', '\x12F', '\x5', '\f', '\a', '\x2', '\x12E', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x130', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\a', 
		'\x11', '\x2', '\x2', '\x134', '\x135', '\a', '\b', '\x2', '\x2', '\x135', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x136', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x137', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x13C', '\x5', '\x12', '\n', '\x2', '\x139', 
		'\x13C', '\x5', '~', '@', '\x2', '\x13A', '\x13C', '\x5', '\x10', '\t', 
		'\x2', '\x13B', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\xF', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\a', '\v', 
		'\x2', '\x2', '\x13E', '\x13F', '\x5', '\x14', '\v', '\x2', '\x13F', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x5', '\x14', '\v', '\x2', 
		'\x141', '\x142', '\x5', '\x1A', '\xE', '\x2', '\x142', '\x143', '\a', 
		'\x11', '\x2', '\x2', '\x143', '\x144', '\a', '\n', '\x2', '\x2', '\x144', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\a', '\n', '\x2', 
		'\x2', '\x146', '\x147', '\x5', '\xA6', 'T', '\x2', '\x147', '\x149', 
		'\x5', '\xC2', '\x62', '\x2', '\x148', '\x14A', '\x5', '\x90', 'I', '\x2', 
		'\x149', '\x148', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14D', '\a', 'H', '\x2', '\x2', '\x14C', '\x14E', '\x5', '\x16', '\f', 
		'\x2', '\x14D', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x150', '\a', 'I', '\x2', '\x2', '\x150', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x151', '\x156', '\x5', '\x18', '\r', '\x2', '\x152', '\x153', 
		'\a', '<', '\x2', '\x2', '\x153', '\x155', '\x5', '\x18', '\r', '\x2', 
		'\x154', '\x152', '\x3', '\x2', '\x2', '\x2', '\x155', '\x158', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x156', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', 
		'\x5', '\x96', 'L', '\x2', '\x15A', '\x15D', '\x5', '\xC2', '\x62', '\x2', 
		'\x15B', '\x15C', '\a', '=', '\x2', '\x2', '\x15C', '\x15E', '\x5', '\xBC', 
		'_', '\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x161', '\x5', '\x1C', '\xF', '\x2', '\x160', '\x15F', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x164', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x164', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x16D', '\x5', ' ', '\x11', '\x2', 
		'\x166', '\x16D', '\x5', '.', '\x18', '\x2', '\x167', '\x16D', '\x5', 
		'<', '\x1F', '\x2', '\x168', '\x16D', '\x5', '\x44', '#', '\x2', '\x169', 
		'\x16D', '\x5', 'L', '\'', '\x2', '\x16A', '\x16D', '\x5', 'T', '+', '\x2', 
		'\x16B', '\x16D', '\x5', '\x66', '\x34', '\x2', '\x16C', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x166', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x172', '\x5', 
		'\"', '\x12', '\x2', '\x16F', '\x172', '\x5', '*', '\x16', '\x2', '\x170', 
		'\x172', '\x5', ',', '\x17', '\x2', '\x171', '\x16E', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x171', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x174', '\x5', '\x1E', '\x10', '\x2', '\x174', '\x175', '\a', 
		'\x38', '\x2', '\x2', '\x175', '!', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x177', '\x5', '$', '\x13', '\x2', '\x177', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '\x179', '\x5', '\x96', 'L', '\x2', '\x179', '\x17E', 
		'\x5', '&', '\x14', '\x2', '\x17A', '\x17B', '\a', '<', '\x2', '\x2', 
		'\x17B', '\x17D', '\x5', '&', '\x14', '\x2', '\x17C', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x180', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '%', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17E', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x184', '\x5', '\xC2', '\x62', '\x2', '\x182', 
		'\x183', '\a', '=', '\x2', '\x2', '\x183', '\x185', '\x5', '\xBC', '_', 
		'\x2', '\x184', '\x182', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x187', '\a', '\x10', '\x2', '\x2', '\x187', '\x188', '\x5', 
		'\xBC', '_', '\x2', '\x188', ')', '\x3', '\x2', '\x2', '\x2', '\x189', 
		'\x18A', '\a', '\f', '\x2', '\x2', '\x18A', '\x18B', '\x5', '\xBC', '_', 
		'\x2', '\x18B', '+', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\x5', 
		'\xBC', '_', '\x2', '\x18D', '-', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x18F', '\x5', '\x34', '\x1B', '\x2', '\x18F', '\x193', '\x5', '\x1A', 
		'\xE', '\x2', '\x190', '\x192', '\x5', '\x30', '\x19', '\x2', '\x191', 
		'\x190', '\x3', '\x2', '\x2', '\x2', '\x192', '\x195', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x191', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x197', '\x3', '\x2', '\x2', '\x2', 
		'\x195', '\x193', '\x3', '\x2', '\x2', '\x2', '\x196', '\x198', '\x5', 
		'\x32', '\x1A', '\x2', '\x197', '\x196', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x19A', '\x5', ':', '\x1E', '\x2', '\x19A', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x19B', '\x19C', '\x5', '\x36', '\x1C', '\x2', '\x19C', 
		'\x19D', '\x5', '\x1A', '\xE', '\x2', '\x19D', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x19F', '\x5', '\x38', '\x1D', '\x2', '\x19F', '\x1A0', 
		'\x5', '\x1A', '\xE', '\x2', '\x1A0', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x1A1', '\x1A2', '\a', '\x15', '\x2', '\x2', '\x1A2', '\x1A3', '\a', 
		'H', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', '\xBC', '_', '\x2', '\x1A4', 
		'\x1A5', '\a', 'I', '\x2', '\x2', '\x1A5', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '\x1A7', '\a', '\x16', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\a', '\x15', '\x2', '\x2', '\x1A8', '\x1A9', '\a', 'H', '\x2', '\x2', 
		'\x1A9', '\x1AA', '\x5', '\xBC', '_', '\x2', '\x1AA', '\x1AB', '\a', 'I', 
		'\x2', '\x2', '\x1AB', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', 
		'\a', '\x16', '\x2', '\x2', '\x1AD', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AF', '\a', '\x11', '\x2', '\x2', '\x1AF', '\x1B0', '\a', 
		'\x15', '\x2', '\x2', '\x1B0', ';', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1B2', '\x5', '>', ' ', '\x2', '\x1B2', '\x1B3', '\x5', '\x1A', '\xE', 
		'\x2', '\x1B3', '\x1B4', '\x5', '@', '!', '\x2', '\x1B4', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\a', '\x12', '\x2', '\x2', '\x1B6', 
		'\x1B8', '\a', 'H', '\x2', '\x2', '\x1B7', '\x1B9', '\x5', '\x42', '\"', 
		'\x2', '\x1B8', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA', '\x1BC', '\a', '\x38', '\x2', '\x2', '\x1BB', '\x1BD', '\x5', 
		'\xA8', 'U', '\x2', '\x1BC', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\x1C0', '\a', '\x38', '\x2', '\x2', '\x1BF', '\x1C1', 
		'\x5', '\xA8', 'U', '\x2', '\x1C0', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\a', 'I', '\x2', '\x2', '\x1C3', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\a', '\x11', '\x2', 
		'\x2', '\x1C5', '\x1C6', '\a', '\x12', '\x2', '\x2', '\x1C6', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1CA', '\x5', '$', '\x13', '\x2', 
		'\x1C8', '\x1CA', '\x5', '\xA8', 'U', '\x2', '\x1C9', '\x1C7', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\x5', '\x46', '$', 
		'\x2', '\x1CC', '\x1CD', '\x5', '\x1A', '\xE', '\x2', '\x1CD', '\x1CE', 
		'\x5', 'H', '%', '\x2', '\x1CE', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1CF', 
		'\x1D0', '\a', '\x19', '\x2', '\x2', '\x1D0', '\x1D1', '\a', 'H', '\x2', 
		'\x2', '\x1D1', '\x1D2', '\x5', '\xBC', '_', '\x2', '\x1D2', '\x1D3', 
		'\a', 'I', '\x2', '\x2', '\x1D3', 'G', '\x3', '\x2', '\x2', '\x2', '\x1D4', 
		'\x1D5', '\a', '\x11', '\x2', '\x2', '\x1D5', '\x1D6', '\a', '\x19', '\x2', 
		'\x2', '\x1D6', 'I', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\x5', 
		'\x64', '\x33', '\x2', '\x1D8', 'K', '\x3', '\x2', '\x2', '\x2', '\x1D9', 
		'\x1DA', '\x5', 'N', '(', '\x2', '\x1DA', '\x1DB', '\x5', '\x1A', '\xE', 
		'\x2', '\x1DB', '\x1DC', '\x5', 'P', ')', '\x2', '\x1DC', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\a', '\x17', '\x2', '\x2', '\x1DE', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\a', '\x18', '\x2', 
		'\x2', '\x1E0', '\x1E1', '\a', 'H', '\x2', '\x2', '\x1E1', '\x1E2', '\x5', 
		'\xBC', '_', '\x2', '\x1E2', '\x1E3', '\a', 'I', '\x2', '\x2', '\x1E3', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\x5', '\x64', '\x33', 
		'\x2', '\x1E5', 'S', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x5', 
		'V', ',', '\x2', '\x1E7', '\x1E8', '\x5', '\x1A', '\xE', '\x2', '\x1E8', 
		'\x1E9', '\x5', 'X', '-', '\x2', '\x1E9', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x1EB', '\a', '\x1A', '\x2', '\x2', '\x1EB', '\x1EC', '\a', 
		'H', '\x2', '\x2', '\x1EC', '\x1EE', '\x5', 'Z', '.', '\x2', '\x1ED', 
		'\x1EF', '\x5', '`', '\x31', '\x2', '\x1EE', '\x1ED', '\x3', '\x2', '\x2', 
		'\x2', '\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F2', '\x5', '\x62', '\x32', '\x2', 
		'\x1F1', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\x3', 
		'\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F3', 
		'\x1F4', '\a', 'I', '\x2', '\x2', '\x1F4', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1F6', '\a', '\x11', '\x2', '\x2', '\x1F6', '\x1F7', '\a', 
		'\x1A', '\x2', '\x2', '\x1F7', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
		'\x1FD', '\x5', '\\', '/', '\x2', '\x1F9', '\x1FA', '\a', 'Q', '\x2', 
		'\x2', '\x1FA', '\x1FC', '\x5', '\\', '/', '\x2', '\x1FB', '\x1F9', '\x3', 
		'\x2', '\x2', '\x2', '\x1FC', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\x3', '\x2', '\x2', 
		'\x2', '\x1FE', '[', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FD', '\x3', 
		'\x2', '\x2', '\x2', '\x200', '\x202', '\x5', '\x96', 'L', '\x2', '\x201', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\x3', '\x2', '\x2', 
		'\x2', '\x202', '\x203', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', 
		'\x5', '\xC2', '\x62', '\x2', '\x204', '\x205', '\a', '\x39', '\x2', '\x2', 
		'\x205', '\x207', '\x3', '\x2', '\x2', '\x2', '\x206', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x208', '\x209', '\x5', '^', '\x30', 
		'\x2', '\x209', ']', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', '\b', 
		'\x30', '\x1', '\x2', '\x20B', '\x20C', '\a', '\x36', '\x2', '\x2', '\x20C', 
		'\x20D', '\a', 'H', '\x2', '\x2', '\x20D', '\x20E', '\x5', '\x96', 'L', 
		'\x2', '\x20E', '\x20F', '\a', 'I', '\x2', '\x2', '\x20F', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\x210', '\x212', '\x5', '\xC2', '\x62', '\x2', '\x211', 
		'\x213', '\x5', '\x90', 'I', '\x2', '\x212', '\x211', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x213', '\x3', '\x2', '\x2', '\x2', '\x213', '\x215', 
		'\x3', '\x2', '\x2', '\x2', '\x214', '\x20A', '\x3', '\x2', '\x2', '\x2', 
		'\x214', '\x210', '\x3', '\x2', '\x2', '\x2', '\x215', '\x224', '\x3', 
		'\x2', '\x2', '\x2', '\x216', '\x217', '\f', '\x4', '\x2', '\x2', '\x217', 
		'\x218', '\t', '\x2', '\x2', '\x2', '\x218', '\x21A', '\x5', '\xC2', '\x62', 
		'\x2', '\x219', '\x21B', '\x5', '\x90', 'I', '\x2', '\x21A', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x223', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21D', '\f', 
		'\x3', '\x2', '\x2', '\x21D', '\x21F', '\a', 'H', '\x2', '\x2', '\x21E', 
		'\x220', '\x5', '\xA8', 'U', '\x2', '\x21F', '\x21E', '\x3', '\x2', '\x2', 
		'\x2', '\x21F', '\x220', '\x3', '\x2', '\x2', '\x2', '\x220', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x221', '\x223', '\a', 'I', '\x2', '\x2', 
		'\x222', '\x216', '\x3', '\x2', '\x2', '\x2', '\x222', '\x21C', '\x3', 
		'\x2', '\x2', '\x2', '\x223', '\x226', '\x3', '\x2', '\x2', '\x2', '\x224', 
		'\x222', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\x3', '\x2', '\x2', 
		'\x2', '\x225', '_', '\x3', '\x2', '\x2', '\x2', '\x226', '\x224', '\x3', 
		'\x2', '\x2', '\x2', '\x227', '\x228', '\a', '\x1C', '\x2', '\x2', '\x228', 
		'\x229', '\x5', '\xBC', '_', '\x2', '\x229', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x22B', '\x5', '\x64', '\x33', '\x2', '\x22B', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', '\a', '\x38', '\x2', '\x2', 
		'\x22D', '\x22E', '\a', '\x1F', '\x2', '\x2', '\x22E', '\x22F', '\x5', 
		'\xC2', '\x62', '\x2', '\x22F', '\x230', '\a', '=', '\x2', '\x2', '\x230', 
		'\x231', '\x5', '\xDE', 'p', '\x2', '\x231', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x232', '\x236', '\x5', 'h', '\x35', '\x2', '\x233', '\x235', 
		'\x5', 'l', '\x37', '\x2', '\x234', '\x233', '\x3', '\x2', '\x2', '\x2', 
		'\x235', '\x238', '\x3', '\x2', '\x2', '\x2', '\x236', '\x234', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x237', '\x3', '\x2', '\x2', '\x2', '\x237', 
		'\x23A', '\x3', '\x2', '\x2', '\x2', '\x238', '\x236', '\x3', '\x2', '\x2', 
		'\x2', '\x239', '\x23B', '\x5', 'z', '>', '\x2', '\x23A', '\x239', '\x3', 
		'\x2', '\x2', '\x2', '\x23A', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x23B', 
		'\x23C', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', '\x5', 'j', '\x36', 
		'\x2', '\x23D', 'g', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x23F', '\a', 
		'\r', '\x2', '\x2', '\x23F', '\x240', '\a', 'H', '\x2', '\x2', '\x240', 
		'\x241', '\x5', '\xBC', '_', '\x2', '\x241', '\x242', '\a', 'I', '\x2', 
		'\x2', '\x242', 'i', '\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\a', 
		'\x11', '\x2', '\x2', '\x244', '\x245', '\a', '\r', '\x2', '\x2', '\x245', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x246', '\x247', '\x5', 'n', '\x38', 
		'\x2', '\x247', '\x248', '\x5', '\x1A', '\xE', '\x2', '\x248', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x249', '\x24C', '\x5', 'p', '\x39', '\x2', '\x24A', 
		'\x24C', '\x5', 'x', '=', '\x2', '\x24B', '\x249', '\x3', '\x2', '\x2', 
		'\x2', '\x24B', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24C', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x24D', '\x24F', '\x5', 'r', ':', '\x2', '\x24E', 
		'\x24D', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\x3', '\x2', '\x2', 
		'\x2', '\x250', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x250', '\x251', 
		'\x3', '\x2', '\x2', '\x2', '\x251', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x252', '\x255', '\x5', 't', ';', '\x2', '\x253', '\x255', '\x5', 'v', 
		'<', '\x2', '\x254', '\x252', '\x3', '\x2', '\x2', '\x2', '\x254', '\x253', 
		'\x3', '\x2', '\x2', '\x2', '\x255', 's', '\x3', '\x2', '\x2', '\x2', 
		'\x256', '\x257', '\a', '\xE', '\x2', '\x2', '\x257', '\x258', '\x5', 
		'\xA8', 'U', '\x2', '\x258', '\x259', '\a', '\x39', '\x2', '\x2', '\x259', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25B', '\a', '\xF', '\x2', 
		'\x2', '\x25B', '\x25C', '\a', '\x34', '\x2', '\x2', '\x25C', '\x25D', 
		'\x5', '\x94', 'K', '\x2', '\x25D', '\x25E', '\a', '\x39', '\x2', '\x2', 
		'\x25E', 'w', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x260', '\a', '\xF', 
		'\x2', '\x2', '\x260', '\x261', '\a', '\x35', '\x2', '\x2', '\x261', '\x262', 
		'\x5', '\x96', 'L', '\x2', '\x262', '\x263', '\a', '\x39', '\x2', '\x2', 
		'\x263', 'y', '\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\x5', '|', 
		'?', '\x2', '\x265', '\x266', '\x5', '\x1A', '\xE', '\x2', '\x266', '{', 
		'\x3', '\x2', '\x2', '\x2', '\x267', '\x268', '\a', '\x37', '\x2', '\x2', 
		'\x268', '\x269', '\a', '\x39', '\x2', '\x2', '\x269', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x26A', '\x26B', '\x5', '\x80', '\x41', '\x2', '\x26B', 
		'\x26C', '\x5', '\x82', '\x42', '\x2', '\x26C', '\x26D', '\a', '|', '\x2', 
		'\x2', '\x26D', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26F', 
		'\a', '\t', '\x2', '\x2', '\x26F', '\x270', '\x5', '\xC2', '\x62', '\x2', 
		'\x270', '\x272', '\a', 'H', '\x2', '\x2', '\x271', '\x273', '\x5', '\x16', 
		'\f', '\x2', '\x272', '\x271', '\x3', '\x2', '\x2', '\x2', '\x272', '\x273', 
		'\x3', '\x2', '\x2', '\x2', '\x273', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x274', '\x275', '\a', 'I', '\x2', '\x2', '\x275', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x276', '\x278', '\x5', '\x84', '\x43', '\x2', '\x277', 
		'\x276', '\x3', '\x2', '\x2', '\x2', '\x278', '\x27B', '\x3', '\x2', '\x2', 
		'\x2', '\x279', '\x277', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x27B', '\x279', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27E', '\x5', 
		'\x86', '\x44', '\x2', '\x27D', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27E', 
		'\x281', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x27D', '\x3', '\x2', '\x2', 
		'\x2', '\x27F', '\x280', '\x3', '\x2', '\x2', '\x2', '\x280', '\x282', 
		'\x3', '\x2', '\x2', '\x2', '\x281', '\x27F', '\x3', '\x2', '\x2', '\x2', 
		'\x282', '\x283', '\x5', '\x8A', '\x46', '\x2', '\x283', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x284', '\x287', '\x5', '\x88', '\x45', '\x2', '\x285', 
		'\x287', '\x5', '\x8C', 'G', '\x2', '\x286', '\x284', '\x3', '\x2', '\x2', 
		'\x2', '\x286', '\x285', '\x3', '\x2', '\x2', '\x2', '\x287', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x288', '\x289', '\a', '~', '\x2', '\x2', 
		'\x289', '\x89', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x28B', '\t', '\x3', 
		'\x2', '\x2', '\x28B', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28E', 
		'\a', '\x81', '\x2', '\x2', '\x28D', '\x28F', '\x5', '\x8E', 'H', '\x2', 
		'\x28E', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28F', '\x3', 
		'\x2', '\x2', '\x2', '\x28F', '\x290', '\x3', '\x2', '\x2', '\x2', '\x290', 
		'\x291', '\a', '\x82', '\x2', '\x2', '\x291', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x292', '\x2A6', '\x5', '(', '\x15', '\x2', '\x293', '\x2A6', 
		'\x5', '\"', '\x12', '\x2', '\x294', '\x2A6', '\x5', ',', '\x17', '\x2', 
		'\x295', '\x2A6', '\x5', '\x34', '\x1B', '\x2', '\x296', '\x2A6', '\x5', 
		'\x36', '\x1C', '\x2', '\x297', '\x2A6', '\x5', '\x38', '\x1D', '\x2', 
		'\x298', '\x2A6', '\x5', ':', '\x1E', '\x2', '\x299', '\x2A6', '\x5', 
		'>', ' ', '\x2', '\x29A', '\x2A6', '\x5', '@', '!', '\x2', '\x29B', '\x2A6', 
		'\x5', '\x46', '$', '\x2', '\x29C', '\x2A6', '\x5', 'H', '%', '\x2', '\x29D', 
		'\x2A6', '\x5', 'N', '(', '\x2', '\x29E', '\x2A6', '\x5', 'P', ')', '\x2', 
		'\x29F', '\x2A6', '\x5', 'V', ',', '\x2', '\x2A0', '\x2A6', '\x5', 'X', 
		'-', '\x2', '\x2A1', '\x2A6', '\x5', 'h', '\x35', '\x2', '\x2A2', '\x2A6', 
		'\x5', 'j', '\x36', '\x2', '\x2A3', '\x2A6', '\x5', 'n', '\x38', '\x2', 
		'\x2A4', '\x2A6', '\x5', '|', '?', '\x2', '\x2A5', '\x292', '\x3', '\x2', 
		'\x2', '\x2', '\x2A5', '\x293', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x294', 
		'\x3', '\x2', '\x2', '\x2', '\x2A5', '\x295', '\x3', '\x2', '\x2', '\x2', 
		'\x2A5', '\x296', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x297', '\x3', 
		'\x2', '\x2', '\x2', '\x2A5', '\x298', '\x3', '\x2', '\x2', '\x2', '\x2A5', 
		'\x299', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x29A', '\x3', '\x2', '\x2', 
		'\x2', '\x2A5', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x29C', 
		'\x3', '\x2', '\x2', '\x2', '\x2A5', '\x29D', '\x3', '\x2', '\x2', '\x2', 
		'\x2A5', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x29F', '\x3', 
		'\x2', '\x2', '\x2', '\x2A5', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A5', 
		'\x2A1', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A2', '\x3', '\x2', '\x2', 
		'\x2', '\x2A5', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A4', 
		'\x3', '\x2', '\x2', '\x2', '\x2A6', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x2A7', '\x2A8', '\a', 'R', '\x2', '\x2', '\x2A8', '\x2A9', '\x5', '\x94', 
		'K', '\x2', '\x2A9', '\x2AA', '\a', 'S', '\x2', '\x2', '\x2AA', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AC', '\t', '\x4', '\x2', '\x2', 
		'\x2AC', '\x93', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2B2', '\x5', 
		'\x96', 'L', '\x2', '\x2AE', '\x2AF', '\a', '<', '\x2', '\x2', '\x2AF', 
		'\x2B1', '\x5', '\x96', 'L', '\x2', '\x2B0', '\x2AE', '\x3', '\x2', '\x2', 
		'\x2', '\x2B1', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B0', 
		'\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', '\x3', '\x2', '\x2', '\x2', 
		'\x2B3', '\x95', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B2', '\x3', 
		'\x2', '\x2', '\x2', '\x2B5', '\x2BA', '\x5', '\x98', 'M', '\x2', '\x2B6', 
		'\x2BA', '\x5', '\x9C', 'O', '\x2', '\x2B7', '\x2BA', '\x5', '\xA0', 'Q', 
		'\x2', '\x2B8', '\x2BA', '\x5', '\xA2', 'R', '\x2', '\x2B9', '\x2B5', 
		'\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2B6', '\x3', '\x2', '\x2', '\x2', 
		'\x2B9', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2B8', '\x3', 
		'\x2', '\x2', '\x2', '\x2BA', '\x97', '\x3', '\x2', '\x2', '\x2', '\x2BB', 
		'\x2BC', '\x5', '\x9A', 'N', '\x2', '\x2BC', '\x2BD', '\x5', '\xAC', 'W', 
		'\x2', '\x2BD', '\x99', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2C2', 
		'\x5', '\x9C', 'O', '\x2', '\x2BF', '\x2C2', '\x5', '\xA0', 'Q', '\x2', 
		'\x2C0', '\x2C2', '\x5', '\xA2', 'R', '\x2', '\x2C1', '\x2BE', '\x3', 
		'\x2', '\x2', '\x2', '\x2C1', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C1', 
		'\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x2C3', '\x2C4', '\x5', '\x9E', 'P', '\x2', '\x2C4', '\x2C5', 
		'\a', 'V', '\x2', '\x2', '\x2C5', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x2C6', '\x2C9', '\x5', '\xA0', 'Q', '\x2', '\x2C7', '\x2C9', '\x5', 
		'\xA2', 'R', '\x2', '\x2C8', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C8', 
		'\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x2CA', '\x2CB', '\x5', '\xBE', '`', '\x2', '\x2CB', '\x2CC', 
		'\x5', '\x90', 'I', '\x2', '\x2CC', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\x2CD', '\x2D0', '\x5', '\xBE', '`', '\x2', '\x2CE', '\x2D0', '\x5', 
		'\x92', 'J', '\x2', '\x2CF', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CF', 
		'\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\x2D1', '\x2D2', '\a', '\x10', '\x2', '\x2', '\x2D2', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D6', '\x5', '\x96', 'L', '\x2', 
		'\x2D4', '\x2D6', '\x5', '\xA4', 'S', '\x2', '\x2D5', '\x2D3', '\x3', 
		'\x2', '\x2', '\x2', '\x2D5', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2DC', '\x5', '\xBC', '_', 
		'\x2', '\x2D8', '\x2D9', '\a', '<', '\x2', '\x2', '\x2D9', '\x2DB', '\x5', 
		'\xBC', '_', '\x2', '\x2DA', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2DB', 
		'\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DA', '\x3', '\x2', '\x2', 
		'\x2', '\x2DC', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DC', '\x3', '\x2', '\x2', '\x2', 
		'\x2DF', '\x2E0', '\x5', '\xBC', '_', '\x2', '\x2E0', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\x2E1', '\x2E3', '\x5', '\xAE', 'X', '\x2', '\x2E2', '\x2E1', 
		'\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E4', '\x3', '\x2', '\x2', '\x2', 
		'\x2E4', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E5', '\x3', 
		'\x2', '\x2', '\x2', '\x2E5', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x2E6', 
		'\x2EA', '\a', 'J', '\x2', '\x2', '\x2E7', '\x2E9', '\a', '<', '\x2', 
		'\x2', '\x2E8', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EC', 
		'\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2E8', '\x3', '\x2', '\x2', '\x2', 
		'\x2EA', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2ED', '\x3', 
		'\x2', '\x2', '\x2', '\x2EC', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2ED', 
		'\x2EE', '\a', 'K', '\x2', '\x2', '\x2EE', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x2EF', '\x2F4', '\x5', '\xB2', 'Z', '\x2', '\x2F0', '\x2F1', 
		'\a', ':', '\x2', '\x2', '\x2F1', '\x2F3', '\x5', '\xB2', 'Z', '\x2', 
		'\x2F2', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F6', '\x3', 
		'\x2', '\x2', '\x2', '\x2F4', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\x2F6', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F9', 
		'\x5', '\xC2', '\x62', '\x2', '\x2F8', '\x2FA', '\x5', '\xB4', '[', '\x2', 
		'\x2F9', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FA', '\x3', 
		'\x2', '\x2', '\x2', '\x2FA', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x2FB', 
		'\x2FF', '\a', 'R', '\x2', '\x2', '\x2FC', '\x2FE', '\a', '<', '\x2', 
		'\x2', '\x2FD', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x301', 
		'\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FD', '\x3', '\x2', '\x2', '\x2', 
		'\x2FF', '\x300', '\x3', '\x2', '\x2', '\x2', '\x300', '\x302', '\x3', 
		'\x2', '\x2', '\x2', '\x301', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x302', 
		'\x303', '\a', 'S', '\x2', '\x2', '\x303', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\x304', '\x30D', '\a', 'H', '\x2', '\x2', '\x305', '\x30A', '\x5', 
		'\xB8', ']', '\x2', '\x306', '\x307', '\a', '<', '\x2', '\x2', '\x307', 
		'\x309', '\x5', '\xB8', ']', '\x2', '\x308', '\x306', '\x3', '\x2', '\x2', 
		'\x2', '\x309', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x30B', '\x3', '\x2', '\x2', '\x2', 
		'\x30B', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x30A', '\x3', 
		'\x2', '\x2', '\x2', '\x30D', '\x305', '\x3', '\x2', '\x2', '\x2', '\x30D', 
		'\x30E', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x30F', '\x3', '\x2', '\x2', 
		'\x2', '\x30F', '\x31E', '\a', 'I', '\x2', '\x2', '\x310', '\x319', '\a', 
		'H', '\x2', '\x2', '\x311', '\x316', '\x5', '\xBA', '^', '\x2', '\x312', 
		'\x313', '\a', '<', '\x2', '\x2', '\x313', '\x315', '\x5', '\xBA', '^', 
		'\x2', '\x314', '\x312', '\x3', '\x2', '\x2', '\x2', '\x315', '\x318', 
		'\x3', '\x2', '\x2', '\x2', '\x316', '\x314', '\x3', '\x2', '\x2', '\x2', 
		'\x316', '\x317', '\x3', '\x2', '\x2', '\x2', '\x317', '\x31A', '\x3', 
		'\x2', '\x2', '\x2', '\x318', '\x316', '\x3', '\x2', '\x2', '\x2', '\x319', 
		'\x311', '\x3', '\x2', '\x2', '\x2', '\x319', '\x31A', '\x3', '\x2', '\x2', 
		'\x2', '\x31A', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x31E', 
		'\a', 'I', '\x2', '\x2', '\x31C', '\x31E', '\x5', '\xBA', '^', '\x2', 
		'\x31D', '\x304', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x310', '\x3', 
		'\x2', '\x2', '\x2', '\x31D', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31E', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x320', '\x5', '\x96', 'L', 
		'\x2', '\x320', '\x321', '\x5', '\xC2', '\x62', '\x2', '\x321', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\x322', '\x323', '\x5', '\xC2', '\x62', '\x2', 
		'\x323', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x324', '\x325', '\b', '_', 
		'\x1', '\x2', '\x325', '\x364', '\a', '\x32', '\x2', '\x2', '\x326', '\x364', 
		'\x5', '\xC4', '\x63', '\x2', '\x327', '\x328', '\a', '\x36', '\x2', '\x2', 
		'\x328', '\x329', '\a', 'H', '\x2', '\x2', '\x329', '\x32A', '\a', '\x10', 
		'\x2', '\x2', '\x32A', '\x364', '\a', 'I', '\x2', '\x2', '\x32B', '\x32C', 
		'\a', '\x36', '\x2', '\x2', '\x32C', '\x32D', '\a', 'H', '\x2', '\x2', 
		'\x32D', '\x32E', '\x5', '\xB0', 'Y', '\x2', '\x32E', '\x32F', '\a', 'I', 
		'\x2', '\x2', '\x32F', '\x364', '\x3', '\x2', '\x2', '\x2', '\x330', '\x331', 
		'\a', '\x36', '\x2', '\x2', '\x331', '\x332', '\a', 'H', '\x2', '\x2', 
		'\x332', '\x333', '\x5', '\x96', 'L', '\x2', '\x333', '\x334', '\a', 'I', 
		'\x2', '\x2', '\x334', '\x364', '\x3', '\x2', '\x2', '\x2', '\x335', '\x336', 
		'\a', '\x37', '\x2', '\x2', '\x336', '\x337', '\a', 'H', '\x2', '\x2', 
		'\x337', '\x338', '\x5', '\x96', 'L', '\x2', '\x338', '\x339', '\a', 'I', 
		'\x2', '\x2', '\x339', '\x364', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x33B', 
		'\a', '\x33', '\x2', '\x2', '\x33B', '\x33C', '\x5', '\x96', 'L', '\x2', 
		'\x33C', '\x33E', '\a', 'H', '\x2', '\x2', '\x33D', '\x33F', '\x5', '\xA8', 
		'U', '\x2', '\x33E', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x33F', 
		'\x3', '\x2', '\x2', '\x2', '\x33F', '\x340', '\x3', '\x2', '\x2', '\x2', 
		'\x340', '\x341', '\a', 'I', '\x2', '\x2', '\x341', '\x364', '\x3', '\x2', 
		'\x2', '\x2', '\x342', '\x344', '\x5', '\xC2', '\x62', '\x2', '\x343', 
		'\x345', '\x5', '\x90', 'I', '\x2', '\x344', '\x343', '\x3', '\x2', '\x2', 
		'\x2', '\x344', '\x345', '\x3', '\x2', '\x2', '\x2', '\x345', '\x364', 
		'\x3', '\x2', '\x2', '\x2', '\x346', '\x347', '\a', '\x1B', '\x2', '\x2', 
		'\x347', '\x348', '\a', 'H', '\x2', '\x2', '\x348', '\x34A', '\x5', 'Z', 
		'.', '\x2', '\x349', '\x34B', '\x5', '`', '\x31', '\x2', '\x34A', '\x349', 
		'\x3', '\x2', '\x2', '\x2', '\x34A', '\x34B', '\x3', '\x2', '\x2', '\x2', 
		'\x34B', '\x34C', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x34D', '\a', 
		'I', '\x2', '\x2', '\x34D', '\x364', '\x3', '\x2', '\x2', '\x2', '\x34E', 
		'\x34F', '\a', 'H', '\x2', '\x2', '\x34F', '\x350', '\x5', '\xBC', '_', 
		'\x2', '\x350', '\x351', '\a', 'I', '\x2', '\x2', '\x351', '\x364', '\x3', 
		'\x2', '\x2', '\x2', '\x352', '\x353', '\x5', '\x92', 'J', '\x2', '\x353', 
		'\x354', '\a', ':', '\x2', '\x2', '\x354', '\x356', '\x5', '\xC2', '\x62', 
		'\x2', '\x355', '\x357', '\x5', '\x90', 'I', '\x2', '\x356', '\x355', 
		'\x3', '\x2', '\x2', '\x2', '\x356', '\x357', '\x3', '\x2', '\x2', '\x2', 
		'\x357', '\x364', '\x3', '\x2', '\x2', '\x2', '\x358', '\x359', '\a', 
		'H', '\x2', '\x2', '\x359', '\x35A', '\x5', '\x96', 'L', '\x2', '\x35A', 
		'\x35B', '\a', 'I', '\x2', '\x2', '\x35B', '\x35C', '\x5', '\xBC', '_', 
		'\x13', '\x35C', '\x364', '\x3', '\x2', '\x2', '\x2', '\x35D', '\x35E', 
		'\t', '\x5', '\x2', '\x2', '\x35E', '\x364', '\x5', '\xBC', '_', '\x12', 
		'\x35F', '\x360', '\x5', '\xB6', '\\', '\x2', '\x360', '\x361', '\a', 
		'P', '\x2', '\x2', '\x361', '\x362', '\x5', '\xBC', '_', '\x3', '\x362', 
		'\x364', '\x3', '\x2', '\x2', '\x2', '\x363', '\x324', '\x3', '\x2', '\x2', 
		'\x2', '\x363', '\x326', '\x3', '\x2', '\x2', '\x2', '\x363', '\x327', 
		'\x3', '\x2', '\x2', '\x2', '\x363', '\x32B', '\x3', '\x2', '\x2', '\x2', 
		'\x363', '\x330', '\x3', '\x2', '\x2', '\x2', '\x363', '\x335', '\x3', 
		'\x2', '\x2', '\x2', '\x363', '\x33A', '\x3', '\x2', '\x2', '\x2', '\x363', 
		'\x342', '\x3', '\x2', '\x2', '\x2', '\x363', '\x346', '\x3', '\x2', '\x2', 
		'\x2', '\x363', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x363', '\x352', 
		'\x3', '\x2', '\x2', '\x2', '\x363', '\x358', '\x3', '\x2', '\x2', '\x2', 
		'\x363', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x363', '\x35F', '\x3', 
		'\x2', '\x2', '\x2', '\x364', '\x3A4', '\x3', '\x2', '\x2', '\x2', '\x365', 
		'\x366', '\f', '\x10', '\x2', '\x2', '\x366', '\x367', '\t', '\x6', '\x2', 
		'\x2', '\x367', '\x3A3', '\x5', '\xBC', '_', '\x11', '\x368', '\x369', 
		'\f', '\xF', '\x2', '\x2', '\x369', '\x36A', '\t', '\a', '\x2', '\x2', 
		'\x36A', '\x3A3', '\x5', '\xBC', '_', '\x10', '\x36B', '\x36C', '\f', 
		'\xE', '\x2', '\x2', '\x36C', '\x36D', '\t', '\b', '\x2', '\x2', '\x36D', 
		'\x3A3', '\x5', '\xBC', '_', '\xF', '\x36E', '\x36F', '\f', '\f', '\x2', 
		'\x2', '\x36F', '\x370', '\t', '\t', '\x2', '\x2', '\x370', '\x3A3', '\x5', 
		'\xBC', '_', '\r', '\x371', '\x372', '\f', '\v', '\x2', '\x2', '\x372', 
		'\x373', '\a', '\x61', '\x2', '\x2', '\x373', '\x3A3', '\x5', '\xBC', 
		'_', '\f', '\x374', '\x375', '\f', '\n', '\x2', '\x2', '\x375', '\x376', 
		'\a', '\x62', '\x2', '\x2', '\x376', '\x3A3', '\x5', '\xBC', '_', '\v', 
		'\x377', '\x378', '\f', '\t', '\x2', '\x2', '\x378', '\x379', '\a', '\x63', 
		'\x2', '\x2', '\x379', '\x3A3', '\x5', '\xBC', '_', '\n', '\x37A', '\x37B', 
		'\f', '\b', '\x2', '\x2', '\x37B', '\x37C', '\a', '\x64', '\x2', '\x2', 
		'\x37C', '\x3A3', '\x5', '\xBC', '_', '\t', '\x37D', '\x37E', '\f', '\a', 
		'\x2', '\x2', '\x37E', '\x37F', '\a', '\x65', '\x2', '\x2', '\x37F', '\x3A3', 
		'\x5', '\xBC', '_', '\b', '\x380', '\x381', '\f', '\x6', '\x2', '\x2', 
		'\x381', '\x382', '\a', '\x66', '\x2', '\x2', '\x382', '\x3A3', '\x5', 
		'\xBC', '_', '\a', '\x383', '\x384', '\f', '\x5', '\x2', '\x2', '\x384', 
		'\x385', '\a', 'V', '\x2', '\x2', '\x385', '\x386', '\x5', '\xBC', '_', 
		'\x2', '\x386', '\x387', '\a', '\x39', '\x2', '\x2', '\x387', '\x388', 
		'\x5', '\xBC', '_', '\x6', '\x388', '\x3A3', '\x3', '\x2', '\x2', '\x2', 
		'\x389', '\x38A', '\f', '\x4', '\x2', '\x2', '\x38A', '\x38B', '\t', '\n', 
		'\x2', '\x2', '\x38B', '\x3A3', '\x5', '\xBC', '_', '\x5', '\x38C', '\x38D', 
		'\f', '\x17', '\x2', '\x2', '\x38D', '\x38E', '\a', 'J', '\x2', '\x2', 
		'\x38E', '\x38F', '\x5', '\xA8', 'U', '\x2', '\x38F', '\x390', '\a', 'K', 
		'\x2', '\x2', '\x390', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x391', '\x392', 
		'\f', '\x16', '\x2', '\x2', '\x392', '\x394', '\a', 'H', '\x2', '\x2', 
		'\x393', '\x395', '\x5', '\xA8', 'U', '\x2', '\x394', '\x393', '\x3', 
		'\x2', '\x2', '\x2', '\x394', '\x395', '\x3', '\x2', '\x2', '\x2', '\x395', 
		'\x396', '\x3', '\x2', '\x2', '\x2', '\x396', '\x3A3', '\a', 'I', '\x2', 
		'\x2', '\x397', '\x398', '\f', '\x14', '\x2', '\x2', '\x398', '\x399', 
		'\t', '\x2', '\x2', '\x2', '\x399', '\x39B', '\x5', '\xC2', '\x62', '\x2', 
		'\x39A', '\x39C', '\x5', '\x90', 'I', '\x2', '\x39B', '\x39A', '\x3', 
		'\x2', '\x2', '\x2', '\x39B', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39C', 
		'\x3A3', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x39E', '\f', '\x11', '\x2', 
		'\x2', '\x39E', '\x3A3', '\t', '\v', '\x2', '\x2', '\x39F', '\x3A0', '\f', 
		'\r', '\x2', '\x2', '\x3A0', '\x3A1', '\t', '\f', '\x2', '\x2', '\x3A1', 
		'\x3A3', '\x5', '\x96', 'L', '\x2', '\x3A2', '\x365', '\x3', '\x2', '\x2', 
		'\x2', '\x3A2', '\x368', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x36B', 
		'\x3', '\x2', '\x2', '\x2', '\x3A2', '\x36E', '\x3', '\x2', '\x2', '\x2', 
		'\x3A2', '\x371', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x374', '\x3', 
		'\x2', '\x2', '\x2', '\x3A2', '\x377', '\x3', '\x2', '\x2', '\x2', '\x3A2', 
		'\x37A', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x37D', '\x3', '\x2', '\x2', 
		'\x2', '\x3A2', '\x380', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\x3A2', '\x389', '\x3', '\x2', '\x2', '\x2', 
		'\x3A2', '\x38C', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x391', '\x3', 
		'\x2', '\x2', '\x2', '\x3A2', '\x397', '\x3', '\x2', '\x2', '\x2', '\x3A2', 
		'\x39D', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x39F', '\x3', '\x2', '\x2', 
		'\x2', '\x3A3', '\x3A6', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x3A2', 
		'\x3', '\x2', '\x2', '\x2', '\x3A4', '\x3A5', '\x3', '\x2', '\x2', '\x2', 
		'\x3A5', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x3A6', '\x3A4', '\x3', 
		'\x2', '\x2', '\x2', '\x3A7', '\x3AC', '\x5', '\xC2', '\x62', '\x2', '\x3A8', 
		'\x3A9', '\a', ':', '\x2', '\x2', '\x3A9', '\x3AB', '\x5', '\xC2', '\x62', 
		'\x2', '\x3AA', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3AE', 
		'\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AA', '\x3', '\x2', '\x2', '\x2', 
		'\x3AC', '\x3AD', '\x3', '\x2', '\x2', '\x2', '\x3AD', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\x3AE', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3AF', 
		'\x3B4', '\x5', '\xC2', '\x62', '\x2', '\x3B0', '\x3B1', '\a', '<', '\x2', 
		'\x2', '\x3B1', '\x3B3', '\x5', '\xC2', '\x62', '\x2', '\x3B2', '\x3B0', 
		'\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B6', '\x3', '\x2', '\x2', '\x2', 
		'\x3B4', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\x3', 
		'\x2', '\x2', '\x2', '\x3B5', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x3B6', 
		'\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B7', '\x3B8', '\a', 'h', '\x2', 
		'\x2', '\x3B8', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3C1', 
		'\x5', '\xC6', '\x64', '\x2', '\x3BA', '\x3C1', '\x5', '\xC8', '\x65', 
		'\x2', '\x3BB', '\x3C1', '\x5', '\xCA', '\x66', '\x2', '\x3BC', '\x3C1', 
		'\x5', '\xD2', 'j', '\x2', '\x3BD', '\x3C1', '\x5', '\xDC', 'o', '\x2', 
		'\x3BE', '\x3C1', '\x5', '\xDE', 'p', '\x2', '\x3BF', '\x3C1', '\x5', 
		'\xE0', 'q', '\x2', '\x3C0', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3C0', 
		'\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3BB', '\x3', '\x2', '\x2', 
		'\x2', '\x3C0', '\x3BC', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3BD', 
		'\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3BE', '\x3', '\x2', '\x2', '\x2', 
		'\x3C0', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\x3C2', '\x3C3', '\a', ' ', '\x2', '\x2', '\x3C3', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C5', '\t', '\r', '\x2', 
		'\x2', '\x3C5', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3CA', 
		'\x5', '\xCC', 'g', '\x2', '\x3C7', '\x3CA', '\x5', '\xCE', 'h', '\x2', 
		'\x3C8', '\x3CA', '\x5', '\xD0', 'i', '\x2', '\x3C9', '\x3C6', '\x3', 
		'\x2', '\x2', '\x2', '\x3C9', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3C9', 
		'\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\x3CB', '\x3CC', '\a', 'i', '\x2', '\x2', '\x3CC', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\x3CD', '\x3CE', '\a', 'j', '\x2', '\x2', '\x3CE', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3D0', '\a', 'k', '\x2', 
		'\x2', '\x3D0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3D6', 
		'\x5', '\xD6', 'l', '\x2', '\x3D2', '\x3D6', '\x5', '\xD4', 'k', '\x2', 
		'\x3D3', '\x3D6', '\x5', '\xD8', 'm', '\x2', '\x3D4', '\x3D6', '\x5', 
		'\xDA', 'n', '\x2', '\x3D5', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x3D5', 
		'\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3D3', '\x3', '\x2', '\x2', 
		'\x2', '\x3D5', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3D8', '\a', 'l', '\x2', '\x2', 
		'\x3D8', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x3D9', '\x3DA', '\a', 'm', 
		'\x2', '\x2', '\x3DA', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x3DB', '\x3DC', 
		'\a', 'n', '\x2', '\x2', '\x3DC', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\x3DD', '\x3DE', '\a', 'o', '\x2', '\x2', '\x3DE', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\x3DF', '\x3E0', '\a', 'p', '\x2', '\x2', '\x3E0', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\x3E1', '\x3E2', '\t', '\xE', '\x2', '\x2', 
		'\x3E2', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x3E3', '\x3E4', '\a', 'r', 
		'\x2', '\x2', '\x3E4', '\xE1', '\x3', '\x2', '\x2', '\x2', 'T', '\xE7', 
		'\xEB', '\xF0', '\xFA', '\x100', '\x104', '\x110', '\x114', '\x118', '\x11D', 
		'\x127', '\x130', '\x136', '\x13B', '\x149', '\x14D', '\x156', '\x15D', 
		'\x162', '\x16C', '\x171', '\x17E', '\x184', '\x193', '\x197', '\x1B8', 
		'\x1BC', '\x1C0', '\x1C9', '\x1EE', '\x1F1', '\x1FD', '\x201', '\x206', 
		'\x212', '\x214', '\x21A', '\x21F', '\x222', '\x224', '\x236', '\x23A', 
		'\x24B', '\x250', '\x254', '\x272', '\x279', '\x27F', '\x286', '\x28E', 
		'\x2A5', '\x2B2', '\x2B9', '\x2C1', '\x2C8', '\x2CF', '\x2D5', '\x2DC', 
		'\x2E4', '\x2EA', '\x2F4', '\x2F9', '\x2FF', '\x30A', '\x30D', '\x316', 
		'\x319', '\x31D', '\x33E', '\x344', '\x34A', '\x356', '\x363', '\x394', 
		'\x39B', '\x3A2', '\x3A4', '\x3AC', '\x3B4', '\x3C0', '\x3C9', '\x3D5',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaGenerator.Syntax.InternalSyntax
