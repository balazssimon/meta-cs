parser grammar MetaParser;

options
{
    tokenVocab = MetaLexer; 
	generateCompiler=true;
}

main: namespaceDeclaration EOF;

$Name
name : identifier;

$Name
qualifiedName : qualifier;

$Qualifier
qualifier : identifier (TDot identifier)*;

$Property(Attributes)
$SymbolUse(MetaAttribute)
attribute : TOpenBracket qualifier TCloseBracket;

$SymbolDef(symbolType=MetaNamespace,nestingProperty=Declarations,merge=true)
namespaceDeclaration: attribute* KNamespace qualifiedName namespaceBody;

$Scope
namespaceBody : TOpenBrace metamodelDeclaration declaration* TCloseBrace;

$Property(DefinedMetaModel)
$SymbolDef(MetaModel)
metamodelDeclaration: attribute* KMetamodel name (TOpenParen metamodelPropertyList? TCloseParen)? TSemicolon;

metamodelPropertyList : metamodelProperty (TComma metamodelProperty)*;

metamodelProperty : metamodelUriProperty;

$Property(Uri)
metamodelUriProperty : IUri TAssign $Value stringLiteral;

$Property(Declarations) 
declaration : enumDeclaration | classDeclaration | associationDeclaration | constDeclaration;

$SymbolDef(MetaEnum)
enumDeclaration : attribute* KEnum name enumBody;
$Scope
enumBody : TOpenBrace $Property(EnumLiterals) enumValues (TSemicolon enumMemberDeclaration*)? TCloseBrace;
enumValues : enumValue (TComma enumValue)*;
$SymbolDef(MetaEnumLiteral)
enumValue : attribute* name;
enumMemberDeclaration : $Property(Operations) operationDeclaration;

$SymbolDef(MetaClass)
classDeclaration : attribute* $Property(name=IsAbstract,value=true) KAbstract? KClass name (TColon $Property(SuperClasses) classAncestors)? classBody;
$Scope
classBody : TOpenBrace classMemberDeclaration* TCloseBrace;
classAncestors : classAncestor (TComma classAncestor)*;
classAncestor : $SymbolUse(symbolType=MetaClass,location=ResolutionLocation.Parent) qualifier;
classMemberDeclaration 
	: $Property(Properties) fieldDeclaration 
	| $Property(Operations) operationDeclaration
	;

$SymbolDef(MetaProperty)
fieldDeclaration : attribute* $Property(Kind) fieldModifier? $Property(Type) typeReference name redefinitionsOrSubsettings? TSemicolon;
fieldModifier 
	: $Value(MetaPropertyKind.Containment) KContainment 
	| $Value(MetaPropertyKind.Readonly) KReadonly 
	| $Value(MetaPropertyKind.Lazy) KLazy 
	| $Value(MetaPropertyKind.Derived) KDerived
	;

redefinitionsOrSubsettings : redefinitions | subsettings;
redefinitions : KRedefines $Property(RedefinedProperties) nameUseList?;
subsettings : KSubsets $Property(SubsettedProperties) nameUseList?;

$SymbolUse(MetaProperty)
nameUseList : qualifier (TComma qualifier)*;

$SymbolDef(MetaConstant)
constDeclaration : KConst $Property(Type) typeReference name TSemicolon;

$SymbolUse(MetaType)
returnType : typeReference | voidType;
$SymbolUse(MetaType)
typeOfReference : typeReference;
$SymbolUse(MetaType)
typeReference : collectionType | simpleType;
$SymbolUse(MetaType)
simpleType : primitiveType | objectType | nullableType | classType;

$SymbolUse(symbolTypes=(MetaClass,MetaEnum))
classType : qualifier;

$Identifier
objectType 
	: KObject 
	| KSymbol
	| KString
	;

$Identifier
primitiveType 
	: KInt 
	| KLong 
	| KFloat 
	| KDouble 
	| KByte 
	| KBool
	;

$Identifier
voidType 
	: KVoid
	;

$Scope
$SymbolDef(MetaNullableType)
nullableType : $Property(InnerType) primitiveType TQuestion;

$Scope
$SymbolDef(MetaCollectionType)
collectionType : $Property(Kind) collectionKind TLessThan $Property(InnerType) simpleType TGreaterThan;
collectionKind 
	: $Value(MetaCollectionKind.Set) KSet 
	| $Value(MetaCollectionKind.List) KList
	| $Value(MetaCollectionKind.MultiSet) KMultiSet 
	| $Value(MetaCollectionKind.MultiList) KMultiList
	;
	
$Scope
$SymbolDef(MetaOperation)
operationDeclaration : attribute* KStatic? $Property(ReturnType) returnType name TOpenParen $Property(Parameters) parameterList? TCloseParen TSemicolon;

$Scope
parameterList : parameter (TComma parameter)*;

$SymbolDef(MetaParameter)
parameter : attribute* $Property(Type) typeReference name;

$Opposite
associationDeclaration : attribute* KAssociation $SymbolUse(MetaProperty) source=qualifier KWith $SymbolUse(MetaProperty) target=qualifier TSemicolon;


// Additional rules for lexer:

// Identifiers
$Identifier
identifier 
	: IdentifierNormal 
	| IdentifierVerbatim
	| IUri
	;

// Literals
literal 
    : nullLiteral
	| booleanLiteral
	| integerLiteral
	| decimalLiteral
	| scientificLiteral
    | stringLiteral
	;

// Null literal
$Value
nullLiteral : KNull;

// Boolean literals
$Value
booleanLiteral : KTrue | KFalse;

// Number literals
$Value
integerLiteral : LInteger;
$Value
decimalLiteral : LDecimal;
$Value
scientificLiteral : LScientific;

// String literals
$Value
stringLiteral : LRegularString;
