//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Balazs\source\repos\meta-cs\src\Main\MetaDslx.Languages.Meta\Syntax\InternalSyntax\MetaParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Meta.Syntax.InternalSyntax {

using MetaDslx.Languages.Meta.Model;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MetaParser : Parser {
	public const int
		KNamespace=1, KUsing=2, KMetamodel=3, KExtern=4, KTypeDef=5, KAbstract=6, 
		KClass=7, KStruct=8, KEnum=9, KAssociation=10, KContainment=11, KWith=12, 
		KNew=13, KNull=14, KTrue=15, KFalse=16, KVoid=17, KObject=18, KSymbol=19, 
		KString=20, KInt=21, KLong=22, KFloat=23, KDouble=24, KByte=25, KBool=26, 
		KList=27, KAny=28, KNone=29, KError=30, KSet=31, KMultiList=32, KMultiSet=33, 
		KThis=34, KTypeof=35, KAs=36, KIs=37, KBase=38, KConst=39, KRedefines=40, 
		KSubsets=41, KReadonly=42, KLazy=43, KSynthetized=44, KInherited=45, KDerived=46, 
		KUnion=47, KBuilder=48, KStatic=49, TSemicolon=50, TColon=51, TDot=52, 
		TComma=53, TAssign=54, TOpenParen=55, TCloseParen=56, TOpenBracket=57, 
		TCloseBracket=58, TOpenBrace=59, TCloseBrace=60, TLessThan=61, TGreaterThan=62, 
		TQuestion=63, TQuestionQuestion=64, TAmpersand=65, THat=66, TBar=67, TAndAlso=68, 
		TOrElse=69, TPlusPlus=70, TMinusMinus=71, TPlus=72, TMinus=73, TTilde=74, 
		TExclamation=75, TSlash=76, TAsterisk=77, TPercent=78, TLessThanOrEqual=79, 
		TGreaterThanOrEqual=80, TEqual=81, TNotEqual=82, TAsteriskAssign=83, TSlashAssign=84, 
		TPercentAssign=85, TPlusAssign=86, TMinusAssign=87, TLeftShiftAssign=88, 
		TRightShiftAssign=89, TAmpersandAssign=90, THatAssign=91, TBarAssign=92, 
		IUri=93, IdentifierNormal=94, IdentifierVerbatim=95, LInteger=96, LDecimal=97, 
		LScientific=98, LDateTimeOffset=99, LDateTime=100, LDate=101, LTime=102, 
		LRegularString=103, LGuid=104, LUtf8Bom=105, LWhiteSpace=106, LCrLf=107, 
		LLineEnd=108, LSingleLineComment=109, LComment=110, LDoubleQuoteVerbatimString=111, 
		LSingleQuoteVerbatimString=112, DoubleQuoteVerbatimStringLiteralStart=113, 
		SingleQuoteVerbatimStringLiteralStart=114, LCommentStart=115;
	public const int
		RULE_main = 0, RULE_name = 1, RULE_qualifiedName = 2, RULE_qualifier = 3, 
		RULE_attribute = 4, RULE_namespaceDeclaration = 5, RULE_namespaceBody = 6, 
		RULE_metamodelDeclaration = 7, RULE_metamodelPropertyList = 8, RULE_metamodelProperty = 9, 
		RULE_metamodelUriProperty = 10, RULE_declaration = 11, RULE_enumDeclaration = 12, 
		RULE_enumBody = 13, RULE_enumValues = 14, RULE_enumValue = 15, RULE_enumMemberDeclaration = 16, 
		RULE_classDeclaration = 17, RULE_classBody = 18, RULE_classAncestors = 19, 
		RULE_classAncestor = 20, RULE_classMemberDeclaration = 21, RULE_fieldDeclaration = 22, 
		RULE_fieldModifier = 23, RULE_defaultValue = 24, RULE_redefinitionsOrSubsettings = 25, 
		RULE_redefinitions = 26, RULE_subsettings = 27, RULE_nameUseList = 28, 
		RULE_constDeclaration = 29, RULE_returnType = 30, RULE_typeOfReference = 31, 
		RULE_typeReference = 32, RULE_simpleType = 33, RULE_classType = 34, RULE_objectType = 35, 
		RULE_primitiveType = 36, RULE_voidType = 37, RULE_nullableType = 38, RULE_collectionType = 39, 
		RULE_collectionKind = 40, RULE_operationDeclaration = 41, RULE_operationModifier = 42, 
		RULE_operationModifierBuilder = 43, RULE_operationModifierReadonly = 44, 
		RULE_parameterList = 45, RULE_parameter = 46, RULE_associationDeclaration = 47, 
		RULE_identifier = 48, RULE_literal = 49, RULE_nullLiteral = 50, RULE_booleanLiteral = 51, 
		RULE_integerLiteral = 52, RULE_decimalLiteral = 53, RULE_scientificLiteral = 54, 
		RULE_stringLiteral = 55;
	public static readonly string[] ruleNames = {
		"main", "name", "qualifiedName", "qualifier", "attribute", "namespaceDeclaration", 
		"namespaceBody", "metamodelDeclaration", "metamodelPropertyList", "metamodelProperty", 
		"metamodelUriProperty", "declaration", "enumDeclaration", "enumBody", 
		"enumValues", "enumValue", "enumMemberDeclaration", "classDeclaration", 
		"classBody", "classAncestors", "classAncestor", "classMemberDeclaration", 
		"fieldDeclaration", "fieldModifier", "defaultValue", "redefinitionsOrSubsettings", 
		"redefinitions", "subsettings", "nameUseList", "constDeclaration", "returnType", 
		"typeOfReference", "typeReference", "simpleType", "classType", "objectType", 
		"primitiveType", "voidType", "nullableType", "collectionType", "collectionKind", 
		"operationDeclaration", "operationModifier", "operationModifierBuilder", 
		"operationModifierReadonly", "parameterList", "parameter", "associationDeclaration", 
		"identifier", "literal", "nullLiteral", "booleanLiteral", "integerLiteral", 
		"decimalLiteral", "scientificLiteral", "stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'using'", "'metamodel'", "'extern'", "'typedef'", 
		"'abstract'", "'class'", "'struct'", "'enum'", "'association'", "'containment'", 
		"'with'", "'new'", "'null'", "'true'", "'false'", "'void'", "'object'", 
		"'symbol'", "'string'", "'int'", "'long'", "'float'", "'double'", "'byte'", 
		"'bool'", "'list'", "'any'", "'none'", "'error'", "'set'", "'multi_list'", 
		"'multi_set'", "'this'", "'typeof'", "'as'", "'is'", "'base'", "'const'", 
		"'redefines'", "'subsets'", "'readonly'", "'lazy'", "'synthetized'", "'inherited'", 
		"'derived'", "'union'", "'builder'", "'static'", "';'", "':'", "'.'", 
		"','", "'='", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'>'", 
		"'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", "'||'", "'++'", "'--'", "'+'", 
		"'-'", "'~'", "'!'", "'/'", null, "'%'", "'<='", "'>='", "'=='", "'!='", 
		"'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", 
		"'|='", "'Uri'", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'\"'", "'''", "'@\"'", 
		"'@''", "'/*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KUsing", "KMetamodel", "KExtern", "KTypeDef", "KAbstract", 
		"KClass", "KStruct", "KEnum", "KAssociation", "KContainment", "KWith", 
		"KNew", "KNull", "KTrue", "KFalse", "KVoid", "KObject", "KSymbol", "KString", 
		"KInt", "KLong", "KFloat", "KDouble", "KByte", "KBool", "KList", "KAny", 
		"KNone", "KError", "KSet", "KMultiList", "KMultiSet", "KThis", "KTypeof", 
		"KAs", "KIs", "KBase", "KConst", "KRedefines", "KSubsets", "KReadonly", 
		"KLazy", "KSynthetized", "KInherited", "KDerived", "KUnion", "KBuilder", 
		"KStatic", "TSemicolon", "TColon", "TDot", "TComma", "TAssign", "TOpenParen", 
		"TCloseParen", "TOpenBracket", "TCloseBracket", "TOpenBrace", "TCloseBrace", 
		"TLessThan", "TGreaterThan", "TQuestion", "TQuestionQuestion", "TAmpersand", 
		"THat", "TBar", "TAndAlso", "TOrElse", "TPlusPlus", "TMinusMinus", "TPlus", 
		"TMinus", "TTilde", "TExclamation", "TSlash", "TAsterisk", "TPercent", 
		"TLessThanOrEqual", "TGreaterThanOrEqual", "TEqual", "TNotEqual", "TAsteriskAssign", 
		"TSlashAssign", "TPercentAssign", "TPlusAssign", "TMinusAssign", "TLeftShiftAssign", 
		"TRightShiftAssign", "TAmpersandAssign", "THatAssign", "TBarAssign", "IUri", 
		"IdentifierNormal", "IdentifierVerbatim", "LInteger", "LDecimal", "LScientific", 
		"LDateTimeOffset", "LDateTime", "LDate", "LTime", "LRegularString", "LGuid", 
		"LUtf8Bom", "LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", 
		"LComment", "LDoubleQuoteVerbatimString", "LSingleQuoteVerbatimString", 
		"DoubleQuoteVerbatimStringLiteralStart", "SingleQuoteVerbatimStringLiteralStart", 
		"LCommentStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MetaParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; namespaceDeclaration();
			State = 113; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitQualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		QualifierContext _localctx = new QualifierContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; identifier();
			State = 124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TDot) {
				{
				{
				State = 120; Match(TDot);
				State = 121; identifier();
				}
				}
				State = 126;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaParser.TOpenBracket, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaParser.TCloseBracket, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(TOpenBracket);
			State = 128; qualifier();
			State = 129; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 131; attribute();
				}
				}
				State = 136;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 137; Match(KNamespace);
			State = 138; qualifiedName();
			State = 139; namespaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		public MetamodelDeclarationContext metamodelDeclaration() {
			return GetRuleContext<MetamodelDeclarationContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterNamespaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitNamespaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(TOpenBrace);
			State = 142; metamodelDeclaration();
			State = 146;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KAbstract) | (1L << KClass) | (1L << KEnum) | (1L << KAssociation) | (1L << KConst) | (1L << TOpenBracket))) != 0)) {
				{
				{
				State = 143; declaration();
				}
				}
				State = 148;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 149; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelDeclarationContext : ParserRuleContext {
		public ITerminalNode KMetamodel() { return GetToken(MetaParser.KMetamodel, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaParser.TCloseParen, 0); }
		public MetamodelPropertyListContext metamodelPropertyList() {
			return GetRuleContext<MetamodelPropertyListContext>(0);
		}
		public MetamodelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterMetamodelDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitMetamodelDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelDeclarationContext metamodelDeclaration() {
		MetamodelDeclarationContext _localctx = new MetamodelDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_metamodelDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 151; attribute();
				}
				}
				State = 156;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 157; Match(KMetamodel);
			State = 158; name();
			State = 164;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TOpenParen) {
				{
				State = 159; Match(TOpenParen);
				State = 161;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IUri) {
					{
					State = 160; metamodelPropertyList();
					}
				}

				State = 163; Match(TCloseParen);
				}
			}

			State = 166; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyListContext : ParserRuleContext {
		public MetamodelPropertyContext[] metamodelProperty() {
			return GetRuleContexts<MetamodelPropertyContext>();
		}
		public MetamodelPropertyContext metamodelProperty(int i) {
			return GetRuleContext<MetamodelPropertyContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public MetamodelPropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelPropertyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterMetamodelPropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitMetamodelPropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyListContext metamodelPropertyList() {
		MetamodelPropertyListContext _localctx = new MetamodelPropertyListContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_metamodelPropertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; metamodelProperty();
			State = 173;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 169; Match(TComma);
				State = 170; metamodelProperty();
				}
				}
				State = 175;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyContext : ParserRuleContext {
		public MetamodelUriPropertyContext metamodelUriProperty() {
			return GetRuleContext<MetamodelUriPropertyContext>(0);
		}
		public MetamodelPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterMetamodelProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitMetamodelProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyContext metamodelProperty() {
		MetamodelPropertyContext _localctx = new MetamodelPropertyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_metamodelProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; metamodelUriProperty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelUriPropertyContext : ParserRuleContext {
		public ITerminalNode IUri() { return GetToken(MetaParser.IUri, 0); }
		public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public MetamodelUriPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelUriProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterMetamodelUriProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitMetamodelUriProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelUriProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelUriPropertyContext metamodelUriProperty() {
		MetamodelUriPropertyContext _localctx = new MetamodelUriPropertyContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_metamodelUriProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(IUri);
			State = 179; Match(TAssign);
			State = 180; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public AssociationDeclarationContext associationDeclaration() {
			return GetRuleContext<AssociationDeclarationContext>(0);
		}
		public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_declaration);
		try {
			State = 186;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; enumDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; classDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184; associationDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185; constDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnum() { return GetToken(MetaParser.KEnum, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 188; attribute();
				}
				}
				State = 193;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 194; Match(KEnum);
			State = 195; name();
			State = 196; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(TOpenBrace);
			State = 199; enumValues();
			State = 207;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TSemicolon) {
				{
				State = 200; Match(TSemicolon);
				State = 204;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KVoid) | (1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KReadonly) | (1L << KBuilder) | (1L << TOpenBracket))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) {
					{
					{
					State = 201; enumMemberDeclaration();
					}
					}
					State = 206;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 209; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterEnumValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitEnumValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; enumValue();
			State = 216;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 212; Match(TComma);
				State = 213; enumValue();
				}
				}
				State = 218;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 219; attribute();
				}
				}
				State = 224;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 225; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext enumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_enumMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; operationDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode KClass() { return GetToken(MetaParser.KClass, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode KAbstract() { return GetToken(MetaParser.KAbstract, 0); }
		public ITerminalNode TColon() { return GetToken(MetaParser.TColon, 0); }
		public ClassAncestorsContext classAncestors() {
			return GetRuleContext<ClassAncestorsContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 229; attribute();
				}
				}
				State = 234;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 236;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==KAbstract) {
				{
				State = 235; Match(KAbstract);
				}
			}

			State = 238; Match(KClass);
			State = 239; name();
			State = 242;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TColon) {
				{
				State = 240; Match(TColon);
				State = 241; classAncestors();
				}
			}

			State = 244; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(TOpenBrace);
			State = 250;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KVoid) | (1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << KUnion) | (1L << KBuilder) | (1L << TOpenBracket))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) {
				{
				{
				State = 247; classMemberDeclaration();
				}
				}
				State = 252;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 253; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorsContext : ParserRuleContext {
		public ClassAncestorContext[] classAncestor() {
			return GetRuleContexts<ClassAncestorContext>();
		}
		public ClassAncestorContext classAncestor(int i) {
			return GetRuleContext<ClassAncestorContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public ClassAncestorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestors; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassAncestors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassAncestors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorsContext classAncestors() {
		ClassAncestorsContext _localctx = new ClassAncestorsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_classAncestors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; classAncestor();
			State = 260;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 256; Match(TComma);
				State = 257; classAncestor();
				}
				}
				State = 262;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ClassAncestorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassAncestor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassAncestor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorContext classAncestor() {
		ClassAncestorContext _localctx = new ClassAncestorContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_classAncestor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_classMemberDeclaration);
		try {
			State = 267;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; fieldDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; operationDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public FieldModifierContext fieldModifier() {
			return GetRuleContext<FieldModifierContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public RedefinitionsOrSubsettingsContext[] redefinitionsOrSubsettings() {
			return GetRuleContexts<RedefinitionsOrSubsettingsContext>();
		}
		public RedefinitionsOrSubsettingsContext redefinitionsOrSubsettings(int i) {
			return GetRuleContext<RedefinitionsOrSubsettingsContext>(i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 269; attribute();
				}
				}
				State = 274;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 276;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << KUnion))) != 0)) {
				{
				State = 275; fieldModifier();
				}
			}

			State = 278; typeReference();
			State = 279; name();
			State = 281;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TAssign) {
				{
				State = 280; defaultValue();
				}
			}

			State = 286;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KRedefines || _la==KSubsets) {
				{
				{
				State = 283; redefinitionsOrSubsettings();
				}
				}
				State = 288;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 289; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public ITerminalNode KContainment() { return GetToken(MetaParser.KContainment, 0); }
		public ITerminalNode KReadonly() { return GetToken(MetaParser.KReadonly, 0); }
		public ITerminalNode KLazy() { return GetToken(MetaParser.KLazy, 0); }
		public ITerminalNode KDerived() { return GetToken(MetaParser.KDerived, 0); }
		public ITerminalNode KUnion() { return GetToken(MetaParser.KUnion, 0); }
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_fieldModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << KUnion))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(TAssign);
			State = 294; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedefinitionsOrSubsettingsContext : ParserRuleContext {
		public RedefinitionsContext redefinitions() {
			return GetRuleContext<RedefinitionsContext>(0);
		}
		public SubsettingsContext subsettings() {
			return GetRuleContext<SubsettingsContext>(0);
		}
		public RedefinitionsOrSubsettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redefinitionsOrSubsettings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterRedefinitionsOrSubsettings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitRedefinitionsOrSubsettings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitionsOrSubsettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedefinitionsOrSubsettingsContext redefinitionsOrSubsettings() {
		RedefinitionsOrSubsettingsContext _localctx = new RedefinitionsOrSubsettingsContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_redefinitionsOrSubsettings);
		try {
			State = 298;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KRedefines:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; redefinitions();
				}
				break;
			case KSubsets:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297; subsettings();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedefinitionsContext : ParserRuleContext {
		public ITerminalNode KRedefines() { return GetToken(MetaParser.KRedefines, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public RedefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterRedefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitRedefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedefinitionsContext redefinitions() {
		RedefinitionsContext _localctx = new RedefinitionsContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_redefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(KRedefines);
			State = 302;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) {
				{
				State = 301; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsettingsContext : ParserRuleContext {
		public ITerminalNode KSubsets() { return GetToken(MetaParser.KSubsets, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public SubsettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsettings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterSubsettings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitSubsettings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsettingsContext subsettings() {
		SubsettingsContext _localctx = new SubsettingsContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_subsettings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(KSubsets);
			State = 306;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) {
				{
				State = 305; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameUseListContext : ParserRuleContext {
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public NameUseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameUseList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterNameUseList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitNameUseList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameUseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameUseListContext nameUseList() {
		NameUseListContext _localctx = new NameUseListContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_nameUseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; qualifier();
			State = 313;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 309; Match(TComma);
				State = 310; qualifier();
				}
				}
				State = 315;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		public ITerminalNode KConst() { return GetToken(MetaParser.KConst, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterConstDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitConstDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_constDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(KConst);
			State = 317; typeReference();
			State = 318; name();
			State = 319; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_returnType);
		try {
			State = 323;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KObject:
			case KSymbol:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
			case IUri:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfReferenceContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeOfReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterTypeOfReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitTypeOfReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfReferenceContext typeOfReference() {
		TypeOfReferenceContext _localctx = new TypeOfReferenceContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_typeOfReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_typeReference);
		try {
			State = 329;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327; collectionType();
				}
				break;
			case KObject:
			case KSymbol:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IUri:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328; simpleType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_simpleType);
		try {
			State = 335;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 331; primitiveType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332; objectType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 333; nullableType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 334; classType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_classType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(MetaParser.KObject, 0); }
		public ITerminalNode KSymbol() { return GetToken(MetaParser.KSymbol, 0); }
		public ITerminalNode KString() { return GetToken(MetaParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KSymbol) | (1L << KString))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(MetaParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(MetaParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(MetaParser.KBool, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; primitiveType();
			State = 346; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		public CollectionKindContext collectionKind() {
			return GetRuleContext<CollectionKindContext>(0);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaParser.TLessThan, 0); }
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaParser.TGreaterThan, 0); }
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterCollectionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitCollectionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_collectionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; collectionKind();
			State = 349; Match(TLessThan);
			State = 350; simpleType();
			State = 351; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionKindContext : ParserRuleContext {
		public ITerminalNode KSet() { return GetToken(MetaParser.KSet, 0); }
		public ITerminalNode KList() { return GetToken(MetaParser.KList, 0); }
		public ITerminalNode KMultiSet() { return GetToken(MetaParser.KMultiSet, 0); }
		public ITerminalNode KMultiList() { return GetToken(MetaParser.KMultiList, 0); }
		public CollectionKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterCollectionKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitCollectionKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionKindContext collectionKind() {
		CollectionKindContext _localctx = new CollectionKindContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_collectionKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public OperationModifierContext[] operationModifier() {
			return GetRuleContexts<OperationModifierContext>();
		}
		public OperationModifierContext operationModifier(int i) {
			return GetRuleContext<OperationModifierContext>(i);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterOperationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitOperationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 355; attribute();
				}
				}
				State = 360;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 364;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==KReadonly || _la==KBuilder) {
				{
				{
				State = 361; operationModifier();
				}
				}
				State = 366;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 367; returnType();
			State = 368; name();
			State = 369; Match(TOpenParen);
			State = 371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << TOpenBracket))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) {
				{
				State = 370; parameterList();
				}
			}

			State = 373; Match(TCloseParen);
			State = 374; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationModifierContext : ParserRuleContext {
		public OperationModifierBuilderContext operationModifierBuilder() {
			return GetRuleContext<OperationModifierBuilderContext>(0);
		}
		public OperationModifierReadonlyContext operationModifierReadonly() {
			return GetRuleContext<OperationModifierReadonlyContext>(0);
		}
		public OperationModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterOperationModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitOperationModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationModifierContext operationModifier() {
		OperationModifierContext _localctx = new OperationModifierContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_operationModifier);
		try {
			State = 378;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KBuilder:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376; operationModifierBuilder();
				}
				break;
			case KReadonly:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377; operationModifierReadonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationModifierBuilderContext : ParserRuleContext {
		public ITerminalNode KBuilder() { return GetToken(MetaParser.KBuilder, 0); }
		public OperationModifierBuilderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationModifierBuilder; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterOperationModifierBuilder(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitOperationModifierBuilder(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationModifierBuilder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationModifierBuilderContext operationModifierBuilder() {
		OperationModifierBuilderContext _localctx = new OperationModifierBuilderContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_operationModifierBuilder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(KBuilder);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationModifierReadonlyContext : ParserRuleContext {
		public ITerminalNode KReadonly() { return GetToken(MetaParser.KReadonly, 0); }
		public OperationModifierReadonlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationModifierReadonly; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterOperationModifierReadonly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitOperationModifierReadonly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationModifierReadonly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationModifierReadonlyContext operationModifierReadonly() {
		OperationModifierReadonlyContext _localctx = new OperationModifierReadonlyContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_operationModifierReadonly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; Match(KReadonly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; parameter();
			State = 389;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TComma) {
				{
				{
				State = 385; Match(TComma);
				State = 386; parameter();
				}
				}
				State = 391;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 392; attribute();
				}
				}
				State = 397;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 398; typeReference();
			State = 399; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationDeclarationContext : ParserRuleContext {
		public QualifierContext source;
		public QualifierContext target;
		public ITerminalNode KAssociation() { return GetToken(MetaParser.KAssociation, 0); }
		public ITerminalNode KWith() { return GetToken(MetaParser.KWith, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AssociationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterAssociationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitAssociationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationDeclarationContext associationDeclaration() {
		AssociationDeclarationContext _localctx = new AssociationDeclarationContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_associationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 401; attribute();
				}
				}
				State = 406;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 407; Match(KAssociation);
			State = 408; _localctx.source = qualifier();
			State = 409; Match(KWith);
			State = 410; _localctx.target = qualifier();
			State = 411; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(MetaParser.IdentifierVerbatim, 0); }
		public ITerminalNode IUri() { return GetToken(MetaParser.IUri, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			_la = _input.La(1);
			if ( !(((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_literal);
		try {
			State = 421;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416; booleanLiteral();
				}
				break;
			case LInteger:
				EnterOuterAlt(_localctx, 3);
				{
				State = 417; integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 418; decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 5);
				{
				State = 419; scientificLiteral();
				}
				break;
			case LRegularString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 420; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			_la = _input.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode LInteger() { return GetToken(MetaParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode LDecimal() { return GetToken(MetaParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode LScientific() { return GetToken(MetaParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode LRegularString() { return GetToken(MetaParser.LRegularString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; Match(LRegularString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3u\x1B6\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\a\x5}\n\x5\f\x5\xE\x5\x80\v\x5\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\a\a\a\x87\n\a\f\a\xE\a\x8A\v\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b"+
		"\a\b\x93\n\b\f\b\xE\b\x96\v\b\x3\b\x3\b\x3\t\a\t\x9B\n\t\f\t\xE\t\x9E"+
		"\v\t\x3\t\x3\t\x3\t\x3\t\x5\t\xA4\n\t\x3\t\x5\t\xA7\n\t\x3\t\x3\t\x3\n"+
		"\x3\n\x3\n\a\n\xAE\n\n\f\n\xE\n\xB1\v\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f"+
		"\x3\r\x3\r\x3\r\x3\r\x5\r\xBD\n\r\x3\xE\a\xE\xC0\n\xE\f\xE\xE\xE\xC3\v"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\xCD\n\xF\f\xF"+
		"\xE\xF\xD0\v\xF\x5\xF\xD2\n\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\a\x10"+
		"\xD9\n\x10\f\x10\xE\x10\xDC\v\x10\x3\x11\a\x11\xDF\n\x11\f\x11\xE\x11"+
		"\xE2\v\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\a\x13\xE9\n\x13\f\x13\xE"+
		"\x13\xEC\v\x13\x3\x13\x5\x13\xEF\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5"+
		"\x13\xF5\n\x13\x3\x13\x3\x13\x3\x14\x3\x14\a\x14\xFB\n\x14\f\x14\xE\x14"+
		"\xFE\v\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\a\x15\x105\n\x15\f\x15\xE"+
		"\x15\x108\v\x15\x3\x16\x3\x16\x3\x17\x3\x17\x5\x17\x10E\n\x17\x3\x18\a"+
		"\x18\x111\n\x18\f\x18\xE\x18\x114\v\x18\x3\x18\x5\x18\x117\n\x18\x3\x18"+
		"\x3\x18\x3\x18\x5\x18\x11C\n\x18\x3\x18\a\x18\x11F\n\x18\f\x18\xE\x18"+
		"\x122\v\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3"+
		"\x1B\x5\x1B\x12D\n\x1B\x3\x1C\x3\x1C\x5\x1C\x131\n\x1C\x3\x1D\x3\x1D\x5"+
		"\x1D\x135\n\x1D\x3\x1E\x3\x1E\x3\x1E\a\x1E\x13A\n\x1E\f\x1E\xE\x1E\x13D"+
		"\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x5 \x146\n \x3!\x3!"+
		"\x3\"\x3\"\x5\"\x14C\n\"\x3#\x3#\x3#\x3#\x5#\x152\n#\x3$\x3$\x3%\x3%\x3"+
		"&\x3&\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3+\a+\x167\n"+
		"+\f+\xE+\x16A\v+\x3+\a+\x16D\n+\f+\xE+\x170\v+\x3+\x3+\x3+\x3+\x5+\x176"+
		"\n+\x3+\x3+\x3+\x3,\x3,\x5,\x17D\n,\x3-\x3-\x3.\x3.\x3/\x3/\x3/\a/\x186"+
		"\n/\f/\xE/\x189\v/\x3\x30\a\x30\x18C\n\x30\f\x30\xE\x30\x18F\v\x30\x3"+
		"\x30\x3\x30\x3\x30\x3\x31\a\x31\x195\n\x31\f\x31\xE\x31\x198\v\x31\x3"+
		"\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\x3\x33\x5\x33\x1A8\n\x33\x3\x34\x3\x34\x3\x35\x3\x35"+
		"\x3\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x2\x2"+
		"\x2:\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32"+
		"\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2"+
		"L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2"+
		"j\x2l\x2n\x2p\x2\x2\b\x5\x2\r\r,-\x30\x31\x3\x2\x14\x16\x3\x2\x17\x1C"+
		"\x4\x2\x1D\x1D!#\x3\x2_\x61\x3\x2\x11\x12\x1AB\x2r\x3\x2\x2\x2\x4u\x3"+
		"\x2\x2\x2\x6w\x3\x2\x2\x2\by\x3\x2\x2\x2\n\x81\x3\x2\x2\x2\f\x88\x3\x2"+
		"\x2\x2\xE\x8F\x3\x2\x2\x2\x10\x9C\x3\x2\x2\x2\x12\xAA\x3\x2\x2\x2\x14"+
		"\xB2\x3\x2\x2\x2\x16\xB4\x3\x2\x2\x2\x18\xBC\x3\x2\x2\x2\x1A\xC1\x3\x2"+
		"\x2\x2\x1C\xC8\x3\x2\x2\x2\x1E\xD5\x3\x2\x2\x2 \xE0\x3\x2\x2\x2\"\xE5"+
		"\x3\x2\x2\x2$\xEA\x3\x2\x2\x2&\xF8\x3\x2\x2\x2(\x101\x3\x2\x2\x2*\x109"+
		"\x3\x2\x2\x2,\x10D\x3\x2\x2\x2.\x112\x3\x2\x2\x2\x30\x125\x3\x2\x2\x2"+
		"\x32\x127\x3\x2\x2\x2\x34\x12C\x3\x2\x2\x2\x36\x12E\x3\x2\x2\x2\x38\x132"+
		"\x3\x2\x2\x2:\x136\x3\x2\x2\x2<\x13E\x3\x2\x2\x2>\x145\x3\x2\x2\x2@\x147"+
		"\x3\x2\x2\x2\x42\x14B\x3\x2\x2\x2\x44\x151\x3\x2\x2\x2\x46\x153\x3\x2"+
		"\x2\x2H\x155\x3\x2\x2\x2J\x157\x3\x2\x2\x2L\x159\x3\x2\x2\x2N\x15B\x3"+
		"\x2\x2\x2P\x15E\x3\x2\x2\x2R\x163\x3\x2\x2\x2T\x168\x3\x2\x2\x2V\x17C"+
		"\x3\x2\x2\x2X\x17E\x3\x2\x2\x2Z\x180\x3\x2\x2\x2\\\x182\x3\x2\x2\x2^\x18D"+
		"\x3\x2\x2\x2`\x196\x3\x2\x2\x2\x62\x19F\x3\x2\x2\x2\x64\x1A7\x3\x2\x2"+
		"\x2\x66\x1A9\x3\x2\x2\x2h\x1AB\x3\x2\x2\x2j\x1AD\x3\x2\x2\x2l\x1AF\x3"+
		"\x2\x2\x2n\x1B1\x3\x2\x2\x2p\x1B3\x3\x2\x2\x2rs\x5\f\a\x2st\a\x2\x2\x3"+
		"t\x3\x3\x2\x2\x2uv\x5\x62\x32\x2v\x5\x3\x2\x2\x2wx\x5\b\x5\x2x\a\x3\x2"+
		"\x2\x2y~\x5\x62\x32\x2z{\a\x36\x2\x2{}\x5\x62\x32\x2|z\x3\x2\x2\x2}\x80"+
		"\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\t\x3\x2\x2\x2\x80~\x3"+
		"\x2\x2\x2\x81\x82\a;\x2\x2\x82\x83\x5\b\x5\x2\x83\x84\a<\x2\x2\x84\v\x3"+
		"\x2\x2\x2\x85\x87\x5\n\x6\x2\x86\x85\x3\x2\x2\x2\x87\x8A\x3\x2\x2\x2\x88"+
		"\x86\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8B\x3\x2\x2\x2\x8A\x88\x3\x2"+
		"\x2\x2\x8B\x8C\a\x3\x2\x2\x8C\x8D\x5\x6\x4\x2\x8D\x8E\x5\xE\b\x2\x8E\r"+
		"\x3\x2\x2\x2\x8F\x90\a=\x2\x2\x90\x94\x5\x10\t\x2\x91\x93\x5\x18\r\x2"+
		"\x92\x91\x3\x2\x2\x2\x93\x96\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x94\x95\x3"+
		"\x2\x2\x2\x95\x97\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2\x97\x98\a>\x2\x2\x98"+
		"\xF\x3\x2\x2\x2\x99\x9B\x5\n\x6\x2\x9A\x99\x3\x2\x2\x2\x9B\x9E\x3\x2\x2"+
		"\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9F\x3\x2\x2\x2\x9E\x9C"+
		"\x3\x2\x2\x2\x9F\xA0\a\x5\x2\x2\xA0\xA6\x5\x4\x3\x2\xA1\xA3\a\x39\x2\x2"+
		"\xA2\xA4\x5\x12\n\x2\xA3\xA2\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\x3"+
		"\x2\x2\x2\xA5\xA7\a:\x2\x2\xA6\xA1\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7"+
		"\xA8\x3\x2\x2\x2\xA8\xA9\a\x34\x2\x2\xA9\x11\x3\x2\x2\x2\xAA\xAF\x5\x14"+
		"\v\x2\xAB\xAC\a\x37\x2\x2\xAC\xAE\x5\x14\v\x2\xAD\xAB\x3\x2\x2\x2\xAE"+
		"\xB1\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\x13\x3\x2"+
		"\x2\x2\xB1\xAF\x3\x2\x2\x2\xB2\xB3\x5\x16\f\x2\xB3\x15\x3\x2\x2\x2\xB4"+
		"\xB5\a_\x2\x2\xB5\xB6\a\x38\x2\x2\xB6\xB7\x5p\x39\x2\xB7\x17\x3\x2\x2"+
		"\x2\xB8\xBD\x5\x1A\xE\x2\xB9\xBD\x5$\x13\x2\xBA\xBD\x5`\x31\x2\xBB\xBD"+
		"\x5<\x1F\x2\xBC\xB8\x3\x2\x2\x2\xBC\xB9\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2"+
		"\xBC\xBB\x3\x2\x2\x2\xBD\x19\x3\x2\x2\x2\xBE\xC0\x5\n\x6\x2\xBF\xBE\x3"+
		"\x2\x2\x2\xC0\xC3\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2"+
		"\xC2\xC4\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xC5\a\v\x2\x2\xC5\xC6\x5"+
		"\x4\x3\x2\xC6\xC7\x5\x1C\xF\x2\xC7\x1B\x3\x2\x2\x2\xC8\xC9\a=\x2\x2\xC9"+
		"\xD1\x5\x1E\x10\x2\xCA\xCE\a\x34\x2\x2\xCB\xCD\x5\"\x12\x2\xCC\xCB\x3"+
		"\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2"+
		"\xCF\xD2\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1\xCA\x3\x2\x2\x2\xD1\xD2\x3"+
		"\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD4\a>\x2\x2\xD4\x1D\x3\x2\x2\x2\xD5"+
		"\xDA\x5 \x11\x2\xD6\xD7\a\x37\x2\x2\xD7\xD9\x5 \x11\x2\xD8\xD6\x3\x2\x2"+
		"\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\x1F"+
		"\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xDF\x5\n\x6\x2\xDE\xDD\x3\x2\x2\x2"+
		"\xDF\xE2\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE3\x3"+
		"\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE3\xE4\x5\x4\x3\x2\xE4!\x3\x2\x2\x2\xE5"+
		"\xE6\x5T+\x2\xE6#\x3\x2\x2\x2\xE7\xE9\x5\n\x6\x2\xE8\xE7\x3\x2\x2\x2\xE9"+
		"\xEC\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xEE\x3\x2"+
		"\x2\x2\xEC\xEA\x3\x2\x2\x2\xED\xEF\a\b\x2\x2\xEE\xED\x3\x2\x2\x2\xEE\xEF"+
		"\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\xF1\a\t\x2\x2\xF1\xF4\x5\x4\x3\x2"+
		"\xF2\xF3\a\x35\x2\x2\xF3\xF5\x5(\x15\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3"+
		"\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF7\x5&\x14\x2\xF7%\x3\x2\x2\x2\xF8"+
		"\xFC\a=\x2\x2\xF9\xFB\x5,\x17\x2\xFA\xF9\x3\x2\x2\x2\xFB\xFE\x3\x2\x2"+
		"\x2\xFC\xFA\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFF\x3\x2\x2\x2\xFE\xFC"+
		"\x3\x2\x2\x2\xFF\x100\a>\x2\x2\x100\'\x3\x2\x2\x2\x101\x106\x5*\x16\x2"+
		"\x102\x103\a\x37\x2\x2\x103\x105\x5*\x16\x2\x104\x102\x3\x2\x2\x2\x105"+
		"\x108\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107)\x3"+
		"\x2\x2\x2\x108\x106\x3\x2\x2\x2\x109\x10A\x5\b\x5\x2\x10A+\x3\x2\x2\x2"+
		"\x10B\x10E\x5.\x18\x2\x10C\x10E\x5T+\x2\x10D\x10B\x3\x2\x2\x2\x10D\x10C"+
		"\x3\x2\x2\x2\x10E-\x3\x2\x2\x2\x10F\x111\x5\n\x6\x2\x110\x10F\x3\x2\x2"+
		"\x2\x111\x114\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2"+
		"\x113\x116\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x115\x117\x5\x30\x19\x2\x116"+
		"\x115\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x119"+
		"\x5\x42\"\x2\x119\x11B\x5\x4\x3\x2\x11A\x11C\x5\x32\x1A\x2\x11B\x11A\x3"+
		"\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x120\x3\x2\x2\x2\x11D\x11F\x5\x34"+
		"\x1B\x2\x11E\x11D\x3\x2\x2\x2\x11F\x122\x3\x2\x2\x2\x120\x11E\x3\x2\x2"+
		"\x2\x120\x121\x3\x2\x2\x2\x121\x123\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2"+
		"\x123\x124\a\x34\x2\x2\x124/\x3\x2\x2\x2\x125\x126\t\x2\x2\x2\x126\x31"+
		"\x3\x2\x2\x2\x127\x128\a\x38\x2\x2\x128\x129\x5p\x39\x2\x129\x33\x3\x2"+
		"\x2\x2\x12A\x12D\x5\x36\x1C\x2\x12B\x12D\x5\x38\x1D\x2\x12C\x12A\x3\x2"+
		"\x2\x2\x12C\x12B\x3\x2\x2\x2\x12D\x35\x3\x2\x2\x2\x12E\x130\a*\x2\x2\x12F"+
		"\x131\x5:\x1E\x2\x130\x12F\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x37"+
		"\x3\x2\x2\x2\x132\x134\a+\x2\x2\x133\x135\x5:\x1E\x2\x134\x133\x3\x2\x2"+
		"\x2\x134\x135\x3\x2\x2\x2\x135\x39\x3\x2\x2\x2\x136\x13B\x5\b\x5\x2\x137"+
		"\x138\a\x37\x2\x2\x138\x13A\x5\b\x5\x2\x139\x137\x3\x2\x2\x2\x13A\x13D"+
		"\x3\x2\x2\x2\x13B\x139\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C;\x3\x2\x2"+
		"\x2\x13D\x13B\x3\x2\x2\x2\x13E\x13F\a)\x2\x2\x13F\x140\x5\x42\"\x2\x140"+
		"\x141\x5\x4\x3\x2\x141\x142\a\x34\x2\x2\x142=\x3\x2\x2\x2\x143\x146\x5"+
		"\x42\"\x2\x144\x146\x5L\'\x2\x145\x143\x3\x2\x2\x2\x145\x144\x3\x2\x2"+
		"\x2\x146?\x3\x2\x2\x2\x147\x148\x5\x42\"\x2\x148\x41\x3\x2\x2\x2\x149"+
		"\x14C\x5P)\x2\x14A\x14C\x5\x44#\x2\x14B\x149\x3\x2\x2\x2\x14B\x14A\x3"+
		"\x2\x2\x2\x14C\x43\x3\x2\x2\x2\x14D\x152\x5J&\x2\x14E\x152\x5H%\x2\x14F"+
		"\x152\x5N(\x2\x150\x152\x5\x46$\x2\x151\x14D\x3\x2\x2\x2\x151\x14E\x3"+
		"\x2\x2\x2\x151\x14F\x3\x2\x2\x2\x151\x150\x3\x2\x2\x2\x152\x45\x3\x2\x2"+
		"\x2\x153\x154\x5\b\x5\x2\x154G\x3\x2\x2\x2\x155\x156\t\x3\x2\x2\x156I"+
		"\x3\x2\x2\x2\x157\x158\t\x4\x2\x2\x158K\x3\x2\x2\x2\x159\x15A\a\x13\x2"+
		"\x2\x15AM\x3\x2\x2\x2\x15B\x15C\x5J&\x2\x15C\x15D\a\x41\x2\x2\x15DO\x3"+
		"\x2\x2\x2\x15E\x15F\x5R*\x2\x15F\x160\a?\x2\x2\x160\x161\x5\x44#\x2\x161"+
		"\x162\a@\x2\x2\x162Q\x3\x2\x2\x2\x163\x164\t\x5\x2\x2\x164S\x3\x2\x2\x2"+
		"\x165\x167\x5\n\x6\x2\x166\x165\x3\x2\x2\x2\x167\x16A\x3\x2\x2\x2\x168"+
		"\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16E\x3\x2\x2\x2\x16A\x168"+
		"\x3\x2\x2\x2\x16B\x16D\x5V,\x2\x16C\x16B\x3\x2\x2\x2\x16D\x170\x3\x2\x2"+
		"\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x171\x3\x2\x2\x2"+
		"\x170\x16E\x3\x2\x2\x2\x171\x172\x5> \x2\x172\x173\x5\x4\x3\x2\x173\x175"+
		"\a\x39\x2\x2\x174\x176\x5\\/\x2\x175\x174\x3\x2\x2\x2\x175\x176\x3\x2"+
		"\x2\x2\x176\x177\x3\x2\x2\x2\x177\x178\a:\x2\x2\x178\x179\a\x34\x2\x2"+
		"\x179U\x3\x2\x2\x2\x17A\x17D\x5X-\x2\x17B\x17D\x5Z.\x2\x17C\x17A\x3\x2"+
		"\x2\x2\x17C\x17B\x3\x2\x2\x2\x17DW\x3\x2\x2\x2\x17E\x17F\a\x32\x2\x2\x17F"+
		"Y\x3\x2\x2\x2\x180\x181\a,\x2\x2\x181[\x3\x2\x2\x2\x182\x187\x5^\x30\x2"+
		"\x183\x184\a\x37\x2\x2\x184\x186\x5^\x30\x2\x185\x183\x3\x2\x2\x2\x186"+
		"\x189\x3\x2\x2\x2\x187\x185\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188]\x3"+
		"\x2\x2\x2\x189\x187\x3\x2\x2\x2\x18A\x18C\x5\n\x6\x2\x18B\x18A\x3\x2\x2"+
		"\x2\x18C\x18F\x3\x2\x2\x2\x18D\x18B\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2"+
		"\x18E\x190\x3\x2\x2\x2\x18F\x18D\x3\x2\x2\x2\x190\x191\x5\x42\"\x2\x191"+
		"\x192\x5\x4\x3\x2\x192_\x3\x2\x2\x2\x193\x195\x5\n\x6\x2\x194\x193\x3"+
		"\x2\x2\x2\x195\x198\x3\x2\x2\x2\x196\x194\x3\x2\x2\x2\x196\x197\x3\x2"+
		"\x2\x2\x197\x199\x3\x2\x2\x2\x198\x196\x3\x2\x2\x2\x199\x19A\a\f\x2\x2"+
		"\x19A\x19B\x5\b\x5\x2\x19B\x19C\a\xE\x2\x2\x19C\x19D\x5\b\x5\x2\x19D\x19E"+
		"\a\x34\x2\x2\x19E\x61\x3\x2\x2\x2\x19F\x1A0\t\x6\x2\x2\x1A0\x63\x3\x2"+
		"\x2\x2\x1A1\x1A8\x5\x66\x34\x2\x1A2\x1A8\x5h\x35\x2\x1A3\x1A8\x5j\x36"+
		"\x2\x1A4\x1A8\x5l\x37\x2\x1A5\x1A8\x5n\x38\x2\x1A6\x1A8\x5p\x39\x2\x1A7"+
		"\x1A1\x3\x2\x2\x2\x1A7\x1A2\x3\x2\x2\x2\x1A7\x1A3\x3\x2\x2\x2\x1A7\x1A4"+
		"\x3\x2\x2\x2\x1A7\x1A5\x3\x2\x2\x2\x1A7\x1A6\x3\x2\x2\x2\x1A8\x65\x3\x2"+
		"\x2\x2\x1A9\x1AA\a\x10\x2\x2\x1AAg\x3\x2\x2\x2\x1AB\x1AC\t\a\x2\x2\x1AC"+
		"i\x3\x2\x2\x2\x1AD\x1AE\a\x62\x2\x2\x1AEk\x3\x2\x2\x2\x1AF\x1B0\a\x63"+
		"\x2\x2\x1B0m\x3\x2\x2\x2\x1B1\x1B2\a\x64\x2\x2\x1B2o\x3\x2\x2\x2\x1B3"+
		"\x1B4\ai\x2\x2\x1B4q\x3\x2\x2\x2(~\x88\x94\x9C\xA3\xA6\xAF\xBC\xC1\xCE"+
		"\xD1\xDA\xE0\xEA\xEE\xF4\xFC\x106\x10D\x112\x116\x11B\x120\x12C\x130\x134"+
		"\x13B\x145\x14B\x151\x168\x16E\x175\x17C\x187\x18D\x196\x1A7";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Languages.Meta.Syntax.InternalSyntax
