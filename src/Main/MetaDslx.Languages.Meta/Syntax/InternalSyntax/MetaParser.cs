//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Syntax\InternalSyntax\MetaParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Meta.Syntax.InternalSyntax {

using MetaDslx.Languages.Meta.Model;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MetaParser : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParser {
    private MetaSyntaxParser SyntaxParser => (MetaSyntaxParser)this.IncrementalAntlr4Parser;
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KNamespace=1, KUsing=2, KMetamodel=3, KExtern=4, KTypeDef=5, KAbstract=6, 
		KClass=7, KStruct=8, KEnum=9, KAssociation=10, KContainment=11, KWith=12, 
		KNew=13, KNull=14, KTrue=15, KFalse=16, KVoid=17, KObject=18, KSymbol=19, 
		KString=20, KInt=21, KLong=22, KFloat=23, KDouble=24, KByte=25, KBool=26, 
		KList=27, KAny=28, KNone=29, KError=30, KSet=31, KMultiList=32, KMultiSet=33, 
		KThis=34, KTypeof=35, KAs=36, KIs=37, KBase=38, KConst=39, KRedefines=40, 
		KSubsets=41, KReadonly=42, KLazy=43, KSynthetized=44, KInherited=45, KDerived=46, 
		KUnion=47, KBuilder=48, KStatic=49, TSemicolon=50, TColon=51, TDot=52, 
		TComma=53, TAssign=54, TOpenParen=55, TCloseParen=56, TOpenBracket=57, 
		TCloseBracket=58, TOpenBrace=59, TCloseBrace=60, TLessThan=61, TGreaterThan=62, 
		TQuestion=63, TQuestionQuestion=64, TAmpersand=65, THat=66, TBar=67, TAndAlso=68, 
		TOrElse=69, TPlusPlus=70, TMinusMinus=71, TPlus=72, TMinus=73, TTilde=74, 
		TExclamation=75, TSlash=76, TAsterisk=77, TPercent=78, TLessThanOrEqual=79, 
		TGreaterThanOrEqual=80, TEqual=81, TNotEqual=82, TAsteriskAssign=83, TSlashAssign=84, 
		TPercentAssign=85, TPlusAssign=86, TMinusAssign=87, TLeftShiftAssign=88, 
		TRightShiftAssign=89, TAmpersandAssign=90, THatAssign=91, TBarAssign=92, 
		IUri=93, IPrefix=94, IdentifierNormal=95, IdentifierVerbatim=96, LInteger=97, 
		LDecimal=98, LScientific=99, LDateTimeOffset=100, LDateTime=101, LDate=102, 
		LTime=103, LRegularString=104, LGuid=105, LUtf8Bom=106, LWhiteSpace=107, 
		LCrLf=108, LLineEnd=109, LSingleLineComment=110, LComment=111, LDoubleQuoteVerbatimString=112, 
		LSingleQuoteVerbatimString=113, DoubleQuoteVerbatimStringLiteralStart=114, 
		SingleQuoteVerbatimStringLiteralStart=115, LCommentStart=116;
	public const int
		RULE_main = 0, RULE_name = 1, RULE_qualifiedName = 2, RULE_qualifier = 3, 
		RULE_attribute = 4, RULE_usingNamespace = 5, RULE_namespaceDeclaration = 6, 
		RULE_namespaceBody = 7, RULE_metamodelDeclaration = 8, RULE_metamodelPropertyList = 9, 
		RULE_metamodelProperty = 10, RULE_metamodelUriProperty = 11, RULE_metamodelPrefixProperty = 12, 
		RULE_declaration = 13, RULE_enumDeclaration = 14, RULE_enumBody = 15, 
		RULE_enumValues = 16, RULE_enumValue = 17, RULE_enumMemberDeclaration = 18, 
		RULE_classDeclaration = 19, RULE_symbolType = 20, RULE_classBody = 21, 
		RULE_classAncestors = 22, RULE_classAncestor = 23, RULE_classMemberDeclaration = 24, 
		RULE_fieldDeclaration = 25, RULE_fieldContainment = 26, RULE_fieldModifier = 27, 
		RULE_defaultValue = 28, RULE_redefinitionsOrSubsettings = 29, RULE_redefinitions = 30, 
		RULE_subsettings = 31, RULE_nameUseList = 32, RULE_constDeclaration = 33, 
		RULE_constValue = 34, RULE_returnType = 35, RULE_typeOfReference = 36, 
		RULE_typeReference = 37, RULE_simpleType = 38, RULE_classType = 39, RULE_objectType = 40, 
		RULE_primitiveType = 41, RULE_voidType = 42, RULE_nullableType = 43, RULE_collectionType = 44, 
		RULE_collectionKind = 45, RULE_operationDeclaration = 46, RULE_operationModifier = 47, 
		RULE_operationModifierBuilder = 48, RULE_operationModifierReadonly = 49, 
		RULE_parameterList = 50, RULE_parameter = 51, RULE_associationDeclaration = 52, 
		RULE_identifier = 53, RULE_literal = 54, RULE_nullLiteral = 55, RULE_booleanLiteral = 56, 
		RULE_integerLiteral = 57, RULE_decimalLiteral = 58, RULE_scientificLiteral = 59, 
		RULE_stringLiteral = 60;
	public static readonly string[] ruleNames = {
		"main", "name", "qualifiedName", "qualifier", "attribute", "usingNamespace", 
		"namespaceDeclaration", "namespaceBody", "metamodelDeclaration", "metamodelPropertyList", 
		"metamodelProperty", "metamodelUriProperty", "metamodelPrefixProperty", 
		"declaration", "enumDeclaration", "enumBody", "enumValues", "enumValue", 
		"enumMemberDeclaration", "classDeclaration", "symbolType", "classBody", 
		"classAncestors", "classAncestor", "classMemberDeclaration", "fieldDeclaration", 
		"fieldContainment", "fieldModifier", "defaultValue", "redefinitionsOrSubsettings", 
		"redefinitions", "subsettings", "nameUseList", "constDeclaration", "constValue", 
		"returnType", "typeOfReference", "typeReference", "simpleType", "classType", 
		"objectType", "primitiveType", "voidType", "nullableType", "collectionType", 
		"collectionKind", "operationDeclaration", "operationModifier", "operationModifierBuilder", 
		"operationModifierReadonly", "parameterList", "parameter", "associationDeclaration", 
		"identifier", "literal", "nullLiteral", "booleanLiteral", "integerLiteral", 
		"decimalLiteral", "scientificLiteral", "stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'using'", "'metamodel'", "'extern'", "'typedef'", 
		"'abstract'", "'class'", "'struct'", "'enum'", "'association'", "'containment'", 
		"'with'", "'new'", "'null'", "'true'", "'false'", "'void'", "'object'", 
		"'symbol'", "'string'", "'int'", "'long'", "'float'", "'double'", "'byte'", 
		"'bool'", "'list'", "'any'", "'none'", "'error'", "'set'", "'multi_list'", 
		"'multi_set'", "'this'", "'typeof'", "'as'", "'is'", "'base'", "'const'", 
		"'redefines'", "'subsets'", "'readonly'", "'lazy'", "'synthetized'", "'inherited'", 
		"'derived'", "'union'", "'builder'", "'static'", "';'", "':'", "'.'", 
		"','", "'='", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'>'", 
		"'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", "'||'", "'++'", "'--'", "'+'", 
		"'-'", "'~'", "'!'", "'/'", null, "'%'", "'<='", "'>='", "'=='", "'!='", 
		"'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", 
		"'|='", "'Uri'", "'Prefix'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'\"'", "'''", 
		"'@\"'", "'@''", "'/*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KUsing", "KMetamodel", "KExtern", "KTypeDef", "KAbstract", 
		"KClass", "KStruct", "KEnum", "KAssociation", "KContainment", "KWith", 
		"KNew", "KNull", "KTrue", "KFalse", "KVoid", "KObject", "KSymbol", "KString", 
		"KInt", "KLong", "KFloat", "KDouble", "KByte", "KBool", "KList", "KAny", 
		"KNone", "KError", "KSet", "KMultiList", "KMultiSet", "KThis", "KTypeof", 
		"KAs", "KIs", "KBase", "KConst", "KRedefines", "KSubsets", "KReadonly", 
		"KLazy", "KSynthetized", "KInherited", "KDerived", "KUnion", "KBuilder", 
		"KStatic", "TSemicolon", "TColon", "TDot", "TComma", "TAssign", "TOpenParen", 
		"TCloseParen", "TOpenBracket", "TCloseBracket", "TOpenBrace", "TCloseBrace", 
		"TLessThan", "TGreaterThan", "TQuestion", "TQuestionQuestion", "TAmpersand", 
		"THat", "TBar", "TAndAlso", "TOrElse", "TPlusPlus", "TMinusMinus", "TPlus", 
		"TMinus", "TTilde", "TExclamation", "TSlash", "TAsterisk", "TPercent", 
		"TLessThanOrEqual", "TGreaterThanOrEqual", "TEqual", "TNotEqual", "TAsteriskAssign", 
		"TSlashAssign", "TPercentAssign", "TPlusAssign", "TMinusAssign", "TLeftShiftAssign", 
		"TRightShiftAssign", "TAmpersandAssign", "THatAssign", "TBarAssign", "IUri", 
		"IPrefix", "IdentifierNormal", "IdentifierVerbatim", "LInteger", "LDecimal", 
		"LScientific", "LDateTimeOffset", "LDateTime", "LDate", "LTime", "LRegularString", 
		"LGuid", "LUtf8Bom", "LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", 
		"LComment", "LDoubleQuoteVerbatimString", "LSingleQuoteVerbatimString", 
		"DoubleQuoteVerbatimStringLiteralStart", "SingleQuoteVerbatimStringLiteralStart", 
		"LCommentStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MetaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MetaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MetaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MetaParser.Eof, 0); }
		public UsingNamespaceContext[] usingNamespace() {
			return GetRuleContexts<UsingNamespaceContext>();
		}
		public UsingNamespaceContext usingNamespace(int i) {
			return GetRuleContext<UsingNamespaceContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMain() : _DoParseMain();
	}

	internal MainContext _DoParseMain() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KUsing) {
				{
				{
				State = 122; usingNamespace();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 128; namespaceDeclaration();
			State = 129; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseName() : _DoParseName();
	}

	internal NameContext _DoParseName() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifiedName() : _DoParseQualifiedName();
	}

	internal QualifiedNameContext _DoParseQualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifier() : _DoParseQualifier();
	}

	internal QualifierContext _DoParseQualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; identifier();
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TDot) {
				{
				{
				State = 136; Match(TDot);
				State = 137; identifier();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaParser.TOpenBracket, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaParser.TCloseBracket, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAttribute() : _DoParseAttribute();
	}

	internal AttributeContext _DoParseAttribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(TOpenBracket);
			State = 144; qualifier();
			State = 145; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingNamespaceContext : ParserRuleContext {
		public ITerminalNode KUsing() { return GetToken(MetaParser.KUsing, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public UsingNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingNamespace; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingNamespaceContext usingNamespace() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseUsingNamespace() : _DoParseUsingNamespace();
	}

	internal UsingNamespaceContext _DoParseUsingNamespace() {
		UsingNamespaceContext _localctx = new UsingNamespaceContext(Context, State);
		EnterRule(_localctx, 10, RULE_usingNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(KUsing);
			State = 148; qualifier();
			State = 149; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNamespaceDeclaration() : _DoParseNamespaceDeclaration();
	}

	internal NamespaceDeclarationContext _DoParseNamespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 151; attribute();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 157; Match(KNamespace);
			State = 158; qualifiedName();
			State = 159; namespaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		public MetamodelDeclarationContext metamodelDeclaration() {
			return GetRuleContext<MetamodelDeclarationContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		public UsingNamespaceContext[] usingNamespace() {
			return GetRuleContexts<UsingNamespaceContext>();
		}
		public UsingNamespaceContext usingNamespace(int i) {
			return GetRuleContext<UsingNamespaceContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNamespaceBody() : _DoParseNamespaceBody();
	}

	internal NamespaceBodyContext _DoParseNamespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(TOpenBrace);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KUsing) {
				{
				{
				State = 162; usingNamespace();
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 168; metamodelDeclaration();
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KAbstract) | (1L << KClass) | (1L << KEnum) | (1L << KAssociation) | (1L << KConst) | (1L << TOpenBracket))) != 0)) {
				{
				{
				State = 169; declaration();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 175; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelDeclarationContext : ParserRuleContext {
		public ITerminalNode KMetamodel() { return GetToken(MetaParser.KMetamodel, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaParser.TCloseParen, 0); }
		public MetamodelPropertyListContext metamodelPropertyList() {
			return GetRuleContext<MetamodelPropertyListContext>(0);
		}
		public MetamodelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelDeclarationContext metamodelDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMetamodelDeclaration() : _DoParseMetamodelDeclaration();
	}

	internal MetamodelDeclarationContext _DoParseMetamodelDeclaration() {
		MetamodelDeclarationContext _localctx = new MetamodelDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_metamodelDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 177; attribute();
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 183; Match(KMetamodel);
			State = 184; name();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOpenParen) {
				{
				State = 185; Match(TOpenParen);
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IUri || _la==IPrefix) {
					{
					State = 186; metamodelPropertyList();
					}
				}

				State = 189; Match(TCloseParen);
				}
			}

			State = 192; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyListContext : ParserRuleContext {
		public MetamodelPropertyContext[] metamodelProperty() {
			return GetRuleContexts<MetamodelPropertyContext>();
		}
		public MetamodelPropertyContext metamodelProperty(int i) {
			return GetRuleContext<MetamodelPropertyContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public MetamodelPropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelPropertyList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyListContext metamodelPropertyList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMetamodelPropertyList() : _DoParseMetamodelPropertyList();
	}

	internal MetamodelPropertyListContext _DoParseMetamodelPropertyList() {
		MetamodelPropertyListContext _localctx = new MetamodelPropertyListContext(Context, State);
		EnterRule(_localctx, 18, RULE_metamodelPropertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; metamodelProperty();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 195; Match(TComma);
				State = 196; metamodelProperty();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyContext : ParserRuleContext {
		public MetamodelUriPropertyContext metamodelUriProperty() {
			return GetRuleContext<MetamodelUriPropertyContext>(0);
		}
		public MetamodelPrefixPropertyContext metamodelPrefixProperty() {
			return GetRuleContext<MetamodelPrefixPropertyContext>(0);
		}
		public MetamodelPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelProperty; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyContext metamodelProperty() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMetamodelProperty() : _DoParseMetamodelProperty();
	}

	internal MetamodelPropertyContext _DoParseMetamodelProperty() {
		MetamodelPropertyContext _localctx = new MetamodelPropertyContext(Context, State);
		EnterRule(_localctx, 20, RULE_metamodelProperty);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IUri:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202; metamodelUriProperty();
				}
				break;
			case IPrefix:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; metamodelPrefixProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelUriPropertyContext : ParserRuleContext {
		public ITerminalNode IUri() { return GetToken(MetaParser.IUri, 0); }
		public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public MetamodelUriPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelUriProperty; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelUriProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelUriPropertyContext metamodelUriProperty() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMetamodelUriProperty() : _DoParseMetamodelUriProperty();
	}

	internal MetamodelUriPropertyContext _DoParseMetamodelUriProperty() {
		MetamodelUriPropertyContext _localctx = new MetamodelUriPropertyContext(Context, State);
		EnterRule(_localctx, 22, RULE_metamodelUriProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(IUri);
			State = 207; Match(TAssign);
			State = 208; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPrefixPropertyContext : ParserRuleContext {
		public ITerminalNode IPrefix() { return GetToken(MetaParser.IPrefix, 0); }
		public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public MetamodelPrefixPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelPrefixProperty; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelPrefixProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPrefixPropertyContext metamodelPrefixProperty() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMetamodelPrefixProperty() : _DoParseMetamodelPrefixProperty();
	}

	internal MetamodelPrefixPropertyContext _DoParseMetamodelPrefixProperty() {
		MetamodelPrefixPropertyContext _localctx = new MetamodelPrefixPropertyContext(Context, State);
		EnterRule(_localctx, 24, RULE_metamodelPrefixProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(IPrefix);
			State = 211; Match(TAssign);
			State = 212; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public AssociationDeclarationContext associationDeclaration() {
			return GetRuleContext<AssociationDeclarationContext>(0);
		}
		public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDeclaration() : _DoParseDeclaration();
	}

	internal DeclarationContext _DoParseDeclaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_declaration);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214; enumDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; classDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 216; associationDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 217; constDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnum() { return GetToken(MetaParser.KEnum, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumDeclaration() : _DoParseEnumDeclaration();
	}

	internal EnumDeclarationContext _DoParseEnumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 220; attribute();
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 226; Match(KEnum);
			State = 227; name();
			State = 228; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumBody() : _DoParseEnumBody();
	}

	internal EnumBodyContext _DoParseEnumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(TOpenBrace);
			State = 231; enumValues();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TSemicolon) {
				{
				State = 232; Match(TSemicolon);
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KVoid) | (1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KReadonly) | (1L << KBuilder) | (1L << TOpenBracket))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IPrefix - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) {
					{
					{
					State = 233; enumMemberDeclaration();
					}
					}
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 241; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumValues() : _DoParseEnumValues();
	}

	internal EnumValuesContext _DoParseEnumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; enumValue();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 244; Match(TComma);
				State = 245; enumValue();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumValue() : _DoParseEnumValue();
	}

	internal EnumValueContext _DoParseEnumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 34, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 251; attribute();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 257; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext enumMemberDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumMemberDeclaration() : _DoParseEnumMemberDeclaration();
	}

	internal EnumMemberDeclarationContext _DoParseEnumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_enumMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; operationDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode KClass() { return GetToken(MetaParser.KClass, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode KAbstract() { return GetToken(MetaParser.KAbstract, 0); }
		public SymbolTypeContext symbolType() {
			return GetRuleContext<SymbolTypeContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaParser.TColon, 0); }
		public ClassAncestorsContext classAncestors() {
			return GetRuleContext<ClassAncestorsContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassDeclaration() : _DoParseClassDeclaration();
	}

	internal ClassDeclarationContext _DoParseClassDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 261; attribute();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KAbstract) {
				{
				State = 267; Match(KAbstract);
				}
			}

			State = 270; Match(KClass);
			State = 271; name();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOpenBracket) {
				{
				State = 272; symbolType();
				}
			}

			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TColon) {
				{
				State = 275; Match(TColon);
				State = 276; classAncestors();
				}
			}

			State = 279; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolTypeContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaParser.TOpenBracket, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaParser.TCloseBracket, 0); }
		public SymbolTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolTypeContext symbolType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseSymbolType() : _DoParseSymbolType();
	}

	internal SymbolTypeContext _DoParseSymbolType() {
		SymbolTypeContext _localctx = new SymbolTypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_symbolType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; Match(TOpenBracket);
			State = 282; qualifier();
			State = 283; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassBody() : _DoParseClassBody();
	}

	internal ClassBodyContext _DoParseClassBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(TOpenBrace);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KVoid) | (1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << KUnion) | (1L << KBuilder) | (1L << TOpenBracket))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IPrefix - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) {
				{
				{
				State = 286; classMemberDeclaration();
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 292; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorsContext : ParserRuleContext {
		public ClassAncestorContext[] classAncestor() {
			return GetRuleContexts<ClassAncestorContext>();
		}
		public ClassAncestorContext classAncestor(int i) {
			return GetRuleContext<ClassAncestorContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public ClassAncestorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestors; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorsContext classAncestors() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassAncestors() : _DoParseClassAncestors();
	}

	internal ClassAncestorsContext _DoParseClassAncestors() {
		ClassAncestorsContext _localctx = new ClassAncestorsContext(Context, State);
		EnterRule(_localctx, 44, RULE_classAncestors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; classAncestor();
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 295; Match(TComma);
				State = 296; classAncestor();
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ClassAncestorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorContext classAncestor() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassAncestor() : _DoParseClassAncestor();
	}

	internal ClassAncestorContext _DoParseClassAncestor() {
		ClassAncestorContext _localctx = new ClassAncestorContext(Context, State);
		EnterRule(_localctx, 46, RULE_classAncestor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassMemberDeclaration() : _DoParseClassMemberDeclaration();
	}

	internal ClassMemberDeclarationContext _DoParseClassMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_classMemberDeclaration);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304; fieldDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305; operationDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public FieldContainmentContext fieldContainment() {
			return GetRuleContext<FieldContainmentContext>(0);
		}
		public FieldModifierContext fieldModifier() {
			return GetRuleContext<FieldModifierContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public RedefinitionsOrSubsettingsContext[] redefinitionsOrSubsettings() {
			return GetRuleContexts<RedefinitionsOrSubsettingsContext>();
		}
		public RedefinitionsOrSubsettingsContext redefinitionsOrSubsettings(int i) {
			return GetRuleContext<RedefinitionsOrSubsettingsContext>(i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldDeclaration() : _DoParseFieldDeclaration();
	}

	internal FieldDeclarationContext _DoParseFieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 308; attribute();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KContainment) {
				{
				State = 314; fieldContainment();
				}
			}

			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << KUnion))) != 0)) {
				{
				State = 317; fieldModifier();
				}
			}

			State = 320; typeReference();
			State = 321; name();
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 322; defaultValue();
				}
			}

			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KRedefines || _la==KSubsets) {
				{
				{
				State = 325; redefinitionsOrSubsettings();
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 331; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContainmentContext : ParserRuleContext {
		public ITerminalNode KContainment() { return GetToken(MetaParser.KContainment, 0); }
		public FieldContainmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldContainment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldContainment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContainmentContext fieldContainment() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldContainment() : _DoParseFieldContainment();
	}

	internal FieldContainmentContext _DoParseFieldContainment() {
		FieldContainmentContext _localctx = new FieldContainmentContext(Context, State);
		EnterRule(_localctx, 52, RULE_fieldContainment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(KContainment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public ITerminalNode KReadonly() { return GetToken(MetaParser.KReadonly, 0); }
		public ITerminalNode KLazy() { return GetToken(MetaParser.KLazy, 0); }
		public ITerminalNode KDerived() { return GetToken(MetaParser.KDerived, 0); }
		public ITerminalNode KUnion() { return GetToken(MetaParser.KUnion, 0); }
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldModifier() : _DoParseFieldModifier();
	}

	internal FieldModifierContext _DoParseFieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_fieldModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << KUnion))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDefaultValue() : _DoParseDefaultValue();
	}

	internal DefaultValueContext _DoParseDefaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 56, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(TAssign);
			State = 338; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedefinitionsOrSubsettingsContext : ParserRuleContext {
		public RedefinitionsContext redefinitions() {
			return GetRuleContext<RedefinitionsContext>(0);
		}
		public SubsettingsContext subsettings() {
			return GetRuleContext<SubsettingsContext>(0);
		}
		public RedefinitionsOrSubsettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redefinitionsOrSubsettings; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitionsOrSubsettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedefinitionsOrSubsettingsContext redefinitionsOrSubsettings() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRedefinitionsOrSubsettings() : _DoParseRedefinitionsOrSubsettings();
	}

	internal RedefinitionsOrSubsettingsContext _DoParseRedefinitionsOrSubsettings() {
		RedefinitionsOrSubsettingsContext _localctx = new RedefinitionsOrSubsettingsContext(Context, State);
		EnterRule(_localctx, 58, RULE_redefinitionsOrSubsettings);
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KRedefines:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340; redefinitions();
				}
				break;
			case KSubsets:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341; subsettings();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedefinitionsContext : ParserRuleContext {
		public ITerminalNode KRedefines() { return GetToken(MetaParser.KRedefines, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public RedefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redefinitions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedefinitionsContext redefinitions() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRedefinitions() : _DoParseRedefinitions();
	}

	internal RedefinitionsContext _DoParseRedefinitions() {
		RedefinitionsContext _localctx = new RedefinitionsContext(Context, State);
		EnterRule(_localctx, 60, RULE_redefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(KRedefines);
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IPrefix - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) {
				{
				State = 345; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsettingsContext : ParserRuleContext {
		public ITerminalNode KSubsets() { return GetToken(MetaParser.KSubsets, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public SubsettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsettings; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsettingsContext subsettings() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseSubsettings() : _DoParseSubsettings();
	}

	internal SubsettingsContext _DoParseSubsettings() {
		SubsettingsContext _localctx = new SubsettingsContext(Context, State);
		EnterRule(_localctx, 62, RULE_subsettings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(KSubsets);
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IPrefix - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) {
				{
				State = 349; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameUseListContext : ParserRuleContext {
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public NameUseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameUseList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameUseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameUseListContext nameUseList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNameUseList() : _DoParseNameUseList();
	}

	internal NameUseListContext _DoParseNameUseList() {
		NameUseListContext _localctx = new NameUseListContext(Context, State);
		EnterRule(_localctx, 64, RULE_nameUseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; qualifier();
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 353; Match(TComma);
				State = 354; qualifier();
				}
				}
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		public ITerminalNode KConst() { return GetToken(MetaParser.KConst, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public ConstValueContext constValue() {
			return GetRuleContext<ConstValueContext>(0);
		}
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseConstDeclaration() : _DoParseConstDeclaration();
	}

	internal ConstDeclarationContext _DoParseConstDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_constDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(KConst);
			State = 361; typeReference();
			State = 362; name();
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 363; constValue();
				}
			}

			State = 366; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstValueContext : ParserRuleContext {
		public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ConstValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstValueContext constValue() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseConstValue() : _DoParseConstValue();
	}

	internal ConstValueContext _DoParseConstValue() {
		ConstValueContext _localctx = new ConstValueContext(Context, State);
		EnterRule(_localctx, 68, RULE_constValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; Match(TAssign);
			State = 369; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseReturnType() : _DoParseReturnType();
	}

	internal ReturnTypeContext _DoParseReturnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_returnType);
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KObject:
			case KSymbol:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
			case IUri:
			case IPrefix:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 371; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 372; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfReferenceContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeOfReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfReference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfReferenceContext typeOfReference() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypeOfReference() : _DoParseTypeOfReference();
	}

	internal TypeOfReferenceContext _DoParseTypeOfReference() {
		TypeOfReferenceContext _localctx = new TypeOfReferenceContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeOfReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypeReference() : _DoParseTypeReference();
	}

	internal TypeReferenceContext _DoParseTypeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeReference);
		try {
			State = 379;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 377; collectionType();
				}
				break;
			case KObject:
			case KSymbol:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IUri:
			case IPrefix:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378; simpleType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseSimpleType() : _DoParseSimpleType();
	}

	internal SimpleTypeContext _DoParseSimpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_simpleType);
		try {
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 381; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382; objectType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 383; nullableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 384; classType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassType() : _DoParseClassType();
	}

	internal ClassTypeContext _DoParseClassType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_classType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(MetaParser.KObject, 0); }
		public ITerminalNode KSymbol() { return GetToken(MetaParser.KSymbol, 0); }
		public ITerminalNode KString() { return GetToken(MetaParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseObjectType() : _DoParseObjectType();
	}

	internal ObjectTypeContext _DoParseObjectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KSymbol) | (1L << KString))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(MetaParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(MetaParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(MetaParser.KBool, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParsePrimitiveType() : _DoParsePrimitiveType();
	}

	internal PrimitiveTypeContext _DoParsePrimitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseVoidType() : _DoParseVoidType();
	}

	internal VoidTypeContext _DoParseVoidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNullableType() : _DoParseNullableType();
	}

	internal NullableTypeContext _DoParseNullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; primitiveType();
			State = 396; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		public CollectionKindContext collectionKind() {
			return GetRuleContext<CollectionKindContext>(0);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaParser.TLessThan, 0); }
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaParser.TGreaterThan, 0); }
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCollectionType() : _DoParseCollectionType();
	}

	internal CollectionTypeContext _DoParseCollectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_collectionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; collectionKind();
			State = 399; Match(TLessThan);
			State = 400; simpleType();
			State = 401; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionKindContext : ParserRuleContext {
		public ITerminalNode KSet() { return GetToken(MetaParser.KSet, 0); }
		public ITerminalNode KList() { return GetToken(MetaParser.KList, 0); }
		public ITerminalNode KMultiSet() { return GetToken(MetaParser.KMultiSet, 0); }
		public ITerminalNode KMultiList() { return GetToken(MetaParser.KMultiList, 0); }
		public CollectionKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionKind; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionKindContext collectionKind() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCollectionKind() : _DoParseCollectionKind();
	}

	internal CollectionKindContext _DoParseCollectionKind() {
		CollectionKindContext _localctx = new CollectionKindContext(Context, State);
		EnterRule(_localctx, 90, RULE_collectionKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public OperationModifierContext[] operationModifier() {
			return GetRuleContexts<OperationModifierContext>();
		}
		public OperationModifierContext operationModifier(int i) {
			return GetRuleContext<OperationModifierContext>(i);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseOperationDeclaration() : _DoParseOperationDeclaration();
	}

	internal OperationDeclarationContext _DoParseOperationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 405; attribute();
				}
				}
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KReadonly || _la==KBuilder) {
				{
				{
				State = 411; operationModifier();
				}
				}
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 417; returnType();
			State = 418; name();
			State = 419; Match(TOpenParen);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << TOpenBracket))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IPrefix - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) {
				{
				State = 420; parameterList();
				}
			}

			State = 423; Match(TCloseParen);
			State = 424; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationModifierContext : ParserRuleContext {
		public OperationModifierBuilderContext operationModifierBuilder() {
			return GetRuleContext<OperationModifierBuilderContext>(0);
		}
		public OperationModifierReadonlyContext operationModifierReadonly() {
			return GetRuleContext<OperationModifierReadonlyContext>(0);
		}
		public OperationModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationModifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationModifierContext operationModifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseOperationModifier() : _DoParseOperationModifier();
	}

	internal OperationModifierContext _DoParseOperationModifier() {
		OperationModifierContext _localctx = new OperationModifierContext(Context, State);
		EnterRule(_localctx, 94, RULE_operationModifier);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KBuilder:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; operationModifierBuilder();
				}
				break;
			case KReadonly:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427; operationModifierReadonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationModifierBuilderContext : ParserRuleContext {
		public ITerminalNode KBuilder() { return GetToken(MetaParser.KBuilder, 0); }
		public OperationModifierBuilderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationModifierBuilder; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationModifierBuilder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationModifierBuilderContext operationModifierBuilder() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseOperationModifierBuilder() : _DoParseOperationModifierBuilder();
	}

	internal OperationModifierBuilderContext _DoParseOperationModifierBuilder() {
		OperationModifierBuilderContext _localctx = new OperationModifierBuilderContext(Context, State);
		EnterRule(_localctx, 96, RULE_operationModifierBuilder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(KBuilder);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationModifierReadonlyContext : ParserRuleContext {
		public ITerminalNode KReadonly() { return GetToken(MetaParser.KReadonly, 0); }
		public OperationModifierReadonlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationModifierReadonly; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationModifierReadonly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationModifierReadonlyContext operationModifierReadonly() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseOperationModifierReadonly() : _DoParseOperationModifierReadonly();
	}

	internal OperationModifierReadonlyContext _DoParseOperationModifierReadonly() {
		OperationModifierReadonlyContext _localctx = new OperationModifierReadonlyContext(Context, State);
		EnterRule(_localctx, 98, RULE_operationModifierReadonly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(KReadonly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParameterList() : _DoParseParameterList();
	}

	internal ParameterListContext _DoParseParameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 100, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; parameter();
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 435; Match(TComma);
				State = 436; parameter();
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParameter() : _DoParseParameter();
	}

	internal ParameterContext _DoParseParameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 102, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 442; attribute();
				}
				}
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 448; typeReference();
			State = 449; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationDeclarationContext : ParserRuleContext {
		public QualifierContext source;
		public QualifierContext target;
		public ITerminalNode KAssociation() { return GetToken(MetaParser.KAssociation, 0); }
		public ITerminalNode KWith() { return GetToken(MetaParser.KWith, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AssociationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationDeclarationContext associationDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAssociationDeclaration() : _DoParseAssociationDeclaration();
	}

	internal AssociationDeclarationContext _DoParseAssociationDeclaration() {
		AssociationDeclarationContext _localctx = new AssociationDeclarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_associationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 451; attribute();
				}
				}
				State = 456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 457; Match(KAssociation);
			State = 458; _localctx.source = qualifier();
			State = 459; Match(KWith);
			State = 460; _localctx.target = qualifier();
			State = 461; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(MetaParser.IdentifierVerbatim, 0); }
		public ITerminalNode IUri() { return GetToken(MetaParser.IUri, 0); }
		public ITerminalNode IPrefix() { return GetToken(MetaParser.IPrefix, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIdentifier() : _DoParseIdentifier();
	}

	internal IdentifierContext _DoParseIdentifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 106, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (IUri - 93)) | (1L << (IPrefix - 93)) | (1L << (IdentifierNormal - 93)) | (1L << (IdentifierVerbatim - 93)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLiteral() : _DoParseLiteral();
	}

	internal LiteralContext _DoParseLiteral() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 108, RULE_literal);
		try {
			State = 471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 466; booleanLiteral();
				}
				break;
			case LInteger:
				EnterOuterAlt(_localctx, 3);
				{
				State = 467; integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 468; decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 5);
				{
				State = 469; scientificLiteral();
				}
				break;
			case LRegularString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 470; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNullLiteral() : _DoParseNullLiteral();
	}

	internal NullLiteralContext _DoParseNullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 110, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseBooleanLiteral() : _DoParseBooleanLiteral();
	}

	internal BooleanLiteralContext _DoParseBooleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 112, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			_la = TokenStream.LA(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode LInteger() { return GetToken(MetaParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIntegerLiteral() : _DoParseIntegerLiteral();
	}

	internal IntegerLiteralContext _DoParseIntegerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 114, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode LDecimal() { return GetToken(MetaParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDecimalLiteral() : _DoParseDecimalLiteral();
	}

	internal DecimalLiteralContext _DoParseDecimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 116, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479; Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode LScientific() { return GetToken(MetaParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseScientificLiteral() : _DoParseScientificLiteral();
	}

	internal ScientificLiteralContext _DoParseScientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 118, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode LRegularString() { return GetToken(MetaParser.LRegularString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseStringLiteral() : _DoParseStringLiteral();
	}

	internal StringLiteralContext _DoParseStringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 120, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483; Match(LRegularString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'v', '\x1E8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x3', '\x2', '\a', '\x2', '~', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x81', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x8D', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x90', '\v', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\a', '\b', '\x9B', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x9E', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xA6', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\xA9', '\v', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', '\xAD', '\n', '\t', '\f', '\t', '\xE', '\t', '\xB0', 
		'\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\a', '\n', '\xB5', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\xB8', '\v', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xBE', '\n', '\n', 
		'\x3', '\n', '\x5', '\n', '\xC1', '\n', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xC8', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\xCB', '\v', '\v', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\xCF', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xDD', 
		'\n', '\xF', '\x3', '\x10', '\a', '\x10', '\xE0', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\xE3', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\xED', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\xF0', '\v', '\x11', '\x5', '\x11', '\xF2', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\xF9', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xFC', '\v', 
		'\x12', '\x3', '\x13', '\a', '\x13', '\xFF', '\n', '\x13', '\f', '\x13', 
		'\xE', '\x13', '\x102', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\a', '\x15', '\x109', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\x10C', '\v', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x10F', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x114', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x118', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\a', '\x17', '\x122', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x125', 
		'\v', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\a', '\x18', '\x12C', '\n', '\x18', '\f', '\x18', '\xE', 
		'\x18', '\x12F', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x135', '\n', '\x1A', '\x3', '\x1B', '\a', 
		'\x1B', '\x138', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x13B', '\v', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x13E', '\n', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x141', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x146', '\n', '\x1B', '\x3', '\x1B', '\a', '\x1B', 
		'\x149', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x14C', '\v', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x159', '\n', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x5', ' ', '\x15D', '\n', ' ', '\x3', '!', '\x3', '!', '\x5', '!', 
		'\x161', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', 
		'\x166', '\n', '\"', '\f', '\"', '\xE', '\"', '\x169', '\v', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x16F', '\n', '#', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x3', '%', '\x5', '%', '\x178', '\n', '%', '\x3', '&', '\x3', '&', '\x3', 
		'\'', '\x3', '\'', '\x5', '\'', '\x17E', '\n', '\'', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x5', '(', '\x184', '\n', '(', '\x3', ')', 
		'\x3', ')', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', ',', 
		'\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '\x30', 
		'\a', '\x30', '\x199', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x19C', 
		'\v', '\x30', '\x3', '\x30', '\a', '\x30', '\x19F', '\n', '\x30', '\f', 
		'\x30', '\xE', '\x30', '\x1A2', '\v', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x1A8', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x5', 
		'\x31', '\x1AF', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', 
		'\x1B8', '\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x1BB', '\v', '\x34', 
		'\x3', '\x35', '\a', '\x35', '\x1BE', '\n', '\x35', '\f', '\x35', '\xE', 
		'\x35', '\x1C1', '\v', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x36', '\a', '\x36', '\x1C7', '\n', '\x36', '\f', '\x36', '\xE', 
		'\x36', '\x1CA', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x5', '\x38', '\x1DA', '\n', '\x38', '\x3', '\x39', '\x3', 
		'\x39', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', 
		'<', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x2', 
		'\x2', '?', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '\x2', '\b', '\x4', '\x2', ',', '-', '\x30', 
		'\x31', '\x3', '\x2', '\x14', '\x16', '\x3', '\x2', '\x17', '\x1C', '\x4', 
		'\x2', '\x1D', '\x1D', '!', '#', '\x3', '\x2', '_', '\x62', '\x3', '\x2', 
		'\x11', '\x12', '\x2', '\x1DE', '\x2', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x85', '\x3', '\x2', '\x2', '\x2', '\x6', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x89', '\x3', '\x2', '\x2', '\x2', '\n', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x10', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xD0', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xDC', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xE8', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '$', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x105', '\x3', '\x2', '\x2', '\x2', '(', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x11B', '\x3', '\x2', '\x2', '\x2', ',', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x130', '\x3', '\x2', '\x2', '\x2', '\x32', '\x134', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x139', '\x3', '\x2', '\x2', '\x2', '\x36', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x151', '\x3', '\x2', '\x2', '\x2', 
		':', '\x153', '\x3', '\x2', '\x2', '\x2', '<', '\x158', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x15A', '\x3', '\x2', '\x2', '\x2', '@', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x46', '\x172', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x177', '\x3', '\x2', '\x2', '\x2', 'J', '\x179', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x183', '\x3', '\x2', '\x2', '\x2', 'P', '\x185', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x187', '\x3', '\x2', '\x2', '\x2', 'T', '\x189', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x18D', '\x3', '\x2', '\x2', '\x2', 'Z', '\x190', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x195', '\x3', '\x2', '\x2', '\x2', '^', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x64', '\x1B2', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x1B4', '\x3', '\x2', '\x2', '\x2', 'h', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x1D1', '\x3', '\x2', '\x2', '\x2', 'n', '\x1D9', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x1DB', '\x3', '\x2', '\x2', '\x2', 'r', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x1DF', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x1E1', '\x3', '\x2', '\x2', '\x2', 'x', '\x1E3', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x1E5', '\x3', '\x2', '\x2', '\x2', '|', '~', '\x5', 
		'\f', '\a', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x5', 
		'\xE', '\b', '\x2', '\x83', '\x84', '\a', '\x2', '\x2', '\x3', '\x84', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x5', 'l', '\x37', 
		'\x2', '\x86', '\x5', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x5', 
		'\b', '\x5', '\x2', '\x88', '\a', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8E', '\x5', 'l', '\x37', '\x2', '\x8A', '\x8B', '\a', '\x36', '\x2', 
		'\x2', '\x8B', '\x8D', '\x5', 'l', '\x37', '\x2', '\x8C', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\t', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\a', ';', '\x2', '\x2', '\x92', 
		'\x93', '\x5', '\b', '\x5', '\x2', '\x93', '\x94', '\a', '<', '\x2', '\x2', 
		'\x94', '\v', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', '\x4', 
		'\x2', '\x2', '\x96', '\x97', '\x5', '\b', '\x5', '\x2', '\x97', '\x98', 
		'\a', '\x34', '\x2', '\x2', '\x98', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9B', '\x5', '\n', '\x6', '\x2', '\x9A', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\a', '\x3', '\x2', '\x2', '\xA0', '\xA1', 
		'\x5', '\x6', '\x4', '\x2', '\xA1', '\xA2', '\x5', '\x10', '\t', '\x2', 
		'\xA2', '\xF', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA7', '\a', '=', 
		'\x2', '\x2', '\xA4', '\xA6', '\x5', '\f', '\a', '\x2', '\xA5', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xAE', '\x5', '\x12', '\n', '\x2', 
		'\xAB', '\xAD', '\x5', '\x1C', '\xF', '\x2', '\xAC', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xB2', '\a', '>', '\x2', '\x2', '\xB2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xB5', '\x5', '\n', '\x6', '\x2', 
		'\xB4', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '\x5', 
		'\x2', '\x2', '\xBA', '\xC0', '\x5', '\x4', '\x3', '\x2', '\xBB', '\xBD', 
		'\a', '\x39', '\x2', '\x2', '\xBC', '\xBE', '\x5', '\x14', '\v', '\x2', 
		'\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC1', 
		'\a', ':', '\x2', '\x2', '\xC0', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC3', '\a', '\x34', '\x2', '\x2', '\xC3', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC9', '\x5', '\x16', '\f', '\x2', '\xC5', 
		'\xC6', '\a', '\x37', '\x2', '\x2', '\xC6', '\xC8', '\x5', '\x16', '\f', 
		'\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCF', '\x5', 
		'\x18', '\r', '\x2', '\xCD', '\xCF', '\x5', '\x1A', '\xE', '\x2', '\xCE', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\x17', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', 
		'_', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x38', '\x2', '\x2', '\xD2', 
		'\xD3', '\x5', 'z', '>', '\x2', '\xD3', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD5', '\a', '`', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x38', 
		'\x2', '\x2', '\xD6', '\xD7', '\x5', 'z', '>', '\x2', '\xD7', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xDD', '\x5', '\x1E', '\x10', '\x2', 
		'\xD9', '\xDD', '\x5', '(', '\x15', '\x2', '\xDA', '\xDD', '\x5', 'j', 
		'\x36', '\x2', '\xDB', '\xDD', '\x5', '\x44', '#', '\x2', '\xDC', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE0', 
		'\x5', '\n', '\x6', '\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE5', '\a', '\v', '\x2', '\x2', '\xE5', '\xE6', '\x5', '\x4', 
		'\x3', '\x2', '\xE6', '\xE7', '\x5', ' ', '\x11', '\x2', '\xE7', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\a', '=', '\x2', '\x2', '\xE9', 
		'\xF1', '\x5', '\"', '\x12', '\x2', '\xEA', '\xEE', '\a', '\x34', '\x2', 
		'\x2', '\xEB', '\xED', '\x5', '&', '\x14', '\x2', '\xEC', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\a', '>', '\x2', '\x2', '\xF4', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xFA', '\x5', '$', '\x13', '\x2', '\xF6', '\xF7', 
		'\a', '\x37', '\x2', '\x2', '\xF7', '\xF9', '\x5', '$', '\x13', '\x2', 
		'\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFC', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '#', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFF', '\x5', '\n', '\x6', 
		'\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x101', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', 
		'\x5', '\x4', '\x3', '\x2', '\x104', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x106', '\x5', '^', '\x30', '\x2', '\x106', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x107', '\x109', '\x5', '\n', '\x6', '\x2', '\x108', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10F', '\a', '\b', '\x2', 
		'\x2', '\x10E', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x111', '\a', '\t', '\x2', '\x2', '\x111', '\x113', '\x5', '\x4', 
		'\x3', '\x2', '\x112', '\x114', '\x5', '*', '\x16', '\x2', '\x113', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x117', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\a', 
		'\x35', '\x2', '\x2', '\x116', '\x118', '\x5', '.', '\x18', '\x2', '\x117', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', 
		'\x5', ',', '\x17', '\x2', '\x11A', ')', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11C', '\a', ';', '\x2', '\x2', '\x11C', '\x11D', '\x5', '\b', '\x5', 
		'\x2', '\x11D', '\x11E', '\a', '<', '\x2', '\x2', '\x11E', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x123', '\a', '=', '\x2', '\x2', '\x120', 
		'\x122', '\x5', '\x32', '\x1A', '\x2', '\x121', '\x120', '\x3', '\x2', 
		'\x2', '\x2', '\x122', '\x125', '\x3', '\x2', '\x2', '\x2', '\x123', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x126', '\x3', '\x2', '\x2', '\x2', '\x125', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x127', '\a', '>', '\x2', '\x2', '\x127', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12D', '\x5', '\x30', '\x19', 
		'\x2', '\x129', '\x12A', '\a', '\x37', '\x2', '\x2', '\x12A', '\x12C', 
		'\x5', '\x30', '\x19', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x131', '\x5', '\b', '\x5', '\x2', '\x131', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x135', '\x5', '\x34', '\x1B', '\x2', '\x133', 
		'\x135', '\x5', '^', '\x30', '\x2', '\x134', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x133', '\x3', '\x2', '\x2', '\x2', '\x135', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x138', '\x5', '\n', '\x6', '\x2', 
		'\x137', '\x136', '\x3', '\x2', '\x2', '\x2', '\x138', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', 
		'\x5', '\x36', '\x1C', '\x2', '\x13D', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x140', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x141', '\x5', '\x38', '\x1D', '\x2', '\x140', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', 
		'\x5', 'L', '\'', '\x2', '\x143', '\x145', '\x5', '\x4', '\x3', '\x2', 
		'\x144', '\x146', '\x5', ':', '\x1E', '\x2', '\x145', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x146', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x147', '\x149', '\x5', '<', '\x1F', 
		'\x2', '\x148', '\x147', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14E', '\a', '\x34', '\x2', '\x2', '\x14E', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x150', '\a', '\r', '\x2', '\x2', '\x150', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x152', '\t', '\x2', '\x2', '\x2', '\x152', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\a', '\x38', '\x2', 
		'\x2', '\x154', '\x155', '\x5', 'z', '>', '\x2', '\x155', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x159', '\x5', '>', ' ', '\x2', '\x157', 
		'\x159', '\x5', '@', '!', '\x2', '\x158', '\x156', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x157', '\x3', '\x2', '\x2', '\x2', '\x159', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x15C', '\a', '*', '\x2', '\x2', '\x15B', 
		'\x15D', '\x5', '\x42', '\"', '\x2', '\x15C', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15D', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x15E', '\x160', '\a', '+', '\x2', '\x2', '\x15F', 
		'\x161', '\x5', '\x42', '\"', '\x2', '\x160', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x167', '\x5', '\b', '\x5', '\x2', 
		'\x163', '\x164', '\a', '\x37', '\x2', '\x2', '\x164', '\x166', '\x5', 
		'\b', '\x5', '\x2', '\x165', '\x163', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x167', '\x165', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x168', '\x3', '\x2', '\x2', '\x2', '\x168', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16B', '\a', ')', '\x2', '\x2', '\x16B', '\x16C', '\x5', 'L', 
		'\'', '\x2', '\x16C', '\x16E', '\x5', '\x4', '\x3', '\x2', '\x16D', '\x16F', 
		'\x5', '\x46', '$', '\x2', '\x16E', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x171', '\a', '\x34', '\x2', '\x2', '\x171', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\a', '\x38', '\x2', 
		'\x2', '\x173', '\x174', '\x5', 'z', '>', '\x2', '\x174', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x175', '\x178', '\x5', 'L', '\'', '\x2', '\x176', 
		'\x178', '\x5', 'V', ',', '\x2', '\x177', '\x175', '\x3', '\x2', '\x2', 
		'\x2', '\x177', '\x176', '\x3', '\x2', '\x2', '\x2', '\x178', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\x17A', '\x5', 'L', '\'', '\x2', '\x17A', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17E', '\x5', 'Z', '.', '\x2', 
		'\x17C', '\x17E', '\x5', 'N', '(', '\x2', '\x17D', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', '\x17D', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x184', '\x5', 'T', '+', '\x2', 
		'\x180', '\x184', '\x5', 'R', '*', '\x2', '\x181', '\x184', '\x5', 'X', 
		'-', '\x2', '\x182', '\x184', '\x5', 'P', ')', '\x2', '\x183', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x181', '\x3', '\x2', '\x2', '\x2', '\x183', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x184', 'O', '\x3', '\x2', '\x2', '\x2', '\x185', 
		'\x186', '\x5', '\b', '\x5', '\x2', '\x186', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x187', '\x188', '\t', '\x3', '\x2', '\x2', '\x188', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x18A', '\t', '\x4', '\x2', '\x2', '\x18A', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\a', '\x13', '\x2', 
		'\x2', '\x18C', 'W', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x5', 
		'T', '+', '\x2', '\x18E', '\x18F', '\a', '\x41', '\x2', '\x2', '\x18F', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x5', '\\', '/', '\x2', 
		'\x191', '\x192', '\a', '?', '\x2', '\x2', '\x192', '\x193', '\x5', 'N', 
		'(', '\x2', '\x193', '\x194', '\a', '@', '\x2', '\x2', '\x194', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x196', '\t', '\x5', '\x2', '\x2', '\x196', 
		']', '\x3', '\x2', '\x2', '\x2', '\x197', '\x199', '\x5', '\n', '\x6', 
		'\x2', '\x198', '\x197', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19C', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x198', '\x3', '\x2', '\x2', '\x2', 
		'\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x1A0', '\x3', 
		'\x2', '\x2', '\x2', '\x19C', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\x19F', '\x5', '`', '\x31', '\x2', '\x19E', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\x1A1', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A0', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', 'H', '%', '\x2', '\x1A4', 
		'\x1A5', '\x5', '\x4', '\x3', '\x2', '\x1A5', '\x1A7', '\a', '\x39', '\x2', 
		'\x2', '\x1A6', '\x1A8', '\x5', '\x66', '\x34', '\x2', '\x1A7', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\a', 
		':', '\x2', '\x2', '\x1AA', '\x1AB', '\a', '\x34', '\x2', '\x2', '\x1AB', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AF', '\x5', '\x62', '\x32', 
		'\x2', '\x1AD', '\x1AF', '\x5', '\x64', '\x33', '\x2', '\x1AE', '\x1AC', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x61', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\a', '\x32', 
		'\x2', '\x2', '\x1B1', '\x63', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', 
		'\a', ',', '\x2', '\x2', '\x1B3', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\x1B9', '\x5', 'h', '\x35', '\x2', '\x1B5', '\x1B6', '\a', '\x37', 
		'\x2', '\x2', '\x1B6', '\x1B8', '\x5', 'h', '\x35', '\x2', '\x1B7', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA', 'g', '\x3', '\x2', '\x2', '\x2', '\x1BB', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BE', '\x5', '\n', '\x6', 
		'\x2', '\x1BD', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\x1BF', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C2', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1C3', '\x5', 'L', '\'', '\x2', '\x1C3', '\x1C4', '\x5', '\x4', '\x3', 
		'\x2', '\x1C4', 'i', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C7', '\x5', 
		'\n', '\x6', '\x2', '\x1C6', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C7', 
		'\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C6', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CB', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB', '\x1CC', '\a', '\f', '\x2', '\x2', '\x1CC', '\x1CD', '\x5', '\b', 
		'\x5', '\x2', '\x1CD', '\x1CE', '\a', '\xE', '\x2', '\x2', '\x1CE', '\x1CF', 
		'\x5', '\b', '\x5', '\x2', '\x1CF', '\x1D0', '\a', '\x34', '\x2', '\x2', 
		'\x1D0', 'k', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\t', '\x6', 
		'\x2', '\x2', '\x1D2', 'm', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1DA', 
		'\x5', 'p', '\x39', '\x2', '\x1D4', '\x1DA', '\x5', 'r', ':', '\x2', '\x1D5', 
		'\x1DA', '\x5', 't', ';', '\x2', '\x1D6', '\x1DA', '\x5', 'v', '<', '\x2', 
		'\x1D7', '\x1DA', '\x5', 'x', '=', '\x2', '\x1D8', '\x1DA', '\x5', 'z', 
		'>', '\x2', '\x1D9', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D5', '\x3', '\x2', '\x2', '\x2', 
		'\x1D9', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D7', '\x3', 
		'\x2', '\x2', '\x2', '\x1D9', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\a', '\x10', '\x2', 
		'\x2', '\x1DC', 'q', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\t', 
		'\a', '\x2', '\x2', '\x1DE', 's', '\x3', '\x2', '\x2', '\x2', '\x1DF', 
		'\x1E0', '\a', '\x63', '\x2', '\x2', '\x1E0', 'u', '\x3', '\x2', '\x2', 
		'\x2', '\x1E1', '\x1E2', '\a', '\x64', '\x2', '\x2', '\x1E2', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\a', '\x65', '\x2', '\x2', '\x1E4', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E6', '\a', 'j', '\x2', '\x2', 
		'\x1E6', '{', '\x3', '\x2', '\x2', '\x2', '.', '\x7F', '\x8E', '\x9C', 
		'\xA7', '\xAE', '\xB6', '\xBD', '\xC0', '\xC9', '\xCE', '\xDC', '\xE1', 
		'\xEE', '\xF1', '\xFA', '\x100', '\x10A', '\x10E', '\x113', '\x117', '\x123', 
		'\x12D', '\x134', '\x139', '\x13D', '\x140', '\x145', '\x14A', '\x158', 
		'\x15C', '\x160', '\x167', '\x16E', '\x177', '\x17D', '\x183', '\x19A', 
		'\x1A0', '\x1A7', '\x1AE', '\x1B9', '\x1BF', '\x1C8', '\x1D9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.Meta.Syntax.InternalSyntax
