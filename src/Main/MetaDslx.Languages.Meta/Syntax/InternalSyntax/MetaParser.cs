//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Syntax\InternalSyntax\MetaParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Meta.Syntax.InternalSyntax {

using MetaDslx.CodeAnalysis.Symbols;
using MetaDslx.Languages.Meta.Model;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class MetaParser : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.Antlr4Parser {
    private MetaSyntaxParser SyntaxParser => (MetaSyntaxParser)this.IncrementalAntlr4Parser;
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KNamespace=1, KUsing=2, KMetamodel=3, KExtern=4, KTypeDef=5, KAbstract=6, 
		KClass=7, KStruct=8, KEnum=9, KAssociation=10, KContainment=11, KWith=12, 
		KNew=13, KNull=14, KTrue=15, KFalse=16, KVoid=17, KObject=18, KString=19, 
		KInt=20, KLong=21, KFloat=22, KDouble=23, KByte=24, KBool=25, KList=26, 
		KAny=27, KNone=28, KError=29, KSet=30, KMultiList=31, KMultiSet=32, KThis=33, 
		KTypeof=34, KAs=35, KIs=36, KBase=37, KConst=38, KRedefines=39, KSubsets=40, 
		KReadonly=41, KLazy=42, KDerived=43, KUnion=44, KBuilder=45, KSymbol=46, 
		KExpression=47, KStatement=48, KType=49, KProperty=50, KStatic=51, TSemicolon=52, 
		TColon=53, TDot=54, TComma=55, TAssign=56, TOpenParen=57, TCloseParen=58, 
		TOpenBracket=59, TCloseBracket=60, TOpenBrace=61, TCloseBrace=62, TLessThan=63, 
		TGreaterThan=64, TQuestion=65, TQuestionQuestion=66, TAmpersand=67, THat=68, 
		TBar=69, TAndAlso=70, TOrElse=71, TPlusPlus=72, TMinusMinus=73, TPlus=74, 
		TMinus=75, TTilde=76, TExclamation=77, TSlash=78, TAsterisk=79, TPercent=80, 
		TLessThanOrEqual=81, TGreaterThanOrEqual=82, TEqual=83, TNotEqual=84, 
		TAsteriskAssign=85, TSlashAssign=86, TPercentAssign=87, TPlusAssign=88, 
		TMinusAssign=89, TLeftShiftAssign=90, TRightShiftAssign=91, TAmpersandAssign=92, 
		THatAssign=93, TBarAssign=94, IUri=95, IPrefix=96, IVersion=97, IdentifierNormal=98, 
		IdentifierVerbatim=99, LInteger=100, LDecimal=101, LScientific=102, LDateTimeOffset=103, 
		LDateTime=104, LDate=105, LTime=106, LRegularString=107, LGuid=108, LUtf8Bom=109, 
		LWhiteSpace=110, LCrLf=111, LLineEnd=112, LSingleLineComment=113, LComment=114, 
		LDoubleQuoteVerbatimString=115, LSingleQuoteVerbatimString=116, DoubleQuoteVerbatimStringLiteralStart=117, 
		SingleQuoteVerbatimStringLiteralStart=118, LCommentStart=119;
	public const int
		RULE_main = 0, RULE_name = 1, RULE_qualifiedName = 2, RULE_qualifier = 3, 
		RULE_attribute = 4, RULE_usingNamespaceOrMetamodel = 5, RULE_usingNamespace = 6, 
		RULE_usingMetamodel = 7, RULE_usingMetamodelReference = 8, RULE_namespaceDeclaration = 9, 
		RULE_namespaceBody = 10, RULE_metamodelDeclaration = 11, RULE_metamodelPropertyList = 12, 
		RULE_metamodelProperty = 13, RULE_metamodelUriProperty = 14, RULE_metamodelPrefixProperty = 15, 
		RULE_metamodelVersionProperty = 16, RULE_declaration = 17, RULE_enumDeclaration = 18, 
		RULE_enumBody = 19, RULE_enumValues = 20, RULE_enumValue = 21, RULE_enumMemberDeclaration = 22, 
		RULE_classDeclaration = 23, RULE_symbolAttribute = 24, RULE_symbolSymbolAttribute = 25, 
		RULE_expressionSymbolAttribute = 26, RULE_statementSymbolTypeAttribute = 27, 
		RULE_typeSymbolTypeAttribute = 28, RULE_classBody = 29, RULE_classAncestors = 30, 
		RULE_classAncestor = 31, RULE_classMemberDeclaration = 32, RULE_fieldDeclaration = 33, 
		RULE_fieldSymbolPropertyAttribute = 34, RULE_fieldContainment = 35, RULE_fieldModifier = 36, 
		RULE_defaultValue = 37, RULE_redefinitionsOrSubsettings = 38, RULE_redefinitions = 39, 
		RULE_subsettings = 40, RULE_nameUseList = 41, RULE_constDeclaration = 42, 
		RULE_constValue = 43, RULE_returnType = 44, RULE_typeOfReference = 45, 
		RULE_typeReference = 46, RULE_simpleType = 47, RULE_classType = 48, RULE_objectType = 49, 
		RULE_primitiveType = 50, RULE_voidType = 51, RULE_nullableType = 52, RULE_collectionType = 53, 
		RULE_collectionKind = 54, RULE_operationDeclaration = 55, RULE_operationModifier = 56, 
		RULE_operationModifierBuilder = 57, RULE_operationModifierReadonly = 58, 
		RULE_parameterList = 59, RULE_parameter = 60, RULE_associationDeclaration = 61, 
		RULE_identifier = 62, RULE_literal = 63, RULE_nullLiteral = 64, RULE_booleanLiteral = 65, 
		RULE_integerLiteral = 66, RULE_decimalLiteral = 67, RULE_scientificLiteral = 68, 
		RULE_stringLiteral = 69;
	public static readonly string[] ruleNames = {
		"main", "name", "qualifiedName", "qualifier", "attribute", "usingNamespaceOrMetamodel", 
		"usingNamespace", "usingMetamodel", "usingMetamodelReference", "namespaceDeclaration", 
		"namespaceBody", "metamodelDeclaration", "metamodelPropertyList", "metamodelProperty", 
		"metamodelUriProperty", "metamodelPrefixProperty", "metamodelVersionProperty", 
		"declaration", "enumDeclaration", "enumBody", "enumValues", "enumValue", 
		"enumMemberDeclaration", "classDeclaration", "symbolAttribute", "symbolSymbolAttribute", 
		"expressionSymbolAttribute", "statementSymbolTypeAttribute", "typeSymbolTypeAttribute", 
		"classBody", "classAncestors", "classAncestor", "classMemberDeclaration", 
		"fieldDeclaration", "fieldSymbolPropertyAttribute", "fieldContainment", 
		"fieldModifier", "defaultValue", "redefinitionsOrSubsettings", "redefinitions", 
		"subsettings", "nameUseList", "constDeclaration", "constValue", "returnType", 
		"typeOfReference", "typeReference", "simpleType", "classType", "objectType", 
		"primitiveType", "voidType", "nullableType", "collectionType", "collectionKind", 
		"operationDeclaration", "operationModifier", "operationModifierBuilder", 
		"operationModifierReadonly", "parameterList", "parameter", "associationDeclaration", 
		"identifier", "literal", "nullLiteral", "booleanLiteral", "integerLiteral", 
		"decimalLiteral", "scientificLiteral", "stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'using'", "'metamodel'", "'extern'", "'typedef'", 
		"'abstract'", "'class'", "'struct'", "'enum'", "'association'", "'containment'", 
		"'with'", "'new'", "'null'", "'true'", "'false'", "'void'", "'object'", 
		"'string'", "'int'", "'long'", "'float'", "'double'", "'byte'", "'bool'", 
		"'list'", "'any'", "'none'", "'error'", "'set'", "'multi_list'", "'multi_set'", 
		"'this'", "'typeof'", "'as'", "'is'", "'base'", "'const'", "'redefines'", 
		"'subsets'", "'readonly'", "'lazy'", "'derived'", "'union'", "'builder'", 
		"'symbol'", "'expression'", "'statement'", "'type'", "'property'", "'static'", 
		"';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'<'", "'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", "'||'", 
		"'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", "'<='", 
		"'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'&='", "'^='", "'|='", "'Uri'", "'Prefix'", "'Version'", null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'\"'", "'''", "'@\"'", "'@''", "'/*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KUsing", "KMetamodel", "KExtern", "KTypeDef", "KAbstract", 
		"KClass", "KStruct", "KEnum", "KAssociation", "KContainment", "KWith", 
		"KNew", "KNull", "KTrue", "KFalse", "KVoid", "KObject", "KString", "KInt", 
		"KLong", "KFloat", "KDouble", "KByte", "KBool", "KList", "KAny", "KNone", 
		"KError", "KSet", "KMultiList", "KMultiSet", "KThis", "KTypeof", "KAs", 
		"KIs", "KBase", "KConst", "KRedefines", "KSubsets", "KReadonly", "KLazy", 
		"KDerived", "KUnion", "KBuilder", "KSymbol", "KExpression", "KStatement", 
		"KType", "KProperty", "KStatic", "TSemicolon", "TColon", "TDot", "TComma", 
		"TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", "TCloseBracket", 
		"TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", "TQuestion", 
		"TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", "TOrElse", 
		"TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IUri", "IPrefix", "IVersion", 
		"IdentifierNormal", "IdentifierVerbatim", "LInteger", "LDecimal", "LScientific", 
		"LDateTimeOffset", "LDateTime", "LDate", "LTime", "LRegularString", "LGuid", 
		"LUtf8Bom", "LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", 
		"LComment", "LDoubleQuoteVerbatimString", "LSingleQuoteVerbatimString", 
		"DoubleQuoteVerbatimStringLiteralStart", "SingleQuoteVerbatimStringLiteralStart", 
		"LCommentStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MetaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MetaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MetaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MetaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingNamespaceOrMetamodelContext[] usingNamespaceOrMetamodel() {
			return GetRuleContexts<UsingNamespaceOrMetamodelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingNamespaceOrMetamodelContext usingNamespaceOrMetamodel(int i) {
			return GetRuleContext<UsingNamespaceOrMetamodelContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMain() : _DoParseMain();
	}

	internal MainContext _DoParseMain() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KUsing) {
				{
				{
				State = 140;
				usingNamespaceOrMetamodel();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 146;
			namespaceDeclaration();
			State = 147;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseName() : _DoParseName();
	}

	internal NameContext _DoParseName() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifiedName() : _DoParseQualifiedName();
	}

	internal QualifiedNameContext _DoParseQualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TDot() { return GetTokens(MetaParser.TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot(int i) {
			return GetToken(MetaParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifier() : _DoParseQualifier();
	}

	internal QualifierContext _DoParseQualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			identifier();
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TDot) {
				{
				{
				State = 154;
				Match(TDot);
				State = 155;
				identifier();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(MetaParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(MetaParser.TCloseBracket, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAttribute() : _DoParseAttribute();
	}

	internal AttributeContext _DoParseAttribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(TOpenBracket);
			State = 162;
			qualifier();
			State = 163;
			Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingNamespaceOrMetamodelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsingNamespaceContext usingNamespace() {
			return GetRuleContext<UsingNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingMetamodelContext usingMetamodel() {
			return GetRuleContext<UsingMetamodelContext>(0);
		}
		public UsingNamespaceOrMetamodelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingNamespaceOrMetamodel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceOrMetamodel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingNamespaceOrMetamodelContext usingNamespaceOrMetamodel() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseUsingNamespaceOrMetamodel() : _DoParseUsingNamespaceOrMetamodel();
	}

	internal UsingNamespaceOrMetamodelContext _DoParseUsingNamespaceOrMetamodel() {
		UsingNamespaceOrMetamodelContext _localctx = new UsingNamespaceOrMetamodelContext(Context, State);
		EnterRule(_localctx, 10, RULE_usingNamespaceOrMetamodel);
		try {
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				usingNamespace();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				usingMetamodel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUsing() { return GetToken(MetaParser.KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		public UsingNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingNamespaceContext usingNamespace() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseUsingNamespace() : _DoParseUsingNamespace();
	}

	internal UsingNamespaceContext _DoParseUsingNamespace() {
		UsingNamespaceContext _localctx = new UsingNamespaceContext(Context, State);
		EnterRule(_localctx, 12, RULE_usingNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(KUsing);
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 170;
				name();
				State = 171;
				Match(TAssign);
				}
				break;
			}
			State = 175;
			qualifier();
			State = 176;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingMetamodelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUsing() { return GetToken(MetaParser.KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KMetamodel() { return GetToken(MetaParser.KMetamodel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingMetamodelReferenceContext usingMetamodelReference() {
			return GetRuleContext<UsingMetamodelReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		public UsingMetamodelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingMetamodel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingMetamodel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingMetamodelContext usingMetamodel() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseUsingMetamodel() : _DoParseUsingMetamodel();
	}

	internal UsingMetamodelContext _DoParseUsingMetamodel() {
		UsingMetamodelContext _localctx = new UsingMetamodelContext(Context, State);
		EnterRule(_localctx, 14, RULE_usingMetamodel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(KUsing);
			State = 179;
			Match(KMetamodel);
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 180;
				name();
				State = 181;
				Match(TAssign);
				}
				break;
			}
			State = 185;
			usingMetamodelReference();
			State = 186;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingMetamodelReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public UsingMetamodelReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingMetamodelReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingMetamodelReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingMetamodelReferenceContext usingMetamodelReference() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseUsingMetamodelReference() : _DoParseUsingMetamodelReference();
	}

	internal UsingMetamodelReferenceContext _DoParseUsingMetamodelReference() {
		UsingMetamodelReferenceContext _localctx = new UsingMetamodelReferenceContext(Context, State);
		EnterRule(_localctx, 16, RULE_usingMetamodelReference);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IUri:
			case IPrefix:
			case IVersion:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				qualifier();
				}
				break;
			case LRegularString:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189;
				stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNamespace() { return GetToken(MetaParser.KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNamespaceDeclaration() : _DoParseNamespaceDeclaration();
	}

	internal NamespaceDeclarationContext _DoParseNamespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 192;
				attribute();
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 198;
			Match(KNamespace);
			State = 199;
			qualifiedName();
			State = 200;
			namespaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MetamodelDeclarationContext metamodelDeclaration() {
			return GetRuleContext<MetamodelDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingNamespaceOrMetamodelContext[] usingNamespaceOrMetamodel() {
			return GetRuleContexts<UsingNamespaceOrMetamodelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingNamespaceOrMetamodelContext usingNamespaceOrMetamodel(int i) {
			return GetRuleContext<UsingNamespaceOrMetamodelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNamespaceBody() : _DoParseNamespaceBody();
	}

	internal NamespaceBodyContext _DoParseNamespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(TOpenBrace);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KUsing) {
				{
				{
				State = 203;
				usingNamespaceOrMetamodel();
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 209;
			metamodelDeclaration();
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KAbstract) | (1L << KClass) | (1L << KEnum) | (1L << KAssociation) | (1L << KConst) | (1L << TOpenBracket))) != 0)) {
				{
				{
				State = 210;
				declaration();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216;
			Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KMetamodel() { return GetToken(MetaParser.KMetamodel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(MetaParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(MetaParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MetamodelPropertyListContext metamodelPropertyList() {
			return GetRuleContext<MetamodelPropertyListContext>(0);
		}
		public MetamodelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelDeclarationContext metamodelDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMetamodelDeclaration() : _DoParseMetamodelDeclaration();
	}

	internal MetamodelDeclarationContext _DoParseMetamodelDeclaration() {
		MetamodelDeclarationContext _localctx = new MetamodelDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_metamodelDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 218;
				attribute();
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 224;
			Match(KMetamodel);
			State = 225;
			name();
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOpenParen) {
				{
				State = 226;
				Match(TOpenParen);
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (IUri - 95)) | (1L << (IPrefix - 95)) | (1L << (IVersion - 95)))) != 0)) {
					{
					State = 227;
					metamodelPropertyList();
					}
				}

				State = 230;
				Match(TCloseParen);
				}
			}

			State = 233;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetamodelPropertyContext[] metamodelProperty() {
			return GetRuleContexts<MetamodelPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetamodelPropertyContext metamodelProperty(int i) {
			return GetRuleContext<MetamodelPropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public MetamodelPropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelPropertyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyListContext metamodelPropertyList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMetamodelPropertyList() : _DoParseMetamodelPropertyList();
	}

	internal MetamodelPropertyListContext _DoParseMetamodelPropertyList() {
		MetamodelPropertyListContext _localctx = new MetamodelPropertyListContext(Context, State);
		EnterRule(_localctx, 24, RULE_metamodelPropertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			metamodelProperty();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 236;
				Match(TComma);
				State = 237;
				metamodelProperty();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetamodelUriPropertyContext metamodelUriProperty() {
			return GetRuleContext<MetamodelUriPropertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetamodelPrefixPropertyContext metamodelPrefixProperty() {
			return GetRuleContext<MetamodelPrefixPropertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetamodelVersionPropertyContext metamodelVersionProperty() {
			return GetRuleContext<MetamodelVersionPropertyContext>(0);
		}
		public MetamodelPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyContext metamodelProperty() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMetamodelProperty() : _DoParseMetamodelProperty();
	}

	internal MetamodelPropertyContext _DoParseMetamodelProperty() {
		MetamodelPropertyContext _localctx = new MetamodelPropertyContext(Context, State);
		EnterRule(_localctx, 26, RULE_metamodelProperty);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IUri:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				metamodelUriProperty();
				}
				break;
			case IPrefix:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				metamodelPrefixProperty();
				}
				break;
			case IVersion:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245;
				metamodelVersionProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelUriPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IUri() { return GetToken(MetaParser.IUri, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public MetamodelUriPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelUriProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelUriProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelUriPropertyContext metamodelUriProperty() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMetamodelUriProperty() : _DoParseMetamodelUriProperty();
	}

	internal MetamodelUriPropertyContext _DoParseMetamodelUriProperty() {
		MetamodelUriPropertyContext _localctx = new MetamodelUriPropertyContext(Context, State);
		EnterRule(_localctx, 28, RULE_metamodelUriProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(IUri);
			State = 249;
			Match(TAssign);
			State = 250;
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPrefixPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPrefix() { return GetToken(MetaParser.IPrefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public MetamodelPrefixPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelPrefixProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelPrefixProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPrefixPropertyContext metamodelPrefixProperty() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMetamodelPrefixProperty() : _DoParseMetamodelPrefixProperty();
	}

	internal MetamodelPrefixPropertyContext _DoParseMetamodelPrefixProperty() {
		MetamodelPrefixPropertyContext _localctx = new MetamodelPrefixPropertyContext(Context, State);
		EnterRule(_localctx, 30, RULE_metamodelPrefixProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(IPrefix);
			State = 253;
			Match(TAssign);
			State = 254;
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelVersionPropertyContext : ParserRuleContext {
		public IntegerLiteralContext major;
		public IntegerLiteralContext minor;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IVersion() { return GetToken(MetaParser.IVersion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot() { return GetToken(MetaParser.TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext[] integerLiteral() {
			return GetRuleContexts<IntegerLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral(int i) {
			return GetRuleContext<IntegerLiteralContext>(i);
		}
		public MetamodelVersionPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelVersionProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelVersionProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelVersionPropertyContext metamodelVersionProperty() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMetamodelVersionProperty() : _DoParseMetamodelVersionProperty();
	}

	internal MetamodelVersionPropertyContext _DoParseMetamodelVersionProperty() {
		MetamodelVersionPropertyContext _localctx = new MetamodelVersionPropertyContext(Context, State);
		EnterRule(_localctx, 32, RULE_metamodelVersionProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(IVersion);
			State = 257;
			Match(TAssign);
			State = 258;
			_localctx.major = integerLiteral();
			State = 259;
			Match(TDot);
			State = 260;
			_localctx.minor = integerLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociationDeclarationContext associationDeclaration() {
			return GetRuleContext<AssociationDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDeclaration() : _DoParseDeclaration();
	}

	internal DeclarationContext _DoParseDeclaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_declaration);
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262;
				enumDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263;
				classDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 264;
				associationDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 265;
				constDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEnum() { return GetToken(MetaParser.KEnum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumDeclaration() : _DoParseEnumDeclaration();
	}

	internal EnumDeclarationContext _DoParseEnumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 268;
				attribute();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274;
			Match(KEnum);
			State = 275;
			name();
			State = 276;
			enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumBody() : _DoParseEnumBody();
	}

	internal EnumBodyContext _DoParseEnumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(TOpenBrace);
			State = 279;
			enumValues();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TSemicolon) {
				{
				State = 280;
				Match(TSemicolon);
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KVoid) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KReadonly) | (1L << KBuilder) | (1L << KSymbol) | (1L << TOpenBracket))) != 0) || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (IUri - 95)) | (1L << (IPrefix - 95)) | (1L << (IVersion - 95)) | (1L << (IdentifierNormal - 95)) | (1L << (IdentifierVerbatim - 95)))) != 0)) {
					{
					{
					State = 281;
					enumMemberDeclaration();
					}
					}
					State = 286;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 289;
			Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumValues() : _DoParseEnumValues();
	}

	internal EnumValuesContext _DoParseEnumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(Context, State);
		EnterRule(_localctx, 40, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			enumValue();
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 292;
				Match(TComma);
				State = 293;
				enumValue();
				}
				}
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumValue() : _DoParseEnumValue();
	}

	internal EnumValueContext _DoParseEnumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 299;
				attribute();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 305;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext enumMemberDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumMemberDeclaration() : _DoParseEnumMemberDeclaration();
	}

	internal EnumMemberDeclarationContext _DoParseEnumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_enumMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			operationDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KClass() { return GetToken(MetaParser.KClass, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolAttributeContext symbolAttribute() {
			return GetRuleContext<SymbolAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KAbstract() { return GetToken(MetaParser.KAbstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassAncestorsContext classAncestors() {
			return GetRuleContext<ClassAncestorsContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassDeclaration() : _DoParseClassDeclaration();
	}

	internal ClassDeclarationContext _DoParseClassDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_classDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 309;
					attribute();
					}
					} 
				}
				State = 314;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOpenBracket) {
				{
				State = 315;
				symbolAttribute();
				}
			}

			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KAbstract) {
				{
				State = 318;
				Match(KAbstract);
				}
			}

			State = 321;
			Match(KClass);
			State = 322;
			name();
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TColon) {
				{
				State = 323;
				Match(TColon);
				State = 324;
				classAncestors();
				}
			}

			State = 327;
			classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolSymbolAttributeContext symbolSymbolAttribute() {
			return GetRuleContext<SymbolSymbolAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSymbolAttributeContext expressionSymbolAttribute() {
			return GetRuleContext<ExpressionSymbolAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSymbolTypeAttributeContext statementSymbolTypeAttribute() {
			return GetRuleContext<StatementSymbolTypeAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSymbolTypeAttributeContext typeSymbolTypeAttribute() {
			return GetRuleContext<TypeSymbolTypeAttributeContext>(0);
		}
		public SymbolAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolAttributeContext symbolAttribute() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseSymbolAttribute() : _DoParseSymbolAttribute();
	}

	internal SymbolAttributeContext _DoParseSymbolAttribute() {
		SymbolAttributeContext _localctx = new SymbolAttributeContext(Context, State);
		EnterRule(_localctx, 48, RULE_symbolAttribute);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329;
				symbolSymbolAttribute();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				expressionSymbolAttribute();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 331;
				statementSymbolTypeAttribute();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 332;
				typeSymbolTypeAttribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolSymbolAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(MetaParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSymbol() { return GetToken(MetaParser.KSymbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(MetaParser.TCloseBracket, 0); }
		public SymbolSymbolAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolSymbolAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolSymbolAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolSymbolAttributeContext symbolSymbolAttribute() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseSymbolSymbolAttribute() : _DoParseSymbolSymbolAttribute();
	}

	internal SymbolSymbolAttributeContext _DoParseSymbolSymbolAttribute() {
		SymbolSymbolAttributeContext _localctx = new SymbolSymbolAttributeContext(Context, State);
		EnterRule(_localctx, 50, RULE_symbolSymbolAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(TOpenBracket);
			State = 336;
			Match(KSymbol);
			State = 337;
			Match(TColon);
			State = 338;
			qualifier();
			State = 339;
			Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSymbolAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(MetaParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KExpression() { return GetToken(MetaParser.KExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(MetaParser.TCloseBracket, 0); }
		public ExpressionSymbolAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSymbolAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSymbolAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSymbolAttributeContext expressionSymbolAttribute() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseExpressionSymbolAttribute() : _DoParseExpressionSymbolAttribute();
	}

	internal ExpressionSymbolAttributeContext _DoParseExpressionSymbolAttribute() {
		ExpressionSymbolAttributeContext _localctx = new ExpressionSymbolAttributeContext(Context, State);
		EnterRule(_localctx, 52, RULE_expressionSymbolAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(TOpenBracket);
			State = 342;
			Match(KExpression);
			State = 343;
			Match(TColon);
			State = 344;
			qualifier();
			State = 345;
			Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSymbolTypeAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(MetaParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KStatement() { return GetToken(MetaParser.KStatement, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(MetaParser.TCloseBracket, 0); }
		public StatementSymbolTypeAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSymbolTypeAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSymbolTypeAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementSymbolTypeAttributeContext statementSymbolTypeAttribute() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseStatementSymbolTypeAttribute() : _DoParseStatementSymbolTypeAttribute();
	}

	internal StatementSymbolTypeAttributeContext _DoParseStatementSymbolTypeAttribute() {
		StatementSymbolTypeAttributeContext _localctx = new StatementSymbolTypeAttributeContext(Context, State);
		EnterRule(_localctx, 54, RULE_statementSymbolTypeAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(TOpenBracket);
			State = 348;
			Match(KStatement);
			State = 349;
			Match(TColon);
			State = 350;
			qualifier();
			State = 351;
			Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSymbolTypeAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(MetaParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KType() { return GetToken(MetaParser.KType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(MetaParser.TCloseBracket, 0); }
		public TypeSymbolTypeAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSymbolTypeAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSymbolTypeAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSymbolTypeAttributeContext typeSymbolTypeAttribute() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypeSymbolTypeAttribute() : _DoParseTypeSymbolTypeAttribute();
	}

	internal TypeSymbolTypeAttributeContext _DoParseTypeSymbolTypeAttribute() {
		TypeSymbolTypeAttributeContext _localctx = new TypeSymbolTypeAttributeContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeSymbolTypeAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(TOpenBracket);
			State = 354;
			Match(KType);
			State = 355;
			Match(TColon);
			State = 356;
			qualifier();
			State = 357;
			Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassBody() : _DoParseClassBody();
	}

	internal ClassBodyContext _DoParseClassBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(TOpenBrace);
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KVoid) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << KUnion) | (1L << KBuilder) | (1L << KSymbol) | (1L << TOpenBracket))) != 0) || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (IUri - 95)) | (1L << (IPrefix - 95)) | (1L << (IVersion - 95)) | (1L << (IdentifierNormal - 95)) | (1L << (IdentifierVerbatim - 95)))) != 0)) {
				{
				{
				State = 360;
				classMemberDeclaration();
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 366;
			Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassAncestorContext[] classAncestor() {
			return GetRuleContexts<ClassAncestorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassAncestorContext classAncestor(int i) {
			return GetRuleContext<ClassAncestorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public ClassAncestorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorsContext classAncestors() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassAncestors() : _DoParseClassAncestors();
	}

	internal ClassAncestorsContext _DoParseClassAncestors() {
		ClassAncestorsContext _localctx = new ClassAncestorsContext(Context, State);
		EnterRule(_localctx, 60, RULE_classAncestors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			classAncestor();
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 369;
				Match(TComma);
				State = 370;
				classAncestor();
				}
				}
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ClassAncestorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorContext classAncestor() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassAncestor() : _DoParseClassAncestor();
	}

	internal ClassAncestorContext _DoParseClassAncestor() {
		ClassAncestorContext _localctx = new ClassAncestorContext(Context, State);
		EnterRule(_localctx, 62, RULE_classAncestor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassMemberDeclaration() : _DoParseClassMemberDeclaration();
	}

	internal ClassMemberDeclarationContext _DoParseClassMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_classMemberDeclaration);
		try {
			State = 380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 378;
				fieldDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 379;
				operationDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldSymbolPropertyAttributeContext fieldSymbolPropertyAttribute() {
			return GetRuleContext<FieldSymbolPropertyAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContainmentContext fieldContainment() {
			return GetRuleContext<FieldContainmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldModifierContext fieldModifier() {
			return GetRuleContext<FieldModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RedefinitionsOrSubsettingsContext[] redefinitionsOrSubsettings() {
			return GetRuleContexts<RedefinitionsOrSubsettingsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RedefinitionsOrSubsettingsContext redefinitionsOrSubsettings(int i) {
			return GetRuleContext<RedefinitionsOrSubsettingsContext>(i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldDeclaration() : _DoParseFieldDeclaration();
	}

	internal FieldDeclarationContext _DoParseFieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_fieldDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 382;
					attribute();
					}
					} 
				}
				State = 387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOpenBracket) {
				{
				State = 388;
				fieldSymbolPropertyAttribute();
				}
			}

			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KContainment) {
				{
				State = 391;
				fieldContainment();
				}
			}

			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << KUnion))) != 0)) {
				{
				State = 394;
				fieldModifier();
				}
			}

			State = 397;
			typeReference();
			State = 398;
			name();
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 399;
				defaultValue();
				}
			}

			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KRedefines || _la==KSubsets) {
				{
				{
				State = 402;
				redefinitionsOrSubsettings();
				}
				}
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 408;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldSymbolPropertyAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(MetaParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KProperty() { return GetToken(MetaParser.KProperty, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(MetaParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(MetaParser.TCloseBracket, 0); }
		public FieldSymbolPropertyAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldSymbolPropertyAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldSymbolPropertyAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldSymbolPropertyAttributeContext fieldSymbolPropertyAttribute() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldSymbolPropertyAttribute() : _DoParseFieldSymbolPropertyAttribute();
	}

	internal FieldSymbolPropertyAttributeContext _DoParseFieldSymbolPropertyAttribute() {
		FieldSymbolPropertyAttributeContext _localctx = new FieldSymbolPropertyAttributeContext(Context, State);
		EnterRule(_localctx, 68, RULE_fieldSymbolPropertyAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(TOpenBracket);
			State = 411;
			Match(KProperty);
			State = 412;
			Match(TColon);
			State = 413;
			identifier();
			State = 414;
			Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContainmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KContainment() { return GetToken(MetaParser.KContainment, 0); }
		public FieldContainmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldContainment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldContainment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContainmentContext fieldContainment() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldContainment() : _DoParseFieldContainment();
	}

	internal FieldContainmentContext _DoParseFieldContainment() {
		FieldContainmentContext _localctx = new FieldContainmentContext(Context, State);
		EnterRule(_localctx, 70, RULE_fieldContainment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(KContainment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KReadonly() { return GetToken(MetaParser.KReadonly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KLazy() { return GetToken(MetaParser.KLazy, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDerived() { return GetToken(MetaParser.KDerived, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUnion() { return GetToken(MetaParser.KUnion, 0); }
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldModifier() : _DoParseFieldModifier();
	}

	internal FieldModifierContext _DoParseFieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_fieldModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << KUnion))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDefaultValue() : _DoParseDefaultValue();
	}

	internal DefaultValueContext _DoParseDefaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 74, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			Match(TAssign);
			State = 421;
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedefinitionsOrSubsettingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RedefinitionsContext redefinitions() {
			return GetRuleContext<RedefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubsettingsContext subsettings() {
			return GetRuleContext<SubsettingsContext>(0);
		}
		public RedefinitionsOrSubsettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redefinitionsOrSubsettings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitionsOrSubsettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedefinitionsOrSubsettingsContext redefinitionsOrSubsettings() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRedefinitionsOrSubsettings() : _DoParseRedefinitionsOrSubsettings();
	}

	internal RedefinitionsOrSubsettingsContext _DoParseRedefinitionsOrSubsettings() {
		RedefinitionsOrSubsettingsContext _localctx = new RedefinitionsOrSubsettingsContext(Context, State);
		EnterRule(_localctx, 76, RULE_redefinitionsOrSubsettings);
		try {
			State = 425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KRedefines:
				EnterOuterAlt(_localctx, 1);
				{
				State = 423;
				redefinitions();
				}
				break;
			case KSubsets:
				EnterOuterAlt(_localctx, 2);
				{
				State = 424;
				subsettings();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KRedefines() { return GetToken(MetaParser.KRedefines, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public RedefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedefinitionsContext redefinitions() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRedefinitions() : _DoParseRedefinitions();
	}

	internal RedefinitionsContext _DoParseRedefinitions() {
		RedefinitionsContext _localctx = new RedefinitionsContext(Context, State);
		EnterRule(_localctx, 78, RULE_redefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			Match(KRedefines);
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (IUri - 95)) | (1L << (IPrefix - 95)) | (1L << (IVersion - 95)) | (1L << (IdentifierNormal - 95)) | (1L << (IdentifierVerbatim - 95)))) != 0)) {
				{
				State = 428;
				nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsettingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSubsets() { return GetToken(MetaParser.KSubsets, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public SubsettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsettings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsettingsContext subsettings() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseSubsettings() : _DoParseSubsettings();
	}

	internal SubsettingsContext _DoParseSubsettings() {
		SubsettingsContext _localctx = new SubsettingsContext(Context, State);
		EnterRule(_localctx, 80, RULE_subsettings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(KSubsets);
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (IUri - 95)) | (1L << (IPrefix - 95)) | (1L << (IVersion - 95)) | (1L << (IdentifierNormal - 95)) | (1L << (IdentifierVerbatim - 95)))) != 0)) {
				{
				State = 432;
				nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameUseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public NameUseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameUseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameUseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameUseListContext nameUseList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNameUseList() : _DoParseNameUseList();
	}

	internal NameUseListContext _DoParseNameUseList() {
		NameUseListContext _localctx = new NameUseListContext(Context, State);
		EnterRule(_localctx, 82, RULE_nameUseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			qualifier();
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 436;
				Match(TComma);
				State = 437;
				qualifier();
				}
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KConst() { return GetToken(MetaParser.KConst, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstValueContext constValue() {
			return GetRuleContext<ConstValueContext>(0);
		}
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseConstDeclaration() : _DoParseConstDeclaration();
	}

	internal ConstDeclarationContext _DoParseConstDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 84, RULE_constDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(KConst);
			State = 444;
			typeReference();
			State = 445;
			name();
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 446;
				constValue();
				}
			}

			State = 449;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ConstValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstValueContext constValue() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseConstValue() : _DoParseConstValue();
	}

	internal ConstValueContext _DoParseConstValue() {
		ConstValueContext _localctx = new ConstValueContext(Context, State);
		EnterRule(_localctx, 86, RULE_constValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(TAssign);
			State = 452;
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseReturnType() : _DoParseReturnType();
	}

	internal ReturnTypeContext _DoParseReturnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_returnType);
		try {
			State = 456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
			case KSymbol:
			case IUri:
			case IPrefix:
			case IVersion:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 454;
				typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 455;
				voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeOfReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfReferenceContext typeOfReference() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypeOfReference() : _DoParseTypeOfReference();
	}

	internal TypeOfReferenceContext _DoParseTypeOfReference() {
		TypeOfReferenceContext _localctx = new TypeOfReferenceContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeOfReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypeReference() : _DoParseTypeReference();
	}

	internal TypeReferenceContext _DoParseTypeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 92, RULE_typeReference);
		try {
			State = 462;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460;
				collectionType();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KSymbol:
			case IUri:
			case IPrefix:
			case IVersion:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 461;
				simpleType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseSimpleType() : _DoParseSimpleType();
	}

	internal SimpleTypeContext _DoParseSimpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_simpleType);
		try {
			State = 468;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 464;
				primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 465;
				objectType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 466;
				nullableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 467;
				classType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassType() : _DoParseClassType();
	}

	internal ClassTypeContext _DoParseClassType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_classType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KObject() { return GetToken(MetaParser.KObject, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSymbol() { return GetToken(MetaParser.KSymbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KString() { return GetToken(MetaParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseObjectType() : _DoParseObjectType();
	}

	internal ObjectTypeContext _DoParseObjectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KSymbol))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KInt() { return GetToken(MetaParser.KInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KLong() { return GetToken(MetaParser.KLong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFloat() { return GetToken(MetaParser.KFloat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDouble() { return GetToken(MetaParser.KDouble, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KByte() { return GetToken(MetaParser.KByte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KBool() { return GetToken(MetaParser.KBool, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParsePrimitiveType() : _DoParsePrimitiveType();
	}

	internal PrimitiveTypeContext _DoParsePrimitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 100, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KVoid() { return GetToken(MetaParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseVoidType() : _DoParseVoidType();
	}

	internal VoidTypeContext _DoParseVoidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 102, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestion() { return GetToken(MetaParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNullableType() : _DoParseNullableType();
	}

	internal NullableTypeContext _DoParseNullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 104, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			primitiveType();
			State = 479;
			Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollectionKindContext collectionKind() {
			return GetRuleContext<CollectionKindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan() { return GetToken(MetaParser.TLessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TGreaterThan() { return GetToken(MetaParser.TGreaterThan, 0); }
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCollectionType() : _DoParseCollectionType();
	}

	internal CollectionTypeContext _DoParseCollectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 106, RULE_collectionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			collectionKind();
			State = 482;
			Match(TLessThan);
			State = 483;
			simpleType();
			State = 484;
			Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionKindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSet() { return GetToken(MetaParser.KSet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KList() { return GetToken(MetaParser.KList, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KMultiSet() { return GetToken(MetaParser.KMultiSet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KMultiList() { return GetToken(MetaParser.KMultiList, 0); }
		public CollectionKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionKind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionKindContext collectionKind() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCollectionKind() : _DoParseCollectionKind();
	}

	internal CollectionKindContext _DoParseCollectionKind() {
		CollectionKindContext _localctx = new CollectionKindContext(Context, State);
		EnterRule(_localctx, 108, RULE_collectionKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(MetaParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(MetaParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationModifierContext[] operationModifier() {
			return GetRuleContexts<OperationModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationModifierContext operationModifier(int i) {
			return GetRuleContext<OperationModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseOperationDeclaration() : _DoParseOperationDeclaration();
	}

	internal OperationDeclarationContext _DoParseOperationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 488;
				attribute();
				}
				}
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KReadonly || _la==KBuilder) {
				{
				{
				State = 494;
				operationModifier();
				}
				}
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 500;
			returnType();
			State = 501;
			name();
			State = 502;
			Match(TOpenParen);
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KSymbol) | (1L << TOpenBracket))) != 0) || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (IUri - 95)) | (1L << (IPrefix - 95)) | (1L << (IVersion - 95)) | (1L << (IdentifierNormal - 95)) | (1L << (IdentifierVerbatim - 95)))) != 0)) {
				{
				State = 503;
				parameterList();
				}
			}

			State = 506;
			Match(TCloseParen);
			State = 507;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationModifierBuilderContext operationModifierBuilder() {
			return GetRuleContext<OperationModifierBuilderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationModifierReadonlyContext operationModifierReadonly() {
			return GetRuleContext<OperationModifierReadonlyContext>(0);
		}
		public OperationModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationModifierContext operationModifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseOperationModifier() : _DoParseOperationModifier();
	}

	internal OperationModifierContext _DoParseOperationModifier() {
		OperationModifierContext _localctx = new OperationModifierContext(Context, State);
		EnterRule(_localctx, 112, RULE_operationModifier);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KBuilder:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509;
				operationModifierBuilder();
				}
				break;
			case KReadonly:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510;
				operationModifierReadonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationModifierBuilderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KBuilder() { return GetToken(MetaParser.KBuilder, 0); }
		public OperationModifierBuilderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationModifierBuilder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationModifierBuilder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationModifierBuilderContext operationModifierBuilder() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseOperationModifierBuilder() : _DoParseOperationModifierBuilder();
	}

	internal OperationModifierBuilderContext _DoParseOperationModifierBuilder() {
		OperationModifierBuilderContext _localctx = new OperationModifierBuilderContext(Context, State);
		EnterRule(_localctx, 114, RULE_operationModifierBuilder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(KBuilder);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationModifierReadonlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KReadonly() { return GetToken(MetaParser.KReadonly, 0); }
		public OperationModifierReadonlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationModifierReadonly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationModifierReadonly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationModifierReadonlyContext operationModifierReadonly() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseOperationModifierReadonly() : _DoParseOperationModifierReadonly();
	}

	internal OperationModifierReadonlyContext _DoParseOperationModifierReadonly() {
		OperationModifierReadonlyContext _localctx = new OperationModifierReadonlyContext(Context, State);
		EnterRule(_localctx, 116, RULE_operationModifierReadonly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(KReadonly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParameterList() : _DoParseParameterList();
	}

	internal ParameterListContext _DoParseParameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 118, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			parameter();
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 518;
				Match(TComma);
				State = 519;
				parameter();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParameter() : _DoParseParameter();
	}

	internal ParameterContext _DoParseParameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 120, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 525;
				attribute();
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 531;
			typeReference();
			State = 532;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationDeclarationContext : ParserRuleContext {
		public QualifierContext source;
		public QualifierContext target;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KAssociation() { return GetToken(MetaParser.KAssociation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KWith() { return GetToken(MetaParser.KWith, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AssociationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationDeclarationContext associationDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAssociationDeclaration() : _DoParseAssociationDeclaration();
	}

	internal AssociationDeclarationContext _DoParseAssociationDeclaration() {
		AssociationDeclarationContext _localctx = new AssociationDeclarationContext(Context, State);
		EnterRule(_localctx, 122, RULE_associationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 534;
				attribute();
				}
				}
				State = 539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 540;
			Match(KAssociation);
			State = 541;
			_localctx.source = qualifier();
			State = 542;
			Match(KWith);
			State = 543;
			_localctx.target = qualifier();
			State = 544;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentifierNormal() { return GetToken(MetaParser.IdentifierNormal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentifierVerbatim() { return GetToken(MetaParser.IdentifierVerbatim, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IUri() { return GetToken(MetaParser.IUri, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPrefix() { return GetToken(MetaParser.IPrefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IVersion() { return GetToken(MetaParser.IVersion, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIdentifier() : _DoParseIdentifier();
	}

	internal IdentifierContext _DoParseIdentifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 124, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (IUri - 95)) | (1L << (IPrefix - 95)) | (1L << (IVersion - 95)) | (1L << (IdentifierNormal - 95)) | (1L << (IdentifierVerbatim - 95)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLiteral() : _DoParseLiteral();
	}

	internal LiteralContext _DoParseLiteral() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 126, RULE_literal);
		try {
			State = 554;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 548;
				nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 549;
				booleanLiteral();
				}
				break;
			case LInteger:
				EnterOuterAlt(_localctx, 3);
				{
				State = 550;
				integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 551;
				decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 5);
				{
				State = 552;
				scientificLiteral();
				}
				break;
			case LRegularString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 553;
				stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNull() { return GetToken(MetaParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNullLiteral() : _DoParseNullLiteral();
	}

	internal NullLiteralContext _DoParseNullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 128, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTrue() { return GetToken(MetaParser.KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFalse() { return GetToken(MetaParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseBooleanLiteral() : _DoParseBooleanLiteral();
	}

	internal BooleanLiteralContext _DoParseBooleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 130, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			_la = TokenStream.LA(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LInteger() { return GetToken(MetaParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIntegerLiteral() : _DoParseIntegerLiteral();
	}

	internal IntegerLiteralContext _DoParseIntegerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 132, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDecimal() { return GetToken(MetaParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDecimalLiteral() : _DoParseDecimalLiteral();
	}

	internal DecimalLiteralContext _DoParseDecimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 134, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LScientific() { return GetToken(MetaParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseScientificLiteral() : _DoParseScientificLiteral();
	}

	internal ScientificLiteralContext _DoParseScientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRegularString() { return GetToken(MetaParser.LRegularString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseStringLiteral() : _DoParseStringLiteral();
	}

	internal StringLiteralContext _DoParseStringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 138, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			Match(LRegularString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'y', '\x23B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x3', '\x2', 
		'\a', '\x2', '\x90', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x93', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '\x9F', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xA2', 
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xAA', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xB0', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\xBA', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xC1', 
		'\n', '\n', '\x3', '\v', '\a', '\v', '\xC4', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '\xC7', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xCF', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\xD2', '\v', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', '\xD6', '\n', '\f', '\f', '\f', '\xE', '\f', '\xD9', '\v', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\a', '\r', '\xDE', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\xE1', '\v', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xE7', '\n', '\r', '\x3', '\r', 
		'\x5', '\r', '\xEA', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xF1', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\xF4', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\xF9', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x10D', '\n', '\x13', '\x3', '\x14', '\a', 
		'\x14', '\x110', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x113', '\v', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x11D', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x120', '\v', '\x15', '\x5', 
		'\x15', '\x122', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x129', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '\x12C', '\v', '\x16', '\x3', '\x17', '\a', '\x17', 
		'\x12F', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x132', '\v', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\a', '\x19', '\x139', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x13C', 
		'\v', '\x19', '\x3', '\x19', '\x5', '\x19', '\x13F', '\n', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x142', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x148', '\n', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x150', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', 
		'\x16C', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x16F', '\v', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', 
		' ', '\x176', '\n', ' ', '\f', ' ', '\xE', ' ', '\x179', '\v', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x17F', '\n', 
		'\"', '\x3', '#', '\a', '#', '\x182', '\n', '#', '\f', '#', '\xE', '#', 
		'\x185', '\v', '#', '\x3', '#', '\x5', '#', '\x188', '\n', '#', '\x3', 
		'#', '\x5', '#', '\x18B', '\n', '#', '\x3', '#', '\x5', '#', '\x18E', 
		'\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x193', '\n', 
		'#', '\x3', '#', '\a', '#', '\x196', '\n', '#', '\f', '#', '\xE', '#', 
		'\x199', '\v', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', 
		'&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', 
		'(', '\x5', '(', '\x1AC', '\n', '(', '\x3', ')', '\x3', ')', '\x5', ')', 
		'\x1B0', '\n', ')', '\x3', '*', '\x3', '*', '\x5', '*', '\x1B4', '\n', 
		'*', '\x3', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x1B9', '\n', '+', 
		'\f', '+', '\xE', '+', '\x1BC', '\v', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x5', ',', '\x1C2', '\n', ',', '\x3', ',', '\x3', ',', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x5', '.', 
		'\x1CB', '\n', '.', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x1D1', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x5', '\x31', '\x1D7', '\n', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\a', '\x39', '\x1EC', '\n', 
		'\x39', '\f', '\x39', '\xE', '\x39', '\x1EF', '\v', '\x39', '\x3', '\x39', 
		'\a', '\x39', '\x1F2', '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x1F5', 
		'\v', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x5', '\x39', '\x1FB', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', ':', '\x3', ':', '\x5', ':', '\x202', '\n', ':', '\x3', 
		';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\a', '=', '\x20B', '\n', '=', '\f', '=', '\xE', '=', '\x20E', '\v', 
		'=', '\x3', '>', '\a', '>', '\x211', '\n', '>', '\f', '>', '\xE', '>', 
		'\x214', '\v', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\a', 
		'?', '\x21A', '\n', '?', '\f', '?', '\xE', '?', '\x21D', '\v', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x22D', '\n', '\x41', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x2', '\x2', 'H', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x2', '\b', '\x3', '\x2', 
		'+', '.', '\x4', '\x2', '\x14', '\x15', '\x30', '\x30', '\x3', '\x2', 
		'\x16', '\x1B', '\x4', '\x2', '\x1C', '\x1C', ' ', '\"', '\x3', '\x2', 
		'\x61', '\x65', '\x3', '\x2', '\x11', '\x12', '\x2', '\x231', '\x2', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x99', '\x3', '\x2', '\x2', '\x2', '\b', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\xA3', '\x3', '\x2', '\x2', '\x2', '\f', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x12', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x16', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xED', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xFA', '\x3', '\x2', '\x2', '\x2', ' ', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x10C', '\x3', '\x2', '\x2', '\x2', '&', '\x111', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x118', '\x3', '\x2', '\x2', '\x2', '*', '\x125', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x135', '\x3', '\x2', '\x2', '\x2', '\x30', '\x13A', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x34', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x15D', '\x3', '\x2', '\x2', '\x2', ':', '\x163', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x169', '\x3', '\x2', '\x2', '\x2', '>', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x44', '\x183', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x19C', '\x3', '\x2', '\x2', '\x2', 'H', '\x1A2', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1A6', '\x3', '\x2', '\x2', '\x2', 'N', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1AD', '\x3', '\x2', '\x2', '\x2', 'R', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x1BD', '\x3', '\x2', '\x2', '\x2', 'X', '\x1C5', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\\', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x1D0', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x62', '\x1D8', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x66', '\x1DC', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x1E0', '\x3', '\x2', '\x2', '\x2', 'l', '\x1E3', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x1E8', '\x3', '\x2', '\x2', '\x2', 'p', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x201', '\x3', '\x2', '\x2', '\x2', 
		't', '\x203', '\x3', '\x2', '\x2', '\x2', 'v', '\x205', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x207', '\x3', '\x2', '\x2', '\x2', 'z', '\x212', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x224', '\x3', '\x2', '\x2', '\x2', '\x80', '\x22C', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x84', '\x230', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x232', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x234', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x236', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x238', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x90', 
		'\x5', '\f', '\a', '\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x93', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x95', '\x5', '\x14', '\v', '\x2', '\x95', '\x96', '\a', '\x2', 
		'\x2', '\x3', '\x96', '\x3', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', 
		'\x5', '~', '@', '\x2', '\x98', '\x5', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\x5', '\b', '\x5', '\x2', '\x9A', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\xA0', '\x5', '~', '@', '\x2', '\x9C', '\x9D', '\a', '\x38', 
		'\x2', '\x2', '\x9D', '\x9F', '\x5', '~', '@', '\x2', '\x9E', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\t', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', '=', '\x2', '\x2', '\xA4', 
		'\xA5', '\x5', '\b', '\x5', '\x2', '\xA5', '\xA6', '\a', '>', '\x2', '\x2', 
		'\xA6', '\v', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAA', '\x5', '\xE', 
		'\b', '\x2', '\xA8', '\xAA', '\x5', '\x10', '\t', '\x2', '\xA9', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\r', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAF', '\a', '\x4', 
		'\x2', '\x2', '\xAC', '\xAD', '\x5', '\x4', '\x3', '\x2', '\xAD', '\xAE', 
		'\a', ':', '\x2', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x5', 
		'\b', '\x5', '\x2', '\xB2', '\xB3', '\a', '\x36', '\x2', '\x2', '\xB3', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x4', '\x2', 
		'\x2', '\xB5', '\xB9', '\a', '\x5', '\x2', '\x2', '\xB6', '\xB7', '\x5', 
		'\x4', '\x3', '\x2', '\xB7', '\xB8', '\a', ':', '\x2', '\x2', '\xB8', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBC', '\x5', '\x12', '\n', '\x2', '\xBC', 
		'\xBD', '\a', '\x36', '\x2', '\x2', '\xBD', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xC1', '\x5', '\b', '\x5', '\x2', '\xBF', '\xC1', '\x5', 
		'\x8C', 'G', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC4', '\x5', '\n', '\x6', '\x2', '\xC3', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC9', '\a', '\x3', '\x2', '\x2', '\xC9', 
		'\xCA', '\x5', '\x6', '\x4', '\x2', '\xCA', '\xCB', '\x5', '\x16', '\f', 
		'\x2', '\xCB', '\x15', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xD0', '\a', 
		'?', '\x2', '\x2', '\xCD', '\xCF', '\x5', '\f', '\a', '\x2', '\xCE', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD7', '\x5', '\x18', '\r', '\x2', 
		'\xD4', '\xD6', '\x5', '$', '\x13', '\x2', '\xD5', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDB', '\a', '@', '\x2', '\x2', '\xDB', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\x5', '\n', '\x6', '\x2', 
		'\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', '\x5', 
		'\x2', '\x2', '\xE3', '\xE9', '\x5', '\x4', '\x3', '\x2', '\xE4', '\xE6', 
		'\a', ';', '\x2', '\x2', '\xE5', '\xE7', '\x5', '\x1A', '\xE', '\x2', 
		'\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEA', 
		'\a', '<', '\x2', '\x2', '\xE9', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEC', '\a', '\x36', '\x2', '\x2', '\xEC', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xF2', '\x5', '\x1C', '\xF', '\x2', '\xEE', 
		'\xEF', '\a', '\x39', '\x2', '\x2', '\xEF', '\xF1', '\x5', '\x1C', '\xF', 
		'\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF9', '\x5', 
		'\x1E', '\x10', '\x2', '\xF6', '\xF9', '\x5', ' ', '\x11', '\x2', '\xF7', 
		'\xF9', '\x5', '\"', '\x12', '\x2', '\xF8', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\a', '\x61', '\x2', '\x2', '\xFB', '\xFC', '\a', ':', '\x2', 
		'\x2', '\xFC', '\xFD', '\x5', '\x8C', 'G', '\x2', '\xFD', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', '\x62', '\x2', '\x2', '\xFF', 
		'\x100', '\a', ':', '\x2', '\x2', '\x100', '\x101', '\x5', '\x8C', 'G', 
		'\x2', '\x101', '!', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\a', 
		'\x63', '\x2', '\x2', '\x103', '\x104', '\a', ':', '\x2', '\x2', '\x104', 
		'\x105', '\x5', '\x86', '\x44', '\x2', '\x105', '\x106', '\a', '\x38', 
		'\x2', '\x2', '\x106', '\x107', '\x5', '\x86', '\x44', '\x2', '\x107', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10D', '\x5', '&', '\x14', 
		'\x2', '\x109', '\x10D', '\x5', '\x30', '\x19', '\x2', '\x10A', '\x10D', 
		'\x5', '|', '?', '\x2', '\x10B', '\x10D', '\x5', 'V', ',', '\x2', '\x10C', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x110', '\x5', '\n', '\x6', '\x2', '\x10F', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x113', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x114', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\a', '\v', '\x2', '\x2', 
		'\x115', '\x116', '\x5', '\x4', '\x3', '\x2', '\x116', '\x117', '\x5', 
		'(', '\x15', '\x2', '\x117', '\'', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\a', '?', '\x2', '\x2', '\x119', '\x121', '\x5', '*', '\x16', 
		'\x2', '\x11A', '\x11E', '\a', '\x36', '\x2', '\x2', '\x11B', '\x11D', 
		'\x5', '.', '\x18', '\x2', '\x11C', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x120', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x124', '\a', '@', '\x2', '\x2', '\x124', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x125', '\x12A', '\x5', ',', '\x17', '\x2', '\x126', '\x127', 
		'\a', '\x39', '\x2', '\x2', '\x127', '\x129', '\x5', ',', '\x17', '\x2', 
		'\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12F', 
		'\x5', '\n', '\x6', '\x2', '\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x132', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x131', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x132', '\x130', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x134', '\x5', '\x4', '\x3', '\x2', '\x134', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x136', '\x5', 'p', '\x39', '\x2', '\x136', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x137', '\x139', '\x5', '\n', '\x6', 
		'\x2', '\x138', '\x137', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13C', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x13F', '\x5', '\x32', '\x1A', '\x2', '\x13E', '\x13D', '\x3', '\x2', 
		'\x2', '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x142', '\a', '\b', '\x2', '\x2', 
		'\x141', '\x140', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x144', '\a', '\t', '\x2', '\x2', '\x144', '\x147', '\x5', '\x4', '\x3', 
		'\x2', '\x145', '\x146', '\a', '\x37', '\x2', '\x2', '\x146', '\x148', 
		'\x5', '>', ' ', '\x2', '\x147', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x148', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14A', '\x5', '<', '\x1F', '\x2', '\x14A', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x150', '\x5', '\x34', '\x1B', 
		'\x2', '\x14C', '\x150', '\x5', '\x36', '\x1C', '\x2', '\x14D', '\x150', 
		'\x5', '\x38', '\x1D', '\x2', '\x14E', '\x150', '\x5', ':', '\x1E', '\x2', 
		'\x14F', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x152', '\a', '=', '\x2', '\x2', '\x152', '\x153', '\a', 
		'\x30', '\x2', '\x2', '\x153', '\x154', '\a', '\x37', '\x2', '\x2', '\x154', 
		'\x155', '\x5', '\b', '\x5', '\x2', '\x155', '\x156', '\a', '>', '\x2', 
		'\x2', '\x156', '\x35', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', 
		'\a', '=', '\x2', '\x2', '\x158', '\x159', '\a', '\x31', '\x2', '\x2', 
		'\x159', '\x15A', '\a', '\x37', '\x2', '\x2', '\x15A', '\x15B', '\x5', 
		'\b', '\x5', '\x2', '\x15B', '\x15C', '\a', '>', '\x2', '\x2', '\x15C', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\a', '=', '\x2', 
		'\x2', '\x15E', '\x15F', '\a', '\x32', '\x2', '\x2', '\x15F', '\x160', 
		'\a', '\x37', '\x2', '\x2', '\x160', '\x161', '\x5', '\b', '\x5', '\x2', 
		'\x161', '\x162', '\a', '>', '\x2', '\x2', '\x162', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x163', '\x164', '\a', '=', '\x2', '\x2', '\x164', '\x165', 
		'\a', '\x33', '\x2', '\x2', '\x165', '\x166', '\a', '\x37', '\x2', '\x2', 
		'\x166', '\x167', '\x5', '\b', '\x5', '\x2', '\x167', '\x168', '\a', '>', 
		'\x2', '\x2', '\x168', ';', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16D', 
		'\a', '?', '\x2', '\x2', '\x16A', '\x16C', '\x5', '\x42', '\"', '\x2', 
		'\x16B', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16D', 
		'\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x170', '\x3', '\x2', '\x2', 
		'\x2', '\x16F', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', 
		'\a', '@', '\x2', '\x2', '\x171', '=', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x177', '\x5', '@', '!', '\x2', '\x173', '\x174', '\a', '\x39', '\x2', 
		'\x2', '\x174', '\x176', '\x5', '@', '!', '\x2', '\x175', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x179', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x175', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '?', '\x3', '\x2', '\x2', '\x2', '\x179', '\x177', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x17B', '\x5', '\b', '\x5', '\x2', '\x17B', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17F', '\x5', '\x44', '#', 
		'\x2', '\x17D', '\x17F', '\x5', 'p', '\x39', '\x2', '\x17E', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x43', '\x3', '\x2', '\x2', '\x2', '\x180', '\x182', '\x5', 
		'\n', '\x6', '\x2', '\x181', '\x180', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x183', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x188', '\x5', '\x46', '$', '\x2', '\x187', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x18A', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18B', '\x5', 'H', '%', 
		'\x2', '\x18A', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18E', '\x5', 'J', '&', '\x2', '\x18D', '\x18C', '\x3', '\x2', 
		'\x2', '\x2', '\x18D', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\x5', '^', '\x30', '\x2', 
		'\x190', '\x192', '\x5', '\x4', '\x3', '\x2', '\x191', '\x193', '\x5', 
		'L', '\'', '\x2', '\x192', '\x191', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'\x193', '\x3', '\x2', '\x2', '\x2', '\x193', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x194', '\x196', '\x5', 'N', '(', '\x2', '\x195', '\x194', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x199', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x199', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\a', '\x36', '\x2', '\x2', 
		'\x19B', '\x45', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\a', '=', 
		'\x2', '\x2', '\x19D', '\x19E', '\a', '\x34', '\x2', '\x2', '\x19E', '\x19F', 
		'\a', '\x37', '\x2', '\x2', '\x19F', '\x1A0', '\x5', '~', '@', '\x2', 
		'\x1A0', '\x1A1', '\a', '>', '\x2', '\x2', '\x1A1', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x1A2', '\x1A3', '\a', '\r', '\x2', '\x2', '\x1A3', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\t', '\x2', '\x2', '\x2', 
		'\x1A5', 'K', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\a', ':', 
		'\x2', '\x2', '\x1A7', '\x1A8', '\x5', '\x8C', 'G', '\x2', '\x1A8', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AC', '\x5', 'P', ')', '\x2', 
		'\x1AA', '\x1AC', '\x5', 'R', '*', '\x2', '\x1AB', '\x1A9', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AC', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AF', '\a', ')', '\x2', '\x2', 
		'\x1AE', '\x1B0', '\x5', 'T', '+', '\x2', '\x1AF', '\x1AE', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B3', '\a', '*', '\x2', '\x2', 
		'\x1B2', '\x1B4', '\x5', 'T', '+', '\x2', '\x1B3', '\x1B2', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B4', 'S', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1BA', '\x5', '\b', '\x5', '\x2', 
		'\x1B6', '\x1B7', '\a', '\x39', '\x2', '\x2', '\x1B7', '\x1B9', '\x5', 
		'\b', '\x5', '\x2', '\x1B8', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B8', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BB', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x1BC', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BD', 
		'\x1BE', '\a', '(', '\x2', '\x2', '\x1BE', '\x1BF', '\x5', '^', '\x30', 
		'\x2', '\x1BF', '\x1C1', '\x5', '\x4', '\x3', '\x2', '\x1C0', '\x1C2', 
		'\x5', 'X', '-', '\x2', '\x1C1', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'\x1C1', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\a', '\x36', '\x2', '\x2', '\x1C4', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\a', ':', '\x2', '\x2', 
		'\x1C6', '\x1C7', '\x5', '\x8C', 'G', '\x2', '\x1C7', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8', '\x1CB', '\x5', '^', '\x30', '\x2', '\x1C9', '\x1CB', 
		'\x5', 'h', '\x35', '\x2', '\x1CA', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'\x1CA', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1CB', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x1CC', '\x1CD', '\x5', '^', '\x30', '\x2', '\x1CD', ']', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1D1', '\x5', 'l', '\x37', '\x2', 
		'\x1CF', '\x1D1', '\x5', '`', '\x31', '\x2', '\x1D0', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D7', '\x5', '\x66', '\x34', 
		'\x2', '\x1D3', '\x1D7', '\x5', '\x64', '\x33', '\x2', '\x1D4', '\x1D7', 
		'\x5', 'j', '\x36', '\x2', '\x1D5', '\x1D7', '\x5', '\x62', '\x32', '\x2', 
		'\x1D6', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D3', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1D9', '\x5', '\b', '\x5', '\x2', '\x1D9', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\t', '\x3', '\x2', '\x2', '\x1DB', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\t', '\x4', '\x2', 
		'\x2', '\x1DD', 'g', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\a', 
		'\x13', '\x2', '\x2', '\x1DF', 'i', '\x3', '\x2', '\x2', '\x2', '\x1E0', 
		'\x1E1', '\x5', '\x66', '\x34', '\x2', '\x1E1', '\x1E2', '\a', '\x43', 
		'\x2', '\x2', '\x1E2', 'k', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', 
		'\x5', 'n', '\x38', '\x2', '\x1E4', '\x1E5', '\a', '\x41', '\x2', '\x2', 
		'\x1E5', '\x1E6', '\x5', '`', '\x31', '\x2', '\x1E6', '\x1E7', '\a', '\x42', 
		'\x2', '\x2', '\x1E7', 'm', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', 
		'\t', '\x5', '\x2', '\x2', '\x1E9', 'o', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1EC', '\x5', '\n', '\x6', '\x2', '\x1EB', '\x1EA', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EB', 
		'\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1ED', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1F2', '\x5', 'r', ':', '\x2', '\x1F1', 
		'\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F5', '\x3', '\x2', '\x2', 
		'\x2', '\x1F3', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', 
		'\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\x5', 
		'Z', '.', '\x2', '\x1F7', '\x1F8', '\x5', '\x4', '\x3', '\x2', '\x1F8', 
		'\x1FA', '\a', ';', '\x2', '\x2', '\x1F9', '\x1FB', '\x5', 'x', '=', '\x2', 
		'\x1FA', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\x3', 
		'\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FC', 
		'\x1FD', '\a', '<', '\x2', '\x2', '\x1FD', '\x1FE', '\a', '\x36', '\x2', 
		'\x2', '\x1FE', 'q', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x202', '\x5', 
		't', ';', '\x2', '\x200', '\x202', '\x5', 'v', '<', '\x2', '\x201', '\x1FF', 
		'\x3', '\x2', '\x2', '\x2', '\x201', '\x200', '\x3', '\x2', '\x2', '\x2', 
		'\x202', 's', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\a', '/', 
		'\x2', '\x2', '\x204', 'u', '\x3', '\x2', '\x2', '\x2', '\x205', '\x206', 
		'\a', '+', '\x2', '\x2', '\x206', 'w', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x20C', '\x5', 'z', '>', '\x2', '\x208', '\x209', '\a', '\x39', '\x2', 
		'\x2', '\x209', '\x20B', '\x5', 'z', '>', '\x2', '\x20A', '\x208', '\x3', 
		'\x2', '\x2', '\x2', '\x20B', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x20A', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x20D', 'y', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20C', '\x3', 
		'\x2', '\x2', '\x2', '\x20F', '\x211', '\x5', '\n', '\x6', '\x2', '\x210', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x211', '\x214', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x210', '\x3', '\x2', '\x2', '\x2', '\x212', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x213', '\x215', '\x3', '\x2', '\x2', '\x2', 
		'\x214', '\x212', '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', '\x5', 
		'^', '\x30', '\x2', '\x216', '\x217', '\x5', '\x4', '\x3', '\x2', '\x217', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x218', '\x21A', '\x5', '\n', '\x6', 
		'\x2', '\x219', '\x218', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21D', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x219', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21E', '\x3', 
		'\x2', '\x2', '\x2', '\x21D', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x21F', '\a', '\f', '\x2', '\x2', '\x21F', '\x220', '\x5', '\b', '\x5', 
		'\x2', '\x220', '\x221', '\a', '\xE', '\x2', '\x2', '\x221', '\x222', 
		'\x5', '\b', '\x5', '\x2', '\x222', '\x223', '\a', '\x36', '\x2', '\x2', 
		'\x223', '}', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\t', '\x6', 
		'\x2', '\x2', '\x225', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x226', '\x22D', 
		'\x5', '\x82', '\x42', '\x2', '\x227', '\x22D', '\x5', '\x84', '\x43', 
		'\x2', '\x228', '\x22D', '\x5', '\x86', '\x44', '\x2', '\x229', '\x22D', 
		'\x5', '\x88', '\x45', '\x2', '\x22A', '\x22D', '\x5', '\x8A', '\x46', 
		'\x2', '\x22B', '\x22D', '\x5', '\x8C', 'G', '\x2', '\x22C', '\x226', 
		'\x3', '\x2', '\x2', '\x2', '\x22C', '\x227', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x228', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x229', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22C', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x22E', '\x22F', '\a', '\x10', '\x2', '\x2', '\x22F', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x230', '\x231', '\t', '\a', '\x2', '\x2', 
		'\x231', '\x85', '\x3', '\x2', '\x2', '\x2', '\x232', '\x233', '\a', '\x66', 
		'\x2', '\x2', '\x233', '\x87', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', 
		'\a', 'g', '\x2', '\x2', '\x235', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x236', '\x237', '\a', 'h', '\x2', '\x2', '\x237', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x238', '\x239', '\a', 'm', '\x2', '\x2', '\x239', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x91', '\xA0', '\xA9', '\xAF', '\xB9', 
		'\xC0', '\xC5', '\xD0', '\xD7', '\xDF', '\xE6', '\xE9', '\xF2', '\xF8', 
		'\x10C', '\x111', '\x11E', '\x121', '\x12A', '\x130', '\x13A', '\x13E', 
		'\x141', '\x147', '\x14F', '\x16D', '\x177', '\x17E', '\x183', '\x187', 
		'\x18A', '\x18D', '\x192', '\x197', '\x1AB', '\x1AF', '\x1B3', '\x1BA', 
		'\x1C1', '\x1CA', '\x1D0', '\x1D6', '\x1ED', '\x1F3', '\x1FA', '\x201', 
		'\x20C', '\x212', '\x21B', '\x22C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.Meta.Syntax.InternalSyntax
