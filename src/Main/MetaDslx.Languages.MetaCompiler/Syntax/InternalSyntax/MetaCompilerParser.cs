//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Syntax\InternalSyntax\MetaCompilerParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaCompiler.Syntax.InternalSyntax {

using MetaDslx.Languages.MetaCompiler.Model;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MetaCompilerParser : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.IncrementalParser {
    private MetaCompilerSyntaxParser SyntaxParser => (MetaCompilerSyntaxParser)this.IncrementalAntlr4Parser;
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KNamespace=1, KUsing=2, KCompiler=3, KSymbol=4, KBinder=5, KExtern=6, 
		KTypeDef=7, KAbstract=8, KClass=9, KStruct=10, KEnum=11, KContainment=12, 
		KNew=13, KNull=14, KTrue=15, KFalse=16, KVoid=17, KObject=18, KString=19, 
		KInt=20, KLong=21, KFloat=22, KDouble=23, KByte=24, KBool=25, KThis=26, 
		KTypeof=27, KAs=28, KIs=29, KBase=30, KConst=31, KReadonly=32, KLazy=33, 
		KDerived=34, KLocked=35, KPhase=36, KJoins=37, KAfter=38, KBefore=39, 
		KStatic=40, TSemicolon=41, TColon=42, TDot=43, TComma=44, TAssign=45, 
		TOpenParen=46, TCloseParen=47, TOpenBracket=48, TCloseBracket=49, TOpenBrace=50, 
		TCloseBrace=51, TLessThan=52, TGreaterThan=53, TQuestion=54, TQuestionQuestion=55, 
		TAmpersand=56, THat=57, TBar=58, TAndAlso=59, TOrElse=60, TPlusPlus=61, 
		TMinusMinus=62, TPlus=63, TMinus=64, TTilde=65, TExclamation=66, TSlash=67, 
		TAsterisk=68, TPercent=69, TLessThanOrEqual=70, TGreaterThanOrEqual=71, 
		TEqual=72, TNotEqual=73, TAsteriskAssign=74, TSlashAssign=75, TPercentAssign=76, 
		TPlusAssign=77, TMinusAssign=78, TLeftShiftAssign=79, TRightShiftAssign=80, 
		TAmpersandAssign=81, THatAssign=82, TBarAssign=83, IdentifierNormal=84, 
		IdentifierVerbatim=85, LInteger=86, LDecimal=87, LScientific=88, LDateTimeOffset=89, 
		LDateTime=90, LDate=91, LTime=92, LRegularString=93, LGuid=94, LUtf8Bom=95, 
		LWhiteSpace=96, LCrLf=97, LLineEnd=98, LSingleLineComment=99, LComment=100, 
		LDoubleQuoteVerbatimString=101, LSingleQuoteVerbatimString=102, DoubleQuoteVerbatimStringLiteralStart=103, 
		SingleQuoteVerbatimStringLiteralStart=104, LCommentStart=105;
	public const int
		RULE_main = 0, RULE_name = 1, RULE_qualifiedName = 2, RULE_qualifier = 3, 
		RULE_attribute = 4, RULE_namespaceDeclaration = 5, RULE_namespaceBody = 6, 
		RULE_declaration = 7, RULE_compilerDeclaration = 8, RULE_phaseDeclaration = 9, 
		RULE_locked = 10, RULE_phaseJoin = 11, RULE_afterPhases = 12, RULE_beforePhases = 13, 
		RULE_phaseRef = 14, RULE_enumDeclaration = 15, RULE_enumBody = 16, RULE_enumValues = 17, 
		RULE_enumValue = 18, RULE_enumMemberDeclaration = 19, RULE_classDeclaration = 20, 
		RULE_abstract_ = 21, RULE_classAncestors = 22, RULE_classAncestor = 23, 
		RULE_classBody = 24, RULE_classMemberDeclaration = 25, RULE_classKind = 26, 
		RULE_fieldDeclaration = 27, RULE_fieldContainment = 28, RULE_fieldModifier = 29, 
		RULE_defaultValue = 30, RULE_phase = 31, RULE_nameUseList = 32, RULE_typedefDeclaration = 33, 
		RULE_typedefValue = 34, RULE_returnType = 35, RULE_typeOfReference = 36, 
		RULE_typeReference = 37, RULE_simpleType = 38, RULE_classType = 39, RULE_objectType = 40, 
		RULE_primitiveType = 41, RULE_voidType = 42, RULE_nullableType = 43, RULE_arrayType = 44, 
		RULE_genericType = 45, RULE_typeArguments = 46, RULE_operationDeclaration = 47, 
		RULE_parameterList = 48, RULE_parameter = 49, RULE_identifier = 50, RULE_literal = 51, 
		RULE_nullLiteral = 52, RULE_booleanLiteral = 53, RULE_integerLiteral = 54, 
		RULE_decimalLiteral = 55, RULE_scientificLiteral = 56, RULE_stringLiteral = 57;
	public static readonly string[] ruleNames = {
		"main", "name", "qualifiedName", "qualifier", "attribute", "namespaceDeclaration", 
		"namespaceBody", "declaration", "compilerDeclaration", "phaseDeclaration", 
		"locked", "phaseJoin", "afterPhases", "beforePhases", "phaseRef", "enumDeclaration", 
		"enumBody", "enumValues", "enumValue", "enumMemberDeclaration", "classDeclaration", 
		"abstract_", "classAncestors", "classAncestor", "classBody", "classMemberDeclaration", 
		"classKind", "fieldDeclaration", "fieldContainment", "fieldModifier", 
		"defaultValue", "phase", "nameUseList", "typedefDeclaration", "typedefValue", 
		"returnType", "typeOfReference", "typeReference", "simpleType", "classType", 
		"objectType", "primitiveType", "voidType", "nullableType", "arrayType", 
		"genericType", "typeArguments", "operationDeclaration", "parameterList", 
		"parameter", "identifier", "literal", "nullLiteral", "booleanLiteral", 
		"integerLiteral", "decimalLiteral", "scientificLiteral", "stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'using'", "'compiler'", "'symbol'", "'binder'", 
		"'extern'", "'typedef'", "'abstract'", "'class'", "'struct'", "'enum'", 
		"'containment'", "'new'", "'null'", "'true'", "'false'", "'void'", "'object'", 
		"'string'", "'int'", "'long'", "'float'", "'double'", "'byte'", "'bool'", 
		"'this'", "'typeof'", "'as'", "'is'", "'base'", "'const'", "'readonly'", 
		"'lazy'", "'derived'", "'locked'", "'phase'", "'joins'", "'after'", "'before'", 
		"'static'", "';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", 
		"'<='", "'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'&='", "'^='", "'|='", null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'\"'", "'''", "'@\"'", "'@''", "'/*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KUsing", "KCompiler", "KSymbol", "KBinder", "KExtern", 
		"KTypeDef", "KAbstract", "KClass", "KStruct", "KEnum", "KContainment", 
		"KNew", "KNull", "KTrue", "KFalse", "KVoid", "KObject", "KString", "KInt", 
		"KLong", "KFloat", "KDouble", "KByte", "KBool", "KThis", "KTypeof", "KAs", 
		"KIs", "KBase", "KConst", "KReadonly", "KLazy", "KDerived", "KLocked", 
		"KPhase", "KJoins", "KAfter", "KBefore", "KStatic", "TSemicolon", "TColon", 
		"TDot", "TComma", "TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", 
		"TCloseBracket", "TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", 
		"TQuestion", "TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", 
		"TOrElse", "TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IdentifierNormal", "IdentifierVerbatim", 
		"LInteger", "LDecimal", "LScientific", "LDateTimeOffset", "LDateTime", 
		"LDate", "LTime", "LRegularString", "LGuid", "LUtf8Bom", "LWhiteSpace", 
		"LCrLf", "LLineEnd", "LSingleLineComment", "LComment", "LDoubleQuoteVerbatimString", 
		"LSingleQuoteVerbatimString", "DoubleQuoteVerbatimStringLiteralStart", 
		"SingleQuoteVerbatimStringLiteralStart", "LCommentStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaCompilerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MetaCompilerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MetaCompilerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MetaCompilerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MetaCompilerParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMain() : _DoParseMain();
	}

	internal MainContext _DoParseMain() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; namespaceDeclaration();
			State = 117; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseName() : _DoParseName();
	}

	internal NameContext _DoParseName() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifiedName() : _DoParseQualifiedName();
	}

	internal QualifiedNameContext _DoParseQualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaCompilerParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaCompilerParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifier() : _DoParseQualifier();
	}

	internal QualifierContext _DoParseQualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; identifier();
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TDot) {
				{
				{
				State = 124; Match(TDot);
				State = 125; identifier();
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaCompilerParser.TOpenBracket, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaCompilerParser.TCloseBracket, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAttribute() : _DoParseAttribute();
	}

	internal AttributeContext _DoParseAttribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(TOpenBracket);
			State = 132; qualifier();
			State = 133; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaCompilerParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNamespaceDeclaration() : _DoParseNamespaceDeclaration();
	}

	internal NamespaceDeclarationContext _DoParseNamespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 135; attribute();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141; Match(KNamespace);
			State = 142; qualifiedName();
			State = 143; namespaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaCompilerParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaCompilerParser.TCloseBrace, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNamespaceBody() : _DoParseNamespaceBody();
	}

	internal NamespaceBodyContext _DoParseNamespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(TOpenBrace);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KCompiler) | (1L << KSymbol) | (1L << KBinder) | (1L << KTypeDef) | (1L << KAbstract) | (1L << KClass) | (1L << KEnum) | (1L << KLocked) | (1L << KPhase) | (1L << TOpenBracket))) != 0)) {
				{
				{
				State = 146; declaration();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 152; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public CompilerDeclarationContext compilerDeclaration() {
			return GetRuleContext<CompilerDeclarationContext>(0);
		}
		public PhaseDeclarationContext phaseDeclaration() {
			return GetRuleContext<PhaseDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public TypedefDeclarationContext typedefDeclaration() {
			return GetRuleContext<TypedefDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDeclaration() : _DoParseDeclaration();
	}

	internal DeclarationContext _DoParseDeclaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_declaration);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; compilerDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155; phaseDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 156; enumDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 157; classDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 158; typedefDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilerDeclarationContext : ParserRuleContext {
		public ITerminalNode KCompiler() { return GetToken(MetaCompilerParser.KCompiler, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaCompilerParser.TSemicolon, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public CompilerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilerDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilerDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilerDeclarationContext compilerDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCompilerDeclaration() : _DoParseCompilerDeclaration();
	}

	internal CompilerDeclarationContext _DoParseCompilerDeclaration() {
		CompilerDeclarationContext _localctx = new CompilerDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_compilerDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 161; attribute();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167; Match(KCompiler);
			State = 168; name();
			State = 169; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhaseDeclarationContext : ParserRuleContext {
		public ITerminalNode KPhase() { return GetToken(MetaCompilerParser.KPhase, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaCompilerParser.TSemicolon, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public LockedContext locked() {
			return GetRuleContext<LockedContext>(0);
		}
		public PhaseJoinContext phaseJoin() {
			return GetRuleContext<PhaseJoinContext>(0);
		}
		public AfterPhasesContext afterPhases() {
			return GetRuleContext<AfterPhasesContext>(0);
		}
		public BeforePhasesContext beforePhases() {
			return GetRuleContext<BeforePhasesContext>(0);
		}
		public PhaseDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phaseDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhaseDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhaseDeclarationContext phaseDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParsePhaseDeclaration() : _DoParsePhaseDeclaration();
	}

	internal PhaseDeclarationContext _DoParsePhaseDeclaration() {
		PhaseDeclarationContext _localctx = new PhaseDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_phaseDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 171; attribute();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KLocked) {
				{
				State = 177; locked();
				}
			}

			State = 180; Match(KPhase);
			State = 181; name();
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KJoins) {
				{
				State = 182; phaseJoin();
				}
			}

			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KAfter) {
				{
				State = 185; afterPhases();
				}
			}

			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KBefore) {
				{
				State = 188; beforePhases();
				}
			}

			State = 191; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockedContext : ParserRuleContext {
		public ITerminalNode KLocked() { return GetToken(MetaCompilerParser.KLocked, 0); }
		public LockedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locked; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocked(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockedContext locked() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLocked() : _DoParseLocked();
	}

	internal LockedContext _DoParseLocked() {
		LockedContext _localctx = new LockedContext(Context, State);
		EnterRule(_localctx, 20, RULE_locked);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(KLocked);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhaseJoinContext : ParserRuleContext {
		public ITerminalNode KJoins() { return GetToken(MetaCompilerParser.KJoins, 0); }
		public PhaseRefContext phaseRef() {
			return GetRuleContext<PhaseRefContext>(0);
		}
		public PhaseJoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phaseJoin; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhaseJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhaseJoinContext phaseJoin() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParsePhaseJoin() : _DoParsePhaseJoin();
	}

	internal PhaseJoinContext _DoParsePhaseJoin() {
		PhaseJoinContext _localctx = new PhaseJoinContext(Context, State);
		EnterRule(_localctx, 22, RULE_phaseJoin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(KJoins);
			State = 196; phaseRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AfterPhasesContext : ParserRuleContext {
		public ITerminalNode KAfter() { return GetToken(MetaCompilerParser.KAfter, 0); }
		public PhaseRefContext[] phaseRef() {
			return GetRuleContexts<PhaseRefContext>();
		}
		public PhaseRefContext phaseRef(int i) {
			return GetRuleContext<PhaseRefContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaCompilerParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaCompilerParser.TComma, i);
		}
		public AfterPhasesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_afterPhases; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAfterPhases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AfterPhasesContext afterPhases() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAfterPhases() : _DoParseAfterPhases();
	}

	internal AfterPhasesContext _DoParseAfterPhases() {
		AfterPhasesContext _localctx = new AfterPhasesContext(Context, State);
		EnterRule(_localctx, 24, RULE_afterPhases);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(KAfter);
			State = 199; phaseRef();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 200; Match(TComma);
				State = 201; phaseRef();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeforePhasesContext : ParserRuleContext {
		public ITerminalNode KBefore() { return GetToken(MetaCompilerParser.KBefore, 0); }
		public PhaseRefContext[] phaseRef() {
			return GetRuleContexts<PhaseRefContext>();
		}
		public PhaseRefContext phaseRef(int i) {
			return GetRuleContext<PhaseRefContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaCompilerParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaCompilerParser.TComma, i);
		}
		public BeforePhasesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beforePhases; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeforePhases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeforePhasesContext beforePhases() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseBeforePhases() : _DoParseBeforePhases();
	}

	internal BeforePhasesContext _DoParseBeforePhases() {
		BeforePhasesContext _localctx = new BeforePhasesContext(Context, State);
		EnterRule(_localctx, 26, RULE_beforePhases);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(KBefore);
			State = 208; phaseRef();
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 209; Match(TComma);
				State = 210; phaseRef();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhaseRefContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public PhaseRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phaseRef; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhaseRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhaseRefContext phaseRef() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParsePhaseRef() : _DoParsePhaseRef();
	}

	internal PhaseRefContext _DoParsePhaseRef() {
		PhaseRefContext _localctx = new PhaseRefContext(Context, State);
		EnterRule(_localctx, 28, RULE_phaseRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnum() { return GetToken(MetaCompilerParser.KEnum, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumDeclaration() : _DoParseEnumDeclaration();
	}

	internal EnumDeclarationContext _DoParseEnumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 218; attribute();
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 224; Match(KEnum);
			State = 225; name();
			State = 226; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaCompilerParser.TOpenBrace, 0); }
		public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaCompilerParser.TCloseBrace, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaCompilerParser.TSemicolon, 0); }
		public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumBody() : _DoParseEnumBody();
	}

	internal EnumBodyContext _DoParseEnumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(TOpenBrace);
			State = 229; enumValues();
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TSemicolon) {
				{
				State = 230; Match(TSemicolon);
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KVoid) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
					{
					{
					State = 231; enumMemberDeclaration();
					}
					}
					State = 236;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 239; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaCompilerParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaCompilerParser.TComma, i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumValues() : _DoParseEnumValues();
	}

	internal EnumValuesContext _DoParseEnumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(Context, State);
		EnterRule(_localctx, 34, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; enumValue();
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 242; Match(TComma);
				State = 243; enumValue();
				}
				}
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumValue() : _DoParseEnumValue();
	}

	internal EnumValueContext _DoParseEnumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 249; attribute();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 255; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext enumMemberDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEnumMemberDeclaration() : _DoParseEnumMemberDeclaration();
	}

	internal EnumMemberDeclarationContext _DoParseEnumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_enumMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; operationDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ClassKindContext classKind() {
			return GetRuleContext<ClassKindContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Abstract_Context abstract_() {
			return GetRuleContext<Abstract_Context>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaCompilerParser.TColon, 0); }
		public ClassAncestorsContext classAncestors() {
			return GetRuleContext<ClassAncestorsContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassDeclaration() : _DoParseClassDeclaration();
	}

	internal ClassDeclarationContext _DoParseClassDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 259; attribute();
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KAbstract) {
				{
				State = 265; abstract_();
				}
			}

			State = 268; classKind();
			State = 269; name();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TColon) {
				{
				State = 270; Match(TColon);
				State = 271; classAncestors();
				}
			}

			State = 274; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_Context : ParserRuleContext {
		public ITerminalNode KAbstract() { return GetToken(MetaCompilerParser.KAbstract, 0); }
		public Abstract_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstract_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_Context abstract_() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAbstract_() : _DoParseAbstract_();
	}

	internal Abstract_Context _DoParseAbstract_() {
		Abstract_Context _localctx = new Abstract_Context(Context, State);
		EnterRule(_localctx, 42, RULE_abstract_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(KAbstract);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorsContext : ParserRuleContext {
		public ClassAncestorContext[] classAncestor() {
			return GetRuleContexts<ClassAncestorContext>();
		}
		public ClassAncestorContext classAncestor(int i) {
			return GetRuleContext<ClassAncestorContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaCompilerParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaCompilerParser.TComma, i);
		}
		public ClassAncestorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestors; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorsContext classAncestors() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassAncestors() : _DoParseClassAncestors();
	}

	internal ClassAncestorsContext _DoParseClassAncestors() {
		ClassAncestorsContext _localctx = new ClassAncestorsContext(Context, State);
		EnterRule(_localctx, 44, RULE_classAncestors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; classAncestor();
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 279; Match(TComma);
				State = 280; classAncestor();
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ClassAncestorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorContext classAncestor() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassAncestor() : _DoParseClassAncestor();
	}

	internal ClassAncestorContext _DoParseClassAncestor() {
		ClassAncestorContext _localctx = new ClassAncestorContext(Context, State);
		EnterRule(_localctx, 46, RULE_classAncestor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaCompilerParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaCompilerParser.TCloseBrace, 0); }
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassBody() : _DoParseClassBody();
	}

	internal ClassBodyContext _DoParseClassBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 48, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(TOpenBrace);
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KVoid) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				{
				State = 289; classMemberDeclaration();
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 295; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassMemberDeclaration() : _DoParseClassMemberDeclaration();
	}

	internal ClassMemberDeclarationContext _DoParseClassMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_classMemberDeclaration);
		try {
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 297; fieldDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 298; operationDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassKindContext : ParserRuleContext {
		public ITerminalNode KClass() { return GetToken(MetaCompilerParser.KClass, 0); }
		public ITerminalNode KSymbol() { return GetToken(MetaCompilerParser.KSymbol, 0); }
		public ITerminalNode KBinder() { return GetToken(MetaCompilerParser.KBinder, 0); }
		public ClassKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classKind; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassKindContext classKind() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassKind() : _DoParseClassKind();
	}

	internal ClassKindContext _DoParseClassKind() {
		ClassKindContext _localctx = new ClassKindContext(Context, State);
		EnterRule(_localctx, 52, RULE_classKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KSymbol) | (1L << KBinder) | (1L << KClass))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaCompilerParser.TSemicolon, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public FieldContainmentContext fieldContainment() {
			return GetRuleContext<FieldContainmentContext>(0);
		}
		public FieldModifierContext fieldModifier() {
			return GetRuleContext<FieldModifierContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public PhaseContext phase() {
			return GetRuleContext<PhaseContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldDeclaration() : _DoParseFieldDeclaration();
	}

	internal FieldDeclarationContext _DoParseFieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 303; attribute();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KContainment) {
				{
				State = 309; fieldContainment();
				}
			}

			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReadonly) | (1L << KLazy) | (1L << KDerived))) != 0)) {
				{
				State = 312; fieldModifier();
				}
			}

			State = 315; typeReference();
			State = 316; name();
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 317; defaultValue();
				}
			}

			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KPhase) {
				{
				State = 320; phase();
				}
			}

			State = 323; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContainmentContext : ParserRuleContext {
		public ITerminalNode KContainment() { return GetToken(MetaCompilerParser.KContainment, 0); }
		public FieldContainmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldContainment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldContainment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContainmentContext fieldContainment() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldContainment() : _DoParseFieldContainment();
	}

	internal FieldContainmentContext _DoParseFieldContainment() {
		FieldContainmentContext _localctx = new FieldContainmentContext(Context, State);
		EnterRule(_localctx, 56, RULE_fieldContainment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(KContainment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public ITerminalNode KReadonly() { return GetToken(MetaCompilerParser.KReadonly, 0); }
		public ITerminalNode KLazy() { return GetToken(MetaCompilerParser.KLazy, 0); }
		public ITerminalNode KDerived() { return GetToken(MetaCompilerParser.KDerived, 0); }
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldModifier() : _DoParseFieldModifier();
	}

	internal FieldModifierContext _DoParseFieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_fieldModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReadonly) | (1L << KLazy) | (1L << KDerived))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ITerminalNode TAssign() { return GetToken(MetaCompilerParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDefaultValue() : _DoParseDefaultValue();
	}

	internal DefaultValueContext _DoParseDefaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(TAssign);
			State = 330; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhaseContext : ParserRuleContext {
		public ITerminalNode KPhase() { return GetToken(MetaCompilerParser.KPhase, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public PhaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phase; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhaseContext phase() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParsePhase() : _DoParsePhase();
	}

	internal PhaseContext _DoParsePhase() {
		PhaseContext _localctx = new PhaseContext(Context, State);
		EnterRule(_localctx, 62, RULE_phase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(KPhase);
			State = 333; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameUseListContext : ParserRuleContext {
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaCompilerParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaCompilerParser.TComma, i);
		}
		public NameUseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameUseList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameUseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameUseListContext nameUseList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNameUseList() : _DoParseNameUseList();
	}

	internal NameUseListContext _DoParseNameUseList() {
		NameUseListContext _localctx = new NameUseListContext(Context, State);
		EnterRule(_localctx, 64, RULE_nameUseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; qualifier();
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 336; Match(TComma);
				State = 337; qualifier();
				}
				}
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefDeclarationContext : ParserRuleContext {
		public ITerminalNode KTypeDef() { return GetToken(MetaCompilerParser.KTypeDef, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypedefValueContext typedefValue() {
			return GetRuleContext<TypedefValueContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaCompilerParser.TSemicolon, 0); }
		public TypedefDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefDeclarationContext typedefDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypedefDeclaration() : _DoParseTypedefDeclaration();
	}

	internal TypedefDeclarationContext _DoParseTypedefDeclaration() {
		TypedefDeclarationContext _localctx = new TypedefDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_typedefDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(KTypeDef);
			State = 344; name();
			State = 345; typedefValue();
			State = 346; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefValueContext : ParserRuleContext {
		public ITerminalNode TAssign() { return GetToken(MetaCompilerParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public TypedefValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefValueContext typedefValue() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypedefValue() : _DoParseTypedefValue();
	}

	internal TypedefValueContext _DoParseTypedefValue() {
		TypedefValueContext _localctx = new TypedefValueContext(Context, State);
		EnterRule(_localctx, 68, RULE_typedefValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(TAssign);
			State = 349; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseReturnType() : _DoParseReturnType();
	}

	internal ReturnTypeContext _DoParseReturnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_returnType);
		try {
			State = 353;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 351; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 352; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfReferenceContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeOfReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfReference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfReferenceContext typeOfReference() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypeOfReference() : _DoParseTypeOfReference();
	}

	internal TypeOfReferenceContext _DoParseTypeOfReference() {
		TypeOfReferenceContext _localctx = new TypeOfReferenceContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeOfReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypeReference() : _DoParseTypeReference();
	}

	internal TypeReferenceContext _DoParseTypeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeReference);
		try {
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; genericType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358; arrayType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseSimpleType() : _DoParseSimpleType();
	}

	internal SimpleTypeContext _DoParseSimpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_simpleType);
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 362; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; objectType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 364; nullableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 365; classType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseClassType() : _DoParseClassType();
	}

	internal ClassTypeContext _DoParseClassType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_classType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(MetaCompilerParser.KObject, 0); }
		public ITerminalNode KString() { return GetToken(MetaCompilerParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseObjectType() : _DoParseObjectType();
	}

	internal ObjectTypeContext _DoParseObjectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_la = TokenStream.LA(1);
			if ( !(_la==KObject || _la==KString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(MetaCompilerParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaCompilerParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaCompilerParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaCompilerParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(MetaCompilerParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(MetaCompilerParser.KBool, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParsePrimitiveType() : _DoParsePrimitiveType();
	}

	internal PrimitiveTypeContext _DoParsePrimitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaCompilerParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseVoidType() : _DoParseVoidType();
	}

	internal VoidTypeContext _DoParseVoidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaCompilerParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNullableType() : _DoParseNullableType();
	}

	internal NullableTypeContext _DoParseNullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; primitiveType();
			State = 377; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(MetaCompilerParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(MetaCompilerParser.TCloseBracket, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseArrayType() : _DoParseArrayType();
	}

	internal ArrayTypeContext _DoParseArrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; simpleType();
			State = 380; Match(TOpenBracket);
			State = 381; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaCompilerParser.TLessThan, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaCompilerParser.TGreaterThan, 0); }
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseGenericType() : _DoParseGenericType();
	}

	internal GenericTypeContext _DoParseGenericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 90, RULE_genericType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; classType();
			State = 384; Match(TLessThan);
			State = 385; typeArguments();
			State = 386; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaCompilerParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaCompilerParser.TComma, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypeArguments() : _DoParseTypeArguments();
	}

	internal TypeArgumentsContext _DoParseTypeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 92, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; typeReference();
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 389; Match(TComma);
				State = 390; typeReference();
				}
				}
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaCompilerParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaCompilerParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaCompilerParser.TSemicolon, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseOperationDeclaration() : _DoParseOperationDeclaration();
	}

	internal OperationDeclarationContext _DoParseOperationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 94, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 396; attribute();
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 402; returnType();
			State = 403; name();
			State = 404; Match(TOpenParen);
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 405; parameterList();
				}
			}

			State = 408; Match(TCloseParen);
			State = 409; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaCompilerParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaCompilerParser.TComma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParameterList() : _DoParseParameterList();
	}

	internal ParameterListContext _DoParseParameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 96, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; parameter();
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 412; Match(TComma);
				State = 413; parameter();
				}
				}
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParameter() : _DoParseParameter();
	}

	internal ParameterContext _DoParseParameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 98, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 419; attribute();
				}
				}
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 425; typeReference();
			State = 426; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaCompilerParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(MetaCompilerParser.IdentifierVerbatim, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIdentifier() : _DoParseIdentifier();
	}

	internal IdentifierContext _DoParseIdentifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 100, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			_la = TokenStream.LA(1);
			if ( !(_la==IdentifierNormal || _la==IdentifierVerbatim) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLiteral() : _DoParseLiteral();
	}

	internal LiteralContext _DoParseLiteral() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_literal);
		try {
			State = 436;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431; booleanLiteral();
				}
				break;
			case LInteger:
				EnterOuterAlt(_localctx, 3);
				{
				State = 432; integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 433; decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 5);
				{
				State = 434; scientificLiteral();
				}
				break;
			case LRegularString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 435; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaCompilerParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNullLiteral() : _DoParseNullLiteral();
	}

	internal NullLiteralContext _DoParseNullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 104, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaCompilerParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaCompilerParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseBooleanLiteral() : _DoParseBooleanLiteral();
	}

	internal BooleanLiteralContext _DoParseBooleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 106, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			_la = TokenStream.LA(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode LInteger() { return GetToken(MetaCompilerParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIntegerLiteral() : _DoParseIntegerLiteral();
	}

	internal IntegerLiteralContext _DoParseIntegerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 108, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode LDecimal() { return GetToken(MetaCompilerParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDecimalLiteral() : _DoParseDecimalLiteral();
	}

	internal DecimalLiteralContext _DoParseDecimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 110, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode LScientific() { return GetToken(MetaCompilerParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseScientificLiteral() : _DoParseScientificLiteral();
	}

	internal ScientificLiteralContext _DoParseScientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 112, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode LRegularString() { return GetToken(MetaCompilerParser.LRegularString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCompilerParserVisitor<TResult> typedVisitor = visitor as IMetaCompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseStringLiteral() : _DoParseStringLiteral();
	}

	internal StringLiteralContext _DoParseStringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 114, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(LRegularString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'k', '\x1C5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x81', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x84', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\a', '\a', '\x8B', '\n', '\a', 
		'\f', '\a', '\xE', '\a', '\x8E', '\v', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x96', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\x99', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\xA2', '\n', '\t', '\x3', '\n', '\a', '\n', '\xA5', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\xA8', '\v', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\a', '\v', '\xAF', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\xB2', '\v', '\v', '\x3', '\v', 
		'\x5', '\v', '\xB5', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\xBA', '\n', '\v', '\x3', '\v', '\x5', '\v', '\xBD', '\n', 
		'\v', '\x3', '\v', '\x5', '\v', '\xC0', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xCD', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xD0', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xD6', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\xD9', '\v', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\a', '\x11', '\xDE', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\xE1', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\xEB', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\xEE', '\v', '\x12', '\x5', '\x12', '\xF0', '\n', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', 
		'\xF7', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xFA', '\v', '\x13', 
		'\x3', '\x14', '\a', '\x14', '\xFD', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\x100', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\a', '\x16', '\x107', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '\x10A', '\v', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x10D', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x113', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\a', '\x18', '\x11C', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x11F', 
		'\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\a', '\x1A', '\x125', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x128', 
		'\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x12E', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\a', '\x1D', '\x133', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', 
		'\x136', '\v', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x139', '\n', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x13C', '\n', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x141', '\n', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x144', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\a', '\"', '\x155', '\n', '\"', '\f', '\"', '\xE', 
		'\"', '\x158', '\v', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', 
		'%', '\x5', '%', '\x164', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x16B', '\n', '\'', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x171', '\n', '(', '\x3', 
		')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', 
		',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', 
		'\x18A', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x18D', '\v', '\x30', 
		'\x3', '\x31', '\a', '\x31', '\x190', '\n', '\x31', '\f', '\x31', '\xE', 
		'\x31', '\x193', '\v', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x5', '\x31', '\x199', '\n', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\a', 
		'\x32', '\x1A1', '\n', '\x32', '\f', '\x32', '\xE', '\x32', '\x1A4', '\v', 
		'\x32', '\x3', '\x33', '\a', '\x33', '\x1A7', '\n', '\x33', '\f', '\x33', 
		'\xE', '\x33', '\x1AA', '\v', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x1B7', 
		'\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', 
		'\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x2', '\x2', '<', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', 
		'\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', '\x2', '\b', 
		'\x4', '\x2', '\x6', '\a', '\v', '\v', '\x3', '\x2', '\"', '$', '\x3', 
		'\x2', '\x14', '\x15', '\x3', '\x2', '\x16', '\x1B', '\x3', '\x2', 'V', 
		'W', '\x3', '\x2', '\x11', '\x12', '\x2', '\x1BA', '\x2', 'v', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 'y', '\x3', '\x2', '\x2', '\x2', '\x6', '{', 
		'\x3', '\x2', '\x2', '\x2', '\b', '}', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\f', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x93', '\x3', '\x2', '\x2', '\x2', '\x10', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\x16', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', ' ', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xE6', '\x3', '\x2', '\x2', '\x2', '$', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xFE', '\x3', '\x2', '\x2', '\x2', '(', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x108', '\x3', '\x2', '\x2', '\x2', ',', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x120', '\x3', '\x2', '\x2', '\x2', '\x32', '\x122', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x36', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x134', '\x3', '\x2', '\x2', '\x2', 
		':', '\x147', '\x3', '\x2', '\x2', '\x2', '<', '\x149', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x14B', '\x3', '\x2', '\x2', '\x2', '@', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x159', '\x3', '\x2', '\x2', '\x2', '\x46', '\x15E', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x163', '\x3', '\x2', '\x2', '\x2', 'J', '\x165', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x170', '\x3', '\x2', '\x2', '\x2', 'P', '\x172', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x174', '\x3', '\x2', '\x2', '\x2', 'T', '\x176', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x17A', '\x3', '\x2', '\x2', '\x2', 'Z', '\x17D', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x181', '\x3', '\x2', '\x2', '\x2', '^', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x64', '\x1A8', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x1AE', '\x3', '\x2', '\x2', '\x2', 'h', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x1BA', '\x3', '\x2', '\x2', '\x2', 'n', '\x1BC', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x1BE', '\x3', '\x2', '\x2', '\x2', 'r', '\x1C0', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x1C2', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\x5', '\f', '\a', '\x2', 'w', 'x', '\a', '\x2', '\x2', '\x3', 
		'x', '\x3', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x5', '\x66', '\x34', 
		'\x2', 'z', '\x5', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x5', '\b', 
		'\x5', '\x2', '|', '\a', '\x3', '\x2', '\x2', '\x2', '}', '\x82', '\x5', 
		'\x66', '\x34', '\x2', '~', '\x7F', '\a', '-', '\x2', '\x2', '\x7F', '\x81', 
		'\x5', '\x66', '\x34', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x84', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x86', '\a', '\x32', '\x2', '\x2', '\x86', '\x87', '\x5', '\b', 
		'\x5', '\x2', '\x87', '\x88', '\a', '\x33', '\x2', '\x2', '\x88', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8B', '\x5', '\n', '\x6', '\x2', 
		'\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '\x3', 
		'\x2', '\x2', '\x90', '\x91', '\x5', '\x6', '\x4', '\x2', '\x91', '\x92', 
		'\x5', '\xE', '\b', '\x2', '\x92', '\r', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x97', '\a', '\x34', '\x2', '\x2', '\x94', '\x96', '\x5', '\x10', '\t', 
		'\x2', '\x95', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		'\x35', '\x2', '\x2', '\x9B', '\xF', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\xA2', '\x5', '\x12', '\n', '\x2', '\x9D', '\xA2', '\x5', '\x14', '\v', 
		'\x2', '\x9E', '\xA2', '\x5', ' ', '\x11', '\x2', '\x9F', '\xA2', '\x5', 
		'*', '\x16', '\x2', '\xA0', '\xA2', '\x5', '\x44', '#', '\x2', '\xA1', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA5', '\x5', '\n', '\x6', 
		'\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', 
		'\x5', '\x2', '\x2', '\xAA', '\xAB', '\x5', '\x4', '\x3', '\x2', '\xAB', 
		'\xAC', '\a', '+', '\x2', '\x2', '\xAC', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAF', '\x5', '\n', '\x6', '\x2', '\xAE', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB5', '\x5', '\x16', '\f', '\x2', '\xB4', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', 
		'&', '\x2', '\x2', '\xB7', '\xB9', '\x5', '\x4', '\x3', '\x2', '\xB8', 
		'\xBA', '\x5', '\x18', '\r', '\x2', '\xB9', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBD', '\x5', '\x1A', '\xE', '\x2', '\xBC', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC0', '\x5', 
		'\x1C', '\xF', '\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\a', '+', '\x2', '\x2', '\xC2', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '%', '\x2', '\x2', '\xC4', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\'', '\x2', 
		'\x2', '\xC6', '\xC7', '\x5', '\x1E', '\x10', '\x2', '\xC7', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC9', '\a', '(', '\x2', '\x2', '\xC9', 
		'\xCE', '\x5', '\x1E', '\x10', '\x2', '\xCA', '\xCB', '\a', '.', '\x2', 
		'\x2', '\xCB', '\xCD', '\x5', '\x1E', '\x10', '\x2', '\xCC', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', ')', '\x2', '\x2', '\xD2', 
		'\xD7', '\x5', '\x1E', '\x10', '\x2', '\xD3', '\xD4', '\a', '.', '\x2', 
		'\x2', '\xD4', '\xD6', '\x5', '\x1E', '\x10', '\x2', '\xD5', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x5', '\b', '\x5', '\x2', '\xDB', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\x5', '\n', '\x6', 
		'\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', 
		'\r', '\x2', '\x2', '\xE3', '\xE4', '\x5', '\x4', '\x3', '\x2', '\xE4', 
		'\xE5', '\x5', '\"', '\x12', '\x2', '\xE5', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE7', '\a', '\x34', '\x2', '\x2', '\xE7', '\xEF', '\x5', 
		'$', '\x13', '\x2', '\xE8', '\xEC', '\a', '+', '\x2', '\x2', '\xE9', '\xEB', 
		'\x5', '(', '\x15', '\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', 
		'\a', '\x35', '\x2', '\x2', '\xF2', '#', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF8', '\x5', '&', '\x14', '\x2', '\xF4', '\xF5', '\a', '.', '\x2', '\x2', 
		'\xF5', '\xF7', '\x5', '&', '\x14', '\x2', '\xF6', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '%', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xFD', '\x5', '\n', '\x6', '\x2', '\xFC', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\x101', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x5', '\x4', '\x3', '\x2', 
		'\x102', '\'', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x5', '`', 
		'\x31', '\x2', '\x104', ')', '\x3', '\x2', '\x2', '\x2', '\x105', '\x107', 
		'\x5', '\n', '\x6', '\x2', '\x106', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x108', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x10D', '\x5', ',', '\x17', '\x2', '\x10C', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x5', 
		'\x36', '\x1C', '\x2', '\x10F', '\x112', '\x5', '\x4', '\x3', '\x2', '\x110', 
		'\x111', '\a', ',', '\x2', '\x2', '\x111', '\x113', '\x5', '.', '\x18', 
		'\x2', '\x112', '\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\x5', '\x32', '\x1A', '\x2', '\x115', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x116', '\x117', '\a', '\n', '\x2', '\x2', '\x117', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x11D', '\x5', '\x30', '\x19', '\x2', 
		'\x119', '\x11A', '\a', '.', '\x2', '\x2', '\x11A', '\x11C', '\x5', '\x30', 
		'\x19', '\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x121', '\x5', '\b', '\x5', '\x2', '\x121', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x122', '\x126', '\a', '\x34', '\x2', '\x2', '\x123', '\x125', 
		'\x5', '\x34', '\x1B', '\x2', '\x124', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x128', '\x3', '\x2', '\x2', '\x2', '\x126', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x128', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x129', '\x12A', '\a', '\x35', '\x2', '\x2', '\x12A', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12E', '\x5', '\x38', '\x1D', '\x2', 
		'\x12C', '\x12E', '\x5', '`', '\x31', '\x2', '\x12D', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\t', '\x2', '\x2', 
		'\x2', '\x130', '\x37', '\x3', '\x2', '\x2', '\x2', '\x131', '\x133', 
		'\x5', '\n', '\x6', '\x2', '\x132', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x136', '\x3', '\x2', '\x2', '\x2', '\x134', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x138', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x139', '\x5', ':', '\x1E', '\x2', '\x138', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13C', '\x5', 
		'<', '\x1F', '\x2', '\x13B', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x13E', '\x5', 'L', '\'', '\x2', '\x13E', '\x140', '\x5', 
		'\x4', '\x3', '\x2', '\x13F', '\x141', '\x5', '>', ' ', '\x2', '\x140', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x143', '\x3', '\x2', '\x2', '\x2', '\x142', '\x144', 
		'\x5', '@', '!', '\x2', '\x143', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x144', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x146', '\a', '+', '\x2', '\x2', '\x146', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\a', '\xE', '\x2', 
		'\x2', '\x148', ';', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\t', 
		'\x3', '\x2', '\x2', '\x14A', '=', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14C', '\a', '/', '\x2', '\x2', '\x14C', '\x14D', '\x5', 't', ';', '\x2', 
		'\x14D', '?', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\a', '&', 
		'\x2', '\x2', '\x14F', '\x150', '\x5', '\b', '\x5', '\x2', '\x150', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x156', '\x5', '\b', '\x5', '\x2', 
		'\x152', '\x153', '\a', '.', '\x2', '\x2', '\x153', '\x155', '\x5', '\b', 
		'\x5', '\x2', '\x154', '\x152', '\x3', '\x2', '\x2', '\x2', '\x155', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x156', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x15A', '\a', '\t', '\x2', '\x2', '\x15A', '\x15B', '\x5', '\x4', '\x3', 
		'\x2', '\x15B', '\x15C', '\x5', '\x46', '$', '\x2', '\x15C', '\x15D', 
		'\a', '+', '\x2', '\x2', '\x15D', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x15E', '\x15F', '\a', '/', '\x2', '\x2', '\x15F', '\x160', '\x5', 't', 
		';', '\x2', '\x160', 'G', '\x3', '\x2', '\x2', '\x2', '\x161', '\x164', 
		'\x5', 'L', '\'', '\x2', '\x162', '\x164', '\x5', 'V', ',', '\x2', '\x163', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x163', '\x162', '\x3', '\x2', '\x2', 
		'\x2', '\x164', 'I', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x5', 
		'L', '\'', '\x2', '\x166', 'K', '\x3', '\x2', '\x2', '\x2', '\x167', '\x16B', 
		'\x5', '\\', '/', '\x2', '\x168', '\x16B', '\x5', 'Z', '.', '\x2', '\x169', 
		'\x16B', '\x5', 'N', '(', '\x2', '\x16A', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x169', 
		'\x3', '\x2', '\x2', '\x2', '\x16B', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x171', '\x5', 'T', '+', '\x2', '\x16D', '\x171', '\x5', 'R', 
		'*', '\x2', '\x16E', '\x171', '\x5', 'X', '-', '\x2', '\x16F', '\x171', 
		'\x5', 'P', ')', '\x2', '\x170', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x5', '\b', '\x5', 
		'\x2', '\x173', 'Q', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\t', 
		'\x4', '\x2', '\x2', '\x175', 'S', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x177', '\t', '\x5', '\x2', '\x2', '\x177', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '\x179', '\a', '\x13', '\x2', '\x2', '\x179', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x17B', '\x5', 'T', '+', '\x2', '\x17B', 
		'\x17C', '\a', '\x38', '\x2', '\x2', '\x17C', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x17E', '\x5', 'N', '(', '\x2', '\x17E', '\x17F', '\a', 
		'\x32', '\x2', '\x2', '\x17F', '\x180', '\a', '\x33', '\x2', '\x2', '\x180', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\x5', 'P', ')', '\x2', 
		'\x182', '\x183', '\a', '\x36', '\x2', '\x2', '\x183', '\x184', '\x5', 
		'^', '\x30', '\x2', '\x184', '\x185', '\a', '\x37', '\x2', '\x2', '\x185', 
		']', '\x3', '\x2', '\x2', '\x2', '\x186', '\x18B', '\x5', 'L', '\'', '\x2', 
		'\x187', '\x188', '\a', '.', '\x2', '\x2', '\x188', '\x18A', '\x5', 'L', 
		'\'', '\x2', '\x189', '\x187', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18C', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x190', 
		'\x5', '\n', '\x6', '\x2', '\x18F', '\x18E', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\x193', '\x3', '\x2', '\x2', '\x2', '\x191', '\x18F', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x192', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x193', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\x194', '\x195', '\x5', 'H', '%', '\x2', '\x195', '\x196', '\x5', 
		'\x4', '\x3', '\x2', '\x196', '\x198', '\a', '\x30', '\x2', '\x2', '\x197', 
		'\x199', '\x5', '\x62', '\x32', '\x2', '\x198', '\x197', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x199', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\a', '\x31', '\x2', '\x2', 
		'\x19B', '\x19C', '\a', '+', '\x2', '\x2', '\x19C', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x19D', '\x1A2', '\x5', '\x64', '\x33', '\x2', '\x19E', 
		'\x19F', '\a', '.', '\x2', '\x2', '\x19F', '\x1A1', '\x5', '\x64', '\x33', 
		'\x2', '\x1A0', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A0', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A7', '\x5', '\n', '\x6', '\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1A8', '\x3', 
		'\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\x5', 'L', '\'', '\x2', '\x1AC', 
		'\x1AD', '\x5', '\x4', '\x3', '\x2', '\x1AD', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x1AF', '\t', '\x6', '\x2', '\x2', '\x1AF', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '\x1B7', '\x5', 'j', '\x36', '\x2', '\x1B1', 
		'\x1B7', '\x5', 'l', '\x37', '\x2', '\x1B2', '\x1B7', '\x5', 'n', '\x38', 
		'\x2', '\x1B3', '\x1B7', '\x5', 'p', '\x39', '\x2', '\x1B4', '\x1B7', 
		'\x5', 'r', ':', '\x2', '\x1B5', '\x1B7', '\x5', 't', ';', '\x2', '\x1B6', 
		'\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B1', '\x3', '\x2', '\x2', 
		'\x2', '\x1B6', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B4', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B7', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8', '\x1B9', '\a', '\x10', '\x2', '\x2', '\x1B9', 'k', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\t', '\a', '\x2', '\x2', 
		'\x1BB', 'm', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\a', 'X', 
		'\x2', '\x2', '\x1BD', 'o', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', 
		'\a', 'Y', '\x2', '\x2', '\x1BF', 'q', '\x3', '\x2', '\x2', '\x2', '\x1C0', 
		'\x1C1', '\a', 'Z', '\x2', '\x2', '\x1C1', 's', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1C3', '\a', '_', '\x2', '\x2', '\x1C3', 'u', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x82', '\x8C', '\x97', '\xA1', '\xA6', '\xB0', '\xB4', 
		'\xB9', '\xBC', '\xBF', '\xCE', '\xD7', '\xDF', '\xEC', '\xEF', '\xF8', 
		'\xFE', '\x108', '\x10C', '\x112', '\x11D', '\x126', '\x12D', '\x134', 
		'\x138', '\x13B', '\x140', '\x143', '\x156', '\x163', '\x16A', '\x170', 
		'\x18B', '\x191', '\x198', '\x1A2', '\x1A8', '\x1B6',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaCompiler.Syntax.InternalSyntax
