parser grammar MetaCompilerParser;

@header 
{
using MetaDslx.Languages.MetaCompiler.Model;
}

options
{
    tokenVocab = MetaCompilerLexer; 
	generateCompiler=true;
}

main: namespaceDeclaration EOF;

$Name
name : identifier;

$Name
qualifiedName : qualifier;

$Qualifier
qualifier : identifier (TDot identifier)*;

$Property(Annotations)
$SymbolUse(Annotation)
attribute : TOpenBracket qualifier TCloseBracket;

$SymbolDef(type=Namespace,nestingProperty=Declarations,merge=true)
namespaceDeclaration: attribute* KNamespace qualifiedName namespaceBody;

$Scope
namespaceBody : TOpenBrace declaration* TCloseBrace;

$Property(Declarations) 
declaration : compilerDeclaration | phaseDeclaration | enumDeclaration | classDeclaration | typedefDeclaration;

$SymbolDef(EnumType)
compilerDeclaration : attribute* KCompiler name TSemicolon;

$SymbolDef(Phase)
phaseDeclaration : attribute* $Property(name=IsLocked,value=true) KLocked? KPhase name phaseJoin? afterPhases? beforePhases? TSemicolon;
$Property(JoinsPhase)
phaseJoin: KJoins phaseRef;
$Property(AfterPhases)
afterPhases: KAfter phaseRef (TComma phaseRef)*;
$Property(BeforePhases)
beforePhases: KBefore phaseRef (TComma phaseRef)*;
phaseRef: $SymbolUse(Phase) qualifier;

$SymbolDef(EnumType)
enumDeclaration : attribute* KEnum name enumBody;
$Scope
enumBody : TOpenBrace $Property(EnumLiterals) enumValues (TSemicolon enumMemberDeclaration*)? TCloseBrace;
enumValues : enumValue (TComma enumValue)*;
$SymbolDef(EnumLiteral)
enumValue : attribute* name;
enumMemberDeclaration : $Property(Operations) operationDeclaration;

$SymbolDef(Class)
classDeclaration : attribute* $Property(name=IsAbstract,value=true) KAbstract? classKind name (TColon $Property(SuperClasses) classAncestors)? classBody;
classAncestors : classAncestor (TComma classAncestor)*;
classAncestor : $SymbolUse(type=Class) qualifier;
$Scope
classBody : TOpenBrace classMemberDeclaration* TCloseBrace;
classMemberDeclaration 
	: $Property(Properties) fieldDeclaration 
	| $Property(Operations) operationDeclaration
	;
$Property(Kind)
classKind
	: $Value(ClassKind.Class) KClass 
	| $Value(ClassKind.Symbol) KSymbol
	| $Value(ClassKind.Binder) KBinder
	;

$SymbolDef(Property)
fieldDeclaration : attribute* fieldContainment? fieldModifier? $Property(Type) typeReference name defaultValue? phase? TSemicolon;
$Property(name=IsContainment,value=true)
fieldContainment : KContainment;
$Property(Kind)
fieldModifier 
	: $Value(PropertyKind.Readonly) KReadonly 
	| $Value(PropertyKind.Lazy) KLazy 
	| $Value(PropertyKind.Derived) KDerived
	;
$Property(DefaultValue)
defaultValue : TAssign $Value stringLiteral;
$Property(Phase)
phase: KPhase $SymbolUse(Phase) qualifier;

$SymbolUse(Property)
nameUseList : qualifier (TComma qualifier)*;

$SymbolDef(TypeDefType)
typedefDeclaration : KTypeDef name typedefValue TSemicolon;
$Property(DotNetName)
typedefValue : TAssign $Value stringLiteral;

$SymbolUse(DataType)
returnType : typeReference | voidType;
$SymbolUse(DataType)
typeOfReference : typeReference;
$SymbolUse(DataType)
typeReference : genericType | simpleType;
$SymbolUse(DataType)
simpleType : primitiveType | objectType | nullableType | classType;

$SymbolUse(types=(Class,EnumType,TypeDefType))
classType : qualifier;

$Identifier
objectType 
	: KObject 
	| KString
	;

$Identifier
primitiveType 
	: KInt 
	| KLong 
	| KFloat 
	| KDouble 
	| KByte 
	| KBool
	;

$Identifier
voidType 
	: KVoid
	;

$SymbolDef(NullableType)
nullableType : $Property(InnerType) primitiveType TQuestion;

$SymbolDef(GenericType)
genericType : $Property(Type) genericTypeName TLessThan $Property(TypeArguments) typeArguments TGreaterThan;
genericTypeName : $SymbolUse(Class) qualifier;
typeArguments : typeArgument (TComma typeArgument)*;
typeArgument : $SymbolUse(Class) qualifier;
	
$SymbolDef(Operation)
operationDeclaration : attribute* $Property(ReturnType) returnType name TOpenParen $Property(Parameters) parameterList? TCloseParen TSemicolon;

parameterList : parameter (TComma parameter)*;

$SymbolDef(Parameter)
parameter : attribute* $Property(Type) typeReference name;

// Additional rules for lexer:

// Identifiers
$Identifier
identifier 
	: IdentifierNormal 
	| IdentifierVerbatim
	;

// Literals
literal 
    : nullLiteral
	| booleanLiteral
	| integerLiteral
	| decimalLiteral
	| scientificLiteral
    | stringLiteral
	;

// Null literal
$Value
nullLiteral : KNull;

// Boolean literals
$Value
booleanLiteral : KTrue | KFalse;

// Number literals
$Value
integerLiteral : LInteger;
$Value
decimalLiteral : LDecimal;
$Value
scientificLiteral : LScientific;

// String literals
$Value
stringLiteral : LRegularString;
