// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// WARNING: This is an auto-generated file. Any manual changes will be lost when the file is regenerated.
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Diagnostics;

namespace MetaDslx.Languages.Core.Model
{
	using global::MetaDslx.Languages.Core.Model.Internal;

	public class CoreInstance
	{
		private static bool initialized;
	
		public static bool IsInitialized
		{
			get { return CoreInstance.initialized; }
		}
	
		public static readonly global::MetaDslx.Modeling.ModelMetadata MMetadata;
		public static readonly global::MetaDslx.Modeling.ImmutableModel MModel;
	
		public static readonly PrimitiveType Object;
		public static readonly PrimitiveType Void;
		public static readonly PrimitiveType Boolean;
		public static readonly PrimitiveType Char;
		public static readonly PrimitiveType SByte;
		public static readonly PrimitiveType Byte;
		public static readonly PrimitiveType Int16;
		public static readonly PrimitiveType UInt16;
		public static readonly PrimitiveType Int32;
		public static readonly PrimitiveType UInt32;
		public static readonly PrimitiveType Int64;
		public static readonly PrimitiveType UInt64;
		public static readonly PrimitiveType Decimal;
		public static readonly PrimitiveType Single;
		public static readonly PrimitiveType Double;
		public static readonly PrimitiveType String;
		public static readonly PrimitiveType SystemType;
		public static readonly PrimitiveType SystemEnum;
	
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Element;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Element_Attributes;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Attribute;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Attribute_Type;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass NamedElement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty NamedElement_Name;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass TypedElement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty TypedElement_Type;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass DataType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty DataType_ResolvedType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Declaration;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Declaration_TypeParameters;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Declaration_Members;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass TypedDeclaration;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Namespace;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Alias;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Alias_Target;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass NamedType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty NamedType_DotNetName;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty NamedType_IsAbstract;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty NamedType_IsSealed;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty NamedType_TypeArguments;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty NamedType_BaseTypes;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass PrimitiveType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ClassifierType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass InterfaceType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ClassType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass StructType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass EnumType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty EnumType_Literals;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass EnumLiteral;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty EnumLiteral_Type;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass DelegateType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty DelegateType_ReturnType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty DelegateType_Parameters;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ArrayType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ArrayType_LowerBound;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ArrayType_Size;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ArrayType_ElementType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass CollectionType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty CollectionType_IsUnique;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty CollectionType_IsUnordered;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty CollectionType_ItemType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass DictionaryType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty DictionaryType_IsUnordered;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty DictionaryType_KeyType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty DictionaryType_ValueType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass NullableType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty NullableType_InnerType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass TupleType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass TypeParameter;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass GenericTypeReference;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty GenericTypeReference_ReferencedType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty GenericTypeReference_TypeArguments;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty GenericTypeReference_ConstructedType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty GenericTypeReference_ResolvedType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Member;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Member_IsStatic;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Member_IsVirtual;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Member_IsOverride;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Member_IsAbstract;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Member_IsSealed;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass FieldLikeMember;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty FieldLikeMember_Type;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Field;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Property;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Property_GetMethod;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Property_SetMethod;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Indexer;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Indexer_Parameters;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass MethodLikeMember;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty MethodLikeMember_IsAsync;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty MethodLikeMember_ReturnType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty MethodLikeMember_Parameters;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty MethodLikeMember_Body;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Method;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Parameter;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Parameter_IsVarArg;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Constructor;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Constructor_NextConstructorInvocation;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Destructor;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Lambda;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Operator;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ConversionOperator;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass UnaryOperator;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty UnaryOperator_OperatorKind;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass BinaryOperator;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty BinaryOperator_OperatorKind;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Statement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Local;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Variable;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Variable_IsConst;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Variable_Type;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Variable_DefaultValue;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Label;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass BlockStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty BlockStatement_Statements;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass EmptyStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ExpressionStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ExpressionStatement_Expression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ForEachLoopStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ForEachLoopStatement_LoopControlVariable;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ForEachLoopStatement_Collection;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ForLoopStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ForLoopStatement_Before;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ForLoopStatement_Condition;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ForLoopStatement_AtLoopBottom;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ForToLoopStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ForToLoopStatement_LoopControlVariable;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ForToLoopStatement_InitialValue;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ForToLoopStatement_LimitValue;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ForToLoopStatement_StepValue;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass IfStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IfStatement_Condition;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IfStatement_IfTrue;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IfStatement_IfFalse;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass JumpStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty JumpStatement_JumpKind;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty JumpStatement_Target;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass LabeledStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty LabeledStatement_Label;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty LabeledStatement_Statement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass LockStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty LockStatement_LockedValue;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty LockStatement_Body;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass LoopStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty LoopStatement_Body;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ReturnStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ReturnStatement_ReturnedValue;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass SwitchStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty SwitchStatement_Value;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty SwitchStatement_Cases;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass SwitchCase;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty SwitchCase_Clauses;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty SwitchCase_Body;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass CaseClause;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty CaseClause_Label;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass DefaultValueCaseClause;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass SingleValueCaseClause;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty SingleValueCaseClause_Value;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass TryStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty TryStatement_Body;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty TryStatement_Catches;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty TryStatement_Finally;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty TryStatement_ExitLabel;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass CatchClause;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty CatchClause_ExceptionDeclarationOrExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty CatchClause_Filter;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty CatchClause_Handler;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass UsingStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty UsingStatement_Resources;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty UsingStatement_Body;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass WhileLoopStatement;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty WhileLoopStatement_Condition;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty WhileLoopStatement_ConditionIsTop;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty WhileLoopStatement_ConditionIsUntil;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Expression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Expression_Type;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass Argument;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty Argument_Value;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass AssignmentExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty AssignmentExpression_Target;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty AssignmentExpression_Value;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass AwaitExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty AwaitExpression_Operation;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass BinaryExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty BinaryExpression_OperatorKind;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty BinaryExpression_LeftOperand;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty BinaryExpression_RightOperand;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty BinaryExpression_IsChecked;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty BinaryExpression_OperatorMethod;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass CoalesceExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty CoalesceExpression_Value;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty CoalesceExpression_WhenNull;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass CompoundAssignmentExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty CompoundAssignmentExpression_OperatorKind;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty CompoundAssignmentExpression_IsChecked;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ConditionalExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ConditionalExpression_Condition;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ConditionalExpression_WhenTrue;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ConditionalExpression_WhenFalse;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ConversionExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ConversionExpression_Operand;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ConversionExpression_TargetType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ConversionExpression_IsTryCast;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ConversionExpression_IsChecked;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass DefaultValueExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass DiscardExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass DynamicExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass IncrementOrDecrementExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IncrementOrDecrementExpression_Target;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IncrementOrDecrementExpression_IsPostfix;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IncrementOrDecrementExpression_IsChecked;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass IndexerAccessExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IndexerAccessExpression_Receiver;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IndexerAccessExpression_IsNullConditional;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IndexerAccessExpression_Arguments;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IndexerAccessExpression_Target;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass InstanceReferenceExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty InstanceReferenceExpression_AccessThroughBaseType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass InvocationExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty InvocationExpression_Receiver;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty InvocationExpression_Arguments;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass IsTypeExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IsTypeExpression_ValueOperand;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IsTypeExpression_TypeOperand;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty IsTypeExpression_IsNegated;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass LambdaExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty LambdaExpression_ReturnType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty LambdaExpression_Parameters;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty LambdaExpression_Body;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass LiteralExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty LiteralExpression_Value;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty LiteralExpression_Type;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass NameOfExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty NameOfExpression_Argument;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ObjectCreationExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ObjectCreationExpression_ObjectType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ObjectCreationExpression_Arguments;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ObjectCreationExpression_Initializers;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ParenthesizedExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ParenthesizedExpression_Operand;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ReferenceExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ReferenceExpression_Qualifier;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ReferenceExpression_IsNullConditional;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ReferenceExpression_TypeArguments;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ReferenceExpression_IsDeclaration;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ReferenceExpression_ReferenceThroughType;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ReferenceExpression_ReferencedSymbol;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass SizeOfExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty SizeOfExpression_TypeOperand;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass TypeOfExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty TypeOfExpression_TypeOperand;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass ThrowExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty ThrowExpression_Exception;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass TupleExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty TupleExpression_Arguments;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass UnaryExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty UnaryExpression_OperatorKind;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty UnaryExpression_Operand;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty UnaryExpression_IsChecked;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty UnaryExpression_OperatorMethod;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass VariableDeclarationExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty VariableDeclarationExpression_Symbol;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty VariableDeclarationExpression_Initializer;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaClass VariableDeclarationGroupExpression;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty VariableDeclarationGroupExpression_Declarations;
		public static readonly global::MetaDslx.Languages.Meta.Model.MetaProperty VariableDeclarationGroupExpression_Initializer;
	
		static CoreInstance()
		{
			CoreBuilderInstance.instance.Create();
			CoreBuilderInstance.instance.EvaluateLazyValues();
			MModel = CoreBuilderInstance.instance.MModel.ToImmutable();
			MMetadata = MModel.Metadata;
	
			Object = CoreBuilderInstance.instance.Object.ToImmutable(MModel);
			Void = CoreBuilderInstance.instance.Void.ToImmutable(MModel);
			Boolean = CoreBuilderInstance.instance.Boolean.ToImmutable(MModel);
			Char = CoreBuilderInstance.instance.Char.ToImmutable(MModel);
			SByte = CoreBuilderInstance.instance.SByte.ToImmutable(MModel);
			Byte = CoreBuilderInstance.instance.Byte.ToImmutable(MModel);
			Int16 = CoreBuilderInstance.instance.Int16.ToImmutable(MModel);
			UInt16 = CoreBuilderInstance.instance.UInt16.ToImmutable(MModel);
			Int32 = CoreBuilderInstance.instance.Int32.ToImmutable(MModel);
			UInt32 = CoreBuilderInstance.instance.UInt32.ToImmutable(MModel);
			Int64 = CoreBuilderInstance.instance.Int64.ToImmutable(MModel);
			UInt64 = CoreBuilderInstance.instance.UInt64.ToImmutable(MModel);
			Decimal = CoreBuilderInstance.instance.Decimal.ToImmutable(MModel);
			Single = CoreBuilderInstance.instance.Single.ToImmutable(MModel);
			Double = CoreBuilderInstance.instance.Double.ToImmutable(MModel);
			String = CoreBuilderInstance.instance.String.ToImmutable(MModel);
			SystemType = CoreBuilderInstance.instance.SystemType.ToImmutable(MModel);
			SystemEnum = CoreBuilderInstance.instance.SystemEnum.ToImmutable(MModel);
	
			Element = CoreBuilderInstance.instance.Element.ToImmutable(MModel);
			Element_Attributes = CoreBuilderInstance.instance.Element_Attributes.ToImmutable(MModel);
			Attribute = CoreBuilderInstance.instance.Attribute.ToImmutable(MModel);
			Attribute_Type = CoreBuilderInstance.instance.Attribute_Type.ToImmutable(MModel);
			NamedElement = CoreBuilderInstance.instance.NamedElement.ToImmutable(MModel);
			NamedElement_Name = CoreBuilderInstance.instance.NamedElement_Name.ToImmutable(MModel);
			TypedElement = CoreBuilderInstance.instance.TypedElement.ToImmutable(MModel);
			TypedElement_Type = CoreBuilderInstance.instance.TypedElement_Type.ToImmutable(MModel);
			DataType = CoreBuilderInstance.instance.DataType.ToImmutable(MModel);
			DataType_ResolvedType = CoreBuilderInstance.instance.DataType_ResolvedType.ToImmutable(MModel);
			Declaration = CoreBuilderInstance.instance.Declaration.ToImmutable(MModel);
			Declaration_TypeParameters = CoreBuilderInstance.instance.Declaration_TypeParameters.ToImmutable(MModel);
			Declaration_Members = CoreBuilderInstance.instance.Declaration_Members.ToImmutable(MModel);
			TypedDeclaration = CoreBuilderInstance.instance.TypedDeclaration.ToImmutable(MModel);
			Namespace = CoreBuilderInstance.instance.Namespace.ToImmutable(MModel);
			Alias = CoreBuilderInstance.instance.Alias.ToImmutable(MModel);
			Alias_Target = CoreBuilderInstance.instance.Alias_Target.ToImmutable(MModel);
			NamedType = CoreBuilderInstance.instance.NamedType.ToImmutable(MModel);
			NamedType_DotNetName = CoreBuilderInstance.instance.NamedType_DotNetName.ToImmutable(MModel);
			NamedType_IsAbstract = CoreBuilderInstance.instance.NamedType_IsAbstract.ToImmutable(MModel);
			NamedType_IsSealed = CoreBuilderInstance.instance.NamedType_IsSealed.ToImmutable(MModel);
			NamedType_TypeArguments = CoreBuilderInstance.instance.NamedType_TypeArguments.ToImmutable(MModel);
			NamedType_BaseTypes = CoreBuilderInstance.instance.NamedType_BaseTypes.ToImmutable(MModel);
			PrimitiveType = CoreBuilderInstance.instance.PrimitiveType.ToImmutable(MModel);
			ClassifierType = CoreBuilderInstance.instance.ClassifierType.ToImmutable(MModel);
			InterfaceType = CoreBuilderInstance.instance.InterfaceType.ToImmutable(MModel);
			ClassType = CoreBuilderInstance.instance.ClassType.ToImmutable(MModel);
			StructType = CoreBuilderInstance.instance.StructType.ToImmutable(MModel);
			EnumType = CoreBuilderInstance.instance.EnumType.ToImmutable(MModel);
			EnumType_Literals = CoreBuilderInstance.instance.EnumType_Literals.ToImmutable(MModel);
			EnumLiteral = CoreBuilderInstance.instance.EnumLiteral.ToImmutable(MModel);
			EnumLiteral_Type = CoreBuilderInstance.instance.EnumLiteral_Type.ToImmutable(MModel);
			DelegateType = CoreBuilderInstance.instance.DelegateType.ToImmutable(MModel);
			DelegateType_ReturnType = CoreBuilderInstance.instance.DelegateType_ReturnType.ToImmutable(MModel);
			DelegateType_Parameters = CoreBuilderInstance.instance.DelegateType_Parameters.ToImmutable(MModel);
			ArrayType = CoreBuilderInstance.instance.ArrayType.ToImmutable(MModel);
			ArrayType_LowerBound = CoreBuilderInstance.instance.ArrayType_LowerBound.ToImmutable(MModel);
			ArrayType_Size = CoreBuilderInstance.instance.ArrayType_Size.ToImmutable(MModel);
			ArrayType_ElementType = CoreBuilderInstance.instance.ArrayType_ElementType.ToImmutable(MModel);
			CollectionType = CoreBuilderInstance.instance.CollectionType.ToImmutable(MModel);
			CollectionType_IsUnique = CoreBuilderInstance.instance.CollectionType_IsUnique.ToImmutable(MModel);
			CollectionType_IsUnordered = CoreBuilderInstance.instance.CollectionType_IsUnordered.ToImmutable(MModel);
			CollectionType_ItemType = CoreBuilderInstance.instance.CollectionType_ItemType.ToImmutable(MModel);
			DictionaryType = CoreBuilderInstance.instance.DictionaryType.ToImmutable(MModel);
			DictionaryType_IsUnordered = CoreBuilderInstance.instance.DictionaryType_IsUnordered.ToImmutable(MModel);
			DictionaryType_KeyType = CoreBuilderInstance.instance.DictionaryType_KeyType.ToImmutable(MModel);
			DictionaryType_ValueType = CoreBuilderInstance.instance.DictionaryType_ValueType.ToImmutable(MModel);
			NullableType = CoreBuilderInstance.instance.NullableType.ToImmutable(MModel);
			NullableType_InnerType = CoreBuilderInstance.instance.NullableType_InnerType.ToImmutable(MModel);
			TupleType = CoreBuilderInstance.instance.TupleType.ToImmutable(MModel);
			TypeParameter = CoreBuilderInstance.instance.TypeParameter.ToImmutable(MModel);
			GenericTypeReference = CoreBuilderInstance.instance.GenericTypeReference.ToImmutable(MModel);
			GenericTypeReference_ReferencedType = CoreBuilderInstance.instance.GenericTypeReference_ReferencedType.ToImmutable(MModel);
			GenericTypeReference_TypeArguments = CoreBuilderInstance.instance.GenericTypeReference_TypeArguments.ToImmutable(MModel);
			GenericTypeReference_ConstructedType = CoreBuilderInstance.instance.GenericTypeReference_ConstructedType.ToImmutable(MModel);
			GenericTypeReference_ResolvedType = CoreBuilderInstance.instance.GenericTypeReference_ResolvedType.ToImmutable(MModel);
			Member = CoreBuilderInstance.instance.Member.ToImmutable(MModel);
			Member_IsStatic = CoreBuilderInstance.instance.Member_IsStatic.ToImmutable(MModel);
			Member_IsVirtual = CoreBuilderInstance.instance.Member_IsVirtual.ToImmutable(MModel);
			Member_IsOverride = CoreBuilderInstance.instance.Member_IsOverride.ToImmutable(MModel);
			Member_IsAbstract = CoreBuilderInstance.instance.Member_IsAbstract.ToImmutable(MModel);
			Member_IsSealed = CoreBuilderInstance.instance.Member_IsSealed.ToImmutable(MModel);
			FieldLikeMember = CoreBuilderInstance.instance.FieldLikeMember.ToImmutable(MModel);
			FieldLikeMember_Type = CoreBuilderInstance.instance.FieldLikeMember_Type.ToImmutable(MModel);
			Field = CoreBuilderInstance.instance.Field.ToImmutable(MModel);
			Property = CoreBuilderInstance.instance.Property.ToImmutable(MModel);
			Property_GetMethod = CoreBuilderInstance.instance.Property_GetMethod.ToImmutable(MModel);
			Property_SetMethod = CoreBuilderInstance.instance.Property_SetMethod.ToImmutable(MModel);
			Indexer = CoreBuilderInstance.instance.Indexer.ToImmutable(MModel);
			Indexer_Parameters = CoreBuilderInstance.instance.Indexer_Parameters.ToImmutable(MModel);
			MethodLikeMember = CoreBuilderInstance.instance.MethodLikeMember.ToImmutable(MModel);
			MethodLikeMember_IsAsync = CoreBuilderInstance.instance.MethodLikeMember_IsAsync.ToImmutable(MModel);
			MethodLikeMember_ReturnType = CoreBuilderInstance.instance.MethodLikeMember_ReturnType.ToImmutable(MModel);
			MethodLikeMember_Parameters = CoreBuilderInstance.instance.MethodLikeMember_Parameters.ToImmutable(MModel);
			MethodLikeMember_Body = CoreBuilderInstance.instance.MethodLikeMember_Body.ToImmutable(MModel);
			Method = CoreBuilderInstance.instance.Method.ToImmutable(MModel);
			Parameter = CoreBuilderInstance.instance.Parameter.ToImmutable(MModel);
			Parameter_IsVarArg = CoreBuilderInstance.instance.Parameter_IsVarArg.ToImmutable(MModel);
			Constructor = CoreBuilderInstance.instance.Constructor.ToImmutable(MModel);
			Constructor_NextConstructorInvocation = CoreBuilderInstance.instance.Constructor_NextConstructorInvocation.ToImmutable(MModel);
			Destructor = CoreBuilderInstance.instance.Destructor.ToImmutable(MModel);
			Lambda = CoreBuilderInstance.instance.Lambda.ToImmutable(MModel);
			Operator = CoreBuilderInstance.instance.Operator.ToImmutable(MModel);
			ConversionOperator = CoreBuilderInstance.instance.ConversionOperator.ToImmutable(MModel);
			UnaryOperator = CoreBuilderInstance.instance.UnaryOperator.ToImmutable(MModel);
			UnaryOperator_OperatorKind = CoreBuilderInstance.instance.UnaryOperator_OperatorKind.ToImmutable(MModel);
			BinaryOperator = CoreBuilderInstance.instance.BinaryOperator.ToImmutable(MModel);
			BinaryOperator_OperatorKind = CoreBuilderInstance.instance.BinaryOperator_OperatorKind.ToImmutable(MModel);
			Statement = CoreBuilderInstance.instance.Statement.ToImmutable(MModel);
			Local = CoreBuilderInstance.instance.Local.ToImmutable(MModel);
			Variable = CoreBuilderInstance.instance.Variable.ToImmutable(MModel);
			Variable_IsConst = CoreBuilderInstance.instance.Variable_IsConst.ToImmutable(MModel);
			Variable_Type = CoreBuilderInstance.instance.Variable_Type.ToImmutable(MModel);
			Variable_DefaultValue = CoreBuilderInstance.instance.Variable_DefaultValue.ToImmutable(MModel);
			Label = CoreBuilderInstance.instance.Label.ToImmutable(MModel);
			BlockStatement = CoreBuilderInstance.instance.BlockStatement.ToImmutable(MModel);
			BlockStatement_Statements = CoreBuilderInstance.instance.BlockStatement_Statements.ToImmutable(MModel);
			EmptyStatement = CoreBuilderInstance.instance.EmptyStatement.ToImmutable(MModel);
			ExpressionStatement = CoreBuilderInstance.instance.ExpressionStatement.ToImmutable(MModel);
			ExpressionStatement_Expression = CoreBuilderInstance.instance.ExpressionStatement_Expression.ToImmutable(MModel);
			ForEachLoopStatement = CoreBuilderInstance.instance.ForEachLoopStatement.ToImmutable(MModel);
			ForEachLoopStatement_LoopControlVariable = CoreBuilderInstance.instance.ForEachLoopStatement_LoopControlVariable.ToImmutable(MModel);
			ForEachLoopStatement_Collection = CoreBuilderInstance.instance.ForEachLoopStatement_Collection.ToImmutable(MModel);
			ForLoopStatement = CoreBuilderInstance.instance.ForLoopStatement.ToImmutable(MModel);
			ForLoopStatement_Before = CoreBuilderInstance.instance.ForLoopStatement_Before.ToImmutable(MModel);
			ForLoopStatement_Condition = CoreBuilderInstance.instance.ForLoopStatement_Condition.ToImmutable(MModel);
			ForLoopStatement_AtLoopBottom = CoreBuilderInstance.instance.ForLoopStatement_AtLoopBottom.ToImmutable(MModel);
			ForToLoopStatement = CoreBuilderInstance.instance.ForToLoopStatement.ToImmutable(MModel);
			ForToLoopStatement_LoopControlVariable = CoreBuilderInstance.instance.ForToLoopStatement_LoopControlVariable.ToImmutable(MModel);
			ForToLoopStatement_InitialValue = CoreBuilderInstance.instance.ForToLoopStatement_InitialValue.ToImmutable(MModel);
			ForToLoopStatement_LimitValue = CoreBuilderInstance.instance.ForToLoopStatement_LimitValue.ToImmutable(MModel);
			ForToLoopStatement_StepValue = CoreBuilderInstance.instance.ForToLoopStatement_StepValue.ToImmutable(MModel);
			IfStatement = CoreBuilderInstance.instance.IfStatement.ToImmutable(MModel);
			IfStatement_Condition = CoreBuilderInstance.instance.IfStatement_Condition.ToImmutable(MModel);
			IfStatement_IfTrue = CoreBuilderInstance.instance.IfStatement_IfTrue.ToImmutable(MModel);
			IfStatement_IfFalse = CoreBuilderInstance.instance.IfStatement_IfFalse.ToImmutable(MModel);
			JumpStatement = CoreBuilderInstance.instance.JumpStatement.ToImmutable(MModel);
			JumpStatement_JumpKind = CoreBuilderInstance.instance.JumpStatement_JumpKind.ToImmutable(MModel);
			JumpStatement_Target = CoreBuilderInstance.instance.JumpStatement_Target.ToImmutable(MModel);
			LabeledStatement = CoreBuilderInstance.instance.LabeledStatement.ToImmutable(MModel);
			LabeledStatement_Label = CoreBuilderInstance.instance.LabeledStatement_Label.ToImmutable(MModel);
			LabeledStatement_Statement = CoreBuilderInstance.instance.LabeledStatement_Statement.ToImmutable(MModel);
			LockStatement = CoreBuilderInstance.instance.LockStatement.ToImmutable(MModel);
			LockStatement_LockedValue = CoreBuilderInstance.instance.LockStatement_LockedValue.ToImmutable(MModel);
			LockStatement_Body = CoreBuilderInstance.instance.LockStatement_Body.ToImmutable(MModel);
			LoopStatement = CoreBuilderInstance.instance.LoopStatement.ToImmutable(MModel);
			LoopStatement_Body = CoreBuilderInstance.instance.LoopStatement_Body.ToImmutable(MModel);
			ReturnStatement = CoreBuilderInstance.instance.ReturnStatement.ToImmutable(MModel);
			ReturnStatement_ReturnedValue = CoreBuilderInstance.instance.ReturnStatement_ReturnedValue.ToImmutable(MModel);
			SwitchStatement = CoreBuilderInstance.instance.SwitchStatement.ToImmutable(MModel);
			SwitchStatement_Value = CoreBuilderInstance.instance.SwitchStatement_Value.ToImmutable(MModel);
			SwitchStatement_Cases = CoreBuilderInstance.instance.SwitchStatement_Cases.ToImmutable(MModel);
			SwitchCase = CoreBuilderInstance.instance.SwitchCase.ToImmutable(MModel);
			SwitchCase_Clauses = CoreBuilderInstance.instance.SwitchCase_Clauses.ToImmutable(MModel);
			SwitchCase_Body = CoreBuilderInstance.instance.SwitchCase_Body.ToImmutable(MModel);
			CaseClause = CoreBuilderInstance.instance.CaseClause.ToImmutable(MModel);
			CaseClause_Label = CoreBuilderInstance.instance.CaseClause_Label.ToImmutable(MModel);
			DefaultValueCaseClause = CoreBuilderInstance.instance.DefaultValueCaseClause.ToImmutable(MModel);
			SingleValueCaseClause = CoreBuilderInstance.instance.SingleValueCaseClause.ToImmutable(MModel);
			SingleValueCaseClause_Value = CoreBuilderInstance.instance.SingleValueCaseClause_Value.ToImmutable(MModel);
			TryStatement = CoreBuilderInstance.instance.TryStatement.ToImmutable(MModel);
			TryStatement_Body = CoreBuilderInstance.instance.TryStatement_Body.ToImmutable(MModel);
			TryStatement_Catches = CoreBuilderInstance.instance.TryStatement_Catches.ToImmutable(MModel);
			TryStatement_Finally = CoreBuilderInstance.instance.TryStatement_Finally.ToImmutable(MModel);
			TryStatement_ExitLabel = CoreBuilderInstance.instance.TryStatement_ExitLabel.ToImmutable(MModel);
			CatchClause = CoreBuilderInstance.instance.CatchClause.ToImmutable(MModel);
			CatchClause_ExceptionDeclarationOrExpression = CoreBuilderInstance.instance.CatchClause_ExceptionDeclarationOrExpression.ToImmutable(MModel);
			CatchClause_Filter = CoreBuilderInstance.instance.CatchClause_Filter.ToImmutable(MModel);
			CatchClause_Handler = CoreBuilderInstance.instance.CatchClause_Handler.ToImmutable(MModel);
			UsingStatement = CoreBuilderInstance.instance.UsingStatement.ToImmutable(MModel);
			UsingStatement_Resources = CoreBuilderInstance.instance.UsingStatement_Resources.ToImmutable(MModel);
			UsingStatement_Body = CoreBuilderInstance.instance.UsingStatement_Body.ToImmutable(MModel);
			WhileLoopStatement = CoreBuilderInstance.instance.WhileLoopStatement.ToImmutable(MModel);
			WhileLoopStatement_Condition = CoreBuilderInstance.instance.WhileLoopStatement_Condition.ToImmutable(MModel);
			WhileLoopStatement_ConditionIsTop = CoreBuilderInstance.instance.WhileLoopStatement_ConditionIsTop.ToImmutable(MModel);
			WhileLoopStatement_ConditionIsUntil = CoreBuilderInstance.instance.WhileLoopStatement_ConditionIsUntil.ToImmutable(MModel);
			Expression = CoreBuilderInstance.instance.Expression.ToImmutable(MModel);
			Expression_Type = CoreBuilderInstance.instance.Expression_Type.ToImmutable(MModel);
			Argument = CoreBuilderInstance.instance.Argument.ToImmutable(MModel);
			Argument_Value = CoreBuilderInstance.instance.Argument_Value.ToImmutable(MModel);
			AssignmentExpression = CoreBuilderInstance.instance.AssignmentExpression.ToImmutable(MModel);
			AssignmentExpression_Target = CoreBuilderInstance.instance.AssignmentExpression_Target.ToImmutable(MModel);
			AssignmentExpression_Value = CoreBuilderInstance.instance.AssignmentExpression_Value.ToImmutable(MModel);
			AwaitExpression = CoreBuilderInstance.instance.AwaitExpression.ToImmutable(MModel);
			AwaitExpression_Operation = CoreBuilderInstance.instance.AwaitExpression_Operation.ToImmutable(MModel);
			BinaryExpression = CoreBuilderInstance.instance.BinaryExpression.ToImmutable(MModel);
			BinaryExpression_OperatorKind = CoreBuilderInstance.instance.BinaryExpression_OperatorKind.ToImmutable(MModel);
			BinaryExpression_LeftOperand = CoreBuilderInstance.instance.BinaryExpression_LeftOperand.ToImmutable(MModel);
			BinaryExpression_RightOperand = CoreBuilderInstance.instance.BinaryExpression_RightOperand.ToImmutable(MModel);
			BinaryExpression_IsChecked = CoreBuilderInstance.instance.BinaryExpression_IsChecked.ToImmutable(MModel);
			BinaryExpression_OperatorMethod = CoreBuilderInstance.instance.BinaryExpression_OperatorMethod.ToImmutable(MModel);
			CoalesceExpression = CoreBuilderInstance.instance.CoalesceExpression.ToImmutable(MModel);
			CoalesceExpression_Value = CoreBuilderInstance.instance.CoalesceExpression_Value.ToImmutable(MModel);
			CoalesceExpression_WhenNull = CoreBuilderInstance.instance.CoalesceExpression_WhenNull.ToImmutable(MModel);
			CompoundAssignmentExpression = CoreBuilderInstance.instance.CompoundAssignmentExpression.ToImmutable(MModel);
			CompoundAssignmentExpression_OperatorKind = CoreBuilderInstance.instance.CompoundAssignmentExpression_OperatorKind.ToImmutable(MModel);
			CompoundAssignmentExpression_IsChecked = CoreBuilderInstance.instance.CompoundAssignmentExpression_IsChecked.ToImmutable(MModel);
			ConditionalExpression = CoreBuilderInstance.instance.ConditionalExpression.ToImmutable(MModel);
			ConditionalExpression_Condition = CoreBuilderInstance.instance.ConditionalExpression_Condition.ToImmutable(MModel);
			ConditionalExpression_WhenTrue = CoreBuilderInstance.instance.ConditionalExpression_WhenTrue.ToImmutable(MModel);
			ConditionalExpression_WhenFalse = CoreBuilderInstance.instance.ConditionalExpression_WhenFalse.ToImmutable(MModel);
			ConversionExpression = CoreBuilderInstance.instance.ConversionExpression.ToImmutable(MModel);
			ConversionExpression_Operand = CoreBuilderInstance.instance.ConversionExpression_Operand.ToImmutable(MModel);
			ConversionExpression_TargetType = CoreBuilderInstance.instance.ConversionExpression_TargetType.ToImmutable(MModel);
			ConversionExpression_IsTryCast = CoreBuilderInstance.instance.ConversionExpression_IsTryCast.ToImmutable(MModel);
			ConversionExpression_IsChecked = CoreBuilderInstance.instance.ConversionExpression_IsChecked.ToImmutable(MModel);
			DefaultValueExpression = CoreBuilderInstance.instance.DefaultValueExpression.ToImmutable(MModel);
			DiscardExpression = CoreBuilderInstance.instance.DiscardExpression.ToImmutable(MModel);
			DynamicExpression = CoreBuilderInstance.instance.DynamicExpression.ToImmutable(MModel);
			IncrementOrDecrementExpression = CoreBuilderInstance.instance.IncrementOrDecrementExpression.ToImmutable(MModel);
			IncrementOrDecrementExpression_Target = CoreBuilderInstance.instance.IncrementOrDecrementExpression_Target.ToImmutable(MModel);
			IncrementOrDecrementExpression_IsPostfix = CoreBuilderInstance.instance.IncrementOrDecrementExpression_IsPostfix.ToImmutable(MModel);
			IncrementOrDecrementExpression_IsChecked = CoreBuilderInstance.instance.IncrementOrDecrementExpression_IsChecked.ToImmutable(MModel);
			IndexerAccessExpression = CoreBuilderInstance.instance.IndexerAccessExpression.ToImmutable(MModel);
			IndexerAccessExpression_Receiver = CoreBuilderInstance.instance.IndexerAccessExpression_Receiver.ToImmutable(MModel);
			IndexerAccessExpression_IsNullConditional = CoreBuilderInstance.instance.IndexerAccessExpression_IsNullConditional.ToImmutable(MModel);
			IndexerAccessExpression_Arguments = CoreBuilderInstance.instance.IndexerAccessExpression_Arguments.ToImmutable(MModel);
			IndexerAccessExpression_Target = CoreBuilderInstance.instance.IndexerAccessExpression_Target.ToImmutable(MModel);
			InstanceReferenceExpression = CoreBuilderInstance.instance.InstanceReferenceExpression.ToImmutable(MModel);
			InstanceReferenceExpression_AccessThroughBaseType = CoreBuilderInstance.instance.InstanceReferenceExpression_AccessThroughBaseType.ToImmutable(MModel);
			InvocationExpression = CoreBuilderInstance.instance.InvocationExpression.ToImmutable(MModel);
			InvocationExpression_Receiver = CoreBuilderInstance.instance.InvocationExpression_Receiver.ToImmutable(MModel);
			InvocationExpression_Arguments = CoreBuilderInstance.instance.InvocationExpression_Arguments.ToImmutable(MModel);
			IsTypeExpression = CoreBuilderInstance.instance.IsTypeExpression.ToImmutable(MModel);
			IsTypeExpression_ValueOperand = CoreBuilderInstance.instance.IsTypeExpression_ValueOperand.ToImmutable(MModel);
			IsTypeExpression_TypeOperand = CoreBuilderInstance.instance.IsTypeExpression_TypeOperand.ToImmutable(MModel);
			IsTypeExpression_IsNegated = CoreBuilderInstance.instance.IsTypeExpression_IsNegated.ToImmutable(MModel);
			LambdaExpression = CoreBuilderInstance.instance.LambdaExpression.ToImmutable(MModel);
			LambdaExpression_ReturnType = CoreBuilderInstance.instance.LambdaExpression_ReturnType.ToImmutable(MModel);
			LambdaExpression_Parameters = CoreBuilderInstance.instance.LambdaExpression_Parameters.ToImmutable(MModel);
			LambdaExpression_Body = CoreBuilderInstance.instance.LambdaExpression_Body.ToImmutable(MModel);
			LiteralExpression = CoreBuilderInstance.instance.LiteralExpression.ToImmutable(MModel);
			LiteralExpression_Value = CoreBuilderInstance.instance.LiteralExpression_Value.ToImmutable(MModel);
			LiteralExpression_Type = CoreBuilderInstance.instance.LiteralExpression_Type.ToImmutable(MModel);
			NameOfExpression = CoreBuilderInstance.instance.NameOfExpression.ToImmutable(MModel);
			NameOfExpression_Argument = CoreBuilderInstance.instance.NameOfExpression_Argument.ToImmutable(MModel);
			ObjectCreationExpression = CoreBuilderInstance.instance.ObjectCreationExpression.ToImmutable(MModel);
			ObjectCreationExpression_ObjectType = CoreBuilderInstance.instance.ObjectCreationExpression_ObjectType.ToImmutable(MModel);
			ObjectCreationExpression_Arguments = CoreBuilderInstance.instance.ObjectCreationExpression_Arguments.ToImmutable(MModel);
			ObjectCreationExpression_Initializers = CoreBuilderInstance.instance.ObjectCreationExpression_Initializers.ToImmutable(MModel);
			ParenthesizedExpression = CoreBuilderInstance.instance.ParenthesizedExpression.ToImmutable(MModel);
			ParenthesizedExpression_Operand = CoreBuilderInstance.instance.ParenthesizedExpression_Operand.ToImmutable(MModel);
			ReferenceExpression = CoreBuilderInstance.instance.ReferenceExpression.ToImmutable(MModel);
			ReferenceExpression_Qualifier = CoreBuilderInstance.instance.ReferenceExpression_Qualifier.ToImmutable(MModel);
			ReferenceExpression_IsNullConditional = CoreBuilderInstance.instance.ReferenceExpression_IsNullConditional.ToImmutable(MModel);
			ReferenceExpression_TypeArguments = CoreBuilderInstance.instance.ReferenceExpression_TypeArguments.ToImmutable(MModel);
			ReferenceExpression_IsDeclaration = CoreBuilderInstance.instance.ReferenceExpression_IsDeclaration.ToImmutable(MModel);
			ReferenceExpression_ReferenceThroughType = CoreBuilderInstance.instance.ReferenceExpression_ReferenceThroughType.ToImmutable(MModel);
			ReferenceExpression_ReferencedSymbol = CoreBuilderInstance.instance.ReferenceExpression_ReferencedSymbol.ToImmutable(MModel);
			SizeOfExpression = CoreBuilderInstance.instance.SizeOfExpression.ToImmutable(MModel);
			SizeOfExpression_TypeOperand = CoreBuilderInstance.instance.SizeOfExpression_TypeOperand.ToImmutable(MModel);
			TypeOfExpression = CoreBuilderInstance.instance.TypeOfExpression.ToImmutable(MModel);
			TypeOfExpression_TypeOperand = CoreBuilderInstance.instance.TypeOfExpression_TypeOperand.ToImmutable(MModel);
			ThrowExpression = CoreBuilderInstance.instance.ThrowExpression.ToImmutable(MModel);
			ThrowExpression_Exception = CoreBuilderInstance.instance.ThrowExpression_Exception.ToImmutable(MModel);
			TupleExpression = CoreBuilderInstance.instance.TupleExpression.ToImmutable(MModel);
			TupleExpression_Arguments = CoreBuilderInstance.instance.TupleExpression_Arguments.ToImmutable(MModel);
			UnaryExpression = CoreBuilderInstance.instance.UnaryExpression.ToImmutable(MModel);
			UnaryExpression_OperatorKind = CoreBuilderInstance.instance.UnaryExpression_OperatorKind.ToImmutable(MModel);
			UnaryExpression_Operand = CoreBuilderInstance.instance.UnaryExpression_Operand.ToImmutable(MModel);
			UnaryExpression_IsChecked = CoreBuilderInstance.instance.UnaryExpression_IsChecked.ToImmutable(MModel);
			UnaryExpression_OperatorMethod = CoreBuilderInstance.instance.UnaryExpression_OperatorMethod.ToImmutable(MModel);
			VariableDeclarationExpression = CoreBuilderInstance.instance.VariableDeclarationExpression.ToImmutable(MModel);
			VariableDeclarationExpression_Symbol = CoreBuilderInstance.instance.VariableDeclarationExpression_Symbol.ToImmutable(MModel);
			VariableDeclarationExpression_Initializer = CoreBuilderInstance.instance.VariableDeclarationExpression_Initializer.ToImmutable(MModel);
			VariableDeclarationGroupExpression = CoreBuilderInstance.instance.VariableDeclarationGroupExpression.ToImmutable(MModel);
			VariableDeclarationGroupExpression_Declarations = CoreBuilderInstance.instance.VariableDeclarationGroupExpression_Declarations.ToImmutable(MModel);
			VariableDeclarationGroupExpression_Initializer = CoreBuilderInstance.instance.VariableDeclarationGroupExpression_Initializer.ToImmutable(MModel);
	
			CoreInstance.initialized = true;
		}
	}

	/// <summary>
	/// Factory class for creating instances of model elements.
	/// </summary>
	public class CoreFactory : global::MetaDslx.Modeling.ModelFactoryBase
	{
		public CoreFactory(global::MetaDslx.Modeling.MutableModel model, global::MetaDslx.Modeling.ModelFactoryFlags flags = global::MetaDslx.Modeling.ModelFactoryFlags.None)
			: base(model, flags)
		{
			CoreDescriptor.Initialize();
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Modeling.MutableObject Create(string type)
		{
			switch (type)
			{
				case "Attribute": return this.Attribute();
				case "Namespace": return this.Namespace();
				case "Alias": return this.Alias();
				case "PrimitiveType": return this.PrimitiveType();
				case "ClassifierType": return this.ClassifierType();
				case "InterfaceType": return this.InterfaceType();
				case "ClassType": return this.ClassType();
				case "StructType": return this.StructType();
				case "EnumType": return this.EnumType();
				case "EnumLiteral": return this.EnumLiteral();
				case "DelegateType": return this.DelegateType();
				case "ArrayType": return this.ArrayType();
				case "CollectionType": return this.CollectionType();
				case "DictionaryType": return this.DictionaryType();
				case "NullableType": return this.NullableType();
				case "TupleType": return this.TupleType();
				case "TypeParameter": return this.TypeParameter();
				case "GenericTypeReference": return this.GenericTypeReference();
				case "Field": return this.Field();
				case "Property": return this.Property();
				case "Indexer": return this.Indexer();
				case "Method": return this.Method();
				case "Parameter": return this.Parameter();
				case "Constructor": return this.Constructor();
				case "Destructor": return this.Destructor();
				case "Lambda": return this.Lambda();
				case "Variable": return this.Variable();
				case "Label": return this.Label();
				case "BlockStatement": return this.BlockStatement();
				case "EmptyStatement": return this.EmptyStatement();
				case "ExpressionStatement": return this.ExpressionStatement();
				case "ForEachLoopStatement": return this.ForEachLoopStatement();
				case "ForLoopStatement": return this.ForLoopStatement();
				case "ForToLoopStatement": return this.ForToLoopStatement();
				case "IfStatement": return this.IfStatement();
				case "JumpStatement": return this.JumpStatement();
				case "LabeledStatement": return this.LabeledStatement();
				case "LockStatement": return this.LockStatement();
				case "ReturnStatement": return this.ReturnStatement();
				case "SwitchStatement": return this.SwitchStatement();
				case "SwitchCase": return this.SwitchCase();
				case "DefaultValueCaseClause": return this.DefaultValueCaseClause();
				case "SingleValueCaseClause": return this.SingleValueCaseClause();
				case "TryStatement": return this.TryStatement();
				case "CatchClause": return this.CatchClause();
				case "UsingStatement": return this.UsingStatement();
				case "WhileLoopStatement": return this.WhileLoopStatement();
				case "Argument": return this.Argument();
				case "AssignmentExpression": return this.AssignmentExpression();
				case "AwaitExpression": return this.AwaitExpression();
				case "BinaryExpression": return this.BinaryExpression();
				case "CoalesceExpression": return this.CoalesceExpression();
				case "CompoundAssignmentExpression": return this.CompoundAssignmentExpression();
				case "ConditionalExpression": return this.ConditionalExpression();
				case "ConversionExpression": return this.ConversionExpression();
				case "DefaultValueExpression": return this.DefaultValueExpression();
				case "DiscardExpression": return this.DiscardExpression();
				case "DynamicExpression": return this.DynamicExpression();
				case "IncrementOrDecrementExpression": return this.IncrementOrDecrementExpression();
				case "IndexerAccessExpression": return this.IndexerAccessExpression();
				case "InstanceReferenceExpression": return this.InstanceReferenceExpression();
				case "InvocationExpression": return this.InvocationExpression();
				case "IsTypeExpression": return this.IsTypeExpression();
				case "LambdaExpression": return this.LambdaExpression();
				case "LiteralExpression": return this.LiteralExpression();
				case "NameOfExpression": return this.NameOfExpression();
				case "ObjectCreationExpression": return this.ObjectCreationExpression();
				case "ParenthesizedExpression": return this.ParenthesizedExpression();
				case "ReferenceExpression": return this.ReferenceExpression();
				case "SizeOfExpression": return this.SizeOfExpression();
				case "TypeOfExpression": return this.TypeOfExpression();
				case "ThrowExpression": return this.ThrowExpression();
				case "TupleExpression": return this.TupleExpression();
				case "UnaryExpression": return this.UnaryExpression();
				case "VariableDeclarationExpression": return this.VariableDeclarationExpression();
				case "VariableDeclarationGroupExpression": return this.VariableDeclarationGroupExpression();
				default:
					throw new global::MetaDslx.Modeling.ModelException(global::MetaDslx.Modeling.ModelErrorCode.ERR_UnknownTypeName.ToDiagnosticWithNoLocation(type));
			}
		}
	
		/// <summary>
		/// Creates a new instance of Attribute.
		/// </summary>
		public AttributeBuilder Attribute()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new AttributeId());
			return (AttributeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Namespace.
		/// </summary>
		public NamespaceBuilder Namespace()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new NamespaceId());
			return (NamespaceBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Alias.
		/// </summary>
		public AliasBuilder Alias()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new AliasId());
			return (AliasBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of PrimitiveType.
		/// </summary>
		public PrimitiveTypeBuilder PrimitiveType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new PrimitiveTypeId());
			return (PrimitiveTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ClassifierType.
		/// </summary>
		public ClassifierTypeBuilder ClassifierType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ClassifierTypeId());
			return (ClassifierTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of InterfaceType.
		/// </summary>
		public InterfaceTypeBuilder InterfaceType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new InterfaceTypeId());
			return (InterfaceTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ClassType.
		/// </summary>
		public ClassTypeBuilder ClassType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ClassTypeId());
			return (ClassTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of StructType.
		/// </summary>
		public StructTypeBuilder StructType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new StructTypeId());
			return (StructTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of EnumType.
		/// </summary>
		public EnumTypeBuilder EnumType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new EnumTypeId());
			return (EnumTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of EnumLiteral.
		/// </summary>
		public EnumLiteralBuilder EnumLiteral()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new EnumLiteralId());
			return (EnumLiteralBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of DelegateType.
		/// </summary>
		public DelegateTypeBuilder DelegateType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new DelegateTypeId());
			return (DelegateTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ArrayType.
		/// </summary>
		public ArrayTypeBuilder ArrayType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ArrayTypeId());
			return (ArrayTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of CollectionType.
		/// </summary>
		public CollectionTypeBuilder CollectionType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new CollectionTypeId());
			return (CollectionTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of DictionaryType.
		/// </summary>
		public DictionaryTypeBuilder DictionaryType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new DictionaryTypeId());
			return (DictionaryTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of NullableType.
		/// </summary>
		public NullableTypeBuilder NullableType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new NullableTypeId());
			return (NullableTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of TupleType.
		/// </summary>
		public TupleTypeBuilder TupleType()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new TupleTypeId());
			return (TupleTypeBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of TypeParameter.
		/// </summary>
		public TypeParameterBuilder TypeParameter()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new TypeParameterId());
			return (TypeParameterBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of GenericTypeReference.
		/// </summary>
		public GenericTypeReferenceBuilder GenericTypeReference()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new GenericTypeReferenceId());
			return (GenericTypeReferenceBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Field.
		/// </summary>
		public FieldBuilder Field()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new FieldId());
			return (FieldBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Property.
		/// </summary>
		public PropertyBuilder Property()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new PropertyId());
			return (PropertyBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Indexer.
		/// </summary>
		public IndexerBuilder Indexer()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new IndexerId());
			return (IndexerBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Method.
		/// </summary>
		public MethodBuilder Method()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new MethodId());
			return (MethodBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Parameter.
		/// </summary>
		public ParameterBuilder Parameter()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ParameterId());
			return (ParameterBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Constructor.
		/// </summary>
		public ConstructorBuilder Constructor()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ConstructorId());
			return (ConstructorBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Destructor.
		/// </summary>
		public DestructorBuilder Destructor()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new DestructorId());
			return (DestructorBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Lambda.
		/// </summary>
		public LambdaBuilder Lambda()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new LambdaId());
			return (LambdaBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Variable.
		/// </summary>
		public VariableBuilder Variable()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new VariableId());
			return (VariableBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Label.
		/// </summary>
		public LabelBuilder Label()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new LabelId());
			return (LabelBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of BlockStatement.
		/// </summary>
		public BlockStatementBuilder BlockStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new BlockStatementId());
			return (BlockStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of EmptyStatement.
		/// </summary>
		public EmptyStatementBuilder EmptyStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new EmptyStatementId());
			return (EmptyStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ExpressionStatement.
		/// </summary>
		public ExpressionStatementBuilder ExpressionStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ExpressionStatementId());
			return (ExpressionStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ForEachLoopStatement.
		/// </summary>
		public ForEachLoopStatementBuilder ForEachLoopStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ForEachLoopStatementId());
			return (ForEachLoopStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ForLoopStatement.
		/// </summary>
		public ForLoopStatementBuilder ForLoopStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ForLoopStatementId());
			return (ForLoopStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ForToLoopStatement.
		/// </summary>
		public ForToLoopStatementBuilder ForToLoopStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ForToLoopStatementId());
			return (ForToLoopStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of IfStatement.
		/// </summary>
		public IfStatementBuilder IfStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new IfStatementId());
			return (IfStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of JumpStatement.
		/// </summary>
		public JumpStatementBuilder JumpStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new JumpStatementId());
			return (JumpStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of LabeledStatement.
		/// </summary>
		public LabeledStatementBuilder LabeledStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new LabeledStatementId());
			return (LabeledStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of LockStatement.
		/// </summary>
		public LockStatementBuilder LockStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new LockStatementId());
			return (LockStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ReturnStatement.
		/// </summary>
		public ReturnStatementBuilder ReturnStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ReturnStatementId());
			return (ReturnStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of SwitchStatement.
		/// </summary>
		public SwitchStatementBuilder SwitchStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new SwitchStatementId());
			return (SwitchStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of SwitchCase.
		/// </summary>
		public SwitchCaseBuilder SwitchCase()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new SwitchCaseId());
			return (SwitchCaseBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of DefaultValueCaseClause.
		/// </summary>
		public DefaultValueCaseClauseBuilder DefaultValueCaseClause()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new DefaultValueCaseClauseId());
			return (DefaultValueCaseClauseBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of SingleValueCaseClause.
		/// </summary>
		public SingleValueCaseClauseBuilder SingleValueCaseClause()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new SingleValueCaseClauseId());
			return (SingleValueCaseClauseBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of TryStatement.
		/// </summary>
		public TryStatementBuilder TryStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new TryStatementId());
			return (TryStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of CatchClause.
		/// </summary>
		public CatchClauseBuilder CatchClause()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new CatchClauseId());
			return (CatchClauseBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of UsingStatement.
		/// </summary>
		public UsingStatementBuilder UsingStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new UsingStatementId());
			return (UsingStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of WhileLoopStatement.
		/// </summary>
		public WhileLoopStatementBuilder WhileLoopStatement()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new WhileLoopStatementId());
			return (WhileLoopStatementBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of Argument.
		/// </summary>
		public ArgumentBuilder Argument()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ArgumentId());
			return (ArgumentBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of AssignmentExpression.
		/// </summary>
		public AssignmentExpressionBuilder AssignmentExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new AssignmentExpressionId());
			return (AssignmentExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of AwaitExpression.
		/// </summary>
		public AwaitExpressionBuilder AwaitExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new AwaitExpressionId());
			return (AwaitExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of BinaryExpression.
		/// </summary>
		public BinaryExpressionBuilder BinaryExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new BinaryExpressionId());
			return (BinaryExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of CoalesceExpression.
		/// </summary>
		public CoalesceExpressionBuilder CoalesceExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new CoalesceExpressionId());
			return (CoalesceExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of CompoundAssignmentExpression.
		/// </summary>
		public CompoundAssignmentExpressionBuilder CompoundAssignmentExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new CompoundAssignmentExpressionId());
			return (CompoundAssignmentExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ConditionalExpression.
		/// </summary>
		public ConditionalExpressionBuilder ConditionalExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ConditionalExpressionId());
			return (ConditionalExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ConversionExpression.
		/// </summary>
		public ConversionExpressionBuilder ConversionExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ConversionExpressionId());
			return (ConversionExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of DefaultValueExpression.
		/// </summary>
		public DefaultValueExpressionBuilder DefaultValueExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new DefaultValueExpressionId());
			return (DefaultValueExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of DiscardExpression.
		/// </summary>
		public DiscardExpressionBuilder DiscardExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new DiscardExpressionId());
			return (DiscardExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of DynamicExpression.
		/// </summary>
		public DynamicExpressionBuilder DynamicExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new DynamicExpressionId());
			return (DynamicExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of IncrementOrDecrementExpression.
		/// </summary>
		public IncrementOrDecrementExpressionBuilder IncrementOrDecrementExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new IncrementOrDecrementExpressionId());
			return (IncrementOrDecrementExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of IndexerAccessExpression.
		/// </summary>
		public IndexerAccessExpressionBuilder IndexerAccessExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new IndexerAccessExpressionId());
			return (IndexerAccessExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of InstanceReferenceExpression.
		/// </summary>
		public InstanceReferenceExpressionBuilder InstanceReferenceExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new InstanceReferenceExpressionId());
			return (InstanceReferenceExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of InvocationExpression.
		/// </summary>
		public InvocationExpressionBuilder InvocationExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new InvocationExpressionId());
			return (InvocationExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of IsTypeExpression.
		/// </summary>
		public IsTypeExpressionBuilder IsTypeExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new IsTypeExpressionId());
			return (IsTypeExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of LambdaExpression.
		/// </summary>
		public LambdaExpressionBuilder LambdaExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new LambdaExpressionId());
			return (LambdaExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of LiteralExpression.
		/// </summary>
		public LiteralExpressionBuilder LiteralExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new LiteralExpressionId());
			return (LiteralExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of NameOfExpression.
		/// </summary>
		public NameOfExpressionBuilder NameOfExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new NameOfExpressionId());
			return (NameOfExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ObjectCreationExpression.
		/// </summary>
		public ObjectCreationExpressionBuilder ObjectCreationExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ObjectCreationExpressionId());
			return (ObjectCreationExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ParenthesizedExpression.
		/// </summary>
		public ParenthesizedExpressionBuilder ParenthesizedExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ParenthesizedExpressionId());
			return (ParenthesizedExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ReferenceExpression.
		/// </summary>
		public ReferenceExpressionBuilder ReferenceExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ReferenceExpressionId());
			return (ReferenceExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of SizeOfExpression.
		/// </summary>
		public SizeOfExpressionBuilder SizeOfExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new SizeOfExpressionId());
			return (SizeOfExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of TypeOfExpression.
		/// </summary>
		public TypeOfExpressionBuilder TypeOfExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new TypeOfExpressionId());
			return (TypeOfExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of ThrowExpression.
		/// </summary>
		public ThrowExpressionBuilder ThrowExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new ThrowExpressionId());
			return (ThrowExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of TupleExpression.
		/// </summary>
		public TupleExpressionBuilder TupleExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new TupleExpressionId());
			return (TupleExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of UnaryExpression.
		/// </summary>
		public UnaryExpressionBuilder UnaryExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new UnaryExpressionId());
			return (UnaryExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of VariableDeclarationExpression.
		/// </summary>
		public VariableDeclarationExpressionBuilder VariableDeclarationExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new VariableDeclarationExpressionId());
			return (VariableDeclarationExpressionBuilder)obj;
		}
	
		/// <summary>
		/// Creates a new instance of VariableDeclarationGroupExpression.
		/// </summary>
		public VariableDeclarationGroupExpressionBuilder VariableDeclarationGroupExpression()
		{
			global::MetaDslx.Modeling.MutableObject obj = this.CreateObject(new VariableDeclarationGroupExpressionId());
			return (VariableDeclarationGroupExpressionBuilder)obj;
		}
	}

	
	public interface Element : global::MetaDslx.Modeling.ImmutableObject
	{
		global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Element"/> object to a builder <see cref="ElementBuilder"/> object.
		/// </summary>
		new ElementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Element"/> object to a builder <see cref="ElementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ElementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ElementBuilder : global::MetaDslx.Modeling.MutableObject
	{
		global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ElementBuilder"/> object to an immutable <see cref="Element"/> object.
		/// </summary>
		new Element ToImmutable();
		/// <summary>
		/// Convert the <see cref="ElementBuilder"/> object to an immutable <see cref="Element"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Element ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Attribute : NamedElement, TypedElement
	{
		new DataType Type { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Attribute"/> object to a builder <see cref="AttributeBuilder"/> object.
		/// </summary>
		new AttributeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Attribute"/> object to a builder <see cref="AttributeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new AttributeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface AttributeBuilder : NamedElementBuilder, TypedElementBuilder
	{
		new DataTypeBuilder Type { get; set; }
		new void SetTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		new void SetTypeLazy(global::System.Func<AttributeBuilder, DataTypeBuilder> lazy);
		new void SetTypeLazy(global::System.Func<Attribute, DataType> immutableLazy, global::System.Func<AttributeBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="AttributeBuilder"/> object to an immutable <see cref="Attribute"/> object.
		/// </summary>
		new Attribute ToImmutable();
		/// <summary>
		/// Convert the <see cref="AttributeBuilder"/> object to an immutable <see cref="Attribute"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Attribute ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface NamedElement : Element
	{
		string Name { get; }
	
	
		/// <summary>
		/// Convert the <see cref="NamedElement"/> object to a builder <see cref="NamedElementBuilder"/> object.
		/// </summary>
		new NamedElementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="NamedElement"/> object to a builder <see cref="NamedElementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new NamedElementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface NamedElementBuilder : ElementBuilder
	{
		string Name { get; set; }
		void SetNameLazy(global::System.Func<string> lazy);
		void SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy);
		void SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="NamedElementBuilder"/> object to an immutable <see cref="NamedElement"/> object.
		/// </summary>
		new NamedElement ToImmutable();
		/// <summary>
		/// Convert the <see cref="NamedElementBuilder"/> object to an immutable <see cref="NamedElement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new NamedElement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface TypedElement : Element
	{
		DataType Type { get; }
	
	
		/// <summary>
		/// Convert the <see cref="TypedElement"/> object to a builder <see cref="TypedElementBuilder"/> object.
		/// </summary>
		new TypedElementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="TypedElement"/> object to a builder <see cref="TypedElementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new TypedElementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface TypedElementBuilder : ElementBuilder
	{
		DataTypeBuilder Type { get; set; }
		void SetTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetTypeLazy(global::System.Func<TypedElementBuilder, DataTypeBuilder> lazy);
		void SetTypeLazy(global::System.Func<TypedElement, DataType> immutableLazy, global::System.Func<TypedElementBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="TypedElementBuilder"/> object to an immutable <see cref="TypedElement"/> object.
		/// </summary>
		new TypedElement ToImmutable();
		/// <summary>
		/// Convert the <see cref="TypedElementBuilder"/> object to an immutable <see cref="TypedElement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new TypedElement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface DataType : Element
	{
		DataType ResolvedType { get; }
	
	
		/// <summary>
		/// Convert the <see cref="DataType"/> object to a builder <see cref="DataTypeBuilder"/> object.
		/// </summary>
		new DataTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="DataType"/> object to a builder <see cref="DataTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new DataTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface DataTypeBuilder : ElementBuilder
	{
		DataTypeBuilder ResolvedType { get; }
		void SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy);
		void SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="DataTypeBuilder"/> object to an immutable <see cref="DataType"/> object.
		/// </summary>
		new DataType ToImmutable();
		/// <summary>
		/// Convert the <see cref="DataTypeBuilder"/> object to an immutable <see cref="DataType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new DataType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Declaration : NamedElement
	{
		global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters { get; }
		global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Declaration"/> object to a builder <see cref="DeclarationBuilder"/> object.
		/// </summary>
		new DeclarationBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Declaration"/> object to a builder <see cref="DeclarationBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new DeclarationBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface DeclarationBuilder : NamedElementBuilder
	{
		global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters { get; }
		global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members { get; }
	
	
		/// <summary>
		/// Convert the <see cref="DeclarationBuilder"/> object to an immutable <see cref="Declaration"/> object.
		/// </summary>
		new Declaration ToImmutable();
		/// <summary>
		/// Convert the <see cref="DeclarationBuilder"/> object to an immutable <see cref="Declaration"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Declaration ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface TypedDeclaration : Declaration, TypedElement
	{
	
	
		/// <summary>
		/// Convert the <see cref="TypedDeclaration"/> object to a builder <see cref="TypedDeclarationBuilder"/> object.
		/// </summary>
		new TypedDeclarationBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="TypedDeclaration"/> object to a builder <see cref="TypedDeclarationBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new TypedDeclarationBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface TypedDeclarationBuilder : DeclarationBuilder, TypedElementBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="TypedDeclarationBuilder"/> object to an immutable <see cref="TypedDeclaration"/> object.
		/// </summary>
		new TypedDeclaration ToImmutable();
		/// <summary>
		/// Convert the <see cref="TypedDeclarationBuilder"/> object to an immutable <see cref="TypedDeclaration"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new TypedDeclaration ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Namespace : Declaration
	{
	
	
		/// <summary>
		/// Convert the <see cref="Namespace"/> object to a builder <see cref="NamespaceBuilder"/> object.
		/// </summary>
		new NamespaceBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Namespace"/> object to a builder <see cref="NamespaceBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new NamespaceBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface NamespaceBuilder : DeclarationBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="NamespaceBuilder"/> object to an immutable <see cref="Namespace"/> object.
		/// </summary>
		new Namespace ToImmutable();
		/// <summary>
		/// Convert the <see cref="NamespaceBuilder"/> object to an immutable <see cref="Namespace"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Namespace ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Alias : Declaration
	{
		Declaration Target { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Alias"/> object to a builder <see cref="AliasBuilder"/> object.
		/// </summary>
		new AliasBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Alias"/> object to a builder <see cref="AliasBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new AliasBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface AliasBuilder : DeclarationBuilder
	{
		DeclarationBuilder Target { get; set; }
		void SetTargetLazy(global::System.Func<DeclarationBuilder> lazy);
		void SetTargetLazy(global::System.Func<AliasBuilder, DeclarationBuilder> lazy);
		void SetTargetLazy(global::System.Func<Alias, Declaration> immutableLazy, global::System.Func<AliasBuilder, DeclarationBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="AliasBuilder"/> object to an immutable <see cref="Alias"/> object.
		/// </summary>
		new Alias ToImmutable();
		/// <summary>
		/// Convert the <see cref="AliasBuilder"/> object to an immutable <see cref="Alias"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Alias ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface NamedType : Declaration, DataType
	{
		string DotNetName { get; }
		bool IsAbstract { get; }
		bool IsSealed { get; }
		global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments { get; }
		global::MetaDslx.Modeling.ImmutableModelList<NamedType> BaseTypes { get; }
	
	
		/// <summary>
		/// Convert the <see cref="NamedType"/> object to a builder <see cref="NamedTypeBuilder"/> object.
		/// </summary>
		new NamedTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="NamedType"/> object to a builder <see cref="NamedTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new NamedTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface NamedTypeBuilder : DeclarationBuilder, DataTypeBuilder
	{
		string DotNetName { get; set; }
		void SetDotNetNameLazy(global::System.Func<string> lazy);
		void SetDotNetNameLazy(global::System.Func<NamedTypeBuilder, string> lazy);
		void SetDotNetNameLazy(global::System.Func<NamedType, string> immutableLazy, global::System.Func<NamedTypeBuilder, string> mutableLazy);
		bool IsAbstract { get; set; }
		void SetIsAbstractLazy(global::System.Func<bool> lazy);
		void SetIsAbstractLazy(global::System.Func<NamedTypeBuilder, bool> lazy);
		void SetIsAbstractLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy);
		bool IsSealed { get; set; }
		void SetIsSealedLazy(global::System.Func<bool> lazy);
		void SetIsSealedLazy(global::System.Func<NamedTypeBuilder, bool> lazy);
		void SetIsSealedLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments { get; }
		global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> BaseTypes { get; }
	
	
		/// <summary>
		/// Convert the <see cref="NamedTypeBuilder"/> object to an immutable <see cref="NamedType"/> object.
		/// </summary>
		new NamedType ToImmutable();
		/// <summary>
		/// Convert the <see cref="NamedTypeBuilder"/> object to an immutable <see cref="NamedType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new NamedType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface PrimitiveType : NamedType
	{
	
	
		/// <summary>
		/// Convert the <see cref="PrimitiveType"/> object to a builder <see cref="PrimitiveTypeBuilder"/> object.
		/// </summary>
		new PrimitiveTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="PrimitiveType"/> object to a builder <see cref="PrimitiveTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new PrimitiveTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface PrimitiveTypeBuilder : NamedTypeBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="PrimitiveTypeBuilder"/> object to an immutable <see cref="PrimitiveType"/> object.
		/// </summary>
		new PrimitiveType ToImmutable();
		/// <summary>
		/// Convert the <see cref="PrimitiveTypeBuilder"/> object to an immutable <see cref="PrimitiveType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new PrimitiveType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ClassifierType : NamedType
	{
	
	
		/// <summary>
		/// Convert the <see cref="ClassifierType"/> object to a builder <see cref="ClassifierTypeBuilder"/> object.
		/// </summary>
		new ClassifierTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ClassifierType"/> object to a builder <see cref="ClassifierTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ClassifierTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ClassifierTypeBuilder : NamedTypeBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="ClassifierTypeBuilder"/> object to an immutable <see cref="ClassifierType"/> object.
		/// </summary>
		new ClassifierType ToImmutable();
		/// <summary>
		/// Convert the <see cref="ClassifierTypeBuilder"/> object to an immutable <see cref="ClassifierType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ClassifierType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface InterfaceType : ClassifierType
	{
	
	
		/// <summary>
		/// Convert the <see cref="InterfaceType"/> object to a builder <see cref="InterfaceTypeBuilder"/> object.
		/// </summary>
		new InterfaceTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="InterfaceType"/> object to a builder <see cref="InterfaceTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new InterfaceTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface InterfaceTypeBuilder : ClassifierTypeBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="InterfaceTypeBuilder"/> object to an immutable <see cref="InterfaceType"/> object.
		/// </summary>
		new InterfaceType ToImmutable();
		/// <summary>
		/// Convert the <see cref="InterfaceTypeBuilder"/> object to an immutable <see cref="InterfaceType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new InterfaceType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ClassType : ClassifierType
	{
	
	
		/// <summary>
		/// Convert the <see cref="ClassType"/> object to a builder <see cref="ClassTypeBuilder"/> object.
		/// </summary>
		new ClassTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ClassType"/> object to a builder <see cref="ClassTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ClassTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ClassTypeBuilder : ClassifierTypeBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="ClassTypeBuilder"/> object to an immutable <see cref="ClassType"/> object.
		/// </summary>
		new ClassType ToImmutable();
		/// <summary>
		/// Convert the <see cref="ClassTypeBuilder"/> object to an immutable <see cref="ClassType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ClassType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface StructType : ClassifierType
	{
	
	
		/// <summary>
		/// Convert the <see cref="StructType"/> object to a builder <see cref="StructTypeBuilder"/> object.
		/// </summary>
		new StructTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="StructType"/> object to a builder <see cref="StructTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new StructTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface StructTypeBuilder : ClassifierTypeBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="StructTypeBuilder"/> object to an immutable <see cref="StructType"/> object.
		/// </summary>
		new StructType ToImmutable();
		/// <summary>
		/// Convert the <see cref="StructTypeBuilder"/> object to an immutable <see cref="StructType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new StructType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface EnumType : NamedType
	{
		global::MetaDslx.Modeling.ImmutableModelList<EnumLiteral> Literals { get; }
	
	
		/// <summary>
		/// Convert the <see cref="EnumType"/> object to a builder <see cref="EnumTypeBuilder"/> object.
		/// </summary>
		new EnumTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="EnumType"/> object to a builder <see cref="EnumTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new EnumTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface EnumTypeBuilder : NamedTypeBuilder
	{
		global::MetaDslx.Modeling.MutableModelList<EnumLiteralBuilder> Literals { get; }
	
	
		/// <summary>
		/// Convert the <see cref="EnumTypeBuilder"/> object to an immutable <see cref="EnumType"/> object.
		/// </summary>
		new EnumType ToImmutable();
		/// <summary>
		/// Convert the <see cref="EnumTypeBuilder"/> object to an immutable <see cref="EnumType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new EnumType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface EnumLiteral : Member, TypedElement
	{
		new EnumType Type { get; }
	
	
		/// <summary>
		/// Convert the <see cref="EnumLiteral"/> object to a builder <see cref="EnumLiteralBuilder"/> object.
		/// </summary>
		new EnumLiteralBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="EnumLiteral"/> object to a builder <see cref="EnumLiteralBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new EnumLiteralBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface EnumLiteralBuilder : MemberBuilder, TypedElementBuilder
	{
		new EnumTypeBuilder Type { get; }
		new void SetTypeLazy(global::System.Func<EnumTypeBuilder> lazy);
		new void SetTypeLazy(global::System.Func<EnumLiteralBuilder, EnumTypeBuilder> lazy);
		new void SetTypeLazy(global::System.Func<EnumLiteral, EnumType> immutableLazy, global::System.Func<EnumLiteralBuilder, EnumTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="EnumLiteralBuilder"/> object to an immutable <see cref="EnumLiteral"/> object.
		/// </summary>
		new EnumLiteral ToImmutable();
		/// <summary>
		/// Convert the <see cref="EnumLiteralBuilder"/> object to an immutable <see cref="EnumLiteral"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new EnumLiteral ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface DelegateType : NamedType
	{
		DataType ReturnType { get; }
		global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters { get; }
	
	
		/// <summary>
		/// Convert the <see cref="DelegateType"/> object to a builder <see cref="DelegateTypeBuilder"/> object.
		/// </summary>
		new DelegateTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="DelegateType"/> object to a builder <see cref="DelegateTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new DelegateTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface DelegateTypeBuilder : NamedTypeBuilder
	{
		DataTypeBuilder ReturnType { get; set; }
		void SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetReturnTypeLazy(global::System.Func<DelegateTypeBuilder, DataTypeBuilder> lazy);
		void SetReturnTypeLazy(global::System.Func<DelegateType, DataType> immutableLazy, global::System.Func<DelegateTypeBuilder, DataTypeBuilder> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters { get; }
	
	
		/// <summary>
		/// Convert the <see cref="DelegateTypeBuilder"/> object to an immutable <see cref="DelegateType"/> object.
		/// </summary>
		new DelegateType ToImmutable();
		/// <summary>
		/// Convert the <see cref="DelegateTypeBuilder"/> object to an immutable <see cref="DelegateType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new DelegateType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ArrayType : DataType
	{
		int LowerBound { get; }
		int Size { get; }
		DataType ElementType { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ArrayType"/> object to a builder <see cref="ArrayTypeBuilder"/> object.
		/// </summary>
		new ArrayTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ArrayType"/> object to a builder <see cref="ArrayTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ArrayTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ArrayTypeBuilder : DataTypeBuilder
	{
		int LowerBound { get; set; }
		void SetLowerBoundLazy(global::System.Func<int> lazy);
		void SetLowerBoundLazy(global::System.Func<ArrayTypeBuilder, int> lazy);
		void SetLowerBoundLazy(global::System.Func<ArrayType, int> immutableLazy, global::System.Func<ArrayTypeBuilder, int> mutableLazy);
		int Size { get; set; }
		void SetSizeLazy(global::System.Func<int> lazy);
		void SetSizeLazy(global::System.Func<ArrayTypeBuilder, int> lazy);
		void SetSizeLazy(global::System.Func<ArrayType, int> immutableLazy, global::System.Func<ArrayTypeBuilder, int> mutableLazy);
		DataTypeBuilder ElementType { get; set; }
		void SetElementTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetElementTypeLazy(global::System.Func<ArrayTypeBuilder, DataTypeBuilder> lazy);
		void SetElementTypeLazy(global::System.Func<ArrayType, DataType> immutableLazy, global::System.Func<ArrayTypeBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ArrayTypeBuilder"/> object to an immutable <see cref="ArrayType"/> object.
		/// </summary>
		new ArrayType ToImmutable();
		/// <summary>
		/// Convert the <see cref="ArrayTypeBuilder"/> object to an immutable <see cref="ArrayType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ArrayType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface CollectionType : DataType
	{
		bool IsUnique { get; }
		bool IsUnordered { get; }
		DataType ItemType { get; }
	
	
		/// <summary>
		/// Convert the <see cref="CollectionType"/> object to a builder <see cref="CollectionTypeBuilder"/> object.
		/// </summary>
		new CollectionTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="CollectionType"/> object to a builder <see cref="CollectionTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new CollectionTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface CollectionTypeBuilder : DataTypeBuilder
	{
		bool IsUnique { get; set; }
		void SetIsUniqueLazy(global::System.Func<bool> lazy);
		void SetIsUniqueLazy(global::System.Func<CollectionTypeBuilder, bool> lazy);
		void SetIsUniqueLazy(global::System.Func<CollectionType, bool> immutableLazy, global::System.Func<CollectionTypeBuilder, bool> mutableLazy);
		bool IsUnordered { get; set; }
		void SetIsUnorderedLazy(global::System.Func<bool> lazy);
		void SetIsUnorderedLazy(global::System.Func<CollectionTypeBuilder, bool> lazy);
		void SetIsUnorderedLazy(global::System.Func<CollectionType, bool> immutableLazy, global::System.Func<CollectionTypeBuilder, bool> mutableLazy);
		DataTypeBuilder ItemType { get; set; }
		void SetItemTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetItemTypeLazy(global::System.Func<CollectionTypeBuilder, DataTypeBuilder> lazy);
		void SetItemTypeLazy(global::System.Func<CollectionType, DataType> immutableLazy, global::System.Func<CollectionTypeBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="CollectionTypeBuilder"/> object to an immutable <see cref="CollectionType"/> object.
		/// </summary>
		new CollectionType ToImmutable();
		/// <summary>
		/// Convert the <see cref="CollectionTypeBuilder"/> object to an immutable <see cref="CollectionType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new CollectionType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface DictionaryType : DataType
	{
		bool IsUnordered { get; }
		DataType KeyType { get; }
		DataType ValueType { get; }
	
	
		/// <summary>
		/// Convert the <see cref="DictionaryType"/> object to a builder <see cref="DictionaryTypeBuilder"/> object.
		/// </summary>
		new DictionaryTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="DictionaryType"/> object to a builder <see cref="DictionaryTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new DictionaryTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface DictionaryTypeBuilder : DataTypeBuilder
	{
		bool IsUnordered { get; set; }
		void SetIsUnorderedLazy(global::System.Func<bool> lazy);
		void SetIsUnorderedLazy(global::System.Func<DictionaryTypeBuilder, bool> lazy);
		void SetIsUnorderedLazy(global::System.Func<DictionaryType, bool> immutableLazy, global::System.Func<DictionaryTypeBuilder, bool> mutableLazy);
		DataTypeBuilder KeyType { get; set; }
		void SetKeyTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetKeyTypeLazy(global::System.Func<DictionaryTypeBuilder, DataTypeBuilder> lazy);
		void SetKeyTypeLazy(global::System.Func<DictionaryType, DataType> immutableLazy, global::System.Func<DictionaryTypeBuilder, DataTypeBuilder> mutableLazy);
		DataTypeBuilder ValueType { get; set; }
		void SetValueTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetValueTypeLazy(global::System.Func<DictionaryTypeBuilder, DataTypeBuilder> lazy);
		void SetValueTypeLazy(global::System.Func<DictionaryType, DataType> immutableLazy, global::System.Func<DictionaryTypeBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="DictionaryTypeBuilder"/> object to an immutable <see cref="DictionaryType"/> object.
		/// </summary>
		new DictionaryType ToImmutable();
		/// <summary>
		/// Convert the <see cref="DictionaryTypeBuilder"/> object to an immutable <see cref="DictionaryType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new DictionaryType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface NullableType : DataType
	{
		DataType InnerType { get; }
	
	
		/// <summary>
		/// Convert the <see cref="NullableType"/> object to a builder <see cref="NullableTypeBuilder"/> object.
		/// </summary>
		new NullableTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="NullableType"/> object to a builder <see cref="NullableTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new NullableTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface NullableTypeBuilder : DataTypeBuilder
	{
		DataTypeBuilder InnerType { get; set; }
		void SetInnerTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetInnerTypeLazy(global::System.Func<NullableTypeBuilder, DataTypeBuilder> lazy);
		void SetInnerTypeLazy(global::System.Func<NullableType, DataType> immutableLazy, global::System.Func<NullableTypeBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="NullableTypeBuilder"/> object to an immutable <see cref="NullableType"/> object.
		/// </summary>
		new NullableType ToImmutable();
		/// <summary>
		/// Convert the <see cref="NullableTypeBuilder"/> object to an immutable <see cref="NullableType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new NullableType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface TupleType : DataType
	{
	
	
		/// <summary>
		/// Convert the <see cref="TupleType"/> object to a builder <see cref="TupleTypeBuilder"/> object.
		/// </summary>
		new TupleTypeBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="TupleType"/> object to a builder <see cref="TupleTypeBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new TupleTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface TupleTypeBuilder : DataTypeBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="TupleTypeBuilder"/> object to an immutable <see cref="TupleType"/> object.
		/// </summary>
		new TupleType ToImmutable();
		/// <summary>
		/// Convert the <see cref="TupleTypeBuilder"/> object to an immutable <see cref="TupleType"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new TupleType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface TypeParameter : NamedType
	{
	
	
		/// <summary>
		/// Convert the <see cref="TypeParameter"/> object to a builder <see cref="TypeParameterBuilder"/> object.
		/// </summary>
		new TypeParameterBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="TypeParameter"/> object to a builder <see cref="TypeParameterBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new TypeParameterBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface TypeParameterBuilder : NamedTypeBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="TypeParameterBuilder"/> object to an immutable <see cref="TypeParameter"/> object.
		/// </summary>
		new TypeParameter ToImmutable();
		/// <summary>
		/// Convert the <see cref="TypeParameterBuilder"/> object to an immutable <see cref="TypeParameter"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new TypeParameter ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface GenericTypeReference : DataType
	{
		NamedType ReferencedType { get; }
		global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments { get; }
		NamedType ConstructedType { get; }
		new DataType ResolvedType { get; }
	
	
		/// <summary>
		/// Convert the <see cref="GenericTypeReference"/> object to a builder <see cref="GenericTypeReferenceBuilder"/> object.
		/// </summary>
		new GenericTypeReferenceBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="GenericTypeReference"/> object to a builder <see cref="GenericTypeReferenceBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new GenericTypeReferenceBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface GenericTypeReferenceBuilder : DataTypeBuilder
	{
		NamedTypeBuilder ReferencedType { get; set; }
		void SetReferencedTypeLazy(global::System.Func<NamedTypeBuilder> lazy);
		void SetReferencedTypeLazy(global::System.Func<GenericTypeReferenceBuilder, NamedTypeBuilder> lazy);
		void SetReferencedTypeLazy(global::System.Func<GenericTypeReference, NamedType> immutableLazy, global::System.Func<GenericTypeReferenceBuilder, NamedTypeBuilder> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments { get; }
		NamedTypeBuilder ConstructedType { get; }
		void SetConstructedTypeLazy(global::System.Func<NamedTypeBuilder> lazy);
		void SetConstructedTypeLazy(global::System.Func<GenericTypeReferenceBuilder, NamedTypeBuilder> lazy);
		void SetConstructedTypeLazy(global::System.Func<GenericTypeReference, NamedType> immutableLazy, global::System.Func<GenericTypeReferenceBuilder, NamedTypeBuilder> mutableLazy);
		new DataTypeBuilder ResolvedType { get; }
		new void SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		new void SetResolvedTypeLazy(global::System.Func<GenericTypeReferenceBuilder, DataTypeBuilder> lazy);
		new void SetResolvedTypeLazy(global::System.Func<GenericTypeReference, DataType> immutableLazy, global::System.Func<GenericTypeReferenceBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="GenericTypeReferenceBuilder"/> object to an immutable <see cref="GenericTypeReference"/> object.
		/// </summary>
		new GenericTypeReference ToImmutable();
		/// <summary>
		/// Convert the <see cref="GenericTypeReferenceBuilder"/> object to an immutable <see cref="GenericTypeReference"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new GenericTypeReference ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Member : Declaration
	{
		bool IsStatic { get; }
		bool IsVirtual { get; }
		bool IsOverride { get; }
		bool IsAbstract { get; }
		bool IsSealed { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Member"/> object to a builder <see cref="MemberBuilder"/> object.
		/// </summary>
		new MemberBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Member"/> object to a builder <see cref="MemberBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new MemberBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface MemberBuilder : DeclarationBuilder
	{
		bool IsStatic { get; set; }
		void SetIsStaticLazy(global::System.Func<bool> lazy);
		void SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy);
		void SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy);
		bool IsVirtual { get; set; }
		void SetIsVirtualLazy(global::System.Func<bool> lazy);
		void SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy);
		void SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy);
		bool IsOverride { get; set; }
		void SetIsOverrideLazy(global::System.Func<bool> lazy);
		void SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy);
		void SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy);
		bool IsAbstract { get; set; }
		void SetIsAbstractLazy(global::System.Func<bool> lazy);
		void SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy);
		void SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy);
		bool IsSealed { get; set; }
		void SetIsSealedLazy(global::System.Func<bool> lazy);
		void SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy);
		void SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="MemberBuilder"/> object to an immutable <see cref="Member"/> object.
		/// </summary>
		new Member ToImmutable();
		/// <summary>
		/// Convert the <see cref="MemberBuilder"/> object to an immutable <see cref="Member"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Member ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface FieldLikeMember : Member, TypedDeclaration
	{
		new DataType Type { get; }
	
	
		/// <summary>
		/// Convert the <see cref="FieldLikeMember"/> object to a builder <see cref="FieldLikeMemberBuilder"/> object.
		/// </summary>
		new FieldLikeMemberBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="FieldLikeMember"/> object to a builder <see cref="FieldLikeMemberBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new FieldLikeMemberBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface FieldLikeMemberBuilder : MemberBuilder, TypedDeclarationBuilder
	{
		new DataTypeBuilder Type { get; set; }
		new void SetTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		new void SetTypeLazy(global::System.Func<FieldLikeMemberBuilder, DataTypeBuilder> lazy);
		new void SetTypeLazy(global::System.Func<FieldLikeMember, DataType> immutableLazy, global::System.Func<FieldLikeMemberBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="FieldLikeMemberBuilder"/> object to an immutable <see cref="FieldLikeMember"/> object.
		/// </summary>
		new FieldLikeMember ToImmutable();
		/// <summary>
		/// Convert the <see cref="FieldLikeMemberBuilder"/> object to an immutable <see cref="FieldLikeMember"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new FieldLikeMember ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Field : FieldLikeMember
	{
	
	
		/// <summary>
		/// Convert the <see cref="Field"/> object to a builder <see cref="FieldBuilder"/> object.
		/// </summary>
		new FieldBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Field"/> object to a builder <see cref="FieldBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new FieldBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface FieldBuilder : FieldLikeMemberBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="FieldBuilder"/> object to an immutable <see cref="Field"/> object.
		/// </summary>
		new Field ToImmutable();
		/// <summary>
		/// Convert the <see cref="FieldBuilder"/> object to an immutable <see cref="Field"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Field ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Property : FieldLikeMember
	{
		Method GetMethod { get; }
		Method SetMethod { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Property"/> object to a builder <see cref="PropertyBuilder"/> object.
		/// </summary>
		new PropertyBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Property"/> object to a builder <see cref="PropertyBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new PropertyBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface PropertyBuilder : FieldLikeMemberBuilder
	{
		MethodBuilder GetMethod { get; set; }
		void SetGetMethodLazy(global::System.Func<MethodBuilder> lazy);
		void SetGetMethodLazy(global::System.Func<PropertyBuilder, MethodBuilder> lazy);
		void SetGetMethodLazy(global::System.Func<Property, Method> immutableLazy, global::System.Func<PropertyBuilder, MethodBuilder> mutableLazy);
		MethodBuilder SetMethod { get; set; }
		void SetSetMethodLazy(global::System.Func<MethodBuilder> lazy);
		void SetSetMethodLazy(global::System.Func<PropertyBuilder, MethodBuilder> lazy);
		void SetSetMethodLazy(global::System.Func<Property, Method> immutableLazy, global::System.Func<PropertyBuilder, MethodBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="PropertyBuilder"/> object to an immutable <see cref="Property"/> object.
		/// </summary>
		new Property ToImmutable();
		/// <summary>
		/// Convert the <see cref="PropertyBuilder"/> object to an immutable <see cref="Property"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Property ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Indexer : Property
	{
		global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Indexer"/> object to a builder <see cref="IndexerBuilder"/> object.
		/// </summary>
		new IndexerBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Indexer"/> object to a builder <see cref="IndexerBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new IndexerBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface IndexerBuilder : PropertyBuilder
	{
		global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters { get; }
	
	
		/// <summary>
		/// Convert the <see cref="IndexerBuilder"/> object to an immutable <see cref="Indexer"/> object.
		/// </summary>
		new Indexer ToImmutable();
		/// <summary>
		/// Convert the <see cref="IndexerBuilder"/> object to an immutable <see cref="Indexer"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Indexer ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface MethodLikeMember : Member
	{
		bool IsAsync { get; }
		DataType ReturnType { get; }
		global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters { get; }
		Statement Body { get; }
	
	
		/// <summary>
		/// Convert the <see cref="MethodLikeMember"/> object to a builder <see cref="MethodLikeMemberBuilder"/> object.
		/// </summary>
		new MethodLikeMemberBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="MethodLikeMember"/> object to a builder <see cref="MethodLikeMemberBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new MethodLikeMemberBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface MethodLikeMemberBuilder : MemberBuilder
	{
		bool IsAsync { get; set; }
		void SetIsAsyncLazy(global::System.Func<bool> lazy);
		void SetIsAsyncLazy(global::System.Func<MethodLikeMemberBuilder, bool> lazy);
		void SetIsAsyncLazy(global::System.Func<MethodLikeMember, bool> immutableLazy, global::System.Func<MethodLikeMemberBuilder, bool> mutableLazy);
		DataTypeBuilder ReturnType { get; set; }
		void SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetReturnTypeLazy(global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> lazy);
		void SetReturnTypeLazy(global::System.Func<MethodLikeMember, DataType> immutableLazy, global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters { get; }
		StatementBuilder Body { get; set; }
		void SetBodyLazy(global::System.Func<StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<MethodLikeMemberBuilder, StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<MethodLikeMember, Statement> immutableLazy, global::System.Func<MethodLikeMemberBuilder, StatementBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="MethodLikeMemberBuilder"/> object to an immutable <see cref="MethodLikeMember"/> object.
		/// </summary>
		new MethodLikeMember ToImmutable();
		/// <summary>
		/// Convert the <see cref="MethodLikeMemberBuilder"/> object to an immutable <see cref="MethodLikeMember"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new MethodLikeMember ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Method : MethodLikeMember
	{
	
	
		/// <summary>
		/// Convert the <see cref="Method"/> object to a builder <see cref="MethodBuilder"/> object.
		/// </summary>
		new MethodBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Method"/> object to a builder <see cref="MethodBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new MethodBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface MethodBuilder : MethodLikeMemberBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="MethodBuilder"/> object to an immutable <see cref="Method"/> object.
		/// </summary>
		new Method ToImmutable();
		/// <summary>
		/// Convert the <see cref="MethodBuilder"/> object to an immutable <see cref="Method"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Method ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Parameter : Variable
	{
		bool IsVarArg { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Parameter"/> object to a builder <see cref="ParameterBuilder"/> object.
		/// </summary>
		new ParameterBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Parameter"/> object to a builder <see cref="ParameterBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ParameterBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ParameterBuilder : VariableBuilder
	{
		bool IsVarArg { get; set; }
		void SetIsVarArgLazy(global::System.Func<bool> lazy);
		void SetIsVarArgLazy(global::System.Func<ParameterBuilder, bool> lazy);
		void SetIsVarArgLazy(global::System.Func<Parameter, bool> immutableLazy, global::System.Func<ParameterBuilder, bool> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ParameterBuilder"/> object to an immutable <see cref="Parameter"/> object.
		/// </summary>
		new Parameter ToImmutable();
		/// <summary>
		/// Convert the <see cref="ParameterBuilder"/> object to an immutable <see cref="Parameter"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Parameter ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Constructor : MethodLikeMember
	{
		InvocationExpression NextConstructorInvocation { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Constructor"/> object to a builder <see cref="ConstructorBuilder"/> object.
		/// </summary>
		new ConstructorBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Constructor"/> object to a builder <see cref="ConstructorBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ConstructorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ConstructorBuilder : MethodLikeMemberBuilder
	{
		InvocationExpressionBuilder NextConstructorInvocation { get; set; }
		void SetNextConstructorInvocationLazy(global::System.Func<InvocationExpressionBuilder> lazy);
		void SetNextConstructorInvocationLazy(global::System.Func<ConstructorBuilder, InvocationExpressionBuilder> lazy);
		void SetNextConstructorInvocationLazy(global::System.Func<Constructor, InvocationExpression> immutableLazy, global::System.Func<ConstructorBuilder, InvocationExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ConstructorBuilder"/> object to an immutable <see cref="Constructor"/> object.
		/// </summary>
		new Constructor ToImmutable();
		/// <summary>
		/// Convert the <see cref="ConstructorBuilder"/> object to an immutable <see cref="Constructor"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Constructor ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Destructor : MethodLikeMember
	{
	
	
		/// <summary>
		/// Convert the <see cref="Destructor"/> object to a builder <see cref="DestructorBuilder"/> object.
		/// </summary>
		new DestructorBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Destructor"/> object to a builder <see cref="DestructorBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new DestructorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface DestructorBuilder : MethodLikeMemberBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="DestructorBuilder"/> object to an immutable <see cref="Destructor"/> object.
		/// </summary>
		new Destructor ToImmutable();
		/// <summary>
		/// Convert the <see cref="DestructorBuilder"/> object to an immutable <see cref="Destructor"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Destructor ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Lambda : MethodLikeMember
	{
	
	
		/// <summary>
		/// Convert the <see cref="Lambda"/> object to a builder <see cref="LambdaBuilder"/> object.
		/// </summary>
		new LambdaBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Lambda"/> object to a builder <see cref="LambdaBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new LambdaBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface LambdaBuilder : MethodLikeMemberBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="LambdaBuilder"/> object to an immutable <see cref="Lambda"/> object.
		/// </summary>
		new Lambda ToImmutable();
		/// <summary>
		/// Convert the <see cref="LambdaBuilder"/> object to an immutable <see cref="Lambda"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Lambda ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Operator : MethodLikeMember
	{
	
	
		/// <summary>
		/// Convert the <see cref="Operator"/> object to a builder <see cref="OperatorBuilder"/> object.
		/// </summary>
		new OperatorBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Operator"/> object to a builder <see cref="OperatorBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new OperatorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface OperatorBuilder : MethodLikeMemberBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="OperatorBuilder"/> object to an immutable <see cref="Operator"/> object.
		/// </summary>
		new Operator ToImmutable();
		/// <summary>
		/// Convert the <see cref="OperatorBuilder"/> object to an immutable <see cref="Operator"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Operator ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ConversionOperator : Operator
	{
	
	
		/// <summary>
		/// Convert the <see cref="ConversionOperator"/> object to a builder <see cref="ConversionOperatorBuilder"/> object.
		/// </summary>
		new ConversionOperatorBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ConversionOperator"/> object to a builder <see cref="ConversionOperatorBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ConversionOperatorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ConversionOperatorBuilder : OperatorBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="ConversionOperatorBuilder"/> object to an immutable <see cref="ConversionOperator"/> object.
		/// </summary>
		new ConversionOperator ToImmutable();
		/// <summary>
		/// Convert the <see cref="ConversionOperatorBuilder"/> object to an immutable <see cref="ConversionOperator"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ConversionOperator ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface UnaryOperator : Operator
	{
		object OperatorKind { get; }
	
	
		/// <summary>
		/// Convert the <see cref="UnaryOperator"/> object to a builder <see cref="UnaryOperatorBuilder"/> object.
		/// </summary>
		new UnaryOperatorBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="UnaryOperator"/> object to a builder <see cref="UnaryOperatorBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new UnaryOperatorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface UnaryOperatorBuilder : OperatorBuilder
	{
		object OperatorKind { get; set; }
		void SetOperatorKindLazy(global::System.Func<object> lazy);
		void SetOperatorKindLazy(global::System.Func<UnaryOperatorBuilder, object> lazy);
		void SetOperatorKindLazy(global::System.Func<UnaryOperator, object> immutableLazy, global::System.Func<UnaryOperatorBuilder, object> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="UnaryOperatorBuilder"/> object to an immutable <see cref="UnaryOperator"/> object.
		/// </summary>
		new UnaryOperator ToImmutable();
		/// <summary>
		/// Convert the <see cref="UnaryOperatorBuilder"/> object to an immutable <see cref="UnaryOperator"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new UnaryOperator ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface BinaryOperator : Operator
	{
		object OperatorKind { get; }
	
	
		/// <summary>
		/// Convert the <see cref="BinaryOperator"/> object to a builder <see cref="BinaryOperatorBuilder"/> object.
		/// </summary>
		new BinaryOperatorBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="BinaryOperator"/> object to a builder <see cref="BinaryOperatorBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new BinaryOperatorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface BinaryOperatorBuilder : OperatorBuilder
	{
		object OperatorKind { get; set; }
		void SetOperatorKindLazy(global::System.Func<object> lazy);
		void SetOperatorKindLazy(global::System.Func<BinaryOperatorBuilder, object> lazy);
		void SetOperatorKindLazy(global::System.Func<BinaryOperator, object> immutableLazy, global::System.Func<BinaryOperatorBuilder, object> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="BinaryOperatorBuilder"/> object to an immutable <see cref="BinaryOperator"/> object.
		/// </summary>
		new BinaryOperator ToImmutable();
		/// <summary>
		/// Convert the <see cref="BinaryOperatorBuilder"/> object to an immutable <see cref="BinaryOperator"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new BinaryOperator ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Statement : Element
	{
	
	
		/// <summary>
		/// Convert the <see cref="Statement"/> object to a builder <see cref="StatementBuilder"/> object.
		/// </summary>
		new StatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Statement"/> object to a builder <see cref="StatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new StatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface StatementBuilder : ElementBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="StatementBuilder"/> object to an immutable <see cref="Statement"/> object.
		/// </summary>
		new Statement ToImmutable();
		/// <summary>
		/// Convert the <see cref="StatementBuilder"/> object to an immutable <see cref="Statement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Statement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Local : Declaration
	{
	
	
		/// <summary>
		/// Convert the <see cref="Local"/> object to a builder <see cref="LocalBuilder"/> object.
		/// </summary>
		new LocalBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Local"/> object to a builder <see cref="LocalBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new LocalBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface LocalBuilder : DeclarationBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="LocalBuilder"/> object to an immutable <see cref="Local"/> object.
		/// </summary>
		new Local ToImmutable();
		/// <summary>
		/// Convert the <see cref="LocalBuilder"/> object to an immutable <see cref="Local"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Local ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Variable : Local
	{
		bool IsConst { get; }
		DataType Type { get; }
		Expression DefaultValue { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Variable"/> object to a builder <see cref="VariableBuilder"/> object.
		/// </summary>
		new VariableBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Variable"/> object to a builder <see cref="VariableBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new VariableBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface VariableBuilder : LocalBuilder
	{
		bool IsConst { get; set; }
		void SetIsConstLazy(global::System.Func<bool> lazy);
		void SetIsConstLazy(global::System.Func<VariableBuilder, bool> lazy);
		void SetIsConstLazy(global::System.Func<Variable, bool> immutableLazy, global::System.Func<VariableBuilder, bool> mutableLazy);
		DataTypeBuilder Type { get; set; }
		void SetTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetTypeLazy(global::System.Func<VariableBuilder, DataTypeBuilder> lazy);
		void SetTypeLazy(global::System.Func<Variable, DataType> immutableLazy, global::System.Func<VariableBuilder, DataTypeBuilder> mutableLazy);
		ExpressionBuilder DefaultValue { get; set; }
		void SetDefaultValueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetDefaultValueLazy(global::System.Func<VariableBuilder, ExpressionBuilder> lazy);
		void SetDefaultValueLazy(global::System.Func<Variable, Expression> immutableLazy, global::System.Func<VariableBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="VariableBuilder"/> object to an immutable <see cref="Variable"/> object.
		/// </summary>
		new Variable ToImmutable();
		/// <summary>
		/// Convert the <see cref="VariableBuilder"/> object to an immutable <see cref="Variable"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Variable ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Label : Local
	{
	
	
		/// <summary>
		/// Convert the <see cref="Label"/> object to a builder <see cref="LabelBuilder"/> object.
		/// </summary>
		new LabelBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Label"/> object to a builder <see cref="LabelBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new LabelBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface LabelBuilder : LocalBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="LabelBuilder"/> object to an immutable <see cref="Label"/> object.
		/// </summary>
		new Label ToImmutable();
		/// <summary>
		/// Convert the <see cref="LabelBuilder"/> object to an immutable <see cref="Label"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Label ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface BlockStatement : Statement
	{
		global::MetaDslx.Modeling.ImmutableModelList<Statement> Statements { get; }
	
	
		/// <summary>
		/// Convert the <see cref="BlockStatement"/> object to a builder <see cref="BlockStatementBuilder"/> object.
		/// </summary>
		new BlockStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="BlockStatement"/> object to a builder <see cref="BlockStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new BlockStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface BlockStatementBuilder : StatementBuilder
	{
		global::MetaDslx.Modeling.MutableModelList<StatementBuilder> Statements { get; }
	
	
		/// <summary>
		/// Convert the <see cref="BlockStatementBuilder"/> object to an immutable <see cref="BlockStatement"/> object.
		/// </summary>
		new BlockStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="BlockStatementBuilder"/> object to an immutable <see cref="BlockStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new BlockStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface EmptyStatement : Statement
	{
	
	
		/// <summary>
		/// Convert the <see cref="EmptyStatement"/> object to a builder <see cref="EmptyStatementBuilder"/> object.
		/// </summary>
		new EmptyStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="EmptyStatement"/> object to a builder <see cref="EmptyStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new EmptyStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface EmptyStatementBuilder : StatementBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="EmptyStatementBuilder"/> object to an immutable <see cref="EmptyStatement"/> object.
		/// </summary>
		new EmptyStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="EmptyStatementBuilder"/> object to an immutable <see cref="EmptyStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new EmptyStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ExpressionStatement : Statement
	{
		Expression Expression { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ExpressionStatement"/> object to a builder <see cref="ExpressionStatementBuilder"/> object.
		/// </summary>
		new ExpressionStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ExpressionStatement"/> object to a builder <see cref="ExpressionStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ExpressionStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ExpressionStatementBuilder : StatementBuilder
	{
		ExpressionBuilder Expression { get; set; }
		void SetExpressionLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetExpressionLazy(global::System.Func<ExpressionStatementBuilder, ExpressionBuilder> lazy);
		void SetExpressionLazy(global::System.Func<ExpressionStatement, Expression> immutableLazy, global::System.Func<ExpressionStatementBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ExpressionStatementBuilder"/> object to an immutable <see cref="ExpressionStatement"/> object.
		/// </summary>
		new ExpressionStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="ExpressionStatementBuilder"/> object to an immutable <see cref="ExpressionStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ExpressionStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ForEachLoopStatement : Statement
	{
		Expression LoopControlVariable { get; }
		Expression Collection { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ForEachLoopStatement"/> object to a builder <see cref="ForEachLoopStatementBuilder"/> object.
		/// </summary>
		new ForEachLoopStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ForEachLoopStatement"/> object to a builder <see cref="ForEachLoopStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ForEachLoopStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ForEachLoopStatementBuilder : StatementBuilder
	{
		ExpressionBuilder LoopControlVariable { get; set; }
		void SetLoopControlVariableLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetLoopControlVariableLazy(global::System.Func<ForEachLoopStatementBuilder, ExpressionBuilder> lazy);
		void SetLoopControlVariableLazy(global::System.Func<ForEachLoopStatement, Expression> immutableLazy, global::System.Func<ForEachLoopStatementBuilder, ExpressionBuilder> mutableLazy);
		ExpressionBuilder Collection { get; set; }
		void SetCollectionLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetCollectionLazy(global::System.Func<ForEachLoopStatementBuilder, ExpressionBuilder> lazy);
		void SetCollectionLazy(global::System.Func<ForEachLoopStatement, Expression> immutableLazy, global::System.Func<ForEachLoopStatementBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ForEachLoopStatementBuilder"/> object to an immutable <see cref="ForEachLoopStatement"/> object.
		/// </summary>
		new ForEachLoopStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="ForEachLoopStatementBuilder"/> object to an immutable <see cref="ForEachLoopStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ForEachLoopStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ForLoopStatement : Statement
	{
		global::MetaDslx.Modeling.ImmutableModelList<Statement> Before { get; }
		Expression Condition { get; }
		global::MetaDslx.Modeling.ImmutableModelList<Statement> AtLoopBottom { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ForLoopStatement"/> object to a builder <see cref="ForLoopStatementBuilder"/> object.
		/// </summary>
		new ForLoopStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ForLoopStatement"/> object to a builder <see cref="ForLoopStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ForLoopStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ForLoopStatementBuilder : StatementBuilder
	{
		global::MetaDslx.Modeling.MutableModelList<StatementBuilder> Before { get; }
		ExpressionBuilder Condition { get; set; }
		void SetConditionLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetConditionLazy(global::System.Func<ForLoopStatementBuilder, ExpressionBuilder> lazy);
		void SetConditionLazy(global::System.Func<ForLoopStatement, Expression> immutableLazy, global::System.Func<ForLoopStatementBuilder, ExpressionBuilder> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<StatementBuilder> AtLoopBottom { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ForLoopStatementBuilder"/> object to an immutable <see cref="ForLoopStatement"/> object.
		/// </summary>
		new ForLoopStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="ForLoopStatementBuilder"/> object to an immutable <see cref="ForLoopStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ForLoopStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ForToLoopStatement : Statement
	{
		Expression LoopControlVariable { get; }
		Expression InitialValue { get; }
		Expression LimitValue { get; }
		Expression StepValue { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ForToLoopStatement"/> object to a builder <see cref="ForToLoopStatementBuilder"/> object.
		/// </summary>
		new ForToLoopStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ForToLoopStatement"/> object to a builder <see cref="ForToLoopStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ForToLoopStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ForToLoopStatementBuilder : StatementBuilder
	{
		ExpressionBuilder LoopControlVariable { get; set; }
		void SetLoopControlVariableLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetLoopControlVariableLazy(global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> lazy);
		void SetLoopControlVariableLazy(global::System.Func<ForToLoopStatement, Expression> immutableLazy, global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> mutableLazy);
		ExpressionBuilder InitialValue { get; set; }
		void SetInitialValueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetInitialValueLazy(global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> lazy);
		void SetInitialValueLazy(global::System.Func<ForToLoopStatement, Expression> immutableLazy, global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> mutableLazy);
		ExpressionBuilder LimitValue { get; set; }
		void SetLimitValueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetLimitValueLazy(global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> lazy);
		void SetLimitValueLazy(global::System.Func<ForToLoopStatement, Expression> immutableLazy, global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> mutableLazy);
		ExpressionBuilder StepValue { get; set; }
		void SetStepValueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetStepValueLazy(global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> lazy);
		void SetStepValueLazy(global::System.Func<ForToLoopStatement, Expression> immutableLazy, global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ForToLoopStatementBuilder"/> object to an immutable <see cref="ForToLoopStatement"/> object.
		/// </summary>
		new ForToLoopStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="ForToLoopStatementBuilder"/> object to an immutable <see cref="ForToLoopStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ForToLoopStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface IfStatement : Statement
	{
		Expression Condition { get; }
		Statement IfTrue { get; }
		Statement IfFalse { get; }
	
	
		/// <summary>
		/// Convert the <see cref="IfStatement"/> object to a builder <see cref="IfStatementBuilder"/> object.
		/// </summary>
		new IfStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="IfStatement"/> object to a builder <see cref="IfStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new IfStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface IfStatementBuilder : StatementBuilder
	{
		ExpressionBuilder Condition { get; set; }
		void SetConditionLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetConditionLazy(global::System.Func<IfStatementBuilder, ExpressionBuilder> lazy);
		void SetConditionLazy(global::System.Func<IfStatement, Expression> immutableLazy, global::System.Func<IfStatementBuilder, ExpressionBuilder> mutableLazy);
		StatementBuilder IfTrue { get; set; }
		void SetIfTrueLazy(global::System.Func<StatementBuilder> lazy);
		void SetIfTrueLazy(global::System.Func<IfStatementBuilder, StatementBuilder> lazy);
		void SetIfTrueLazy(global::System.Func<IfStatement, Statement> immutableLazy, global::System.Func<IfStatementBuilder, StatementBuilder> mutableLazy);
		StatementBuilder IfFalse { get; set; }
		void SetIfFalseLazy(global::System.Func<StatementBuilder> lazy);
		void SetIfFalseLazy(global::System.Func<IfStatementBuilder, StatementBuilder> lazy);
		void SetIfFalseLazy(global::System.Func<IfStatement, Statement> immutableLazy, global::System.Func<IfStatementBuilder, StatementBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="IfStatementBuilder"/> object to an immutable <see cref="IfStatement"/> object.
		/// </summary>
		new IfStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="IfStatementBuilder"/> object to an immutable <see cref="IfStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new IfStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface JumpStatement : Statement
	{
		object JumpKind { get; }
		Label Target { get; }
	
	
		/// <summary>
		/// Convert the <see cref="JumpStatement"/> object to a builder <see cref="JumpStatementBuilder"/> object.
		/// </summary>
		new JumpStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="JumpStatement"/> object to a builder <see cref="JumpStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new JumpStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface JumpStatementBuilder : StatementBuilder
	{
		object JumpKind { get; set; }
		void SetJumpKindLazy(global::System.Func<object> lazy);
		void SetJumpKindLazy(global::System.Func<JumpStatementBuilder, object> lazy);
		void SetJumpKindLazy(global::System.Func<JumpStatement, object> immutableLazy, global::System.Func<JumpStatementBuilder, object> mutableLazy);
		LabelBuilder Target { get; set; }
		void SetTargetLazy(global::System.Func<LabelBuilder> lazy);
		void SetTargetLazy(global::System.Func<JumpStatementBuilder, LabelBuilder> lazy);
		void SetTargetLazy(global::System.Func<JumpStatement, Label> immutableLazy, global::System.Func<JumpStatementBuilder, LabelBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="JumpStatementBuilder"/> object to an immutable <see cref="JumpStatement"/> object.
		/// </summary>
		new JumpStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="JumpStatementBuilder"/> object to an immutable <see cref="JumpStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new JumpStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface LabeledStatement : Statement
	{
		Label Label { get; }
		Statement Statement { get; }
	
	
		/// <summary>
		/// Convert the <see cref="LabeledStatement"/> object to a builder <see cref="LabeledStatementBuilder"/> object.
		/// </summary>
		new LabeledStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="LabeledStatement"/> object to a builder <see cref="LabeledStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new LabeledStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface LabeledStatementBuilder : StatementBuilder
	{
		LabelBuilder Label { get; set; }
		void SetLabelLazy(global::System.Func<LabelBuilder> lazy);
		void SetLabelLazy(global::System.Func<LabeledStatementBuilder, LabelBuilder> lazy);
		void SetLabelLazy(global::System.Func<LabeledStatement, Label> immutableLazy, global::System.Func<LabeledStatementBuilder, LabelBuilder> mutableLazy);
		StatementBuilder Statement { get; set; }
		void SetStatementLazy(global::System.Func<StatementBuilder> lazy);
		void SetStatementLazy(global::System.Func<LabeledStatementBuilder, StatementBuilder> lazy);
		void SetStatementLazy(global::System.Func<LabeledStatement, Statement> immutableLazy, global::System.Func<LabeledStatementBuilder, StatementBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="LabeledStatementBuilder"/> object to an immutable <see cref="LabeledStatement"/> object.
		/// </summary>
		new LabeledStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="LabeledStatementBuilder"/> object to an immutable <see cref="LabeledStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new LabeledStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface LockStatement : Statement
	{
		Expression LockedValue { get; }
		Statement Body { get; }
	
	
		/// <summary>
		/// Convert the <see cref="LockStatement"/> object to a builder <see cref="LockStatementBuilder"/> object.
		/// </summary>
		new LockStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="LockStatement"/> object to a builder <see cref="LockStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new LockStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface LockStatementBuilder : StatementBuilder
	{
		ExpressionBuilder LockedValue { get; set; }
		void SetLockedValueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetLockedValueLazy(global::System.Func<LockStatementBuilder, ExpressionBuilder> lazy);
		void SetLockedValueLazy(global::System.Func<LockStatement, Expression> immutableLazy, global::System.Func<LockStatementBuilder, ExpressionBuilder> mutableLazy);
		StatementBuilder Body { get; set; }
		void SetBodyLazy(global::System.Func<StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<LockStatementBuilder, StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<LockStatement, Statement> immutableLazy, global::System.Func<LockStatementBuilder, StatementBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="LockStatementBuilder"/> object to an immutable <see cref="LockStatement"/> object.
		/// </summary>
		new LockStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="LockStatementBuilder"/> object to an immutable <see cref="LockStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new LockStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface LoopStatement : Statement
	{
		Statement Body { get; }
	
	
		/// <summary>
		/// Convert the <see cref="LoopStatement"/> object to a builder <see cref="LoopStatementBuilder"/> object.
		/// </summary>
		new LoopStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="LoopStatement"/> object to a builder <see cref="LoopStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new LoopStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface LoopStatementBuilder : StatementBuilder
	{
		StatementBuilder Body { get; set; }
		void SetBodyLazy(global::System.Func<StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<LoopStatementBuilder, StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<LoopStatement, Statement> immutableLazy, global::System.Func<LoopStatementBuilder, StatementBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="LoopStatementBuilder"/> object to an immutable <see cref="LoopStatement"/> object.
		/// </summary>
		new LoopStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="LoopStatementBuilder"/> object to an immutable <see cref="LoopStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new LoopStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ReturnStatement : Statement
	{
		Expression ReturnedValue { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ReturnStatement"/> object to a builder <see cref="ReturnStatementBuilder"/> object.
		/// </summary>
		new ReturnStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ReturnStatement"/> object to a builder <see cref="ReturnStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ReturnStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ReturnStatementBuilder : StatementBuilder
	{
		ExpressionBuilder ReturnedValue { get; set; }
		void SetReturnedValueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetReturnedValueLazy(global::System.Func<ReturnStatementBuilder, ExpressionBuilder> lazy);
		void SetReturnedValueLazy(global::System.Func<ReturnStatement, Expression> immutableLazy, global::System.Func<ReturnStatementBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ReturnStatementBuilder"/> object to an immutable <see cref="ReturnStatement"/> object.
		/// </summary>
		new ReturnStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="ReturnStatementBuilder"/> object to an immutable <see cref="ReturnStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ReturnStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface SwitchStatement : Statement
	{
		Expression Value { get; }
		global::MetaDslx.Modeling.ImmutableModelList<SwitchCase> Cases { get; }
	
	
		/// <summary>
		/// Convert the <see cref="SwitchStatement"/> object to a builder <see cref="SwitchStatementBuilder"/> object.
		/// </summary>
		new SwitchStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="SwitchStatement"/> object to a builder <see cref="SwitchStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new SwitchStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface SwitchStatementBuilder : StatementBuilder
	{
		ExpressionBuilder Value { get; set; }
		void SetValueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetValueLazy(global::System.Func<SwitchStatementBuilder, ExpressionBuilder> lazy);
		void SetValueLazy(global::System.Func<SwitchStatement, Expression> immutableLazy, global::System.Func<SwitchStatementBuilder, ExpressionBuilder> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<SwitchCaseBuilder> Cases { get; }
	
	
		/// <summary>
		/// Convert the <see cref="SwitchStatementBuilder"/> object to an immutable <see cref="SwitchStatement"/> object.
		/// </summary>
		new SwitchStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="SwitchStatementBuilder"/> object to an immutable <see cref="SwitchStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new SwitchStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface SwitchCase : Element
	{
		global::MetaDslx.Modeling.ImmutableModelList<CaseClause> Clauses { get; }
		Statement Body { get; }
	
	
		/// <summary>
		/// Convert the <see cref="SwitchCase"/> object to a builder <see cref="SwitchCaseBuilder"/> object.
		/// </summary>
		new SwitchCaseBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="SwitchCase"/> object to a builder <see cref="SwitchCaseBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new SwitchCaseBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface SwitchCaseBuilder : ElementBuilder
	{
		global::MetaDslx.Modeling.MutableModelList<CaseClauseBuilder> Clauses { get; }
		StatementBuilder Body { get; set; }
		void SetBodyLazy(global::System.Func<StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<SwitchCaseBuilder, StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<SwitchCase, Statement> immutableLazy, global::System.Func<SwitchCaseBuilder, StatementBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="SwitchCaseBuilder"/> object to an immutable <see cref="SwitchCase"/> object.
		/// </summary>
		new SwitchCase ToImmutable();
		/// <summary>
		/// Convert the <see cref="SwitchCaseBuilder"/> object to an immutable <see cref="SwitchCase"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new SwitchCase ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface CaseClause : Element
	{
		Label Label { get; }
	
	
		/// <summary>
		/// Convert the <see cref="CaseClause"/> object to a builder <see cref="CaseClauseBuilder"/> object.
		/// </summary>
		new CaseClauseBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="CaseClause"/> object to a builder <see cref="CaseClauseBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new CaseClauseBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface CaseClauseBuilder : ElementBuilder
	{
		LabelBuilder Label { get; set; }
		void SetLabelLazy(global::System.Func<LabelBuilder> lazy);
		void SetLabelLazy(global::System.Func<CaseClauseBuilder, LabelBuilder> lazy);
		void SetLabelLazy(global::System.Func<CaseClause, Label> immutableLazy, global::System.Func<CaseClauseBuilder, LabelBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="CaseClauseBuilder"/> object to an immutable <see cref="CaseClause"/> object.
		/// </summary>
		new CaseClause ToImmutable();
		/// <summary>
		/// Convert the <see cref="CaseClauseBuilder"/> object to an immutable <see cref="CaseClause"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new CaseClause ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface DefaultValueCaseClause : CaseClause
	{
	
	
		/// <summary>
		/// Convert the <see cref="DefaultValueCaseClause"/> object to a builder <see cref="DefaultValueCaseClauseBuilder"/> object.
		/// </summary>
		new DefaultValueCaseClauseBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="DefaultValueCaseClause"/> object to a builder <see cref="DefaultValueCaseClauseBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new DefaultValueCaseClauseBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface DefaultValueCaseClauseBuilder : CaseClauseBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="DefaultValueCaseClauseBuilder"/> object to an immutable <see cref="DefaultValueCaseClause"/> object.
		/// </summary>
		new DefaultValueCaseClause ToImmutable();
		/// <summary>
		/// Convert the <see cref="DefaultValueCaseClauseBuilder"/> object to an immutable <see cref="DefaultValueCaseClause"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new DefaultValueCaseClause ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface SingleValueCaseClause : CaseClause
	{
		Expression Value { get; }
	
	
		/// <summary>
		/// Convert the <see cref="SingleValueCaseClause"/> object to a builder <see cref="SingleValueCaseClauseBuilder"/> object.
		/// </summary>
		new SingleValueCaseClauseBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="SingleValueCaseClause"/> object to a builder <see cref="SingleValueCaseClauseBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new SingleValueCaseClauseBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface SingleValueCaseClauseBuilder : CaseClauseBuilder
	{
		ExpressionBuilder Value { get; set; }
		void SetValueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetValueLazy(global::System.Func<SingleValueCaseClauseBuilder, ExpressionBuilder> lazy);
		void SetValueLazy(global::System.Func<SingleValueCaseClause, Expression> immutableLazy, global::System.Func<SingleValueCaseClauseBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="SingleValueCaseClauseBuilder"/> object to an immutable <see cref="SingleValueCaseClause"/> object.
		/// </summary>
		new SingleValueCaseClause ToImmutable();
		/// <summary>
		/// Convert the <see cref="SingleValueCaseClauseBuilder"/> object to an immutable <see cref="SingleValueCaseClause"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new SingleValueCaseClause ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface TryStatement : Statement
	{
		Statement Body { get; }
		global::MetaDslx.Modeling.ImmutableModelList<CatchClause> Catches { get; }
		Statement Finally { get; }
		Label ExitLabel { get; }
	
	
		/// <summary>
		/// Convert the <see cref="TryStatement"/> object to a builder <see cref="TryStatementBuilder"/> object.
		/// </summary>
		new TryStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="TryStatement"/> object to a builder <see cref="TryStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new TryStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface TryStatementBuilder : StatementBuilder
	{
		StatementBuilder Body { get; set; }
		void SetBodyLazy(global::System.Func<StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<TryStatementBuilder, StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<TryStatement, Statement> immutableLazy, global::System.Func<TryStatementBuilder, StatementBuilder> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<CatchClauseBuilder> Catches { get; }
		StatementBuilder Finally { get; set; }
		void SetFinallyLazy(global::System.Func<StatementBuilder> lazy);
		void SetFinallyLazy(global::System.Func<TryStatementBuilder, StatementBuilder> lazy);
		void SetFinallyLazy(global::System.Func<TryStatement, Statement> immutableLazy, global::System.Func<TryStatementBuilder, StatementBuilder> mutableLazy);
		LabelBuilder ExitLabel { get; set; }
		void SetExitLabelLazy(global::System.Func<LabelBuilder> lazy);
		void SetExitLabelLazy(global::System.Func<TryStatementBuilder, LabelBuilder> lazy);
		void SetExitLabelLazy(global::System.Func<TryStatement, Label> immutableLazy, global::System.Func<TryStatementBuilder, LabelBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="TryStatementBuilder"/> object to an immutable <see cref="TryStatement"/> object.
		/// </summary>
		new TryStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="TryStatementBuilder"/> object to an immutable <see cref="TryStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new TryStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface CatchClause : Element
	{
		Expression ExceptionDeclarationOrExpression { get; }
		Expression Filter { get; }
		Statement Handler { get; }
	
	
		/// <summary>
		/// Convert the <see cref="CatchClause"/> object to a builder <see cref="CatchClauseBuilder"/> object.
		/// </summary>
		new CatchClauseBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="CatchClause"/> object to a builder <see cref="CatchClauseBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new CatchClauseBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface CatchClauseBuilder : ElementBuilder
	{
		ExpressionBuilder ExceptionDeclarationOrExpression { get; set; }
		void SetExceptionDeclarationOrExpressionLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetExceptionDeclarationOrExpressionLazy(global::System.Func<CatchClauseBuilder, ExpressionBuilder> lazy);
		void SetExceptionDeclarationOrExpressionLazy(global::System.Func<CatchClause, Expression> immutableLazy, global::System.Func<CatchClauseBuilder, ExpressionBuilder> mutableLazy);
		ExpressionBuilder Filter { get; set; }
		void SetFilterLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetFilterLazy(global::System.Func<CatchClauseBuilder, ExpressionBuilder> lazy);
		void SetFilterLazy(global::System.Func<CatchClause, Expression> immutableLazy, global::System.Func<CatchClauseBuilder, ExpressionBuilder> mutableLazy);
		StatementBuilder Handler { get; set; }
		void SetHandlerLazy(global::System.Func<StatementBuilder> lazy);
		void SetHandlerLazy(global::System.Func<CatchClauseBuilder, StatementBuilder> lazy);
		void SetHandlerLazy(global::System.Func<CatchClause, Statement> immutableLazy, global::System.Func<CatchClauseBuilder, StatementBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="CatchClauseBuilder"/> object to an immutable <see cref="CatchClause"/> object.
		/// </summary>
		new CatchClause ToImmutable();
		/// <summary>
		/// Convert the <see cref="CatchClauseBuilder"/> object to an immutable <see cref="CatchClause"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new CatchClause ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface UsingStatement : Statement
	{
		Expression Resources { get; }
		Statement Body { get; }
	
	
		/// <summary>
		/// Convert the <see cref="UsingStatement"/> object to a builder <see cref="UsingStatementBuilder"/> object.
		/// </summary>
		new UsingStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="UsingStatement"/> object to a builder <see cref="UsingStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new UsingStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface UsingStatementBuilder : StatementBuilder
	{
		ExpressionBuilder Resources { get; set; }
		void SetResourcesLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetResourcesLazy(global::System.Func<UsingStatementBuilder, ExpressionBuilder> lazy);
		void SetResourcesLazy(global::System.Func<UsingStatement, Expression> immutableLazy, global::System.Func<UsingStatementBuilder, ExpressionBuilder> mutableLazy);
		StatementBuilder Body { get; set; }
		void SetBodyLazy(global::System.Func<StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<UsingStatementBuilder, StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<UsingStatement, Statement> immutableLazy, global::System.Func<UsingStatementBuilder, StatementBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="UsingStatementBuilder"/> object to an immutable <see cref="UsingStatement"/> object.
		/// </summary>
		new UsingStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="UsingStatementBuilder"/> object to an immutable <see cref="UsingStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new UsingStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface WhileLoopStatement : Statement
	{
		Expression Condition { get; }
		bool ConditionIsTop { get; }
		bool ConditionIsUntil { get; }
	
	
		/// <summary>
		/// Convert the <see cref="WhileLoopStatement"/> object to a builder <see cref="WhileLoopStatementBuilder"/> object.
		/// </summary>
		new WhileLoopStatementBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="WhileLoopStatement"/> object to a builder <see cref="WhileLoopStatementBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new WhileLoopStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface WhileLoopStatementBuilder : StatementBuilder
	{
		ExpressionBuilder Condition { get; set; }
		void SetConditionLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetConditionLazy(global::System.Func<WhileLoopStatementBuilder, ExpressionBuilder> lazy);
		void SetConditionLazy(global::System.Func<WhileLoopStatement, Expression> immutableLazy, global::System.Func<WhileLoopStatementBuilder, ExpressionBuilder> mutableLazy);
		bool ConditionIsTop { get; set; }
		void SetConditionIsTopLazy(global::System.Func<bool> lazy);
		void SetConditionIsTopLazy(global::System.Func<WhileLoopStatementBuilder, bool> lazy);
		void SetConditionIsTopLazy(global::System.Func<WhileLoopStatement, bool> immutableLazy, global::System.Func<WhileLoopStatementBuilder, bool> mutableLazy);
		bool ConditionIsUntil { get; set; }
		void SetConditionIsUntilLazy(global::System.Func<bool> lazy);
		void SetConditionIsUntilLazy(global::System.Func<WhileLoopStatementBuilder, bool> lazy);
		void SetConditionIsUntilLazy(global::System.Func<WhileLoopStatement, bool> immutableLazy, global::System.Func<WhileLoopStatementBuilder, bool> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="WhileLoopStatementBuilder"/> object to an immutable <see cref="WhileLoopStatement"/> object.
		/// </summary>
		new WhileLoopStatement ToImmutable();
		/// <summary>
		/// Convert the <see cref="WhileLoopStatementBuilder"/> object to an immutable <see cref="WhileLoopStatement"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new WhileLoopStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Expression : Element
	{
		DataType Type { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Expression"/> object to a builder <see cref="ExpressionBuilder"/> object.
		/// </summary>
		new ExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Expression"/> object to a builder <see cref="ExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ExpressionBuilder : ElementBuilder
	{
		DataTypeBuilder Type { get; set; }
		void SetTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy);
		void SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ExpressionBuilder"/> object to an immutable <see cref="Expression"/> object.
		/// </summary>
		new Expression ToImmutable();
		/// <summary>
		/// Convert the <see cref="ExpressionBuilder"/> object to an immutable <see cref="Expression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Expression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface Argument : Expression, NamedElement
	{
		Expression Value { get; }
	
	
		/// <summary>
		/// Convert the <see cref="Argument"/> object to a builder <see cref="ArgumentBuilder"/> object.
		/// </summary>
		new ArgumentBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="Argument"/> object to a builder <see cref="ArgumentBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ArgumentBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ArgumentBuilder : ExpressionBuilder, NamedElementBuilder
	{
		ExpressionBuilder Value { get; set; }
		void SetValueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetValueLazy(global::System.Func<ArgumentBuilder, ExpressionBuilder> lazy);
		void SetValueLazy(global::System.Func<Argument, Expression> immutableLazy, global::System.Func<ArgumentBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ArgumentBuilder"/> object to an immutable <see cref="Argument"/> object.
		/// </summary>
		new Argument ToImmutable();
		/// <summary>
		/// Convert the <see cref="ArgumentBuilder"/> object to an immutable <see cref="Argument"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new Argument ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface AssignmentExpression : Expression
	{
		Expression Target { get; }
		Expression Value { get; }
	
	
		/// <summary>
		/// Convert the <see cref="AssignmentExpression"/> object to a builder <see cref="AssignmentExpressionBuilder"/> object.
		/// </summary>
		new AssignmentExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="AssignmentExpression"/> object to a builder <see cref="AssignmentExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new AssignmentExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface AssignmentExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Target { get; set; }
		void SetTargetLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetTargetLazy(global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> lazy);
		void SetTargetLazy(global::System.Func<AssignmentExpression, Expression> immutableLazy, global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> mutableLazy);
		ExpressionBuilder Value { get; set; }
		void SetValueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetValueLazy(global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> lazy);
		void SetValueLazy(global::System.Func<AssignmentExpression, Expression> immutableLazy, global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="AssignmentExpressionBuilder"/> object to an immutable <see cref="AssignmentExpression"/> object.
		/// </summary>
		new AssignmentExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="AssignmentExpressionBuilder"/> object to an immutable <see cref="AssignmentExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new AssignmentExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface AwaitExpression : Expression
	{
		Expression Operation { get; }
	
	
		/// <summary>
		/// Convert the <see cref="AwaitExpression"/> object to a builder <see cref="AwaitExpressionBuilder"/> object.
		/// </summary>
		new AwaitExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="AwaitExpression"/> object to a builder <see cref="AwaitExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new AwaitExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface AwaitExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Operation { get; set; }
		void SetOperationLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetOperationLazy(global::System.Func<AwaitExpressionBuilder, ExpressionBuilder> lazy);
		void SetOperationLazy(global::System.Func<AwaitExpression, Expression> immutableLazy, global::System.Func<AwaitExpressionBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="AwaitExpressionBuilder"/> object to an immutable <see cref="AwaitExpression"/> object.
		/// </summary>
		new AwaitExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="AwaitExpressionBuilder"/> object to an immutable <see cref="AwaitExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new AwaitExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface BinaryExpression : Expression
	{
		object OperatorKind { get; }
		Expression LeftOperand { get; }
		Expression RightOperand { get; }
		bool IsChecked { get; }
		BinaryOperator OperatorMethod { get; }
	
	
		/// <summary>
		/// Convert the <see cref="BinaryExpression"/> object to a builder <see cref="BinaryExpressionBuilder"/> object.
		/// </summary>
		new BinaryExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="BinaryExpression"/> object to a builder <see cref="BinaryExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new BinaryExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface BinaryExpressionBuilder : ExpressionBuilder
	{
		object OperatorKind { get; set; }
		void SetOperatorKindLazy(global::System.Func<object> lazy);
		void SetOperatorKindLazy(global::System.Func<BinaryExpressionBuilder, object> lazy);
		void SetOperatorKindLazy(global::System.Func<BinaryExpression, object> immutableLazy, global::System.Func<BinaryExpressionBuilder, object> mutableLazy);
		ExpressionBuilder LeftOperand { get; set; }
		void SetLeftOperandLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetLeftOperandLazy(global::System.Func<BinaryExpressionBuilder, ExpressionBuilder> lazy);
		void SetLeftOperandLazy(global::System.Func<BinaryExpression, Expression> immutableLazy, global::System.Func<BinaryExpressionBuilder, ExpressionBuilder> mutableLazy);
		ExpressionBuilder RightOperand { get; set; }
		void SetRightOperandLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetRightOperandLazy(global::System.Func<BinaryExpressionBuilder, ExpressionBuilder> lazy);
		void SetRightOperandLazy(global::System.Func<BinaryExpression, Expression> immutableLazy, global::System.Func<BinaryExpressionBuilder, ExpressionBuilder> mutableLazy);
		bool IsChecked { get; set; }
		void SetIsCheckedLazy(global::System.Func<bool> lazy);
		void SetIsCheckedLazy(global::System.Func<BinaryExpressionBuilder, bool> lazy);
		void SetIsCheckedLazy(global::System.Func<BinaryExpression, bool> immutableLazy, global::System.Func<BinaryExpressionBuilder, bool> mutableLazy);
		BinaryOperatorBuilder OperatorMethod { get; set; }
		void SetOperatorMethodLazy(global::System.Func<BinaryOperatorBuilder> lazy);
		void SetOperatorMethodLazy(global::System.Func<BinaryExpressionBuilder, BinaryOperatorBuilder> lazy);
		void SetOperatorMethodLazy(global::System.Func<BinaryExpression, BinaryOperator> immutableLazy, global::System.Func<BinaryExpressionBuilder, BinaryOperatorBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="BinaryExpressionBuilder"/> object to an immutable <see cref="BinaryExpression"/> object.
		/// </summary>
		new BinaryExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="BinaryExpressionBuilder"/> object to an immutable <see cref="BinaryExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new BinaryExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface CoalesceExpression : Expression
	{
		Expression Value { get; }
		Expression WhenNull { get; }
	
	
		/// <summary>
		/// Convert the <see cref="CoalesceExpression"/> object to a builder <see cref="CoalesceExpressionBuilder"/> object.
		/// </summary>
		new CoalesceExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="CoalesceExpression"/> object to a builder <see cref="CoalesceExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new CoalesceExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface CoalesceExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Value { get; set; }
		void SetValueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetValueLazy(global::System.Func<CoalesceExpressionBuilder, ExpressionBuilder> lazy);
		void SetValueLazy(global::System.Func<CoalesceExpression, Expression> immutableLazy, global::System.Func<CoalesceExpressionBuilder, ExpressionBuilder> mutableLazy);
		ExpressionBuilder WhenNull { get; set; }
		void SetWhenNullLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetWhenNullLazy(global::System.Func<CoalesceExpressionBuilder, ExpressionBuilder> lazy);
		void SetWhenNullLazy(global::System.Func<CoalesceExpression, Expression> immutableLazy, global::System.Func<CoalesceExpressionBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="CoalesceExpressionBuilder"/> object to an immutable <see cref="CoalesceExpression"/> object.
		/// </summary>
		new CoalesceExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="CoalesceExpressionBuilder"/> object to an immutable <see cref="CoalesceExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new CoalesceExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface CompoundAssignmentExpression : AssignmentExpression
	{
		object OperatorKind { get; }
		bool IsChecked { get; }
	
	
		/// <summary>
		/// Convert the <see cref="CompoundAssignmentExpression"/> object to a builder <see cref="CompoundAssignmentExpressionBuilder"/> object.
		/// </summary>
		new CompoundAssignmentExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="CompoundAssignmentExpression"/> object to a builder <see cref="CompoundAssignmentExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new CompoundAssignmentExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface CompoundAssignmentExpressionBuilder : AssignmentExpressionBuilder
	{
		object OperatorKind { get; set; }
		void SetOperatorKindLazy(global::System.Func<object> lazy);
		void SetOperatorKindLazy(global::System.Func<CompoundAssignmentExpressionBuilder, object> lazy);
		void SetOperatorKindLazy(global::System.Func<CompoundAssignmentExpression, object> immutableLazy, global::System.Func<CompoundAssignmentExpressionBuilder, object> mutableLazy);
		bool IsChecked { get; set; }
		void SetIsCheckedLazy(global::System.Func<bool> lazy);
		void SetIsCheckedLazy(global::System.Func<CompoundAssignmentExpressionBuilder, bool> lazy);
		void SetIsCheckedLazy(global::System.Func<CompoundAssignmentExpression, bool> immutableLazy, global::System.Func<CompoundAssignmentExpressionBuilder, bool> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="CompoundAssignmentExpressionBuilder"/> object to an immutable <see cref="CompoundAssignmentExpression"/> object.
		/// </summary>
		new CompoundAssignmentExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="CompoundAssignmentExpressionBuilder"/> object to an immutable <see cref="CompoundAssignmentExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new CompoundAssignmentExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ConditionalExpression : Expression
	{
		Expression Condition { get; }
		Expression WhenTrue { get; }
		Expression WhenFalse { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ConditionalExpression"/> object to a builder <see cref="ConditionalExpressionBuilder"/> object.
		/// </summary>
		new ConditionalExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ConditionalExpression"/> object to a builder <see cref="ConditionalExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ConditionalExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ConditionalExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Condition { get; set; }
		void SetConditionLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetConditionLazy(global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> lazy);
		void SetConditionLazy(global::System.Func<ConditionalExpression, Expression> immutableLazy, global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> mutableLazy);
		ExpressionBuilder WhenTrue { get; set; }
		void SetWhenTrueLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetWhenTrueLazy(global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> lazy);
		void SetWhenTrueLazy(global::System.Func<ConditionalExpression, Expression> immutableLazy, global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> mutableLazy);
		ExpressionBuilder WhenFalse { get; set; }
		void SetWhenFalseLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetWhenFalseLazy(global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> lazy);
		void SetWhenFalseLazy(global::System.Func<ConditionalExpression, Expression> immutableLazy, global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ConditionalExpressionBuilder"/> object to an immutable <see cref="ConditionalExpression"/> object.
		/// </summary>
		new ConditionalExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="ConditionalExpressionBuilder"/> object to an immutable <see cref="ConditionalExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ConditionalExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ConversionExpression : Expression
	{
		Expression Operand { get; }
		DataType TargetType { get; }
		bool IsTryCast { get; }
		bool IsChecked { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ConversionExpression"/> object to a builder <see cref="ConversionExpressionBuilder"/> object.
		/// </summary>
		new ConversionExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ConversionExpression"/> object to a builder <see cref="ConversionExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ConversionExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ConversionExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Operand { get; set; }
		void SetOperandLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetOperandLazy(global::System.Func<ConversionExpressionBuilder, ExpressionBuilder> lazy);
		void SetOperandLazy(global::System.Func<ConversionExpression, Expression> immutableLazy, global::System.Func<ConversionExpressionBuilder, ExpressionBuilder> mutableLazy);
		DataTypeBuilder TargetType { get; set; }
		void SetTargetTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetTargetTypeLazy(global::System.Func<ConversionExpressionBuilder, DataTypeBuilder> lazy);
		void SetTargetTypeLazy(global::System.Func<ConversionExpression, DataType> immutableLazy, global::System.Func<ConversionExpressionBuilder, DataTypeBuilder> mutableLazy);
		bool IsTryCast { get; set; }
		void SetIsTryCastLazy(global::System.Func<bool> lazy);
		void SetIsTryCastLazy(global::System.Func<ConversionExpressionBuilder, bool> lazy);
		void SetIsTryCastLazy(global::System.Func<ConversionExpression, bool> immutableLazy, global::System.Func<ConversionExpressionBuilder, bool> mutableLazy);
		bool IsChecked { get; set; }
		void SetIsCheckedLazy(global::System.Func<bool> lazy);
		void SetIsCheckedLazy(global::System.Func<ConversionExpressionBuilder, bool> lazy);
		void SetIsCheckedLazy(global::System.Func<ConversionExpression, bool> immutableLazy, global::System.Func<ConversionExpressionBuilder, bool> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ConversionExpressionBuilder"/> object to an immutable <see cref="ConversionExpression"/> object.
		/// </summary>
		new ConversionExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="ConversionExpressionBuilder"/> object to an immutable <see cref="ConversionExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ConversionExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface DefaultValueExpression : Expression
	{
	
	
		/// <summary>
		/// Convert the <see cref="DefaultValueExpression"/> object to a builder <see cref="DefaultValueExpressionBuilder"/> object.
		/// </summary>
		new DefaultValueExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="DefaultValueExpression"/> object to a builder <see cref="DefaultValueExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new DefaultValueExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface DefaultValueExpressionBuilder : ExpressionBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="DefaultValueExpressionBuilder"/> object to an immutable <see cref="DefaultValueExpression"/> object.
		/// </summary>
		new DefaultValueExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="DefaultValueExpressionBuilder"/> object to an immutable <see cref="DefaultValueExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new DefaultValueExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface DiscardExpression : Expression
	{
	
	
		/// <summary>
		/// Convert the <see cref="DiscardExpression"/> object to a builder <see cref="DiscardExpressionBuilder"/> object.
		/// </summary>
		new DiscardExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="DiscardExpression"/> object to a builder <see cref="DiscardExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new DiscardExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface DiscardExpressionBuilder : ExpressionBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="DiscardExpressionBuilder"/> object to an immutable <see cref="DiscardExpression"/> object.
		/// </summary>
		new DiscardExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="DiscardExpressionBuilder"/> object to an immutable <see cref="DiscardExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new DiscardExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface DynamicExpression : Expression
	{
	
	
		/// <summary>
		/// Convert the <see cref="DynamicExpression"/> object to a builder <see cref="DynamicExpressionBuilder"/> object.
		/// </summary>
		new DynamicExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="DynamicExpression"/> object to a builder <see cref="DynamicExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new DynamicExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface DynamicExpressionBuilder : ExpressionBuilder
	{
	
	
		/// <summary>
		/// Convert the <see cref="DynamicExpressionBuilder"/> object to an immutable <see cref="DynamicExpression"/> object.
		/// </summary>
		new DynamicExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="DynamicExpressionBuilder"/> object to an immutable <see cref="DynamicExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new DynamicExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface IncrementOrDecrementExpression : Expression
	{
		Expression Target { get; }
		bool IsPostfix { get; }
		bool IsChecked { get; }
	
	
		/// <summary>
		/// Convert the <see cref="IncrementOrDecrementExpression"/> object to a builder <see cref="IncrementOrDecrementExpressionBuilder"/> object.
		/// </summary>
		new IncrementOrDecrementExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="IncrementOrDecrementExpression"/> object to a builder <see cref="IncrementOrDecrementExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new IncrementOrDecrementExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface IncrementOrDecrementExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Target { get; set; }
		void SetTargetLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetTargetLazy(global::System.Func<IncrementOrDecrementExpressionBuilder, ExpressionBuilder> lazy);
		void SetTargetLazy(global::System.Func<IncrementOrDecrementExpression, Expression> immutableLazy, global::System.Func<IncrementOrDecrementExpressionBuilder, ExpressionBuilder> mutableLazy);
		bool IsPostfix { get; set; }
		void SetIsPostfixLazy(global::System.Func<bool> lazy);
		void SetIsPostfixLazy(global::System.Func<IncrementOrDecrementExpressionBuilder, bool> lazy);
		void SetIsPostfixLazy(global::System.Func<IncrementOrDecrementExpression, bool> immutableLazy, global::System.Func<IncrementOrDecrementExpressionBuilder, bool> mutableLazy);
		bool IsChecked { get; set; }
		void SetIsCheckedLazy(global::System.Func<bool> lazy);
		void SetIsCheckedLazy(global::System.Func<IncrementOrDecrementExpressionBuilder, bool> lazy);
		void SetIsCheckedLazy(global::System.Func<IncrementOrDecrementExpression, bool> immutableLazy, global::System.Func<IncrementOrDecrementExpressionBuilder, bool> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="IncrementOrDecrementExpressionBuilder"/> object to an immutable <see cref="IncrementOrDecrementExpression"/> object.
		/// </summary>
		new IncrementOrDecrementExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="IncrementOrDecrementExpressionBuilder"/> object to an immutable <see cref="IncrementOrDecrementExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new IncrementOrDecrementExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface IndexerAccessExpression : Expression
	{
		Expression Receiver { get; }
		bool IsNullConditional { get; }
		global::MetaDslx.Modeling.ImmutableModelList<Argument> Arguments { get; }
		Indexer Target { get; }
	
	
		/// <summary>
		/// Convert the <see cref="IndexerAccessExpression"/> object to a builder <see cref="IndexerAccessExpressionBuilder"/> object.
		/// </summary>
		new IndexerAccessExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="IndexerAccessExpression"/> object to a builder <see cref="IndexerAccessExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new IndexerAccessExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface IndexerAccessExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Receiver { get; set; }
		void SetReceiverLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetReceiverLazy(global::System.Func<IndexerAccessExpressionBuilder, ExpressionBuilder> lazy);
		void SetReceiverLazy(global::System.Func<IndexerAccessExpression, Expression> immutableLazy, global::System.Func<IndexerAccessExpressionBuilder, ExpressionBuilder> mutableLazy);
		bool IsNullConditional { get; set; }
		void SetIsNullConditionalLazy(global::System.Func<bool> lazy);
		void SetIsNullConditionalLazy(global::System.Func<IndexerAccessExpressionBuilder, bool> lazy);
		void SetIsNullConditionalLazy(global::System.Func<IndexerAccessExpression, bool> immutableLazy, global::System.Func<IndexerAccessExpressionBuilder, bool> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> Arguments { get; }
		IndexerBuilder Target { get; set; }
		void SetTargetLazy(global::System.Func<IndexerBuilder> lazy);
		void SetTargetLazy(global::System.Func<IndexerAccessExpressionBuilder, IndexerBuilder> lazy);
		void SetTargetLazy(global::System.Func<IndexerAccessExpression, Indexer> immutableLazy, global::System.Func<IndexerAccessExpressionBuilder, IndexerBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="IndexerAccessExpressionBuilder"/> object to an immutable <see cref="IndexerAccessExpression"/> object.
		/// </summary>
		new IndexerAccessExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="IndexerAccessExpressionBuilder"/> object to an immutable <see cref="IndexerAccessExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new IndexerAccessExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface InstanceReferenceExpression : Expression
	{
		NamedType AccessThroughBaseType { get; }
	
	
		/// <summary>
		/// Convert the <see cref="InstanceReferenceExpression"/> object to a builder <see cref="InstanceReferenceExpressionBuilder"/> object.
		/// </summary>
		new InstanceReferenceExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="InstanceReferenceExpression"/> object to a builder <see cref="InstanceReferenceExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new InstanceReferenceExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface InstanceReferenceExpressionBuilder : ExpressionBuilder
	{
		NamedTypeBuilder AccessThroughBaseType { get; set; }
		void SetAccessThroughBaseTypeLazy(global::System.Func<NamedTypeBuilder> lazy);
		void SetAccessThroughBaseTypeLazy(global::System.Func<InstanceReferenceExpressionBuilder, NamedTypeBuilder> lazy);
		void SetAccessThroughBaseTypeLazy(global::System.Func<InstanceReferenceExpression, NamedType> immutableLazy, global::System.Func<InstanceReferenceExpressionBuilder, NamedTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="InstanceReferenceExpressionBuilder"/> object to an immutable <see cref="InstanceReferenceExpression"/> object.
		/// </summary>
		new InstanceReferenceExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="InstanceReferenceExpressionBuilder"/> object to an immutable <see cref="InstanceReferenceExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new InstanceReferenceExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface InvocationExpression : Expression
	{
		Expression Receiver { get; }
		global::MetaDslx.Modeling.ImmutableModelList<Argument> Arguments { get; }
	
	
		/// <summary>
		/// Convert the <see cref="InvocationExpression"/> object to a builder <see cref="InvocationExpressionBuilder"/> object.
		/// </summary>
		new InvocationExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="InvocationExpression"/> object to a builder <see cref="InvocationExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new InvocationExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface InvocationExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Receiver { get; set; }
		void SetReceiverLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetReceiverLazy(global::System.Func<InvocationExpressionBuilder, ExpressionBuilder> lazy);
		void SetReceiverLazy(global::System.Func<InvocationExpression, Expression> immutableLazy, global::System.Func<InvocationExpressionBuilder, ExpressionBuilder> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> Arguments { get; }
	
	
		/// <summary>
		/// Convert the <see cref="InvocationExpressionBuilder"/> object to an immutable <see cref="InvocationExpression"/> object.
		/// </summary>
		new InvocationExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="InvocationExpressionBuilder"/> object to an immutable <see cref="InvocationExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new InvocationExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface IsTypeExpression : Expression
	{
		Expression ValueOperand { get; }
		DataType TypeOperand { get; }
		bool IsNegated { get; }
	
	
		/// <summary>
		/// Convert the <see cref="IsTypeExpression"/> object to a builder <see cref="IsTypeExpressionBuilder"/> object.
		/// </summary>
		new IsTypeExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="IsTypeExpression"/> object to a builder <see cref="IsTypeExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new IsTypeExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface IsTypeExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder ValueOperand { get; set; }
		void SetValueOperandLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetValueOperandLazy(global::System.Func<IsTypeExpressionBuilder, ExpressionBuilder> lazy);
		void SetValueOperandLazy(global::System.Func<IsTypeExpression, Expression> immutableLazy, global::System.Func<IsTypeExpressionBuilder, ExpressionBuilder> mutableLazy);
		DataTypeBuilder TypeOperand { get; set; }
		void SetTypeOperandLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetTypeOperandLazy(global::System.Func<IsTypeExpressionBuilder, DataTypeBuilder> lazy);
		void SetTypeOperandLazy(global::System.Func<IsTypeExpression, DataType> immutableLazy, global::System.Func<IsTypeExpressionBuilder, DataTypeBuilder> mutableLazy);
		bool IsNegated { get; set; }
		void SetIsNegatedLazy(global::System.Func<bool> lazy);
		void SetIsNegatedLazy(global::System.Func<IsTypeExpressionBuilder, bool> lazy);
		void SetIsNegatedLazy(global::System.Func<IsTypeExpression, bool> immutableLazy, global::System.Func<IsTypeExpressionBuilder, bool> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="IsTypeExpressionBuilder"/> object to an immutable <see cref="IsTypeExpression"/> object.
		/// </summary>
		new IsTypeExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="IsTypeExpressionBuilder"/> object to an immutable <see cref="IsTypeExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new IsTypeExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface LambdaExpression : Expression
	{
		DataType ReturnType { get; }
		global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters { get; }
		Statement Body { get; }
	
	
		/// <summary>
		/// Convert the <see cref="LambdaExpression"/> object to a builder <see cref="LambdaExpressionBuilder"/> object.
		/// </summary>
		new LambdaExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="LambdaExpression"/> object to a builder <see cref="LambdaExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new LambdaExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface LambdaExpressionBuilder : ExpressionBuilder
	{
		DataTypeBuilder ReturnType { get; set; }
		void SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetReturnTypeLazy(global::System.Func<LambdaExpressionBuilder, DataTypeBuilder> lazy);
		void SetReturnTypeLazy(global::System.Func<LambdaExpression, DataType> immutableLazy, global::System.Func<LambdaExpressionBuilder, DataTypeBuilder> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters { get; }
		StatementBuilder Body { get; set; }
		void SetBodyLazy(global::System.Func<StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<LambdaExpressionBuilder, StatementBuilder> lazy);
		void SetBodyLazy(global::System.Func<LambdaExpression, Statement> immutableLazy, global::System.Func<LambdaExpressionBuilder, StatementBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="LambdaExpressionBuilder"/> object to an immutable <see cref="LambdaExpression"/> object.
		/// </summary>
		new LambdaExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="LambdaExpressionBuilder"/> object to an immutable <see cref="LambdaExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new LambdaExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface LiteralExpression : Expression
	{
		object Value { get; }
		new DataType Type { get; }
	
	
		/// <summary>
		/// Convert the <see cref="LiteralExpression"/> object to a builder <see cref="LiteralExpressionBuilder"/> object.
		/// </summary>
		new LiteralExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="LiteralExpression"/> object to a builder <see cref="LiteralExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new LiteralExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface LiteralExpressionBuilder : ExpressionBuilder
	{
		object Value { get; set; }
		void SetValueLazy(global::System.Func<object> lazy);
		void SetValueLazy(global::System.Func<LiteralExpressionBuilder, object> lazy);
		void SetValueLazy(global::System.Func<LiteralExpression, object> immutableLazy, global::System.Func<LiteralExpressionBuilder, object> mutableLazy);
		new DataTypeBuilder Type { get; set; }
		new void SetTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		new void SetTypeLazy(global::System.Func<LiteralExpressionBuilder, DataTypeBuilder> lazy);
		new void SetTypeLazy(global::System.Func<LiteralExpression, DataType> immutableLazy, global::System.Func<LiteralExpressionBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="LiteralExpressionBuilder"/> object to an immutable <see cref="LiteralExpression"/> object.
		/// </summary>
		new LiteralExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="LiteralExpressionBuilder"/> object to an immutable <see cref="LiteralExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new LiteralExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface NameOfExpression : Expression
	{
		Expression Argument { get; }
	
	
		/// <summary>
		/// Convert the <see cref="NameOfExpression"/> object to a builder <see cref="NameOfExpressionBuilder"/> object.
		/// </summary>
		new NameOfExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="NameOfExpression"/> object to a builder <see cref="NameOfExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new NameOfExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface NameOfExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Argument { get; set; }
		void SetArgumentLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetArgumentLazy(global::System.Func<NameOfExpressionBuilder, ExpressionBuilder> lazy);
		void SetArgumentLazy(global::System.Func<NameOfExpression, Expression> immutableLazy, global::System.Func<NameOfExpressionBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="NameOfExpressionBuilder"/> object to an immutable <see cref="NameOfExpression"/> object.
		/// </summary>
		new NameOfExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="NameOfExpressionBuilder"/> object to an immutable <see cref="NameOfExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new NameOfExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ObjectCreationExpression : Expression
	{
		DataType ObjectType { get; }
		global::MetaDslx.Modeling.ImmutableModelList<Argument> Arguments { get; }
		global::MetaDslx.Modeling.ImmutableModelList<Expression> Initializers { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ObjectCreationExpression"/> object to a builder <see cref="ObjectCreationExpressionBuilder"/> object.
		/// </summary>
		new ObjectCreationExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ObjectCreationExpression"/> object to a builder <see cref="ObjectCreationExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ObjectCreationExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ObjectCreationExpressionBuilder : ExpressionBuilder
	{
		DataTypeBuilder ObjectType { get; set; }
		void SetObjectTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetObjectTypeLazy(global::System.Func<ObjectCreationExpressionBuilder, DataTypeBuilder> lazy);
		void SetObjectTypeLazy(global::System.Func<ObjectCreationExpression, DataType> immutableLazy, global::System.Func<ObjectCreationExpressionBuilder, DataTypeBuilder> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> Arguments { get; }
		global::MetaDslx.Modeling.MutableModelList<ExpressionBuilder> Initializers { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ObjectCreationExpressionBuilder"/> object to an immutable <see cref="ObjectCreationExpression"/> object.
		/// </summary>
		new ObjectCreationExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="ObjectCreationExpressionBuilder"/> object to an immutable <see cref="ObjectCreationExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ObjectCreationExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ParenthesizedExpression : Expression
	{
		Expression Operand { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ParenthesizedExpression"/> object to a builder <see cref="ParenthesizedExpressionBuilder"/> object.
		/// </summary>
		new ParenthesizedExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ParenthesizedExpression"/> object to a builder <see cref="ParenthesizedExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ParenthesizedExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ParenthesizedExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Operand { get; set; }
		void SetOperandLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetOperandLazy(global::System.Func<ParenthesizedExpressionBuilder, ExpressionBuilder> lazy);
		void SetOperandLazy(global::System.Func<ParenthesizedExpression, Expression> immutableLazy, global::System.Func<ParenthesizedExpressionBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ParenthesizedExpressionBuilder"/> object to an immutable <see cref="ParenthesizedExpression"/> object.
		/// </summary>
		new ParenthesizedExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="ParenthesizedExpressionBuilder"/> object to an immutable <see cref="ParenthesizedExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ParenthesizedExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ReferenceExpression : Expression
	{
		Expression Qualifier { get; }
		bool IsNullConditional { get; }
		global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments { get; }
		bool IsDeclaration { get; }
		DataType ReferenceThroughType { get; }
		Declaration ReferencedSymbol { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ReferenceExpression"/> object to a builder <see cref="ReferenceExpressionBuilder"/> object.
		/// </summary>
		new ReferenceExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ReferenceExpression"/> object to a builder <see cref="ReferenceExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ReferenceExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ReferenceExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Qualifier { get; set; }
		void SetQualifierLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetQualifierLazy(global::System.Func<ReferenceExpressionBuilder, ExpressionBuilder> lazy);
		void SetQualifierLazy(global::System.Func<ReferenceExpression, Expression> immutableLazy, global::System.Func<ReferenceExpressionBuilder, ExpressionBuilder> mutableLazy);
		bool IsNullConditional { get; set; }
		void SetIsNullConditionalLazy(global::System.Func<bool> lazy);
		void SetIsNullConditionalLazy(global::System.Func<ReferenceExpressionBuilder, bool> lazy);
		void SetIsNullConditionalLazy(global::System.Func<ReferenceExpression, bool> immutableLazy, global::System.Func<ReferenceExpressionBuilder, bool> mutableLazy);
		global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments { get; }
		bool IsDeclaration { get; set; }
		void SetIsDeclarationLazy(global::System.Func<bool> lazy);
		void SetIsDeclarationLazy(global::System.Func<ReferenceExpressionBuilder, bool> lazy);
		void SetIsDeclarationLazy(global::System.Func<ReferenceExpression, bool> immutableLazy, global::System.Func<ReferenceExpressionBuilder, bool> mutableLazy);
		DataTypeBuilder ReferenceThroughType { get; set; }
		void SetReferenceThroughTypeLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetReferenceThroughTypeLazy(global::System.Func<ReferenceExpressionBuilder, DataTypeBuilder> lazy);
		void SetReferenceThroughTypeLazy(global::System.Func<ReferenceExpression, DataType> immutableLazy, global::System.Func<ReferenceExpressionBuilder, DataTypeBuilder> mutableLazy);
		DeclarationBuilder ReferencedSymbol { get; set; }
		void SetReferencedSymbolLazy(global::System.Func<DeclarationBuilder> lazy);
		void SetReferencedSymbolLazy(global::System.Func<ReferenceExpressionBuilder, DeclarationBuilder> lazy);
		void SetReferencedSymbolLazy(global::System.Func<ReferenceExpression, Declaration> immutableLazy, global::System.Func<ReferenceExpressionBuilder, DeclarationBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ReferenceExpressionBuilder"/> object to an immutable <see cref="ReferenceExpression"/> object.
		/// </summary>
		new ReferenceExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="ReferenceExpressionBuilder"/> object to an immutable <see cref="ReferenceExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ReferenceExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface SizeOfExpression : Expression
	{
		DataType TypeOperand { get; }
	
	
		/// <summary>
		/// Convert the <see cref="SizeOfExpression"/> object to a builder <see cref="SizeOfExpressionBuilder"/> object.
		/// </summary>
		new SizeOfExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="SizeOfExpression"/> object to a builder <see cref="SizeOfExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new SizeOfExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface SizeOfExpressionBuilder : ExpressionBuilder
	{
		DataTypeBuilder TypeOperand { get; set; }
		void SetTypeOperandLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetTypeOperandLazy(global::System.Func<SizeOfExpressionBuilder, DataTypeBuilder> lazy);
		void SetTypeOperandLazy(global::System.Func<SizeOfExpression, DataType> immutableLazy, global::System.Func<SizeOfExpressionBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="SizeOfExpressionBuilder"/> object to an immutable <see cref="SizeOfExpression"/> object.
		/// </summary>
		new SizeOfExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="SizeOfExpressionBuilder"/> object to an immutable <see cref="SizeOfExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new SizeOfExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface TypeOfExpression : Expression
	{
		DataType TypeOperand { get; }
	
	
		/// <summary>
		/// Convert the <see cref="TypeOfExpression"/> object to a builder <see cref="TypeOfExpressionBuilder"/> object.
		/// </summary>
		new TypeOfExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="TypeOfExpression"/> object to a builder <see cref="TypeOfExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new TypeOfExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface TypeOfExpressionBuilder : ExpressionBuilder
	{
		DataTypeBuilder TypeOperand { get; set; }
		void SetTypeOperandLazy(global::System.Func<DataTypeBuilder> lazy);
		void SetTypeOperandLazy(global::System.Func<TypeOfExpressionBuilder, DataTypeBuilder> lazy);
		void SetTypeOperandLazy(global::System.Func<TypeOfExpression, DataType> immutableLazy, global::System.Func<TypeOfExpressionBuilder, DataTypeBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="TypeOfExpressionBuilder"/> object to an immutable <see cref="TypeOfExpression"/> object.
		/// </summary>
		new TypeOfExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="TypeOfExpressionBuilder"/> object to an immutable <see cref="TypeOfExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new TypeOfExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface ThrowExpression : Expression
	{
		Expression Exception { get; }
	
	
		/// <summary>
		/// Convert the <see cref="ThrowExpression"/> object to a builder <see cref="ThrowExpressionBuilder"/> object.
		/// </summary>
		new ThrowExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="ThrowExpression"/> object to a builder <see cref="ThrowExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new ThrowExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface ThrowExpressionBuilder : ExpressionBuilder
	{
		ExpressionBuilder Exception { get; set; }
		void SetExceptionLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetExceptionLazy(global::System.Func<ThrowExpressionBuilder, ExpressionBuilder> lazy);
		void SetExceptionLazy(global::System.Func<ThrowExpression, Expression> immutableLazy, global::System.Func<ThrowExpressionBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="ThrowExpressionBuilder"/> object to an immutable <see cref="ThrowExpression"/> object.
		/// </summary>
		new ThrowExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="ThrowExpressionBuilder"/> object to an immutable <see cref="ThrowExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new ThrowExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface TupleExpression : Expression
	{
		global::MetaDslx.Modeling.ImmutableModelList<Argument> Arguments { get; }
	
	
		/// <summary>
		/// Convert the <see cref="TupleExpression"/> object to a builder <see cref="TupleExpressionBuilder"/> object.
		/// </summary>
		new TupleExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="TupleExpression"/> object to a builder <see cref="TupleExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new TupleExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface TupleExpressionBuilder : ExpressionBuilder
	{
		global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> Arguments { get; }
	
	
		/// <summary>
		/// Convert the <see cref="TupleExpressionBuilder"/> object to an immutable <see cref="TupleExpression"/> object.
		/// </summary>
		new TupleExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="TupleExpressionBuilder"/> object to an immutable <see cref="TupleExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new TupleExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface UnaryExpression : Expression
	{
		object OperatorKind { get; }
		Expression Operand { get; }
		bool IsChecked { get; }
		UnaryOperator OperatorMethod { get; }
	
	
		/// <summary>
		/// Convert the <see cref="UnaryExpression"/> object to a builder <see cref="UnaryExpressionBuilder"/> object.
		/// </summary>
		new UnaryExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="UnaryExpression"/> object to a builder <see cref="UnaryExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new UnaryExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface UnaryExpressionBuilder : ExpressionBuilder
	{
		object OperatorKind { get; set; }
		void SetOperatorKindLazy(global::System.Func<object> lazy);
		void SetOperatorKindLazy(global::System.Func<UnaryExpressionBuilder, object> lazy);
		void SetOperatorKindLazy(global::System.Func<UnaryExpression, object> immutableLazy, global::System.Func<UnaryExpressionBuilder, object> mutableLazy);
		ExpressionBuilder Operand { get; set; }
		void SetOperandLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetOperandLazy(global::System.Func<UnaryExpressionBuilder, ExpressionBuilder> lazy);
		void SetOperandLazy(global::System.Func<UnaryExpression, Expression> immutableLazy, global::System.Func<UnaryExpressionBuilder, ExpressionBuilder> mutableLazy);
		bool IsChecked { get; set; }
		void SetIsCheckedLazy(global::System.Func<bool> lazy);
		void SetIsCheckedLazy(global::System.Func<UnaryExpressionBuilder, bool> lazy);
		void SetIsCheckedLazy(global::System.Func<UnaryExpression, bool> immutableLazy, global::System.Func<UnaryExpressionBuilder, bool> mutableLazy);
		UnaryOperatorBuilder OperatorMethod { get; set; }
		void SetOperatorMethodLazy(global::System.Func<UnaryOperatorBuilder> lazy);
		void SetOperatorMethodLazy(global::System.Func<UnaryExpressionBuilder, UnaryOperatorBuilder> lazy);
		void SetOperatorMethodLazy(global::System.Func<UnaryExpression, UnaryOperator> immutableLazy, global::System.Func<UnaryExpressionBuilder, UnaryOperatorBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="UnaryExpressionBuilder"/> object to an immutable <see cref="UnaryExpression"/> object.
		/// </summary>
		new UnaryExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="UnaryExpressionBuilder"/> object to an immutable <see cref="UnaryExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new UnaryExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface VariableDeclarationExpression : Expression
	{
		Variable Symbol { get; }
		Expression Initializer { get; }
	
	
		/// <summary>
		/// Convert the <see cref="VariableDeclarationExpression"/> object to a builder <see cref="VariableDeclarationExpressionBuilder"/> object.
		/// </summary>
		new VariableDeclarationExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="VariableDeclarationExpression"/> object to a builder <see cref="VariableDeclarationExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new VariableDeclarationExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface VariableDeclarationExpressionBuilder : ExpressionBuilder
	{
		VariableBuilder Symbol { get; set; }
		void SetSymbolLazy(global::System.Func<VariableBuilder> lazy);
		void SetSymbolLazy(global::System.Func<VariableDeclarationExpressionBuilder, VariableBuilder> lazy);
		void SetSymbolLazy(global::System.Func<VariableDeclarationExpression, Variable> immutableLazy, global::System.Func<VariableDeclarationExpressionBuilder, VariableBuilder> mutableLazy);
		ExpressionBuilder Initializer { get; set; }
		void SetInitializerLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetInitializerLazy(global::System.Func<VariableDeclarationExpressionBuilder, ExpressionBuilder> lazy);
		void SetInitializerLazy(global::System.Func<VariableDeclarationExpression, Expression> immutableLazy, global::System.Func<VariableDeclarationExpressionBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="VariableDeclarationExpressionBuilder"/> object to an immutable <see cref="VariableDeclarationExpression"/> object.
		/// </summary>
		new VariableDeclarationExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="VariableDeclarationExpressionBuilder"/> object to an immutable <see cref="VariableDeclarationExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new VariableDeclarationExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}
	
	public interface VariableDeclarationGroupExpression : Expression
	{
		global::MetaDslx.Modeling.ImmutableModelList<VariableDeclarationExpression> Declarations { get; }
		Expression Initializer { get; }
	
	
		/// <summary>
		/// Convert the <see cref="VariableDeclarationGroupExpression"/> object to a builder <see cref="VariableDeclarationGroupExpressionBuilder"/> object.
		/// </summary>
		new VariableDeclarationGroupExpressionBuilder ToMutable();
		/// <summary>
		/// Convert the <see cref="VariableDeclarationGroupExpression"/> object to a builder <see cref="VariableDeclarationGroupExpressionBuilder"/> object
		/// by taking the builder version from the given model.
		/// </summary>
		/// <param name="model">The mutable model from which the return value is taken from.</param>
		new VariableDeclarationGroupExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model);
	}
	
	public interface VariableDeclarationGroupExpressionBuilder : ExpressionBuilder
	{
		global::MetaDslx.Modeling.MutableModelList<VariableDeclarationExpressionBuilder> Declarations { get; }
		ExpressionBuilder Initializer { get; set; }
		void SetInitializerLazy(global::System.Func<ExpressionBuilder> lazy);
		void SetInitializerLazy(global::System.Func<VariableDeclarationGroupExpressionBuilder, ExpressionBuilder> lazy);
		void SetInitializerLazy(global::System.Func<VariableDeclarationGroupExpression, Expression> immutableLazy, global::System.Func<VariableDeclarationGroupExpressionBuilder, ExpressionBuilder> mutableLazy);
	
	
		/// <summary>
		/// Convert the <see cref="VariableDeclarationGroupExpressionBuilder"/> object to an immutable <see cref="VariableDeclarationGroupExpression"/> object.
		/// </summary>
		new VariableDeclarationGroupExpression ToImmutable();
		/// <summary>
		/// Convert the <see cref="VariableDeclarationGroupExpressionBuilder"/> object to an immutable <see cref="VariableDeclarationGroupExpression"/> object
		/// by taking the immutable version from the given model.
		/// </summary>
		/// <param name="model">The immutable model from which the return value is taken from.</param>
		new VariableDeclarationGroupExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model);
	}

	public static class CoreDescriptor
	{
		private static global::System.Collections.Generic.List<global::MetaDslx.Modeling.ModelProperty> properties;
	
		static CoreDescriptor()
		{
			properties = new global::System.Collections.Generic.List<global::MetaDslx.Modeling.ModelProperty>();
			Element.Initialize();
			Attribute.Initialize();
			NamedElement.Initialize();
			TypedElement.Initialize();
			DataType.Initialize();
			Declaration.Initialize();
			TypedDeclaration.Initialize();
			Namespace.Initialize();
			Alias.Initialize();
			NamedType.Initialize();
			PrimitiveType.Initialize();
			ClassifierType.Initialize();
			InterfaceType.Initialize();
			ClassType.Initialize();
			StructType.Initialize();
			EnumType.Initialize();
			EnumLiteral.Initialize();
			DelegateType.Initialize();
			ArrayType.Initialize();
			CollectionType.Initialize();
			DictionaryType.Initialize();
			NullableType.Initialize();
			TupleType.Initialize();
			TypeParameter.Initialize();
			GenericTypeReference.Initialize();
			Member.Initialize();
			FieldLikeMember.Initialize();
			Field.Initialize();
			Property.Initialize();
			Indexer.Initialize();
			MethodLikeMember.Initialize();
			Method.Initialize();
			Parameter.Initialize();
			Constructor.Initialize();
			Destructor.Initialize();
			Lambda.Initialize();
			Operator.Initialize();
			ConversionOperator.Initialize();
			UnaryOperator.Initialize();
			BinaryOperator.Initialize();
			Statement.Initialize();
			Local.Initialize();
			Variable.Initialize();
			Label.Initialize();
			BlockStatement.Initialize();
			EmptyStatement.Initialize();
			ExpressionStatement.Initialize();
			ForEachLoopStatement.Initialize();
			ForLoopStatement.Initialize();
			ForToLoopStatement.Initialize();
			IfStatement.Initialize();
			JumpStatement.Initialize();
			LabeledStatement.Initialize();
			LockStatement.Initialize();
			LoopStatement.Initialize();
			ReturnStatement.Initialize();
			SwitchStatement.Initialize();
			SwitchCase.Initialize();
			CaseClause.Initialize();
			DefaultValueCaseClause.Initialize();
			SingleValueCaseClause.Initialize();
			TryStatement.Initialize();
			CatchClause.Initialize();
			UsingStatement.Initialize();
			WhileLoopStatement.Initialize();
			Expression.Initialize();
			Argument.Initialize();
			AssignmentExpression.Initialize();
			AwaitExpression.Initialize();
			BinaryExpression.Initialize();
			CoalesceExpression.Initialize();
			CompoundAssignmentExpression.Initialize();
			ConditionalExpression.Initialize();
			ConversionExpression.Initialize();
			DefaultValueExpression.Initialize();
			DiscardExpression.Initialize();
			DynamicExpression.Initialize();
			IncrementOrDecrementExpression.Initialize();
			IndexerAccessExpression.Initialize();
			InstanceReferenceExpression.Initialize();
			InvocationExpression.Initialize();
			IsTypeExpression.Initialize();
			LambdaExpression.Initialize();
			LiteralExpression.Initialize();
			NameOfExpression.Initialize();
			ObjectCreationExpression.Initialize();
			ParenthesizedExpression.Initialize();
			ReferenceExpression.Initialize();
			SizeOfExpression.Initialize();
			TypeOfExpression.Initialize();
			ThrowExpression.Initialize();
			TupleExpression.Initialize();
			UnaryExpression.Initialize();
			VariableDeclarationExpression.Initialize();
			VariableDeclarationGroupExpression.Initialize();
			properties.Add(CoreDescriptor.Element.AttributesProperty);
			properties.Add(CoreDescriptor.Attribute.TypeProperty);
			properties.Add(CoreDescriptor.NamedElement.NameProperty);
			properties.Add(CoreDescriptor.TypedElement.TypeProperty);
			properties.Add(CoreDescriptor.DataType.ResolvedTypeProperty);
			properties.Add(CoreDescriptor.Declaration.TypeParametersProperty);
			properties.Add(CoreDescriptor.Declaration.MembersProperty);
			properties.Add(CoreDescriptor.Alias.TargetProperty);
			properties.Add(CoreDescriptor.NamedType.DotNetNameProperty);
			properties.Add(CoreDescriptor.NamedType.IsAbstractProperty);
			properties.Add(CoreDescriptor.NamedType.IsSealedProperty);
			properties.Add(CoreDescriptor.NamedType.TypeArgumentsProperty);
			properties.Add(CoreDescriptor.NamedType.BaseTypesProperty);
			properties.Add(CoreDescriptor.EnumType.LiteralsProperty);
			properties.Add(CoreDescriptor.EnumLiteral.TypeProperty);
			properties.Add(CoreDescriptor.DelegateType.ReturnTypeProperty);
			properties.Add(CoreDescriptor.DelegateType.ParametersProperty);
			properties.Add(CoreDescriptor.ArrayType.LowerBoundProperty);
			properties.Add(CoreDescriptor.ArrayType.SizeProperty);
			properties.Add(CoreDescriptor.ArrayType.ElementTypeProperty);
			properties.Add(CoreDescriptor.CollectionType.IsUniqueProperty);
			properties.Add(CoreDescriptor.CollectionType.IsUnorderedProperty);
			properties.Add(CoreDescriptor.CollectionType.ItemTypeProperty);
			properties.Add(CoreDescriptor.DictionaryType.IsUnorderedProperty);
			properties.Add(CoreDescriptor.DictionaryType.KeyTypeProperty);
			properties.Add(CoreDescriptor.DictionaryType.ValueTypeProperty);
			properties.Add(CoreDescriptor.NullableType.InnerTypeProperty);
			properties.Add(CoreDescriptor.GenericTypeReference.ReferencedTypeProperty);
			properties.Add(CoreDescriptor.GenericTypeReference.TypeArgumentsProperty);
			properties.Add(CoreDescriptor.GenericTypeReference.ConstructedTypeProperty);
			properties.Add(CoreDescriptor.GenericTypeReference.ResolvedTypeProperty);
			properties.Add(CoreDescriptor.Member.IsStaticProperty);
			properties.Add(CoreDescriptor.Member.IsVirtualProperty);
			properties.Add(CoreDescriptor.Member.IsOverrideProperty);
			properties.Add(CoreDescriptor.Member.IsAbstractProperty);
			properties.Add(CoreDescriptor.Member.IsSealedProperty);
			properties.Add(CoreDescriptor.FieldLikeMember.TypeProperty);
			properties.Add(CoreDescriptor.Property.GetMethodProperty);
			properties.Add(CoreDescriptor.Property.SetMethodProperty);
			properties.Add(CoreDescriptor.Indexer.ParametersProperty);
			properties.Add(CoreDescriptor.MethodLikeMember.IsAsyncProperty);
			properties.Add(CoreDescriptor.MethodLikeMember.ReturnTypeProperty);
			properties.Add(CoreDescriptor.MethodLikeMember.ParametersProperty);
			properties.Add(CoreDescriptor.MethodLikeMember.BodyProperty);
			properties.Add(CoreDescriptor.Parameter.IsVarArgProperty);
			properties.Add(CoreDescriptor.Constructor.NextConstructorInvocationProperty);
			properties.Add(CoreDescriptor.UnaryOperator.OperatorKindProperty);
			properties.Add(CoreDescriptor.BinaryOperator.OperatorKindProperty);
			properties.Add(CoreDescriptor.Variable.IsConstProperty);
			properties.Add(CoreDescriptor.Variable.TypeProperty);
			properties.Add(CoreDescriptor.Variable.DefaultValueProperty);
			properties.Add(CoreDescriptor.BlockStatement.StatementsProperty);
			properties.Add(CoreDescriptor.ExpressionStatement.ExpressionProperty);
			properties.Add(CoreDescriptor.ForEachLoopStatement.LoopControlVariableProperty);
			properties.Add(CoreDescriptor.ForEachLoopStatement.CollectionProperty);
			properties.Add(CoreDescriptor.ForLoopStatement.BeforeProperty);
			properties.Add(CoreDescriptor.ForLoopStatement.ConditionProperty);
			properties.Add(CoreDescriptor.ForLoopStatement.AtLoopBottomProperty);
			properties.Add(CoreDescriptor.ForToLoopStatement.LoopControlVariableProperty);
			properties.Add(CoreDescriptor.ForToLoopStatement.InitialValueProperty);
			properties.Add(CoreDescriptor.ForToLoopStatement.LimitValueProperty);
			properties.Add(CoreDescriptor.ForToLoopStatement.StepValueProperty);
			properties.Add(CoreDescriptor.IfStatement.ConditionProperty);
			properties.Add(CoreDescriptor.IfStatement.IfTrueProperty);
			properties.Add(CoreDescriptor.IfStatement.IfFalseProperty);
			properties.Add(CoreDescriptor.JumpStatement.JumpKindProperty);
			properties.Add(CoreDescriptor.JumpStatement.TargetProperty);
			properties.Add(CoreDescriptor.LabeledStatement.LabelProperty);
			properties.Add(CoreDescriptor.LabeledStatement.StatementProperty);
			properties.Add(CoreDescriptor.LockStatement.LockedValueProperty);
			properties.Add(CoreDescriptor.LockStatement.BodyProperty);
			properties.Add(CoreDescriptor.LoopStatement.BodyProperty);
			properties.Add(CoreDescriptor.ReturnStatement.ReturnedValueProperty);
			properties.Add(CoreDescriptor.SwitchStatement.ValueProperty);
			properties.Add(CoreDescriptor.SwitchStatement.CasesProperty);
			properties.Add(CoreDescriptor.SwitchCase.ClausesProperty);
			properties.Add(CoreDescriptor.SwitchCase.BodyProperty);
			properties.Add(CoreDescriptor.CaseClause.LabelProperty);
			properties.Add(CoreDescriptor.SingleValueCaseClause.ValueProperty);
			properties.Add(CoreDescriptor.TryStatement.BodyProperty);
			properties.Add(CoreDescriptor.TryStatement.CatchesProperty);
			properties.Add(CoreDescriptor.TryStatement.FinallyProperty);
			properties.Add(CoreDescriptor.TryStatement.ExitLabelProperty);
			properties.Add(CoreDescriptor.CatchClause.ExceptionDeclarationOrExpressionProperty);
			properties.Add(CoreDescriptor.CatchClause.FilterProperty);
			properties.Add(CoreDescriptor.CatchClause.HandlerProperty);
			properties.Add(CoreDescriptor.UsingStatement.ResourcesProperty);
			properties.Add(CoreDescriptor.UsingStatement.BodyProperty);
			properties.Add(CoreDescriptor.WhileLoopStatement.ConditionProperty);
			properties.Add(CoreDescriptor.WhileLoopStatement.ConditionIsTopProperty);
			properties.Add(CoreDescriptor.WhileLoopStatement.ConditionIsUntilProperty);
			properties.Add(CoreDescriptor.Expression.TypeProperty);
			properties.Add(CoreDescriptor.Argument.ValueProperty);
			properties.Add(CoreDescriptor.AssignmentExpression.TargetProperty);
			properties.Add(CoreDescriptor.AssignmentExpression.ValueProperty);
			properties.Add(CoreDescriptor.AwaitExpression.OperationProperty);
			properties.Add(CoreDescriptor.BinaryExpression.OperatorKindProperty);
			properties.Add(CoreDescriptor.BinaryExpression.LeftOperandProperty);
			properties.Add(CoreDescriptor.BinaryExpression.RightOperandProperty);
			properties.Add(CoreDescriptor.BinaryExpression.IsCheckedProperty);
			properties.Add(CoreDescriptor.BinaryExpression.OperatorMethodProperty);
			properties.Add(CoreDescriptor.CoalesceExpression.ValueProperty);
			properties.Add(CoreDescriptor.CoalesceExpression.WhenNullProperty);
			properties.Add(CoreDescriptor.CompoundAssignmentExpression.OperatorKindProperty);
			properties.Add(CoreDescriptor.CompoundAssignmentExpression.IsCheckedProperty);
			properties.Add(CoreDescriptor.ConditionalExpression.ConditionProperty);
			properties.Add(CoreDescriptor.ConditionalExpression.WhenTrueProperty);
			properties.Add(CoreDescriptor.ConditionalExpression.WhenFalseProperty);
			properties.Add(CoreDescriptor.ConversionExpression.OperandProperty);
			properties.Add(CoreDescriptor.ConversionExpression.TargetTypeProperty);
			properties.Add(CoreDescriptor.ConversionExpression.IsTryCastProperty);
			properties.Add(CoreDescriptor.ConversionExpression.IsCheckedProperty);
			properties.Add(CoreDescriptor.IncrementOrDecrementExpression.TargetProperty);
			properties.Add(CoreDescriptor.IncrementOrDecrementExpression.IsPostfixProperty);
			properties.Add(CoreDescriptor.IncrementOrDecrementExpression.IsCheckedProperty);
			properties.Add(CoreDescriptor.IndexerAccessExpression.ReceiverProperty);
			properties.Add(CoreDescriptor.IndexerAccessExpression.IsNullConditionalProperty);
			properties.Add(CoreDescriptor.IndexerAccessExpression.ArgumentsProperty);
			properties.Add(CoreDescriptor.IndexerAccessExpression.TargetProperty);
			properties.Add(CoreDescriptor.InstanceReferenceExpression.AccessThroughBaseTypeProperty);
			properties.Add(CoreDescriptor.InvocationExpression.ReceiverProperty);
			properties.Add(CoreDescriptor.InvocationExpression.ArgumentsProperty);
			properties.Add(CoreDescriptor.IsTypeExpression.ValueOperandProperty);
			properties.Add(CoreDescriptor.IsTypeExpression.TypeOperandProperty);
			properties.Add(CoreDescriptor.IsTypeExpression.IsNegatedProperty);
			properties.Add(CoreDescriptor.LambdaExpression.ReturnTypeProperty);
			properties.Add(CoreDescriptor.LambdaExpression.ParametersProperty);
			properties.Add(CoreDescriptor.LambdaExpression.BodyProperty);
			properties.Add(CoreDescriptor.LiteralExpression.ValueProperty);
			properties.Add(CoreDescriptor.LiteralExpression.TypeProperty);
			properties.Add(CoreDescriptor.NameOfExpression.ArgumentProperty);
			properties.Add(CoreDescriptor.ObjectCreationExpression.ObjectTypeProperty);
			properties.Add(CoreDescriptor.ObjectCreationExpression.ArgumentsProperty);
			properties.Add(CoreDescriptor.ObjectCreationExpression.InitializersProperty);
			properties.Add(CoreDescriptor.ParenthesizedExpression.OperandProperty);
			properties.Add(CoreDescriptor.ReferenceExpression.QualifierProperty);
			properties.Add(CoreDescriptor.ReferenceExpression.IsNullConditionalProperty);
			properties.Add(CoreDescriptor.ReferenceExpression.TypeArgumentsProperty);
			properties.Add(CoreDescriptor.ReferenceExpression.IsDeclarationProperty);
			properties.Add(CoreDescriptor.ReferenceExpression.ReferenceThroughTypeProperty);
			properties.Add(CoreDescriptor.ReferenceExpression.ReferencedSymbolProperty);
			properties.Add(CoreDescriptor.SizeOfExpression.TypeOperandProperty);
			properties.Add(CoreDescriptor.TypeOfExpression.TypeOperandProperty);
			properties.Add(CoreDescriptor.ThrowExpression.ExceptionProperty);
			properties.Add(CoreDescriptor.TupleExpression.ArgumentsProperty);
			properties.Add(CoreDescriptor.UnaryExpression.OperatorKindProperty);
			properties.Add(CoreDescriptor.UnaryExpression.OperandProperty);
			properties.Add(CoreDescriptor.UnaryExpression.IsCheckedProperty);
			properties.Add(CoreDescriptor.UnaryExpression.OperatorMethodProperty);
			properties.Add(CoreDescriptor.VariableDeclarationExpression.SymbolProperty);
			properties.Add(CoreDescriptor.VariableDeclarationExpression.InitializerProperty);
			properties.Add(CoreDescriptor.VariableDeclarationGroupExpression.DeclarationsProperty);
			properties.Add(CoreDescriptor.VariableDeclarationGroupExpression.InitializerProperty);
		}
	
		public static void Initialize()
		{
		}
	
		public const string MUri = "http://MetaDslx.Languages.Core/1.0";
		public const string MPrefix = "";
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.Symbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ElementId), typeof(global::MetaDslx.Languages.Core.Model.Element), typeof(global::MetaDslx.Languages.Core.Model.ElementBuilder))]
		public static class Element
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Element()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Element));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Element; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Attributes")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty AttributesProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Element), name: "Attributes",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Attribute),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.AttributeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Element_Attributes,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.AttributeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.AttributeId), typeof(global::MetaDslx.Languages.Core.Model.Attribute), typeof(global::MetaDslx.Languages.Core.Model.AttributeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.NamedElement), typeof(CoreDescriptor.TypedElement) })]
		public static class Attribute
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Attribute()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Attribute));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Attribute; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("AttributeType")]
			[global::MetaDslx.Modeling.RedefinesAttribute(typeof(CoreDescriptor.TypedElement), "Type")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Attribute), name: "Type",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Attribute_Type,
					defaultValue: null);
		}
	
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.NamedElementId), typeof(global::MetaDslx.Languages.Core.Model.NamedElement), typeof(global::MetaDslx.Languages.Core.Model.NamedElementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Element) })]
		public static class NamedElement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static NamedElement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(NamedElement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.NamedElement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Name")]
			public static readonly global::MetaDslx.Modeling.ModelProperty NameProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(NamedElement), name: "Name",
			        immutableType: typeof(string),
			        mutableType: typeof(string),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.NamedElement_Name,
					defaultValue: null);
		}
	
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.TypedElementId), typeof(global::MetaDslx.Languages.Core.Model.TypedElement), typeof(global::MetaDslx.Languages.Core.Model.TypedElementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Element) })]
		public static class TypedElement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static TypedElement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(TypedElement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.TypedElement; }
			}
			
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(TypedElement), name: "Type",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.TypedElement_Type,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.TypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.DataTypeId), typeof(global::MetaDslx.Languages.Core.Model.DataType), typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Element) })]
		public static class DataType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static DataType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(DataType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.DataType; }
			}
			
			[global::MetaDslx.Modeling.ReadonlyAttribute]
			[global::MetaDslx.Modeling.DerivedAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ResolvedTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(DataType), name: "ResolvedType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.DataType_ResolvedType,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.DeclaredSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.DeclarationId), typeof(global::MetaDslx.Languages.Core.Model.Declaration), typeof(global::MetaDslx.Languages.Core.Model.DeclarationBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.NamedElement) })]
		public static class Declaration
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Declaration()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Declaration));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Declaration; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("TypeParameters")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeParametersProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Declaration), name: "TypeParameters",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.TypeParameter),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.TypeParameterBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Declaration_TypeParameters,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Members")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty MembersProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Declaration), name: "Members",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Declaration),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DeclarationBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Declaration_Members,
					defaultValue: null);
		}
	
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.TypedDeclarationId), typeof(global::MetaDslx.Languages.Core.Model.TypedDeclaration), typeof(global::MetaDslx.Languages.Core.Model.TypedDeclarationBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Declaration), typeof(CoreDescriptor.TypedElement) })]
		public static class TypedDeclaration
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static TypedDeclaration()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(TypedDeclaration));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.TypedDeclaration; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.NamespaceSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.NamespaceId), typeof(global::MetaDslx.Languages.Core.Model.Namespace), typeof(global::MetaDslx.Languages.Core.Model.NamespaceBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Declaration) })]
		public static class Namespace
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Namespace()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Namespace));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Namespace; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.AliasSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.AliasId), typeof(global::MetaDslx.Languages.Core.Model.Alias), typeof(global::MetaDslx.Languages.Core.Model.AliasBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Declaration) })]
		public static class Alias
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Alias()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Alias));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Alias; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Target")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TargetProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Alias), name: "Target",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Declaration),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DeclarationBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Alias_Target,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.NamedTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.NamedTypeId), typeof(global::MetaDslx.Languages.Core.Model.NamedType), typeof(global::MetaDslx.Languages.Core.Model.NamedTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Declaration), typeof(CoreDescriptor.DataType) })]
		public static class NamedType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static NamedType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(NamedType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.NamedType; }
			}
			
			public static readonly global::MetaDslx.Modeling.ModelProperty DotNetNameProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(NamedType), name: "DotNetName",
			        immutableType: typeof(string),
			        mutableType: typeof(string),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.NamedType_DotNetName,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsAbstract")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsAbstractProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(NamedType), name: "IsAbstract",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.NamedType_IsAbstract,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsSealed")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsSealedProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(NamedType), name: "IsSealed",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.NamedType_IsSealed,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("TypeArguments")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeArgumentsProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(NamedType), name: "TypeArguments",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.NamedType_TypeArguments,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("BaseTypes")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty BaseTypesProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(NamedType), name: "BaseTypes",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.NamedType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.NamedTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.NamedType_BaseTypes,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.PrimitiveTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.PrimitiveTypeId), typeof(global::MetaDslx.Languages.Core.Model.PrimitiveType), typeof(global::MetaDslx.Languages.Core.Model.PrimitiveTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.NamedType) })]
		public static class PrimitiveType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static PrimitiveType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(PrimitiveType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.PrimitiveType; }
			}
		}
	
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ClassifierTypeId), typeof(global::MetaDslx.Languages.Core.Model.ClassifierType), typeof(global::MetaDslx.Languages.Core.Model.ClassifierTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.NamedType) })]
		public static class ClassifierType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ClassifierType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ClassifierType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ClassifierType; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.InterfaceTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.InterfaceTypeId), typeof(global::MetaDslx.Languages.Core.Model.InterfaceType), typeof(global::MetaDslx.Languages.Core.Model.InterfaceTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.ClassifierType) })]
		public static class InterfaceType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static InterfaceType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(InterfaceType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.InterfaceType; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ClassTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ClassTypeId), typeof(global::MetaDslx.Languages.Core.Model.ClassType), typeof(global::MetaDslx.Languages.Core.Model.ClassTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.ClassifierType) })]
		public static class ClassType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ClassType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ClassType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ClassType; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.StructTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.StructTypeId), typeof(global::MetaDslx.Languages.Core.Model.StructType), typeof(global::MetaDslx.Languages.Core.Model.StructTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.ClassifierType) })]
		public static class StructType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static StructType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(StructType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.StructType; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.EnumTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.EnumTypeId), typeof(global::MetaDslx.Languages.Core.Model.EnumType), typeof(global::MetaDslx.Languages.Core.Model.EnumTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.NamedType) })]
		public static class EnumType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static EnumType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(EnumType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.EnumType; }
			}
			
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ReadonlyAttribute]
			[global::MetaDslx.Modeling.DerivedAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty LiteralsProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(EnumType), name: "Literals",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.EnumLiteral),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.EnumLiteralBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.EnumType_Literals,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.EnumLiteralSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.EnumLiteralId), typeof(global::MetaDslx.Languages.Core.Model.EnumLiteral), typeof(global::MetaDslx.Languages.Core.Model.EnumLiteralBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Member), typeof(CoreDescriptor.TypedElement) })]
		public static class EnumLiteral
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static EnumLiteral()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(EnumLiteral));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.EnumLiteral; }
			}
			
			[global::MetaDslx.Modeling.ReadonlyAttribute]
			[global::MetaDslx.Modeling.DerivedAttribute]
			[global::MetaDslx.Modeling.RedefinesAttribute(typeof(CoreDescriptor.TypedElement), "Type")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(EnumLiteral), name: "Type",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.EnumType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.EnumTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.EnumLiteral_Type,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.DelegateTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.DelegateTypeId), typeof(global::MetaDslx.Languages.Core.Model.DelegateType), typeof(global::MetaDslx.Languages.Core.Model.DelegateTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.NamedType) })]
		public static class DelegateType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static DelegateType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(DelegateType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.DelegateType; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ReturnType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ReturnTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(DelegateType), name: "ReturnType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.DelegateType_ReturnType,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Parameters")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ParametersProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(DelegateType), name: "Parameters",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Parameter),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ParameterBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.DelegateType_Parameters,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ArrayTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ArrayTypeId), typeof(global::MetaDslx.Languages.Core.Model.ArrayType), typeof(global::MetaDslx.Languages.Core.Model.ArrayTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.DataType) })]
		public static class ArrayType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ArrayType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ArrayType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ArrayType; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("LowerBound")]
			public static readonly global::MetaDslx.Modeling.ModelProperty LowerBoundProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ArrayType), name: "LowerBound",
			        immutableType: typeof(int),
			        mutableType: typeof(int),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ArrayType_LowerBound,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Size")]
			public static readonly global::MetaDslx.Modeling.ModelProperty SizeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ArrayType), name: "Size",
			        immutableType: typeof(int),
			        mutableType: typeof(int),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ArrayType_Size,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ElementType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ElementTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ArrayType), name: "ElementType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ArrayType_ElementType,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.CollectionTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.CollectionTypeId), typeof(global::MetaDslx.Languages.Core.Model.CollectionType), typeof(global::MetaDslx.Languages.Core.Model.CollectionTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.DataType) })]
		public static class CollectionType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static CollectionType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(CollectionType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.CollectionType; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsUnique")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsUniqueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(CollectionType), name: "IsUnique",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.CollectionType_IsUnique,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsUnordered")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsUnorderedProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(CollectionType), name: "IsUnordered",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.CollectionType_IsUnordered,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ItemType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ItemTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(CollectionType), name: "ItemType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.CollectionType_ItemType,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.DictionaryTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.DictionaryTypeId), typeof(global::MetaDslx.Languages.Core.Model.DictionaryType), typeof(global::MetaDslx.Languages.Core.Model.DictionaryTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.DataType) })]
		public static class DictionaryType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static DictionaryType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(DictionaryType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.DictionaryType; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsUnordered")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsUnorderedProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(DictionaryType), name: "IsUnordered",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.DictionaryType_IsUnordered,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("KeyType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty KeyTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(DictionaryType), name: "KeyType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.DictionaryType_KeyType,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ValueType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ValueTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(DictionaryType), name: "ValueType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.DictionaryType_ValueType,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.NullableTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.NullableTypeId), typeof(global::MetaDslx.Languages.Core.Model.NullableType), typeof(global::MetaDslx.Languages.Core.Model.NullableTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.DataType) })]
		public static class NullableType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static NullableType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(NullableType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.NullableType; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("InnerType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty InnerTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(NullableType), name: "InnerType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.NullableType_InnerType,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.TupleTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.TupleTypeId), typeof(global::MetaDslx.Languages.Core.Model.TupleType), typeof(global::MetaDslx.Languages.Core.Model.TupleTypeBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.DataType) })]
		public static class TupleType
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static TupleType()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(TupleType));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.TupleType; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.TypeParameterSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.TypeParameterId), typeof(global::MetaDslx.Languages.Core.Model.TypeParameter), typeof(global::MetaDslx.Languages.Core.Model.TypeParameterBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.NamedType) })]
		public static class TypeParameter
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static TypeParameter()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(TypeParameter));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.TypeParameter; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.GenericTypeReferenceTypeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.GenericTypeReferenceId), typeof(global::MetaDslx.Languages.Core.Model.GenericTypeReference), typeof(global::MetaDslx.Languages.Core.Model.GenericTypeReferenceBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.DataType) })]
		public static class GenericTypeReference
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static GenericTypeReference()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(GenericTypeReference));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.GenericTypeReference; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ReferencedType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ReferencedTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(GenericTypeReference), name: "ReferencedType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.NamedType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.NamedTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.GenericTypeReference_ReferencedType,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("TypeArguments")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeArgumentsProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(GenericTypeReference), name: "TypeArguments",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.GenericTypeReference_TypeArguments,
					defaultValue: null);
			
			[global::MetaDslx.Modeling.ReadonlyAttribute]
			[global::MetaDslx.Modeling.DerivedAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ConstructedTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(GenericTypeReference), name: "ConstructedType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.NamedType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.NamedTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.GenericTypeReference_ConstructedType,
					defaultValue: null);
			
			[global::MetaDslx.Modeling.ReadonlyAttribute]
			[global::MetaDslx.Modeling.DerivedAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ResolvedTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(GenericTypeReference), name: "ResolvedType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.GenericTypeReference_ResolvedType,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.MemberSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.MemberId), typeof(global::MetaDslx.Languages.Core.Model.Member), typeof(global::MetaDslx.Languages.Core.Model.MemberBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Declaration) })]
		public static class Member
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Member()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Member));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Member; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsStatic")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsStaticProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Member), name: "IsStatic",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Member_IsStatic,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsVirtual")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsVirtualProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Member), name: "IsVirtual",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Member_IsVirtual,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsOverride")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsOverrideProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Member), name: "IsOverride",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Member_IsOverride,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsAbstract")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsAbstractProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Member), name: "IsAbstract",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Member_IsAbstract,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsSealed")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsSealedProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Member), name: "IsSealed",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Member_IsSealed,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.FieldLikeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.FieldLikeMemberId), typeof(global::MetaDslx.Languages.Core.Model.FieldLikeMember), typeof(global::MetaDslx.Languages.Core.Model.FieldLikeMemberBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Member), typeof(CoreDescriptor.TypedDeclaration) })]
		public static class FieldLikeMember
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static FieldLikeMember()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(FieldLikeMember));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.FieldLikeMember; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Type")]
			[global::MetaDslx.Modeling.RedefinesAttribute(typeof(CoreDescriptor.TypedElement), "Type")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(FieldLikeMember), name: "Type",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.FieldLikeMember_Type,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.FieldSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.FieldId), typeof(global::MetaDslx.Languages.Core.Model.Field), typeof(global::MetaDslx.Languages.Core.Model.FieldBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.FieldLikeMember) })]
		public static class Field
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Field()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Field));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Field; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.PropertySymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.PropertyId), typeof(global::MetaDslx.Languages.Core.Model.Property), typeof(global::MetaDslx.Languages.Core.Model.PropertyBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.FieldLikeMember) })]
		public static class Property
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Property()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Property));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Property; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("GetMethod")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty GetMethodProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Property), name: "GetMethod",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Method),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.MethodBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Property_GetMethod,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("SetMethod")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty SetMethodProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Property), name: "SetMethod",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Method),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.MethodBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Property_SetMethod,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.IndexerSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.IndexerId), typeof(global::MetaDslx.Languages.Core.Model.Indexer), typeof(global::MetaDslx.Languages.Core.Model.IndexerBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Property) })]
		public static class Indexer
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Indexer()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Indexer));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Indexer; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Parameters")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ParametersProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Indexer), name: "Parameters",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Parameter),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ParameterBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Indexer_Parameters,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.MethodLikeSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.MethodLikeMemberId), typeof(global::MetaDslx.Languages.Core.Model.MethodLikeMember), typeof(global::MetaDslx.Languages.Core.Model.MethodLikeMemberBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Member) })]
		public static class MethodLikeMember
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static MethodLikeMember()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(MethodLikeMember));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.MethodLikeMember; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsAsync")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsAsyncProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(MethodLikeMember), name: "IsAsync",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.MethodLikeMember_IsAsync,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ReturnType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ReturnTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(MethodLikeMember), name: "ReturnType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.MethodLikeMember_ReturnType,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Parameters")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ParametersProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(MethodLikeMember), name: "Parameters",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Parameter),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ParameterBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.MethodLikeMember_Parameters,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Body")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty BodyProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(MethodLikeMember), name: "Body",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.MethodLikeMember_Body,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.MethodSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.MethodId), typeof(global::MetaDslx.Languages.Core.Model.Method), typeof(global::MetaDslx.Languages.Core.Model.MethodBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.MethodLikeMember) })]
		public static class Method
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Method()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Method));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Method; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ParameterSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ParameterId), typeof(global::MetaDslx.Languages.Core.Model.Parameter), typeof(global::MetaDslx.Languages.Core.Model.ParameterBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Variable) })]
		public static class Parameter
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Parameter()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Parameter));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Parameter; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsVarArg")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsVarArgProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Parameter), name: "IsVarArg",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Parameter_IsVarArg,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ConstructorSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ConstructorId), typeof(global::MetaDslx.Languages.Core.Model.Constructor), typeof(global::MetaDslx.Languages.Core.Model.ConstructorBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.MethodLikeMember) })]
		public static class Constructor
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Constructor()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Constructor));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Constructor; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("NextConstructorInvocation")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty NextConstructorInvocationProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Constructor), name: "NextConstructorInvocation",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.InvocationExpression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.InvocationExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Constructor_NextConstructorInvocation,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.DestructorSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.DestructorId), typeof(global::MetaDslx.Languages.Core.Model.Destructor), typeof(global::MetaDslx.Languages.Core.Model.DestructorBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.MethodLikeMember) })]
		public static class Destructor
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Destructor()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Destructor));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Destructor; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.LambdaSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.LambdaId), typeof(global::MetaDslx.Languages.Core.Model.Lambda), typeof(global::MetaDslx.Languages.Core.Model.LambdaBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.MethodLikeMember) })]
		public static class Lambda
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Lambda()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Lambda));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Lambda; }
			}
		}
	
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.OperatorId), typeof(global::MetaDslx.Languages.Core.Model.Operator), typeof(global::MetaDslx.Languages.Core.Model.OperatorBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.MethodLikeMember) })]
		public static class Operator
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Operator()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Operator));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Operator; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ConversionOperatorSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ConversionOperatorId), typeof(global::MetaDslx.Languages.Core.Model.ConversionOperator), typeof(global::MetaDslx.Languages.Core.Model.ConversionOperatorBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Operator) })]
		public static class ConversionOperator
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ConversionOperator()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ConversionOperator));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ConversionOperator; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.UnaryOperatorSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.UnaryOperatorId), typeof(global::MetaDslx.Languages.Core.Model.UnaryOperator), typeof(global::MetaDslx.Languages.Core.Model.UnaryOperatorBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Operator) })]
		public static class UnaryOperator
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static UnaryOperator()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(UnaryOperator));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.UnaryOperator; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("OperatorKind")]
			public static readonly global::MetaDslx.Modeling.ModelProperty OperatorKindProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(UnaryOperator), name: "OperatorKind",
			        immutableType: typeof(object),
			        mutableType: typeof(object),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.UnaryOperator_OperatorKind,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.BinaryOperatorSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.BinaryOperatorId), typeof(global::MetaDslx.Languages.Core.Model.BinaryOperator), typeof(global::MetaDslx.Languages.Core.Model.BinaryOperatorBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Operator) })]
		public static class BinaryOperator
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static BinaryOperator()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(BinaryOperator));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.BinaryOperator; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("OperatorKind")]
			public static readonly global::MetaDslx.Modeling.ModelProperty OperatorKindProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(BinaryOperator), name: "OperatorKind",
			        immutableType: typeof(object),
			        mutableType: typeof(object),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.BinaryOperator_OperatorKind,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.StatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.StatementId), typeof(global::MetaDslx.Languages.Core.Model.Statement), typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Element) })]
		public static class Statement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Statement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Statement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Statement; }
			}
		}
	
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.LocalId), typeof(global::MetaDslx.Languages.Core.Model.Local), typeof(global::MetaDslx.Languages.Core.Model.LocalBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Declaration) })]
		public static class Local
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Local()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Local));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Local; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.VariableSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.VariableId), typeof(global::MetaDslx.Languages.Core.Model.Variable), typeof(global::MetaDslx.Languages.Core.Model.VariableBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Local) })]
		public static class Variable
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Variable()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Variable));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Variable; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsConst")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsConstProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Variable), name: "IsConst",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Variable_IsConst,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Type")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Variable), name: "Type",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Variable_Type,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("DefaultValue")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty DefaultValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Variable), name: "DefaultValue",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Variable_DefaultValue,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.LabelSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.LabelId), typeof(global::MetaDslx.Languages.Core.Model.Label), typeof(global::MetaDslx.Languages.Core.Model.LabelBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Local) })]
		public static class Label
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Label()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Label));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Label; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.BlockStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.BlockStatementId), typeof(global::MetaDslx.Languages.Core.Model.BlockStatement), typeof(global::MetaDslx.Languages.Core.Model.BlockStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class BlockStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static BlockStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(BlockStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.BlockStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Statements")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty StatementsProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(BlockStatement), name: "Statements",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.BlockStatement_Statements,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.EmptyStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.EmptyStatementId), typeof(global::MetaDslx.Languages.Core.Model.EmptyStatement), typeof(global::MetaDslx.Languages.Core.Model.EmptyStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class EmptyStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static EmptyStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(EmptyStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.EmptyStatement; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ExpressionStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ExpressionStatementId), typeof(global::MetaDslx.Languages.Core.Model.ExpressionStatement), typeof(global::MetaDslx.Languages.Core.Model.ExpressionStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class ExpressionStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ExpressionStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ExpressionStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ExpressionStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Expression")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ExpressionProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ExpressionStatement), name: "Expression",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ExpressionStatement_Expression,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ForEachLoopStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ForEachLoopStatementId), typeof(global::MetaDslx.Languages.Core.Model.ForEachLoopStatement), typeof(global::MetaDslx.Languages.Core.Model.ForEachLoopStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class ForEachLoopStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ForEachLoopStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ForEachLoopStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ForEachLoopStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("LoopControlVariable")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty LoopControlVariableProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ForEachLoopStatement), name: "LoopControlVariable",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ForEachLoopStatement_LoopControlVariable,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Collection")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty CollectionProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ForEachLoopStatement), name: "Collection",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ForEachLoopStatement_Collection,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ForLoopStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ForLoopStatementId), typeof(global::MetaDslx.Languages.Core.Model.ForLoopStatement), typeof(global::MetaDslx.Languages.Core.Model.ForLoopStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class ForLoopStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ForLoopStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ForLoopStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ForLoopStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Before")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty BeforeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ForLoopStatement), name: "Before",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ForLoopStatement_Before,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Condition")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ConditionProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ForLoopStatement), name: "Condition",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ForLoopStatement_Condition,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("AtLoopBottom")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty AtLoopBottomProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ForLoopStatement), name: "AtLoopBottom",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ForLoopStatement_AtLoopBottom,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ForToLoopStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ForToLoopStatementId), typeof(global::MetaDslx.Languages.Core.Model.ForToLoopStatement), typeof(global::MetaDslx.Languages.Core.Model.ForToLoopStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class ForToLoopStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ForToLoopStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ForToLoopStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ForToLoopStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("LoopControlVariable")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty LoopControlVariableProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ForToLoopStatement), name: "LoopControlVariable",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ForToLoopStatement_LoopControlVariable,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("InitialValue")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty InitialValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ForToLoopStatement), name: "InitialValue",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ForToLoopStatement_InitialValue,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("LimitValue")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty LimitValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ForToLoopStatement), name: "LimitValue",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ForToLoopStatement_LimitValue,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("StepValue")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty StepValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ForToLoopStatement), name: "StepValue",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ForToLoopStatement_StepValue,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.IfStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.IfStatementId), typeof(global::MetaDslx.Languages.Core.Model.IfStatement), typeof(global::MetaDslx.Languages.Core.Model.IfStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class IfStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static IfStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(IfStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.IfStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Condition")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ConditionProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IfStatement), name: "Condition",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IfStatement_Condition,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IfTrue")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty IfTrueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IfStatement), name: "IfTrue",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IfStatement_IfTrue,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IfFalse")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty IfFalseProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IfStatement), name: "IfFalse",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IfStatement_IfFalse,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.JumpStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.JumpStatementId), typeof(global::MetaDslx.Languages.Core.Model.JumpStatement), typeof(global::MetaDslx.Languages.Core.Model.JumpStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class JumpStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static JumpStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(JumpStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.JumpStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("JumpKind")]
			public static readonly global::MetaDslx.Modeling.ModelProperty JumpKindProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(JumpStatement), name: "JumpKind",
			        immutableType: typeof(object),
			        mutableType: typeof(object),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.JumpStatement_JumpKind,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Target")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TargetProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(JumpStatement), name: "Target",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Label),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.LabelBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.JumpStatement_Target,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.LabeledStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.LabeledStatementId), typeof(global::MetaDslx.Languages.Core.Model.LabeledStatement), typeof(global::MetaDslx.Languages.Core.Model.LabeledStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class LabeledStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static LabeledStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(LabeledStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.LabeledStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Label")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty LabelProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(LabeledStatement), name: "Label",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Label),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.LabelBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.LabeledStatement_Label,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Statement")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty StatementProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(LabeledStatement), name: "Statement",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.LabeledStatement_Statement,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.LockStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.LockStatementId), typeof(global::MetaDslx.Languages.Core.Model.LockStatement), typeof(global::MetaDslx.Languages.Core.Model.LockStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class LockStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static LockStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(LockStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.LockStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("LockedValue")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty LockedValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(LockStatement), name: "LockedValue",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.LockStatement_LockedValue,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Body")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty BodyProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(LockStatement), name: "Body",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.LockStatement_Body,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.LoopStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.LoopStatementId), typeof(global::MetaDslx.Languages.Core.Model.LoopStatement), typeof(global::MetaDslx.Languages.Core.Model.LoopStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class LoopStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static LoopStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(LoopStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.LoopStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Body")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty BodyProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(LoopStatement), name: "Body",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.LoopStatement_Body,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ReturnStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ReturnStatementId), typeof(global::MetaDslx.Languages.Core.Model.ReturnStatement), typeof(global::MetaDslx.Languages.Core.Model.ReturnStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class ReturnStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ReturnStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ReturnStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ReturnStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ReturnedValue")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ReturnedValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ReturnStatement), name: "ReturnedValue",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ReturnStatement_ReturnedValue,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.SwitchStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.SwitchStatementId), typeof(global::MetaDslx.Languages.Core.Model.SwitchStatement), typeof(global::MetaDslx.Languages.Core.Model.SwitchStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class SwitchStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static SwitchStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(SwitchStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.SwitchStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Value")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(SwitchStatement), name: "Value",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.SwitchStatement_Value,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Cases")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty CasesProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(SwitchStatement), name: "Cases",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.SwitchCase),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.SwitchCaseBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.SwitchStatement_Cases,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.SwitchCaseSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.SwitchCaseId), typeof(global::MetaDslx.Languages.Core.Model.SwitchCase), typeof(global::MetaDslx.Languages.Core.Model.SwitchCaseBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Element) })]
		public static class SwitchCase
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static SwitchCase()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(SwitchCase));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.SwitchCase; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Clauses")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ClausesProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(SwitchCase), name: "Clauses",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.CaseClause),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.CaseClauseBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.SwitchCase_Clauses,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Body")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty BodyProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(SwitchCase), name: "Body",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.SwitchCase_Body,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.CaseClauseSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.CaseClauseId), typeof(global::MetaDslx.Languages.Core.Model.CaseClause), typeof(global::MetaDslx.Languages.Core.Model.CaseClauseBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Element) })]
		public static class CaseClause
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static CaseClause()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(CaseClause));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.CaseClause; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Label")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty LabelProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(CaseClause), name: "Label",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Label),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.LabelBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.CaseClause_Label,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.DefaultCaseClauseSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.DefaultValueCaseClauseId), typeof(global::MetaDslx.Languages.Core.Model.DefaultValueCaseClause), typeof(global::MetaDslx.Languages.Core.Model.DefaultValueCaseClauseBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.CaseClause) })]
		public static class DefaultValueCaseClause
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static DefaultValueCaseClause()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(DefaultValueCaseClause));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.DefaultValueCaseClause; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.SingleValueCaseClauseSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.SingleValueCaseClauseId), typeof(global::MetaDslx.Languages.Core.Model.SingleValueCaseClause), typeof(global::MetaDslx.Languages.Core.Model.SingleValueCaseClauseBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.CaseClause) })]
		public static class SingleValueCaseClause
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static SingleValueCaseClause()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(SingleValueCaseClause));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.SingleValueCaseClause; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Value")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(SingleValueCaseClause), name: "Value",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.SingleValueCaseClause_Value,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.TryStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.TryStatementId), typeof(global::MetaDslx.Languages.Core.Model.TryStatement), typeof(global::MetaDslx.Languages.Core.Model.TryStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class TryStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static TryStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(TryStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.TryStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Body")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty BodyProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(TryStatement), name: "Body",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.TryStatement_Body,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Catches")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty CatchesProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(TryStatement), name: "Catches",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.CatchClause),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.CatchClauseBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.TryStatement_Catches,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Finally")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty FinallyProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(TryStatement), name: "Finally",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.TryStatement_Finally,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ExitLabel")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ExitLabelProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(TryStatement), name: "ExitLabel",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Label),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.LabelBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.TryStatement_ExitLabel,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.CatchClauseSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.CatchClauseId), typeof(global::MetaDslx.Languages.Core.Model.CatchClause), typeof(global::MetaDslx.Languages.Core.Model.CatchClauseBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Element) })]
		public static class CatchClause
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static CatchClause()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(CatchClause));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.CatchClause; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ExceptionDeclarationOrExpression")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ExceptionDeclarationOrExpressionProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(CatchClause), name: "ExceptionDeclarationOrExpression",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.CatchClause_ExceptionDeclarationOrExpression,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Filter")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty FilterProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(CatchClause), name: "Filter",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.CatchClause_Filter,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Handler")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty HandlerProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(CatchClause), name: "Handler",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.CatchClause_Handler,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.UsingStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.UsingStatementId), typeof(global::MetaDslx.Languages.Core.Model.UsingStatement), typeof(global::MetaDslx.Languages.Core.Model.UsingStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class UsingStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static UsingStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(UsingStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.UsingStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Resources")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ResourcesProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(UsingStatement), name: "Resources",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.UsingStatement_Resources,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Body")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty BodyProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(UsingStatement), name: "Body",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.UsingStatement_Body,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.WhileLoopStatementSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.WhileLoopStatementId), typeof(global::MetaDslx.Languages.Core.Model.WhileLoopStatement), typeof(global::MetaDslx.Languages.Core.Model.WhileLoopStatementBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Statement) })]
		public static class WhileLoopStatement
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static WhileLoopStatement()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(WhileLoopStatement));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.WhileLoopStatement; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Condition")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ConditionProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(WhileLoopStatement), name: "Condition",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.WhileLoopStatement_Condition,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ConditionIsTop")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ConditionIsTopProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(WhileLoopStatement), name: "ConditionIsTop",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.WhileLoopStatement_ConditionIsTop,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ConditionIsUntil")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ConditionIsUntilProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(WhileLoopStatement), name: "ConditionIsUntil",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.WhileLoopStatement_ConditionIsUntil,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ExpressionId), typeof(global::MetaDslx.Languages.Core.Model.Expression), typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Element) })]
		public static class Expression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Expression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Expression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Expression; }
			}
			
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Expression), name: "Type",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Expression_Type,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ArgumentSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ArgumentId), typeof(global::MetaDslx.Languages.Core.Model.Argument), typeof(global::MetaDslx.Languages.Core.Model.ArgumentBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression), typeof(CoreDescriptor.NamedElement) })]
		public static class Argument
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static Argument()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(Argument));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.Argument; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Value")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(Argument), name: "Value",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.Argument_Value,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.AssignmentExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.AssignmentExpressionId), typeof(global::MetaDslx.Languages.Core.Model.AssignmentExpression), typeof(global::MetaDslx.Languages.Core.Model.AssignmentExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class AssignmentExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static AssignmentExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(AssignmentExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.AssignmentExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Target")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty TargetProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(AssignmentExpression), name: "Target",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.AssignmentExpression_Target,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Value")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(AssignmentExpression), name: "Value",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.AssignmentExpression_Value,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.AwaitExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.AwaitExpressionId), typeof(global::MetaDslx.Languages.Core.Model.AwaitExpression), typeof(global::MetaDslx.Languages.Core.Model.AwaitExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class AwaitExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static AwaitExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(AwaitExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.AwaitExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Operation")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty OperationProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(AwaitExpression), name: "Operation",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.AwaitExpression_Operation,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.BinaryExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.BinaryExpressionId), typeof(global::MetaDslx.Languages.Core.Model.BinaryExpression), typeof(global::MetaDslx.Languages.Core.Model.BinaryExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class BinaryExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static BinaryExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(BinaryExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.BinaryExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("OperatorKind")]
			public static readonly global::MetaDslx.Modeling.ModelProperty OperatorKindProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(BinaryExpression), name: "OperatorKind",
			        immutableType: typeof(object),
			        mutableType: typeof(object),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.BinaryExpression_OperatorKind,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("LeftOperand")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty LeftOperandProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(BinaryExpression), name: "LeftOperand",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.BinaryExpression_LeftOperand,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("RightOperand")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty RightOperandProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(BinaryExpression), name: "RightOperand",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.BinaryExpression_RightOperand,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsChecked")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsCheckedProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(BinaryExpression), name: "IsChecked",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.BinaryExpression_IsChecked,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("OperatorMethod")]
			public static readonly global::MetaDslx.Modeling.ModelProperty OperatorMethodProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(BinaryExpression), name: "OperatorMethod",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.BinaryOperator),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.BinaryOperatorBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.BinaryExpression_OperatorMethod,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.CoalesceExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.CoalesceExpressionId), typeof(global::MetaDslx.Languages.Core.Model.CoalesceExpression), typeof(global::MetaDslx.Languages.Core.Model.CoalesceExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class CoalesceExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static CoalesceExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(CoalesceExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.CoalesceExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Value")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(CoalesceExpression), name: "Value",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.CoalesceExpression_Value,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("WhenNull")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty WhenNullProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(CoalesceExpression), name: "WhenNull",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.CoalesceExpression_WhenNull,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.CompoundAssignmentExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.CompoundAssignmentExpressionId), typeof(global::MetaDslx.Languages.Core.Model.CompoundAssignmentExpression), typeof(global::MetaDslx.Languages.Core.Model.CompoundAssignmentExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.AssignmentExpression) })]
		public static class CompoundAssignmentExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static CompoundAssignmentExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(CompoundAssignmentExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.CompoundAssignmentExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("OperatorKind")]
			public static readonly global::MetaDslx.Modeling.ModelProperty OperatorKindProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(CompoundAssignmentExpression), name: "OperatorKind",
			        immutableType: typeof(object),
			        mutableType: typeof(object),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.CompoundAssignmentExpression_OperatorKind,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsChecked")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsCheckedProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(CompoundAssignmentExpression), name: "IsChecked",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.CompoundAssignmentExpression_IsChecked,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ConditionalExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ConditionalExpressionId), typeof(global::MetaDslx.Languages.Core.Model.ConditionalExpression), typeof(global::MetaDslx.Languages.Core.Model.ConditionalExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class ConditionalExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ConditionalExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ConditionalExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ConditionalExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Condition")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ConditionProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ConditionalExpression), name: "Condition",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ConditionalExpression_Condition,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("WhenTrue")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty WhenTrueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ConditionalExpression), name: "WhenTrue",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ConditionalExpression_WhenTrue,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("WhenFalse")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty WhenFalseProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ConditionalExpression), name: "WhenFalse",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ConditionalExpression_WhenFalse,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ConversionExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ConversionExpressionId), typeof(global::MetaDslx.Languages.Core.Model.ConversionExpression), typeof(global::MetaDslx.Languages.Core.Model.ConversionExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class ConversionExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ConversionExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ConversionExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ConversionExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Operand")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty OperandProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ConversionExpression), name: "Operand",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ConversionExpression_Operand,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("TargetType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TargetTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ConversionExpression), name: "TargetType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ConversionExpression_TargetType,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsTryCast")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsTryCastProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ConversionExpression), name: "IsTryCast",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ConversionExpression_IsTryCast,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsChecked")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsCheckedProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ConversionExpression), name: "IsChecked",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ConversionExpression_IsChecked,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.DefaultValueExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.DefaultValueExpressionId), typeof(global::MetaDslx.Languages.Core.Model.DefaultValueExpression), typeof(global::MetaDslx.Languages.Core.Model.DefaultValueExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class DefaultValueExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static DefaultValueExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(DefaultValueExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.DefaultValueExpression; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.DiscardExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.DiscardExpressionId), typeof(global::MetaDslx.Languages.Core.Model.DiscardExpression), typeof(global::MetaDslx.Languages.Core.Model.DiscardExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class DiscardExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static DiscardExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(DiscardExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.DiscardExpression; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.DynamicExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.DynamicExpressionId), typeof(global::MetaDslx.Languages.Core.Model.DynamicExpression), typeof(global::MetaDslx.Languages.Core.Model.DynamicExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class DynamicExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static DynamicExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(DynamicExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.DynamicExpression; }
			}
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.IncrementOrDecrementExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.IncrementOrDecrementExpressionId), typeof(global::MetaDslx.Languages.Core.Model.IncrementOrDecrementExpression), typeof(global::MetaDslx.Languages.Core.Model.IncrementOrDecrementExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class IncrementOrDecrementExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static IncrementOrDecrementExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(IncrementOrDecrementExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.IncrementOrDecrementExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Target")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty TargetProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IncrementOrDecrementExpression), name: "Target",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IncrementOrDecrementExpression_Target,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsPostfix")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsPostfixProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IncrementOrDecrementExpression), name: "IsPostfix",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IncrementOrDecrementExpression_IsPostfix,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsChecked")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsCheckedProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IncrementOrDecrementExpression), name: "IsChecked",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IncrementOrDecrementExpression_IsChecked,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.IndexerAccessExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.IndexerAccessExpressionId), typeof(global::MetaDslx.Languages.Core.Model.IndexerAccessExpression), typeof(global::MetaDslx.Languages.Core.Model.IndexerAccessExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class IndexerAccessExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static IndexerAccessExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(IndexerAccessExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.IndexerAccessExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Receiver")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ReceiverProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IndexerAccessExpression), name: "Receiver",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IndexerAccessExpression_Receiver,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsNullConditional")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsNullConditionalProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IndexerAccessExpression), name: "IsNullConditional",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IndexerAccessExpression_IsNullConditional,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Arguments")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ArgumentsProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IndexerAccessExpression), name: "Arguments",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Argument),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ArgumentBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IndexerAccessExpression_Arguments,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Target")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TargetProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IndexerAccessExpression), name: "Target",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Indexer),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.IndexerBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IndexerAccessExpression_Target,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.InstanceReferenceExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.InstanceReferenceExpressionId), typeof(global::MetaDslx.Languages.Core.Model.InstanceReferenceExpression), typeof(global::MetaDslx.Languages.Core.Model.InstanceReferenceExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class InstanceReferenceExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static InstanceReferenceExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(InstanceReferenceExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.InstanceReferenceExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("AccessThroughBaseType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty AccessThroughBaseTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(InstanceReferenceExpression), name: "AccessThroughBaseType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.NamedType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.NamedTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.InstanceReferenceExpression_AccessThroughBaseType,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.InvocationExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.InvocationExpressionId), typeof(global::MetaDslx.Languages.Core.Model.InvocationExpression), typeof(global::MetaDslx.Languages.Core.Model.InvocationExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class InvocationExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static InvocationExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(InvocationExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.InvocationExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Receiver")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ReceiverProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(InvocationExpression), name: "Receiver",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.InvocationExpression_Receiver,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Arguments")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ArgumentsProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(InvocationExpression), name: "Arguments",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Argument),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ArgumentBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.InvocationExpression_Arguments,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.IsTypeExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.IsTypeExpressionId), typeof(global::MetaDslx.Languages.Core.Model.IsTypeExpression), typeof(global::MetaDslx.Languages.Core.Model.IsTypeExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class IsTypeExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static IsTypeExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(IsTypeExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.IsTypeExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ValueOperand")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ValueOperandProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IsTypeExpression), name: "ValueOperand",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IsTypeExpression_ValueOperand,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("TypeOperand")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeOperandProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IsTypeExpression), name: "TypeOperand",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IsTypeExpression_TypeOperand,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsNegated")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsNegatedProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(IsTypeExpression), name: "IsNegated",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.IsTypeExpression_IsNegated,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.LambdaExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.LambdaExpressionId), typeof(global::MetaDslx.Languages.Core.Model.LambdaExpression), typeof(global::MetaDslx.Languages.Core.Model.LambdaExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class LambdaExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static LambdaExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(LambdaExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.LambdaExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ReturnType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ReturnTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(LambdaExpression), name: "ReturnType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.LambdaExpression_ReturnType,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Parameters")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ParametersProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(LambdaExpression), name: "Parameters",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Parameter),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ParameterBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.LambdaExpression_Parameters,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Body")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty BodyProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(LambdaExpression), name: "Body",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Statement),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.StatementBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.LambdaExpression_Body,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.LiteralExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.LiteralExpressionId), typeof(global::MetaDslx.Languages.Core.Model.LiteralExpression), typeof(global::MetaDslx.Languages.Core.Model.LiteralExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class LiteralExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static LiteralExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(LiteralExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.LiteralExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Value")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ValueProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(LiteralExpression), name: "Value",
			        immutableType: typeof(object),
			        mutableType: typeof(object),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.LiteralExpression_Value,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Type")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(LiteralExpression), name: "Type",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.LiteralExpression_Type,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.NameOfExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.NameOfExpressionId), typeof(global::MetaDslx.Languages.Core.Model.NameOfExpression), typeof(global::MetaDslx.Languages.Core.Model.NameOfExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class NameOfExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static NameOfExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(NameOfExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.NameOfExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Argument")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ArgumentProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(NameOfExpression), name: "Argument",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.NameOfExpression_Argument,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ObjectCreationExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ObjectCreationExpressionId), typeof(global::MetaDslx.Languages.Core.Model.ObjectCreationExpression), typeof(global::MetaDslx.Languages.Core.Model.ObjectCreationExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class ObjectCreationExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ObjectCreationExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ObjectCreationExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ObjectCreationExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ObjectType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ObjectTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ObjectCreationExpression), name: "ObjectType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ObjectCreationExpression_ObjectType,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Arguments")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ArgumentsProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ObjectCreationExpression), name: "Arguments",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Argument),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ArgumentBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ObjectCreationExpression_Arguments,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Arguments")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty InitializersProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ObjectCreationExpression), name: "Initializers",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ObjectCreationExpression_Initializers,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ParenthesizedExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ParenthesizedExpressionId), typeof(global::MetaDslx.Languages.Core.Model.ParenthesizedExpression), typeof(global::MetaDslx.Languages.Core.Model.ParenthesizedExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class ParenthesizedExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ParenthesizedExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ParenthesizedExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ParenthesizedExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Operand")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty OperandProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ParenthesizedExpression), name: "Operand",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ParenthesizedExpression_Operand,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ReferenceExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ReferenceExpressionId), typeof(global::MetaDslx.Languages.Core.Model.ReferenceExpression), typeof(global::MetaDslx.Languages.Core.Model.ReferenceExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class ReferenceExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ReferenceExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ReferenceExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ReferenceExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Qualifier")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty QualifierProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ReferenceExpression), name: "Qualifier",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ReferenceExpression_Qualifier,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsNullConditional")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsNullConditionalProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ReferenceExpression), name: "IsNullConditional",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ReferenceExpression_IsNullConditional,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("TypeArguments")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeArgumentsProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ReferenceExpression), name: "TypeArguments",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ReferenceExpression_TypeArguments,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsDeclaration")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsDeclarationProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ReferenceExpression), name: "IsDeclaration",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ReferenceExpression_IsDeclaration,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ReferenceThroughType")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ReferenceThroughTypeProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ReferenceExpression), name: "ReferenceThroughType",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ReferenceExpression_ReferenceThroughType,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("ReferencedSymbol")]
			public static readonly global::MetaDslx.Modeling.ModelProperty ReferencedSymbolProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ReferenceExpression), name: "ReferencedSymbol",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Declaration),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DeclarationBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ReferenceExpression_ReferencedSymbol,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.SizeOfExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.SizeOfExpressionId), typeof(global::MetaDslx.Languages.Core.Model.SizeOfExpression), typeof(global::MetaDslx.Languages.Core.Model.SizeOfExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class SizeOfExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static SizeOfExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(SizeOfExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.SizeOfExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("TypeOperand")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeOperandProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(SizeOfExpression), name: "TypeOperand",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.SizeOfExpression_TypeOperand,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.TypeOfExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.TypeOfExpressionId), typeof(global::MetaDslx.Languages.Core.Model.TypeOfExpression), typeof(global::MetaDslx.Languages.Core.Model.TypeOfExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class TypeOfExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static TypeOfExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(TypeOfExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.TypeOfExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("TypeOperand")]
			public static readonly global::MetaDslx.Modeling.ModelProperty TypeOperandProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(TypeOfExpression), name: "TypeOperand",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.DataType),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.DataTypeBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.TypeOfExpression_TypeOperand,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.ThrowExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.ThrowExpressionId), typeof(global::MetaDslx.Languages.Core.Model.ThrowExpression), typeof(global::MetaDslx.Languages.Core.Model.ThrowExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class ThrowExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static ThrowExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(ThrowExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.ThrowExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Exception")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ExceptionProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(ThrowExpression), name: "Exception",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.ThrowExpression_Exception,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.TupleExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.TupleExpressionId), typeof(global::MetaDslx.Languages.Core.Model.TupleExpression), typeof(global::MetaDslx.Languages.Core.Model.TupleExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class TupleExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static TupleExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(TupleExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.TupleExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Arguments")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty ArgumentsProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(TupleExpression), name: "Arguments",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Argument),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ArgumentBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.TupleExpression_Arguments,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.UnaryExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.UnaryExpressionId), typeof(global::MetaDslx.Languages.Core.Model.UnaryExpression), typeof(global::MetaDslx.Languages.Core.Model.UnaryExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class UnaryExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static UnaryExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(UnaryExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.UnaryExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("OperatorKind")]
			public static readonly global::MetaDslx.Modeling.ModelProperty OperatorKindProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(UnaryExpression), name: "OperatorKind",
			        immutableType: typeof(object),
			        mutableType: typeof(object),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.UnaryExpression_OperatorKind,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Operand")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty OperandProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(UnaryExpression), name: "Operand",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.UnaryExpression_Operand,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("IsChecked")]
			public static readonly global::MetaDslx.Modeling.ModelProperty IsCheckedProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(UnaryExpression), name: "IsChecked",
			        immutableType: typeof(bool),
			        mutableType: typeof(bool),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.UnaryExpression_IsChecked,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("OperatorMethod")]
			public static readonly global::MetaDslx.Modeling.ModelProperty OperatorMethodProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(UnaryExpression), name: "OperatorMethod",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.UnaryOperator),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.UnaryOperatorBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.UnaryExpression_OperatorMethod,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.VariableDeclarationExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.VariableDeclarationExpressionId), typeof(global::MetaDslx.Languages.Core.Model.VariableDeclarationExpression), typeof(global::MetaDslx.Languages.Core.Model.VariableDeclarationExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class VariableDeclarationExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static VariableDeclarationExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(VariableDeclarationExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.VariableDeclarationExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Symbol")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty SymbolProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(VariableDeclarationExpression), name: "Symbol",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Variable),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.VariableBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.VariableDeclarationExpression_Symbol,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Initializer")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty InitializerProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(VariableDeclarationExpression), name: "Initializer",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.VariableDeclarationExpression_Initializer,
					defaultValue: null);
		}
	
		[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolAttribute(typeof(MetaDslx.CodeAnalysis.Symbols.VariableDeclarationGroupExpressionSymbol))]
		[global::MetaDslx.Modeling.ModelObjectDescriptorAttribute(typeof(global::MetaDslx.Languages.Core.Model.Internal.VariableDeclarationGroupExpressionId), typeof(global::MetaDslx.Languages.Core.Model.VariableDeclarationGroupExpression), typeof(global::MetaDslx.Languages.Core.Model.VariableDeclarationGroupExpressionBuilder), BaseDescriptors = new global::System.Type[] { typeof(CoreDescriptor.Expression) })]
		public static class VariableDeclarationGroupExpression
		{
			private static global::MetaDslx.Modeling.ModelObjectDescriptor descriptor;
		
			static VariableDeclarationGroupExpression()
			{
				descriptor = global::MetaDslx.Modeling.ModelObjectDescriptor.GetDescriptorForDescriptorType(typeof(VariableDeclarationGroupExpression));
			}
		
			internal static void Initialize()
			{
			}
		
			public static global::MetaDslx.Modeling.ModelObjectDescriptor MDescriptor
			{
				get { return descriptor; }
			}
		
			public static global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass
			{
				get { return global::MetaDslx.Languages.Core.Model.CoreInstance.VariableDeclarationGroupExpression; }
			}
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Declarations")]
			[global::MetaDslx.Modeling.CollectionAttribute]
			[global::MetaDslx.Modeling.OrderedAttribute]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty DeclarationsProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(VariableDeclarationGroupExpression), name: "Declarations",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.VariableDeclarationExpression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.VariableDeclarationExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.VariableDeclarationGroupExpression_Declarations,
					defaultValue: null);
			
			[global::MetaDslx.CodeAnalysis.Symbols.ModelObjectSymbolPropertyAttribute("Initializer")]
			[global::MetaDslx.Modeling.ContainmentAttribute]
			public static readonly global::MetaDslx.Modeling.ModelProperty InitializerProperty =
			    global::MetaDslx.Modeling.ModelProperty.Register(declaringType: typeof(VariableDeclarationGroupExpression), name: "Initializer",
			        immutableType: typeof(global::MetaDslx.Languages.Core.Model.Expression),
			        mutableType: typeof(global::MetaDslx.Languages.Core.Model.ExpressionBuilder),
					metaProperty: () => global::MetaDslx.Languages.Core.Model.CoreInstance.VariableDeclarationGroupExpression_Initializer,
					defaultValue: null);
		}
	}
}

namespace MetaDslx.Languages.Core.Model.Internal
{
	
	internal class ElementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ElementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ElementBuilderImpl(this, model, creating);
		}
	}
	
	internal class ElementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Element
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
	
		internal ElementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Element;
	
		public new ElementBuilder ToMutable()
		{
			return (ElementBuilder)base.ToMutable();
		}
	
		public new ElementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ElementBuilder)base.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	}
	
	internal class ElementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ElementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ElementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Element(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Element;
	
		public new Element ToImmutable()
		{
			return (Element)base.ToImmutable();
		}
	
		public new Element ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Element)base.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	}
	
	internal class AttributeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Attribute.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new AttributeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new AttributeBuilderImpl(this, model, creating);
		}
	}
	
	internal class AttributeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Attribute
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type1;
	
		internal AttributeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Attribute;
	
		public new AttributeBuilder ToMutable()
		{
			return (AttributeBuilder)base.ToMutable();
		}
	
		public new AttributeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (AttributeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		TypedElementBuilder TypedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		TypedElementBuilder TypedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataType TypedElement.Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, ref type0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Attribute.TypeProperty, ref type1); }
		}
	}
	
	internal class AttributeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, AttributeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal AttributeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Attribute(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Attribute;
	
		public new Attribute ToImmutable()
		{
			return (Attribute)base.ToImmutable();
		}
	
		public new Attribute ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Attribute)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		TypedElement TypedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		TypedElement TypedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataTypeBuilder TypedElementBuilder.Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, value); }
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElementBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElement, DataType> immutableLazy, global::System.Func<TypedElementBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Attribute.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Attribute.TypeProperty, value); }
		}
		
		void AttributeBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Attribute.TypeProperty, lazy);
		}
		
		void AttributeBuilder.SetTypeLazy(global::System.Func<AttributeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Attribute.TypeProperty, lazy);
		}
		
		void AttributeBuilder.SetTypeLazy(global::System.Func<Attribute, DataType> immutableLazy, global::System.Func<AttributeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Attribute.TypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class NamedElementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new NamedElementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new NamedElementBuilderImpl(this, model, creating);
		}
	}
	
	internal class NamedElementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, NamedElement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
	
		internal NamedElementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.NamedElement;
	
		public new NamedElementBuilder ToMutable()
		{
			return (NamedElementBuilder)base.ToMutable();
		}
	
		public new NamedElementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (NamedElementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	}
	
	internal class NamedElementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, NamedElementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal NamedElementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.NamedElement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.NamedElement;
	
		public new NamedElement ToImmutable()
		{
			return (NamedElement)base.ToImmutable();
		}
	
		public new NamedElement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (NamedElement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class TypedElementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new TypedElementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new TypedElementBuilderImpl(this, model, creating);
		}
	}
	
	internal class TypedElementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, TypedElement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
	
		internal TypedElementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TypedElement;
	
		public new TypedElementBuilder ToMutable()
		{
			return (TypedElementBuilder)base.ToMutable();
		}
	
		public new TypedElementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (TypedElementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, ref type0); }
		}
	}
	
	internal class TypedElementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, TypedElementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal TypedElementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.TypedElement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TypedElement;
	
		public new TypedElement ToImmutable()
		{
			return (TypedElement)base.ToImmutable();
		}
	
		public new TypedElement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (TypedElement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, value); }
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElementBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElement, DataType> immutableLazy, global::System.Func<TypedElementBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class DataTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new DataTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new DataTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class DataTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, DataType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
	
		internal DataTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DataType;
	
		public new DataTypeBuilder ToMutable()
		{
			return (DataTypeBuilder)base.ToMutable();
		}
	
		public new DataTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (DataTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	}
	
	internal class DataTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, DataTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal DataTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.DataType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DataType;
	
		public new DataType ToImmutable()
		{
			return (DataType)base.ToImmutable();
		}
	
		public new DataType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (DataType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class DeclarationId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new DeclarationImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new DeclarationBuilderImpl(this, model, creating);
		}
	}
	
	internal class DeclarationImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Declaration
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
	
		internal DeclarationImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Declaration;
	
		public new DeclarationBuilder ToMutable()
		{
			return (DeclarationBuilder)base.ToMutable();
		}
	
		public new DeclarationBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (DeclarationBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	}
	
	internal class DeclarationBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, DeclarationBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal DeclarationBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Declaration(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Declaration;
	
		public new Declaration ToImmutable()
		{
			return (Declaration)base.ToImmutable();
		}
	
		public new Declaration ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Declaration)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	}
	
	internal class TypedDeclarationId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedDeclaration.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new TypedDeclarationImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new TypedDeclarationBuilderImpl(this, model, creating);
		}
	}
	
	internal class TypedDeclarationImpl : global::MetaDslx.Modeling.ImmutableObjectBase, TypedDeclaration
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
	
		internal TypedDeclarationImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TypedDeclaration;
	
		public new TypedDeclarationBuilder ToMutable()
		{
			return (TypedDeclarationBuilder)base.ToMutable();
		}
	
		public new TypedDeclarationBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (TypedDeclarationBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		TypedElementBuilder TypedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		TypedElementBuilder TypedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, ref type0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	}
	
	internal class TypedDeclarationBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, TypedDeclarationBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal TypedDeclarationBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.TypedDeclaration(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TypedDeclaration;
	
		public new TypedDeclaration ToImmutable()
		{
			return (TypedDeclaration)base.ToImmutable();
		}
	
		public new TypedDeclaration ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (TypedDeclaration)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		TypedElement TypedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		TypedElement TypedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, value); }
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElementBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElement, DataType> immutableLazy, global::System.Func<TypedElementBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	}
	
	internal class NamespaceId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Namespace.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new NamespaceImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new NamespaceBuilderImpl(this, model, creating);
		}
	}
	
	internal class NamespaceImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Namespace
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
	
		internal NamespaceImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Namespace;
	
		public new NamespaceBuilder ToMutable()
		{
			return (NamespaceBuilder)base.ToMutable();
		}
	
		public new NamespaceBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (NamespaceBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	}
	
	internal class NamespaceBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, NamespaceBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal NamespaceBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Namespace(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Namespace;
	
		public new Namespace ToImmutable()
		{
			return (Namespace)base.ToImmutable();
		}
	
		public new Namespace ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Namespace)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	}
	
	internal class AliasId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Alias.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new AliasImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new AliasBuilderImpl(this, model, creating);
		}
	}
	
	internal class AliasImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Alias
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Declaration target0;
	
		internal AliasImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Alias;
	
		public new AliasBuilder ToMutable()
		{
			return (AliasBuilder)base.ToMutable();
		}
	
		public new AliasBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (AliasBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public Declaration Target
		{
		    get { return this.GetReference<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Alias.TargetProperty, ref target0); }
		}
	}
	
	internal class AliasBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, AliasBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal AliasBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Alias(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Alias;
	
		public new Alias ToImmutable()
		{
			return (Alias)base.ToImmutable();
		}
	
		public new Alias ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Alias)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public DeclarationBuilder Target
		{
			get { return this.GetReference<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Alias.TargetProperty); }
			set { this.SetReference<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Alias.TargetProperty, value); }
		}
		
		void AliasBuilder.SetTargetLazy(global::System.Func<DeclarationBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Alias.TargetProperty, lazy);
		}
		
		void AliasBuilder.SetTargetLazy(global::System.Func<AliasBuilder, DeclarationBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Alias.TargetProperty, lazy);
		}
		
		void AliasBuilder.SetTargetLazy(global::System.Func<Alias, Declaration> immutableLazy, global::System.Func<AliasBuilder, DeclarationBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Alias.TargetProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class NamedTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new NamedTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new NamedTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class NamedTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, NamedType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string dotNetName0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<DataType> typeArguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<NamedType> baseTypes0;
	
		internal NamedTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.NamedType;
	
		public new NamedTypeBuilder ToMutable()
		{
			return (NamedTypeBuilder)base.ToMutable();
		}
	
		public new NamedTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (NamedTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, ref dotNetName0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, ref isSealed0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments
		{
		    get { return this.GetList<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<NamedType> BaseTypes
		{
		    get { return this.GetList<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class NamedTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, NamedTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> typeArguments0;
		private global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> baseTypes0;
	
		internal NamedTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.NamedType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.NamedType;
	
		public new NamedType ToImmutable()
		{
			return (NamedType)base.ToImmutable();
		}
	
		public new NamedType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (NamedType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, value); }
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedTypeBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedType, string> immutableLazy, global::System.Func<NamedTypeBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments
		{
			get { return this.GetList<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> BaseTypes
		{
			get { return this.GetList<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class PrimitiveTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.PrimitiveType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new PrimitiveTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new PrimitiveTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class PrimitiveTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, PrimitiveType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string dotNetName0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<DataType> typeArguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<NamedType> baseTypes0;
	
		internal PrimitiveTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.PrimitiveType;
	
		public new PrimitiveTypeBuilder ToMutable()
		{
			return (PrimitiveTypeBuilder)base.ToMutable();
		}
	
		public new PrimitiveTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (PrimitiveTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedTypeBuilder NamedType.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedTypeBuilder NamedType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, ref dotNetName0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, ref isSealed0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments
		{
		    get { return this.GetList<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<NamedType> BaseTypes
		{
		    get { return this.GetList<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class PrimitiveTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, PrimitiveTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> typeArguments0;
		private global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> baseTypes0;
	
		internal PrimitiveTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.PrimitiveType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.PrimitiveType;
	
		public new PrimitiveType ToImmutable()
		{
			return (PrimitiveType)base.ToImmutable();
		}
	
		public new PrimitiveType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (PrimitiveType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedType NamedTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedType NamedTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, value); }
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedTypeBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedType, string> immutableLazy, global::System.Func<NamedTypeBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments
		{
			get { return this.GetList<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> BaseTypes
		{
			get { return this.GetList<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class ClassifierTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ClassifierType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ClassifierTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ClassifierTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class ClassifierTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ClassifierType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string dotNetName0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<DataType> typeArguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<NamedType> baseTypes0;
	
		internal ClassifierTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ClassifierType;
	
		public new ClassifierTypeBuilder ToMutable()
		{
			return (ClassifierTypeBuilder)base.ToMutable();
		}
	
		public new ClassifierTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ClassifierTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedTypeBuilder NamedType.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedTypeBuilder NamedType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, ref dotNetName0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, ref isSealed0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments
		{
		    get { return this.GetList<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<NamedType> BaseTypes
		{
		    get { return this.GetList<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class ClassifierTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ClassifierTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> typeArguments0;
		private global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> baseTypes0;
	
		internal ClassifierTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ClassifierType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ClassifierType;
	
		public new ClassifierType ToImmutable()
		{
			return (ClassifierType)base.ToImmutable();
		}
	
		public new ClassifierType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ClassifierType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedType NamedTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedType NamedTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, value); }
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedTypeBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedType, string> immutableLazy, global::System.Func<NamedTypeBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments
		{
			get { return this.GetList<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> BaseTypes
		{
			get { return this.GetList<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class InterfaceTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.InterfaceType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new InterfaceTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new InterfaceTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class InterfaceTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, InterfaceType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string dotNetName0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<DataType> typeArguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<NamedType> baseTypes0;
	
		internal InterfaceTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.InterfaceType;
	
		public new InterfaceTypeBuilder ToMutable()
		{
			return (InterfaceTypeBuilder)base.ToMutable();
		}
	
		public new InterfaceTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (InterfaceTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedTypeBuilder NamedType.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedTypeBuilder NamedType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ClassifierTypeBuilder ClassifierType.ToMutable()
		{
			return this.ToMutable();
		}
	
		ClassifierTypeBuilder ClassifierType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, ref dotNetName0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, ref isSealed0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments
		{
		    get { return this.GetList<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<NamedType> BaseTypes
		{
		    get { return this.GetList<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class InterfaceTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, InterfaceTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> typeArguments0;
		private global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> baseTypes0;
	
		internal InterfaceTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.InterfaceType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.InterfaceType;
	
		public new InterfaceType ToImmutable()
		{
			return (InterfaceType)base.ToImmutable();
		}
	
		public new InterfaceType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (InterfaceType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedType NamedTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedType NamedTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		ClassifierType ClassifierTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		ClassifierType ClassifierTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, value); }
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedTypeBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedType, string> immutableLazy, global::System.Func<NamedTypeBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments
		{
			get { return this.GetList<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> BaseTypes
		{
			get { return this.GetList<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class ClassTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ClassType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ClassTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ClassTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class ClassTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ClassType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string dotNetName0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<DataType> typeArguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<NamedType> baseTypes0;
	
		internal ClassTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ClassType;
	
		public new ClassTypeBuilder ToMutable()
		{
			return (ClassTypeBuilder)base.ToMutable();
		}
	
		public new ClassTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ClassTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedTypeBuilder NamedType.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedTypeBuilder NamedType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ClassifierTypeBuilder ClassifierType.ToMutable()
		{
			return this.ToMutable();
		}
	
		ClassifierTypeBuilder ClassifierType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, ref dotNetName0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, ref isSealed0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments
		{
		    get { return this.GetList<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<NamedType> BaseTypes
		{
		    get { return this.GetList<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class ClassTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ClassTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> typeArguments0;
		private global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> baseTypes0;
	
		internal ClassTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ClassType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ClassType;
	
		public new ClassType ToImmutable()
		{
			return (ClassType)base.ToImmutable();
		}
	
		public new ClassType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ClassType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedType NamedTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedType NamedTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		ClassifierType ClassifierTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		ClassifierType ClassifierTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, value); }
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedTypeBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedType, string> immutableLazy, global::System.Func<NamedTypeBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments
		{
			get { return this.GetList<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> BaseTypes
		{
			get { return this.GetList<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class StructTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.StructType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new StructTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new StructTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class StructTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, StructType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string dotNetName0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<DataType> typeArguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<NamedType> baseTypes0;
	
		internal StructTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.StructType;
	
		public new StructTypeBuilder ToMutable()
		{
			return (StructTypeBuilder)base.ToMutable();
		}
	
		public new StructTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (StructTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedTypeBuilder NamedType.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedTypeBuilder NamedType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ClassifierTypeBuilder ClassifierType.ToMutable()
		{
			return this.ToMutable();
		}
	
		ClassifierTypeBuilder ClassifierType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, ref dotNetName0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, ref isSealed0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments
		{
		    get { return this.GetList<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<NamedType> BaseTypes
		{
		    get { return this.GetList<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class StructTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, StructTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> typeArguments0;
		private global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> baseTypes0;
	
		internal StructTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.StructType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.StructType;
	
		public new StructType ToImmutable()
		{
			return (StructType)base.ToImmutable();
		}
	
		public new StructType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (StructType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedType NamedTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedType NamedTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		ClassifierType ClassifierTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		ClassifierType ClassifierTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, value); }
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedTypeBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedType, string> immutableLazy, global::System.Func<NamedTypeBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments
		{
			get { return this.GetList<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> BaseTypes
		{
			get { return this.GetList<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class EnumTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.EnumType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new EnumTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new EnumTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class EnumTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, EnumType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string dotNetName0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<DataType> typeArguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<NamedType> baseTypes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<EnumLiteral> literals0;
	
		internal EnumTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.EnumType;
	
		public new EnumTypeBuilder ToMutable()
		{
			return (EnumTypeBuilder)base.ToMutable();
		}
	
		public new EnumTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (EnumTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedTypeBuilder NamedType.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedTypeBuilder NamedType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, ref dotNetName0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, ref isSealed0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments
		{
		    get { return this.GetList<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<NamedType> BaseTypes
		{
		    get { return this.GetList<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<EnumLiteral> Literals
		{
		    get { return this.GetList<EnumLiteral>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.EnumType.LiteralsProperty, ref literals0); }
		}
	}
	
	internal class EnumTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, EnumTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> typeArguments0;
		private global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> baseTypes0;
		private global::MetaDslx.Modeling.MutableModelList<EnumLiteralBuilder> literals0;
	
		internal EnumTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.EnumType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.EnumType;
	
		public new EnumType ToImmutable()
		{
			return (EnumType)base.ToImmutable();
		}
	
		public new EnumType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (EnumType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedType NamedTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedType NamedTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, value); }
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedTypeBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedType, string> immutableLazy, global::System.Func<NamedTypeBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments
		{
			get { return this.GetList<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> BaseTypes
		{
			get { return this.GetList<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<EnumLiteralBuilder> Literals
		{
			get { return this.GetList<EnumLiteralBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.EnumType.LiteralsProperty, ref literals0); }
		}
	}
	
	internal class EnumLiteralId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.EnumLiteral.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new EnumLiteralImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new EnumLiteralBuilderImpl(this, model, creating);
		}
	}
	
	internal class EnumLiteralImpl : global::MetaDslx.Modeling.ImmutableObjectBase, EnumLiteral
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EnumType type1;
	
		internal EnumLiteralImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.EnumLiteral;
	
		public new EnumLiteralBuilder ToMutable()
		{
			return (EnumLiteralBuilder)base.ToMutable();
		}
	
		public new EnumLiteralBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (EnumLiteralBuilder)base.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		TypedElementBuilder TypedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		TypedElementBuilder TypedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataType TypedElement.Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, ref type0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public EnumType Type
		{
		    get { return this.GetReference<EnumType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.EnumLiteral.TypeProperty, ref type1); }
		}
	}
	
	internal class EnumLiteralBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, EnumLiteralBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal EnumLiteralBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.EnumLiteral(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.EnumLiteral;
	
		public new EnumLiteral ToImmutable()
		{
			return (EnumLiteral)base.ToImmutable();
		}
	
		public new EnumLiteral ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (EnumLiteral)base.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		TypedElement TypedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		TypedElement TypedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataTypeBuilder TypedElementBuilder.Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, value); }
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElementBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElement, DataType> immutableLazy, global::System.Func<TypedElementBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public EnumTypeBuilder Type
		{
			get { return this.GetReference<EnumTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.EnumLiteral.TypeProperty); }
		}
		
		void EnumLiteralBuilder.SetTypeLazy(global::System.Func<EnumTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.EnumLiteral.TypeProperty, lazy);
		}
		
		void EnumLiteralBuilder.SetTypeLazy(global::System.Func<EnumLiteralBuilder, EnumTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.EnumLiteral.TypeProperty, lazy);
		}
		
		void EnumLiteralBuilder.SetTypeLazy(global::System.Func<EnumLiteral, EnumType> immutableLazy, global::System.Func<EnumLiteralBuilder, EnumTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.EnumLiteral.TypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class DelegateTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.DelegateType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new DelegateTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new DelegateTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class DelegateTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, DelegateType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string dotNetName0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<DataType> typeArguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<NamedType> baseTypes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType returnType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
	
		internal DelegateTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DelegateType;
	
		public new DelegateTypeBuilder ToMutable()
		{
			return (DelegateTypeBuilder)base.ToMutable();
		}
	
		public new DelegateTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (DelegateTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedTypeBuilder NamedType.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedTypeBuilder NamedType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, ref dotNetName0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, ref isSealed0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments
		{
		    get { return this.GetList<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<NamedType> BaseTypes
		{
		    get { return this.GetList<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	
		
		public DataType ReturnType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DelegateType.ReturnTypeProperty, ref returnType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DelegateType.ParametersProperty, ref parameters0); }
		}
	}
	
	internal class DelegateTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, DelegateTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> typeArguments0;
		private global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> baseTypes0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal DelegateTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.DelegateType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DelegateType;
	
		public new DelegateType ToImmutable()
		{
			return (DelegateType)base.ToImmutable();
		}
	
		public new DelegateType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (DelegateType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedType NamedTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedType NamedTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, value); }
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedTypeBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedType, string> immutableLazy, global::System.Func<NamedTypeBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments
		{
			get { return this.GetList<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> BaseTypes
		{
			get { return this.GetList<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	
		
		public DataTypeBuilder ReturnType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DelegateType.ReturnTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DelegateType.ReturnTypeProperty, value); }
		}
		
		void DelegateTypeBuilder.SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DelegateType.ReturnTypeProperty, lazy);
		}
		
		void DelegateTypeBuilder.SetReturnTypeLazy(global::System.Func<DelegateTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DelegateType.ReturnTypeProperty, lazy);
		}
		
		void DelegateTypeBuilder.SetReturnTypeLazy(global::System.Func<DelegateType, DataType> immutableLazy, global::System.Func<DelegateTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DelegateType.ReturnTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DelegateType.ParametersProperty, ref parameters0); }
		}
	}
	
	internal class ArrayTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ArrayType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ArrayTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ArrayTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class ArrayTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ArrayType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int lowerBound0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int size0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType elementType0;
	
		internal ArrayTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ArrayType;
	
		public new ArrayTypeBuilder ToMutable()
		{
			return (ArrayTypeBuilder)base.ToMutable();
		}
	
		public new ArrayTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ArrayTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public int LowerBound
		{
		    get { return this.GetValue<int>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ArrayType.LowerBoundProperty, ref lowerBound0); }
		}
	
		
		public int Size
		{
		    get { return this.GetValue<int>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ArrayType.SizeProperty, ref size0); }
		}
	
		
		public DataType ElementType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ArrayType.ElementTypeProperty, ref elementType0); }
		}
	}
	
	internal class ArrayTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ArrayTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ArrayTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ArrayType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ArrayType;
	
		public new ArrayType ToImmutable()
		{
			return (ArrayType)base.ToImmutable();
		}
	
		public new ArrayType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ArrayType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public int LowerBound
		{
			get { return this.GetValue<int>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ArrayType.LowerBoundProperty); }
			set { this.SetValue<int>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ArrayType.LowerBoundProperty, value); }
		}
		
		void ArrayTypeBuilder.SetLowerBoundLazy(global::System.Func<int> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ArrayType.LowerBoundProperty, lazy);
		}
		
		void ArrayTypeBuilder.SetLowerBoundLazy(global::System.Func<ArrayTypeBuilder, int> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ArrayType.LowerBoundProperty, lazy);
		}
		
		void ArrayTypeBuilder.SetLowerBoundLazy(global::System.Func<ArrayType, int> immutableLazy, global::System.Func<ArrayTypeBuilder, int> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.ArrayType.LowerBoundProperty, immutableLazy, mutableLazy);
		}
	
		
		public int Size
		{
			get { return this.GetValue<int>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ArrayType.SizeProperty); }
			set { this.SetValue<int>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ArrayType.SizeProperty, value); }
		}
		
		void ArrayTypeBuilder.SetSizeLazy(global::System.Func<int> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ArrayType.SizeProperty, lazy);
		}
		
		void ArrayTypeBuilder.SetSizeLazy(global::System.Func<ArrayTypeBuilder, int> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ArrayType.SizeProperty, lazy);
		}
		
		void ArrayTypeBuilder.SetSizeLazy(global::System.Func<ArrayType, int> immutableLazy, global::System.Func<ArrayTypeBuilder, int> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.ArrayType.SizeProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ElementType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ArrayType.ElementTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ArrayType.ElementTypeProperty, value); }
		}
		
		void ArrayTypeBuilder.SetElementTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ArrayType.ElementTypeProperty, lazy);
		}
		
		void ArrayTypeBuilder.SetElementTypeLazy(global::System.Func<ArrayTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ArrayType.ElementTypeProperty, lazy);
		}
		
		void ArrayTypeBuilder.SetElementTypeLazy(global::System.Func<ArrayType, DataType> immutableLazy, global::System.Func<ArrayTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ArrayType.ElementTypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class CollectionTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.CollectionType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new CollectionTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new CollectionTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class CollectionTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, CollectionType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isUnique0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isUnordered0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType itemType0;
	
		internal CollectionTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.CollectionType;
	
		public new CollectionTypeBuilder ToMutable()
		{
			return (CollectionTypeBuilder)base.ToMutable();
		}
	
		public new CollectionTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (CollectionTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public bool IsUnique
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CollectionType.IsUniqueProperty, ref isUnique0); }
		}
	
		
		public bool IsUnordered
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CollectionType.IsUnorderedProperty, ref isUnordered0); }
		}
	
		
		public DataType ItemType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CollectionType.ItemTypeProperty, ref itemType0); }
		}
	}
	
	internal class CollectionTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, CollectionTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal CollectionTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.CollectionType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.CollectionType;
	
		public new CollectionType ToImmutable()
		{
			return (CollectionType)base.ToImmutable();
		}
	
		public new CollectionType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (CollectionType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsUnique
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CollectionType.IsUniqueProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CollectionType.IsUniqueProperty, value); }
		}
		
		void CollectionTypeBuilder.SetIsUniqueLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.CollectionType.IsUniqueProperty, lazy);
		}
		
		void CollectionTypeBuilder.SetIsUniqueLazy(global::System.Func<CollectionTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.CollectionType.IsUniqueProperty, lazy);
		}
		
		void CollectionTypeBuilder.SetIsUniqueLazy(global::System.Func<CollectionType, bool> immutableLazy, global::System.Func<CollectionTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.CollectionType.IsUniqueProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsUnordered
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CollectionType.IsUnorderedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CollectionType.IsUnorderedProperty, value); }
		}
		
		void CollectionTypeBuilder.SetIsUnorderedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.CollectionType.IsUnorderedProperty, lazy);
		}
		
		void CollectionTypeBuilder.SetIsUnorderedLazy(global::System.Func<CollectionTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.CollectionType.IsUnorderedProperty, lazy);
		}
		
		void CollectionTypeBuilder.SetIsUnorderedLazy(global::System.Func<CollectionType, bool> immutableLazy, global::System.Func<CollectionTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.CollectionType.IsUnorderedProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ItemType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CollectionType.ItemTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CollectionType.ItemTypeProperty, value); }
		}
		
		void CollectionTypeBuilder.SetItemTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CollectionType.ItemTypeProperty, lazy);
		}
		
		void CollectionTypeBuilder.SetItemTypeLazy(global::System.Func<CollectionTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CollectionType.ItemTypeProperty, lazy);
		}
		
		void CollectionTypeBuilder.SetItemTypeLazy(global::System.Func<CollectionType, DataType> immutableLazy, global::System.Func<CollectionTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.CollectionType.ItemTypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class DictionaryTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.DictionaryType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new DictionaryTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new DictionaryTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class DictionaryTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, DictionaryType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isUnordered0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType keyType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType valueType0;
	
		internal DictionaryTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DictionaryType;
	
		public new DictionaryTypeBuilder ToMutable()
		{
			return (DictionaryTypeBuilder)base.ToMutable();
		}
	
		public new DictionaryTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (DictionaryTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public bool IsUnordered
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DictionaryType.IsUnorderedProperty, ref isUnordered0); }
		}
	
		
		public DataType KeyType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DictionaryType.KeyTypeProperty, ref keyType0); }
		}
	
		
		public DataType ValueType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DictionaryType.ValueTypeProperty, ref valueType0); }
		}
	}
	
	internal class DictionaryTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, DictionaryTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal DictionaryTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.DictionaryType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DictionaryType;
	
		public new DictionaryType ToImmutable()
		{
			return (DictionaryType)base.ToImmutable();
		}
	
		public new DictionaryType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (DictionaryType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsUnordered
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DictionaryType.IsUnorderedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DictionaryType.IsUnorderedProperty, value); }
		}
		
		void DictionaryTypeBuilder.SetIsUnorderedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.DictionaryType.IsUnorderedProperty, lazy);
		}
		
		void DictionaryTypeBuilder.SetIsUnorderedLazy(global::System.Func<DictionaryTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.DictionaryType.IsUnorderedProperty, lazy);
		}
		
		void DictionaryTypeBuilder.SetIsUnorderedLazy(global::System.Func<DictionaryType, bool> immutableLazy, global::System.Func<DictionaryTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.DictionaryType.IsUnorderedProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder KeyType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DictionaryType.KeyTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DictionaryType.KeyTypeProperty, value); }
		}
		
		void DictionaryTypeBuilder.SetKeyTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DictionaryType.KeyTypeProperty, lazy);
		}
		
		void DictionaryTypeBuilder.SetKeyTypeLazy(global::System.Func<DictionaryTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DictionaryType.KeyTypeProperty, lazy);
		}
		
		void DictionaryTypeBuilder.SetKeyTypeLazy(global::System.Func<DictionaryType, DataType> immutableLazy, global::System.Func<DictionaryTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DictionaryType.KeyTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ValueType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DictionaryType.ValueTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DictionaryType.ValueTypeProperty, value); }
		}
		
		void DictionaryTypeBuilder.SetValueTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DictionaryType.ValueTypeProperty, lazy);
		}
		
		void DictionaryTypeBuilder.SetValueTypeLazy(global::System.Func<DictionaryTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DictionaryType.ValueTypeProperty, lazy);
		}
		
		void DictionaryTypeBuilder.SetValueTypeLazy(global::System.Func<DictionaryType, DataType> immutableLazy, global::System.Func<DictionaryTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DictionaryType.ValueTypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class NullableTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.NullableType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new NullableTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new NullableTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class NullableTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, NullableType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType innerType0;
	
		internal NullableTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.NullableType;
	
		public new NullableTypeBuilder ToMutable()
		{
			return (NullableTypeBuilder)base.ToMutable();
		}
	
		public new NullableTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (NullableTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public DataType InnerType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NullableType.InnerTypeProperty, ref innerType0); }
		}
	}
	
	internal class NullableTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, NullableTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal NullableTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.NullableType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.NullableType;
	
		public new NullableType ToImmutable()
		{
			return (NullableType)base.ToImmutable();
		}
	
		public new NullableType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (NullableType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder InnerType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NullableType.InnerTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NullableType.InnerTypeProperty, value); }
		}
		
		void NullableTypeBuilder.SetInnerTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NullableType.InnerTypeProperty, lazy);
		}
		
		void NullableTypeBuilder.SetInnerTypeLazy(global::System.Func<NullableTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NullableType.InnerTypeProperty, lazy);
		}
		
		void NullableTypeBuilder.SetInnerTypeLazy(global::System.Func<NullableType, DataType> immutableLazy, global::System.Func<NullableTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NullableType.InnerTypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class TupleTypeId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.TupleType.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new TupleTypeImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new TupleTypeBuilderImpl(this, model, creating);
		}
	}
	
	internal class TupleTypeImpl : global::MetaDslx.Modeling.ImmutableObjectBase, TupleType
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
	
		internal TupleTypeImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TupleType;
	
		public new TupleTypeBuilder ToMutable()
		{
			return (TupleTypeBuilder)base.ToMutable();
		}
	
		public new TupleTypeBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (TupleTypeBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	}
	
	internal class TupleTypeBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, TupleTypeBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal TupleTypeBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.TupleType(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TupleType;
	
		public new TupleType ToImmutable()
		{
			return (TupleType)base.ToImmutable();
		}
	
		public new TupleType ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (TupleType)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class TypeParameterId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypeParameter.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new TypeParameterImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new TypeParameterBuilderImpl(this, model, creating);
		}
	}
	
	internal class TypeParameterImpl : global::MetaDslx.Modeling.ImmutableObjectBase, TypeParameter
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string dotNetName0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<DataType> typeArguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<NamedType> baseTypes0;
	
		internal TypeParameterImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TypeParameter;
	
		public new TypeParameterBuilder ToMutable()
		{
			return (TypeParameterBuilder)base.ToMutable();
		}
	
		public new TypeParameterBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (TypeParameterBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedTypeBuilder NamedType.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedTypeBuilder NamedType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, ref dotNetName0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, ref isSealed0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments
		{
		    get { return this.GetList<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<NamedType> BaseTypes
		{
		    get { return this.GetList<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class TypeParameterBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, TypeParameterBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> typeArguments0;
		private global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> baseTypes0;
	
		internal TypeParameterBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.TypeParameter(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TypeParameter;
	
		public new TypeParameter ToImmutable()
		{
			return (TypeParameter)base.ToImmutable();
		}
	
		public new TypeParameter ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (TypeParameter)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedType NamedTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedType NamedTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public string DotNetName
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.DotNetNameProperty, value); }
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedTypeBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, lazy);
		}
		
		void NamedTypeBuilder.SetDotNetNameLazy(global::System.Func<NamedType, string> immutableLazy, global::System.Func<NamedTypeBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedType.DotNetNameProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsAbstractProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsAbstractLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.IsSealedProperty, value); }
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedTypeBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, lazy);
		}
		
		void NamedTypeBuilder.SetIsSealedLazy(global::System.Func<NamedType, bool> immutableLazy, global::System.Func<NamedTypeBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.NamedType.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments
		{
			get { return this.GetList<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<NamedTypeBuilder> BaseTypes
		{
			get { return this.GetList<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedType.BaseTypesProperty, ref baseTypes0); }
		}
	}
	
	internal class GenericTypeReferenceId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.GenericTypeReference.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new GenericTypeReferenceImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new GenericTypeReferenceBuilderImpl(this, model, creating);
		}
	}
	
	internal class GenericTypeReferenceImpl : global::MetaDslx.Modeling.ImmutableObjectBase, GenericTypeReference
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private NamedType referencedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<DataType> typeArguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private NamedType constructedType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType resolvedType1;
	
		internal GenericTypeReferenceImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.GenericTypeReference;
	
		public new GenericTypeReferenceBuilder ToMutable()
		{
			return (GenericTypeReferenceBuilder)base.ToMutable();
		}
	
		public new GenericTypeReferenceBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (GenericTypeReferenceBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DataTypeBuilder DataType.ToMutable()
		{
			return this.ToMutable();
		}
	
		DataTypeBuilder DataType.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataType DataType.ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty, ref resolvedType0); }
		}
	
		
		public NamedType ReferencedType
		{
		    get { return this.GetReference<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.GenericTypeReference.ReferencedTypeProperty, ref referencedType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments
		{
		    get { return this.GetList<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.GenericTypeReference.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public NamedType ConstructedType
		{
		    get { return this.GetReference<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.GenericTypeReference.ConstructedTypeProperty, ref constructedType0); }
		}
	
		
		public DataType ResolvedType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.GenericTypeReference.ResolvedTypeProperty, ref resolvedType1); }
		}
	}
	
	internal class GenericTypeReferenceBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, GenericTypeReferenceBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> typeArguments0;
	
		internal GenericTypeReferenceBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.GenericTypeReference(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.GenericTypeReference;
	
		public new GenericTypeReference ToImmutable()
		{
			return (GenericTypeReference)base.ToImmutable();
		}
	
		public new GenericTypeReference ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (GenericTypeReference)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		DataType DataTypeBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		DataType DataTypeBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataTypeBuilder DataTypeBuilder.ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.DataType.ResolvedTypeProperty); }
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, lazy);
		}
		
		void DataTypeBuilder.SetResolvedTypeLazy(global::System.Func<DataType, DataType> immutableLazy, global::System.Func<DataTypeBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.DataType.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public NamedTypeBuilder ReferencedType
		{
			get { return this.GetReference<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.GenericTypeReference.ReferencedTypeProperty); }
			set { this.SetReference<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.GenericTypeReference.ReferencedTypeProperty, value); }
		}
		
		void GenericTypeReferenceBuilder.SetReferencedTypeLazy(global::System.Func<NamedTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.GenericTypeReference.ReferencedTypeProperty, lazy);
		}
		
		void GenericTypeReferenceBuilder.SetReferencedTypeLazy(global::System.Func<GenericTypeReferenceBuilder, NamedTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.GenericTypeReference.ReferencedTypeProperty, lazy);
		}
		
		void GenericTypeReferenceBuilder.SetReferencedTypeLazy(global::System.Func<GenericTypeReference, NamedType> immutableLazy, global::System.Func<GenericTypeReferenceBuilder, NamedTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.GenericTypeReference.ReferencedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments
		{
			get { return this.GetList<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.GenericTypeReference.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public NamedTypeBuilder ConstructedType
		{
			get { return this.GetReference<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.GenericTypeReference.ConstructedTypeProperty); }
		}
		
		void GenericTypeReferenceBuilder.SetConstructedTypeLazy(global::System.Func<NamedTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.GenericTypeReference.ConstructedTypeProperty, lazy);
		}
		
		void GenericTypeReferenceBuilder.SetConstructedTypeLazy(global::System.Func<GenericTypeReferenceBuilder, NamedTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.GenericTypeReference.ConstructedTypeProperty, lazy);
		}
		
		void GenericTypeReferenceBuilder.SetConstructedTypeLazy(global::System.Func<GenericTypeReference, NamedType> immutableLazy, global::System.Func<GenericTypeReferenceBuilder, NamedTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.GenericTypeReference.ConstructedTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ResolvedType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.GenericTypeReference.ResolvedTypeProperty); }
		}
		
		void GenericTypeReferenceBuilder.SetResolvedTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.GenericTypeReference.ResolvedTypeProperty, lazy);
		}
		
		void GenericTypeReferenceBuilder.SetResolvedTypeLazy(global::System.Func<GenericTypeReferenceBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.GenericTypeReference.ResolvedTypeProperty, lazy);
		}
		
		void GenericTypeReferenceBuilder.SetResolvedTypeLazy(global::System.Func<GenericTypeReference, DataType> immutableLazy, global::System.Func<GenericTypeReferenceBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.GenericTypeReference.ResolvedTypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class MemberId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new MemberImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new MemberBuilderImpl(this, model, creating);
		}
	}
	
	internal class MemberImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Member
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
	
		internal MemberImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Member;
	
		public new MemberBuilder ToMutable()
		{
			return (MemberBuilder)base.ToMutable();
		}
	
		public new MemberBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (MemberBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	}
	
	internal class MemberBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, MemberBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal MemberBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Member(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Member;
	
		public new Member ToImmutable()
		{
			return (Member)base.ToImmutable();
		}
	
		public new Member ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Member)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class FieldLikeMemberId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new FieldLikeMemberImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new FieldLikeMemberBuilderImpl(this, model, creating);
		}
	}
	
	internal class FieldLikeMemberImpl : global::MetaDslx.Modeling.ImmutableObjectBase, FieldLikeMember
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type1;
	
		internal FieldLikeMemberImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.FieldLikeMember;
	
		public new FieldLikeMemberBuilder ToMutable()
		{
			return (FieldLikeMemberBuilder)base.ToMutable();
		}
	
		public new FieldLikeMemberBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (FieldLikeMemberBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		TypedElementBuilder TypedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		TypedElementBuilder TypedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		TypedDeclarationBuilder TypedDeclaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		TypedDeclarationBuilder TypedDeclaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataType TypedElement.Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, ref type0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty, ref type1); }
		}
	}
	
	internal class FieldLikeMemberBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, FieldLikeMemberBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal FieldLikeMemberBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.FieldLikeMember(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.FieldLikeMember;
	
		public new FieldLikeMember ToImmutable()
		{
			return (FieldLikeMember)base.ToImmutable();
		}
	
		public new FieldLikeMember ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (FieldLikeMember)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		TypedElement TypedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		TypedElement TypedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		TypedDeclaration TypedDeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		TypedDeclaration TypedDeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataTypeBuilder TypedElementBuilder.Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, value); }
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElementBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElement, DataType> immutableLazy, global::System.Func<TypedElementBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty, value); }
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, lazy);
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<FieldLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, lazy);
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<FieldLikeMember, DataType> immutableLazy, global::System.Func<FieldLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class FieldId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Field.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new FieldImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new FieldBuilderImpl(this, model, creating);
		}
	}
	
	internal class FieldImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Field
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type1;
	
		internal FieldImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Field;
	
		public new FieldBuilder ToMutable()
		{
			return (FieldBuilder)base.ToMutable();
		}
	
		public new FieldBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (FieldBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		TypedElementBuilder TypedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		TypedElementBuilder TypedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		TypedDeclarationBuilder TypedDeclaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		TypedDeclarationBuilder TypedDeclaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		FieldLikeMemberBuilder FieldLikeMember.ToMutable()
		{
			return this.ToMutable();
		}
	
		FieldLikeMemberBuilder FieldLikeMember.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataType TypedElement.Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, ref type0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty, ref type1); }
		}
	}
	
	internal class FieldBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, FieldBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal FieldBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Field(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Field;
	
		public new Field ToImmutable()
		{
			return (Field)base.ToImmutable();
		}
	
		public new Field ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Field)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		TypedElement TypedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		TypedElement TypedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		TypedDeclaration TypedDeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		TypedDeclaration TypedDeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		FieldLikeMember FieldLikeMemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		FieldLikeMember FieldLikeMemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataTypeBuilder TypedElementBuilder.Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, value); }
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElementBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElement, DataType> immutableLazy, global::System.Func<TypedElementBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty, value); }
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, lazy);
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<FieldLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, lazy);
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<FieldLikeMember, DataType> immutableLazy, global::System.Func<FieldLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class PropertyId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new PropertyImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new PropertyBuilderImpl(this, model, creating);
		}
	}
	
	internal class PropertyImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Property
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type1;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Method getMethod0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Method setMethod0;
	
		internal PropertyImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Property;
	
		public new PropertyBuilder ToMutable()
		{
			return (PropertyBuilder)base.ToMutable();
		}
	
		public new PropertyBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (PropertyBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		TypedElementBuilder TypedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		TypedElementBuilder TypedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		TypedDeclarationBuilder TypedDeclaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		TypedDeclarationBuilder TypedDeclaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		FieldLikeMemberBuilder FieldLikeMember.ToMutable()
		{
			return this.ToMutable();
		}
	
		FieldLikeMemberBuilder FieldLikeMember.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataType TypedElement.Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, ref type0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty, ref type1); }
		}
	
		
		public Method GetMethod
		{
		    get { return this.GetReference<Method>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.GetMethodProperty, ref getMethod0); }
		}
	
		
		public Method SetMethod
		{
		    get { return this.GetReference<Method>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.SetMethodProperty, ref setMethod0); }
		}
	}
	
	internal class PropertyBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, PropertyBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal PropertyBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Property(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Property;
	
		public new Property ToImmutable()
		{
			return (Property)base.ToImmutable();
		}
	
		public new Property ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Property)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		TypedElement TypedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		TypedElement TypedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		TypedDeclaration TypedDeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		TypedDeclaration TypedDeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		FieldLikeMember FieldLikeMemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		FieldLikeMember FieldLikeMemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataTypeBuilder TypedElementBuilder.Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, value); }
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElementBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElement, DataType> immutableLazy, global::System.Func<TypedElementBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty, value); }
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, lazy);
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<FieldLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, lazy);
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<FieldLikeMember, DataType> immutableLazy, global::System.Func<FieldLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public MethodBuilder GetMethod
		{
			get { return this.GetReference<MethodBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.GetMethodProperty); }
			set { this.SetReference<MethodBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.GetMethodProperty, value); }
		}
		
		void PropertyBuilder.SetGetMethodLazy(global::System.Func<MethodBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.GetMethodProperty, lazy);
		}
		
		void PropertyBuilder.SetGetMethodLazy(global::System.Func<PropertyBuilder, MethodBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.GetMethodProperty, lazy);
		}
		
		void PropertyBuilder.SetGetMethodLazy(global::System.Func<Property, Method> immutableLazy, global::System.Func<PropertyBuilder, MethodBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.GetMethodProperty, immutableLazy, mutableLazy);
		}
	
		
		public MethodBuilder SetMethod
		{
			get { return this.GetReference<MethodBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.SetMethodProperty); }
			set { this.SetReference<MethodBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.SetMethodProperty, value); }
		}
		
		void PropertyBuilder.SetSetMethodLazy(global::System.Func<MethodBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.SetMethodProperty, lazy);
		}
		
		void PropertyBuilder.SetSetMethodLazy(global::System.Func<PropertyBuilder, MethodBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.SetMethodProperty, lazy);
		}
		
		void PropertyBuilder.SetSetMethodLazy(global::System.Func<Property, Method> immutableLazy, global::System.Func<PropertyBuilder, MethodBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.SetMethodProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class IndexerId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Indexer.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new IndexerImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new IndexerBuilderImpl(this, model, creating);
		}
	}
	
	internal class IndexerImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Indexer
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type1;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Method getMethod0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Method setMethod0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
	
		internal IndexerImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Indexer;
	
		public new IndexerBuilder ToMutable()
		{
			return (IndexerBuilder)base.ToMutable();
		}
	
		public new IndexerBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (IndexerBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		TypedElementBuilder TypedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		TypedElementBuilder TypedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		TypedDeclarationBuilder TypedDeclaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		TypedDeclarationBuilder TypedDeclaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		FieldLikeMemberBuilder FieldLikeMember.ToMutable()
		{
			return this.ToMutable();
		}
	
		FieldLikeMemberBuilder FieldLikeMember.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		PropertyBuilder Property.ToMutable()
		{
			return this.ToMutable();
		}
	
		PropertyBuilder Property.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataType TypedElement.Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, ref type0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty, ref type1); }
		}
	
		
		public Method GetMethod
		{
		    get { return this.GetReference<Method>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.GetMethodProperty, ref getMethod0); }
		}
	
		
		public Method SetMethod
		{
		    get { return this.GetReference<Method>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.SetMethodProperty, ref setMethod0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Indexer.ParametersProperty, ref parameters0); }
		}
	}
	
	internal class IndexerBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, IndexerBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal IndexerBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Indexer(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Indexer;
	
		public new Indexer ToImmutable()
		{
			return (Indexer)base.ToImmutable();
		}
	
		public new Indexer ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Indexer)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		TypedElement TypedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		TypedElement TypedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		TypedDeclaration TypedDeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		TypedDeclaration TypedDeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		FieldLikeMember FieldLikeMemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		FieldLikeMember FieldLikeMemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Property PropertyBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Property PropertyBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataTypeBuilder TypedElementBuilder.Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypedElement.TypeProperty, value); }
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElementBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, lazy);
		}
		
		void TypedElementBuilder.SetTypeLazy(global::System.Func<TypedElement, DataType> immutableLazy, global::System.Func<TypedElementBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TypedElement.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.FieldLikeMember.TypeProperty, value); }
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, lazy);
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<FieldLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, lazy);
		}
		
		void FieldLikeMemberBuilder.SetTypeLazy(global::System.Func<FieldLikeMember, DataType> immutableLazy, global::System.Func<FieldLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.FieldLikeMember.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public MethodBuilder GetMethod
		{
			get { return this.GetReference<MethodBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.GetMethodProperty); }
			set { this.SetReference<MethodBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.GetMethodProperty, value); }
		}
		
		void PropertyBuilder.SetGetMethodLazy(global::System.Func<MethodBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.GetMethodProperty, lazy);
		}
		
		void PropertyBuilder.SetGetMethodLazy(global::System.Func<PropertyBuilder, MethodBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.GetMethodProperty, lazy);
		}
		
		void PropertyBuilder.SetGetMethodLazy(global::System.Func<Property, Method> immutableLazy, global::System.Func<PropertyBuilder, MethodBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.GetMethodProperty, immutableLazy, mutableLazy);
		}
	
		
		public MethodBuilder SetMethod
		{
			get { return this.GetReference<MethodBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.SetMethodProperty); }
			set { this.SetReference<MethodBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Property.SetMethodProperty, value); }
		}
		
		void PropertyBuilder.SetSetMethodLazy(global::System.Func<MethodBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.SetMethodProperty, lazy);
		}
		
		void PropertyBuilder.SetSetMethodLazy(global::System.Func<PropertyBuilder, MethodBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.SetMethodProperty, lazy);
		}
		
		void PropertyBuilder.SetSetMethodLazy(global::System.Func<Property, Method> immutableLazy, global::System.Func<PropertyBuilder, MethodBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Property.SetMethodProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Indexer.ParametersProperty, ref parameters0); }
		}
	}
	
	internal class MethodLikeMemberId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new MethodLikeMemberImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new MethodLikeMemberBuilderImpl(this, model, creating);
		}
	}
	
	internal class MethodLikeMemberImpl : global::MetaDslx.Modeling.ImmutableObjectBase, MethodLikeMember
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAsync0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType returnType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
	
		internal MethodLikeMemberImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.MethodLikeMember;
	
		public new MethodLikeMemberBuilder ToMutable()
		{
			return (MethodLikeMemberBuilder)base.ToMutable();
		}
	
		public new MethodLikeMemberBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (MethodLikeMemberBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public bool IsAsync
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, ref isAsync0); }
		}
	
		
		public DataType ReturnType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, ref returnType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, ref body0); }
		}
	}
	
	internal class MethodLikeMemberBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, MethodLikeMemberBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal MethodLikeMemberBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.MethodLikeMember(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.MethodLikeMember;
	
		public new MethodLikeMember ToImmutable()
		{
			return (MethodLikeMember)base.ToImmutable();
		}
	
		public new MethodLikeMember ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (MethodLikeMember)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAsync
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMember, bool> immutableLazy, global::System.Func<MethodLikeMemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ReturnType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMember, DataType> immutableLazy, global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMemberBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMember, Statement> immutableLazy, global::System.Func<MethodLikeMemberBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class MethodId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Method.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new MethodImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new MethodBuilderImpl(this, model, creating);
		}
	}
	
	internal class MethodImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Method
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAsync0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType returnType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
	
		internal MethodImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Method;
	
		public new MethodBuilder ToMutable()
		{
			return (MethodBuilder)base.ToMutable();
		}
	
		public new MethodBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (MethodBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable()
		{
			return this.ToMutable();
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public bool IsAsync
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, ref isAsync0); }
		}
	
		
		public DataType ReturnType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, ref returnType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, ref body0); }
		}
	}
	
	internal class MethodBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, MethodBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal MethodBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Method(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Method;
	
		public new Method ToImmutable()
		{
			return (Method)base.ToImmutable();
		}
	
		public new Method ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Method)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAsync
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMember, bool> immutableLazy, global::System.Func<MethodLikeMemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ReturnType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMember, DataType> immutableLazy, global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMemberBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMember, Statement> immutableLazy, global::System.Func<MethodLikeMemberBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ParameterId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Parameter.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ParameterImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ParameterBuilderImpl(this, model, creating);
		}
	}
	
	internal class ParameterImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Parameter
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isConst0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression defaultValue0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVarArg0;
	
		internal ParameterImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Parameter;
	
		public new ParameterBuilder ToMutable()
		{
			return (ParameterBuilder)base.ToMutable();
		}
	
		public new ParameterBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ParameterBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		LocalBuilder Local.ToMutable()
		{
			return this.ToMutable();
		}
	
		LocalBuilder Local.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		VariableBuilder Variable.ToMutable()
		{
			return this.ToMutable();
		}
	
		VariableBuilder Variable.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsConst
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.IsConstProperty, ref isConst0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.TypeProperty, ref type0); }
		}
	
		
		public Expression DefaultValue
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.DefaultValueProperty, ref defaultValue0); }
		}
	
		
		public bool IsVarArg
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Parameter.IsVarArgProperty, ref isVarArg0); }
		}
	}
	
	internal class ParameterBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ParameterBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal ParameterBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Parameter(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Parameter;
	
		public new Parameter ToImmutable()
		{
			return (Parameter)base.ToImmutable();
		}
	
		public new Parameter ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Parameter)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Local LocalBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Local LocalBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Variable VariableBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Variable VariableBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsConst
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.IsConstProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.IsConstProperty, value); }
		}
		
		void VariableBuilder.SetIsConstLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Variable.IsConstProperty, lazy);
		}
		
		void VariableBuilder.SetIsConstLazy(global::System.Func<VariableBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Variable.IsConstProperty, lazy);
		}
		
		void VariableBuilder.SetIsConstLazy(global::System.Func<Variable, bool> immutableLazy, global::System.Func<VariableBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Variable.IsConstProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.TypeProperty, value); }
		}
		
		void VariableBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.TypeProperty, lazy);
		}
		
		void VariableBuilder.SetTypeLazy(global::System.Func<VariableBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.TypeProperty, lazy);
		}
		
		void VariableBuilder.SetTypeLazy(global::System.Func<Variable, DataType> immutableLazy, global::System.Func<VariableBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder DefaultValue
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.DefaultValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.DefaultValueProperty, value); }
		}
		
		void VariableBuilder.SetDefaultValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.DefaultValueProperty, lazy);
		}
		
		void VariableBuilder.SetDefaultValueLazy(global::System.Func<VariableBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.DefaultValueProperty, lazy);
		}
		
		void VariableBuilder.SetDefaultValueLazy(global::System.Func<Variable, Expression> immutableLazy, global::System.Func<VariableBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.DefaultValueProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVarArg
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Parameter.IsVarArgProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Parameter.IsVarArgProperty, value); }
		}
		
		void ParameterBuilder.SetIsVarArgLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Parameter.IsVarArgProperty, lazy);
		}
		
		void ParameterBuilder.SetIsVarArgLazy(global::System.Func<ParameterBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Parameter.IsVarArgProperty, lazy);
		}
		
		void ParameterBuilder.SetIsVarArgLazy(global::System.Func<Parameter, bool> immutableLazy, global::System.Func<ParameterBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Parameter.IsVarArgProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ConstructorId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Constructor.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ConstructorImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ConstructorBuilderImpl(this, model, creating);
		}
	}
	
	internal class ConstructorImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Constructor
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAsync0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType returnType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private InvocationExpression nextConstructorInvocation0;
	
		internal ConstructorImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Constructor;
	
		public new ConstructorBuilder ToMutable()
		{
			return (ConstructorBuilder)base.ToMutable();
		}
	
		public new ConstructorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ConstructorBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable()
		{
			return this.ToMutable();
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public bool IsAsync
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, ref isAsync0); }
		}
	
		
		public DataType ReturnType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, ref returnType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, ref body0); }
		}
	
		
		public InvocationExpression NextConstructorInvocation
		{
		    get { return this.GetReference<InvocationExpression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Constructor.NextConstructorInvocationProperty, ref nextConstructorInvocation0); }
		}
	}
	
	internal class ConstructorBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ConstructorBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal ConstructorBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Constructor(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Constructor;
	
		public new Constructor ToImmutable()
		{
			return (Constructor)base.ToImmutable();
		}
	
		public new Constructor ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Constructor)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAsync
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMember, bool> immutableLazy, global::System.Func<MethodLikeMemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ReturnType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMember, DataType> immutableLazy, global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMemberBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMember, Statement> immutableLazy, global::System.Func<MethodLikeMemberBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, immutableLazy, mutableLazy);
		}
	
		
		public InvocationExpressionBuilder NextConstructorInvocation
		{
			get { return this.GetReference<InvocationExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Constructor.NextConstructorInvocationProperty); }
			set { this.SetReference<InvocationExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Constructor.NextConstructorInvocationProperty, value); }
		}
		
		void ConstructorBuilder.SetNextConstructorInvocationLazy(global::System.Func<InvocationExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Constructor.NextConstructorInvocationProperty, lazy);
		}
		
		void ConstructorBuilder.SetNextConstructorInvocationLazy(global::System.Func<ConstructorBuilder, InvocationExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Constructor.NextConstructorInvocationProperty, lazy);
		}
		
		void ConstructorBuilder.SetNextConstructorInvocationLazy(global::System.Func<Constructor, InvocationExpression> immutableLazy, global::System.Func<ConstructorBuilder, InvocationExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Constructor.NextConstructorInvocationProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class DestructorId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Destructor.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new DestructorImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new DestructorBuilderImpl(this, model, creating);
		}
	}
	
	internal class DestructorImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Destructor
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAsync0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType returnType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
	
		internal DestructorImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Destructor;
	
		public new DestructorBuilder ToMutable()
		{
			return (DestructorBuilder)base.ToMutable();
		}
	
		public new DestructorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (DestructorBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable()
		{
			return this.ToMutable();
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public bool IsAsync
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, ref isAsync0); }
		}
	
		
		public DataType ReturnType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, ref returnType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, ref body0); }
		}
	}
	
	internal class DestructorBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, DestructorBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal DestructorBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Destructor(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Destructor;
	
		public new Destructor ToImmutable()
		{
			return (Destructor)base.ToImmutable();
		}
	
		public new Destructor ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Destructor)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAsync
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMember, bool> immutableLazy, global::System.Func<MethodLikeMemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ReturnType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMember, DataType> immutableLazy, global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMemberBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMember, Statement> immutableLazy, global::System.Func<MethodLikeMemberBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class LambdaId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Lambda.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new LambdaImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new LambdaBuilderImpl(this, model, creating);
		}
	}
	
	internal class LambdaImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Lambda
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAsync0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType returnType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
	
		internal LambdaImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Lambda;
	
		public new LambdaBuilder ToMutable()
		{
			return (LambdaBuilder)base.ToMutable();
		}
	
		public new LambdaBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (LambdaBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable()
		{
			return this.ToMutable();
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public bool IsAsync
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, ref isAsync0); }
		}
	
		
		public DataType ReturnType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, ref returnType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, ref body0); }
		}
	}
	
	internal class LambdaBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, LambdaBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal LambdaBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Lambda(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Lambda;
	
		public new Lambda ToImmutable()
		{
			return (Lambda)base.ToImmutable();
		}
	
		public new Lambda ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Lambda)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAsync
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMember, bool> immutableLazy, global::System.Func<MethodLikeMemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ReturnType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMember, DataType> immutableLazy, global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMemberBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMember, Statement> immutableLazy, global::System.Func<MethodLikeMemberBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class OperatorId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Operator.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new OperatorImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new OperatorBuilderImpl(this, model, creating);
		}
	}
	
	internal class OperatorImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Operator
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAsync0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType returnType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
	
		internal OperatorImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Operator;
	
		public new OperatorBuilder ToMutable()
		{
			return (OperatorBuilder)base.ToMutable();
		}
	
		public new OperatorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (OperatorBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable()
		{
			return this.ToMutable();
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public bool IsAsync
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, ref isAsync0); }
		}
	
		
		public DataType ReturnType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, ref returnType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, ref body0); }
		}
	}
	
	internal class OperatorBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, OperatorBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal OperatorBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Operator(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Operator;
	
		public new Operator ToImmutable()
		{
			return (Operator)base.ToImmutable();
		}
	
		public new Operator ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Operator)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAsync
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMember, bool> immutableLazy, global::System.Func<MethodLikeMemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ReturnType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMember, DataType> immutableLazy, global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMemberBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMember, Statement> immutableLazy, global::System.Func<MethodLikeMemberBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ConversionOperatorId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionOperator.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ConversionOperatorImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ConversionOperatorBuilderImpl(this, model, creating);
		}
	}
	
	internal class ConversionOperatorImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ConversionOperator
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAsync0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType returnType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
	
		internal ConversionOperatorImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ConversionOperator;
	
		public new ConversionOperatorBuilder ToMutable()
		{
			return (ConversionOperatorBuilder)base.ToMutable();
		}
	
		public new ConversionOperatorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ConversionOperatorBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable()
		{
			return this.ToMutable();
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		OperatorBuilder Operator.ToMutable()
		{
			return this.ToMutable();
		}
	
		OperatorBuilder Operator.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public bool IsAsync
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, ref isAsync0); }
		}
	
		
		public DataType ReturnType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, ref returnType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, ref body0); }
		}
	}
	
	internal class ConversionOperatorBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ConversionOperatorBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal ConversionOperatorBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ConversionOperator(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ConversionOperator;
	
		public new ConversionOperator ToImmutable()
		{
			return (ConversionOperator)base.ToImmutable();
		}
	
		public new ConversionOperator ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ConversionOperator)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Operator OperatorBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Operator OperatorBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAsync
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMember, bool> immutableLazy, global::System.Func<MethodLikeMemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ReturnType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMember, DataType> immutableLazy, global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMemberBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMember, Statement> immutableLazy, global::System.Func<MethodLikeMemberBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class UnaryOperatorId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryOperator.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new UnaryOperatorImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new UnaryOperatorBuilderImpl(this, model, creating);
		}
	}
	
	internal class UnaryOperatorImpl : global::MetaDslx.Modeling.ImmutableObjectBase, UnaryOperator
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAsync0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType returnType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private object operatorKind0;
	
		internal UnaryOperatorImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.UnaryOperator;
	
		public new UnaryOperatorBuilder ToMutable()
		{
			return (UnaryOperatorBuilder)base.ToMutable();
		}
	
		public new UnaryOperatorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (UnaryOperatorBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable()
		{
			return this.ToMutable();
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		OperatorBuilder Operator.ToMutable()
		{
			return this.ToMutable();
		}
	
		OperatorBuilder Operator.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public bool IsAsync
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, ref isAsync0); }
		}
	
		
		public DataType ReturnType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, ref returnType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, ref body0); }
		}
	
		
		public object OperatorKind
		{
		    get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryOperator.OperatorKindProperty, ref operatorKind0); }
		}
	}
	
	internal class UnaryOperatorBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, UnaryOperatorBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal UnaryOperatorBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.UnaryOperator(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.UnaryOperator;
	
		public new UnaryOperator ToImmutable()
		{
			return (UnaryOperator)base.ToImmutable();
		}
	
		public new UnaryOperator ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (UnaryOperator)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Operator OperatorBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Operator OperatorBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAsync
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMember, bool> immutableLazy, global::System.Func<MethodLikeMemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ReturnType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMember, DataType> immutableLazy, global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMemberBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMember, Statement> immutableLazy, global::System.Func<MethodLikeMemberBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, immutableLazy, mutableLazy);
		}
	
		
		public object OperatorKind
		{
			get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryOperator.OperatorKindProperty); }
			set { this.SetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryOperator.OperatorKindProperty, value); }
		}
		
		void UnaryOperatorBuilder.SetOperatorKindLazy(global::System.Func<object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryOperator.OperatorKindProperty, lazy);
		}
		
		void UnaryOperatorBuilder.SetOperatorKindLazy(global::System.Func<UnaryOperatorBuilder, object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryOperator.OperatorKindProperty, lazy);
		}
		
		void UnaryOperatorBuilder.SetOperatorKindLazy(global::System.Func<UnaryOperator, object> immutableLazy, global::System.Func<UnaryOperatorBuilder, object> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryOperator.OperatorKindProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class BinaryOperatorId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryOperator.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new BinaryOperatorImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new BinaryOperatorBuilderImpl(this, model, creating);
		}
	}
	
	internal class BinaryOperatorImpl : global::MetaDslx.Modeling.ImmutableObjectBase, BinaryOperator
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isStatic0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isVirtual0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isOverride0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAbstract0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isSealed0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isAsync0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType returnType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private object operatorKind0;
	
		internal BinaryOperatorImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.BinaryOperator;
	
		public new BinaryOperatorBuilder ToMutable()
		{
			return (BinaryOperatorBuilder)base.ToMutable();
		}
	
		public new BinaryOperatorBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (BinaryOperatorBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MemberBuilder Member.ToMutable()
		{
			return this.ToMutable();
		}
	
		MemberBuilder Member.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable()
		{
			return this.ToMutable();
		}
	
		MethodLikeMemberBuilder MethodLikeMember.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		OperatorBuilder Operator.ToMutable()
		{
			return this.ToMutable();
		}
	
		OperatorBuilder Operator.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, ref isStatic0); }
		}
	
		
		public bool IsVirtual
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, ref isVirtual0); }
		}
	
		
		public bool IsOverride
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, ref isOverride0); }
		}
	
		
		public bool IsAbstract
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, ref isAbstract0); }
		}
	
		
		public bool IsSealed
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, ref isSealed0); }
		}
	
		
		public bool IsAsync
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, ref isAsync0); }
		}
	
		
		public DataType ReturnType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, ref returnType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, ref body0); }
		}
	
		
		public object OperatorKind
		{
		    get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryOperator.OperatorKindProperty, ref operatorKind0); }
		}
	}
	
	internal class BinaryOperatorBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, BinaryOperatorBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal BinaryOperatorBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.BinaryOperator(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.BinaryOperator;
	
		public new BinaryOperator ToImmutable()
		{
			return (BinaryOperator)base.ToImmutable();
		}
	
		public new BinaryOperator ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (BinaryOperator)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Member MemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Member MemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		MethodLikeMember MethodLikeMemberBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Operator OperatorBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Operator OperatorBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsStatic
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsStaticProperty, value); }
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, lazy);
		}
		
		void MemberBuilder.SetIsStaticLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsStaticProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsVirtual
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsVirtualProperty, value); }
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, lazy);
		}
		
		void MemberBuilder.SetIsVirtualLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsVirtualProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsOverride
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsOverrideProperty, value); }
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, lazy);
		}
		
		void MemberBuilder.SetIsOverrideLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsOverrideProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAbstract
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsAbstractProperty, value); }
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, lazy);
		}
		
		void MemberBuilder.SetIsAbstractLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsAbstractProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsSealed
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Member.IsSealedProperty, value); }
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<MemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, lazy);
		}
		
		void MemberBuilder.SetIsSealedLazy(global::System.Func<Member, bool> immutableLazy, global::System.Func<MemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Member.IsSealedProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsAsync
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.IsAsyncProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMemberBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetIsAsyncLazy(global::System.Func<MethodLikeMember, bool> immutableLazy, global::System.Func<MethodLikeMemberBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.MethodLikeMember.IsAsyncProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ReturnType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ReturnTypeProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetReturnTypeLazy(global::System.Func<MethodLikeMember, DataType> immutableLazy, global::System.Func<MethodLikeMemberBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.ReturnTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.ParametersProperty, ref parameters0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.MethodLikeMember.BodyProperty, value); }
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMemberBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, lazy);
		}
		
		void MethodLikeMemberBuilder.SetBodyLazy(global::System.Func<MethodLikeMember, Statement> immutableLazy, global::System.Func<MethodLikeMemberBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.MethodLikeMember.BodyProperty, immutableLazy, mutableLazy);
		}
	
		
		public object OperatorKind
		{
			get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryOperator.OperatorKindProperty); }
			set { this.SetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryOperator.OperatorKindProperty, value); }
		}
		
		void BinaryOperatorBuilder.SetOperatorKindLazy(global::System.Func<object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryOperator.OperatorKindProperty, lazy);
		}
		
		void BinaryOperatorBuilder.SetOperatorKindLazy(global::System.Func<BinaryOperatorBuilder, object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryOperator.OperatorKindProperty, lazy);
		}
		
		void BinaryOperatorBuilder.SetOperatorKindLazy(global::System.Func<BinaryOperator, object> immutableLazy, global::System.Func<BinaryOperatorBuilder, object> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryOperator.OperatorKindProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class StatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Statement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new StatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new StatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class StatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Statement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
	
		internal StatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Statement;
	
		public new StatementBuilder ToMutable()
		{
			return (StatementBuilder)base.ToMutable();
		}
	
		public new StatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (StatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	}
	
	internal class StatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, StatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal StatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Statement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Statement;
	
		public new Statement ToImmutable()
		{
			return (Statement)base.ToImmutable();
		}
	
		public new Statement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Statement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	}
	
	internal class LocalId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Local.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new LocalImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new LocalBuilderImpl(this, model, creating);
		}
	}
	
	internal class LocalImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Local
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
	
		internal LocalImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Local;
	
		public new LocalBuilder ToMutable()
		{
			return (LocalBuilder)base.ToMutable();
		}
	
		public new LocalBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (LocalBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	}
	
	internal class LocalBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, LocalBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal LocalBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Local(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Local;
	
		public new Local ToImmutable()
		{
			return (Local)base.ToImmutable();
		}
	
		public new Local ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Local)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	}
	
	internal class VariableId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new VariableImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new VariableBuilderImpl(this, model, creating);
		}
	}
	
	internal class VariableImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Variable
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isConst0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression defaultValue0;
	
		internal VariableImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Variable;
	
		public new VariableBuilder ToMutable()
		{
			return (VariableBuilder)base.ToMutable();
		}
	
		public new VariableBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (VariableBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		LocalBuilder Local.ToMutable()
		{
			return this.ToMutable();
		}
	
		LocalBuilder Local.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsConst
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.IsConstProperty, ref isConst0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.TypeProperty, ref type0); }
		}
	
		
		public Expression DefaultValue
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.DefaultValueProperty, ref defaultValue0); }
		}
	}
	
	internal class VariableBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, VariableBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal VariableBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Variable(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Variable;
	
		public new Variable ToImmutable()
		{
			return (Variable)base.ToImmutable();
		}
	
		public new Variable ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Variable)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Local LocalBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Local LocalBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	
		
		public bool IsConst
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.IsConstProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.IsConstProperty, value); }
		}
		
		void VariableBuilder.SetIsConstLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Variable.IsConstProperty, lazy);
		}
		
		void VariableBuilder.SetIsConstLazy(global::System.Func<VariableBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.Variable.IsConstProperty, lazy);
		}
		
		void VariableBuilder.SetIsConstLazy(global::System.Func<Variable, bool> immutableLazy, global::System.Func<VariableBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.Variable.IsConstProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.TypeProperty, value); }
		}
		
		void VariableBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.TypeProperty, lazy);
		}
		
		void VariableBuilder.SetTypeLazy(global::System.Func<VariableBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.TypeProperty, lazy);
		}
		
		void VariableBuilder.SetTypeLazy(global::System.Func<Variable, DataType> immutableLazy, global::System.Func<VariableBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder DefaultValue
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.DefaultValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Variable.DefaultValueProperty, value); }
		}
		
		void VariableBuilder.SetDefaultValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.DefaultValueProperty, lazy);
		}
		
		void VariableBuilder.SetDefaultValueLazy(global::System.Func<VariableBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.DefaultValueProperty, lazy);
		}
		
		void VariableBuilder.SetDefaultValueLazy(global::System.Func<Variable, Expression> immutableLazy, global::System.Func<VariableBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Variable.DefaultValueProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class LabelId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Label.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new LabelImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new LabelBuilderImpl(this, model, creating);
		}
	}
	
	internal class LabelImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Label
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> typeParameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Declaration> members0;
	
		internal LabelImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Label;
	
		public new LabelBuilder ToMutable()
		{
			return (LabelBuilder)base.ToMutable();
		}
	
		public new LabelBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (LabelBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		DeclarationBuilder Declaration.ToMutable()
		{
			return this.ToMutable();
		}
	
		DeclarationBuilder Declaration.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		LocalBuilder Local.ToMutable()
		{
			return this.ToMutable();
		}
	
		LocalBuilder Local.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<TypeParameter> TypeParameters
		{
		    get { return this.GetList<TypeParameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Declaration> Members
		{
		    get { return this.GetList<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	}
	
	internal class LabelBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, LabelBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> typeParameters0;
		private global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> members0;
	
		internal LabelBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Label(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Label;
	
		public new Label ToImmutable()
		{
			return (Label)base.ToImmutable();
		}
	
		public new Label ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Label)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Declaration DeclarationBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Declaration DeclarationBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Local LocalBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Local LocalBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<TypeParameterBuilder> TypeParameters
		{
			get { return this.GetList<TypeParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.TypeParametersProperty, ref typeParameters0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DeclarationBuilder> Members
		{
			get { return this.GetList<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Declaration.MembersProperty, ref members0); }
		}
	}
	
	internal class BlockStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.BlockStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new BlockStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new BlockStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class BlockStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, BlockStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Statement> statements0;
	
		internal BlockStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.BlockStatement;
	
		public new BlockStatementBuilder ToMutable()
		{
			return (BlockStatementBuilder)base.ToMutable();
		}
	
		public new BlockStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (BlockStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Statement> Statements
		{
		    get { return this.GetList<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BlockStatement.StatementsProperty, ref statements0); }
		}
	}
	
	internal class BlockStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, BlockStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<StatementBuilder> statements0;
	
		internal BlockStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.BlockStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.BlockStatement;
	
		public new BlockStatement ToImmutable()
		{
			return (BlockStatement)base.ToImmutable();
		}
	
		public new BlockStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (BlockStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<StatementBuilder> Statements
		{
			get { return this.GetList<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BlockStatement.StatementsProperty, ref statements0); }
		}
	}
	
	internal class EmptyStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.EmptyStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new EmptyStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new EmptyStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class EmptyStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, EmptyStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
	
		internal EmptyStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.EmptyStatement;
	
		public new EmptyStatementBuilder ToMutable()
		{
			return (EmptyStatementBuilder)base.ToMutable();
		}
	
		public new EmptyStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (EmptyStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	}
	
	internal class EmptyStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, EmptyStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal EmptyStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.EmptyStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.EmptyStatement;
	
		public new EmptyStatement ToImmutable()
		{
			return (EmptyStatement)base.ToImmutable();
		}
	
		public new EmptyStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (EmptyStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	}
	
	internal class ExpressionStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ExpressionStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ExpressionStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ExpressionStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class ExpressionStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ExpressionStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression expression0;
	
		internal ExpressionStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ExpressionStatement;
	
		public new ExpressionStatementBuilder ToMutable()
		{
			return (ExpressionStatementBuilder)base.ToMutable();
		}
	
		public new ExpressionStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ExpressionStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Expression Expression
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ExpressionStatement.ExpressionProperty, ref expression0); }
		}
	}
	
	internal class ExpressionStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ExpressionStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ExpressionStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ExpressionStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ExpressionStatement;
	
		public new ExpressionStatement ToImmutable()
		{
			return (ExpressionStatement)base.ToImmutable();
		}
	
		public new ExpressionStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ExpressionStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public ExpressionBuilder Expression
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ExpressionStatement.ExpressionProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ExpressionStatement.ExpressionProperty, value); }
		}
		
		void ExpressionStatementBuilder.SetExpressionLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ExpressionStatement.ExpressionProperty, lazy);
		}
		
		void ExpressionStatementBuilder.SetExpressionLazy(global::System.Func<ExpressionStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ExpressionStatement.ExpressionProperty, lazy);
		}
		
		void ExpressionStatementBuilder.SetExpressionLazy(global::System.Func<ExpressionStatement, Expression> immutableLazy, global::System.Func<ExpressionStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ExpressionStatement.ExpressionProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ForEachLoopStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForEachLoopStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ForEachLoopStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ForEachLoopStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class ForEachLoopStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ForEachLoopStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression loopControlVariable0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression collection0;
	
		internal ForEachLoopStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ForEachLoopStatement;
	
		public new ForEachLoopStatementBuilder ToMutable()
		{
			return (ForEachLoopStatementBuilder)base.ToMutable();
		}
	
		public new ForEachLoopStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ForEachLoopStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Expression LoopControlVariable
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForEachLoopStatement.LoopControlVariableProperty, ref loopControlVariable0); }
		}
	
		
		public Expression Collection
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForEachLoopStatement.CollectionProperty, ref collection0); }
		}
	}
	
	internal class ForEachLoopStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ForEachLoopStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ForEachLoopStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ForEachLoopStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ForEachLoopStatement;
	
		public new ForEachLoopStatement ToImmutable()
		{
			return (ForEachLoopStatement)base.ToImmutable();
		}
	
		public new ForEachLoopStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ForEachLoopStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public ExpressionBuilder LoopControlVariable
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForEachLoopStatement.LoopControlVariableProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForEachLoopStatement.LoopControlVariableProperty, value); }
		}
		
		void ForEachLoopStatementBuilder.SetLoopControlVariableLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForEachLoopStatement.LoopControlVariableProperty, lazy);
		}
		
		void ForEachLoopStatementBuilder.SetLoopControlVariableLazy(global::System.Func<ForEachLoopStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForEachLoopStatement.LoopControlVariableProperty, lazy);
		}
		
		void ForEachLoopStatementBuilder.SetLoopControlVariableLazy(global::System.Func<ForEachLoopStatement, Expression> immutableLazy, global::System.Func<ForEachLoopStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ForEachLoopStatement.LoopControlVariableProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Collection
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForEachLoopStatement.CollectionProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForEachLoopStatement.CollectionProperty, value); }
		}
		
		void ForEachLoopStatementBuilder.SetCollectionLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForEachLoopStatement.CollectionProperty, lazy);
		}
		
		void ForEachLoopStatementBuilder.SetCollectionLazy(global::System.Func<ForEachLoopStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForEachLoopStatement.CollectionProperty, lazy);
		}
		
		void ForEachLoopStatementBuilder.SetCollectionLazy(global::System.Func<ForEachLoopStatement, Expression> immutableLazy, global::System.Func<ForEachLoopStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ForEachLoopStatement.CollectionProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ForLoopStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForLoopStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ForLoopStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ForLoopStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class ForLoopStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ForLoopStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Statement> before0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression condition0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Statement> atLoopBottom0;
	
		internal ForLoopStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ForLoopStatement;
	
		public new ForLoopStatementBuilder ToMutable()
		{
			return (ForLoopStatementBuilder)base.ToMutable();
		}
	
		public new ForLoopStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ForLoopStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Statement> Before
		{
		    get { return this.GetList<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForLoopStatement.BeforeProperty, ref before0); }
		}
	
		
		public Expression Condition
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForLoopStatement.ConditionProperty, ref condition0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Statement> AtLoopBottom
		{
		    get { return this.GetList<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForLoopStatement.AtLoopBottomProperty, ref atLoopBottom0); }
		}
	}
	
	internal class ForLoopStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ForLoopStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<StatementBuilder> before0;
		private global::MetaDslx.Modeling.MutableModelList<StatementBuilder> atLoopBottom0;
	
		internal ForLoopStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ForLoopStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ForLoopStatement;
	
		public new ForLoopStatement ToImmutable()
		{
			return (ForLoopStatement)base.ToImmutable();
		}
	
		public new ForLoopStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ForLoopStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<StatementBuilder> Before
		{
			get { return this.GetList<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForLoopStatement.BeforeProperty, ref before0); }
		}
	
		
		public ExpressionBuilder Condition
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForLoopStatement.ConditionProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForLoopStatement.ConditionProperty, value); }
		}
		
		void ForLoopStatementBuilder.SetConditionLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForLoopStatement.ConditionProperty, lazy);
		}
		
		void ForLoopStatementBuilder.SetConditionLazy(global::System.Func<ForLoopStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForLoopStatement.ConditionProperty, lazy);
		}
		
		void ForLoopStatementBuilder.SetConditionLazy(global::System.Func<ForLoopStatement, Expression> immutableLazy, global::System.Func<ForLoopStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ForLoopStatement.ConditionProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<StatementBuilder> AtLoopBottom
		{
			get { return this.GetList<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForLoopStatement.AtLoopBottomProperty, ref atLoopBottom0); }
		}
	}
	
	internal class ForToLoopStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ForToLoopStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ForToLoopStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class ForToLoopStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ForToLoopStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression loopControlVariable0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression initialValue0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression limitValue0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression stepValue0;
	
		internal ForToLoopStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ForToLoopStatement;
	
		public new ForToLoopStatementBuilder ToMutable()
		{
			return (ForToLoopStatementBuilder)base.ToMutable();
		}
	
		public new ForToLoopStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ForToLoopStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Expression LoopControlVariable
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.LoopControlVariableProperty, ref loopControlVariable0); }
		}
	
		
		public Expression InitialValue
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.InitialValueProperty, ref initialValue0); }
		}
	
		
		public Expression LimitValue
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.LimitValueProperty, ref limitValue0); }
		}
	
		
		public Expression StepValue
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.StepValueProperty, ref stepValue0); }
		}
	}
	
	internal class ForToLoopStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ForToLoopStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ForToLoopStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ForToLoopStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ForToLoopStatement;
	
		public new ForToLoopStatement ToImmutable()
		{
			return (ForToLoopStatement)base.ToImmutable();
		}
	
		public new ForToLoopStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ForToLoopStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public ExpressionBuilder LoopControlVariable
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.LoopControlVariableProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.LoopControlVariableProperty, value); }
		}
		
		void ForToLoopStatementBuilder.SetLoopControlVariableLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.LoopControlVariableProperty, lazy);
		}
		
		void ForToLoopStatementBuilder.SetLoopControlVariableLazy(global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.LoopControlVariableProperty, lazy);
		}
		
		void ForToLoopStatementBuilder.SetLoopControlVariableLazy(global::System.Func<ForToLoopStatement, Expression> immutableLazy, global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.LoopControlVariableProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder InitialValue
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.InitialValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.InitialValueProperty, value); }
		}
		
		void ForToLoopStatementBuilder.SetInitialValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.InitialValueProperty, lazy);
		}
		
		void ForToLoopStatementBuilder.SetInitialValueLazy(global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.InitialValueProperty, lazy);
		}
		
		void ForToLoopStatementBuilder.SetInitialValueLazy(global::System.Func<ForToLoopStatement, Expression> immutableLazy, global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.InitialValueProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder LimitValue
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.LimitValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.LimitValueProperty, value); }
		}
		
		void ForToLoopStatementBuilder.SetLimitValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.LimitValueProperty, lazy);
		}
		
		void ForToLoopStatementBuilder.SetLimitValueLazy(global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.LimitValueProperty, lazy);
		}
		
		void ForToLoopStatementBuilder.SetLimitValueLazy(global::System.Func<ForToLoopStatement, Expression> immutableLazy, global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.LimitValueProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder StepValue
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.StepValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ForToLoopStatement.StepValueProperty, value); }
		}
		
		void ForToLoopStatementBuilder.SetStepValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.StepValueProperty, lazy);
		}
		
		void ForToLoopStatementBuilder.SetStepValueLazy(global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.StepValueProperty, lazy);
		}
		
		void ForToLoopStatementBuilder.SetStepValueLazy(global::System.Func<ForToLoopStatement, Expression> immutableLazy, global::System.Func<ForToLoopStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ForToLoopStatement.StepValueProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class IfStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.IfStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new IfStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new IfStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class IfStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, IfStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression condition0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement ifTrue0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement ifFalse0;
	
		internal IfStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.IfStatement;
	
		public new IfStatementBuilder ToMutable()
		{
			return (IfStatementBuilder)base.ToMutable();
		}
	
		public new IfStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (IfStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Expression Condition
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IfStatement.ConditionProperty, ref condition0); }
		}
	
		
		public Statement IfTrue
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IfStatement.IfTrueProperty, ref ifTrue0); }
		}
	
		
		public Statement IfFalse
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IfStatement.IfFalseProperty, ref ifFalse0); }
		}
	}
	
	internal class IfStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, IfStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal IfStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.IfStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.IfStatement;
	
		public new IfStatement ToImmutable()
		{
			return (IfStatement)base.ToImmutable();
		}
	
		public new IfStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (IfStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public ExpressionBuilder Condition
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IfStatement.ConditionProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IfStatement.ConditionProperty, value); }
		}
		
		void IfStatementBuilder.SetConditionLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IfStatement.ConditionProperty, lazy);
		}
		
		void IfStatementBuilder.SetConditionLazy(global::System.Func<IfStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IfStatement.ConditionProperty, lazy);
		}
		
		void IfStatementBuilder.SetConditionLazy(global::System.Func<IfStatement, Expression> immutableLazy, global::System.Func<IfStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.IfStatement.ConditionProperty, immutableLazy, mutableLazy);
		}
	
		
		public StatementBuilder IfTrue
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IfStatement.IfTrueProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IfStatement.IfTrueProperty, value); }
		}
		
		void IfStatementBuilder.SetIfTrueLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IfStatement.IfTrueProperty, lazy);
		}
		
		void IfStatementBuilder.SetIfTrueLazy(global::System.Func<IfStatementBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IfStatement.IfTrueProperty, lazy);
		}
		
		void IfStatementBuilder.SetIfTrueLazy(global::System.Func<IfStatement, Statement> immutableLazy, global::System.Func<IfStatementBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.IfStatement.IfTrueProperty, immutableLazy, mutableLazy);
		}
	
		
		public StatementBuilder IfFalse
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IfStatement.IfFalseProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IfStatement.IfFalseProperty, value); }
		}
		
		void IfStatementBuilder.SetIfFalseLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IfStatement.IfFalseProperty, lazy);
		}
		
		void IfStatementBuilder.SetIfFalseLazy(global::System.Func<IfStatementBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IfStatement.IfFalseProperty, lazy);
		}
		
		void IfStatementBuilder.SetIfFalseLazy(global::System.Func<IfStatement, Statement> immutableLazy, global::System.Func<IfStatementBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.IfStatement.IfFalseProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class JumpStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.JumpStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new JumpStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new JumpStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class JumpStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, JumpStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private object jumpKind0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Label target0;
	
		internal JumpStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.JumpStatement;
	
		public new JumpStatementBuilder ToMutable()
		{
			return (JumpStatementBuilder)base.ToMutable();
		}
	
		public new JumpStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (JumpStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public object JumpKind
		{
		    get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.JumpStatement.JumpKindProperty, ref jumpKind0); }
		}
	
		
		public Label Target
		{
		    get { return this.GetReference<Label>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.JumpStatement.TargetProperty, ref target0); }
		}
	}
	
	internal class JumpStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, JumpStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal JumpStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.JumpStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.JumpStatement;
	
		public new JumpStatement ToImmutable()
		{
			return (JumpStatement)base.ToImmutable();
		}
	
		public new JumpStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (JumpStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public object JumpKind
		{
			get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.JumpStatement.JumpKindProperty); }
			set { this.SetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.JumpStatement.JumpKindProperty, value); }
		}
		
		void JumpStatementBuilder.SetJumpKindLazy(global::System.Func<object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.JumpStatement.JumpKindProperty, lazy);
		}
		
		void JumpStatementBuilder.SetJumpKindLazy(global::System.Func<JumpStatementBuilder, object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.JumpStatement.JumpKindProperty, lazy);
		}
		
		void JumpStatementBuilder.SetJumpKindLazy(global::System.Func<JumpStatement, object> immutableLazy, global::System.Func<JumpStatementBuilder, object> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.JumpStatement.JumpKindProperty, immutableLazy, mutableLazy);
		}
	
		
		public LabelBuilder Target
		{
			get { return this.GetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.JumpStatement.TargetProperty); }
			set { this.SetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.JumpStatement.TargetProperty, value); }
		}
		
		void JumpStatementBuilder.SetTargetLazy(global::System.Func<LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.JumpStatement.TargetProperty, lazy);
		}
		
		void JumpStatementBuilder.SetTargetLazy(global::System.Func<JumpStatementBuilder, LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.JumpStatement.TargetProperty, lazy);
		}
		
		void JumpStatementBuilder.SetTargetLazy(global::System.Func<JumpStatement, Label> immutableLazy, global::System.Func<JumpStatementBuilder, LabelBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.JumpStatement.TargetProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class LabeledStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.LabeledStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new LabeledStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new LabeledStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class LabeledStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, LabeledStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Label label0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement statement0;
	
		internal LabeledStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.LabeledStatement;
	
		public new LabeledStatementBuilder ToMutable()
		{
			return (LabeledStatementBuilder)base.ToMutable();
		}
	
		public new LabeledStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (LabeledStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Label Label
		{
		    get { return this.GetReference<Label>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LabeledStatement.LabelProperty, ref label0); }
		}
	
		
		public Statement Statement
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LabeledStatement.StatementProperty, ref statement0); }
		}
	}
	
	internal class LabeledStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, LabeledStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal LabeledStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.LabeledStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.LabeledStatement;
	
		public new LabeledStatement ToImmutable()
		{
			return (LabeledStatement)base.ToImmutable();
		}
	
		public new LabeledStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (LabeledStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public LabelBuilder Label
		{
			get { return this.GetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LabeledStatement.LabelProperty); }
			set { this.SetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LabeledStatement.LabelProperty, value); }
		}
		
		void LabeledStatementBuilder.SetLabelLazy(global::System.Func<LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LabeledStatement.LabelProperty, lazy);
		}
		
		void LabeledStatementBuilder.SetLabelLazy(global::System.Func<LabeledStatementBuilder, LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LabeledStatement.LabelProperty, lazy);
		}
		
		void LabeledStatementBuilder.SetLabelLazy(global::System.Func<LabeledStatement, Label> immutableLazy, global::System.Func<LabeledStatementBuilder, LabelBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.LabeledStatement.LabelProperty, immutableLazy, mutableLazy);
		}
	
		
		public StatementBuilder Statement
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LabeledStatement.StatementProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LabeledStatement.StatementProperty, value); }
		}
		
		void LabeledStatementBuilder.SetStatementLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LabeledStatement.StatementProperty, lazy);
		}
		
		void LabeledStatementBuilder.SetStatementLazy(global::System.Func<LabeledStatementBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LabeledStatement.StatementProperty, lazy);
		}
		
		void LabeledStatementBuilder.SetStatementLazy(global::System.Func<LabeledStatement, Statement> immutableLazy, global::System.Func<LabeledStatementBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.LabeledStatement.StatementProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class LockStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.LockStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new LockStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new LockStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class LockStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, LockStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression lockedValue0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
	
		internal LockStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.LockStatement;
	
		public new LockStatementBuilder ToMutable()
		{
			return (LockStatementBuilder)base.ToMutable();
		}
	
		public new LockStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (LockStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Expression LockedValue
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LockStatement.LockedValueProperty, ref lockedValue0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LockStatement.BodyProperty, ref body0); }
		}
	}
	
	internal class LockStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, LockStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal LockStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.LockStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.LockStatement;
	
		public new LockStatement ToImmutable()
		{
			return (LockStatement)base.ToImmutable();
		}
	
		public new LockStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (LockStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public ExpressionBuilder LockedValue
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LockStatement.LockedValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LockStatement.LockedValueProperty, value); }
		}
		
		void LockStatementBuilder.SetLockedValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LockStatement.LockedValueProperty, lazy);
		}
		
		void LockStatementBuilder.SetLockedValueLazy(global::System.Func<LockStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LockStatement.LockedValueProperty, lazy);
		}
		
		void LockStatementBuilder.SetLockedValueLazy(global::System.Func<LockStatement, Expression> immutableLazy, global::System.Func<LockStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.LockStatement.LockedValueProperty, immutableLazy, mutableLazy);
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LockStatement.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LockStatement.BodyProperty, value); }
		}
		
		void LockStatementBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LockStatement.BodyProperty, lazy);
		}
		
		void LockStatementBuilder.SetBodyLazy(global::System.Func<LockStatementBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LockStatement.BodyProperty, lazy);
		}
		
		void LockStatementBuilder.SetBodyLazy(global::System.Func<LockStatement, Statement> immutableLazy, global::System.Func<LockStatementBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.LockStatement.BodyProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class LoopStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.LoopStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new LoopStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new LoopStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class LoopStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, LoopStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
	
		internal LoopStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.LoopStatement;
	
		public new LoopStatementBuilder ToMutable()
		{
			return (LoopStatementBuilder)base.ToMutable();
		}
	
		public new LoopStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (LoopStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LoopStatement.BodyProperty, ref body0); }
		}
	}
	
	internal class LoopStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, LoopStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal LoopStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.LoopStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.LoopStatement;
	
		public new LoopStatement ToImmutable()
		{
			return (LoopStatement)base.ToImmutable();
		}
	
		public new LoopStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (LoopStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LoopStatement.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LoopStatement.BodyProperty, value); }
		}
		
		void LoopStatementBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LoopStatement.BodyProperty, lazy);
		}
		
		void LoopStatementBuilder.SetBodyLazy(global::System.Func<LoopStatementBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LoopStatement.BodyProperty, lazy);
		}
		
		void LoopStatementBuilder.SetBodyLazy(global::System.Func<LoopStatement, Statement> immutableLazy, global::System.Func<LoopStatementBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.LoopStatement.BodyProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ReturnStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReturnStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ReturnStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ReturnStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class ReturnStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ReturnStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression returnedValue0;
	
		internal ReturnStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ReturnStatement;
	
		public new ReturnStatementBuilder ToMutable()
		{
			return (ReturnStatementBuilder)base.ToMutable();
		}
	
		public new ReturnStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ReturnStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Expression ReturnedValue
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReturnStatement.ReturnedValueProperty, ref returnedValue0); }
		}
	}
	
	internal class ReturnStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ReturnStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ReturnStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ReturnStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ReturnStatement;
	
		public new ReturnStatement ToImmutable()
		{
			return (ReturnStatement)base.ToImmutable();
		}
	
		public new ReturnStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ReturnStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public ExpressionBuilder ReturnedValue
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReturnStatement.ReturnedValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReturnStatement.ReturnedValueProperty, value); }
		}
		
		void ReturnStatementBuilder.SetReturnedValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ReturnStatement.ReturnedValueProperty, lazy);
		}
		
		void ReturnStatementBuilder.SetReturnedValueLazy(global::System.Func<ReturnStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ReturnStatement.ReturnedValueProperty, lazy);
		}
		
		void ReturnStatementBuilder.SetReturnedValueLazy(global::System.Func<ReturnStatement, Expression> immutableLazy, global::System.Func<ReturnStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ReturnStatement.ReturnedValueProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class SwitchStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new SwitchStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new SwitchStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class SwitchStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, SwitchStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression value0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<SwitchCase> cases0;
	
		internal SwitchStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.SwitchStatement;
	
		public new SwitchStatementBuilder ToMutable()
		{
			return (SwitchStatementBuilder)base.ToMutable();
		}
	
		public new SwitchStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (SwitchStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Expression Value
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchStatement.ValueProperty, ref value0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<SwitchCase> Cases
		{
		    get { return this.GetList<SwitchCase>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchStatement.CasesProperty, ref cases0); }
		}
	}
	
	internal class SwitchStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, SwitchStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<SwitchCaseBuilder> cases0;
	
		internal SwitchStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.SwitchStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.SwitchStatement;
	
		public new SwitchStatement ToImmutable()
		{
			return (SwitchStatement)base.ToImmutable();
		}
	
		public new SwitchStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (SwitchStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public ExpressionBuilder Value
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchStatement.ValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchStatement.ValueProperty, value); }
		}
		
		void SwitchStatementBuilder.SetValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.SwitchStatement.ValueProperty, lazy);
		}
		
		void SwitchStatementBuilder.SetValueLazy(global::System.Func<SwitchStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.SwitchStatement.ValueProperty, lazy);
		}
		
		void SwitchStatementBuilder.SetValueLazy(global::System.Func<SwitchStatement, Expression> immutableLazy, global::System.Func<SwitchStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.SwitchStatement.ValueProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<SwitchCaseBuilder> Cases
		{
			get { return this.GetList<SwitchCaseBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchStatement.CasesProperty, ref cases0); }
		}
	}
	
	internal class SwitchCaseId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchCase.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new SwitchCaseImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new SwitchCaseBuilderImpl(this, model, creating);
		}
	}
	
	internal class SwitchCaseImpl : global::MetaDslx.Modeling.ImmutableObjectBase, SwitchCase
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<CaseClause> clauses0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
	
		internal SwitchCaseImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.SwitchCase;
	
		public new SwitchCaseBuilder ToMutable()
		{
			return (SwitchCaseBuilder)base.ToMutable();
		}
	
		public new SwitchCaseBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (SwitchCaseBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<CaseClause> Clauses
		{
		    get { return this.GetList<CaseClause>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchCase.ClausesProperty, ref clauses0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchCase.BodyProperty, ref body0); }
		}
	}
	
	internal class SwitchCaseBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, SwitchCaseBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<CaseClauseBuilder> clauses0;
	
		internal SwitchCaseBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.SwitchCase(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.SwitchCase;
	
		public new SwitchCase ToImmutable()
		{
			return (SwitchCase)base.ToImmutable();
		}
	
		public new SwitchCase ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (SwitchCase)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<CaseClauseBuilder> Clauses
		{
			get { return this.GetList<CaseClauseBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchCase.ClausesProperty, ref clauses0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchCase.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SwitchCase.BodyProperty, value); }
		}
		
		void SwitchCaseBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.SwitchCase.BodyProperty, lazy);
		}
		
		void SwitchCaseBuilder.SetBodyLazy(global::System.Func<SwitchCaseBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.SwitchCase.BodyProperty, lazy);
		}
		
		void SwitchCaseBuilder.SetBodyLazy(global::System.Func<SwitchCase, Statement> immutableLazy, global::System.Func<SwitchCaseBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.SwitchCase.BodyProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class CaseClauseId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.CaseClause.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new CaseClauseImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new CaseClauseBuilderImpl(this, model, creating);
		}
	}
	
	internal class CaseClauseImpl : global::MetaDslx.Modeling.ImmutableObjectBase, CaseClause
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Label label0;
	
		internal CaseClauseImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.CaseClause;
	
		public new CaseClauseBuilder ToMutable()
		{
			return (CaseClauseBuilder)base.ToMutable();
		}
	
		public new CaseClauseBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (CaseClauseBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Label Label
		{
		    get { return this.GetReference<Label>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CaseClause.LabelProperty, ref label0); }
		}
	}
	
	internal class CaseClauseBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, CaseClauseBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal CaseClauseBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.CaseClause(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.CaseClause;
	
		public new CaseClause ToImmutable()
		{
			return (CaseClause)base.ToImmutable();
		}
	
		public new CaseClause ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (CaseClause)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public LabelBuilder Label
		{
			get { return this.GetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CaseClause.LabelProperty); }
			set { this.SetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CaseClause.LabelProperty, value); }
		}
		
		void CaseClauseBuilder.SetLabelLazy(global::System.Func<LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CaseClause.LabelProperty, lazy);
		}
		
		void CaseClauseBuilder.SetLabelLazy(global::System.Func<CaseClauseBuilder, LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CaseClause.LabelProperty, lazy);
		}
		
		void CaseClauseBuilder.SetLabelLazy(global::System.Func<CaseClause, Label> immutableLazy, global::System.Func<CaseClauseBuilder, LabelBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.CaseClause.LabelProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class DefaultValueCaseClauseId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.DefaultValueCaseClause.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new DefaultValueCaseClauseImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new DefaultValueCaseClauseBuilderImpl(this, model, creating);
		}
	}
	
	internal class DefaultValueCaseClauseImpl : global::MetaDslx.Modeling.ImmutableObjectBase, DefaultValueCaseClause
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Label label0;
	
		internal DefaultValueCaseClauseImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DefaultValueCaseClause;
	
		public new DefaultValueCaseClauseBuilder ToMutable()
		{
			return (DefaultValueCaseClauseBuilder)base.ToMutable();
		}
	
		public new DefaultValueCaseClauseBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (DefaultValueCaseClauseBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		CaseClauseBuilder CaseClause.ToMutable()
		{
			return this.ToMutable();
		}
	
		CaseClauseBuilder CaseClause.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Label Label
		{
		    get { return this.GetReference<Label>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CaseClause.LabelProperty, ref label0); }
		}
	}
	
	internal class DefaultValueCaseClauseBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, DefaultValueCaseClauseBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal DefaultValueCaseClauseBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.DefaultValueCaseClause(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DefaultValueCaseClause;
	
		public new DefaultValueCaseClause ToImmutable()
		{
			return (DefaultValueCaseClause)base.ToImmutable();
		}
	
		public new DefaultValueCaseClause ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (DefaultValueCaseClause)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		CaseClause CaseClauseBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		CaseClause CaseClauseBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public LabelBuilder Label
		{
			get { return this.GetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CaseClause.LabelProperty); }
			set { this.SetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CaseClause.LabelProperty, value); }
		}
		
		void CaseClauseBuilder.SetLabelLazy(global::System.Func<LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CaseClause.LabelProperty, lazy);
		}
		
		void CaseClauseBuilder.SetLabelLazy(global::System.Func<CaseClauseBuilder, LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CaseClause.LabelProperty, lazy);
		}
		
		void CaseClauseBuilder.SetLabelLazy(global::System.Func<CaseClause, Label> immutableLazy, global::System.Func<CaseClauseBuilder, LabelBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.CaseClause.LabelProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class SingleValueCaseClauseId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.SingleValueCaseClause.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new SingleValueCaseClauseImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new SingleValueCaseClauseBuilderImpl(this, model, creating);
		}
	}
	
	internal class SingleValueCaseClauseImpl : global::MetaDslx.Modeling.ImmutableObjectBase, SingleValueCaseClause
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Label label0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression value0;
	
		internal SingleValueCaseClauseImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.SingleValueCaseClause;
	
		public new SingleValueCaseClauseBuilder ToMutable()
		{
			return (SingleValueCaseClauseBuilder)base.ToMutable();
		}
	
		public new SingleValueCaseClauseBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (SingleValueCaseClauseBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		CaseClauseBuilder CaseClause.ToMutable()
		{
			return this.ToMutable();
		}
	
		CaseClauseBuilder CaseClause.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Label Label
		{
		    get { return this.GetReference<Label>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CaseClause.LabelProperty, ref label0); }
		}
	
		
		public Expression Value
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SingleValueCaseClause.ValueProperty, ref value0); }
		}
	}
	
	internal class SingleValueCaseClauseBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, SingleValueCaseClauseBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal SingleValueCaseClauseBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.SingleValueCaseClause(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.SingleValueCaseClause;
	
		public new SingleValueCaseClause ToImmutable()
		{
			return (SingleValueCaseClause)base.ToImmutable();
		}
	
		public new SingleValueCaseClause ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (SingleValueCaseClause)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		CaseClause CaseClauseBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		CaseClause CaseClauseBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public LabelBuilder Label
		{
			get { return this.GetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CaseClause.LabelProperty); }
			set { this.SetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CaseClause.LabelProperty, value); }
		}
		
		void CaseClauseBuilder.SetLabelLazy(global::System.Func<LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CaseClause.LabelProperty, lazy);
		}
		
		void CaseClauseBuilder.SetLabelLazy(global::System.Func<CaseClauseBuilder, LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CaseClause.LabelProperty, lazy);
		}
		
		void CaseClauseBuilder.SetLabelLazy(global::System.Func<CaseClause, Label> immutableLazy, global::System.Func<CaseClauseBuilder, LabelBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.CaseClause.LabelProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Value
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SingleValueCaseClause.ValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SingleValueCaseClause.ValueProperty, value); }
		}
		
		void SingleValueCaseClauseBuilder.SetValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.SingleValueCaseClause.ValueProperty, lazy);
		}
		
		void SingleValueCaseClauseBuilder.SetValueLazy(global::System.Func<SingleValueCaseClauseBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.SingleValueCaseClause.ValueProperty, lazy);
		}
		
		void SingleValueCaseClauseBuilder.SetValueLazy(global::System.Func<SingleValueCaseClause, Expression> immutableLazy, global::System.Func<SingleValueCaseClauseBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.SingleValueCaseClause.ValueProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class TryStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new TryStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new TryStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class TryStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, TryStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<CatchClause> catches0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement finally0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Label exitLabel0;
	
		internal TryStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TryStatement;
	
		public new TryStatementBuilder ToMutable()
		{
			return (TryStatementBuilder)base.ToMutable();
		}
	
		public new TryStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (TryStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.BodyProperty, ref body0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<CatchClause> Catches
		{
		    get { return this.GetList<CatchClause>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.CatchesProperty, ref catches0); }
		}
	
		
		public Statement Finally
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.FinallyProperty, ref finally0); }
		}
	
		
		public Label ExitLabel
		{
		    get { return this.GetReference<Label>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.ExitLabelProperty, ref exitLabel0); }
		}
	}
	
	internal class TryStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, TryStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<CatchClauseBuilder> catches0;
	
		internal TryStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.TryStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TryStatement;
	
		public new TryStatement ToImmutable()
		{
			return (TryStatement)base.ToImmutable();
		}
	
		public new TryStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (TryStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.BodyProperty, value); }
		}
		
		void TryStatementBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TryStatement.BodyProperty, lazy);
		}
		
		void TryStatementBuilder.SetBodyLazy(global::System.Func<TryStatementBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TryStatement.BodyProperty, lazy);
		}
		
		void TryStatementBuilder.SetBodyLazy(global::System.Func<TryStatement, Statement> immutableLazy, global::System.Func<TryStatementBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TryStatement.BodyProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<CatchClauseBuilder> Catches
		{
			get { return this.GetList<CatchClauseBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.CatchesProperty, ref catches0); }
		}
	
		
		public StatementBuilder Finally
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.FinallyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.FinallyProperty, value); }
		}
		
		void TryStatementBuilder.SetFinallyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TryStatement.FinallyProperty, lazy);
		}
		
		void TryStatementBuilder.SetFinallyLazy(global::System.Func<TryStatementBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TryStatement.FinallyProperty, lazy);
		}
		
		void TryStatementBuilder.SetFinallyLazy(global::System.Func<TryStatement, Statement> immutableLazy, global::System.Func<TryStatementBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TryStatement.FinallyProperty, immutableLazy, mutableLazy);
		}
	
		
		public LabelBuilder ExitLabel
		{
			get { return this.GetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.ExitLabelProperty); }
			set { this.SetReference<LabelBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TryStatement.ExitLabelProperty, value); }
		}
		
		void TryStatementBuilder.SetExitLabelLazy(global::System.Func<LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TryStatement.ExitLabelProperty, lazy);
		}
		
		void TryStatementBuilder.SetExitLabelLazy(global::System.Func<TryStatementBuilder, LabelBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TryStatement.ExitLabelProperty, lazy);
		}
		
		void TryStatementBuilder.SetExitLabelLazy(global::System.Func<TryStatement, Label> immutableLazy, global::System.Func<TryStatementBuilder, LabelBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TryStatement.ExitLabelProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class CatchClauseId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.CatchClause.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new CatchClauseImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new CatchClauseBuilderImpl(this, model, creating);
		}
	}
	
	internal class CatchClauseImpl : global::MetaDslx.Modeling.ImmutableObjectBase, CatchClause
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression exceptionDeclarationOrExpression0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression filter0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement handler0;
	
		internal CatchClauseImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.CatchClause;
	
		public new CatchClauseBuilder ToMutable()
		{
			return (CatchClauseBuilder)base.ToMutable();
		}
	
		public new CatchClauseBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (CatchClauseBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Expression ExceptionDeclarationOrExpression
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CatchClause.ExceptionDeclarationOrExpressionProperty, ref exceptionDeclarationOrExpression0); }
		}
	
		
		public Expression Filter
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CatchClause.FilterProperty, ref filter0); }
		}
	
		
		public Statement Handler
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CatchClause.HandlerProperty, ref handler0); }
		}
	}
	
	internal class CatchClauseBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, CatchClauseBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal CatchClauseBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.CatchClause(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.CatchClause;
	
		public new CatchClause ToImmutable()
		{
			return (CatchClause)base.ToImmutable();
		}
	
		public new CatchClause ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (CatchClause)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public ExpressionBuilder ExceptionDeclarationOrExpression
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CatchClause.ExceptionDeclarationOrExpressionProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CatchClause.ExceptionDeclarationOrExpressionProperty, value); }
		}
		
		void CatchClauseBuilder.SetExceptionDeclarationOrExpressionLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CatchClause.ExceptionDeclarationOrExpressionProperty, lazy);
		}
		
		void CatchClauseBuilder.SetExceptionDeclarationOrExpressionLazy(global::System.Func<CatchClauseBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CatchClause.ExceptionDeclarationOrExpressionProperty, lazy);
		}
		
		void CatchClauseBuilder.SetExceptionDeclarationOrExpressionLazy(global::System.Func<CatchClause, Expression> immutableLazy, global::System.Func<CatchClauseBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.CatchClause.ExceptionDeclarationOrExpressionProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Filter
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CatchClause.FilterProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CatchClause.FilterProperty, value); }
		}
		
		void CatchClauseBuilder.SetFilterLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CatchClause.FilterProperty, lazy);
		}
		
		void CatchClauseBuilder.SetFilterLazy(global::System.Func<CatchClauseBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CatchClause.FilterProperty, lazy);
		}
		
		void CatchClauseBuilder.SetFilterLazy(global::System.Func<CatchClause, Expression> immutableLazy, global::System.Func<CatchClauseBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.CatchClause.FilterProperty, immutableLazy, mutableLazy);
		}
	
		
		public StatementBuilder Handler
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CatchClause.HandlerProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CatchClause.HandlerProperty, value); }
		}
		
		void CatchClauseBuilder.SetHandlerLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CatchClause.HandlerProperty, lazy);
		}
		
		void CatchClauseBuilder.SetHandlerLazy(global::System.Func<CatchClauseBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CatchClause.HandlerProperty, lazy);
		}
		
		void CatchClauseBuilder.SetHandlerLazy(global::System.Func<CatchClause, Statement> immutableLazy, global::System.Func<CatchClauseBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.CatchClause.HandlerProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class UsingStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.UsingStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new UsingStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new UsingStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class UsingStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, UsingStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression resources0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
	
		internal UsingStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.UsingStatement;
	
		public new UsingStatementBuilder ToMutable()
		{
			return (UsingStatementBuilder)base.ToMutable();
		}
	
		public new UsingStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (UsingStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Expression Resources
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UsingStatement.ResourcesProperty, ref resources0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UsingStatement.BodyProperty, ref body0); }
		}
	}
	
	internal class UsingStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, UsingStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal UsingStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.UsingStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.UsingStatement;
	
		public new UsingStatement ToImmutable()
		{
			return (UsingStatement)base.ToImmutable();
		}
	
		public new UsingStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (UsingStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public ExpressionBuilder Resources
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UsingStatement.ResourcesProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UsingStatement.ResourcesProperty, value); }
		}
		
		void UsingStatementBuilder.SetResourcesLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UsingStatement.ResourcesProperty, lazy);
		}
		
		void UsingStatementBuilder.SetResourcesLazy(global::System.Func<UsingStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UsingStatement.ResourcesProperty, lazy);
		}
		
		void UsingStatementBuilder.SetResourcesLazy(global::System.Func<UsingStatement, Expression> immutableLazy, global::System.Func<UsingStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.UsingStatement.ResourcesProperty, immutableLazy, mutableLazy);
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UsingStatement.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UsingStatement.BodyProperty, value); }
		}
		
		void UsingStatementBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UsingStatement.BodyProperty, lazy);
		}
		
		void UsingStatementBuilder.SetBodyLazy(global::System.Func<UsingStatementBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UsingStatement.BodyProperty, lazy);
		}
		
		void UsingStatementBuilder.SetBodyLazy(global::System.Func<UsingStatement, Statement> immutableLazy, global::System.Func<UsingStatementBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.UsingStatement.BodyProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class WhileLoopStatementId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.WhileLoopStatement.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new WhileLoopStatementImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new WhileLoopStatementBuilderImpl(this, model, creating);
		}
	}
	
	internal class WhileLoopStatementImpl : global::MetaDslx.Modeling.ImmutableObjectBase, WhileLoopStatement
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression condition0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool conditionIsTop0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool conditionIsUntil0;
	
		internal WhileLoopStatementImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.WhileLoopStatement;
	
		public new WhileLoopStatementBuilder ToMutable()
		{
			return (WhileLoopStatementBuilder)base.ToMutable();
		}
	
		public new WhileLoopStatementBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (WhileLoopStatementBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		StatementBuilder Statement.ToMutable()
		{
			return this.ToMutable();
		}
	
		StatementBuilder Statement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public Expression Condition
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.WhileLoopStatement.ConditionProperty, ref condition0); }
		}
	
		
		public bool ConditionIsTop
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.WhileLoopStatement.ConditionIsTopProperty, ref conditionIsTop0); }
		}
	
		
		public bool ConditionIsUntil
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.WhileLoopStatement.ConditionIsUntilProperty, ref conditionIsUntil0); }
		}
	}
	
	internal class WhileLoopStatementBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, WhileLoopStatementBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal WhileLoopStatementBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.WhileLoopStatement(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.WhileLoopStatement;
	
		public new WhileLoopStatement ToImmutable()
		{
			return (WhileLoopStatement)base.ToImmutable();
		}
	
		public new WhileLoopStatement ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (WhileLoopStatement)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Statement StatementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Statement StatementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public ExpressionBuilder Condition
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.WhileLoopStatement.ConditionProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.WhileLoopStatement.ConditionProperty, value); }
		}
		
		void WhileLoopStatementBuilder.SetConditionLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.WhileLoopStatement.ConditionProperty, lazy);
		}
		
		void WhileLoopStatementBuilder.SetConditionLazy(global::System.Func<WhileLoopStatementBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.WhileLoopStatement.ConditionProperty, lazy);
		}
		
		void WhileLoopStatementBuilder.SetConditionLazy(global::System.Func<WhileLoopStatement, Expression> immutableLazy, global::System.Func<WhileLoopStatementBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.WhileLoopStatement.ConditionProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool ConditionIsTop
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.WhileLoopStatement.ConditionIsTopProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.WhileLoopStatement.ConditionIsTopProperty, value); }
		}
		
		void WhileLoopStatementBuilder.SetConditionIsTopLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.WhileLoopStatement.ConditionIsTopProperty, lazy);
		}
		
		void WhileLoopStatementBuilder.SetConditionIsTopLazy(global::System.Func<WhileLoopStatementBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.WhileLoopStatement.ConditionIsTopProperty, lazy);
		}
		
		void WhileLoopStatementBuilder.SetConditionIsTopLazy(global::System.Func<WhileLoopStatement, bool> immutableLazy, global::System.Func<WhileLoopStatementBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.WhileLoopStatement.ConditionIsTopProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool ConditionIsUntil
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.WhileLoopStatement.ConditionIsUntilProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.WhileLoopStatement.ConditionIsUntilProperty, value); }
		}
		
		void WhileLoopStatementBuilder.SetConditionIsUntilLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.WhileLoopStatement.ConditionIsUntilProperty, lazy);
		}
		
		void WhileLoopStatementBuilder.SetConditionIsUntilLazy(global::System.Func<WhileLoopStatementBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.WhileLoopStatement.ConditionIsUntilProperty, lazy);
		}
		
		void WhileLoopStatementBuilder.SetConditionIsUntilLazy(global::System.Func<WhileLoopStatement, bool> immutableLazy, global::System.Func<WhileLoopStatementBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.WhileLoopStatement.ConditionIsUntilProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class ExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Expression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
	
		internal ExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Expression;
	
		public new ExpressionBuilder ToMutable()
		{
			return (ExpressionBuilder)base.ToMutable();
		}
	
		public new ExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	}
	
	internal class ExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Expression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Expression;
	
		public new Expression ToImmutable()
		{
			return (Expression)base.ToImmutable();
		}
	
		public new Expression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Expression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ArgumentId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.Argument.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ArgumentImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ArgumentBuilderImpl(this, model, creating);
		}
	}
	
	internal class ArgumentImpl : global::MetaDslx.Modeling.ImmutableObjectBase, Argument
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string name0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression value0;
	
		internal ArgumentImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Argument;
	
		public new ArgumentBuilder ToMutable()
		{
			return (ArgumentBuilder)base.ToMutable();
		}
	
		public new ArgumentBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ArgumentBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		NamedElementBuilder NamedElement.ToMutable()
		{
			return this.ToMutable();
		}
	
		NamedElementBuilder NamedElement.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
		    get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, ref name0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Value
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Argument.ValueProperty, ref value0); }
		}
	}
	
	internal class ArgumentBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ArgumentBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ArgumentBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.Argument(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.Argument;
	
		public new Argument ToImmutable()
		{
			return (Argument)base.ToImmutable();
		}
	
		public new Argument ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (Argument)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		NamedElement NamedElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		NamedElement NamedElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public string Name
		{
			get { return this.GetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty); }
			set { this.SetReference<string>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NamedElement.NameProperty, value); }
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElementBuilder, string> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, lazy);
		}
		
		void NamedElementBuilder.SetNameLazy(global::System.Func<NamedElement, string> immutableLazy, global::System.Func<NamedElementBuilder, string> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NamedElement.NameProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Value
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Argument.ValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Argument.ValueProperty, value); }
		}
		
		void ArgumentBuilder.SetValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Argument.ValueProperty, lazy);
		}
		
		void ArgumentBuilder.SetValueLazy(global::System.Func<ArgumentBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Argument.ValueProperty, lazy);
		}
		
		void ArgumentBuilder.SetValueLazy(global::System.Func<Argument, Expression> immutableLazy, global::System.Func<ArgumentBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Argument.ValueProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class AssignmentExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new AssignmentExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new AssignmentExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class AssignmentExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, AssignmentExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression target0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression value0;
	
		internal AssignmentExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.AssignmentExpression;
	
		public new AssignmentExpressionBuilder ToMutable()
		{
			return (AssignmentExpressionBuilder)base.ToMutable();
		}
	
		public new AssignmentExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (AssignmentExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Target
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.TargetProperty, ref target0); }
		}
	
		
		public Expression Value
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.ValueProperty, ref value0); }
		}
	}
	
	internal class AssignmentExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, AssignmentExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal AssignmentExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.AssignmentExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.AssignmentExpression;
	
		public new AssignmentExpression ToImmutable()
		{
			return (AssignmentExpression)base.ToImmutable();
		}
	
		public new AssignmentExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (AssignmentExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Target
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.TargetProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.TargetProperty, value); }
		}
		
		void AssignmentExpressionBuilder.SetTargetLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.TargetProperty, lazy);
		}
		
		void AssignmentExpressionBuilder.SetTargetLazy(global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.TargetProperty, lazy);
		}
		
		void AssignmentExpressionBuilder.SetTargetLazy(global::System.Func<AssignmentExpression, Expression> immutableLazy, global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.TargetProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Value
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.ValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.ValueProperty, value); }
		}
		
		void AssignmentExpressionBuilder.SetValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.ValueProperty, lazy);
		}
		
		void AssignmentExpressionBuilder.SetValueLazy(global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.ValueProperty, lazy);
		}
		
		void AssignmentExpressionBuilder.SetValueLazy(global::System.Func<AssignmentExpression, Expression> immutableLazy, global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.ValueProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class AwaitExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.AwaitExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new AwaitExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new AwaitExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class AwaitExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, AwaitExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression operation0;
	
		internal AwaitExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.AwaitExpression;
	
		public new AwaitExpressionBuilder ToMutable()
		{
			return (AwaitExpressionBuilder)base.ToMutable();
		}
	
		public new AwaitExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (AwaitExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Operation
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AwaitExpression.OperationProperty, ref operation0); }
		}
	}
	
	internal class AwaitExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, AwaitExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal AwaitExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.AwaitExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.AwaitExpression;
	
		public new AwaitExpression ToImmutable()
		{
			return (AwaitExpression)base.ToImmutable();
		}
	
		public new AwaitExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (AwaitExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Operation
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AwaitExpression.OperationProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AwaitExpression.OperationProperty, value); }
		}
		
		void AwaitExpressionBuilder.SetOperationLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.AwaitExpression.OperationProperty, lazy);
		}
		
		void AwaitExpressionBuilder.SetOperationLazy(global::System.Func<AwaitExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.AwaitExpression.OperationProperty, lazy);
		}
		
		void AwaitExpressionBuilder.SetOperationLazy(global::System.Func<AwaitExpression, Expression> immutableLazy, global::System.Func<AwaitExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.AwaitExpression.OperationProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class BinaryExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new BinaryExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new BinaryExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class BinaryExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, BinaryExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private object operatorKind0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression leftOperand0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression rightOperand0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isChecked0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private BinaryOperator operatorMethod0;
	
		internal BinaryExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.BinaryExpression;
	
		public new BinaryExpressionBuilder ToMutable()
		{
			return (BinaryExpressionBuilder)base.ToMutable();
		}
	
		public new BinaryExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (BinaryExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public object OperatorKind
		{
		    get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.OperatorKindProperty, ref operatorKind0); }
		}
	
		
		public Expression LeftOperand
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.LeftOperandProperty, ref leftOperand0); }
		}
	
		
		public Expression RightOperand
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.RightOperandProperty, ref rightOperand0); }
		}
	
		
		public bool IsChecked
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.IsCheckedProperty, ref isChecked0); }
		}
	
		
		public BinaryOperator OperatorMethod
		{
		    get { return this.GetReference<BinaryOperator>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.OperatorMethodProperty, ref operatorMethod0); }
		}
	}
	
	internal class BinaryExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, BinaryExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal BinaryExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.BinaryExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.BinaryExpression;
	
		public new BinaryExpression ToImmutable()
		{
			return (BinaryExpression)base.ToImmutable();
		}
	
		public new BinaryExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (BinaryExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public object OperatorKind
		{
			get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.OperatorKindProperty); }
			set { this.SetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.OperatorKindProperty, value); }
		}
		
		void BinaryExpressionBuilder.SetOperatorKindLazy(global::System.Func<object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.OperatorKindProperty, lazy);
		}
		
		void BinaryExpressionBuilder.SetOperatorKindLazy(global::System.Func<BinaryExpressionBuilder, object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.OperatorKindProperty, lazy);
		}
		
		void BinaryExpressionBuilder.SetOperatorKindLazy(global::System.Func<BinaryExpression, object> immutableLazy, global::System.Func<BinaryExpressionBuilder, object> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.OperatorKindProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder LeftOperand
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.LeftOperandProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.LeftOperandProperty, value); }
		}
		
		void BinaryExpressionBuilder.SetLeftOperandLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.LeftOperandProperty, lazy);
		}
		
		void BinaryExpressionBuilder.SetLeftOperandLazy(global::System.Func<BinaryExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.LeftOperandProperty, lazy);
		}
		
		void BinaryExpressionBuilder.SetLeftOperandLazy(global::System.Func<BinaryExpression, Expression> immutableLazy, global::System.Func<BinaryExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.LeftOperandProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder RightOperand
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.RightOperandProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.RightOperandProperty, value); }
		}
		
		void BinaryExpressionBuilder.SetRightOperandLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.RightOperandProperty, lazy);
		}
		
		void BinaryExpressionBuilder.SetRightOperandLazy(global::System.Func<BinaryExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.RightOperandProperty, lazy);
		}
		
		void BinaryExpressionBuilder.SetRightOperandLazy(global::System.Func<BinaryExpression, Expression> immutableLazy, global::System.Func<BinaryExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.RightOperandProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsChecked
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.IsCheckedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.IsCheckedProperty, value); }
		}
		
		void BinaryExpressionBuilder.SetIsCheckedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.BinaryExpression.IsCheckedProperty, lazy);
		}
		
		void BinaryExpressionBuilder.SetIsCheckedLazy(global::System.Func<BinaryExpressionBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.BinaryExpression.IsCheckedProperty, lazy);
		}
		
		void BinaryExpressionBuilder.SetIsCheckedLazy(global::System.Func<BinaryExpression, bool> immutableLazy, global::System.Func<BinaryExpressionBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.BinaryExpression.IsCheckedProperty, immutableLazy, mutableLazy);
		}
	
		
		public BinaryOperatorBuilder OperatorMethod
		{
			get { return this.GetReference<BinaryOperatorBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.OperatorMethodProperty); }
			set { this.SetReference<BinaryOperatorBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.BinaryExpression.OperatorMethodProperty, value); }
		}
		
		void BinaryExpressionBuilder.SetOperatorMethodLazy(global::System.Func<BinaryOperatorBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.OperatorMethodProperty, lazy);
		}
		
		void BinaryExpressionBuilder.SetOperatorMethodLazy(global::System.Func<BinaryExpressionBuilder, BinaryOperatorBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.OperatorMethodProperty, lazy);
		}
		
		void BinaryExpressionBuilder.SetOperatorMethodLazy(global::System.Func<BinaryExpression, BinaryOperator> immutableLazy, global::System.Func<BinaryExpressionBuilder, BinaryOperatorBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.BinaryExpression.OperatorMethodProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class CoalesceExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.CoalesceExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new CoalesceExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new CoalesceExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class CoalesceExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, CoalesceExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression value0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression whenNull0;
	
		internal CoalesceExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.CoalesceExpression;
	
		public new CoalesceExpressionBuilder ToMutable()
		{
			return (CoalesceExpressionBuilder)base.ToMutable();
		}
	
		public new CoalesceExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (CoalesceExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Value
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CoalesceExpression.ValueProperty, ref value0); }
		}
	
		
		public Expression WhenNull
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CoalesceExpression.WhenNullProperty, ref whenNull0); }
		}
	}
	
	internal class CoalesceExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, CoalesceExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal CoalesceExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.CoalesceExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.CoalesceExpression;
	
		public new CoalesceExpression ToImmutable()
		{
			return (CoalesceExpression)base.ToImmutable();
		}
	
		public new CoalesceExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (CoalesceExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Value
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CoalesceExpression.ValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CoalesceExpression.ValueProperty, value); }
		}
		
		void CoalesceExpressionBuilder.SetValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CoalesceExpression.ValueProperty, lazy);
		}
		
		void CoalesceExpressionBuilder.SetValueLazy(global::System.Func<CoalesceExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CoalesceExpression.ValueProperty, lazy);
		}
		
		void CoalesceExpressionBuilder.SetValueLazy(global::System.Func<CoalesceExpression, Expression> immutableLazy, global::System.Func<CoalesceExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.CoalesceExpression.ValueProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder WhenNull
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CoalesceExpression.WhenNullProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CoalesceExpression.WhenNullProperty, value); }
		}
		
		void CoalesceExpressionBuilder.SetWhenNullLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CoalesceExpression.WhenNullProperty, lazy);
		}
		
		void CoalesceExpressionBuilder.SetWhenNullLazy(global::System.Func<CoalesceExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CoalesceExpression.WhenNullProperty, lazy);
		}
		
		void CoalesceExpressionBuilder.SetWhenNullLazy(global::System.Func<CoalesceExpression, Expression> immutableLazy, global::System.Func<CoalesceExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.CoalesceExpression.WhenNullProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class CompoundAssignmentExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.CompoundAssignmentExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new CompoundAssignmentExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new CompoundAssignmentExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class CompoundAssignmentExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, CompoundAssignmentExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression target0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression value0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private object operatorKind0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isChecked0;
	
		internal CompoundAssignmentExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.CompoundAssignmentExpression;
	
		public new CompoundAssignmentExpressionBuilder ToMutable()
		{
			return (CompoundAssignmentExpressionBuilder)base.ToMutable();
		}
	
		public new CompoundAssignmentExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (CompoundAssignmentExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		AssignmentExpressionBuilder AssignmentExpression.ToMutable()
		{
			return this.ToMutable();
		}
	
		AssignmentExpressionBuilder AssignmentExpression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Target
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.TargetProperty, ref target0); }
		}
	
		
		public Expression Value
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.ValueProperty, ref value0); }
		}
	
		
		public object OperatorKind
		{
		    get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CompoundAssignmentExpression.OperatorKindProperty, ref operatorKind0); }
		}
	
		
		public bool IsChecked
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CompoundAssignmentExpression.IsCheckedProperty, ref isChecked0); }
		}
	}
	
	internal class CompoundAssignmentExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, CompoundAssignmentExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal CompoundAssignmentExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.CompoundAssignmentExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.CompoundAssignmentExpression;
	
		public new CompoundAssignmentExpression ToImmutable()
		{
			return (CompoundAssignmentExpression)base.ToImmutable();
		}
	
		public new CompoundAssignmentExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (CompoundAssignmentExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		AssignmentExpression AssignmentExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		AssignmentExpression AssignmentExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Target
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.TargetProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.TargetProperty, value); }
		}
		
		void AssignmentExpressionBuilder.SetTargetLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.TargetProperty, lazy);
		}
		
		void AssignmentExpressionBuilder.SetTargetLazy(global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.TargetProperty, lazy);
		}
		
		void AssignmentExpressionBuilder.SetTargetLazy(global::System.Func<AssignmentExpression, Expression> immutableLazy, global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.TargetProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Value
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.ValueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.AssignmentExpression.ValueProperty, value); }
		}
		
		void AssignmentExpressionBuilder.SetValueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.ValueProperty, lazy);
		}
		
		void AssignmentExpressionBuilder.SetValueLazy(global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.ValueProperty, lazy);
		}
		
		void AssignmentExpressionBuilder.SetValueLazy(global::System.Func<AssignmentExpression, Expression> immutableLazy, global::System.Func<AssignmentExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.AssignmentExpression.ValueProperty, immutableLazy, mutableLazy);
		}
	
		
		public object OperatorKind
		{
			get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CompoundAssignmentExpression.OperatorKindProperty); }
			set { this.SetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CompoundAssignmentExpression.OperatorKindProperty, value); }
		}
		
		void CompoundAssignmentExpressionBuilder.SetOperatorKindLazy(global::System.Func<object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CompoundAssignmentExpression.OperatorKindProperty, lazy);
		}
		
		void CompoundAssignmentExpressionBuilder.SetOperatorKindLazy(global::System.Func<CompoundAssignmentExpressionBuilder, object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.CompoundAssignmentExpression.OperatorKindProperty, lazy);
		}
		
		void CompoundAssignmentExpressionBuilder.SetOperatorKindLazy(global::System.Func<CompoundAssignmentExpression, object> immutableLazy, global::System.Func<CompoundAssignmentExpressionBuilder, object> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.CompoundAssignmentExpression.OperatorKindProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsChecked
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CompoundAssignmentExpression.IsCheckedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.CompoundAssignmentExpression.IsCheckedProperty, value); }
		}
		
		void CompoundAssignmentExpressionBuilder.SetIsCheckedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.CompoundAssignmentExpression.IsCheckedProperty, lazy);
		}
		
		void CompoundAssignmentExpressionBuilder.SetIsCheckedLazy(global::System.Func<CompoundAssignmentExpressionBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.CompoundAssignmentExpression.IsCheckedProperty, lazy);
		}
		
		void CompoundAssignmentExpressionBuilder.SetIsCheckedLazy(global::System.Func<CompoundAssignmentExpression, bool> immutableLazy, global::System.Func<CompoundAssignmentExpressionBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.CompoundAssignmentExpression.IsCheckedProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ConditionalExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConditionalExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ConditionalExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ConditionalExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class ConditionalExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ConditionalExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression condition0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression whenTrue0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression whenFalse0;
	
		internal ConditionalExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ConditionalExpression;
	
		public new ConditionalExpressionBuilder ToMutable()
		{
			return (ConditionalExpressionBuilder)base.ToMutable();
		}
	
		public new ConditionalExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ConditionalExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Condition
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConditionalExpression.ConditionProperty, ref condition0); }
		}
	
		
		public Expression WhenTrue
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConditionalExpression.WhenTrueProperty, ref whenTrue0); }
		}
	
		
		public Expression WhenFalse
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConditionalExpression.WhenFalseProperty, ref whenFalse0); }
		}
	}
	
	internal class ConditionalExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ConditionalExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ConditionalExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ConditionalExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ConditionalExpression;
	
		public new ConditionalExpression ToImmutable()
		{
			return (ConditionalExpression)base.ToImmutable();
		}
	
		public new ConditionalExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ConditionalExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Condition
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConditionalExpression.ConditionProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConditionalExpression.ConditionProperty, value); }
		}
		
		void ConditionalExpressionBuilder.SetConditionLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ConditionalExpression.ConditionProperty, lazy);
		}
		
		void ConditionalExpressionBuilder.SetConditionLazy(global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ConditionalExpression.ConditionProperty, lazy);
		}
		
		void ConditionalExpressionBuilder.SetConditionLazy(global::System.Func<ConditionalExpression, Expression> immutableLazy, global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ConditionalExpression.ConditionProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder WhenTrue
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConditionalExpression.WhenTrueProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConditionalExpression.WhenTrueProperty, value); }
		}
		
		void ConditionalExpressionBuilder.SetWhenTrueLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ConditionalExpression.WhenTrueProperty, lazy);
		}
		
		void ConditionalExpressionBuilder.SetWhenTrueLazy(global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ConditionalExpression.WhenTrueProperty, lazy);
		}
		
		void ConditionalExpressionBuilder.SetWhenTrueLazy(global::System.Func<ConditionalExpression, Expression> immutableLazy, global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ConditionalExpression.WhenTrueProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder WhenFalse
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConditionalExpression.WhenFalseProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConditionalExpression.WhenFalseProperty, value); }
		}
		
		void ConditionalExpressionBuilder.SetWhenFalseLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ConditionalExpression.WhenFalseProperty, lazy);
		}
		
		void ConditionalExpressionBuilder.SetWhenFalseLazy(global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ConditionalExpression.WhenFalseProperty, lazy);
		}
		
		void ConditionalExpressionBuilder.SetWhenFalseLazy(global::System.Func<ConditionalExpression, Expression> immutableLazy, global::System.Func<ConditionalExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ConditionalExpression.WhenFalseProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ConversionExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ConversionExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ConversionExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class ConversionExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ConversionExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression operand0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType targetType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isTryCast0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isChecked0;
	
		internal ConversionExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ConversionExpression;
	
		public new ConversionExpressionBuilder ToMutable()
		{
			return (ConversionExpressionBuilder)base.ToMutable();
		}
	
		public new ConversionExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ConversionExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Operand
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.OperandProperty, ref operand0); }
		}
	
		
		public DataType TargetType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.TargetTypeProperty, ref targetType0); }
		}
	
		
		public bool IsTryCast
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.IsTryCastProperty, ref isTryCast0); }
		}
	
		
		public bool IsChecked
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.IsCheckedProperty, ref isChecked0); }
		}
	}
	
	internal class ConversionExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ConversionExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ConversionExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ConversionExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ConversionExpression;
	
		public new ConversionExpression ToImmutable()
		{
			return (ConversionExpression)base.ToImmutable();
		}
	
		public new ConversionExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ConversionExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Operand
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.OperandProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.OperandProperty, value); }
		}
		
		void ConversionExpressionBuilder.SetOperandLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ConversionExpression.OperandProperty, lazy);
		}
		
		void ConversionExpressionBuilder.SetOperandLazy(global::System.Func<ConversionExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ConversionExpression.OperandProperty, lazy);
		}
		
		void ConversionExpressionBuilder.SetOperandLazy(global::System.Func<ConversionExpression, Expression> immutableLazy, global::System.Func<ConversionExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ConversionExpression.OperandProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder TargetType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.TargetTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.TargetTypeProperty, value); }
		}
		
		void ConversionExpressionBuilder.SetTargetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ConversionExpression.TargetTypeProperty, lazy);
		}
		
		void ConversionExpressionBuilder.SetTargetTypeLazy(global::System.Func<ConversionExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ConversionExpression.TargetTypeProperty, lazy);
		}
		
		void ConversionExpressionBuilder.SetTargetTypeLazy(global::System.Func<ConversionExpression, DataType> immutableLazy, global::System.Func<ConversionExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ConversionExpression.TargetTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsTryCast
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.IsTryCastProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.IsTryCastProperty, value); }
		}
		
		void ConversionExpressionBuilder.SetIsTryCastLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ConversionExpression.IsTryCastProperty, lazy);
		}
		
		void ConversionExpressionBuilder.SetIsTryCastLazy(global::System.Func<ConversionExpressionBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ConversionExpression.IsTryCastProperty, lazy);
		}
		
		void ConversionExpressionBuilder.SetIsTryCastLazy(global::System.Func<ConversionExpression, bool> immutableLazy, global::System.Func<ConversionExpressionBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.ConversionExpression.IsTryCastProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsChecked
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.IsCheckedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ConversionExpression.IsCheckedProperty, value); }
		}
		
		void ConversionExpressionBuilder.SetIsCheckedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ConversionExpression.IsCheckedProperty, lazy);
		}
		
		void ConversionExpressionBuilder.SetIsCheckedLazy(global::System.Func<ConversionExpressionBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ConversionExpression.IsCheckedProperty, lazy);
		}
		
		void ConversionExpressionBuilder.SetIsCheckedLazy(global::System.Func<ConversionExpression, bool> immutableLazy, global::System.Func<ConversionExpressionBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.ConversionExpression.IsCheckedProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class DefaultValueExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.DefaultValueExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new DefaultValueExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new DefaultValueExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class DefaultValueExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, DefaultValueExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
	
		internal DefaultValueExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DefaultValueExpression;
	
		public new DefaultValueExpressionBuilder ToMutable()
		{
			return (DefaultValueExpressionBuilder)base.ToMutable();
		}
	
		public new DefaultValueExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (DefaultValueExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	}
	
	internal class DefaultValueExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, DefaultValueExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal DefaultValueExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.DefaultValueExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DefaultValueExpression;
	
		public new DefaultValueExpression ToImmutable()
		{
			return (DefaultValueExpression)base.ToImmutable();
		}
	
		public new DefaultValueExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (DefaultValueExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class DiscardExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.DiscardExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new DiscardExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new DiscardExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class DiscardExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, DiscardExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
	
		internal DiscardExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DiscardExpression;
	
		public new DiscardExpressionBuilder ToMutable()
		{
			return (DiscardExpressionBuilder)base.ToMutable();
		}
	
		public new DiscardExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (DiscardExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	}
	
	internal class DiscardExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, DiscardExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal DiscardExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.DiscardExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DiscardExpression;
	
		public new DiscardExpression ToImmutable()
		{
			return (DiscardExpression)base.ToImmutable();
		}
	
		public new DiscardExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (DiscardExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class DynamicExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.DynamicExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new DynamicExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new DynamicExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class DynamicExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, DynamicExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
	
		internal DynamicExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DynamicExpression;
	
		public new DynamicExpressionBuilder ToMutable()
		{
			return (DynamicExpressionBuilder)base.ToMutable();
		}
	
		public new DynamicExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (DynamicExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	}
	
	internal class DynamicExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, DynamicExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal DynamicExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.DynamicExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.DynamicExpression;
	
		public new DynamicExpression ToImmutable()
		{
			return (DynamicExpression)base.ToImmutable();
		}
	
		public new DynamicExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (DynamicExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class IncrementOrDecrementExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.IncrementOrDecrementExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new IncrementOrDecrementExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new IncrementOrDecrementExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class IncrementOrDecrementExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, IncrementOrDecrementExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression target0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isPostfix0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isChecked0;
	
		internal IncrementOrDecrementExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.IncrementOrDecrementExpression;
	
		public new IncrementOrDecrementExpressionBuilder ToMutable()
		{
			return (IncrementOrDecrementExpressionBuilder)base.ToMutable();
		}
	
		public new IncrementOrDecrementExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (IncrementOrDecrementExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Target
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IncrementOrDecrementExpression.TargetProperty, ref target0); }
		}
	
		
		public bool IsPostfix
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IncrementOrDecrementExpression.IsPostfixProperty, ref isPostfix0); }
		}
	
		
		public bool IsChecked
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IncrementOrDecrementExpression.IsCheckedProperty, ref isChecked0); }
		}
	}
	
	internal class IncrementOrDecrementExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, IncrementOrDecrementExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal IncrementOrDecrementExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.IncrementOrDecrementExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.IncrementOrDecrementExpression;
	
		public new IncrementOrDecrementExpression ToImmutable()
		{
			return (IncrementOrDecrementExpression)base.ToImmutable();
		}
	
		public new IncrementOrDecrementExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (IncrementOrDecrementExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Target
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IncrementOrDecrementExpression.TargetProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IncrementOrDecrementExpression.TargetProperty, value); }
		}
		
		void IncrementOrDecrementExpressionBuilder.SetTargetLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IncrementOrDecrementExpression.TargetProperty, lazy);
		}
		
		void IncrementOrDecrementExpressionBuilder.SetTargetLazy(global::System.Func<IncrementOrDecrementExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IncrementOrDecrementExpression.TargetProperty, lazy);
		}
		
		void IncrementOrDecrementExpressionBuilder.SetTargetLazy(global::System.Func<IncrementOrDecrementExpression, Expression> immutableLazy, global::System.Func<IncrementOrDecrementExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.IncrementOrDecrementExpression.TargetProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsPostfix
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IncrementOrDecrementExpression.IsPostfixProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IncrementOrDecrementExpression.IsPostfixProperty, value); }
		}
		
		void IncrementOrDecrementExpressionBuilder.SetIsPostfixLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.IncrementOrDecrementExpression.IsPostfixProperty, lazy);
		}
		
		void IncrementOrDecrementExpressionBuilder.SetIsPostfixLazy(global::System.Func<IncrementOrDecrementExpressionBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.IncrementOrDecrementExpression.IsPostfixProperty, lazy);
		}
		
		void IncrementOrDecrementExpressionBuilder.SetIsPostfixLazy(global::System.Func<IncrementOrDecrementExpression, bool> immutableLazy, global::System.Func<IncrementOrDecrementExpressionBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.IncrementOrDecrementExpression.IsPostfixProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsChecked
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IncrementOrDecrementExpression.IsCheckedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IncrementOrDecrementExpression.IsCheckedProperty, value); }
		}
		
		void IncrementOrDecrementExpressionBuilder.SetIsCheckedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.IncrementOrDecrementExpression.IsCheckedProperty, lazy);
		}
		
		void IncrementOrDecrementExpressionBuilder.SetIsCheckedLazy(global::System.Func<IncrementOrDecrementExpressionBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.IncrementOrDecrementExpression.IsCheckedProperty, lazy);
		}
		
		void IncrementOrDecrementExpressionBuilder.SetIsCheckedLazy(global::System.Func<IncrementOrDecrementExpression, bool> immutableLazy, global::System.Func<IncrementOrDecrementExpressionBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.IncrementOrDecrementExpression.IsCheckedProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class IndexerAccessExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new IndexerAccessExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new IndexerAccessExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class IndexerAccessExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, IndexerAccessExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression receiver0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isNullConditional0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Argument> arguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Indexer target0;
	
		internal IndexerAccessExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.IndexerAccessExpression;
	
		public new IndexerAccessExpressionBuilder ToMutable()
		{
			return (IndexerAccessExpressionBuilder)base.ToMutable();
		}
	
		public new IndexerAccessExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (IndexerAccessExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Receiver
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.ReceiverProperty, ref receiver0); }
		}
	
		
		public bool IsNullConditional
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.IsNullConditionalProperty, ref isNullConditional0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Argument> Arguments
		{
		    get { return this.GetList<Argument>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.ArgumentsProperty, ref arguments0); }
		}
	
		
		public Indexer Target
		{
		    get { return this.GetReference<Indexer>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.TargetProperty, ref target0); }
		}
	}
	
	internal class IndexerAccessExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, IndexerAccessExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> arguments0;
	
		internal IndexerAccessExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.IndexerAccessExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.IndexerAccessExpression;
	
		public new IndexerAccessExpression ToImmutable()
		{
			return (IndexerAccessExpression)base.ToImmutable();
		}
	
		public new IndexerAccessExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (IndexerAccessExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Receiver
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.ReceiverProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.ReceiverProperty, value); }
		}
		
		void IndexerAccessExpressionBuilder.SetReceiverLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IndexerAccessExpression.ReceiverProperty, lazy);
		}
		
		void IndexerAccessExpressionBuilder.SetReceiverLazy(global::System.Func<IndexerAccessExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IndexerAccessExpression.ReceiverProperty, lazy);
		}
		
		void IndexerAccessExpressionBuilder.SetReceiverLazy(global::System.Func<IndexerAccessExpression, Expression> immutableLazy, global::System.Func<IndexerAccessExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.IndexerAccessExpression.ReceiverProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsNullConditional
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.IsNullConditionalProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.IsNullConditionalProperty, value); }
		}
		
		void IndexerAccessExpressionBuilder.SetIsNullConditionalLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.IndexerAccessExpression.IsNullConditionalProperty, lazy);
		}
		
		void IndexerAccessExpressionBuilder.SetIsNullConditionalLazy(global::System.Func<IndexerAccessExpressionBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.IndexerAccessExpression.IsNullConditionalProperty, lazy);
		}
		
		void IndexerAccessExpressionBuilder.SetIsNullConditionalLazy(global::System.Func<IndexerAccessExpression, bool> immutableLazy, global::System.Func<IndexerAccessExpressionBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.IndexerAccessExpression.IsNullConditionalProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> Arguments
		{
			get { return this.GetList<ArgumentBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.ArgumentsProperty, ref arguments0); }
		}
	
		
		public IndexerBuilder Target
		{
			get { return this.GetReference<IndexerBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.TargetProperty); }
			set { this.SetReference<IndexerBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IndexerAccessExpression.TargetProperty, value); }
		}
		
		void IndexerAccessExpressionBuilder.SetTargetLazy(global::System.Func<IndexerBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IndexerAccessExpression.TargetProperty, lazy);
		}
		
		void IndexerAccessExpressionBuilder.SetTargetLazy(global::System.Func<IndexerAccessExpressionBuilder, IndexerBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IndexerAccessExpression.TargetProperty, lazy);
		}
		
		void IndexerAccessExpressionBuilder.SetTargetLazy(global::System.Func<IndexerAccessExpression, Indexer> immutableLazy, global::System.Func<IndexerAccessExpressionBuilder, IndexerBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.IndexerAccessExpression.TargetProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class InstanceReferenceExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.InstanceReferenceExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new InstanceReferenceExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new InstanceReferenceExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class InstanceReferenceExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, InstanceReferenceExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private NamedType accessThroughBaseType0;
	
		internal InstanceReferenceExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.InstanceReferenceExpression;
	
		public new InstanceReferenceExpressionBuilder ToMutable()
		{
			return (InstanceReferenceExpressionBuilder)base.ToMutable();
		}
	
		public new InstanceReferenceExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (InstanceReferenceExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public NamedType AccessThroughBaseType
		{
		    get { return this.GetReference<NamedType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.InstanceReferenceExpression.AccessThroughBaseTypeProperty, ref accessThroughBaseType0); }
		}
	}
	
	internal class InstanceReferenceExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, InstanceReferenceExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal InstanceReferenceExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.InstanceReferenceExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.InstanceReferenceExpression;
	
		public new InstanceReferenceExpression ToImmutable()
		{
			return (InstanceReferenceExpression)base.ToImmutable();
		}
	
		public new InstanceReferenceExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (InstanceReferenceExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public NamedTypeBuilder AccessThroughBaseType
		{
			get { return this.GetReference<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.InstanceReferenceExpression.AccessThroughBaseTypeProperty); }
			set { this.SetReference<NamedTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.InstanceReferenceExpression.AccessThroughBaseTypeProperty, value); }
		}
		
		void InstanceReferenceExpressionBuilder.SetAccessThroughBaseTypeLazy(global::System.Func<NamedTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.InstanceReferenceExpression.AccessThroughBaseTypeProperty, lazy);
		}
		
		void InstanceReferenceExpressionBuilder.SetAccessThroughBaseTypeLazy(global::System.Func<InstanceReferenceExpressionBuilder, NamedTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.InstanceReferenceExpression.AccessThroughBaseTypeProperty, lazy);
		}
		
		void InstanceReferenceExpressionBuilder.SetAccessThroughBaseTypeLazy(global::System.Func<InstanceReferenceExpression, NamedType> immutableLazy, global::System.Func<InstanceReferenceExpressionBuilder, NamedTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.InstanceReferenceExpression.AccessThroughBaseTypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class InvocationExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.InvocationExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new InvocationExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new InvocationExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class InvocationExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, InvocationExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression receiver0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Argument> arguments0;
	
		internal InvocationExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.InvocationExpression;
	
		public new InvocationExpressionBuilder ToMutable()
		{
			return (InvocationExpressionBuilder)base.ToMutable();
		}
	
		public new InvocationExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (InvocationExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Receiver
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.InvocationExpression.ReceiverProperty, ref receiver0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Argument> Arguments
		{
		    get { return this.GetList<Argument>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.InvocationExpression.ArgumentsProperty, ref arguments0); }
		}
	}
	
	internal class InvocationExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, InvocationExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> arguments0;
	
		internal InvocationExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.InvocationExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.InvocationExpression;
	
		public new InvocationExpression ToImmutable()
		{
			return (InvocationExpression)base.ToImmutable();
		}
	
		public new InvocationExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (InvocationExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Receiver
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.InvocationExpression.ReceiverProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.InvocationExpression.ReceiverProperty, value); }
		}
		
		void InvocationExpressionBuilder.SetReceiverLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.InvocationExpression.ReceiverProperty, lazy);
		}
		
		void InvocationExpressionBuilder.SetReceiverLazy(global::System.Func<InvocationExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.InvocationExpression.ReceiverProperty, lazy);
		}
		
		void InvocationExpressionBuilder.SetReceiverLazy(global::System.Func<InvocationExpression, Expression> immutableLazy, global::System.Func<InvocationExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.InvocationExpression.ReceiverProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> Arguments
		{
			get { return this.GetList<ArgumentBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.InvocationExpression.ArgumentsProperty, ref arguments0); }
		}
	}
	
	internal class IsTypeExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.IsTypeExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new IsTypeExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new IsTypeExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class IsTypeExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, IsTypeExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression valueOperand0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType typeOperand0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isNegated0;
	
		internal IsTypeExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.IsTypeExpression;
	
		public new IsTypeExpressionBuilder ToMutable()
		{
			return (IsTypeExpressionBuilder)base.ToMutable();
		}
	
		public new IsTypeExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (IsTypeExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression ValueOperand
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IsTypeExpression.ValueOperandProperty, ref valueOperand0); }
		}
	
		
		public DataType TypeOperand
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IsTypeExpression.TypeOperandProperty, ref typeOperand0); }
		}
	
		
		public bool IsNegated
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IsTypeExpression.IsNegatedProperty, ref isNegated0); }
		}
	}
	
	internal class IsTypeExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, IsTypeExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal IsTypeExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.IsTypeExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.IsTypeExpression;
	
		public new IsTypeExpression ToImmutable()
		{
			return (IsTypeExpression)base.ToImmutable();
		}
	
		public new IsTypeExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (IsTypeExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder ValueOperand
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IsTypeExpression.ValueOperandProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IsTypeExpression.ValueOperandProperty, value); }
		}
		
		void IsTypeExpressionBuilder.SetValueOperandLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IsTypeExpression.ValueOperandProperty, lazy);
		}
		
		void IsTypeExpressionBuilder.SetValueOperandLazy(global::System.Func<IsTypeExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IsTypeExpression.ValueOperandProperty, lazy);
		}
		
		void IsTypeExpressionBuilder.SetValueOperandLazy(global::System.Func<IsTypeExpression, Expression> immutableLazy, global::System.Func<IsTypeExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.IsTypeExpression.ValueOperandProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder TypeOperand
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IsTypeExpression.TypeOperandProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IsTypeExpression.TypeOperandProperty, value); }
		}
		
		void IsTypeExpressionBuilder.SetTypeOperandLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IsTypeExpression.TypeOperandProperty, lazy);
		}
		
		void IsTypeExpressionBuilder.SetTypeOperandLazy(global::System.Func<IsTypeExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.IsTypeExpression.TypeOperandProperty, lazy);
		}
		
		void IsTypeExpressionBuilder.SetTypeOperandLazy(global::System.Func<IsTypeExpression, DataType> immutableLazy, global::System.Func<IsTypeExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.IsTypeExpression.TypeOperandProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsNegated
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IsTypeExpression.IsNegatedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.IsTypeExpression.IsNegatedProperty, value); }
		}
		
		void IsTypeExpressionBuilder.SetIsNegatedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.IsTypeExpression.IsNegatedProperty, lazy);
		}
		
		void IsTypeExpressionBuilder.SetIsNegatedLazy(global::System.Func<IsTypeExpressionBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.IsTypeExpression.IsNegatedProperty, lazy);
		}
		
		void IsTypeExpressionBuilder.SetIsNegatedLazy(global::System.Func<IsTypeExpression, bool> immutableLazy, global::System.Func<IsTypeExpressionBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.IsTypeExpression.IsNegatedProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class LambdaExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.LambdaExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new LambdaExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new LambdaExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class LambdaExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, LambdaExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType returnType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Parameter> parameters0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Statement body0;
	
		internal LambdaExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.LambdaExpression;
	
		public new LambdaExpressionBuilder ToMutable()
		{
			return (LambdaExpressionBuilder)base.ToMutable();
		}
	
		public new LambdaExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (LambdaExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public DataType ReturnType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LambdaExpression.ReturnTypeProperty, ref returnType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Parameter> Parameters
		{
		    get { return this.GetList<Parameter>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LambdaExpression.ParametersProperty, ref parameters0); }
		}
	
		
		public Statement Body
		{
		    get { return this.GetReference<Statement>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LambdaExpression.BodyProperty, ref body0); }
		}
	}
	
	internal class LambdaExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, LambdaExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> parameters0;
	
		internal LambdaExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.LambdaExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.LambdaExpression;
	
		public new LambdaExpression ToImmutable()
		{
			return (LambdaExpression)base.ToImmutable();
		}
	
		public new LambdaExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (LambdaExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ReturnType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LambdaExpression.ReturnTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LambdaExpression.ReturnTypeProperty, value); }
		}
		
		void LambdaExpressionBuilder.SetReturnTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LambdaExpression.ReturnTypeProperty, lazy);
		}
		
		void LambdaExpressionBuilder.SetReturnTypeLazy(global::System.Func<LambdaExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LambdaExpression.ReturnTypeProperty, lazy);
		}
		
		void LambdaExpressionBuilder.SetReturnTypeLazy(global::System.Func<LambdaExpression, DataType> immutableLazy, global::System.Func<LambdaExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.LambdaExpression.ReturnTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ParameterBuilder> Parameters
		{
			get { return this.GetList<ParameterBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LambdaExpression.ParametersProperty, ref parameters0); }
		}
	
		
		public StatementBuilder Body
		{
			get { return this.GetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LambdaExpression.BodyProperty); }
			set { this.SetReference<StatementBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LambdaExpression.BodyProperty, value); }
		}
		
		void LambdaExpressionBuilder.SetBodyLazy(global::System.Func<StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LambdaExpression.BodyProperty, lazy);
		}
		
		void LambdaExpressionBuilder.SetBodyLazy(global::System.Func<LambdaExpressionBuilder, StatementBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LambdaExpression.BodyProperty, lazy);
		}
		
		void LambdaExpressionBuilder.SetBodyLazy(global::System.Func<LambdaExpression, Statement> immutableLazy, global::System.Func<LambdaExpressionBuilder, StatementBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.LambdaExpression.BodyProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class LiteralExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.LiteralExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new LiteralExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new LiteralExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class LiteralExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, LiteralExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private object value0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type1;
	
		internal LiteralExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.LiteralExpression;
	
		public new LiteralExpressionBuilder ToMutable()
		{
			return (LiteralExpressionBuilder)base.ToMutable();
		}
	
		public new LiteralExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (LiteralExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataType Expression.Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public object Value
		{
		    get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LiteralExpression.ValueProperty, ref value0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LiteralExpression.TypeProperty, ref type1); }
		}
	}
	
	internal class LiteralExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, LiteralExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal LiteralExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.LiteralExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.LiteralExpression;
	
		public new LiteralExpression ToImmutable()
		{
			return (LiteralExpression)base.ToImmutable();
		}
	
		public new LiteralExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (LiteralExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		DataTypeBuilder ExpressionBuilder.Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public object Value
		{
			get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LiteralExpression.ValueProperty); }
			set { this.SetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LiteralExpression.ValueProperty, value); }
		}
		
		void LiteralExpressionBuilder.SetValueLazy(global::System.Func<object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LiteralExpression.ValueProperty, lazy);
		}
		
		void LiteralExpressionBuilder.SetValueLazy(global::System.Func<LiteralExpressionBuilder, object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LiteralExpression.ValueProperty, lazy);
		}
		
		void LiteralExpressionBuilder.SetValueLazy(global::System.Func<LiteralExpression, object> immutableLazy, global::System.Func<LiteralExpressionBuilder, object> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.LiteralExpression.ValueProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LiteralExpression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.LiteralExpression.TypeProperty, value); }
		}
		
		void LiteralExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LiteralExpression.TypeProperty, lazy);
		}
		
		void LiteralExpressionBuilder.SetTypeLazy(global::System.Func<LiteralExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.LiteralExpression.TypeProperty, lazy);
		}
		
		void LiteralExpressionBuilder.SetTypeLazy(global::System.Func<LiteralExpression, DataType> immutableLazy, global::System.Func<LiteralExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.LiteralExpression.TypeProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class NameOfExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.NameOfExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new NameOfExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new NameOfExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class NameOfExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, NameOfExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression argument0;
	
		internal NameOfExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.NameOfExpression;
	
		public new NameOfExpressionBuilder ToMutable()
		{
			return (NameOfExpressionBuilder)base.ToMutable();
		}
	
		public new NameOfExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (NameOfExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Argument
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NameOfExpression.ArgumentProperty, ref argument0); }
		}
	}
	
	internal class NameOfExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, NameOfExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal NameOfExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.NameOfExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.NameOfExpression;
	
		public new NameOfExpression ToImmutable()
		{
			return (NameOfExpression)base.ToImmutable();
		}
	
		public new NameOfExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (NameOfExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Argument
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NameOfExpression.ArgumentProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.NameOfExpression.ArgumentProperty, value); }
		}
		
		void NameOfExpressionBuilder.SetArgumentLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NameOfExpression.ArgumentProperty, lazy);
		}
		
		void NameOfExpressionBuilder.SetArgumentLazy(global::System.Func<NameOfExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.NameOfExpression.ArgumentProperty, lazy);
		}
		
		void NameOfExpressionBuilder.SetArgumentLazy(global::System.Func<NameOfExpression, Expression> immutableLazy, global::System.Func<NameOfExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.NameOfExpression.ArgumentProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ObjectCreationExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ObjectCreationExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ObjectCreationExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ObjectCreationExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class ObjectCreationExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ObjectCreationExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType objectType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Argument> arguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Expression> initializers0;
	
		internal ObjectCreationExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ObjectCreationExpression;
	
		public new ObjectCreationExpressionBuilder ToMutable()
		{
			return (ObjectCreationExpressionBuilder)base.ToMutable();
		}
	
		public new ObjectCreationExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ObjectCreationExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public DataType ObjectType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ObjectCreationExpression.ObjectTypeProperty, ref objectType0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Argument> Arguments
		{
		    get { return this.GetList<Argument>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ObjectCreationExpression.ArgumentsProperty, ref arguments0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Expression> Initializers
		{
		    get { return this.GetList<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ObjectCreationExpression.InitializersProperty, ref initializers0); }
		}
	}
	
	internal class ObjectCreationExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ObjectCreationExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> arguments0;
		private global::MetaDslx.Modeling.MutableModelList<ExpressionBuilder> initializers0;
	
		internal ObjectCreationExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ObjectCreationExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ObjectCreationExpression;
	
		public new ObjectCreationExpression ToImmutable()
		{
			return (ObjectCreationExpression)base.ToImmutable();
		}
	
		public new ObjectCreationExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ObjectCreationExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ObjectType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ObjectCreationExpression.ObjectTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ObjectCreationExpression.ObjectTypeProperty, value); }
		}
		
		void ObjectCreationExpressionBuilder.SetObjectTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ObjectCreationExpression.ObjectTypeProperty, lazy);
		}
		
		void ObjectCreationExpressionBuilder.SetObjectTypeLazy(global::System.Func<ObjectCreationExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ObjectCreationExpression.ObjectTypeProperty, lazy);
		}
		
		void ObjectCreationExpressionBuilder.SetObjectTypeLazy(global::System.Func<ObjectCreationExpression, DataType> immutableLazy, global::System.Func<ObjectCreationExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ObjectCreationExpression.ObjectTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> Arguments
		{
			get { return this.GetList<ArgumentBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ObjectCreationExpression.ArgumentsProperty, ref arguments0); }
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ExpressionBuilder> Initializers
		{
			get { return this.GetList<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ObjectCreationExpression.InitializersProperty, ref initializers0); }
		}
	}
	
	internal class ParenthesizedExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ParenthesizedExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ParenthesizedExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ParenthesizedExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class ParenthesizedExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ParenthesizedExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression operand0;
	
		internal ParenthesizedExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ParenthesizedExpression;
	
		public new ParenthesizedExpressionBuilder ToMutable()
		{
			return (ParenthesizedExpressionBuilder)base.ToMutable();
		}
	
		public new ParenthesizedExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ParenthesizedExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Operand
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ParenthesizedExpression.OperandProperty, ref operand0); }
		}
	}
	
	internal class ParenthesizedExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ParenthesizedExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ParenthesizedExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ParenthesizedExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ParenthesizedExpression;
	
		public new ParenthesizedExpression ToImmutable()
		{
			return (ParenthesizedExpression)base.ToImmutable();
		}
	
		public new ParenthesizedExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ParenthesizedExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Operand
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ParenthesizedExpression.OperandProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ParenthesizedExpression.OperandProperty, value); }
		}
		
		void ParenthesizedExpressionBuilder.SetOperandLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ParenthesizedExpression.OperandProperty, lazy);
		}
		
		void ParenthesizedExpressionBuilder.SetOperandLazy(global::System.Func<ParenthesizedExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ParenthesizedExpression.OperandProperty, lazy);
		}
		
		void ParenthesizedExpressionBuilder.SetOperandLazy(global::System.Func<ParenthesizedExpression, Expression> immutableLazy, global::System.Func<ParenthesizedExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ParenthesizedExpression.OperandProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ReferenceExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ReferenceExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ReferenceExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class ReferenceExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ReferenceExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression qualifier0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isNullConditional0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<DataType> typeArguments0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isDeclaration0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType referenceThroughType0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Declaration referencedSymbol0;
	
		internal ReferenceExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ReferenceExpression;
	
		public new ReferenceExpressionBuilder ToMutable()
		{
			return (ReferenceExpressionBuilder)base.ToMutable();
		}
	
		public new ReferenceExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ReferenceExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Qualifier
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.QualifierProperty, ref qualifier0); }
		}
	
		
		public bool IsNullConditional
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.IsNullConditionalProperty, ref isNullConditional0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<DataType> TypeArguments
		{
		    get { return this.GetList<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public bool IsDeclaration
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.IsDeclarationProperty, ref isDeclaration0); }
		}
	
		
		public DataType ReferenceThroughType
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.ReferenceThroughTypeProperty, ref referenceThroughType0); }
		}
	
		
		public Declaration ReferencedSymbol
		{
		    get { return this.GetReference<Declaration>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.ReferencedSymbolProperty, ref referencedSymbol0); }
		}
	}
	
	internal class ReferenceExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ReferenceExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> typeArguments0;
	
		internal ReferenceExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ReferenceExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ReferenceExpression;
	
		public new ReferenceExpression ToImmutable()
		{
			return (ReferenceExpression)base.ToImmutable();
		}
	
		public new ReferenceExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ReferenceExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Qualifier
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.QualifierProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.QualifierProperty, value); }
		}
		
		void ReferenceExpressionBuilder.SetQualifierLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ReferenceExpression.QualifierProperty, lazy);
		}
		
		void ReferenceExpressionBuilder.SetQualifierLazy(global::System.Func<ReferenceExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ReferenceExpression.QualifierProperty, lazy);
		}
		
		void ReferenceExpressionBuilder.SetQualifierLazy(global::System.Func<ReferenceExpression, Expression> immutableLazy, global::System.Func<ReferenceExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ReferenceExpression.QualifierProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsNullConditional
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.IsNullConditionalProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.IsNullConditionalProperty, value); }
		}
		
		void ReferenceExpressionBuilder.SetIsNullConditionalLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ReferenceExpression.IsNullConditionalProperty, lazy);
		}
		
		void ReferenceExpressionBuilder.SetIsNullConditionalLazy(global::System.Func<ReferenceExpressionBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ReferenceExpression.IsNullConditionalProperty, lazy);
		}
		
		void ReferenceExpressionBuilder.SetIsNullConditionalLazy(global::System.Func<ReferenceExpression, bool> immutableLazy, global::System.Func<ReferenceExpressionBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.ReferenceExpression.IsNullConditionalProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<DataTypeBuilder> TypeArguments
		{
			get { return this.GetList<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.TypeArgumentsProperty, ref typeArguments0); }
		}
	
		
		public bool IsDeclaration
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.IsDeclarationProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.IsDeclarationProperty, value); }
		}
		
		void ReferenceExpressionBuilder.SetIsDeclarationLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ReferenceExpression.IsDeclarationProperty, lazy);
		}
		
		void ReferenceExpressionBuilder.SetIsDeclarationLazy(global::System.Func<ReferenceExpressionBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.ReferenceExpression.IsDeclarationProperty, lazy);
		}
		
		void ReferenceExpressionBuilder.SetIsDeclarationLazy(global::System.Func<ReferenceExpression, bool> immutableLazy, global::System.Func<ReferenceExpressionBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.ReferenceExpression.IsDeclarationProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder ReferenceThroughType
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.ReferenceThroughTypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.ReferenceThroughTypeProperty, value); }
		}
		
		void ReferenceExpressionBuilder.SetReferenceThroughTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ReferenceExpression.ReferenceThroughTypeProperty, lazy);
		}
		
		void ReferenceExpressionBuilder.SetReferenceThroughTypeLazy(global::System.Func<ReferenceExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ReferenceExpression.ReferenceThroughTypeProperty, lazy);
		}
		
		void ReferenceExpressionBuilder.SetReferenceThroughTypeLazy(global::System.Func<ReferenceExpression, DataType> immutableLazy, global::System.Func<ReferenceExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ReferenceExpression.ReferenceThroughTypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public DeclarationBuilder ReferencedSymbol
		{
			get { return this.GetReference<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.ReferencedSymbolProperty); }
			set { this.SetReference<DeclarationBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ReferenceExpression.ReferencedSymbolProperty, value); }
		}
		
		void ReferenceExpressionBuilder.SetReferencedSymbolLazy(global::System.Func<DeclarationBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ReferenceExpression.ReferencedSymbolProperty, lazy);
		}
		
		void ReferenceExpressionBuilder.SetReferencedSymbolLazy(global::System.Func<ReferenceExpressionBuilder, DeclarationBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ReferenceExpression.ReferencedSymbolProperty, lazy);
		}
		
		void ReferenceExpressionBuilder.SetReferencedSymbolLazy(global::System.Func<ReferenceExpression, Declaration> immutableLazy, global::System.Func<ReferenceExpressionBuilder, DeclarationBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ReferenceExpression.ReferencedSymbolProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class SizeOfExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.SizeOfExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new SizeOfExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new SizeOfExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class SizeOfExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, SizeOfExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType typeOperand0;
	
		internal SizeOfExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.SizeOfExpression;
	
		public new SizeOfExpressionBuilder ToMutable()
		{
			return (SizeOfExpressionBuilder)base.ToMutable();
		}
	
		public new SizeOfExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (SizeOfExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public DataType TypeOperand
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SizeOfExpression.TypeOperandProperty, ref typeOperand0); }
		}
	}
	
	internal class SizeOfExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, SizeOfExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal SizeOfExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.SizeOfExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.SizeOfExpression;
	
		public new SizeOfExpression ToImmutable()
		{
			return (SizeOfExpression)base.ToImmutable();
		}
	
		public new SizeOfExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (SizeOfExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder TypeOperand
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SizeOfExpression.TypeOperandProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.SizeOfExpression.TypeOperandProperty, value); }
		}
		
		void SizeOfExpressionBuilder.SetTypeOperandLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.SizeOfExpression.TypeOperandProperty, lazy);
		}
		
		void SizeOfExpressionBuilder.SetTypeOperandLazy(global::System.Func<SizeOfExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.SizeOfExpression.TypeOperandProperty, lazy);
		}
		
		void SizeOfExpressionBuilder.SetTypeOperandLazy(global::System.Func<SizeOfExpression, DataType> immutableLazy, global::System.Func<SizeOfExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.SizeOfExpression.TypeOperandProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class TypeOfExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypeOfExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new TypeOfExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new TypeOfExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class TypeOfExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, TypeOfExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType typeOperand0;
	
		internal TypeOfExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TypeOfExpression;
	
		public new TypeOfExpressionBuilder ToMutable()
		{
			return (TypeOfExpressionBuilder)base.ToMutable();
		}
	
		public new TypeOfExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (TypeOfExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public DataType TypeOperand
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypeOfExpression.TypeOperandProperty, ref typeOperand0); }
		}
	}
	
	internal class TypeOfExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, TypeOfExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal TypeOfExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.TypeOfExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TypeOfExpression;
	
		public new TypeOfExpression ToImmutable()
		{
			return (TypeOfExpression)base.ToImmutable();
		}
	
		public new TypeOfExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (TypeOfExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public DataTypeBuilder TypeOperand
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypeOfExpression.TypeOperandProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TypeOfExpression.TypeOperandProperty, value); }
		}
		
		void TypeOfExpressionBuilder.SetTypeOperandLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypeOfExpression.TypeOperandProperty, lazy);
		}
		
		void TypeOfExpressionBuilder.SetTypeOperandLazy(global::System.Func<TypeOfExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.TypeOfExpression.TypeOperandProperty, lazy);
		}
		
		void TypeOfExpressionBuilder.SetTypeOperandLazy(global::System.Func<TypeOfExpression, DataType> immutableLazy, global::System.Func<TypeOfExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.TypeOfExpression.TypeOperandProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class ThrowExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.ThrowExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new ThrowExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new ThrowExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class ThrowExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, ThrowExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression exception0;
	
		internal ThrowExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ThrowExpression;
	
		public new ThrowExpressionBuilder ToMutable()
		{
			return (ThrowExpressionBuilder)base.ToMutable();
		}
	
		public new ThrowExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (ThrowExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Expression Exception
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ThrowExpression.ExceptionProperty, ref exception0); }
		}
	}
	
	internal class ThrowExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, ThrowExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal ThrowExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.ThrowExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.ThrowExpression;
	
		public new ThrowExpression ToImmutable()
		{
			return (ThrowExpression)base.ToImmutable();
		}
	
		public new ThrowExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (ThrowExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Exception
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ThrowExpression.ExceptionProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.ThrowExpression.ExceptionProperty, value); }
		}
		
		void ThrowExpressionBuilder.SetExceptionLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ThrowExpression.ExceptionProperty, lazy);
		}
		
		void ThrowExpressionBuilder.SetExceptionLazy(global::System.Func<ThrowExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.ThrowExpression.ExceptionProperty, lazy);
		}
		
		void ThrowExpressionBuilder.SetExceptionLazy(global::System.Func<ThrowExpression, Expression> immutableLazy, global::System.Func<ThrowExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.ThrowExpression.ExceptionProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class TupleExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.TupleExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new TupleExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new TupleExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class TupleExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, TupleExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Argument> arguments0;
	
		internal TupleExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TupleExpression;
	
		public new TupleExpressionBuilder ToMutable()
		{
			return (TupleExpressionBuilder)base.ToMutable();
		}
	
		public new TupleExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (TupleExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Argument> Arguments
		{
		    get { return this.GetList<Argument>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TupleExpression.ArgumentsProperty, ref arguments0); }
		}
	}
	
	internal class TupleExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, TupleExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> arguments0;
	
		internal TupleExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.TupleExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.TupleExpression;
	
		public new TupleExpression ToImmutable()
		{
			return (TupleExpression)base.ToImmutable();
		}
	
		public new TupleExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (TupleExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<ArgumentBuilder> Arguments
		{
			get { return this.GetList<ArgumentBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.TupleExpression.ArgumentsProperty, ref arguments0); }
		}
	}
	
	internal class UnaryExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new UnaryExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new UnaryExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class UnaryExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, UnaryExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private object operatorKind0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression operand0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool isChecked0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private UnaryOperator operatorMethod0;
	
		internal UnaryExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.UnaryExpression;
	
		public new UnaryExpressionBuilder ToMutable()
		{
			return (UnaryExpressionBuilder)base.ToMutable();
		}
	
		public new UnaryExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (UnaryExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public object OperatorKind
		{
		    get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.OperatorKindProperty, ref operatorKind0); }
		}
	
		
		public Expression Operand
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.OperandProperty, ref operand0); }
		}
	
		
		public bool IsChecked
		{
		    get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.IsCheckedProperty, ref isChecked0); }
		}
	
		
		public UnaryOperator OperatorMethod
		{
		    get { return this.GetReference<UnaryOperator>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.OperatorMethodProperty, ref operatorMethod0); }
		}
	}
	
	internal class UnaryExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, UnaryExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal UnaryExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.UnaryExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.UnaryExpression;
	
		public new UnaryExpression ToImmutable()
		{
			return (UnaryExpression)base.ToImmutable();
		}
	
		public new UnaryExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (UnaryExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public object OperatorKind
		{
			get { return this.GetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.OperatorKindProperty); }
			set { this.SetReference<object>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.OperatorKindProperty, value); }
		}
		
		void UnaryExpressionBuilder.SetOperatorKindLazy(global::System.Func<object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryExpression.OperatorKindProperty, lazy);
		}
		
		void UnaryExpressionBuilder.SetOperatorKindLazy(global::System.Func<UnaryExpressionBuilder, object> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryExpression.OperatorKindProperty, lazy);
		}
		
		void UnaryExpressionBuilder.SetOperatorKindLazy(global::System.Func<UnaryExpression, object> immutableLazy, global::System.Func<UnaryExpressionBuilder, object> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryExpression.OperatorKindProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Operand
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.OperandProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.OperandProperty, value); }
		}
		
		void UnaryExpressionBuilder.SetOperandLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryExpression.OperandProperty, lazy);
		}
		
		void UnaryExpressionBuilder.SetOperandLazy(global::System.Func<UnaryExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryExpression.OperandProperty, lazy);
		}
		
		void UnaryExpressionBuilder.SetOperandLazy(global::System.Func<UnaryExpression, Expression> immutableLazy, global::System.Func<UnaryExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryExpression.OperandProperty, immutableLazy, mutableLazy);
		}
	
		
		public bool IsChecked
		{
			get { return this.GetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.IsCheckedProperty); }
			set { this.SetValue<bool>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.IsCheckedProperty, value); }
		}
		
		void UnaryExpressionBuilder.SetIsCheckedLazy(global::System.Func<bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.UnaryExpression.IsCheckedProperty, lazy);
		}
		
		void UnaryExpressionBuilder.SetIsCheckedLazy(global::System.Func<UnaryExpressionBuilder, bool> lazy)
		{
			this.SetLazyValue(CoreDescriptor.UnaryExpression.IsCheckedProperty, lazy);
		}
		
		void UnaryExpressionBuilder.SetIsCheckedLazy(global::System.Func<UnaryExpression, bool> immutableLazy, global::System.Func<UnaryExpressionBuilder, bool> mutableLazy)
		{
			this.SetLazyValue(CoreDescriptor.UnaryExpression.IsCheckedProperty, immutableLazy, mutableLazy);
		}
	
		
		public UnaryOperatorBuilder OperatorMethod
		{
			get { return this.GetReference<UnaryOperatorBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.OperatorMethodProperty); }
			set { this.SetReference<UnaryOperatorBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.UnaryExpression.OperatorMethodProperty, value); }
		}
		
		void UnaryExpressionBuilder.SetOperatorMethodLazy(global::System.Func<UnaryOperatorBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryExpression.OperatorMethodProperty, lazy);
		}
		
		void UnaryExpressionBuilder.SetOperatorMethodLazy(global::System.Func<UnaryExpressionBuilder, UnaryOperatorBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryExpression.OperatorMethodProperty, lazy);
		}
		
		void UnaryExpressionBuilder.SetOperatorMethodLazy(global::System.Func<UnaryExpression, UnaryOperator> immutableLazy, global::System.Func<UnaryExpressionBuilder, UnaryOperatorBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.UnaryExpression.OperatorMethodProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class VariableDeclarationExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new VariableDeclarationExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new VariableDeclarationExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class VariableDeclarationExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, VariableDeclarationExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Variable symbol0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression initializer0;
	
		internal VariableDeclarationExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.VariableDeclarationExpression;
	
		public new VariableDeclarationExpressionBuilder ToMutable()
		{
			return (VariableDeclarationExpressionBuilder)base.ToMutable();
		}
	
		public new VariableDeclarationExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (VariableDeclarationExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public Variable Symbol
		{
		    get { return this.GetReference<Variable>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationExpression.SymbolProperty, ref symbol0); }
		}
	
		
		public Expression Initializer
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationExpression.InitializerProperty, ref initializer0); }
		}
	}
	
	internal class VariableDeclarationExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, VariableDeclarationExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
	
		internal VariableDeclarationExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.VariableDeclarationExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.VariableDeclarationExpression;
	
		public new VariableDeclarationExpression ToImmutable()
		{
			return (VariableDeclarationExpression)base.ToImmutable();
		}
	
		public new VariableDeclarationExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (VariableDeclarationExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public VariableBuilder Symbol
		{
			get { return this.GetReference<VariableBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationExpression.SymbolProperty); }
			set { this.SetReference<VariableBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationExpression.SymbolProperty, value); }
		}
		
		void VariableDeclarationExpressionBuilder.SetSymbolLazy(global::System.Func<VariableBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.VariableDeclarationExpression.SymbolProperty, lazy);
		}
		
		void VariableDeclarationExpressionBuilder.SetSymbolLazy(global::System.Func<VariableDeclarationExpressionBuilder, VariableBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.VariableDeclarationExpression.SymbolProperty, lazy);
		}
		
		void VariableDeclarationExpressionBuilder.SetSymbolLazy(global::System.Func<VariableDeclarationExpression, Variable> immutableLazy, global::System.Func<VariableDeclarationExpressionBuilder, VariableBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.VariableDeclarationExpression.SymbolProperty, immutableLazy, mutableLazy);
		}
	
		
		public ExpressionBuilder Initializer
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationExpression.InitializerProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationExpression.InitializerProperty, value); }
		}
		
		void VariableDeclarationExpressionBuilder.SetInitializerLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.VariableDeclarationExpression.InitializerProperty, lazy);
		}
		
		void VariableDeclarationExpressionBuilder.SetInitializerLazy(global::System.Func<VariableDeclarationExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.VariableDeclarationExpression.InitializerProperty, lazy);
		}
		
		void VariableDeclarationExpressionBuilder.SetInitializerLazy(global::System.Func<VariableDeclarationExpression, Expression> immutableLazy, global::System.Func<VariableDeclarationExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.VariableDeclarationExpression.InitializerProperty, immutableLazy, mutableLazy);
		}
	}
	
	internal class VariableDeclarationGroupExpressionId : global::MetaDslx.Modeling.ObjectId
	{
		public override global::MetaDslx.Modeling.ModelObjectDescriptor Descriptor { get { return global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationGroupExpression.MDescriptor; } }
	
		public override global::MetaDslx.Modeling.ImmutableObjectBase CreateImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return new VariableDeclarationGroupExpressionImpl(this, model);
		}
	
		public override global::MetaDslx.Modeling.MutableObjectBase CreateMutable(global::MetaDslx.Modeling.MutableModel model, bool creating)
		{
			return new VariableDeclarationGroupExpressionBuilderImpl(this, model, creating);
		}
	}
	
	internal class VariableDeclarationGroupExpressionImpl : global::MetaDslx.Modeling.ImmutableObjectBase, VariableDeclarationGroupExpression
	{
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<Attribute> attributes0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DataType type0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private global::MetaDslx.Modeling.ImmutableModelList<VariableDeclarationExpression> declarations0;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Expression initializer0;
	
		internal VariableDeclarationGroupExpressionImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.ImmutableModel model)
			: base(id, model)
		{
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.VariableDeclarationGroupExpression;
	
		public new VariableDeclarationGroupExpressionBuilder ToMutable()
		{
			return (VariableDeclarationGroupExpressionBuilder)base.ToMutable();
		}
	
		public new VariableDeclarationGroupExpressionBuilder ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return (VariableDeclarationGroupExpressionBuilder)base.ToMutable(model);
		}
	
		ElementBuilder Element.ToMutable()
		{
			return this.ToMutable();
		}
	
		ElementBuilder Element.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		ExpressionBuilder Expression.ToMutable()
		{
			return this.ToMutable();
		}
	
		ExpressionBuilder Expression.ToMutable(global::MetaDslx.Modeling.MutableModel model)
		{
			return this.ToMutable(model);
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<Attribute> Attributes
		{
		    get { return this.GetList<Attribute>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataType Type
		{
		    get { return this.GetReference<DataType>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, ref type0); }
		}
	
		
		public global::MetaDslx.Modeling.ImmutableModelList<VariableDeclarationExpression> Declarations
		{
		    get { return this.GetList<VariableDeclarationExpression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationGroupExpression.DeclarationsProperty, ref declarations0); }
		}
	
		
		public Expression Initializer
		{
		    get { return this.GetReference<Expression>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationGroupExpression.InitializerProperty, ref initializer0); }
		}
	}
	
	internal class VariableDeclarationGroupExpressionBuilderImpl : global::MetaDslx.Modeling.MutableObjectBase, VariableDeclarationGroupExpressionBuilder
	{
		private global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> attributes0;
		private global::MetaDslx.Modeling.MutableModelList<VariableDeclarationExpressionBuilder> declarations0;
	
		internal VariableDeclarationGroupExpressionBuilderImpl(global::MetaDslx.Modeling.ObjectId id, global::MetaDslx.Modeling.MutableModel model, bool creating)
			: base(id, model, creating)
		{
		}
	
		protected override void MInit()
		{
			CoreImplementationProvider.Implementation.VariableDeclarationGroupExpression(this);
		}
	
		public override global::MetaDslx.Modeling.ModelMetadata MMetadata => global::MetaDslx.Languages.Core.Model.CoreInstance.MMetadata;
	
		public override global::MetaDslx.Languages.Meta.Model.MetaClass MMetaClass => CoreInstance.VariableDeclarationGroupExpression;
	
		public new VariableDeclarationGroupExpression ToImmutable()
		{
			return (VariableDeclarationGroupExpression)base.ToImmutable();
		}
	
		public new VariableDeclarationGroupExpression ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return (VariableDeclarationGroupExpression)base.ToImmutable(model);
		}
	
		Element ElementBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Element ElementBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		Expression ExpressionBuilder.ToImmutable()
		{
			return this.ToImmutable();
		}
	
		Expression ExpressionBuilder.ToImmutable(global::MetaDslx.Modeling.ImmutableModel model)
		{
			return this.ToImmutable(model);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<AttributeBuilder> Attributes
		{
			get { return this.GetList<AttributeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Element.AttributesProperty, ref attributes0); }
		}
	
		
		public DataTypeBuilder Type
		{
			get { return this.GetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty); }
			set { this.SetReference<DataTypeBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.Expression.TypeProperty, value); }
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<ExpressionBuilder, DataTypeBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, lazy);
		}
		
		void ExpressionBuilder.SetTypeLazy(global::System.Func<Expression, DataType> immutableLazy, global::System.Func<ExpressionBuilder, DataTypeBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.Expression.TypeProperty, immutableLazy, mutableLazy);
		}
	
		
		public global::MetaDslx.Modeling.MutableModelList<VariableDeclarationExpressionBuilder> Declarations
		{
			get { return this.GetList<VariableDeclarationExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationGroupExpression.DeclarationsProperty, ref declarations0); }
		}
	
		
		public ExpressionBuilder Initializer
		{
			get { return this.GetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationGroupExpression.InitializerProperty); }
			set { this.SetReference<ExpressionBuilder>(global::MetaDslx.Languages.Core.Model.CoreDescriptor.VariableDeclarationGroupExpression.InitializerProperty, value); }
		}
		
		void VariableDeclarationGroupExpressionBuilder.SetInitializerLazy(global::System.Func<ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.VariableDeclarationGroupExpression.InitializerProperty, lazy);
		}
		
		void VariableDeclarationGroupExpressionBuilder.SetInitializerLazy(global::System.Func<VariableDeclarationGroupExpressionBuilder, ExpressionBuilder> lazy)
		{
			this.SetLazyReference(CoreDescriptor.VariableDeclarationGroupExpression.InitializerProperty, lazy);
		}
		
		void VariableDeclarationGroupExpressionBuilder.SetInitializerLazy(global::System.Func<VariableDeclarationGroupExpression, Expression> immutableLazy, global::System.Func<VariableDeclarationGroupExpressionBuilder, ExpressionBuilder> mutableLazy)
		{
			this.SetLazyReference(CoreDescriptor.VariableDeclarationGroupExpression.InitializerProperty, immutableLazy, mutableLazy);
		}
	}

	internal class CoreBuilderInstance
	{
		internal static CoreBuilderInstance instance = new CoreBuilderInstance();
	
		private bool creating;
		private bool created;
		internal global::MetaDslx.Modeling.ModelMetadata MMetadata;
		internal global::MetaDslx.Modeling.MutableModel MModel;
		internal global::MetaDslx.Modeling.MutableModelGroup MModelGroup;
	
		internal PrimitiveTypeBuilder Object = null;
		internal PrimitiveTypeBuilder Void = null;
		internal PrimitiveTypeBuilder Boolean = null;
		internal PrimitiveTypeBuilder Char = null;
		internal PrimitiveTypeBuilder SByte = null;
		internal PrimitiveTypeBuilder Byte = null;
		internal PrimitiveTypeBuilder Int16 = null;
		internal PrimitiveTypeBuilder UInt16 = null;
		internal PrimitiveTypeBuilder Int32 = null;
		internal PrimitiveTypeBuilder UInt32 = null;
		internal PrimitiveTypeBuilder Int64 = null;
		internal PrimitiveTypeBuilder UInt64 = null;
		internal PrimitiveTypeBuilder Decimal = null;
		internal PrimitiveTypeBuilder Single = null;
		internal PrimitiveTypeBuilder Double = null;
		internal PrimitiveTypeBuilder String = null;
		internal PrimitiveTypeBuilder SystemType = null;
		internal PrimitiveTypeBuilder SystemEnum = null;
	
		private global::MetaDslx.Languages.Meta.Model.MetaNamespaceBuilder __tmp1;
		private global::MetaDslx.Languages.Meta.Model.MetaNamespaceBuilder __tmp2;
		private global::MetaDslx.Languages.Meta.Model.MetaNamespaceBuilder __tmp3;
		private global::MetaDslx.Languages.Meta.Model.MetaNamespaceBuilder __tmp4;
		private global::MetaDslx.Languages.Meta.Model.MetaModelBuilder __tmp5;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp6;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp7;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp8;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp9;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp10;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp11;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp12;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp13;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp14;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp15;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp16;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp17;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp18;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp19;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp20;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp21;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp22;
		private global::MetaDslx.Languages.Meta.Model.MetaConstantBuilder __tmp23;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Element;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Element_Attributes;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Attribute;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Attribute_Type;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder NamedElement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder NamedElement_Name;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder TypedElement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder TypedElement_Type;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder DataType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder DataType_ResolvedType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Declaration;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Declaration_TypeParameters;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Declaration_Members;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder TypedDeclaration;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Namespace;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Alias;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Alias_Target;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder NamedType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder NamedType_DotNetName;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder NamedType_IsAbstract;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder NamedType_IsSealed;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder NamedType_TypeArguments;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder NamedType_BaseTypes;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder PrimitiveType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ClassifierType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder InterfaceType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ClassType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder StructType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder EnumType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder EnumType_Literals;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder EnumLiteral;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder EnumLiteral_Type;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder DelegateType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder DelegateType_ReturnType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder DelegateType_Parameters;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ArrayType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ArrayType_LowerBound;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ArrayType_Size;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ArrayType_ElementType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder CollectionType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder CollectionType_IsUnique;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder CollectionType_IsUnordered;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder CollectionType_ItemType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder DictionaryType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder DictionaryType_IsUnordered;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder DictionaryType_KeyType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder DictionaryType_ValueType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder NullableType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder NullableType_InnerType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder TupleType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder TypeParameter;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder GenericTypeReference;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder GenericTypeReference_ReferencedType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder GenericTypeReference_TypeArguments;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder GenericTypeReference_ConstructedType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder GenericTypeReference_ResolvedType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Member;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Member_IsStatic;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Member_IsVirtual;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Member_IsOverride;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Member_IsAbstract;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Member_IsSealed;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder FieldLikeMember;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder FieldLikeMember_Type;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Field;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Property;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Property_GetMethod;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Property_SetMethod;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Indexer;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Indexer_Parameters;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder MethodLikeMember;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder MethodLikeMember_IsAsync;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder MethodLikeMember_ReturnType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder MethodLikeMember_Parameters;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder MethodLikeMember_Body;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Method;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Parameter;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Parameter_IsVarArg;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Constructor;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Constructor_NextConstructorInvocation;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Destructor;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Lambda;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Operator;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ConversionOperator;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder UnaryOperator;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder UnaryOperator_OperatorKind;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder BinaryOperator;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder BinaryOperator_OperatorKind;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Statement;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Local;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Variable;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Variable_IsConst;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Variable_Type;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Variable_DefaultValue;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Label;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder BlockStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder BlockStatement_Statements;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder EmptyStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ExpressionStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ExpressionStatement_Expression;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ForEachLoopStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ForEachLoopStatement_LoopControlVariable;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ForEachLoopStatement_Collection;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ForLoopStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ForLoopStatement_Before;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ForLoopStatement_Condition;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ForLoopStatement_AtLoopBottom;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ForToLoopStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ForToLoopStatement_LoopControlVariable;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ForToLoopStatement_InitialValue;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ForToLoopStatement_LimitValue;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ForToLoopStatement_StepValue;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder IfStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IfStatement_Condition;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IfStatement_IfTrue;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IfStatement_IfFalse;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder JumpStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder JumpStatement_JumpKind;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder JumpStatement_Target;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder LabeledStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder LabeledStatement_Label;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder LabeledStatement_Statement;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder LockStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder LockStatement_LockedValue;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder LockStatement_Body;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder LoopStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder LoopStatement_Body;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ReturnStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ReturnStatement_ReturnedValue;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder SwitchStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder SwitchStatement_Value;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder SwitchStatement_Cases;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder SwitchCase;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder SwitchCase_Clauses;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder SwitchCase_Body;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder CaseClause;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder CaseClause_Label;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder DefaultValueCaseClause;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder SingleValueCaseClause;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder SingleValueCaseClause_Value;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder TryStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder TryStatement_Body;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder TryStatement_Catches;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder TryStatement_Finally;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder TryStatement_ExitLabel;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder CatchClause;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder CatchClause_ExceptionDeclarationOrExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder CatchClause_Filter;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder CatchClause_Handler;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder UsingStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder UsingStatement_Resources;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder UsingStatement_Body;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder WhileLoopStatement;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder WhileLoopStatement_Condition;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder WhileLoopStatement_ConditionIsTop;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder WhileLoopStatement_ConditionIsUntil;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Expression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Expression_Type;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder Argument;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder Argument_Value;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder AssignmentExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder AssignmentExpression_Target;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder AssignmentExpression_Value;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder AwaitExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder AwaitExpression_Operation;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder BinaryExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder BinaryExpression_OperatorKind;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder BinaryExpression_LeftOperand;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder BinaryExpression_RightOperand;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder BinaryExpression_IsChecked;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder BinaryExpression_OperatorMethod;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder CoalesceExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder CoalesceExpression_Value;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder CoalesceExpression_WhenNull;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder CompoundAssignmentExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder CompoundAssignmentExpression_OperatorKind;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder CompoundAssignmentExpression_IsChecked;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ConditionalExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ConditionalExpression_Condition;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ConditionalExpression_WhenTrue;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ConditionalExpression_WhenFalse;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ConversionExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ConversionExpression_Operand;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ConversionExpression_TargetType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ConversionExpression_IsTryCast;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ConversionExpression_IsChecked;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder DefaultValueExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder DiscardExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder DynamicExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder IncrementOrDecrementExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IncrementOrDecrementExpression_Target;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IncrementOrDecrementExpression_IsPostfix;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IncrementOrDecrementExpression_IsChecked;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder IndexerAccessExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IndexerAccessExpression_Receiver;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IndexerAccessExpression_IsNullConditional;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IndexerAccessExpression_Arguments;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IndexerAccessExpression_Target;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder InstanceReferenceExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder InstanceReferenceExpression_AccessThroughBaseType;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder InvocationExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder InvocationExpression_Receiver;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder InvocationExpression_Arguments;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder IsTypeExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IsTypeExpression_ValueOperand;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IsTypeExpression_TypeOperand;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder IsTypeExpression_IsNegated;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder LambdaExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder LambdaExpression_ReturnType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder LambdaExpression_Parameters;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder LambdaExpression_Body;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder LiteralExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder LiteralExpression_Value;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder LiteralExpression_Type;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder NameOfExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder NameOfExpression_Argument;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ObjectCreationExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ObjectCreationExpression_ObjectType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ObjectCreationExpression_Arguments;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ObjectCreationExpression_Initializers;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ParenthesizedExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ParenthesizedExpression_Operand;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ReferenceExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ReferenceExpression_Qualifier;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ReferenceExpression_IsNullConditional;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ReferenceExpression_TypeArguments;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ReferenceExpression_IsDeclaration;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ReferenceExpression_ReferenceThroughType;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ReferenceExpression_ReferencedSymbol;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder SizeOfExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder SizeOfExpression_TypeOperand;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder TypeOfExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder TypeOfExpression_TypeOperand;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder ThrowExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder ThrowExpression_Exception;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder TupleExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder TupleExpression_Arguments;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder UnaryExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder UnaryExpression_OperatorKind;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder UnaryExpression_Operand;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder UnaryExpression_IsChecked;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder UnaryExpression_OperatorMethod;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder VariableDeclarationExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder VariableDeclarationExpression_Symbol;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder VariableDeclarationExpression_Initializer;
		internal global::MetaDslx.Languages.Meta.Model.MetaClassBuilder VariableDeclarationGroupExpression;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder VariableDeclarationGroupExpression_Declarations;
		internal global::MetaDslx.Languages.Meta.Model.MetaPropertyBuilder VariableDeclarationGroupExpression_Initializer;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp24;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp25;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp26;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp27;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp28;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp29;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp30;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp31;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp32;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp33;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp34;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp35;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp36;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp37;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp38;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp39;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp40;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp41;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp42;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp43;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp44;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp45;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp46;
		private global::MetaDslx.Languages.Meta.Model.MetaCollectionTypeBuilder __tmp47;
	
		internal CoreBuilderInstance()
		{
			this.MModelGroup = new global::MetaDslx.Modeling.MutableModelGroup();
			this.MModelGroup.AddReference(MetaDslx.Languages.Meta.Model.MetaInstance.MModel);
			this.MModel = this.MModelGroup.CreateModel(namespaceName: "MetaDslx.Languages.Core.Model", name: "Core", version: new global::MetaDslx.Modeling.ModelVersion(1, 0), uri: "http://MetaDslx.Languages.Core/1.0", prefix: "Core", factoryConstructor: (global::MetaDslx.Modeling.MutableModel model, global::MetaDslx.Modeling.ModelFactoryFlags flags) => new CoreFactory(model, flags));
			this.MMetadata = this.MModel.Metadata;
		}
	
		internal void Create()
		{
			lock (this)
			{
				if (this.creating || this.created) return;
				this.creating = true;
			}
			this.CreateInstances();
			CoreImplementationProvider.Implementation.CoreBuilderInstance(this);
	        foreach (global::MetaDslx.Modeling.MutableObject obj in this.MModel.Objects)
	        {
	            obj.MMakeCreated();
	        }
			lock (this)
			{
				this.created = true;
			}
		}
	
		internal void EvaluateLazyValues()
		{
			if (!this.created) return;
			this.MModel.EvaluateLazyValues();
		}
	
		private void CreateInstances()
		{
			global::MetaDslx.Languages.Meta.Model.MetaFactory factory = new global::MetaDslx.Languages.Meta.Model.MetaFactory(this.MModel, global::MetaDslx.Modeling.ModelFactoryFlags.DontMakeObjectsCreated);
			CoreFactory constantFactory = new CoreFactory(this.MModel, global::MetaDslx.Modeling.ModelFactoryFlags.DontMakeObjectsCreated);
	
			Object = constantFactory.PrimitiveType();
			Object.MName = "Object";
			Void = constantFactory.PrimitiveType();
			Void.MName = "Void";
			Boolean = constantFactory.PrimitiveType();
			Boolean.MName = "Boolean";
			Char = constantFactory.PrimitiveType();
			Char.MName = "Char";
			SByte = constantFactory.PrimitiveType();
			SByte.MName = "SByte";
			Byte = constantFactory.PrimitiveType();
			Byte.MName = "Byte";
			Int16 = constantFactory.PrimitiveType();
			Int16.MName = "Int16";
			UInt16 = constantFactory.PrimitiveType();
			UInt16.MName = "UInt16";
			Int32 = constantFactory.PrimitiveType();
			Int32.MName = "Int32";
			UInt32 = constantFactory.PrimitiveType();
			UInt32.MName = "UInt32";
			Int64 = constantFactory.PrimitiveType();
			Int64.MName = "Int64";
			UInt64 = constantFactory.PrimitiveType();
			UInt64.MName = "UInt64";
			Decimal = constantFactory.PrimitiveType();
			Decimal.MName = "Decimal";
			Single = constantFactory.PrimitiveType();
			Single.MName = "Single";
			Double = constantFactory.PrimitiveType();
			Double.MName = "Double";
			String = constantFactory.PrimitiveType();
			String.MName = "String";
			SystemType = constantFactory.PrimitiveType();
			SystemType.MName = "SystemType";
			SystemEnum = constantFactory.PrimitiveType();
			SystemEnum.MName = "SystemEnum";
	
			__tmp1 = factory.MetaNamespace();
			__tmp2 = factory.MetaNamespace();
			__tmp3 = factory.MetaNamespace();
			__tmp4 = factory.MetaNamespace();
			__tmp5 = factory.MetaModel();
			__tmp6 = factory.MetaConstant();
			__tmp7 = factory.MetaConstant();
			__tmp8 = factory.MetaConstant();
			__tmp9 = factory.MetaConstant();
			__tmp10 = factory.MetaConstant();
			__tmp11 = factory.MetaConstant();
			__tmp12 = factory.MetaConstant();
			__tmp13 = factory.MetaConstant();
			__tmp14 = factory.MetaConstant();
			__tmp15 = factory.MetaConstant();
			__tmp16 = factory.MetaConstant();
			__tmp17 = factory.MetaConstant();
			__tmp18 = factory.MetaConstant();
			__tmp19 = factory.MetaConstant();
			__tmp20 = factory.MetaConstant();
			__tmp21 = factory.MetaConstant();
			__tmp22 = factory.MetaConstant();
			__tmp23 = factory.MetaConstant();
			Element = factory.MetaClass();
			Element_Attributes = factory.MetaProperty();
			Attribute = factory.MetaClass();
			Attribute_Type = factory.MetaProperty();
			NamedElement = factory.MetaClass();
			NamedElement_Name = factory.MetaProperty();
			TypedElement = factory.MetaClass();
			TypedElement_Type = factory.MetaProperty();
			DataType = factory.MetaClass();
			DataType_ResolvedType = factory.MetaProperty();
			Declaration = factory.MetaClass();
			Declaration_TypeParameters = factory.MetaProperty();
			Declaration_Members = factory.MetaProperty();
			TypedDeclaration = factory.MetaClass();
			Namespace = factory.MetaClass();
			Alias = factory.MetaClass();
			Alias_Target = factory.MetaProperty();
			NamedType = factory.MetaClass();
			NamedType_DotNetName = factory.MetaProperty();
			NamedType_IsAbstract = factory.MetaProperty();
			NamedType_IsSealed = factory.MetaProperty();
			NamedType_TypeArguments = factory.MetaProperty();
			NamedType_BaseTypes = factory.MetaProperty();
			PrimitiveType = factory.MetaClass();
			ClassifierType = factory.MetaClass();
			InterfaceType = factory.MetaClass();
			ClassType = factory.MetaClass();
			StructType = factory.MetaClass();
			EnumType = factory.MetaClass();
			EnumType_Literals = factory.MetaProperty();
			EnumLiteral = factory.MetaClass();
			EnumLiteral_Type = factory.MetaProperty();
			DelegateType = factory.MetaClass();
			DelegateType_ReturnType = factory.MetaProperty();
			DelegateType_Parameters = factory.MetaProperty();
			ArrayType = factory.MetaClass();
			ArrayType_LowerBound = factory.MetaProperty();
			ArrayType_Size = factory.MetaProperty();
			ArrayType_ElementType = factory.MetaProperty();
			CollectionType = factory.MetaClass();
			CollectionType_IsUnique = factory.MetaProperty();
			CollectionType_IsUnordered = factory.MetaProperty();
			CollectionType_ItemType = factory.MetaProperty();
			DictionaryType = factory.MetaClass();
			DictionaryType_IsUnordered = factory.MetaProperty();
			DictionaryType_KeyType = factory.MetaProperty();
			DictionaryType_ValueType = factory.MetaProperty();
			NullableType = factory.MetaClass();
			NullableType_InnerType = factory.MetaProperty();
			TupleType = factory.MetaClass();
			TypeParameter = factory.MetaClass();
			GenericTypeReference = factory.MetaClass();
			GenericTypeReference_ReferencedType = factory.MetaProperty();
			GenericTypeReference_TypeArguments = factory.MetaProperty();
			GenericTypeReference_ConstructedType = factory.MetaProperty();
			GenericTypeReference_ResolvedType = factory.MetaProperty();
			Member = factory.MetaClass();
			Member_IsStatic = factory.MetaProperty();
			Member_IsVirtual = factory.MetaProperty();
			Member_IsOverride = factory.MetaProperty();
			Member_IsAbstract = factory.MetaProperty();
			Member_IsSealed = factory.MetaProperty();
			FieldLikeMember = factory.MetaClass();
			FieldLikeMember_Type = factory.MetaProperty();
			Field = factory.MetaClass();
			Property = factory.MetaClass();
			Property_GetMethod = factory.MetaProperty();
			Property_SetMethod = factory.MetaProperty();
			Indexer = factory.MetaClass();
			Indexer_Parameters = factory.MetaProperty();
			MethodLikeMember = factory.MetaClass();
			MethodLikeMember_IsAsync = factory.MetaProperty();
			MethodLikeMember_ReturnType = factory.MetaProperty();
			MethodLikeMember_Parameters = factory.MetaProperty();
			MethodLikeMember_Body = factory.MetaProperty();
			Method = factory.MetaClass();
			Parameter = factory.MetaClass();
			Parameter_IsVarArg = factory.MetaProperty();
			Constructor = factory.MetaClass();
			Constructor_NextConstructorInvocation = factory.MetaProperty();
			Destructor = factory.MetaClass();
			Lambda = factory.MetaClass();
			Operator = factory.MetaClass();
			ConversionOperator = factory.MetaClass();
			UnaryOperator = factory.MetaClass();
			UnaryOperator_OperatorKind = factory.MetaProperty();
			BinaryOperator = factory.MetaClass();
			BinaryOperator_OperatorKind = factory.MetaProperty();
			Statement = factory.MetaClass();
			Local = factory.MetaClass();
			Variable = factory.MetaClass();
			Variable_IsConst = factory.MetaProperty();
			Variable_Type = factory.MetaProperty();
			Variable_DefaultValue = factory.MetaProperty();
			Label = factory.MetaClass();
			BlockStatement = factory.MetaClass();
			BlockStatement_Statements = factory.MetaProperty();
			EmptyStatement = factory.MetaClass();
			ExpressionStatement = factory.MetaClass();
			ExpressionStatement_Expression = factory.MetaProperty();
			ForEachLoopStatement = factory.MetaClass();
			ForEachLoopStatement_LoopControlVariable = factory.MetaProperty();
			ForEachLoopStatement_Collection = factory.MetaProperty();
			ForLoopStatement = factory.MetaClass();
			ForLoopStatement_Before = factory.MetaProperty();
			ForLoopStatement_Condition = factory.MetaProperty();
			ForLoopStatement_AtLoopBottom = factory.MetaProperty();
			ForToLoopStatement = factory.MetaClass();
			ForToLoopStatement_LoopControlVariable = factory.MetaProperty();
			ForToLoopStatement_InitialValue = factory.MetaProperty();
			ForToLoopStatement_LimitValue = factory.MetaProperty();
			ForToLoopStatement_StepValue = factory.MetaProperty();
			IfStatement = factory.MetaClass();
			IfStatement_Condition = factory.MetaProperty();
			IfStatement_IfTrue = factory.MetaProperty();
			IfStatement_IfFalse = factory.MetaProperty();
			JumpStatement = factory.MetaClass();
			JumpStatement_JumpKind = factory.MetaProperty();
			JumpStatement_Target = factory.MetaProperty();
			LabeledStatement = factory.MetaClass();
			LabeledStatement_Label = factory.MetaProperty();
			LabeledStatement_Statement = factory.MetaProperty();
			LockStatement = factory.MetaClass();
			LockStatement_LockedValue = factory.MetaProperty();
			LockStatement_Body = factory.MetaProperty();
			LoopStatement = factory.MetaClass();
			LoopStatement_Body = factory.MetaProperty();
			ReturnStatement = factory.MetaClass();
			ReturnStatement_ReturnedValue = factory.MetaProperty();
			SwitchStatement = factory.MetaClass();
			SwitchStatement_Value = factory.MetaProperty();
			SwitchStatement_Cases = factory.MetaProperty();
			SwitchCase = factory.MetaClass();
			SwitchCase_Clauses = factory.MetaProperty();
			SwitchCase_Body = factory.MetaProperty();
			CaseClause = factory.MetaClass();
			CaseClause_Label = factory.MetaProperty();
			DefaultValueCaseClause = factory.MetaClass();
			SingleValueCaseClause = factory.MetaClass();
			SingleValueCaseClause_Value = factory.MetaProperty();
			TryStatement = factory.MetaClass();
			TryStatement_Body = factory.MetaProperty();
			TryStatement_Catches = factory.MetaProperty();
			TryStatement_Finally = factory.MetaProperty();
			TryStatement_ExitLabel = factory.MetaProperty();
			CatchClause = factory.MetaClass();
			CatchClause_ExceptionDeclarationOrExpression = factory.MetaProperty();
			CatchClause_Filter = factory.MetaProperty();
			CatchClause_Handler = factory.MetaProperty();
			UsingStatement = factory.MetaClass();
			UsingStatement_Resources = factory.MetaProperty();
			UsingStatement_Body = factory.MetaProperty();
			WhileLoopStatement = factory.MetaClass();
			WhileLoopStatement_Condition = factory.MetaProperty();
			WhileLoopStatement_ConditionIsTop = factory.MetaProperty();
			WhileLoopStatement_ConditionIsUntil = factory.MetaProperty();
			Expression = factory.MetaClass();
			Expression_Type = factory.MetaProperty();
			Argument = factory.MetaClass();
			Argument_Value = factory.MetaProperty();
			AssignmentExpression = factory.MetaClass();
			AssignmentExpression_Target = factory.MetaProperty();
			AssignmentExpression_Value = factory.MetaProperty();
			AwaitExpression = factory.MetaClass();
			AwaitExpression_Operation = factory.MetaProperty();
			BinaryExpression = factory.MetaClass();
			BinaryExpression_OperatorKind = factory.MetaProperty();
			BinaryExpression_LeftOperand = factory.MetaProperty();
			BinaryExpression_RightOperand = factory.MetaProperty();
			BinaryExpression_IsChecked = factory.MetaProperty();
			BinaryExpression_OperatorMethod = factory.MetaProperty();
			CoalesceExpression = factory.MetaClass();
			CoalesceExpression_Value = factory.MetaProperty();
			CoalesceExpression_WhenNull = factory.MetaProperty();
			CompoundAssignmentExpression = factory.MetaClass();
			CompoundAssignmentExpression_OperatorKind = factory.MetaProperty();
			CompoundAssignmentExpression_IsChecked = factory.MetaProperty();
			ConditionalExpression = factory.MetaClass();
			ConditionalExpression_Condition = factory.MetaProperty();
			ConditionalExpression_WhenTrue = factory.MetaProperty();
			ConditionalExpression_WhenFalse = factory.MetaProperty();
			ConversionExpression = factory.MetaClass();
			ConversionExpression_Operand = factory.MetaProperty();
			ConversionExpression_TargetType = factory.MetaProperty();
			ConversionExpression_IsTryCast = factory.MetaProperty();
			ConversionExpression_IsChecked = factory.MetaProperty();
			DefaultValueExpression = factory.MetaClass();
			DiscardExpression = factory.MetaClass();
			DynamicExpression = factory.MetaClass();
			IncrementOrDecrementExpression = factory.MetaClass();
			IncrementOrDecrementExpression_Target = factory.MetaProperty();
			IncrementOrDecrementExpression_IsPostfix = factory.MetaProperty();
			IncrementOrDecrementExpression_IsChecked = factory.MetaProperty();
			IndexerAccessExpression = factory.MetaClass();
			IndexerAccessExpression_Receiver = factory.MetaProperty();
			IndexerAccessExpression_IsNullConditional = factory.MetaProperty();
			IndexerAccessExpression_Arguments = factory.MetaProperty();
			IndexerAccessExpression_Target = factory.MetaProperty();
			InstanceReferenceExpression = factory.MetaClass();
			InstanceReferenceExpression_AccessThroughBaseType = factory.MetaProperty();
			InvocationExpression = factory.MetaClass();
			InvocationExpression_Receiver = factory.MetaProperty();
			InvocationExpression_Arguments = factory.MetaProperty();
			IsTypeExpression = factory.MetaClass();
			IsTypeExpression_ValueOperand = factory.MetaProperty();
			IsTypeExpression_TypeOperand = factory.MetaProperty();
			IsTypeExpression_IsNegated = factory.MetaProperty();
			LambdaExpression = factory.MetaClass();
			LambdaExpression_ReturnType = factory.MetaProperty();
			LambdaExpression_Parameters = factory.MetaProperty();
			LambdaExpression_Body = factory.MetaProperty();
			LiteralExpression = factory.MetaClass();
			LiteralExpression_Value = factory.MetaProperty();
			LiteralExpression_Type = factory.MetaProperty();
			NameOfExpression = factory.MetaClass();
			NameOfExpression_Argument = factory.MetaProperty();
			ObjectCreationExpression = factory.MetaClass();
			ObjectCreationExpression_ObjectType = factory.MetaProperty();
			ObjectCreationExpression_Arguments = factory.MetaProperty();
			ObjectCreationExpression_Initializers = factory.MetaProperty();
			ParenthesizedExpression = factory.MetaClass();
			ParenthesizedExpression_Operand = factory.MetaProperty();
			ReferenceExpression = factory.MetaClass();
			ReferenceExpression_Qualifier = factory.MetaProperty();
			ReferenceExpression_IsNullConditional = factory.MetaProperty();
			ReferenceExpression_TypeArguments = factory.MetaProperty();
			ReferenceExpression_IsDeclaration = factory.MetaProperty();
			ReferenceExpression_ReferenceThroughType = factory.MetaProperty();
			ReferenceExpression_ReferencedSymbol = factory.MetaProperty();
			SizeOfExpression = factory.MetaClass();
			SizeOfExpression_TypeOperand = factory.MetaProperty();
			TypeOfExpression = factory.MetaClass();
			TypeOfExpression_TypeOperand = factory.MetaProperty();
			ThrowExpression = factory.MetaClass();
			ThrowExpression_Exception = factory.MetaProperty();
			TupleExpression = factory.MetaClass();
			TupleExpression_Arguments = factory.MetaProperty();
			UnaryExpression = factory.MetaClass();
			UnaryExpression_OperatorKind = factory.MetaProperty();
			UnaryExpression_Operand = factory.MetaProperty();
			UnaryExpression_IsChecked = factory.MetaProperty();
			UnaryExpression_OperatorMethod = factory.MetaProperty();
			VariableDeclarationExpression = factory.MetaClass();
			VariableDeclarationExpression_Symbol = factory.MetaProperty();
			VariableDeclarationExpression_Initializer = factory.MetaProperty();
			VariableDeclarationGroupExpression = factory.MetaClass();
			VariableDeclarationGroupExpression_Declarations = factory.MetaProperty();
			VariableDeclarationGroupExpression_Initializer = factory.MetaProperty();
			__tmp24 = factory.MetaCollectionType();
			__tmp25 = factory.MetaCollectionType();
			__tmp26 = factory.MetaCollectionType();
			__tmp27 = factory.MetaCollectionType();
			__tmp28 = factory.MetaCollectionType();
			__tmp29 = factory.MetaCollectionType();
			__tmp30 = factory.MetaCollectionType();
			__tmp31 = factory.MetaCollectionType();
			__tmp32 = factory.MetaCollectionType();
			__tmp33 = factory.MetaCollectionType();
			__tmp34 = factory.MetaCollectionType();
			__tmp35 = factory.MetaCollectionType();
			__tmp36 = factory.MetaCollectionType();
			__tmp37 = factory.MetaCollectionType();
			__tmp38 = factory.MetaCollectionType();
			__tmp39 = factory.MetaCollectionType();
			__tmp40 = factory.MetaCollectionType();
			__tmp41 = factory.MetaCollectionType();
			__tmp42 = factory.MetaCollectionType();
			__tmp43 = factory.MetaCollectionType();
			__tmp44 = factory.MetaCollectionType();
			__tmp45 = factory.MetaCollectionType();
			__tmp46 = factory.MetaCollectionType();
			__tmp47 = factory.MetaCollectionType();
	
			__tmp1.Documentation = null;
			__tmp1.Name = "MetaDslx";
			// __tmp1.Namespace = null;
			// __tmp1.DefinedMetaModel = null;
			__tmp1.Declarations.AddLazy(() => __tmp2);
			__tmp2.Documentation = null;
			__tmp2.Name = "Languages";
			__tmp2.SetNamespaceLazy(() => __tmp1);
			// __tmp2.DefinedMetaModel = null;
			__tmp2.Declarations.AddLazy(() => __tmp3);
			__tmp3.Documentation = null;
			__tmp3.Name = "Core";
			__tmp3.SetNamespaceLazy(() => __tmp2);
			// __tmp3.DefinedMetaModel = null;
			__tmp3.Declarations.AddLazy(() => __tmp4);
			__tmp4.Documentation = null;
			__tmp4.Name = "Model";
			__tmp4.SetNamespaceLazy(() => __tmp3);
			__tmp4.SetDefinedMetaModelLazy(() => __tmp5);
			__tmp4.Declarations.AddLazy(() => __tmp6);
			__tmp4.Declarations.AddLazy(() => __tmp7);
			__tmp4.Declarations.AddLazy(() => __tmp8);
			__tmp4.Declarations.AddLazy(() => __tmp9);
			__tmp4.Declarations.AddLazy(() => __tmp10);
			__tmp4.Declarations.AddLazy(() => __tmp11);
			__tmp4.Declarations.AddLazy(() => __tmp12);
			__tmp4.Declarations.AddLazy(() => __tmp13);
			__tmp4.Declarations.AddLazy(() => __tmp14);
			__tmp4.Declarations.AddLazy(() => __tmp15);
			__tmp4.Declarations.AddLazy(() => __tmp16);
			__tmp4.Declarations.AddLazy(() => __tmp17);
			__tmp4.Declarations.AddLazy(() => __tmp18);
			__tmp4.Declarations.AddLazy(() => __tmp19);
			__tmp4.Declarations.AddLazy(() => __tmp20);
			__tmp4.Declarations.AddLazy(() => __tmp21);
			__tmp4.Declarations.AddLazy(() => __tmp22);
			__tmp4.Declarations.AddLazy(() => __tmp23);
			__tmp4.Declarations.AddLazy(() => Element);
			__tmp4.Declarations.AddLazy(() => Attribute);
			__tmp4.Declarations.AddLazy(() => NamedElement);
			__tmp4.Declarations.AddLazy(() => TypedElement);
			__tmp4.Declarations.AddLazy(() => DataType);
			__tmp4.Declarations.AddLazy(() => Declaration);
			__tmp4.Declarations.AddLazy(() => TypedDeclaration);
			__tmp4.Declarations.AddLazy(() => Namespace);
			__tmp4.Declarations.AddLazy(() => Alias);
			__tmp4.Declarations.AddLazy(() => NamedType);
			__tmp4.Declarations.AddLazy(() => PrimitiveType);
			__tmp4.Declarations.AddLazy(() => ClassifierType);
			__tmp4.Declarations.AddLazy(() => InterfaceType);
			__tmp4.Declarations.AddLazy(() => ClassType);
			__tmp4.Declarations.AddLazy(() => StructType);
			__tmp4.Declarations.AddLazy(() => EnumType);
			__tmp4.Declarations.AddLazy(() => EnumLiteral);
			__tmp4.Declarations.AddLazy(() => DelegateType);
			__tmp4.Declarations.AddLazy(() => ArrayType);
			__tmp4.Declarations.AddLazy(() => CollectionType);
			__tmp4.Declarations.AddLazy(() => DictionaryType);
			__tmp4.Declarations.AddLazy(() => NullableType);
			__tmp4.Declarations.AddLazy(() => TupleType);
			__tmp4.Declarations.AddLazy(() => TypeParameter);
			__tmp4.Declarations.AddLazy(() => GenericTypeReference);
			__tmp4.Declarations.AddLazy(() => Member);
			__tmp4.Declarations.AddLazy(() => FieldLikeMember);
			__tmp4.Declarations.AddLazy(() => Field);
			__tmp4.Declarations.AddLazy(() => Property);
			__tmp4.Declarations.AddLazy(() => Indexer);
			__tmp4.Declarations.AddLazy(() => MethodLikeMember);
			__tmp4.Declarations.AddLazy(() => Method);
			__tmp4.Declarations.AddLazy(() => Parameter);
			__tmp4.Declarations.AddLazy(() => Constructor);
			__tmp4.Declarations.AddLazy(() => Destructor);
			__tmp4.Declarations.AddLazy(() => Lambda);
			__tmp4.Declarations.AddLazy(() => Operator);
			__tmp4.Declarations.AddLazy(() => ConversionOperator);
			__tmp4.Declarations.AddLazy(() => UnaryOperator);
			__tmp4.Declarations.AddLazy(() => BinaryOperator);
			__tmp4.Declarations.AddLazy(() => Statement);
			__tmp4.Declarations.AddLazy(() => Local);
			__tmp4.Declarations.AddLazy(() => Variable);
			__tmp4.Declarations.AddLazy(() => Label);
			__tmp4.Declarations.AddLazy(() => BlockStatement);
			__tmp4.Declarations.AddLazy(() => EmptyStatement);
			__tmp4.Declarations.AddLazy(() => ExpressionStatement);
			__tmp4.Declarations.AddLazy(() => ForEachLoopStatement);
			__tmp4.Declarations.AddLazy(() => ForLoopStatement);
			__tmp4.Declarations.AddLazy(() => ForToLoopStatement);
			__tmp4.Declarations.AddLazy(() => IfStatement);
			__tmp4.Declarations.AddLazy(() => JumpStatement);
			__tmp4.Declarations.AddLazy(() => LabeledStatement);
			__tmp4.Declarations.AddLazy(() => LockStatement);
			__tmp4.Declarations.AddLazy(() => LoopStatement);
			__tmp4.Declarations.AddLazy(() => ReturnStatement);
			__tmp4.Declarations.AddLazy(() => SwitchStatement);
			__tmp4.Declarations.AddLazy(() => SwitchCase);
			__tmp4.Declarations.AddLazy(() => CaseClause);
			__tmp4.Declarations.AddLazy(() => DefaultValueCaseClause);
			__tmp4.Declarations.AddLazy(() => SingleValueCaseClause);
			__tmp4.Declarations.AddLazy(() => TryStatement);
			__tmp4.Declarations.AddLazy(() => CatchClause);
			__tmp4.Declarations.AddLazy(() => UsingStatement);
			__tmp4.Declarations.AddLazy(() => WhileLoopStatement);
			__tmp4.Declarations.AddLazy(() => Expression);
			__tmp4.Declarations.AddLazy(() => Argument);
			__tmp4.Declarations.AddLazy(() => AssignmentExpression);
			__tmp4.Declarations.AddLazy(() => AwaitExpression);
			__tmp4.Declarations.AddLazy(() => BinaryExpression);
			__tmp4.Declarations.AddLazy(() => CoalesceExpression);
			__tmp4.Declarations.AddLazy(() => CompoundAssignmentExpression);
			__tmp4.Declarations.AddLazy(() => ConditionalExpression);
			__tmp4.Declarations.AddLazy(() => ConversionExpression);
			__tmp4.Declarations.AddLazy(() => DefaultValueExpression);
			__tmp4.Declarations.AddLazy(() => DiscardExpression);
			__tmp4.Declarations.AddLazy(() => DynamicExpression);
			__tmp4.Declarations.AddLazy(() => IncrementOrDecrementExpression);
			__tmp4.Declarations.AddLazy(() => IndexerAccessExpression);
			__tmp4.Declarations.AddLazy(() => InstanceReferenceExpression);
			__tmp4.Declarations.AddLazy(() => InvocationExpression);
			__tmp4.Declarations.AddLazy(() => IsTypeExpression);
			__tmp4.Declarations.AddLazy(() => LambdaExpression);
			__tmp4.Declarations.AddLazy(() => LiteralExpression);
			__tmp4.Declarations.AddLazy(() => NameOfExpression);
			__tmp4.Declarations.AddLazy(() => ObjectCreationExpression);
			__tmp4.Declarations.AddLazy(() => ParenthesizedExpression);
			__tmp4.Declarations.AddLazy(() => ReferenceExpression);
			__tmp4.Declarations.AddLazy(() => SizeOfExpression);
			__tmp4.Declarations.AddLazy(() => TypeOfExpression);
			__tmp4.Declarations.AddLazy(() => ThrowExpression);
			__tmp4.Declarations.AddLazy(() => TupleExpression);
			__tmp4.Declarations.AddLazy(() => UnaryExpression);
			__tmp4.Declarations.AddLazy(() => VariableDeclarationExpression);
			__tmp4.Declarations.AddLazy(() => VariableDeclarationGroupExpression);
			__tmp5.Documentation = null;
			__tmp5.Name = "Core";
			__tmp5.MajorVersion = 1;
			__tmp5.MinorVersion = 0;
			__tmp5.Uri = "http://MetaDslx.Languages.Core/1.0";
			__tmp5.Prefix = null;
			__tmp5.SetNamespaceLazy(() => __tmp4);
			__tmp6.Documentation = null;
			__tmp6.Name = "Object";
			__tmp6.SetNamespaceLazy(() => __tmp4);
			__tmp6.SetTypeLazy(() => PrimitiveType);
			__tmp6.SetValueLazy(() => Object);
			__tmp7.Documentation = null;
			__tmp7.Name = "Void";
			__tmp7.SetNamespaceLazy(() => __tmp4);
			__tmp7.SetTypeLazy(() => PrimitiveType);
			__tmp7.SetValueLazy(() => Void);
			__tmp8.Documentation = null;
			__tmp8.Name = "Boolean";
			__tmp8.SetNamespaceLazy(() => __tmp4);
			__tmp8.SetTypeLazy(() => PrimitiveType);
			__tmp8.SetValueLazy(() => Boolean);
			__tmp9.Documentation = null;
			__tmp9.Name = "Char";
			__tmp9.SetNamespaceLazy(() => __tmp4);
			__tmp9.SetTypeLazy(() => PrimitiveType);
			__tmp9.SetValueLazy(() => Char);
			__tmp10.Documentation = null;
			__tmp10.Name = "SByte";
			__tmp10.SetNamespaceLazy(() => __tmp4);
			__tmp10.SetTypeLazy(() => PrimitiveType);
			__tmp10.SetValueLazy(() => SByte);
			__tmp11.Documentation = null;
			__tmp11.Name = "Byte";
			__tmp11.SetNamespaceLazy(() => __tmp4);
			__tmp11.SetTypeLazy(() => PrimitiveType);
			__tmp11.SetValueLazy(() => Byte);
			__tmp12.Documentation = null;
			__tmp12.Name = "Int16";
			__tmp12.SetNamespaceLazy(() => __tmp4);
			__tmp12.SetTypeLazy(() => PrimitiveType);
			__tmp12.SetValueLazy(() => Int16);
			__tmp13.Documentation = null;
			__tmp13.Name = "UInt16";
			__tmp13.SetNamespaceLazy(() => __tmp4);
			__tmp13.SetTypeLazy(() => PrimitiveType);
			__tmp13.SetValueLazy(() => UInt16);
			__tmp14.Documentation = null;
			__tmp14.Name = "Int32";
			__tmp14.SetNamespaceLazy(() => __tmp4);
			__tmp14.SetTypeLazy(() => PrimitiveType);
			__tmp14.SetValueLazy(() => Int32);
			__tmp15.Documentation = null;
			__tmp15.Name = "UInt32";
			__tmp15.SetNamespaceLazy(() => __tmp4);
			__tmp15.SetTypeLazy(() => PrimitiveType);
			__tmp15.SetValueLazy(() => UInt32);
			__tmp16.Documentation = null;
			__tmp16.Name = "Int64";
			__tmp16.SetNamespaceLazy(() => __tmp4);
			__tmp16.SetTypeLazy(() => PrimitiveType);
			__tmp16.SetValueLazy(() => Int64);
			__tmp17.Documentation = null;
			__tmp17.Name = "UInt64";
			__tmp17.SetNamespaceLazy(() => __tmp4);
			__tmp17.SetTypeLazy(() => PrimitiveType);
			__tmp17.SetValueLazy(() => UInt64);
			__tmp18.Documentation = null;
			__tmp18.Name = "Decimal";
			__tmp18.SetNamespaceLazy(() => __tmp4);
			__tmp18.SetTypeLazy(() => PrimitiveType);
			__tmp18.SetValueLazy(() => Decimal);
			__tmp19.Documentation = null;
			__tmp19.Name = "Single";
			__tmp19.SetNamespaceLazy(() => __tmp4);
			__tmp19.SetTypeLazy(() => PrimitiveType);
			__tmp19.SetValueLazy(() => Single);
			__tmp20.Documentation = null;
			__tmp20.Name = "Double";
			__tmp20.SetNamespaceLazy(() => __tmp4);
			__tmp20.SetTypeLazy(() => PrimitiveType);
			__tmp20.SetValueLazy(() => Double);
			__tmp21.Documentation = null;
			__tmp21.Name = "String";
			__tmp21.SetNamespaceLazy(() => __tmp4);
			__tmp21.SetTypeLazy(() => PrimitiveType);
			__tmp21.SetValueLazy(() => String);
			__tmp22.Documentation = null;
			__tmp22.Name = "SystemType";
			__tmp22.SetNamespaceLazy(() => __tmp4);
			__tmp22.SetTypeLazy(() => PrimitiveType);
			__tmp22.SetValueLazy(() => SystemType);
			__tmp23.Documentation = null;
			__tmp23.Name = "SystemEnum";
			__tmp23.SetNamespaceLazy(() => __tmp4);
			__tmp23.SetTypeLazy(() => PrimitiveType);
			__tmp23.SetValueLazy(() => SystemEnum);
			Element.Documentation = null;
			Element.Name = "Element";
			Element.SetNamespaceLazy(() => __tmp4);
			Element.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.Symbol);
			Element.IsAbstract = true;
			Element.Properties.AddLazy(() => Element_Attributes);
			Element_Attributes.SetTypeLazy(() => __tmp24);
			Element_Attributes.Documentation = null;
			Element_Attributes.Name = "Attributes";
			Element_Attributes.SymbolProperty = "Attributes";
			Element_Attributes.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Element_Attributes.SetClassLazy(() => Element);
			Element_Attributes.DefaultValue = null;
			Element_Attributes.IsContainment = false;
			Attribute.Documentation = null;
			Attribute.Name = "Attribute";
			Attribute.SetNamespaceLazy(() => __tmp4);
			Attribute.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.AttributeSymbol);
			Attribute.IsAbstract = false;
			Attribute.SuperClasses.AddLazy(() => NamedElement);
			Attribute.SuperClasses.AddLazy(() => TypedElement);
			Attribute.Properties.AddLazy(() => Attribute_Type);
			Attribute_Type.SetTypeLazy(() => DataType);
			Attribute_Type.Documentation = null;
			Attribute_Type.Name = "Type";
			Attribute_Type.SymbolProperty = "AttributeType";
			Attribute_Type.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Attribute_Type.SetClassLazy(() => Attribute);
			Attribute_Type.DefaultValue = null;
			Attribute_Type.IsContainment = false;
			Attribute_Type.RedefinedProperties.AddLazy(() => TypedElement_Type);
			NamedElement.Documentation = null;
			NamedElement.Name = "NamedElement";
			NamedElement.SetNamespaceLazy(() => __tmp4);
			NamedElement.SymbolType = null;
			NamedElement.IsAbstract = true;
			NamedElement.SuperClasses.AddLazy(() => Element);
			NamedElement.Properties.AddLazy(() => NamedElement_Name);
			NamedElement_Name.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.String.ToMutable());
			NamedElement_Name.Documentation = null;
			NamedElement_Name.Name = "Name";
			NamedElement_Name.SymbolProperty = "Name";
			NamedElement_Name.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			NamedElement_Name.SetClassLazy(() => NamedElement);
			NamedElement_Name.DefaultValue = null;
			NamedElement_Name.IsContainment = false;
			TypedElement.Documentation = null;
			TypedElement.Name = "TypedElement";
			TypedElement.SetNamespaceLazy(() => __tmp4);
			TypedElement.SymbolType = null;
			TypedElement.IsAbstract = true;
			TypedElement.SuperClasses.AddLazy(() => Element);
			TypedElement.Properties.AddLazy(() => TypedElement_Type);
			TypedElement_Type.SetTypeLazy(() => DataType);
			TypedElement_Type.Documentation = null;
			TypedElement_Type.Name = "Type";
			TypedElement_Type.SymbolProperty = null;
			TypedElement_Type.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			TypedElement_Type.SetClassLazy(() => TypedElement);
			TypedElement_Type.DefaultValue = null;
			TypedElement_Type.IsContainment = false;
			TypedElement_Type.RedefiningProperties.AddLazy(() => Attribute_Type);
			TypedElement_Type.RedefiningProperties.AddLazy(() => EnumLiteral_Type);
			TypedElement_Type.RedefiningProperties.AddLazy(() => FieldLikeMember_Type);
			DataType.Documentation = null;
			DataType.Name = "DataType";
			DataType.SetNamespaceLazy(() => __tmp4);
			DataType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.TypeSymbol);
			DataType.IsAbstract = true;
			DataType.SuperClasses.AddLazy(() => Element);
			DataType.Properties.AddLazy(() => DataType_ResolvedType);
			DataType_ResolvedType.SetTypeLazy(() => DataType);
			DataType_ResolvedType.Documentation = null;
			DataType_ResolvedType.Name = "ResolvedType";
			DataType_ResolvedType.SymbolProperty = null;
			DataType_ResolvedType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Derived;
			DataType_ResolvedType.SetClassLazy(() => DataType);
			DataType_ResolvedType.DefaultValue = null;
			DataType_ResolvedType.IsContainment = false;
			Declaration.Documentation = null;
			Declaration.Name = "Declaration";
			Declaration.SetNamespaceLazy(() => __tmp4);
			Declaration.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.DeclaredSymbol);
			Declaration.IsAbstract = true;
			Declaration.SuperClasses.AddLazy(() => NamedElement);
			Declaration.Properties.AddLazy(() => Declaration_TypeParameters);
			Declaration.Properties.AddLazy(() => Declaration_Members);
			Declaration_TypeParameters.SetTypeLazy(() => __tmp25);
			Declaration_TypeParameters.Documentation = null;
			Declaration_TypeParameters.Name = "TypeParameters";
			Declaration_TypeParameters.SymbolProperty = "TypeParameters";
			Declaration_TypeParameters.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Declaration_TypeParameters.SetClassLazy(() => Declaration);
			Declaration_TypeParameters.DefaultValue = null;
			Declaration_TypeParameters.IsContainment = true;
			Declaration_Members.SetTypeLazy(() => __tmp26);
			Declaration_Members.Documentation = null;
			Declaration_Members.Name = "Members";
			Declaration_Members.SymbolProperty = "Members";
			Declaration_Members.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Declaration_Members.SetClassLazy(() => Declaration);
			Declaration_Members.DefaultValue = null;
			Declaration_Members.IsContainment = true;
			TypedDeclaration.Documentation = null;
			TypedDeclaration.Name = "TypedDeclaration";
			TypedDeclaration.SetNamespaceLazy(() => __tmp4);
			TypedDeclaration.SymbolType = null;
			TypedDeclaration.IsAbstract = true;
			TypedDeclaration.SuperClasses.AddLazy(() => Declaration);
			TypedDeclaration.SuperClasses.AddLazy(() => TypedElement);
			Namespace.Documentation = null;
			Namespace.Name = "Namespace";
			Namespace.SetNamespaceLazy(() => __tmp4);
			Namespace.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.NamespaceSymbol);
			Namespace.IsAbstract = false;
			Namespace.SuperClasses.AddLazy(() => Declaration);
			Alias.Documentation = null;
			Alias.Name = "Alias";
			Alias.SetNamespaceLazy(() => __tmp4);
			Alias.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.AliasSymbol);
			Alias.IsAbstract = false;
			Alias.SuperClasses.AddLazy(() => Declaration);
			Alias.Properties.AddLazy(() => Alias_Target);
			Alias_Target.SetTypeLazy(() => Declaration);
			Alias_Target.Documentation = null;
			Alias_Target.Name = "Target";
			Alias_Target.SymbolProperty = "Target";
			Alias_Target.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Alias_Target.SetClassLazy(() => Alias);
			Alias_Target.DefaultValue = null;
			Alias_Target.IsContainment = false;
			NamedType.Documentation = null;
			NamedType.Name = "NamedType";
			NamedType.SetNamespaceLazy(() => __tmp4);
			NamedType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.NamedTypeSymbol);
			NamedType.IsAbstract = true;
			NamedType.SuperClasses.AddLazy(() => Declaration);
			NamedType.SuperClasses.AddLazy(() => DataType);
			NamedType.Properties.AddLazy(() => NamedType_DotNetName);
			NamedType.Properties.AddLazy(() => NamedType_IsAbstract);
			NamedType.Properties.AddLazy(() => NamedType_IsSealed);
			NamedType.Properties.AddLazy(() => NamedType_TypeArguments);
			NamedType.Properties.AddLazy(() => NamedType_BaseTypes);
			NamedType_DotNetName.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.String.ToMutable());
			NamedType_DotNetName.Documentation = null;
			NamedType_DotNetName.Name = "DotNetName";
			NamedType_DotNetName.SymbolProperty = null;
			NamedType_DotNetName.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			NamedType_DotNetName.SetClassLazy(() => NamedType);
			NamedType_DotNetName.DefaultValue = null;
			NamedType_DotNetName.IsContainment = false;
			NamedType_IsAbstract.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			NamedType_IsAbstract.Documentation = null;
			NamedType_IsAbstract.Name = "IsAbstract";
			NamedType_IsAbstract.SymbolProperty = "IsAbstract";
			NamedType_IsAbstract.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			NamedType_IsAbstract.SetClassLazy(() => NamedType);
			NamedType_IsAbstract.DefaultValue = null;
			NamedType_IsAbstract.IsContainment = false;
			NamedType_IsSealed.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			NamedType_IsSealed.Documentation = null;
			NamedType_IsSealed.Name = "IsSealed";
			NamedType_IsSealed.SymbolProperty = "IsSealed";
			NamedType_IsSealed.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			NamedType_IsSealed.SetClassLazy(() => NamedType);
			NamedType_IsSealed.DefaultValue = null;
			NamedType_IsSealed.IsContainment = false;
			NamedType_TypeArguments.SetTypeLazy(() => __tmp27);
			NamedType_TypeArguments.Documentation = null;
			NamedType_TypeArguments.Name = "TypeArguments";
			NamedType_TypeArguments.SymbolProperty = "TypeArguments";
			NamedType_TypeArguments.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			NamedType_TypeArguments.SetClassLazy(() => NamedType);
			NamedType_TypeArguments.DefaultValue = null;
			NamedType_TypeArguments.IsContainment = true;
			NamedType_BaseTypes.SetTypeLazy(() => __tmp28);
			NamedType_BaseTypes.Documentation = null;
			NamedType_BaseTypes.Name = "BaseTypes";
			NamedType_BaseTypes.SymbolProperty = "BaseTypes";
			NamedType_BaseTypes.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			NamedType_BaseTypes.SetClassLazy(() => NamedType);
			NamedType_BaseTypes.DefaultValue = null;
			NamedType_BaseTypes.IsContainment = false;
			PrimitiveType.Documentation = null;
			PrimitiveType.Name = "PrimitiveType";
			PrimitiveType.SetNamespaceLazy(() => __tmp4);
			PrimitiveType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.PrimitiveTypeSymbol);
			PrimitiveType.IsAbstract = false;
			PrimitiveType.SuperClasses.AddLazy(() => NamedType);
			ClassifierType.Documentation = null;
			ClassifierType.Name = "ClassifierType";
			ClassifierType.SetNamespaceLazy(() => __tmp4);
			ClassifierType.SymbolType = null;
			ClassifierType.IsAbstract = false;
			ClassifierType.SuperClasses.AddLazy(() => NamedType);
			InterfaceType.Documentation = null;
			InterfaceType.Name = "InterfaceType";
			InterfaceType.SetNamespaceLazy(() => __tmp4);
			InterfaceType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.InterfaceTypeSymbol);
			InterfaceType.IsAbstract = false;
			InterfaceType.SuperClasses.AddLazy(() => ClassifierType);
			ClassType.Documentation = null;
			ClassType.Name = "ClassType";
			ClassType.SetNamespaceLazy(() => __tmp4);
			ClassType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ClassTypeSymbol);
			ClassType.IsAbstract = false;
			ClassType.SuperClasses.AddLazy(() => ClassifierType);
			StructType.Documentation = null;
			StructType.Name = "StructType";
			StructType.SetNamespaceLazy(() => __tmp4);
			StructType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.StructTypeSymbol);
			StructType.IsAbstract = false;
			StructType.SuperClasses.AddLazy(() => ClassifierType);
			EnumType.Documentation = null;
			EnumType.Name = "EnumType";
			EnumType.SetNamespaceLazy(() => __tmp4);
			EnumType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.EnumTypeSymbol);
			EnumType.IsAbstract = false;
			EnumType.SuperClasses.AddLazy(() => NamedType);
			EnumType.Properties.AddLazy(() => EnumType_Literals);
			EnumType_Literals.SetTypeLazy(() => __tmp29);
			EnumType_Literals.Documentation = null;
			EnumType_Literals.Name = "Literals";
			EnumType_Literals.SymbolProperty = null;
			EnumType_Literals.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Derived;
			EnumType_Literals.SetClassLazy(() => EnumType);
			EnumType_Literals.DefaultValue = null;
			EnumType_Literals.IsContainment = false;
			EnumLiteral.Documentation = null;
			EnumLiteral.Name = "EnumLiteral";
			EnumLiteral.SetNamespaceLazy(() => __tmp4);
			EnumLiteral.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.EnumLiteralSymbol);
			EnumLiteral.IsAbstract = false;
			EnumLiteral.SuperClasses.AddLazy(() => Member);
			EnumLiteral.SuperClasses.AddLazy(() => TypedElement);
			EnumLiteral.Properties.AddLazy(() => EnumLiteral_Type);
			EnumLiteral_Type.SetTypeLazy(() => EnumType);
			EnumLiteral_Type.Documentation = null;
			EnumLiteral_Type.Name = "Type";
			EnumLiteral_Type.SymbolProperty = null;
			EnumLiteral_Type.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Derived;
			EnumLiteral_Type.SetClassLazy(() => EnumLiteral);
			EnumLiteral_Type.DefaultValue = null;
			EnumLiteral_Type.IsContainment = false;
			EnumLiteral_Type.RedefinedProperties.AddLazy(() => TypedElement_Type);
			DelegateType.Documentation = null;
			DelegateType.Name = "DelegateType";
			DelegateType.SetNamespaceLazy(() => __tmp4);
			DelegateType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.DelegateTypeSymbol);
			DelegateType.IsAbstract = false;
			DelegateType.SuperClasses.AddLazy(() => NamedType);
			DelegateType.Properties.AddLazy(() => DelegateType_ReturnType);
			DelegateType.Properties.AddLazy(() => DelegateType_Parameters);
			DelegateType_ReturnType.SetTypeLazy(() => DataType);
			DelegateType_ReturnType.Documentation = null;
			DelegateType_ReturnType.Name = "ReturnType";
			DelegateType_ReturnType.SymbolProperty = "ReturnType";
			DelegateType_ReturnType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			DelegateType_ReturnType.SetClassLazy(() => DelegateType);
			DelegateType_ReturnType.DefaultValue = null;
			DelegateType_ReturnType.IsContainment = false;
			DelegateType_Parameters.SetTypeLazy(() => __tmp30);
			DelegateType_Parameters.Documentation = null;
			DelegateType_Parameters.Name = "Parameters";
			DelegateType_Parameters.SymbolProperty = "Parameters";
			DelegateType_Parameters.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			DelegateType_Parameters.SetClassLazy(() => DelegateType);
			DelegateType_Parameters.DefaultValue = null;
			DelegateType_Parameters.IsContainment = true;
			ArrayType.Documentation = null;
			ArrayType.Name = "ArrayType";
			ArrayType.SetNamespaceLazy(() => __tmp4);
			ArrayType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ArrayTypeSymbol);
			ArrayType.IsAbstract = false;
			ArrayType.SuperClasses.AddLazy(() => DataType);
			ArrayType.Properties.AddLazy(() => ArrayType_LowerBound);
			ArrayType.Properties.AddLazy(() => ArrayType_Size);
			ArrayType.Properties.AddLazy(() => ArrayType_ElementType);
			ArrayType_LowerBound.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Int.ToMutable());
			ArrayType_LowerBound.Documentation = null;
			ArrayType_LowerBound.Name = "LowerBound";
			ArrayType_LowerBound.SymbolProperty = "LowerBound";
			ArrayType_LowerBound.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ArrayType_LowerBound.SetClassLazy(() => ArrayType);
			ArrayType_LowerBound.DefaultValue = null;
			ArrayType_LowerBound.IsContainment = false;
			ArrayType_Size.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Int.ToMutable());
			ArrayType_Size.Documentation = null;
			ArrayType_Size.Name = "Size";
			ArrayType_Size.SymbolProperty = "Size";
			ArrayType_Size.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ArrayType_Size.SetClassLazy(() => ArrayType);
			ArrayType_Size.DefaultValue = null;
			ArrayType_Size.IsContainment = false;
			ArrayType_ElementType.SetTypeLazy(() => DataType);
			ArrayType_ElementType.Documentation = null;
			ArrayType_ElementType.Name = "ElementType";
			ArrayType_ElementType.SymbolProperty = "ElementType";
			ArrayType_ElementType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ArrayType_ElementType.SetClassLazy(() => ArrayType);
			ArrayType_ElementType.DefaultValue = null;
			ArrayType_ElementType.IsContainment = false;
			CollectionType.Documentation = null;
			CollectionType.Name = "CollectionType";
			CollectionType.SetNamespaceLazy(() => __tmp4);
			CollectionType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.CollectionTypeSymbol);
			CollectionType.IsAbstract = false;
			CollectionType.SuperClasses.AddLazy(() => DataType);
			CollectionType.Properties.AddLazy(() => CollectionType_IsUnique);
			CollectionType.Properties.AddLazy(() => CollectionType_IsUnordered);
			CollectionType.Properties.AddLazy(() => CollectionType_ItemType);
			CollectionType_IsUnique.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			CollectionType_IsUnique.Documentation = null;
			CollectionType_IsUnique.Name = "IsUnique";
			CollectionType_IsUnique.SymbolProperty = "IsUnique";
			CollectionType_IsUnique.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			CollectionType_IsUnique.SetClassLazy(() => CollectionType);
			CollectionType_IsUnique.DefaultValue = null;
			CollectionType_IsUnique.IsContainment = false;
			CollectionType_IsUnordered.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			CollectionType_IsUnordered.Documentation = null;
			CollectionType_IsUnordered.Name = "IsUnordered";
			CollectionType_IsUnordered.SymbolProperty = "IsUnordered";
			CollectionType_IsUnordered.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			CollectionType_IsUnordered.SetClassLazy(() => CollectionType);
			CollectionType_IsUnordered.DefaultValue = null;
			CollectionType_IsUnordered.IsContainment = false;
			CollectionType_ItemType.SetTypeLazy(() => DataType);
			CollectionType_ItemType.Documentation = null;
			CollectionType_ItemType.Name = "ItemType";
			CollectionType_ItemType.SymbolProperty = "ItemType";
			CollectionType_ItemType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			CollectionType_ItemType.SetClassLazy(() => CollectionType);
			CollectionType_ItemType.DefaultValue = null;
			CollectionType_ItemType.IsContainment = false;
			DictionaryType.Documentation = null;
			DictionaryType.Name = "DictionaryType";
			DictionaryType.SetNamespaceLazy(() => __tmp4);
			DictionaryType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.DictionaryTypeSymbol);
			DictionaryType.IsAbstract = false;
			DictionaryType.SuperClasses.AddLazy(() => DataType);
			DictionaryType.Properties.AddLazy(() => DictionaryType_IsUnordered);
			DictionaryType.Properties.AddLazy(() => DictionaryType_KeyType);
			DictionaryType.Properties.AddLazy(() => DictionaryType_ValueType);
			DictionaryType_IsUnordered.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			DictionaryType_IsUnordered.Documentation = null;
			DictionaryType_IsUnordered.Name = "IsUnordered";
			DictionaryType_IsUnordered.SymbolProperty = "IsUnordered";
			DictionaryType_IsUnordered.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			DictionaryType_IsUnordered.SetClassLazy(() => DictionaryType);
			DictionaryType_IsUnordered.DefaultValue = null;
			DictionaryType_IsUnordered.IsContainment = false;
			DictionaryType_KeyType.SetTypeLazy(() => DataType);
			DictionaryType_KeyType.Documentation = null;
			DictionaryType_KeyType.Name = "KeyType";
			DictionaryType_KeyType.SymbolProperty = "KeyType";
			DictionaryType_KeyType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			DictionaryType_KeyType.SetClassLazy(() => DictionaryType);
			DictionaryType_KeyType.DefaultValue = null;
			DictionaryType_KeyType.IsContainment = false;
			DictionaryType_ValueType.SetTypeLazy(() => DataType);
			DictionaryType_ValueType.Documentation = null;
			DictionaryType_ValueType.Name = "ValueType";
			DictionaryType_ValueType.SymbolProperty = "ValueType";
			DictionaryType_ValueType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			DictionaryType_ValueType.SetClassLazy(() => DictionaryType);
			DictionaryType_ValueType.DefaultValue = null;
			DictionaryType_ValueType.IsContainment = false;
			NullableType.Documentation = null;
			NullableType.Name = "NullableType";
			NullableType.SetNamespaceLazy(() => __tmp4);
			NullableType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.NullableTypeSymbol);
			NullableType.IsAbstract = false;
			NullableType.SuperClasses.AddLazy(() => DataType);
			NullableType.Properties.AddLazy(() => NullableType_InnerType);
			NullableType_InnerType.SetTypeLazy(() => DataType);
			NullableType_InnerType.Documentation = null;
			NullableType_InnerType.Name = "InnerType";
			NullableType_InnerType.SymbolProperty = "InnerType";
			NullableType_InnerType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			NullableType_InnerType.SetClassLazy(() => NullableType);
			NullableType_InnerType.DefaultValue = null;
			NullableType_InnerType.IsContainment = false;
			TupleType.Documentation = null;
			TupleType.Name = "TupleType";
			TupleType.SetNamespaceLazy(() => __tmp4);
			TupleType.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.TupleTypeSymbol);
			TupleType.IsAbstract = false;
			TupleType.SuperClasses.AddLazy(() => DataType);
			TypeParameter.Documentation = null;
			TypeParameter.Name = "TypeParameter";
			TypeParameter.SetNamespaceLazy(() => __tmp4);
			TypeParameter.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.TypeParameterSymbol);
			TypeParameter.IsAbstract = false;
			TypeParameter.SuperClasses.AddLazy(() => NamedType);
			GenericTypeReference.Documentation = null;
			GenericTypeReference.Name = "GenericTypeReference";
			GenericTypeReference.SetNamespaceLazy(() => __tmp4);
			GenericTypeReference.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.GenericTypeReferenceTypeSymbol);
			GenericTypeReference.IsAbstract = false;
			GenericTypeReference.SuperClasses.AddLazy(() => DataType);
			GenericTypeReference.Properties.AddLazy(() => GenericTypeReference_ReferencedType);
			GenericTypeReference.Properties.AddLazy(() => GenericTypeReference_TypeArguments);
			GenericTypeReference.Properties.AddLazy(() => GenericTypeReference_ConstructedType);
			GenericTypeReference.Properties.AddLazy(() => GenericTypeReference_ResolvedType);
			GenericTypeReference_ReferencedType.SetTypeLazy(() => NamedType);
			GenericTypeReference_ReferencedType.Documentation = null;
			GenericTypeReference_ReferencedType.Name = "ReferencedType";
			GenericTypeReference_ReferencedType.SymbolProperty = "ReferencedType";
			GenericTypeReference_ReferencedType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			GenericTypeReference_ReferencedType.SetClassLazy(() => GenericTypeReference);
			GenericTypeReference_ReferencedType.DefaultValue = null;
			GenericTypeReference_ReferencedType.IsContainment = false;
			GenericTypeReference_TypeArguments.SetTypeLazy(() => __tmp31);
			GenericTypeReference_TypeArguments.Documentation = null;
			GenericTypeReference_TypeArguments.Name = "TypeArguments";
			GenericTypeReference_TypeArguments.SymbolProperty = "TypeArguments";
			GenericTypeReference_TypeArguments.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			GenericTypeReference_TypeArguments.SetClassLazy(() => GenericTypeReference);
			GenericTypeReference_TypeArguments.DefaultValue = null;
			GenericTypeReference_TypeArguments.IsContainment = true;
			GenericTypeReference_ConstructedType.SetTypeLazy(() => NamedType);
			GenericTypeReference_ConstructedType.Documentation = null;
			GenericTypeReference_ConstructedType.Name = "ConstructedType";
			GenericTypeReference_ConstructedType.SymbolProperty = null;
			GenericTypeReference_ConstructedType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Derived;
			GenericTypeReference_ConstructedType.SetClassLazy(() => GenericTypeReference);
			GenericTypeReference_ConstructedType.DefaultValue = null;
			GenericTypeReference_ConstructedType.IsContainment = false;
			GenericTypeReference_ResolvedType.SetTypeLazy(() => DataType);
			GenericTypeReference_ResolvedType.Documentation = null;
			GenericTypeReference_ResolvedType.Name = "ResolvedType";
			GenericTypeReference_ResolvedType.SymbolProperty = null;
			GenericTypeReference_ResolvedType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Derived;
			GenericTypeReference_ResolvedType.SetClassLazy(() => GenericTypeReference);
			GenericTypeReference_ResolvedType.DefaultValue = null;
			GenericTypeReference_ResolvedType.IsContainment = false;
			Member.Documentation = null;
			Member.Name = "Member";
			Member.SetNamespaceLazy(() => __tmp4);
			Member.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.MemberSymbol);
			Member.IsAbstract = true;
			Member.SuperClasses.AddLazy(() => Declaration);
			Member.Properties.AddLazy(() => Member_IsStatic);
			Member.Properties.AddLazy(() => Member_IsVirtual);
			Member.Properties.AddLazy(() => Member_IsOverride);
			Member.Properties.AddLazy(() => Member_IsAbstract);
			Member.Properties.AddLazy(() => Member_IsSealed);
			Member_IsStatic.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			Member_IsStatic.Documentation = null;
			Member_IsStatic.Name = "IsStatic";
			Member_IsStatic.SymbolProperty = "IsStatic";
			Member_IsStatic.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Member_IsStatic.SetClassLazy(() => Member);
			Member_IsStatic.DefaultValue = null;
			Member_IsStatic.IsContainment = false;
			Member_IsVirtual.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			Member_IsVirtual.Documentation = null;
			Member_IsVirtual.Name = "IsVirtual";
			Member_IsVirtual.SymbolProperty = "IsVirtual";
			Member_IsVirtual.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Member_IsVirtual.SetClassLazy(() => Member);
			Member_IsVirtual.DefaultValue = null;
			Member_IsVirtual.IsContainment = false;
			Member_IsOverride.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			Member_IsOverride.Documentation = null;
			Member_IsOverride.Name = "IsOverride";
			Member_IsOverride.SymbolProperty = "IsOverride";
			Member_IsOverride.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Member_IsOverride.SetClassLazy(() => Member);
			Member_IsOverride.DefaultValue = null;
			Member_IsOverride.IsContainment = false;
			Member_IsAbstract.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			Member_IsAbstract.Documentation = null;
			Member_IsAbstract.Name = "IsAbstract";
			Member_IsAbstract.SymbolProperty = "IsAbstract";
			Member_IsAbstract.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Member_IsAbstract.SetClassLazy(() => Member);
			Member_IsAbstract.DefaultValue = null;
			Member_IsAbstract.IsContainment = false;
			Member_IsSealed.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			Member_IsSealed.Documentation = null;
			Member_IsSealed.Name = "IsSealed";
			Member_IsSealed.SymbolProperty = "IsSealed";
			Member_IsSealed.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Member_IsSealed.SetClassLazy(() => Member);
			Member_IsSealed.DefaultValue = null;
			Member_IsSealed.IsContainment = false;
			FieldLikeMember.Documentation = null;
			FieldLikeMember.Name = "FieldLikeMember";
			FieldLikeMember.SetNamespaceLazy(() => __tmp4);
			FieldLikeMember.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.FieldLikeSymbol);
			FieldLikeMember.IsAbstract = true;
			FieldLikeMember.SuperClasses.AddLazy(() => Member);
			FieldLikeMember.SuperClasses.AddLazy(() => TypedDeclaration);
			FieldLikeMember.Properties.AddLazy(() => FieldLikeMember_Type);
			FieldLikeMember_Type.SetTypeLazy(() => DataType);
			FieldLikeMember_Type.Documentation = null;
			FieldLikeMember_Type.Name = "Type";
			FieldLikeMember_Type.SymbolProperty = "Type";
			FieldLikeMember_Type.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			FieldLikeMember_Type.SetClassLazy(() => FieldLikeMember);
			FieldLikeMember_Type.DefaultValue = null;
			FieldLikeMember_Type.IsContainment = false;
			FieldLikeMember_Type.RedefinedProperties.AddLazy(() => TypedElement_Type);
			Field.Documentation = null;
			Field.Name = "Field";
			Field.SetNamespaceLazy(() => __tmp4);
			Field.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.FieldSymbol);
			Field.IsAbstract = false;
			Field.SuperClasses.AddLazy(() => FieldLikeMember);
			Property.Documentation = null;
			Property.Name = "Property";
			Property.SetNamespaceLazy(() => __tmp4);
			Property.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.PropertySymbol);
			Property.IsAbstract = false;
			Property.SuperClasses.AddLazy(() => FieldLikeMember);
			Property.Properties.AddLazy(() => Property_GetMethod);
			Property.Properties.AddLazy(() => Property_SetMethod);
			Property_GetMethod.SetTypeLazy(() => Method);
			Property_GetMethod.Documentation = null;
			Property_GetMethod.Name = "GetMethod";
			Property_GetMethod.SymbolProperty = "GetMethod";
			Property_GetMethod.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Property_GetMethod.SetClassLazy(() => Property);
			Property_GetMethod.DefaultValue = null;
			Property_GetMethod.IsContainment = true;
			Property_SetMethod.SetTypeLazy(() => Method);
			Property_SetMethod.Documentation = null;
			Property_SetMethod.Name = "SetMethod";
			Property_SetMethod.SymbolProperty = "SetMethod";
			Property_SetMethod.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Property_SetMethod.SetClassLazy(() => Property);
			Property_SetMethod.DefaultValue = null;
			Property_SetMethod.IsContainment = true;
			Indexer.Documentation = null;
			Indexer.Name = "Indexer";
			Indexer.SetNamespaceLazy(() => __tmp4);
			Indexer.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.IndexerSymbol);
			Indexer.IsAbstract = false;
			Indexer.SuperClasses.AddLazy(() => Property);
			Indexer.Properties.AddLazy(() => Indexer_Parameters);
			Indexer_Parameters.SetTypeLazy(() => __tmp32);
			Indexer_Parameters.Documentation = null;
			Indexer_Parameters.Name = "Parameters";
			Indexer_Parameters.SymbolProperty = "Parameters";
			Indexer_Parameters.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Indexer_Parameters.SetClassLazy(() => Indexer);
			Indexer_Parameters.DefaultValue = null;
			Indexer_Parameters.IsContainment = true;
			MethodLikeMember.Documentation = null;
			MethodLikeMember.Name = "MethodLikeMember";
			MethodLikeMember.SetNamespaceLazy(() => __tmp4);
			MethodLikeMember.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.MethodLikeSymbol);
			MethodLikeMember.IsAbstract = true;
			MethodLikeMember.SuperClasses.AddLazy(() => Member);
			MethodLikeMember.Properties.AddLazy(() => MethodLikeMember_IsAsync);
			MethodLikeMember.Properties.AddLazy(() => MethodLikeMember_ReturnType);
			MethodLikeMember.Properties.AddLazy(() => MethodLikeMember_Parameters);
			MethodLikeMember.Properties.AddLazy(() => MethodLikeMember_Body);
			MethodLikeMember_IsAsync.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			MethodLikeMember_IsAsync.Documentation = null;
			MethodLikeMember_IsAsync.Name = "IsAsync";
			MethodLikeMember_IsAsync.SymbolProperty = "IsAsync";
			MethodLikeMember_IsAsync.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			MethodLikeMember_IsAsync.SetClassLazy(() => MethodLikeMember);
			MethodLikeMember_IsAsync.DefaultValue = null;
			MethodLikeMember_IsAsync.IsContainment = false;
			MethodLikeMember_ReturnType.SetTypeLazy(() => DataType);
			MethodLikeMember_ReturnType.Documentation = null;
			MethodLikeMember_ReturnType.Name = "ReturnType";
			MethodLikeMember_ReturnType.SymbolProperty = "ReturnType";
			MethodLikeMember_ReturnType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			MethodLikeMember_ReturnType.SetClassLazy(() => MethodLikeMember);
			MethodLikeMember_ReturnType.DefaultValue = null;
			MethodLikeMember_ReturnType.IsContainment = false;
			MethodLikeMember_Parameters.SetTypeLazy(() => __tmp33);
			MethodLikeMember_Parameters.Documentation = null;
			MethodLikeMember_Parameters.Name = "Parameters";
			MethodLikeMember_Parameters.SymbolProperty = "Parameters";
			MethodLikeMember_Parameters.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			MethodLikeMember_Parameters.SetClassLazy(() => MethodLikeMember);
			MethodLikeMember_Parameters.DefaultValue = null;
			MethodLikeMember_Parameters.IsContainment = true;
			MethodLikeMember_Body.SetTypeLazy(() => Statement);
			MethodLikeMember_Body.Documentation = null;
			MethodLikeMember_Body.Name = "Body";
			MethodLikeMember_Body.SymbolProperty = "Body";
			MethodLikeMember_Body.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			MethodLikeMember_Body.SetClassLazy(() => MethodLikeMember);
			MethodLikeMember_Body.DefaultValue = null;
			MethodLikeMember_Body.IsContainment = true;
			Method.Documentation = null;
			Method.Name = "Method";
			Method.SetNamespaceLazy(() => __tmp4);
			Method.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.MethodSymbol);
			Method.IsAbstract = false;
			Method.SuperClasses.AddLazy(() => MethodLikeMember);
			Parameter.Documentation = null;
			Parameter.Name = "Parameter";
			Parameter.SetNamespaceLazy(() => __tmp4);
			Parameter.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ParameterSymbol);
			Parameter.IsAbstract = false;
			Parameter.SuperClasses.AddLazy(() => Variable);
			Parameter.Properties.AddLazy(() => Parameter_IsVarArg);
			Parameter_IsVarArg.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			Parameter_IsVarArg.Documentation = null;
			Parameter_IsVarArg.Name = "IsVarArg";
			Parameter_IsVarArg.SymbolProperty = "IsVarArg";
			Parameter_IsVarArg.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Parameter_IsVarArg.SetClassLazy(() => Parameter);
			Parameter_IsVarArg.DefaultValue = null;
			Parameter_IsVarArg.IsContainment = false;
			Constructor.Documentation = null;
			Constructor.Name = "Constructor";
			Constructor.SetNamespaceLazy(() => __tmp4);
			Constructor.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ConstructorSymbol);
			Constructor.IsAbstract = false;
			Constructor.SuperClasses.AddLazy(() => MethodLikeMember);
			Constructor.Properties.AddLazy(() => Constructor_NextConstructorInvocation);
			Constructor_NextConstructorInvocation.SetTypeLazy(() => InvocationExpression);
			Constructor_NextConstructorInvocation.Documentation = null;
			Constructor_NextConstructorInvocation.Name = "NextConstructorInvocation";
			Constructor_NextConstructorInvocation.SymbolProperty = "NextConstructorInvocation";
			Constructor_NextConstructorInvocation.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Constructor_NextConstructorInvocation.SetClassLazy(() => Constructor);
			Constructor_NextConstructorInvocation.DefaultValue = null;
			Constructor_NextConstructorInvocation.IsContainment = true;
			Destructor.Documentation = null;
			Destructor.Name = "Destructor";
			Destructor.SetNamespaceLazy(() => __tmp4);
			Destructor.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.DestructorSymbol);
			Destructor.IsAbstract = false;
			Destructor.SuperClasses.AddLazy(() => MethodLikeMember);
			Lambda.Documentation = null;
			Lambda.Name = "Lambda";
			Lambda.SetNamespaceLazy(() => __tmp4);
			Lambda.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.LambdaSymbol);
			Lambda.IsAbstract = false;
			Lambda.SuperClasses.AddLazy(() => MethodLikeMember);
			Operator.Documentation = null;
			Operator.Name = "Operator";
			Operator.SetNamespaceLazy(() => __tmp4);
			Operator.SymbolType = null;
			Operator.IsAbstract = true;
			Operator.SuperClasses.AddLazy(() => MethodLikeMember);
			ConversionOperator.Documentation = null;
			ConversionOperator.Name = "ConversionOperator";
			ConversionOperator.SetNamespaceLazy(() => __tmp4);
			ConversionOperator.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ConversionOperatorSymbol);
			ConversionOperator.IsAbstract = true;
			ConversionOperator.SuperClasses.AddLazy(() => Operator);
			UnaryOperator.Documentation = null;
			UnaryOperator.Name = "UnaryOperator";
			UnaryOperator.SetNamespaceLazy(() => __tmp4);
			UnaryOperator.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.UnaryOperatorSymbol);
			UnaryOperator.IsAbstract = true;
			UnaryOperator.SuperClasses.AddLazy(() => Operator);
			UnaryOperator.Properties.AddLazy(() => UnaryOperator_OperatorKind);
			UnaryOperator_OperatorKind.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Object.ToMutable());
			UnaryOperator_OperatorKind.Documentation = null;
			UnaryOperator_OperatorKind.Name = "OperatorKind";
			UnaryOperator_OperatorKind.SymbolProperty = "OperatorKind";
			UnaryOperator_OperatorKind.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			UnaryOperator_OperatorKind.SetClassLazy(() => UnaryOperator);
			UnaryOperator_OperatorKind.DefaultValue = null;
			UnaryOperator_OperatorKind.IsContainment = false;
			BinaryOperator.Documentation = null;
			BinaryOperator.Name = "BinaryOperator";
			BinaryOperator.SetNamespaceLazy(() => __tmp4);
			BinaryOperator.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.BinaryOperatorSymbol);
			BinaryOperator.IsAbstract = true;
			BinaryOperator.SuperClasses.AddLazy(() => Operator);
			BinaryOperator.Properties.AddLazy(() => BinaryOperator_OperatorKind);
			BinaryOperator_OperatorKind.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Object.ToMutable());
			BinaryOperator_OperatorKind.Documentation = null;
			BinaryOperator_OperatorKind.Name = "OperatorKind";
			BinaryOperator_OperatorKind.SymbolProperty = "OperatorKind";
			BinaryOperator_OperatorKind.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			BinaryOperator_OperatorKind.SetClassLazy(() => BinaryOperator);
			BinaryOperator_OperatorKind.DefaultValue = null;
			BinaryOperator_OperatorKind.IsContainment = false;
			Statement.Documentation = null;
			Statement.Name = "Statement";
			Statement.SetNamespaceLazy(() => __tmp4);
			Statement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.StatementSymbol);
			Statement.IsAbstract = true;
			Statement.SuperClasses.AddLazy(() => Element);
			Local.Documentation = null;
			Local.Name = "Local";
			Local.SetNamespaceLazy(() => __tmp4);
			Local.SymbolType = null;
			Local.IsAbstract = true;
			Local.SuperClasses.AddLazy(() => Declaration);
			Variable.Documentation = null;
			Variable.Name = "Variable";
			Variable.SetNamespaceLazy(() => __tmp4);
			Variable.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.VariableSymbol);
			Variable.IsAbstract = false;
			Variable.SuperClasses.AddLazy(() => Local);
			Variable.Properties.AddLazy(() => Variable_IsConst);
			Variable.Properties.AddLazy(() => Variable_Type);
			Variable.Properties.AddLazy(() => Variable_DefaultValue);
			Variable_IsConst.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			Variable_IsConst.Documentation = null;
			Variable_IsConst.Name = "IsConst";
			Variable_IsConst.SymbolProperty = "IsConst";
			Variable_IsConst.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Variable_IsConst.SetClassLazy(() => Variable);
			Variable_IsConst.DefaultValue = null;
			Variable_IsConst.IsContainment = false;
			Variable_Type.SetTypeLazy(() => DataType);
			Variable_Type.Documentation = null;
			Variable_Type.Name = "Type";
			Variable_Type.SymbolProperty = "Type";
			Variable_Type.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Variable_Type.SetClassLazy(() => Variable);
			Variable_Type.DefaultValue = null;
			Variable_Type.IsContainment = false;
			Variable_DefaultValue.SetTypeLazy(() => Expression);
			Variable_DefaultValue.Documentation = null;
			Variable_DefaultValue.Name = "DefaultValue";
			Variable_DefaultValue.SymbolProperty = "DefaultValue";
			Variable_DefaultValue.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Variable_DefaultValue.SetClassLazy(() => Variable);
			Variable_DefaultValue.DefaultValue = null;
			Variable_DefaultValue.IsContainment = true;
			Label.Documentation = null;
			Label.Name = "Label";
			Label.SetNamespaceLazy(() => __tmp4);
			Label.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.LabelSymbol);
			Label.IsAbstract = false;
			Label.SuperClasses.AddLazy(() => Local);
			BlockStatement.Documentation = null;
			BlockStatement.Name = "BlockStatement";
			BlockStatement.SetNamespaceLazy(() => __tmp4);
			BlockStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.BlockStatementSymbol);
			BlockStatement.IsAbstract = false;
			BlockStatement.SuperClasses.AddLazy(() => Statement);
			BlockStatement.Properties.AddLazy(() => BlockStatement_Statements);
			BlockStatement_Statements.SetTypeLazy(() => __tmp34);
			BlockStatement_Statements.Documentation = null;
			BlockStatement_Statements.Name = "Statements";
			BlockStatement_Statements.SymbolProperty = "Statements";
			BlockStatement_Statements.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			BlockStatement_Statements.SetClassLazy(() => BlockStatement);
			BlockStatement_Statements.DefaultValue = null;
			BlockStatement_Statements.IsContainment = true;
			EmptyStatement.Documentation = null;
			EmptyStatement.Name = "EmptyStatement";
			EmptyStatement.SetNamespaceLazy(() => __tmp4);
			EmptyStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.EmptyStatementSymbol);
			EmptyStatement.IsAbstract = false;
			EmptyStatement.SuperClasses.AddLazy(() => Statement);
			ExpressionStatement.Documentation = null;
			ExpressionStatement.Name = "ExpressionStatement";
			ExpressionStatement.SetNamespaceLazy(() => __tmp4);
			ExpressionStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ExpressionStatementSymbol);
			ExpressionStatement.IsAbstract = false;
			ExpressionStatement.SuperClasses.AddLazy(() => Statement);
			ExpressionStatement.Properties.AddLazy(() => ExpressionStatement_Expression);
			ExpressionStatement_Expression.SetTypeLazy(() => Expression);
			ExpressionStatement_Expression.Documentation = null;
			ExpressionStatement_Expression.Name = "Expression";
			ExpressionStatement_Expression.SymbolProperty = "Expression";
			ExpressionStatement_Expression.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ExpressionStatement_Expression.SetClassLazy(() => ExpressionStatement);
			ExpressionStatement_Expression.DefaultValue = null;
			ExpressionStatement_Expression.IsContainment = true;
			ForEachLoopStatement.Documentation = null;
			ForEachLoopStatement.Name = "ForEachLoopStatement";
			ForEachLoopStatement.SetNamespaceLazy(() => __tmp4);
			ForEachLoopStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ForEachLoopStatementSymbol);
			ForEachLoopStatement.IsAbstract = false;
			ForEachLoopStatement.SuperClasses.AddLazy(() => Statement);
			ForEachLoopStatement.Properties.AddLazy(() => ForEachLoopStatement_LoopControlVariable);
			ForEachLoopStatement.Properties.AddLazy(() => ForEachLoopStatement_Collection);
			ForEachLoopStatement_LoopControlVariable.SetTypeLazy(() => Expression);
			ForEachLoopStatement_LoopControlVariable.Documentation = null;
			ForEachLoopStatement_LoopControlVariable.Name = "LoopControlVariable";
			ForEachLoopStatement_LoopControlVariable.SymbolProperty = "LoopControlVariable";
			ForEachLoopStatement_LoopControlVariable.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ForEachLoopStatement_LoopControlVariable.SetClassLazy(() => ForEachLoopStatement);
			ForEachLoopStatement_LoopControlVariable.DefaultValue = null;
			ForEachLoopStatement_LoopControlVariable.IsContainment = true;
			ForEachLoopStatement_Collection.SetTypeLazy(() => Expression);
			ForEachLoopStatement_Collection.Documentation = null;
			ForEachLoopStatement_Collection.Name = "Collection";
			ForEachLoopStatement_Collection.SymbolProperty = "Collection";
			ForEachLoopStatement_Collection.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ForEachLoopStatement_Collection.SetClassLazy(() => ForEachLoopStatement);
			ForEachLoopStatement_Collection.DefaultValue = null;
			ForEachLoopStatement_Collection.IsContainment = true;
			ForLoopStatement.Documentation = null;
			ForLoopStatement.Name = "ForLoopStatement";
			ForLoopStatement.SetNamespaceLazy(() => __tmp4);
			ForLoopStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ForLoopStatementSymbol);
			ForLoopStatement.IsAbstract = false;
			ForLoopStatement.SuperClasses.AddLazy(() => Statement);
			ForLoopStatement.Properties.AddLazy(() => ForLoopStatement_Before);
			ForLoopStatement.Properties.AddLazy(() => ForLoopStatement_Condition);
			ForLoopStatement.Properties.AddLazy(() => ForLoopStatement_AtLoopBottom);
			ForLoopStatement_Before.SetTypeLazy(() => __tmp35);
			ForLoopStatement_Before.Documentation = null;
			ForLoopStatement_Before.Name = "Before";
			ForLoopStatement_Before.SymbolProperty = "Before";
			ForLoopStatement_Before.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ForLoopStatement_Before.SetClassLazy(() => ForLoopStatement);
			ForLoopStatement_Before.DefaultValue = null;
			ForLoopStatement_Before.IsContainment = true;
			ForLoopStatement_Condition.SetTypeLazy(() => Expression);
			ForLoopStatement_Condition.Documentation = null;
			ForLoopStatement_Condition.Name = "Condition";
			ForLoopStatement_Condition.SymbolProperty = "Condition";
			ForLoopStatement_Condition.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ForLoopStatement_Condition.SetClassLazy(() => ForLoopStatement);
			ForLoopStatement_Condition.DefaultValue = null;
			ForLoopStatement_Condition.IsContainment = true;
			ForLoopStatement_AtLoopBottom.SetTypeLazy(() => __tmp36);
			ForLoopStatement_AtLoopBottom.Documentation = null;
			ForLoopStatement_AtLoopBottom.Name = "AtLoopBottom";
			ForLoopStatement_AtLoopBottom.SymbolProperty = "AtLoopBottom";
			ForLoopStatement_AtLoopBottom.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ForLoopStatement_AtLoopBottom.SetClassLazy(() => ForLoopStatement);
			ForLoopStatement_AtLoopBottom.DefaultValue = null;
			ForLoopStatement_AtLoopBottom.IsContainment = true;
			ForToLoopStatement.Documentation = null;
			ForToLoopStatement.Name = "ForToLoopStatement";
			ForToLoopStatement.SetNamespaceLazy(() => __tmp4);
			ForToLoopStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ForToLoopStatementSymbol);
			ForToLoopStatement.IsAbstract = false;
			ForToLoopStatement.SuperClasses.AddLazy(() => Statement);
			ForToLoopStatement.Properties.AddLazy(() => ForToLoopStatement_LoopControlVariable);
			ForToLoopStatement.Properties.AddLazy(() => ForToLoopStatement_InitialValue);
			ForToLoopStatement.Properties.AddLazy(() => ForToLoopStatement_LimitValue);
			ForToLoopStatement.Properties.AddLazy(() => ForToLoopStatement_StepValue);
			ForToLoopStatement_LoopControlVariable.SetTypeLazy(() => Expression);
			ForToLoopStatement_LoopControlVariable.Documentation = null;
			ForToLoopStatement_LoopControlVariable.Name = "LoopControlVariable";
			ForToLoopStatement_LoopControlVariable.SymbolProperty = "LoopControlVariable";
			ForToLoopStatement_LoopControlVariable.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ForToLoopStatement_LoopControlVariable.SetClassLazy(() => ForToLoopStatement);
			ForToLoopStatement_LoopControlVariable.DefaultValue = null;
			ForToLoopStatement_LoopControlVariable.IsContainment = true;
			ForToLoopStatement_InitialValue.SetTypeLazy(() => Expression);
			ForToLoopStatement_InitialValue.Documentation = null;
			ForToLoopStatement_InitialValue.Name = "InitialValue";
			ForToLoopStatement_InitialValue.SymbolProperty = "InitialValue";
			ForToLoopStatement_InitialValue.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ForToLoopStatement_InitialValue.SetClassLazy(() => ForToLoopStatement);
			ForToLoopStatement_InitialValue.DefaultValue = null;
			ForToLoopStatement_InitialValue.IsContainment = true;
			ForToLoopStatement_LimitValue.SetTypeLazy(() => Expression);
			ForToLoopStatement_LimitValue.Documentation = null;
			ForToLoopStatement_LimitValue.Name = "LimitValue";
			ForToLoopStatement_LimitValue.SymbolProperty = "LimitValue";
			ForToLoopStatement_LimitValue.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ForToLoopStatement_LimitValue.SetClassLazy(() => ForToLoopStatement);
			ForToLoopStatement_LimitValue.DefaultValue = null;
			ForToLoopStatement_LimitValue.IsContainment = true;
			ForToLoopStatement_StepValue.SetTypeLazy(() => Expression);
			ForToLoopStatement_StepValue.Documentation = null;
			ForToLoopStatement_StepValue.Name = "StepValue";
			ForToLoopStatement_StepValue.SymbolProperty = "StepValue";
			ForToLoopStatement_StepValue.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ForToLoopStatement_StepValue.SetClassLazy(() => ForToLoopStatement);
			ForToLoopStatement_StepValue.DefaultValue = null;
			ForToLoopStatement_StepValue.IsContainment = true;
			IfStatement.Documentation = null;
			IfStatement.Name = "IfStatement";
			IfStatement.SetNamespaceLazy(() => __tmp4);
			IfStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.IfStatementSymbol);
			IfStatement.IsAbstract = false;
			IfStatement.SuperClasses.AddLazy(() => Statement);
			IfStatement.Properties.AddLazy(() => IfStatement_Condition);
			IfStatement.Properties.AddLazy(() => IfStatement_IfTrue);
			IfStatement.Properties.AddLazy(() => IfStatement_IfFalse);
			IfStatement_Condition.SetTypeLazy(() => Expression);
			IfStatement_Condition.Documentation = null;
			IfStatement_Condition.Name = "Condition";
			IfStatement_Condition.SymbolProperty = "Condition";
			IfStatement_Condition.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IfStatement_Condition.SetClassLazy(() => IfStatement);
			IfStatement_Condition.DefaultValue = null;
			IfStatement_Condition.IsContainment = true;
			IfStatement_IfTrue.SetTypeLazy(() => Statement);
			IfStatement_IfTrue.Documentation = null;
			IfStatement_IfTrue.Name = "IfTrue";
			IfStatement_IfTrue.SymbolProperty = "IfTrue";
			IfStatement_IfTrue.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IfStatement_IfTrue.SetClassLazy(() => IfStatement);
			IfStatement_IfTrue.DefaultValue = null;
			IfStatement_IfTrue.IsContainment = true;
			IfStatement_IfFalse.SetTypeLazy(() => Statement);
			IfStatement_IfFalse.Documentation = null;
			IfStatement_IfFalse.Name = "IfFalse";
			IfStatement_IfFalse.SymbolProperty = "IfFalse";
			IfStatement_IfFalse.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IfStatement_IfFalse.SetClassLazy(() => IfStatement);
			IfStatement_IfFalse.DefaultValue = null;
			IfStatement_IfFalse.IsContainment = true;
			JumpStatement.Documentation = null;
			JumpStatement.Name = "JumpStatement";
			JumpStatement.SetNamespaceLazy(() => __tmp4);
			JumpStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.JumpStatementSymbol);
			JumpStatement.IsAbstract = false;
			JumpStatement.SuperClasses.AddLazy(() => Statement);
			JumpStatement.Properties.AddLazy(() => JumpStatement_JumpKind);
			JumpStatement.Properties.AddLazy(() => JumpStatement_Target);
			JumpStatement_JumpKind.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Object.ToMutable());
			JumpStatement_JumpKind.Documentation = null;
			JumpStatement_JumpKind.Name = "JumpKind";
			JumpStatement_JumpKind.SymbolProperty = "JumpKind";
			JumpStatement_JumpKind.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			JumpStatement_JumpKind.SetClassLazy(() => JumpStatement);
			JumpStatement_JumpKind.DefaultValue = null;
			JumpStatement_JumpKind.IsContainment = false;
			JumpStatement_Target.SetTypeLazy(() => Label);
			JumpStatement_Target.Documentation = null;
			JumpStatement_Target.Name = "Target";
			JumpStatement_Target.SymbolProperty = "Target";
			JumpStatement_Target.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			JumpStatement_Target.SetClassLazy(() => JumpStatement);
			JumpStatement_Target.DefaultValue = null;
			JumpStatement_Target.IsContainment = false;
			LabeledStatement.Documentation = null;
			LabeledStatement.Name = "LabeledStatement";
			LabeledStatement.SetNamespaceLazy(() => __tmp4);
			LabeledStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.LabeledStatementSymbol);
			LabeledStatement.IsAbstract = false;
			LabeledStatement.SuperClasses.AddLazy(() => Statement);
			LabeledStatement.Properties.AddLazy(() => LabeledStatement_Label);
			LabeledStatement.Properties.AddLazy(() => LabeledStatement_Statement);
			LabeledStatement_Label.SetTypeLazy(() => Label);
			LabeledStatement_Label.Documentation = null;
			LabeledStatement_Label.Name = "Label";
			LabeledStatement_Label.SymbolProperty = "Label";
			LabeledStatement_Label.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			LabeledStatement_Label.SetClassLazy(() => LabeledStatement);
			LabeledStatement_Label.DefaultValue = null;
			LabeledStatement_Label.IsContainment = true;
			LabeledStatement_Statement.SetTypeLazy(() => Statement);
			LabeledStatement_Statement.Documentation = null;
			LabeledStatement_Statement.Name = "Statement";
			LabeledStatement_Statement.SymbolProperty = "Statement";
			LabeledStatement_Statement.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			LabeledStatement_Statement.SetClassLazy(() => LabeledStatement);
			LabeledStatement_Statement.DefaultValue = null;
			LabeledStatement_Statement.IsContainment = true;
			LockStatement.Documentation = null;
			LockStatement.Name = "LockStatement";
			LockStatement.SetNamespaceLazy(() => __tmp4);
			LockStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.LockStatementSymbol);
			LockStatement.IsAbstract = false;
			LockStatement.SuperClasses.AddLazy(() => Statement);
			LockStatement.Properties.AddLazy(() => LockStatement_LockedValue);
			LockStatement.Properties.AddLazy(() => LockStatement_Body);
			LockStatement_LockedValue.SetTypeLazy(() => Expression);
			LockStatement_LockedValue.Documentation = null;
			LockStatement_LockedValue.Name = "LockedValue";
			LockStatement_LockedValue.SymbolProperty = "LockedValue";
			LockStatement_LockedValue.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			LockStatement_LockedValue.SetClassLazy(() => LockStatement);
			LockStatement_LockedValue.DefaultValue = null;
			LockStatement_LockedValue.IsContainment = true;
			LockStatement_Body.SetTypeLazy(() => Statement);
			LockStatement_Body.Documentation = null;
			LockStatement_Body.Name = "Body";
			LockStatement_Body.SymbolProperty = "Body";
			LockStatement_Body.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			LockStatement_Body.SetClassLazy(() => LockStatement);
			LockStatement_Body.DefaultValue = null;
			LockStatement_Body.IsContainment = true;
			LoopStatement.Documentation = null;
			LoopStatement.Name = "LoopStatement";
			LoopStatement.SetNamespaceLazy(() => __tmp4);
			LoopStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.LoopStatementSymbol);
			LoopStatement.IsAbstract = true;
			LoopStatement.SuperClasses.AddLazy(() => Statement);
			LoopStatement.Properties.AddLazy(() => LoopStatement_Body);
			LoopStatement_Body.SetTypeLazy(() => Statement);
			LoopStatement_Body.Documentation = null;
			LoopStatement_Body.Name = "Body";
			LoopStatement_Body.SymbolProperty = "Body";
			LoopStatement_Body.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			LoopStatement_Body.SetClassLazy(() => LoopStatement);
			LoopStatement_Body.DefaultValue = null;
			LoopStatement_Body.IsContainment = true;
			ReturnStatement.Documentation = null;
			ReturnStatement.Name = "ReturnStatement";
			ReturnStatement.SetNamespaceLazy(() => __tmp4);
			ReturnStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ReturnStatementSymbol);
			ReturnStatement.IsAbstract = false;
			ReturnStatement.SuperClasses.AddLazy(() => Statement);
			ReturnStatement.Properties.AddLazy(() => ReturnStatement_ReturnedValue);
			ReturnStatement_ReturnedValue.SetTypeLazy(() => Expression);
			ReturnStatement_ReturnedValue.Documentation = null;
			ReturnStatement_ReturnedValue.Name = "ReturnedValue";
			ReturnStatement_ReturnedValue.SymbolProperty = "ReturnedValue";
			ReturnStatement_ReturnedValue.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ReturnStatement_ReturnedValue.SetClassLazy(() => ReturnStatement);
			ReturnStatement_ReturnedValue.DefaultValue = null;
			ReturnStatement_ReturnedValue.IsContainment = true;
			SwitchStatement.Documentation = null;
			SwitchStatement.Name = "SwitchStatement";
			SwitchStatement.SetNamespaceLazy(() => __tmp4);
			SwitchStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.SwitchStatementSymbol);
			SwitchStatement.IsAbstract = false;
			SwitchStatement.SuperClasses.AddLazy(() => Statement);
			SwitchStatement.Properties.AddLazy(() => SwitchStatement_Value);
			SwitchStatement.Properties.AddLazy(() => SwitchStatement_Cases);
			SwitchStatement_Value.SetTypeLazy(() => Expression);
			SwitchStatement_Value.Documentation = null;
			SwitchStatement_Value.Name = "Value";
			SwitchStatement_Value.SymbolProperty = "Value";
			SwitchStatement_Value.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			SwitchStatement_Value.SetClassLazy(() => SwitchStatement);
			SwitchStatement_Value.DefaultValue = null;
			SwitchStatement_Value.IsContainment = true;
			SwitchStatement_Cases.SetTypeLazy(() => __tmp37);
			SwitchStatement_Cases.Documentation = null;
			SwitchStatement_Cases.Name = "Cases";
			SwitchStatement_Cases.SymbolProperty = "Cases";
			SwitchStatement_Cases.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			SwitchStatement_Cases.SetClassLazy(() => SwitchStatement);
			SwitchStatement_Cases.DefaultValue = null;
			SwitchStatement_Cases.IsContainment = true;
			SwitchCase.Documentation = null;
			SwitchCase.Name = "SwitchCase";
			SwitchCase.SetNamespaceLazy(() => __tmp4);
			SwitchCase.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.SwitchCaseSymbol);
			SwitchCase.IsAbstract = false;
			SwitchCase.SuperClasses.AddLazy(() => Element);
			SwitchCase.Properties.AddLazy(() => SwitchCase_Clauses);
			SwitchCase.Properties.AddLazy(() => SwitchCase_Body);
			SwitchCase_Clauses.SetTypeLazy(() => __tmp38);
			SwitchCase_Clauses.Documentation = null;
			SwitchCase_Clauses.Name = "Clauses";
			SwitchCase_Clauses.SymbolProperty = "Clauses";
			SwitchCase_Clauses.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			SwitchCase_Clauses.SetClassLazy(() => SwitchCase);
			SwitchCase_Clauses.DefaultValue = null;
			SwitchCase_Clauses.IsContainment = true;
			SwitchCase_Body.SetTypeLazy(() => Statement);
			SwitchCase_Body.Documentation = null;
			SwitchCase_Body.Name = "Body";
			SwitchCase_Body.SymbolProperty = "Body";
			SwitchCase_Body.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			SwitchCase_Body.SetClassLazy(() => SwitchCase);
			SwitchCase_Body.DefaultValue = null;
			SwitchCase_Body.IsContainment = true;
			CaseClause.Documentation = null;
			CaseClause.Name = "CaseClause";
			CaseClause.SetNamespaceLazy(() => __tmp4);
			CaseClause.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.CaseClauseSymbol);
			CaseClause.IsAbstract = true;
			CaseClause.SuperClasses.AddLazy(() => Element);
			CaseClause.Properties.AddLazy(() => CaseClause_Label);
			CaseClause_Label.SetTypeLazy(() => Label);
			CaseClause_Label.Documentation = null;
			CaseClause_Label.Name = "Label";
			CaseClause_Label.SymbolProperty = "Label";
			CaseClause_Label.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			CaseClause_Label.SetClassLazy(() => CaseClause);
			CaseClause_Label.DefaultValue = null;
			CaseClause_Label.IsContainment = true;
			DefaultValueCaseClause.Documentation = null;
			DefaultValueCaseClause.Name = "DefaultValueCaseClause";
			DefaultValueCaseClause.SetNamespaceLazy(() => __tmp4);
			DefaultValueCaseClause.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.DefaultCaseClauseSymbol);
			DefaultValueCaseClause.IsAbstract = false;
			DefaultValueCaseClause.SuperClasses.AddLazy(() => CaseClause);
			SingleValueCaseClause.Documentation = null;
			SingleValueCaseClause.Name = "SingleValueCaseClause";
			SingleValueCaseClause.SetNamespaceLazy(() => __tmp4);
			SingleValueCaseClause.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.SingleValueCaseClauseSymbol);
			SingleValueCaseClause.IsAbstract = false;
			SingleValueCaseClause.SuperClasses.AddLazy(() => CaseClause);
			SingleValueCaseClause.Properties.AddLazy(() => SingleValueCaseClause_Value);
			SingleValueCaseClause_Value.SetTypeLazy(() => Expression);
			SingleValueCaseClause_Value.Documentation = null;
			SingleValueCaseClause_Value.Name = "Value";
			SingleValueCaseClause_Value.SymbolProperty = "Value";
			SingleValueCaseClause_Value.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			SingleValueCaseClause_Value.SetClassLazy(() => SingleValueCaseClause);
			SingleValueCaseClause_Value.DefaultValue = null;
			SingleValueCaseClause_Value.IsContainment = true;
			TryStatement.Documentation = null;
			TryStatement.Name = "TryStatement";
			TryStatement.SetNamespaceLazy(() => __tmp4);
			TryStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.TryStatementSymbol);
			TryStatement.IsAbstract = false;
			TryStatement.SuperClasses.AddLazy(() => Statement);
			TryStatement.Properties.AddLazy(() => TryStatement_Body);
			TryStatement.Properties.AddLazy(() => TryStatement_Catches);
			TryStatement.Properties.AddLazy(() => TryStatement_Finally);
			TryStatement.Properties.AddLazy(() => TryStatement_ExitLabel);
			TryStatement_Body.SetTypeLazy(() => Statement);
			TryStatement_Body.Documentation = null;
			TryStatement_Body.Name = "Body";
			TryStatement_Body.SymbolProperty = "Body";
			TryStatement_Body.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			TryStatement_Body.SetClassLazy(() => TryStatement);
			TryStatement_Body.DefaultValue = null;
			TryStatement_Body.IsContainment = true;
			TryStatement_Catches.SetTypeLazy(() => __tmp39);
			TryStatement_Catches.Documentation = null;
			TryStatement_Catches.Name = "Catches";
			TryStatement_Catches.SymbolProperty = "Catches";
			TryStatement_Catches.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			TryStatement_Catches.SetClassLazy(() => TryStatement);
			TryStatement_Catches.DefaultValue = null;
			TryStatement_Catches.IsContainment = true;
			TryStatement_Finally.SetTypeLazy(() => Statement);
			TryStatement_Finally.Documentation = null;
			TryStatement_Finally.Name = "Finally";
			TryStatement_Finally.SymbolProperty = "Finally";
			TryStatement_Finally.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			TryStatement_Finally.SetClassLazy(() => TryStatement);
			TryStatement_Finally.DefaultValue = null;
			TryStatement_Finally.IsContainment = true;
			TryStatement_ExitLabel.SetTypeLazy(() => Label);
			TryStatement_ExitLabel.Documentation = null;
			TryStatement_ExitLabel.Name = "ExitLabel";
			TryStatement_ExitLabel.SymbolProperty = "ExitLabel";
			TryStatement_ExitLabel.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			TryStatement_ExitLabel.SetClassLazy(() => TryStatement);
			TryStatement_ExitLabel.DefaultValue = null;
			TryStatement_ExitLabel.IsContainment = true;
			CatchClause.Documentation = null;
			CatchClause.Name = "CatchClause";
			CatchClause.SetNamespaceLazy(() => __tmp4);
			CatchClause.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.CatchClauseSymbol);
			CatchClause.IsAbstract = false;
			CatchClause.SuperClasses.AddLazy(() => Element);
			CatchClause.Properties.AddLazy(() => CatchClause_ExceptionDeclarationOrExpression);
			CatchClause.Properties.AddLazy(() => CatchClause_Filter);
			CatchClause.Properties.AddLazy(() => CatchClause_Handler);
			CatchClause_ExceptionDeclarationOrExpression.SetTypeLazy(() => Expression);
			CatchClause_ExceptionDeclarationOrExpression.Documentation = null;
			CatchClause_ExceptionDeclarationOrExpression.Name = "ExceptionDeclarationOrExpression";
			CatchClause_ExceptionDeclarationOrExpression.SymbolProperty = "ExceptionDeclarationOrExpression";
			CatchClause_ExceptionDeclarationOrExpression.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			CatchClause_ExceptionDeclarationOrExpression.SetClassLazy(() => CatchClause);
			CatchClause_ExceptionDeclarationOrExpression.DefaultValue = null;
			CatchClause_ExceptionDeclarationOrExpression.IsContainment = true;
			CatchClause_Filter.SetTypeLazy(() => Expression);
			CatchClause_Filter.Documentation = null;
			CatchClause_Filter.Name = "Filter";
			CatchClause_Filter.SymbolProperty = "Filter";
			CatchClause_Filter.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			CatchClause_Filter.SetClassLazy(() => CatchClause);
			CatchClause_Filter.DefaultValue = null;
			CatchClause_Filter.IsContainment = true;
			CatchClause_Handler.SetTypeLazy(() => Statement);
			CatchClause_Handler.Documentation = null;
			CatchClause_Handler.Name = "Handler";
			CatchClause_Handler.SymbolProperty = "Handler";
			CatchClause_Handler.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			CatchClause_Handler.SetClassLazy(() => CatchClause);
			CatchClause_Handler.DefaultValue = null;
			CatchClause_Handler.IsContainment = true;
			UsingStatement.Documentation = null;
			UsingStatement.Name = "UsingStatement";
			UsingStatement.SetNamespaceLazy(() => __tmp4);
			UsingStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.UsingStatementSymbol);
			UsingStatement.IsAbstract = false;
			UsingStatement.SuperClasses.AddLazy(() => Statement);
			UsingStatement.Properties.AddLazy(() => UsingStatement_Resources);
			UsingStatement.Properties.AddLazy(() => UsingStatement_Body);
			UsingStatement_Resources.SetTypeLazy(() => Expression);
			UsingStatement_Resources.Documentation = null;
			UsingStatement_Resources.Name = "Resources";
			UsingStatement_Resources.SymbolProperty = "Resources";
			UsingStatement_Resources.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			UsingStatement_Resources.SetClassLazy(() => UsingStatement);
			UsingStatement_Resources.DefaultValue = null;
			UsingStatement_Resources.IsContainment = true;
			UsingStatement_Body.SetTypeLazy(() => Statement);
			UsingStatement_Body.Documentation = null;
			UsingStatement_Body.Name = "Body";
			UsingStatement_Body.SymbolProperty = "Body";
			UsingStatement_Body.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			UsingStatement_Body.SetClassLazy(() => UsingStatement);
			UsingStatement_Body.DefaultValue = null;
			UsingStatement_Body.IsContainment = true;
			WhileLoopStatement.Documentation = null;
			WhileLoopStatement.Name = "WhileLoopStatement";
			WhileLoopStatement.SetNamespaceLazy(() => __tmp4);
			WhileLoopStatement.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.WhileLoopStatementSymbol);
			WhileLoopStatement.IsAbstract = false;
			WhileLoopStatement.SuperClasses.AddLazy(() => Statement);
			WhileLoopStatement.Properties.AddLazy(() => WhileLoopStatement_Condition);
			WhileLoopStatement.Properties.AddLazy(() => WhileLoopStatement_ConditionIsTop);
			WhileLoopStatement.Properties.AddLazy(() => WhileLoopStatement_ConditionIsUntil);
			WhileLoopStatement_Condition.SetTypeLazy(() => Expression);
			WhileLoopStatement_Condition.Documentation = null;
			WhileLoopStatement_Condition.Name = "Condition";
			WhileLoopStatement_Condition.SymbolProperty = "Condition";
			WhileLoopStatement_Condition.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			WhileLoopStatement_Condition.SetClassLazy(() => WhileLoopStatement);
			WhileLoopStatement_Condition.DefaultValue = null;
			WhileLoopStatement_Condition.IsContainment = true;
			WhileLoopStatement_ConditionIsTop.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			WhileLoopStatement_ConditionIsTop.Documentation = null;
			WhileLoopStatement_ConditionIsTop.Name = "ConditionIsTop";
			WhileLoopStatement_ConditionIsTop.SymbolProperty = "ConditionIsTop";
			WhileLoopStatement_ConditionIsTop.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			WhileLoopStatement_ConditionIsTop.SetClassLazy(() => WhileLoopStatement);
			WhileLoopStatement_ConditionIsTop.DefaultValue = null;
			WhileLoopStatement_ConditionIsTop.IsContainment = false;
			WhileLoopStatement_ConditionIsUntil.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			WhileLoopStatement_ConditionIsUntil.Documentation = null;
			WhileLoopStatement_ConditionIsUntil.Name = "ConditionIsUntil";
			WhileLoopStatement_ConditionIsUntil.SymbolProperty = "ConditionIsUntil";
			WhileLoopStatement_ConditionIsUntil.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			WhileLoopStatement_ConditionIsUntil.SetClassLazy(() => WhileLoopStatement);
			WhileLoopStatement_ConditionIsUntil.DefaultValue = null;
			WhileLoopStatement_ConditionIsUntil.IsContainment = false;
			Expression.Documentation = null;
			Expression.Name = "Expression";
			Expression.SetNamespaceLazy(() => __tmp4);
			Expression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ExpressionSymbol);
			Expression.IsAbstract = true;
			Expression.SuperClasses.AddLazy(() => Element);
			Expression.Properties.AddLazy(() => Expression_Type);
			Expression_Type.SetTypeLazy(() => DataType);
			Expression_Type.Documentation = null;
			Expression_Type.Name = "Type";
			Expression_Type.SymbolProperty = null;
			Expression_Type.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Expression_Type.SetClassLazy(() => Expression);
			Expression_Type.DefaultValue = null;
			Expression_Type.IsContainment = false;
			Argument.Documentation = null;
			Argument.Name = "Argument";
			Argument.SetNamespaceLazy(() => __tmp4);
			Argument.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ArgumentSymbol);
			Argument.IsAbstract = false;
			Argument.SuperClasses.AddLazy(() => Expression);
			Argument.SuperClasses.AddLazy(() => NamedElement);
			Argument.Properties.AddLazy(() => Argument_Value);
			Argument_Value.SetTypeLazy(() => Expression);
			Argument_Value.Documentation = null;
			Argument_Value.Name = "Value";
			Argument_Value.SymbolProperty = "Value";
			Argument_Value.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			Argument_Value.SetClassLazy(() => Argument);
			Argument_Value.DefaultValue = null;
			Argument_Value.IsContainment = true;
			AssignmentExpression.Documentation = null;
			AssignmentExpression.Name = "AssignmentExpression";
			AssignmentExpression.SetNamespaceLazy(() => __tmp4);
			AssignmentExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.AssignmentExpressionSymbol);
			AssignmentExpression.IsAbstract = false;
			AssignmentExpression.SuperClasses.AddLazy(() => Expression);
			AssignmentExpression.Properties.AddLazy(() => AssignmentExpression_Target);
			AssignmentExpression.Properties.AddLazy(() => AssignmentExpression_Value);
			AssignmentExpression_Target.SetTypeLazy(() => Expression);
			AssignmentExpression_Target.Documentation = null;
			AssignmentExpression_Target.Name = "Target";
			AssignmentExpression_Target.SymbolProperty = "Target";
			AssignmentExpression_Target.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			AssignmentExpression_Target.SetClassLazy(() => AssignmentExpression);
			AssignmentExpression_Target.DefaultValue = null;
			AssignmentExpression_Target.IsContainment = true;
			AssignmentExpression_Value.SetTypeLazy(() => Expression);
			AssignmentExpression_Value.Documentation = null;
			AssignmentExpression_Value.Name = "Value";
			AssignmentExpression_Value.SymbolProperty = "Value";
			AssignmentExpression_Value.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			AssignmentExpression_Value.SetClassLazy(() => AssignmentExpression);
			AssignmentExpression_Value.DefaultValue = null;
			AssignmentExpression_Value.IsContainment = true;
			AwaitExpression.Documentation = null;
			AwaitExpression.Name = "AwaitExpression";
			AwaitExpression.SetNamespaceLazy(() => __tmp4);
			AwaitExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.AwaitExpressionSymbol);
			AwaitExpression.IsAbstract = false;
			AwaitExpression.SuperClasses.AddLazy(() => Expression);
			AwaitExpression.Properties.AddLazy(() => AwaitExpression_Operation);
			AwaitExpression_Operation.SetTypeLazy(() => Expression);
			AwaitExpression_Operation.Documentation = null;
			AwaitExpression_Operation.Name = "Operation";
			AwaitExpression_Operation.SymbolProperty = "Operation";
			AwaitExpression_Operation.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			AwaitExpression_Operation.SetClassLazy(() => AwaitExpression);
			AwaitExpression_Operation.DefaultValue = null;
			AwaitExpression_Operation.IsContainment = true;
			BinaryExpression.Documentation = null;
			BinaryExpression.Name = "BinaryExpression";
			BinaryExpression.SetNamespaceLazy(() => __tmp4);
			BinaryExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.BinaryExpressionSymbol);
			BinaryExpression.IsAbstract = false;
			BinaryExpression.SuperClasses.AddLazy(() => Expression);
			BinaryExpression.Properties.AddLazy(() => BinaryExpression_OperatorKind);
			BinaryExpression.Properties.AddLazy(() => BinaryExpression_LeftOperand);
			BinaryExpression.Properties.AddLazy(() => BinaryExpression_RightOperand);
			BinaryExpression.Properties.AddLazy(() => BinaryExpression_IsChecked);
			BinaryExpression.Properties.AddLazy(() => BinaryExpression_OperatorMethod);
			BinaryExpression_OperatorKind.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Object.ToMutable());
			BinaryExpression_OperatorKind.Documentation = null;
			BinaryExpression_OperatorKind.Name = "OperatorKind";
			BinaryExpression_OperatorKind.SymbolProperty = "OperatorKind";
			BinaryExpression_OperatorKind.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			BinaryExpression_OperatorKind.SetClassLazy(() => BinaryExpression);
			BinaryExpression_OperatorKind.DefaultValue = null;
			BinaryExpression_OperatorKind.IsContainment = false;
			BinaryExpression_LeftOperand.SetTypeLazy(() => Expression);
			BinaryExpression_LeftOperand.Documentation = null;
			BinaryExpression_LeftOperand.Name = "LeftOperand";
			BinaryExpression_LeftOperand.SymbolProperty = "LeftOperand";
			BinaryExpression_LeftOperand.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			BinaryExpression_LeftOperand.SetClassLazy(() => BinaryExpression);
			BinaryExpression_LeftOperand.DefaultValue = null;
			BinaryExpression_LeftOperand.IsContainment = true;
			BinaryExpression_RightOperand.SetTypeLazy(() => Expression);
			BinaryExpression_RightOperand.Documentation = null;
			BinaryExpression_RightOperand.Name = "RightOperand";
			BinaryExpression_RightOperand.SymbolProperty = "RightOperand";
			BinaryExpression_RightOperand.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			BinaryExpression_RightOperand.SetClassLazy(() => BinaryExpression);
			BinaryExpression_RightOperand.DefaultValue = null;
			BinaryExpression_RightOperand.IsContainment = true;
			BinaryExpression_IsChecked.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			BinaryExpression_IsChecked.Documentation = null;
			BinaryExpression_IsChecked.Name = "IsChecked";
			BinaryExpression_IsChecked.SymbolProperty = "IsChecked";
			BinaryExpression_IsChecked.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			BinaryExpression_IsChecked.SetClassLazy(() => BinaryExpression);
			BinaryExpression_IsChecked.DefaultValue = null;
			BinaryExpression_IsChecked.IsContainment = false;
			BinaryExpression_OperatorMethod.SetTypeLazy(() => BinaryOperator);
			BinaryExpression_OperatorMethod.Documentation = null;
			BinaryExpression_OperatorMethod.Name = "OperatorMethod";
			BinaryExpression_OperatorMethod.SymbolProperty = "OperatorMethod";
			BinaryExpression_OperatorMethod.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			BinaryExpression_OperatorMethod.SetClassLazy(() => BinaryExpression);
			BinaryExpression_OperatorMethod.DefaultValue = null;
			BinaryExpression_OperatorMethod.IsContainment = false;
			CoalesceExpression.Documentation = null;
			CoalesceExpression.Name = "CoalesceExpression";
			CoalesceExpression.SetNamespaceLazy(() => __tmp4);
			CoalesceExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.CoalesceExpressionSymbol);
			CoalesceExpression.IsAbstract = false;
			CoalesceExpression.SuperClasses.AddLazy(() => Expression);
			CoalesceExpression.Properties.AddLazy(() => CoalesceExpression_Value);
			CoalesceExpression.Properties.AddLazy(() => CoalesceExpression_WhenNull);
			CoalesceExpression_Value.SetTypeLazy(() => Expression);
			CoalesceExpression_Value.Documentation = null;
			CoalesceExpression_Value.Name = "Value";
			CoalesceExpression_Value.SymbolProperty = "Value";
			CoalesceExpression_Value.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			CoalesceExpression_Value.SetClassLazy(() => CoalesceExpression);
			CoalesceExpression_Value.DefaultValue = null;
			CoalesceExpression_Value.IsContainment = true;
			CoalesceExpression_WhenNull.SetTypeLazy(() => Expression);
			CoalesceExpression_WhenNull.Documentation = null;
			CoalesceExpression_WhenNull.Name = "WhenNull";
			CoalesceExpression_WhenNull.SymbolProperty = "WhenNull";
			CoalesceExpression_WhenNull.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			CoalesceExpression_WhenNull.SetClassLazy(() => CoalesceExpression);
			CoalesceExpression_WhenNull.DefaultValue = null;
			CoalesceExpression_WhenNull.IsContainment = true;
			CompoundAssignmentExpression.Documentation = null;
			CompoundAssignmentExpression.Name = "CompoundAssignmentExpression";
			CompoundAssignmentExpression.SetNamespaceLazy(() => __tmp4);
			CompoundAssignmentExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.CompoundAssignmentExpressionSymbol);
			CompoundAssignmentExpression.IsAbstract = false;
			CompoundAssignmentExpression.SuperClasses.AddLazy(() => AssignmentExpression);
			CompoundAssignmentExpression.Properties.AddLazy(() => CompoundAssignmentExpression_OperatorKind);
			CompoundAssignmentExpression.Properties.AddLazy(() => CompoundAssignmentExpression_IsChecked);
			CompoundAssignmentExpression_OperatorKind.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Object.ToMutable());
			CompoundAssignmentExpression_OperatorKind.Documentation = null;
			CompoundAssignmentExpression_OperatorKind.Name = "OperatorKind";
			CompoundAssignmentExpression_OperatorKind.SymbolProperty = "OperatorKind";
			CompoundAssignmentExpression_OperatorKind.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			CompoundAssignmentExpression_OperatorKind.SetClassLazy(() => CompoundAssignmentExpression);
			CompoundAssignmentExpression_OperatorKind.DefaultValue = null;
			CompoundAssignmentExpression_OperatorKind.IsContainment = false;
			CompoundAssignmentExpression_IsChecked.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			CompoundAssignmentExpression_IsChecked.Documentation = null;
			CompoundAssignmentExpression_IsChecked.Name = "IsChecked";
			CompoundAssignmentExpression_IsChecked.SymbolProperty = "IsChecked";
			CompoundAssignmentExpression_IsChecked.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			CompoundAssignmentExpression_IsChecked.SetClassLazy(() => CompoundAssignmentExpression);
			CompoundAssignmentExpression_IsChecked.DefaultValue = null;
			CompoundAssignmentExpression_IsChecked.IsContainment = false;
			ConditionalExpression.Documentation = null;
			ConditionalExpression.Name = "ConditionalExpression";
			ConditionalExpression.SetNamespaceLazy(() => __tmp4);
			ConditionalExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ConditionalExpressionSymbol);
			ConditionalExpression.IsAbstract = false;
			ConditionalExpression.SuperClasses.AddLazy(() => Expression);
			ConditionalExpression.Properties.AddLazy(() => ConditionalExpression_Condition);
			ConditionalExpression.Properties.AddLazy(() => ConditionalExpression_WhenTrue);
			ConditionalExpression.Properties.AddLazy(() => ConditionalExpression_WhenFalse);
			ConditionalExpression_Condition.SetTypeLazy(() => Expression);
			ConditionalExpression_Condition.Documentation = null;
			ConditionalExpression_Condition.Name = "Condition";
			ConditionalExpression_Condition.SymbolProperty = "Condition";
			ConditionalExpression_Condition.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ConditionalExpression_Condition.SetClassLazy(() => ConditionalExpression);
			ConditionalExpression_Condition.DefaultValue = null;
			ConditionalExpression_Condition.IsContainment = true;
			ConditionalExpression_WhenTrue.SetTypeLazy(() => Expression);
			ConditionalExpression_WhenTrue.Documentation = null;
			ConditionalExpression_WhenTrue.Name = "WhenTrue";
			ConditionalExpression_WhenTrue.SymbolProperty = "WhenTrue";
			ConditionalExpression_WhenTrue.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ConditionalExpression_WhenTrue.SetClassLazy(() => ConditionalExpression);
			ConditionalExpression_WhenTrue.DefaultValue = null;
			ConditionalExpression_WhenTrue.IsContainment = true;
			ConditionalExpression_WhenFalse.SetTypeLazy(() => Expression);
			ConditionalExpression_WhenFalse.Documentation = null;
			ConditionalExpression_WhenFalse.Name = "WhenFalse";
			ConditionalExpression_WhenFalse.SymbolProperty = "WhenFalse";
			ConditionalExpression_WhenFalse.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ConditionalExpression_WhenFalse.SetClassLazy(() => ConditionalExpression);
			ConditionalExpression_WhenFalse.DefaultValue = null;
			ConditionalExpression_WhenFalse.IsContainment = true;
			ConversionExpression.Documentation = null;
			ConversionExpression.Name = "ConversionExpression";
			ConversionExpression.SetNamespaceLazy(() => __tmp4);
			ConversionExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ConversionExpressionSymbol);
			ConversionExpression.IsAbstract = false;
			ConversionExpression.SuperClasses.AddLazy(() => Expression);
			ConversionExpression.Properties.AddLazy(() => ConversionExpression_Operand);
			ConversionExpression.Properties.AddLazy(() => ConversionExpression_TargetType);
			ConversionExpression.Properties.AddLazy(() => ConversionExpression_IsTryCast);
			ConversionExpression.Properties.AddLazy(() => ConversionExpression_IsChecked);
			ConversionExpression_Operand.SetTypeLazy(() => Expression);
			ConversionExpression_Operand.Documentation = null;
			ConversionExpression_Operand.Name = "Operand";
			ConversionExpression_Operand.SymbolProperty = "Operand";
			ConversionExpression_Operand.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ConversionExpression_Operand.SetClassLazy(() => ConversionExpression);
			ConversionExpression_Operand.DefaultValue = null;
			ConversionExpression_Operand.IsContainment = true;
			ConversionExpression_TargetType.SetTypeLazy(() => DataType);
			ConversionExpression_TargetType.Documentation = null;
			ConversionExpression_TargetType.Name = "TargetType";
			ConversionExpression_TargetType.SymbolProperty = "TargetType";
			ConversionExpression_TargetType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ConversionExpression_TargetType.SetClassLazy(() => ConversionExpression);
			ConversionExpression_TargetType.DefaultValue = null;
			ConversionExpression_TargetType.IsContainment = false;
			ConversionExpression_IsTryCast.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			ConversionExpression_IsTryCast.Documentation = null;
			ConversionExpression_IsTryCast.Name = "IsTryCast";
			ConversionExpression_IsTryCast.SymbolProperty = "IsTryCast";
			ConversionExpression_IsTryCast.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ConversionExpression_IsTryCast.SetClassLazy(() => ConversionExpression);
			ConversionExpression_IsTryCast.DefaultValue = null;
			ConversionExpression_IsTryCast.IsContainment = false;
			ConversionExpression_IsChecked.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			ConversionExpression_IsChecked.Documentation = null;
			ConversionExpression_IsChecked.Name = "IsChecked";
			ConversionExpression_IsChecked.SymbolProperty = "IsChecked";
			ConversionExpression_IsChecked.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ConversionExpression_IsChecked.SetClassLazy(() => ConversionExpression);
			ConversionExpression_IsChecked.DefaultValue = null;
			ConversionExpression_IsChecked.IsContainment = false;
			DefaultValueExpression.Documentation = null;
			DefaultValueExpression.Name = "DefaultValueExpression";
			DefaultValueExpression.SetNamespaceLazy(() => __tmp4);
			DefaultValueExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.DefaultValueExpressionSymbol);
			DefaultValueExpression.IsAbstract = false;
			DefaultValueExpression.SuperClasses.AddLazy(() => Expression);
			DiscardExpression.Documentation = null;
			DiscardExpression.Name = "DiscardExpression";
			DiscardExpression.SetNamespaceLazy(() => __tmp4);
			DiscardExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.DiscardExpressionSymbol);
			DiscardExpression.IsAbstract = false;
			DiscardExpression.SuperClasses.AddLazy(() => Expression);
			DynamicExpression.Documentation = null;
			DynamicExpression.Name = "DynamicExpression";
			DynamicExpression.SetNamespaceLazy(() => __tmp4);
			DynamicExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.DynamicExpressionSymbol);
			DynamicExpression.IsAbstract = false;
			DynamicExpression.SuperClasses.AddLazy(() => Expression);
			IncrementOrDecrementExpression.Documentation = null;
			IncrementOrDecrementExpression.Name = "IncrementOrDecrementExpression";
			IncrementOrDecrementExpression.SetNamespaceLazy(() => __tmp4);
			IncrementOrDecrementExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.IncrementOrDecrementExpressionSymbol);
			IncrementOrDecrementExpression.IsAbstract = false;
			IncrementOrDecrementExpression.SuperClasses.AddLazy(() => Expression);
			IncrementOrDecrementExpression.Properties.AddLazy(() => IncrementOrDecrementExpression_Target);
			IncrementOrDecrementExpression.Properties.AddLazy(() => IncrementOrDecrementExpression_IsPostfix);
			IncrementOrDecrementExpression.Properties.AddLazy(() => IncrementOrDecrementExpression_IsChecked);
			IncrementOrDecrementExpression_Target.SetTypeLazy(() => Expression);
			IncrementOrDecrementExpression_Target.Documentation = null;
			IncrementOrDecrementExpression_Target.Name = "Target";
			IncrementOrDecrementExpression_Target.SymbolProperty = "Target";
			IncrementOrDecrementExpression_Target.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IncrementOrDecrementExpression_Target.SetClassLazy(() => IncrementOrDecrementExpression);
			IncrementOrDecrementExpression_Target.DefaultValue = null;
			IncrementOrDecrementExpression_Target.IsContainment = true;
			IncrementOrDecrementExpression_IsPostfix.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			IncrementOrDecrementExpression_IsPostfix.Documentation = null;
			IncrementOrDecrementExpression_IsPostfix.Name = "IsPostfix";
			IncrementOrDecrementExpression_IsPostfix.SymbolProperty = "IsPostfix";
			IncrementOrDecrementExpression_IsPostfix.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IncrementOrDecrementExpression_IsPostfix.SetClassLazy(() => IncrementOrDecrementExpression);
			IncrementOrDecrementExpression_IsPostfix.DefaultValue = null;
			IncrementOrDecrementExpression_IsPostfix.IsContainment = false;
			IncrementOrDecrementExpression_IsChecked.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			IncrementOrDecrementExpression_IsChecked.Documentation = null;
			IncrementOrDecrementExpression_IsChecked.Name = "IsChecked";
			IncrementOrDecrementExpression_IsChecked.SymbolProperty = "IsChecked";
			IncrementOrDecrementExpression_IsChecked.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IncrementOrDecrementExpression_IsChecked.SetClassLazy(() => IncrementOrDecrementExpression);
			IncrementOrDecrementExpression_IsChecked.DefaultValue = null;
			IncrementOrDecrementExpression_IsChecked.IsContainment = false;
			IndexerAccessExpression.Documentation = null;
			IndexerAccessExpression.Name = "IndexerAccessExpression";
			IndexerAccessExpression.SetNamespaceLazy(() => __tmp4);
			IndexerAccessExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.IndexerAccessExpressionSymbol);
			IndexerAccessExpression.IsAbstract = false;
			IndexerAccessExpression.SuperClasses.AddLazy(() => Expression);
			IndexerAccessExpression.Properties.AddLazy(() => IndexerAccessExpression_Receiver);
			IndexerAccessExpression.Properties.AddLazy(() => IndexerAccessExpression_IsNullConditional);
			IndexerAccessExpression.Properties.AddLazy(() => IndexerAccessExpression_Arguments);
			IndexerAccessExpression.Properties.AddLazy(() => IndexerAccessExpression_Target);
			IndexerAccessExpression_Receiver.SetTypeLazy(() => Expression);
			IndexerAccessExpression_Receiver.Documentation = null;
			IndexerAccessExpression_Receiver.Name = "Receiver";
			IndexerAccessExpression_Receiver.SymbolProperty = "Receiver";
			IndexerAccessExpression_Receiver.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IndexerAccessExpression_Receiver.SetClassLazy(() => IndexerAccessExpression);
			IndexerAccessExpression_Receiver.DefaultValue = null;
			IndexerAccessExpression_Receiver.IsContainment = true;
			IndexerAccessExpression_IsNullConditional.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			IndexerAccessExpression_IsNullConditional.Documentation = null;
			IndexerAccessExpression_IsNullConditional.Name = "IsNullConditional";
			IndexerAccessExpression_IsNullConditional.SymbolProperty = "IsNullConditional";
			IndexerAccessExpression_IsNullConditional.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IndexerAccessExpression_IsNullConditional.SetClassLazy(() => IndexerAccessExpression);
			IndexerAccessExpression_IsNullConditional.DefaultValue = null;
			IndexerAccessExpression_IsNullConditional.IsContainment = false;
			IndexerAccessExpression_Arguments.SetTypeLazy(() => __tmp40);
			IndexerAccessExpression_Arguments.Documentation = null;
			IndexerAccessExpression_Arguments.Name = "Arguments";
			IndexerAccessExpression_Arguments.SymbolProperty = "Arguments";
			IndexerAccessExpression_Arguments.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IndexerAccessExpression_Arguments.SetClassLazy(() => IndexerAccessExpression);
			IndexerAccessExpression_Arguments.DefaultValue = null;
			IndexerAccessExpression_Arguments.IsContainment = true;
			IndexerAccessExpression_Target.SetTypeLazy(() => Indexer);
			IndexerAccessExpression_Target.Documentation = null;
			IndexerAccessExpression_Target.Name = "Target";
			IndexerAccessExpression_Target.SymbolProperty = "Target";
			IndexerAccessExpression_Target.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IndexerAccessExpression_Target.SetClassLazy(() => IndexerAccessExpression);
			IndexerAccessExpression_Target.DefaultValue = null;
			IndexerAccessExpression_Target.IsContainment = false;
			InstanceReferenceExpression.Documentation = null;
			InstanceReferenceExpression.Name = "InstanceReferenceExpression";
			InstanceReferenceExpression.SetNamespaceLazy(() => __tmp4);
			InstanceReferenceExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.InstanceReferenceExpressionSymbol);
			InstanceReferenceExpression.IsAbstract = false;
			InstanceReferenceExpression.SuperClasses.AddLazy(() => Expression);
			InstanceReferenceExpression.Properties.AddLazy(() => InstanceReferenceExpression_AccessThroughBaseType);
			InstanceReferenceExpression_AccessThroughBaseType.SetTypeLazy(() => NamedType);
			InstanceReferenceExpression_AccessThroughBaseType.Documentation = null;
			InstanceReferenceExpression_AccessThroughBaseType.Name = "AccessThroughBaseType";
			InstanceReferenceExpression_AccessThroughBaseType.SymbolProperty = "AccessThroughBaseType";
			InstanceReferenceExpression_AccessThroughBaseType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			InstanceReferenceExpression_AccessThroughBaseType.SetClassLazy(() => InstanceReferenceExpression);
			InstanceReferenceExpression_AccessThroughBaseType.DefaultValue = null;
			InstanceReferenceExpression_AccessThroughBaseType.IsContainment = false;
			InvocationExpression.Documentation = null;
			InvocationExpression.Name = "InvocationExpression";
			InvocationExpression.SetNamespaceLazy(() => __tmp4);
			InvocationExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.InvocationExpressionSymbol);
			InvocationExpression.IsAbstract = false;
			InvocationExpression.SuperClasses.AddLazy(() => Expression);
			InvocationExpression.Properties.AddLazy(() => InvocationExpression_Receiver);
			InvocationExpression.Properties.AddLazy(() => InvocationExpression_Arguments);
			InvocationExpression_Receiver.SetTypeLazy(() => Expression);
			InvocationExpression_Receiver.Documentation = null;
			InvocationExpression_Receiver.Name = "Receiver";
			InvocationExpression_Receiver.SymbolProperty = "Receiver";
			InvocationExpression_Receiver.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			InvocationExpression_Receiver.SetClassLazy(() => InvocationExpression);
			InvocationExpression_Receiver.DefaultValue = null;
			InvocationExpression_Receiver.IsContainment = true;
			InvocationExpression_Arguments.SetTypeLazy(() => __tmp41);
			InvocationExpression_Arguments.Documentation = null;
			InvocationExpression_Arguments.Name = "Arguments";
			InvocationExpression_Arguments.SymbolProperty = "Arguments";
			InvocationExpression_Arguments.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			InvocationExpression_Arguments.SetClassLazy(() => InvocationExpression);
			InvocationExpression_Arguments.DefaultValue = null;
			InvocationExpression_Arguments.IsContainment = true;
			IsTypeExpression.Documentation = null;
			IsTypeExpression.Name = "IsTypeExpression";
			IsTypeExpression.SetNamespaceLazy(() => __tmp4);
			IsTypeExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.IsTypeExpressionSymbol);
			IsTypeExpression.IsAbstract = false;
			IsTypeExpression.SuperClasses.AddLazy(() => Expression);
			IsTypeExpression.Properties.AddLazy(() => IsTypeExpression_ValueOperand);
			IsTypeExpression.Properties.AddLazy(() => IsTypeExpression_TypeOperand);
			IsTypeExpression.Properties.AddLazy(() => IsTypeExpression_IsNegated);
			IsTypeExpression_ValueOperand.SetTypeLazy(() => Expression);
			IsTypeExpression_ValueOperand.Documentation = null;
			IsTypeExpression_ValueOperand.Name = "ValueOperand";
			IsTypeExpression_ValueOperand.SymbolProperty = "ValueOperand";
			IsTypeExpression_ValueOperand.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IsTypeExpression_ValueOperand.SetClassLazy(() => IsTypeExpression);
			IsTypeExpression_ValueOperand.DefaultValue = null;
			IsTypeExpression_ValueOperand.IsContainment = true;
			IsTypeExpression_TypeOperand.SetTypeLazy(() => DataType);
			IsTypeExpression_TypeOperand.Documentation = null;
			IsTypeExpression_TypeOperand.Name = "TypeOperand";
			IsTypeExpression_TypeOperand.SymbolProperty = "TypeOperand";
			IsTypeExpression_TypeOperand.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IsTypeExpression_TypeOperand.SetClassLazy(() => IsTypeExpression);
			IsTypeExpression_TypeOperand.DefaultValue = null;
			IsTypeExpression_TypeOperand.IsContainment = false;
			IsTypeExpression_IsNegated.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			IsTypeExpression_IsNegated.Documentation = null;
			IsTypeExpression_IsNegated.Name = "IsNegated";
			IsTypeExpression_IsNegated.SymbolProperty = "IsNegated";
			IsTypeExpression_IsNegated.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			IsTypeExpression_IsNegated.SetClassLazy(() => IsTypeExpression);
			IsTypeExpression_IsNegated.DefaultValue = null;
			IsTypeExpression_IsNegated.IsContainment = false;
			LambdaExpression.Documentation = null;
			LambdaExpression.Name = "LambdaExpression";
			LambdaExpression.SetNamespaceLazy(() => __tmp4);
			LambdaExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.LambdaExpressionSymbol);
			LambdaExpression.IsAbstract = false;
			LambdaExpression.SuperClasses.AddLazy(() => Expression);
			LambdaExpression.Properties.AddLazy(() => LambdaExpression_ReturnType);
			LambdaExpression.Properties.AddLazy(() => LambdaExpression_Parameters);
			LambdaExpression.Properties.AddLazy(() => LambdaExpression_Body);
			LambdaExpression_ReturnType.SetTypeLazy(() => DataType);
			LambdaExpression_ReturnType.Documentation = null;
			LambdaExpression_ReturnType.Name = "ReturnType";
			LambdaExpression_ReturnType.SymbolProperty = "ReturnType";
			LambdaExpression_ReturnType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			LambdaExpression_ReturnType.SetClassLazy(() => LambdaExpression);
			LambdaExpression_ReturnType.DefaultValue = null;
			LambdaExpression_ReturnType.IsContainment = false;
			LambdaExpression_Parameters.SetTypeLazy(() => __tmp42);
			LambdaExpression_Parameters.Documentation = null;
			LambdaExpression_Parameters.Name = "Parameters";
			LambdaExpression_Parameters.SymbolProperty = "Parameters";
			LambdaExpression_Parameters.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			LambdaExpression_Parameters.SetClassLazy(() => LambdaExpression);
			LambdaExpression_Parameters.DefaultValue = null;
			LambdaExpression_Parameters.IsContainment = true;
			LambdaExpression_Body.SetTypeLazy(() => Statement);
			LambdaExpression_Body.Documentation = null;
			LambdaExpression_Body.Name = "Body";
			LambdaExpression_Body.SymbolProperty = "Body";
			LambdaExpression_Body.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			LambdaExpression_Body.SetClassLazy(() => LambdaExpression);
			LambdaExpression_Body.DefaultValue = null;
			LambdaExpression_Body.IsContainment = true;
			LiteralExpression.Documentation = null;
			LiteralExpression.Name = "LiteralExpression";
			LiteralExpression.SetNamespaceLazy(() => __tmp4);
			LiteralExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.LiteralExpressionSymbol);
			LiteralExpression.IsAbstract = false;
			LiteralExpression.SuperClasses.AddLazy(() => Expression);
			LiteralExpression.Properties.AddLazy(() => LiteralExpression_Value);
			LiteralExpression.Properties.AddLazy(() => LiteralExpression_Type);
			LiteralExpression_Value.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Object.ToMutable());
			LiteralExpression_Value.Documentation = null;
			LiteralExpression_Value.Name = "Value";
			LiteralExpression_Value.SymbolProperty = "Value";
			LiteralExpression_Value.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			LiteralExpression_Value.SetClassLazy(() => LiteralExpression);
			LiteralExpression_Value.DefaultValue = null;
			LiteralExpression_Value.IsContainment = false;
			LiteralExpression_Type.SetTypeLazy(() => DataType);
			LiteralExpression_Type.Documentation = null;
			LiteralExpression_Type.Name = "Type";
			LiteralExpression_Type.SymbolProperty = "Type";
			LiteralExpression_Type.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			LiteralExpression_Type.SetClassLazy(() => LiteralExpression);
			LiteralExpression_Type.DefaultValue = null;
			LiteralExpression_Type.IsContainment = false;
			NameOfExpression.Documentation = null;
			NameOfExpression.Name = "NameOfExpression";
			NameOfExpression.SetNamespaceLazy(() => __tmp4);
			NameOfExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.NameOfExpressionSymbol);
			NameOfExpression.IsAbstract = false;
			NameOfExpression.SuperClasses.AddLazy(() => Expression);
			NameOfExpression.Properties.AddLazy(() => NameOfExpression_Argument);
			NameOfExpression_Argument.SetTypeLazy(() => Expression);
			NameOfExpression_Argument.Documentation = null;
			NameOfExpression_Argument.Name = "Argument";
			NameOfExpression_Argument.SymbolProperty = "Argument";
			NameOfExpression_Argument.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			NameOfExpression_Argument.SetClassLazy(() => NameOfExpression);
			NameOfExpression_Argument.DefaultValue = null;
			NameOfExpression_Argument.IsContainment = true;
			ObjectCreationExpression.Documentation = null;
			ObjectCreationExpression.Name = "ObjectCreationExpression";
			ObjectCreationExpression.SetNamespaceLazy(() => __tmp4);
			ObjectCreationExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ObjectCreationExpressionSymbol);
			ObjectCreationExpression.IsAbstract = false;
			ObjectCreationExpression.SuperClasses.AddLazy(() => Expression);
			ObjectCreationExpression.Properties.AddLazy(() => ObjectCreationExpression_ObjectType);
			ObjectCreationExpression.Properties.AddLazy(() => ObjectCreationExpression_Arguments);
			ObjectCreationExpression.Properties.AddLazy(() => ObjectCreationExpression_Initializers);
			ObjectCreationExpression_ObjectType.SetTypeLazy(() => DataType);
			ObjectCreationExpression_ObjectType.Documentation = null;
			ObjectCreationExpression_ObjectType.Name = "ObjectType";
			ObjectCreationExpression_ObjectType.SymbolProperty = "ObjectType";
			ObjectCreationExpression_ObjectType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ObjectCreationExpression_ObjectType.SetClassLazy(() => ObjectCreationExpression);
			ObjectCreationExpression_ObjectType.DefaultValue = null;
			ObjectCreationExpression_ObjectType.IsContainment = false;
			ObjectCreationExpression_Arguments.SetTypeLazy(() => __tmp43);
			ObjectCreationExpression_Arguments.Documentation = null;
			ObjectCreationExpression_Arguments.Name = "Arguments";
			ObjectCreationExpression_Arguments.SymbolProperty = "Arguments";
			ObjectCreationExpression_Arguments.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ObjectCreationExpression_Arguments.SetClassLazy(() => ObjectCreationExpression);
			ObjectCreationExpression_Arguments.DefaultValue = null;
			ObjectCreationExpression_Arguments.IsContainment = true;
			ObjectCreationExpression_Initializers.SetTypeLazy(() => __tmp44);
			ObjectCreationExpression_Initializers.Documentation = null;
			ObjectCreationExpression_Initializers.Name = "Initializers";
			ObjectCreationExpression_Initializers.SymbolProperty = "Arguments";
			ObjectCreationExpression_Initializers.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ObjectCreationExpression_Initializers.SetClassLazy(() => ObjectCreationExpression);
			ObjectCreationExpression_Initializers.DefaultValue = null;
			ObjectCreationExpression_Initializers.IsContainment = true;
			ParenthesizedExpression.Documentation = null;
			ParenthesizedExpression.Name = "ParenthesizedExpression";
			ParenthesizedExpression.SetNamespaceLazy(() => __tmp4);
			ParenthesizedExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ParenthesizedExpressionSymbol);
			ParenthesizedExpression.IsAbstract = false;
			ParenthesizedExpression.SuperClasses.AddLazy(() => Expression);
			ParenthesizedExpression.Properties.AddLazy(() => ParenthesizedExpression_Operand);
			ParenthesizedExpression_Operand.SetTypeLazy(() => Expression);
			ParenthesizedExpression_Operand.Documentation = null;
			ParenthesizedExpression_Operand.Name = "Operand";
			ParenthesizedExpression_Operand.SymbolProperty = "Operand";
			ParenthesizedExpression_Operand.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ParenthesizedExpression_Operand.SetClassLazy(() => ParenthesizedExpression);
			ParenthesizedExpression_Operand.DefaultValue = null;
			ParenthesizedExpression_Operand.IsContainment = true;
			ReferenceExpression.Documentation = null;
			ReferenceExpression.Name = "ReferenceExpression";
			ReferenceExpression.SetNamespaceLazy(() => __tmp4);
			ReferenceExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ReferenceExpressionSymbol);
			ReferenceExpression.IsAbstract = false;
			ReferenceExpression.SuperClasses.AddLazy(() => Expression);
			ReferenceExpression.Properties.AddLazy(() => ReferenceExpression_Qualifier);
			ReferenceExpression.Properties.AddLazy(() => ReferenceExpression_IsNullConditional);
			ReferenceExpression.Properties.AddLazy(() => ReferenceExpression_TypeArguments);
			ReferenceExpression.Properties.AddLazy(() => ReferenceExpression_IsDeclaration);
			ReferenceExpression.Properties.AddLazy(() => ReferenceExpression_ReferenceThroughType);
			ReferenceExpression.Properties.AddLazy(() => ReferenceExpression_ReferencedSymbol);
			ReferenceExpression_Qualifier.SetTypeLazy(() => Expression);
			ReferenceExpression_Qualifier.Documentation = null;
			ReferenceExpression_Qualifier.Name = "Qualifier";
			ReferenceExpression_Qualifier.SymbolProperty = "Qualifier";
			ReferenceExpression_Qualifier.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ReferenceExpression_Qualifier.SetClassLazy(() => ReferenceExpression);
			ReferenceExpression_Qualifier.DefaultValue = null;
			ReferenceExpression_Qualifier.IsContainment = true;
			ReferenceExpression_IsNullConditional.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			ReferenceExpression_IsNullConditional.Documentation = null;
			ReferenceExpression_IsNullConditional.Name = "IsNullConditional";
			ReferenceExpression_IsNullConditional.SymbolProperty = "IsNullConditional";
			ReferenceExpression_IsNullConditional.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ReferenceExpression_IsNullConditional.SetClassLazy(() => ReferenceExpression);
			ReferenceExpression_IsNullConditional.DefaultValue = null;
			ReferenceExpression_IsNullConditional.IsContainment = false;
			ReferenceExpression_TypeArguments.SetTypeLazy(() => __tmp45);
			ReferenceExpression_TypeArguments.Documentation = null;
			ReferenceExpression_TypeArguments.Name = "TypeArguments";
			ReferenceExpression_TypeArguments.SymbolProperty = "TypeArguments";
			ReferenceExpression_TypeArguments.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ReferenceExpression_TypeArguments.SetClassLazy(() => ReferenceExpression);
			ReferenceExpression_TypeArguments.DefaultValue = null;
			ReferenceExpression_TypeArguments.IsContainment = false;
			ReferenceExpression_IsDeclaration.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			ReferenceExpression_IsDeclaration.Documentation = null;
			ReferenceExpression_IsDeclaration.Name = "IsDeclaration";
			ReferenceExpression_IsDeclaration.SymbolProperty = "IsDeclaration";
			ReferenceExpression_IsDeclaration.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ReferenceExpression_IsDeclaration.SetClassLazy(() => ReferenceExpression);
			ReferenceExpression_IsDeclaration.DefaultValue = null;
			ReferenceExpression_IsDeclaration.IsContainment = false;
			ReferenceExpression_ReferenceThroughType.SetTypeLazy(() => DataType);
			ReferenceExpression_ReferenceThroughType.Documentation = null;
			ReferenceExpression_ReferenceThroughType.Name = "ReferenceThroughType";
			ReferenceExpression_ReferenceThroughType.SymbolProperty = "ReferenceThroughType";
			ReferenceExpression_ReferenceThroughType.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ReferenceExpression_ReferenceThroughType.SetClassLazy(() => ReferenceExpression);
			ReferenceExpression_ReferenceThroughType.DefaultValue = null;
			ReferenceExpression_ReferenceThroughType.IsContainment = false;
			ReferenceExpression_ReferencedSymbol.SetTypeLazy(() => Declaration);
			ReferenceExpression_ReferencedSymbol.Documentation = null;
			ReferenceExpression_ReferencedSymbol.Name = "ReferencedSymbol";
			ReferenceExpression_ReferencedSymbol.SymbolProperty = "ReferencedSymbol";
			ReferenceExpression_ReferencedSymbol.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ReferenceExpression_ReferencedSymbol.SetClassLazy(() => ReferenceExpression);
			ReferenceExpression_ReferencedSymbol.DefaultValue = null;
			ReferenceExpression_ReferencedSymbol.IsContainment = false;
			SizeOfExpression.Documentation = null;
			SizeOfExpression.Name = "SizeOfExpression";
			SizeOfExpression.SetNamespaceLazy(() => __tmp4);
			SizeOfExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.SizeOfExpressionSymbol);
			SizeOfExpression.IsAbstract = false;
			SizeOfExpression.SuperClasses.AddLazy(() => Expression);
			SizeOfExpression.Properties.AddLazy(() => SizeOfExpression_TypeOperand);
			SizeOfExpression_TypeOperand.SetTypeLazy(() => DataType);
			SizeOfExpression_TypeOperand.Documentation = null;
			SizeOfExpression_TypeOperand.Name = "TypeOperand";
			SizeOfExpression_TypeOperand.SymbolProperty = "TypeOperand";
			SizeOfExpression_TypeOperand.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			SizeOfExpression_TypeOperand.SetClassLazy(() => SizeOfExpression);
			SizeOfExpression_TypeOperand.DefaultValue = null;
			SizeOfExpression_TypeOperand.IsContainment = false;
			TypeOfExpression.Documentation = null;
			TypeOfExpression.Name = "TypeOfExpression";
			TypeOfExpression.SetNamespaceLazy(() => __tmp4);
			TypeOfExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.TypeOfExpressionSymbol);
			TypeOfExpression.IsAbstract = false;
			TypeOfExpression.SuperClasses.AddLazy(() => Expression);
			TypeOfExpression.Properties.AddLazy(() => TypeOfExpression_TypeOperand);
			TypeOfExpression_TypeOperand.SetTypeLazy(() => DataType);
			TypeOfExpression_TypeOperand.Documentation = null;
			TypeOfExpression_TypeOperand.Name = "TypeOperand";
			TypeOfExpression_TypeOperand.SymbolProperty = "TypeOperand";
			TypeOfExpression_TypeOperand.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			TypeOfExpression_TypeOperand.SetClassLazy(() => TypeOfExpression);
			TypeOfExpression_TypeOperand.DefaultValue = null;
			TypeOfExpression_TypeOperand.IsContainment = false;
			ThrowExpression.Documentation = null;
			ThrowExpression.Name = "ThrowExpression";
			ThrowExpression.SetNamespaceLazy(() => __tmp4);
			ThrowExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.ThrowExpressionSymbol);
			ThrowExpression.IsAbstract = false;
			ThrowExpression.SuperClasses.AddLazy(() => Expression);
			ThrowExpression.Properties.AddLazy(() => ThrowExpression_Exception);
			ThrowExpression_Exception.SetTypeLazy(() => Expression);
			ThrowExpression_Exception.Documentation = null;
			ThrowExpression_Exception.Name = "Exception";
			ThrowExpression_Exception.SymbolProperty = "Exception";
			ThrowExpression_Exception.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			ThrowExpression_Exception.SetClassLazy(() => ThrowExpression);
			ThrowExpression_Exception.DefaultValue = null;
			ThrowExpression_Exception.IsContainment = true;
			TupleExpression.Documentation = null;
			TupleExpression.Name = "TupleExpression";
			TupleExpression.SetNamespaceLazy(() => __tmp4);
			TupleExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.TupleExpressionSymbol);
			TupleExpression.IsAbstract = false;
			TupleExpression.SuperClasses.AddLazy(() => Expression);
			TupleExpression.Properties.AddLazy(() => TupleExpression_Arguments);
			TupleExpression_Arguments.SetTypeLazy(() => __tmp46);
			TupleExpression_Arguments.Documentation = null;
			TupleExpression_Arguments.Name = "Arguments";
			TupleExpression_Arguments.SymbolProperty = "Arguments";
			TupleExpression_Arguments.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			TupleExpression_Arguments.SetClassLazy(() => TupleExpression);
			TupleExpression_Arguments.DefaultValue = null;
			TupleExpression_Arguments.IsContainment = true;
			UnaryExpression.Documentation = null;
			UnaryExpression.Name = "UnaryExpression";
			UnaryExpression.SetNamespaceLazy(() => __tmp4);
			UnaryExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.UnaryExpressionSymbol);
			UnaryExpression.IsAbstract = false;
			UnaryExpression.SuperClasses.AddLazy(() => Expression);
			UnaryExpression.Properties.AddLazy(() => UnaryExpression_OperatorKind);
			UnaryExpression.Properties.AddLazy(() => UnaryExpression_Operand);
			UnaryExpression.Properties.AddLazy(() => UnaryExpression_IsChecked);
			UnaryExpression.Properties.AddLazy(() => UnaryExpression_OperatorMethod);
			UnaryExpression_OperatorKind.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Object.ToMutable());
			UnaryExpression_OperatorKind.Documentation = null;
			UnaryExpression_OperatorKind.Name = "OperatorKind";
			UnaryExpression_OperatorKind.SymbolProperty = "OperatorKind";
			UnaryExpression_OperatorKind.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			UnaryExpression_OperatorKind.SetClassLazy(() => UnaryExpression);
			UnaryExpression_OperatorKind.DefaultValue = null;
			UnaryExpression_OperatorKind.IsContainment = false;
			UnaryExpression_Operand.SetTypeLazy(() => Expression);
			UnaryExpression_Operand.Documentation = null;
			UnaryExpression_Operand.Name = "Operand";
			UnaryExpression_Operand.SymbolProperty = "Operand";
			UnaryExpression_Operand.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			UnaryExpression_Operand.SetClassLazy(() => UnaryExpression);
			UnaryExpression_Operand.DefaultValue = null;
			UnaryExpression_Operand.IsContainment = true;
			UnaryExpression_IsChecked.SetTypeLazy(() => global::MetaDslx.Languages.Meta.Model.MetaInstance.Bool.ToMutable());
			UnaryExpression_IsChecked.Documentation = null;
			UnaryExpression_IsChecked.Name = "IsChecked";
			UnaryExpression_IsChecked.SymbolProperty = "IsChecked";
			UnaryExpression_IsChecked.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			UnaryExpression_IsChecked.SetClassLazy(() => UnaryExpression);
			UnaryExpression_IsChecked.DefaultValue = null;
			UnaryExpression_IsChecked.IsContainment = false;
			UnaryExpression_OperatorMethod.SetTypeLazy(() => UnaryOperator);
			UnaryExpression_OperatorMethod.Documentation = null;
			UnaryExpression_OperatorMethod.Name = "OperatorMethod";
			UnaryExpression_OperatorMethod.SymbolProperty = "OperatorMethod";
			UnaryExpression_OperatorMethod.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			UnaryExpression_OperatorMethod.SetClassLazy(() => UnaryExpression);
			UnaryExpression_OperatorMethod.DefaultValue = null;
			UnaryExpression_OperatorMethod.IsContainment = false;
			VariableDeclarationExpression.Documentation = null;
			VariableDeclarationExpression.Name = "VariableDeclarationExpression";
			VariableDeclarationExpression.SetNamespaceLazy(() => __tmp4);
			VariableDeclarationExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.VariableDeclarationExpressionSymbol);
			VariableDeclarationExpression.IsAbstract = false;
			VariableDeclarationExpression.SuperClasses.AddLazy(() => Expression);
			VariableDeclarationExpression.Properties.AddLazy(() => VariableDeclarationExpression_Symbol);
			VariableDeclarationExpression.Properties.AddLazy(() => VariableDeclarationExpression_Initializer);
			VariableDeclarationExpression_Symbol.SetTypeLazy(() => Variable);
			VariableDeclarationExpression_Symbol.Documentation = null;
			VariableDeclarationExpression_Symbol.Name = "Symbol";
			VariableDeclarationExpression_Symbol.SymbolProperty = "Symbol";
			VariableDeclarationExpression_Symbol.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			VariableDeclarationExpression_Symbol.SetClassLazy(() => VariableDeclarationExpression);
			VariableDeclarationExpression_Symbol.DefaultValue = null;
			VariableDeclarationExpression_Symbol.IsContainment = true;
			VariableDeclarationExpression_Initializer.SetTypeLazy(() => Expression);
			VariableDeclarationExpression_Initializer.Documentation = null;
			VariableDeclarationExpression_Initializer.Name = "Initializer";
			VariableDeclarationExpression_Initializer.SymbolProperty = "Initializer";
			VariableDeclarationExpression_Initializer.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			VariableDeclarationExpression_Initializer.SetClassLazy(() => VariableDeclarationExpression);
			VariableDeclarationExpression_Initializer.DefaultValue = null;
			VariableDeclarationExpression_Initializer.IsContainment = true;
			VariableDeclarationGroupExpression.Documentation = null;
			VariableDeclarationGroupExpression.Name = "VariableDeclarationGroupExpression";
			VariableDeclarationGroupExpression.SetNamespaceLazy(() => __tmp4);
			VariableDeclarationGroupExpression.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.VariableDeclarationGroupExpressionSymbol);
			VariableDeclarationGroupExpression.IsAbstract = false;
			VariableDeclarationGroupExpression.SuperClasses.AddLazy(() => Expression);
			VariableDeclarationGroupExpression.Properties.AddLazy(() => VariableDeclarationGroupExpression_Declarations);
			VariableDeclarationGroupExpression.Properties.AddLazy(() => VariableDeclarationGroupExpression_Initializer);
			VariableDeclarationGroupExpression_Declarations.SetTypeLazy(() => __tmp47);
			VariableDeclarationGroupExpression_Declarations.Documentation = null;
			VariableDeclarationGroupExpression_Declarations.Name = "Declarations";
			VariableDeclarationGroupExpression_Declarations.SymbolProperty = "Declarations";
			VariableDeclarationGroupExpression_Declarations.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			VariableDeclarationGroupExpression_Declarations.SetClassLazy(() => VariableDeclarationGroupExpression);
			VariableDeclarationGroupExpression_Declarations.DefaultValue = null;
			VariableDeclarationGroupExpression_Declarations.IsContainment = true;
			VariableDeclarationGroupExpression_Initializer.SetTypeLazy(() => Expression);
			VariableDeclarationGroupExpression_Initializer.Documentation = null;
			VariableDeclarationGroupExpression_Initializer.Name = "Initializer";
			VariableDeclarationGroupExpression_Initializer.SymbolProperty = "Initializer";
			VariableDeclarationGroupExpression_Initializer.Kind = global::MetaDslx.Languages.Meta.Model.MetaPropertyKind.Normal;
			VariableDeclarationGroupExpression_Initializer.SetClassLazy(() => VariableDeclarationGroupExpression);
			VariableDeclarationGroupExpression_Initializer.DefaultValue = null;
			VariableDeclarationGroupExpression_Initializer.IsContainment = true;
			__tmp24.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp24.SetInnerTypeLazy(() => Attribute);
			__tmp25.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp25.SetInnerTypeLazy(() => TypeParameter);
			__tmp26.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp26.SetInnerTypeLazy(() => Declaration);
			__tmp27.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp27.SetInnerTypeLazy(() => DataType);
			__tmp28.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp28.SetInnerTypeLazy(() => NamedType);
			__tmp29.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp29.SetInnerTypeLazy(() => EnumLiteral);
			__tmp30.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp30.SetInnerTypeLazy(() => Parameter);
			__tmp31.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp31.SetInnerTypeLazy(() => DataType);
			__tmp32.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp32.SetInnerTypeLazy(() => Parameter);
			__tmp33.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp33.SetInnerTypeLazy(() => Parameter);
			__tmp34.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp34.SetInnerTypeLazy(() => Statement);
			__tmp35.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp35.SetInnerTypeLazy(() => Statement);
			__tmp36.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp36.SetInnerTypeLazy(() => Statement);
			__tmp37.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp37.SetInnerTypeLazy(() => SwitchCase);
			__tmp38.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp38.SetInnerTypeLazy(() => CaseClause);
			__tmp39.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp39.SetInnerTypeLazy(() => CatchClause);
			__tmp40.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp40.SetInnerTypeLazy(() => Argument);
			__tmp41.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp41.SetInnerTypeLazy(() => Argument);
			__tmp42.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp42.SetInnerTypeLazy(() => Parameter);
			__tmp43.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp43.SetInnerTypeLazy(() => Argument);
			__tmp44.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp44.SetInnerTypeLazy(() => Expression);
			__tmp45.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp45.SetInnerTypeLazy(() => DataType);
			__tmp46.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp46.SetInnerTypeLazy(() => Argument);
			__tmp47.Kind = global::MetaDslx.Languages.Meta.Model.MetaCollectionKind.List;
			__tmp47.SetInnerTypeLazy(() => VariableDeclarationExpression);
		}
	}

	/// <summary>
	/// Base class for implementing the behavior of the model elements.
	/// This class has to be be overriden in global::MetaDslx.Languages.Core.Model.CoreImplementation to provide custom
	/// implementation for the constructors, operations and property values.
	/// </summary>
	public abstract class CoreImplementationBase
	{
		/// <summary>
		/// Implements the constructor: CoreBuilderInstance()
		/// </summary>
		internal virtual void CoreBuilderInstance(CoreBuilderInstance _this)
		{
		}
	
		/// <summary>
		/// Implements the constructor: Element()
		/// </summary>
		public virtual void Element(ElementBuilder _this)
		{
			this.CallElementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Element
		/// </summary>
		protected virtual void CallElementSuperConstructors(ElementBuilder _this)
		{
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Attribute()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>NamedElement</li>
		///     <li>TypedElement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>TypedElement</li>
		///     <li>NamedElement</li>
		/// </ul>
		public virtual void Attribute(AttributeBuilder _this)
		{
			this.CallAttributeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Attribute
		/// </summary>
		protected virtual void CallAttributeSuperConstructors(AttributeBuilder _this)
		{
			this.Element(_this);
			this.TypedElement(_this);
			this.NamedElement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: NamedElement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		public virtual void NamedElement(NamedElementBuilder _this)
		{
			this.CallNamedElementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of NamedElement
		/// </summary>
		protected virtual void CallNamedElementSuperConstructors(NamedElementBuilder _this)
		{
			this.Element(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: TypedElement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		public virtual void TypedElement(TypedElementBuilder _this)
		{
			this.CallTypedElementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of TypedElement
		/// </summary>
		protected virtual void CallTypedElementSuperConstructors(TypedElementBuilder _this)
		{
			this.Element(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: DataType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		/// Initializes the following derived properties:
		/// <ul>
		///     <li>ResolvedType</li>
		/// </ul>
		public virtual void DataType(DataTypeBuilder _this)
		{
			this.CallDataTypeSuperConstructors(_this);
			_this.SetResolvedTypeLazy(this.DataType_ComputeProperty_ResolvedType);
		}
	
		/// <summary>
		/// Calls the super constructors of DataType
		/// </summary>
		protected virtual void CallDataTypeSuperConstructors(DataTypeBuilder _this)
		{
			this.Element(_this);
		}
	
		/// <summary>
		/// Computes the value of the property: DataType.ResolvedType
		/// </summary	
		public abstract DataTypeBuilder DataType_ComputeProperty_ResolvedType(DataTypeBuilder _this);
	
	
	
		/// <summary>
		/// Implements the constructor: Declaration()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>NamedElement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		/// </ul>
		public virtual void Declaration(DeclarationBuilder _this)
		{
			this.CallDeclarationSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Declaration
		/// </summary>
		protected virtual void CallDeclarationSuperConstructors(DeclarationBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: TypedDeclaration()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Declaration</li>
		///     <li>TypedElement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>TypedElement</li>
		///     <li>Declaration</li>
		/// </ul>
		public virtual void TypedDeclaration(TypedDeclarationBuilder _this)
		{
			this.CallTypedDeclarationSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of TypedDeclaration
		/// </summary>
		protected virtual void CallTypedDeclarationSuperConstructors(TypedDeclarationBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.TypedElement(_this);
			this.Declaration(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Namespace()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Declaration</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		/// </ul>
		public virtual void Namespace(NamespaceBuilder _this)
		{
			this.CallNamespaceSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Namespace
		/// </summary>
		protected virtual void CallNamespaceSuperConstructors(NamespaceBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Alias()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Declaration</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		/// </ul>
		public virtual void Alias(AliasBuilder _this)
		{
			this.CallAliasSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Alias
		/// </summary>
		protected virtual void CallAliasSuperConstructors(AliasBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: NamedType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Declaration</li>
		///     <li>DataType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>DataType</li>
		///     <li>Declaration</li>
		/// </ul>
		public virtual void NamedType(NamedTypeBuilder _this)
		{
			this.CallNamedTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of NamedType
		/// </summary>
		protected virtual void CallNamedTypeSuperConstructors(NamedTypeBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.DataType(_this);
			this.Declaration(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: PrimitiveType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>NamedType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>DataType</li>
		///     <li>Declaration</li>
		///     <li>NamedType</li>
		/// </ul>
		public virtual void PrimitiveType(PrimitiveTypeBuilder _this)
		{
			this.CallPrimitiveTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of PrimitiveType
		/// </summary>
		protected virtual void CallPrimitiveTypeSuperConstructors(PrimitiveTypeBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.DataType(_this);
			this.Declaration(_this);
			this.NamedType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ClassifierType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>NamedType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>DataType</li>
		///     <li>Declaration</li>
		///     <li>NamedType</li>
		/// </ul>
		public virtual void ClassifierType(ClassifierTypeBuilder _this)
		{
			this.CallClassifierTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ClassifierType
		/// </summary>
		protected virtual void CallClassifierTypeSuperConstructors(ClassifierTypeBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.DataType(_this);
			this.Declaration(_this);
			this.NamedType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: InterfaceType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>ClassifierType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>DataType</li>
		///     <li>Declaration</li>
		///     <li>NamedType</li>
		///     <li>ClassifierType</li>
		/// </ul>
		public virtual void InterfaceType(InterfaceTypeBuilder _this)
		{
			this.CallInterfaceTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of InterfaceType
		/// </summary>
		protected virtual void CallInterfaceTypeSuperConstructors(InterfaceTypeBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.DataType(_this);
			this.Declaration(_this);
			this.NamedType(_this);
			this.ClassifierType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ClassType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>ClassifierType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>DataType</li>
		///     <li>Declaration</li>
		///     <li>NamedType</li>
		///     <li>ClassifierType</li>
		/// </ul>
		public virtual void ClassType(ClassTypeBuilder _this)
		{
			this.CallClassTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ClassType
		/// </summary>
		protected virtual void CallClassTypeSuperConstructors(ClassTypeBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.DataType(_this);
			this.Declaration(_this);
			this.NamedType(_this);
			this.ClassifierType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: StructType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>ClassifierType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>DataType</li>
		///     <li>Declaration</li>
		///     <li>NamedType</li>
		///     <li>ClassifierType</li>
		/// </ul>
		public virtual void StructType(StructTypeBuilder _this)
		{
			this.CallStructTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of StructType
		/// </summary>
		protected virtual void CallStructTypeSuperConstructors(StructTypeBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.DataType(_this);
			this.Declaration(_this);
			this.NamedType(_this);
			this.ClassifierType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: EnumType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>NamedType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>DataType</li>
		///     <li>Declaration</li>
		///     <li>NamedType</li>
		/// </ul>
		/// Initializes the following derived properties:
		/// <ul>
		///     <li>Literals</li>
		/// </ul>
		public virtual void EnumType(EnumTypeBuilder _this)
		{
			this.CallEnumTypeSuperConstructors(_this);
			_this.Literals.AddRangeLazy<EnumTypeBuilder>(this.EnumType_ComputeProperty_Literals);
		}
	
		/// <summary>
		/// Calls the super constructors of EnumType
		/// </summary>
		protected virtual void CallEnumTypeSuperConstructors(EnumTypeBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.DataType(_this);
			this.Declaration(_this);
			this.NamedType(_this);
		}
	
		/// <summary>
		/// Computes the value of the property: EnumType.Literals
		/// </summary	
		public abstract global::System.Collections.Generic.IReadOnlyList<EnumLiteralBuilder> EnumType_ComputeProperty_Literals(EnumTypeBuilder _this);
	
	
	
		/// <summary>
		/// Implements the constructor: EnumLiteral()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Member</li>
		///     <li>TypedElement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>NamedElement</li>
		///     <li>Element</li>
		///     <li>Declaration</li>
		///     <li>TypedElement</li>
		///     <li>Member</li>
		/// </ul>
		/// Initializes the following derived properties:
		/// <ul>
		///     <li>Type</li>
		/// </ul>
		public virtual void EnumLiteral(EnumLiteralBuilder _this)
		{
			this.CallEnumLiteralSuperConstructors(_this);
			_this.SetTypeLazy(this.EnumLiteral_ComputeProperty_Type);
		}
	
		/// <summary>
		/// Calls the super constructors of EnumLiteral
		/// </summary>
		protected virtual void CallEnumLiteralSuperConstructors(EnumLiteralBuilder _this)
		{
			this.NamedElement(_this);
			this.Element(_this);
			this.Declaration(_this);
			this.TypedElement(_this);
			this.Member(_this);
		}
	
		/// <summary>
		/// Computes the value of the property: EnumLiteral.Type
		/// </summary	
		public abstract EnumTypeBuilder EnumLiteral_ComputeProperty_Type(EnumLiteralBuilder _this);
	
	
	
		/// <summary>
		/// Implements the constructor: DelegateType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>NamedType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>DataType</li>
		///     <li>Declaration</li>
		///     <li>NamedType</li>
		/// </ul>
		public virtual void DelegateType(DelegateTypeBuilder _this)
		{
			this.CallDelegateTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of DelegateType
		/// </summary>
		protected virtual void CallDelegateTypeSuperConstructors(DelegateTypeBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.DataType(_this);
			this.Declaration(_this);
			this.NamedType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ArrayType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>DataType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>DataType</li>
		/// </ul>
		public virtual void ArrayType(ArrayTypeBuilder _this)
		{
			this.CallArrayTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ArrayType
		/// </summary>
		protected virtual void CallArrayTypeSuperConstructors(ArrayTypeBuilder _this)
		{
			this.Element(_this);
			this.DataType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: CollectionType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>DataType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>DataType</li>
		/// </ul>
		public virtual void CollectionType(CollectionTypeBuilder _this)
		{
			this.CallCollectionTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of CollectionType
		/// </summary>
		protected virtual void CallCollectionTypeSuperConstructors(CollectionTypeBuilder _this)
		{
			this.Element(_this);
			this.DataType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: DictionaryType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>DataType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>DataType</li>
		/// </ul>
		public virtual void DictionaryType(DictionaryTypeBuilder _this)
		{
			this.CallDictionaryTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of DictionaryType
		/// </summary>
		protected virtual void CallDictionaryTypeSuperConstructors(DictionaryTypeBuilder _this)
		{
			this.Element(_this);
			this.DataType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: NullableType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>DataType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>DataType</li>
		/// </ul>
		public virtual void NullableType(NullableTypeBuilder _this)
		{
			this.CallNullableTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of NullableType
		/// </summary>
		protected virtual void CallNullableTypeSuperConstructors(NullableTypeBuilder _this)
		{
			this.Element(_this);
			this.DataType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: TupleType()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>DataType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>DataType</li>
		/// </ul>
		public virtual void TupleType(TupleTypeBuilder _this)
		{
			this.CallTupleTypeSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of TupleType
		/// </summary>
		protected virtual void CallTupleTypeSuperConstructors(TupleTypeBuilder _this)
		{
			this.Element(_this);
			this.DataType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: TypeParameter()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>NamedType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>DataType</li>
		///     <li>Declaration</li>
		///     <li>NamedType</li>
		/// </ul>
		public virtual void TypeParameter(TypeParameterBuilder _this)
		{
			this.CallTypeParameterSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of TypeParameter
		/// </summary>
		protected virtual void CallTypeParameterSuperConstructors(TypeParameterBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.DataType(_this);
			this.Declaration(_this);
			this.NamedType(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: GenericTypeReference()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>DataType</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>DataType</li>
		/// </ul>
		/// Initializes the following derived properties:
		/// <ul>
		///     <li>ConstructedType</li>
		///     <li>ResolvedType</li>
		/// </ul>
		public virtual void GenericTypeReference(GenericTypeReferenceBuilder _this)
		{
			this.CallGenericTypeReferenceSuperConstructors(_this);
			_this.SetConstructedTypeLazy(this.GenericTypeReference_ComputeProperty_ConstructedType);
			_this.SetResolvedTypeLazy(this.GenericTypeReference_ComputeProperty_ResolvedType);
		}
	
		/// <summary>
		/// Calls the super constructors of GenericTypeReference
		/// </summary>
		protected virtual void CallGenericTypeReferenceSuperConstructors(GenericTypeReferenceBuilder _this)
		{
			this.Element(_this);
			this.DataType(_this);
		}
	
		/// <summary>
		/// Computes the value of the property: GenericTypeReference.ConstructedType
		/// </summary	
		public abstract NamedTypeBuilder GenericTypeReference_ComputeProperty_ConstructedType(GenericTypeReferenceBuilder _this);
		/// <summary>
		/// Computes the value of the property: GenericTypeReference.ResolvedType
		/// </summary	
		public abstract DataTypeBuilder GenericTypeReference_ComputeProperty_ResolvedType(GenericTypeReferenceBuilder _this);
	
	
	
		/// <summary>
		/// Implements the constructor: Member()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Declaration</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		/// </ul>
		public virtual void Member(MemberBuilder _this)
		{
			this.CallMemberSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Member
		/// </summary>
		protected virtual void CallMemberSuperConstructors(MemberBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: FieldLikeMember()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Member</li>
		///     <li>TypedDeclaration</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>TypedElement</li>
		///     <li>Declaration</li>
		///     <li>TypedDeclaration</li>
		///     <li>Member</li>
		/// </ul>
		public virtual void FieldLikeMember(FieldLikeMemberBuilder _this)
		{
			this.CallFieldLikeMemberSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of FieldLikeMember
		/// </summary>
		protected virtual void CallFieldLikeMemberSuperConstructors(FieldLikeMemberBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.TypedElement(_this);
			this.Declaration(_this);
			this.TypedDeclaration(_this);
			this.Member(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Field()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>FieldLikeMember</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>TypedElement</li>
		///     <li>Declaration</li>
		///     <li>TypedDeclaration</li>
		///     <li>Member</li>
		///     <li>FieldLikeMember</li>
		/// </ul>
		public virtual void Field(FieldBuilder _this)
		{
			this.CallFieldSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Field
		/// </summary>
		protected virtual void CallFieldSuperConstructors(FieldBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.TypedElement(_this);
			this.Declaration(_this);
			this.TypedDeclaration(_this);
			this.Member(_this);
			this.FieldLikeMember(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Property()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>FieldLikeMember</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>TypedElement</li>
		///     <li>Declaration</li>
		///     <li>TypedDeclaration</li>
		///     <li>Member</li>
		///     <li>FieldLikeMember</li>
		/// </ul>
		public virtual void Property(PropertyBuilder _this)
		{
			this.CallPropertySuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Property
		/// </summary>
		protected virtual void CallPropertySuperConstructors(PropertyBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.TypedElement(_this);
			this.Declaration(_this);
			this.TypedDeclaration(_this);
			this.Member(_this);
			this.FieldLikeMember(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Indexer()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Property</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>TypedElement</li>
		///     <li>Declaration</li>
		///     <li>TypedDeclaration</li>
		///     <li>Member</li>
		///     <li>FieldLikeMember</li>
		///     <li>Property</li>
		/// </ul>
		public virtual void Indexer(IndexerBuilder _this)
		{
			this.CallIndexerSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Indexer
		/// </summary>
		protected virtual void CallIndexerSuperConstructors(IndexerBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.TypedElement(_this);
			this.Declaration(_this);
			this.TypedDeclaration(_this);
			this.Member(_this);
			this.FieldLikeMember(_this);
			this.Property(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: MethodLikeMember()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Member</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Member</li>
		/// </ul>
		public virtual void MethodLikeMember(MethodLikeMemberBuilder _this)
		{
			this.CallMethodLikeMemberSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of MethodLikeMember
		/// </summary>
		protected virtual void CallMethodLikeMemberSuperConstructors(MethodLikeMemberBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Member(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Method()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>MethodLikeMember</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Member</li>
		///     <li>MethodLikeMember</li>
		/// </ul>
		public virtual void Method(MethodBuilder _this)
		{
			this.CallMethodSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Method
		/// </summary>
		protected virtual void CallMethodSuperConstructors(MethodBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Member(_this);
			this.MethodLikeMember(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Parameter()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Variable</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Local</li>
		///     <li>Variable</li>
		/// </ul>
		public virtual void Parameter(ParameterBuilder _this)
		{
			this.CallParameterSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Parameter
		/// </summary>
		protected virtual void CallParameterSuperConstructors(ParameterBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Local(_this);
			this.Variable(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Constructor()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>MethodLikeMember</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Member</li>
		///     <li>MethodLikeMember</li>
		/// </ul>
		public virtual void Constructor(ConstructorBuilder _this)
		{
			this.CallConstructorSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Constructor
		/// </summary>
		protected virtual void CallConstructorSuperConstructors(ConstructorBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Member(_this);
			this.MethodLikeMember(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Destructor()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>MethodLikeMember</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Member</li>
		///     <li>MethodLikeMember</li>
		/// </ul>
		public virtual void Destructor(DestructorBuilder _this)
		{
			this.CallDestructorSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Destructor
		/// </summary>
		protected virtual void CallDestructorSuperConstructors(DestructorBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Member(_this);
			this.MethodLikeMember(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Lambda()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>MethodLikeMember</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Member</li>
		///     <li>MethodLikeMember</li>
		/// </ul>
		public virtual void Lambda(LambdaBuilder _this)
		{
			this.CallLambdaSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Lambda
		/// </summary>
		protected virtual void CallLambdaSuperConstructors(LambdaBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Member(_this);
			this.MethodLikeMember(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Operator()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>MethodLikeMember</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Member</li>
		///     <li>MethodLikeMember</li>
		/// </ul>
		public virtual void Operator(OperatorBuilder _this)
		{
			this.CallOperatorSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Operator
		/// </summary>
		protected virtual void CallOperatorSuperConstructors(OperatorBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Member(_this);
			this.MethodLikeMember(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ConversionOperator()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Operator</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Member</li>
		///     <li>MethodLikeMember</li>
		///     <li>Operator</li>
		/// </ul>
		public virtual void ConversionOperator(ConversionOperatorBuilder _this)
		{
			this.CallConversionOperatorSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ConversionOperator
		/// </summary>
		protected virtual void CallConversionOperatorSuperConstructors(ConversionOperatorBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Member(_this);
			this.MethodLikeMember(_this);
			this.Operator(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: UnaryOperator()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Operator</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Member</li>
		///     <li>MethodLikeMember</li>
		///     <li>Operator</li>
		/// </ul>
		public virtual void UnaryOperator(UnaryOperatorBuilder _this)
		{
			this.CallUnaryOperatorSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of UnaryOperator
		/// </summary>
		protected virtual void CallUnaryOperatorSuperConstructors(UnaryOperatorBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Member(_this);
			this.MethodLikeMember(_this);
			this.Operator(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: BinaryOperator()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Operator</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Member</li>
		///     <li>MethodLikeMember</li>
		///     <li>Operator</li>
		/// </ul>
		public virtual void BinaryOperator(BinaryOperatorBuilder _this)
		{
			this.CallBinaryOperatorSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of BinaryOperator
		/// </summary>
		protected virtual void CallBinaryOperatorSuperConstructors(BinaryOperatorBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Member(_this);
			this.MethodLikeMember(_this);
			this.Operator(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Statement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		public virtual void Statement(StatementBuilder _this)
		{
			this.CallStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Statement
		/// </summary>
		protected virtual void CallStatementSuperConstructors(StatementBuilder _this)
		{
			this.Element(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Local()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Declaration</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		/// </ul>
		public virtual void Local(LocalBuilder _this)
		{
			this.CallLocalSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Local
		/// </summary>
		protected virtual void CallLocalSuperConstructors(LocalBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Variable()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Local</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Local</li>
		/// </ul>
		public virtual void Variable(VariableBuilder _this)
		{
			this.CallVariableSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Variable
		/// </summary>
		protected virtual void CallVariableSuperConstructors(VariableBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Local(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Label()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Local</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Declaration</li>
		///     <li>Local</li>
		/// </ul>
		public virtual void Label(LabelBuilder _this)
		{
			this.CallLabelSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Label
		/// </summary>
		protected virtual void CallLabelSuperConstructors(LabelBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Declaration(_this);
			this.Local(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: BlockStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void BlockStatement(BlockStatementBuilder _this)
		{
			this.CallBlockStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of BlockStatement
		/// </summary>
		protected virtual void CallBlockStatementSuperConstructors(BlockStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: EmptyStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void EmptyStatement(EmptyStatementBuilder _this)
		{
			this.CallEmptyStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of EmptyStatement
		/// </summary>
		protected virtual void CallEmptyStatementSuperConstructors(EmptyStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ExpressionStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void ExpressionStatement(ExpressionStatementBuilder _this)
		{
			this.CallExpressionStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ExpressionStatement
		/// </summary>
		protected virtual void CallExpressionStatementSuperConstructors(ExpressionStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ForEachLoopStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void ForEachLoopStatement(ForEachLoopStatementBuilder _this)
		{
			this.CallForEachLoopStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ForEachLoopStatement
		/// </summary>
		protected virtual void CallForEachLoopStatementSuperConstructors(ForEachLoopStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ForLoopStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void ForLoopStatement(ForLoopStatementBuilder _this)
		{
			this.CallForLoopStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ForLoopStatement
		/// </summary>
		protected virtual void CallForLoopStatementSuperConstructors(ForLoopStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ForToLoopStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void ForToLoopStatement(ForToLoopStatementBuilder _this)
		{
			this.CallForToLoopStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ForToLoopStatement
		/// </summary>
		protected virtual void CallForToLoopStatementSuperConstructors(ForToLoopStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: IfStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void IfStatement(IfStatementBuilder _this)
		{
			this.CallIfStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of IfStatement
		/// </summary>
		protected virtual void CallIfStatementSuperConstructors(IfStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: JumpStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void JumpStatement(JumpStatementBuilder _this)
		{
			this.CallJumpStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of JumpStatement
		/// </summary>
		protected virtual void CallJumpStatementSuperConstructors(JumpStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: LabeledStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void LabeledStatement(LabeledStatementBuilder _this)
		{
			this.CallLabeledStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of LabeledStatement
		/// </summary>
		protected virtual void CallLabeledStatementSuperConstructors(LabeledStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: LockStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void LockStatement(LockStatementBuilder _this)
		{
			this.CallLockStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of LockStatement
		/// </summary>
		protected virtual void CallLockStatementSuperConstructors(LockStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: LoopStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void LoopStatement(LoopStatementBuilder _this)
		{
			this.CallLoopStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of LoopStatement
		/// </summary>
		protected virtual void CallLoopStatementSuperConstructors(LoopStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ReturnStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void ReturnStatement(ReturnStatementBuilder _this)
		{
			this.CallReturnStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ReturnStatement
		/// </summary>
		protected virtual void CallReturnStatementSuperConstructors(ReturnStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: SwitchStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void SwitchStatement(SwitchStatementBuilder _this)
		{
			this.CallSwitchStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of SwitchStatement
		/// </summary>
		protected virtual void CallSwitchStatementSuperConstructors(SwitchStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: SwitchCase()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		public virtual void SwitchCase(SwitchCaseBuilder _this)
		{
			this.CallSwitchCaseSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of SwitchCase
		/// </summary>
		protected virtual void CallSwitchCaseSuperConstructors(SwitchCaseBuilder _this)
		{
			this.Element(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: CaseClause()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		public virtual void CaseClause(CaseClauseBuilder _this)
		{
			this.CallCaseClauseSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of CaseClause
		/// </summary>
		protected virtual void CallCaseClauseSuperConstructors(CaseClauseBuilder _this)
		{
			this.Element(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: DefaultValueCaseClause()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>CaseClause</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>CaseClause</li>
		/// </ul>
		public virtual void DefaultValueCaseClause(DefaultValueCaseClauseBuilder _this)
		{
			this.CallDefaultValueCaseClauseSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of DefaultValueCaseClause
		/// </summary>
		protected virtual void CallDefaultValueCaseClauseSuperConstructors(DefaultValueCaseClauseBuilder _this)
		{
			this.Element(_this);
			this.CaseClause(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: SingleValueCaseClause()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>CaseClause</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>CaseClause</li>
		/// </ul>
		public virtual void SingleValueCaseClause(SingleValueCaseClauseBuilder _this)
		{
			this.CallSingleValueCaseClauseSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of SingleValueCaseClause
		/// </summary>
		protected virtual void CallSingleValueCaseClauseSuperConstructors(SingleValueCaseClauseBuilder _this)
		{
			this.Element(_this);
			this.CaseClause(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: TryStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void TryStatement(TryStatementBuilder _this)
		{
			this.CallTryStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of TryStatement
		/// </summary>
		protected virtual void CallTryStatementSuperConstructors(TryStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: CatchClause()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		public virtual void CatchClause(CatchClauseBuilder _this)
		{
			this.CallCatchClauseSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of CatchClause
		/// </summary>
		protected virtual void CallCatchClauseSuperConstructors(CatchClauseBuilder _this)
		{
			this.Element(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: UsingStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void UsingStatement(UsingStatementBuilder _this)
		{
			this.CallUsingStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of UsingStatement
		/// </summary>
		protected virtual void CallUsingStatementSuperConstructors(UsingStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: WhileLoopStatement()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Statement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Statement</li>
		/// </ul>
		public virtual void WhileLoopStatement(WhileLoopStatementBuilder _this)
		{
			this.CallWhileLoopStatementSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of WhileLoopStatement
		/// </summary>
		protected virtual void CallWhileLoopStatementSuperConstructors(WhileLoopStatementBuilder _this)
		{
			this.Element(_this);
			this.Statement(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Expression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		/// </ul>
		public virtual void Expression(ExpressionBuilder _this)
		{
			this.CallExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Expression
		/// </summary>
		protected virtual void CallExpressionSuperConstructors(ExpressionBuilder _this)
		{
			this.Element(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: Argument()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		///     <li>NamedElement</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>NamedElement</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void Argument(ArgumentBuilder _this)
		{
			this.CallArgumentSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of Argument
		/// </summary>
		protected virtual void CallArgumentSuperConstructors(ArgumentBuilder _this)
		{
			this.Element(_this);
			this.NamedElement(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: AssignmentExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void AssignmentExpression(AssignmentExpressionBuilder _this)
		{
			this.CallAssignmentExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of AssignmentExpression
		/// </summary>
		protected virtual void CallAssignmentExpressionSuperConstructors(AssignmentExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: AwaitExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void AwaitExpression(AwaitExpressionBuilder _this)
		{
			this.CallAwaitExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of AwaitExpression
		/// </summary>
		protected virtual void CallAwaitExpressionSuperConstructors(AwaitExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: BinaryExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void BinaryExpression(BinaryExpressionBuilder _this)
		{
			this.CallBinaryExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of BinaryExpression
		/// </summary>
		protected virtual void CallBinaryExpressionSuperConstructors(BinaryExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: CoalesceExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void CoalesceExpression(CoalesceExpressionBuilder _this)
		{
			this.CallCoalesceExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of CoalesceExpression
		/// </summary>
		protected virtual void CallCoalesceExpressionSuperConstructors(CoalesceExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: CompoundAssignmentExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>AssignmentExpression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		///     <li>AssignmentExpression</li>
		/// </ul>
		public virtual void CompoundAssignmentExpression(CompoundAssignmentExpressionBuilder _this)
		{
			this.CallCompoundAssignmentExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of CompoundAssignmentExpression
		/// </summary>
		protected virtual void CallCompoundAssignmentExpressionSuperConstructors(CompoundAssignmentExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
			this.AssignmentExpression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ConditionalExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void ConditionalExpression(ConditionalExpressionBuilder _this)
		{
			this.CallConditionalExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ConditionalExpression
		/// </summary>
		protected virtual void CallConditionalExpressionSuperConstructors(ConditionalExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ConversionExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void ConversionExpression(ConversionExpressionBuilder _this)
		{
			this.CallConversionExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ConversionExpression
		/// </summary>
		protected virtual void CallConversionExpressionSuperConstructors(ConversionExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: DefaultValueExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void DefaultValueExpression(DefaultValueExpressionBuilder _this)
		{
			this.CallDefaultValueExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of DefaultValueExpression
		/// </summary>
		protected virtual void CallDefaultValueExpressionSuperConstructors(DefaultValueExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: DiscardExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void DiscardExpression(DiscardExpressionBuilder _this)
		{
			this.CallDiscardExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of DiscardExpression
		/// </summary>
		protected virtual void CallDiscardExpressionSuperConstructors(DiscardExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: DynamicExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void DynamicExpression(DynamicExpressionBuilder _this)
		{
			this.CallDynamicExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of DynamicExpression
		/// </summary>
		protected virtual void CallDynamicExpressionSuperConstructors(DynamicExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: IncrementOrDecrementExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void IncrementOrDecrementExpression(IncrementOrDecrementExpressionBuilder _this)
		{
			this.CallIncrementOrDecrementExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of IncrementOrDecrementExpression
		/// </summary>
		protected virtual void CallIncrementOrDecrementExpressionSuperConstructors(IncrementOrDecrementExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: IndexerAccessExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void IndexerAccessExpression(IndexerAccessExpressionBuilder _this)
		{
			this.CallIndexerAccessExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of IndexerAccessExpression
		/// </summary>
		protected virtual void CallIndexerAccessExpressionSuperConstructors(IndexerAccessExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: InstanceReferenceExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void InstanceReferenceExpression(InstanceReferenceExpressionBuilder _this)
		{
			this.CallInstanceReferenceExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of InstanceReferenceExpression
		/// </summary>
		protected virtual void CallInstanceReferenceExpressionSuperConstructors(InstanceReferenceExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: InvocationExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void InvocationExpression(InvocationExpressionBuilder _this)
		{
			this.CallInvocationExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of InvocationExpression
		/// </summary>
		protected virtual void CallInvocationExpressionSuperConstructors(InvocationExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: IsTypeExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void IsTypeExpression(IsTypeExpressionBuilder _this)
		{
			this.CallIsTypeExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of IsTypeExpression
		/// </summary>
		protected virtual void CallIsTypeExpressionSuperConstructors(IsTypeExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: LambdaExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void LambdaExpression(LambdaExpressionBuilder _this)
		{
			this.CallLambdaExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of LambdaExpression
		/// </summary>
		protected virtual void CallLambdaExpressionSuperConstructors(LambdaExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: LiteralExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void LiteralExpression(LiteralExpressionBuilder _this)
		{
			this.CallLiteralExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of LiteralExpression
		/// </summary>
		protected virtual void CallLiteralExpressionSuperConstructors(LiteralExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: NameOfExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void NameOfExpression(NameOfExpressionBuilder _this)
		{
			this.CallNameOfExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of NameOfExpression
		/// </summary>
		protected virtual void CallNameOfExpressionSuperConstructors(NameOfExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ObjectCreationExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void ObjectCreationExpression(ObjectCreationExpressionBuilder _this)
		{
			this.CallObjectCreationExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ObjectCreationExpression
		/// </summary>
		protected virtual void CallObjectCreationExpressionSuperConstructors(ObjectCreationExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ParenthesizedExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void ParenthesizedExpression(ParenthesizedExpressionBuilder _this)
		{
			this.CallParenthesizedExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ParenthesizedExpression
		/// </summary>
		protected virtual void CallParenthesizedExpressionSuperConstructors(ParenthesizedExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ReferenceExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void ReferenceExpression(ReferenceExpressionBuilder _this)
		{
			this.CallReferenceExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ReferenceExpression
		/// </summary>
		protected virtual void CallReferenceExpressionSuperConstructors(ReferenceExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: SizeOfExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void SizeOfExpression(SizeOfExpressionBuilder _this)
		{
			this.CallSizeOfExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of SizeOfExpression
		/// </summary>
		protected virtual void CallSizeOfExpressionSuperConstructors(SizeOfExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: TypeOfExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void TypeOfExpression(TypeOfExpressionBuilder _this)
		{
			this.CallTypeOfExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of TypeOfExpression
		/// </summary>
		protected virtual void CallTypeOfExpressionSuperConstructors(TypeOfExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: ThrowExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void ThrowExpression(ThrowExpressionBuilder _this)
		{
			this.CallThrowExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of ThrowExpression
		/// </summary>
		protected virtual void CallThrowExpressionSuperConstructors(ThrowExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: TupleExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void TupleExpression(TupleExpressionBuilder _this)
		{
			this.CallTupleExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of TupleExpression
		/// </summary>
		protected virtual void CallTupleExpressionSuperConstructors(TupleExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: UnaryExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void UnaryExpression(UnaryExpressionBuilder _this)
		{
			this.CallUnaryExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of UnaryExpression
		/// </summary>
		protected virtual void CallUnaryExpressionSuperConstructors(UnaryExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: VariableDeclarationExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void VariableDeclarationExpression(VariableDeclarationExpressionBuilder _this)
		{
			this.CallVariableDeclarationExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of VariableDeclarationExpression
		/// </summary>
		protected virtual void CallVariableDeclarationExpressionSuperConstructors(VariableDeclarationExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	
		/// <summary>
		/// Implements the constructor: VariableDeclarationGroupExpression()
		/// </summary>
		/// Direct superclasses: 
		/// <ul>
		///     <li>Expression</li>
		/// </ul>
		/// All superclasses:
		/// <ul>
		///     <li>Element</li>
		///     <li>Expression</li>
		/// </ul>
		public virtual void VariableDeclarationGroupExpression(VariableDeclarationGroupExpressionBuilder _this)
		{
			this.CallVariableDeclarationGroupExpressionSuperConstructors(_this);
		}
	
		/// <summary>
		/// Calls the super constructors of VariableDeclarationGroupExpression
		/// </summary>
		protected virtual void CallVariableDeclarationGroupExpressionSuperConstructors(VariableDeclarationGroupExpressionBuilder _this)
		{
			this.Element(_this);
			this.Expression(_this);
		}
	
	
	
	}

	public class CoreImplementationProvider
	{
		// If there is a compile error at this line, create a new class called CoreImplementation
		// which is a subclass of global::MetaDslx.Languages.Core.Model.CoreImplementationBase:
		private static CoreImplementation implementation = new CoreImplementation();
	
		public static CoreImplementation Implementation
		{
			get { return implementation; }
		}
	}
}

