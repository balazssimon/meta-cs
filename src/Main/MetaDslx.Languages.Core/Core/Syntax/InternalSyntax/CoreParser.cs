//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Core\Syntax\InternalSyntax\CoreParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Core.Syntax.InternalSyntax {

using MetaDslx.CodeAnalysis.Symbols;
using MetaDslx.Languages.Core.Model;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class CoreParser : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.Antlr4Parser {
    private CoreSyntaxParser SyntaxParser => (CoreSyntaxParser)this.IncrementalAntlr4Parser;
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KNamespace=1, KUsing=2, KExtern=3, KAbstract=4, KInterface=5, KClass=6, 
		KStruct=7, KEnum=8, KNew=9, KNull=10, KTrue=11, KFalse=12, KDynamic=13, 
		KObject=14, KVoid=15, KBool=16, KChar=17, KSByte=18, KByte=19, KShort=20, 
		KUShort=21, KInt=22, KUInt=23, KLong=24, KULong=25, KDecimal=26, KFloat=27, 
		KDouble=28, KString=29, KTypeof=30, KNameof=31, KSizeof=32, KDefault=33, 
		KChecked=34, KUnchecked=35, KAs=36, KIs=37, KNot=38, KThis=39, KBase=40, 
		KAsync=41, KAwait=42, KConst=43, KReadonly=44, KDiscard=45, KVar=46, KFor=47, 
		KTo=48, KForEach=49, KIn=50, KWhile=51, KDo=52, KRepeat=53, KUntil=54, 
		KIf=55, KElse=56, KSwitch=57, KCase=58, KTry=59, KThrow=60, KCatch=61, 
		KWhen=62, KFinally=63, KBreak=64, KContinue=65, KGoto=66, KReturn=67, 
		KLock=68, KStatic=69, TQuestionDot=70, TQuestionOpenBracket=71, TQuestionQuestion=72, 
		TAmpersand=73, THat=74, TBar=75, TAndAlso=76, TOrElse=77, TPlusPlus=78, 
		TMinusMinus=79, TPlus=80, TMinus=81, TTilde=82, TExclamation=83, TSlash=84, 
		TAsterisk=85, TPercent=86, TArrow=87, TLessThanOrEqual=88, TGreaterThanOrEqual=89, 
		TEqual=90, TNotEqual=91, TAsteriskAssign=92, TSlashAssign=93, TPercentAssign=94, 
		TPlusAssign=95, TMinusAssign=96, TLeftShiftAssign=97, TRightShiftAssign=98, 
		TAmpersandAssign=99, THatAssign=100, TBarAssign=101, TDotDot=102, TSemicolon=103, 
		TColon=104, TDot=105, TComma=106, TAssign=107, TOpenParen=108, TCloseParen=109, 
		TOpenBracket=110, TCloseBracket=111, TOpenBrace=112, TCloseBrace=113, 
		TLessThan=114, TGreaterThan=115, TQuestion=116, IdentifierNormal=117, 
		IdentifierVerbatim=118, LInteger=119, LDecimal=120, LScientific=121, LDateTimeOffset=122, 
		LDateTime=123, LDate=124, LTime=125, LRegularString=126, LGuid=127, LUtf8Bom=128, 
		LWhiteSpace=129, LCrLf=130, LLineEnd=131, LSingleLineComment=132, LComment=133, 
		LDoubleQuoteVerbatimString=134, LSingleQuoteVerbatimString=135, DoubleQuoteVerbatimStringLiteralStart=136, 
		SingleQuoteVerbatimStringLiteralStart=137, LCommentStart=138;
	public const int
		RULE_main = 0, RULE_mainBlock = 1, RULE_usingNamespace = 2, RULE_statement = 3, 
		RULE_blockStatement = 4, RULE_bareBlockStatement = 5, RULE_switchCase = 6, 
		RULE_caseClause = 7, RULE_singleValueCaseClause = 8, RULE_defaultCaseClause = 9, 
		RULE_catchClause = 10, RULE_catchFilter = 11, RULE_finallyClause = 12, 
		RULE_usingHeader = 13, RULE_expressionList = 14, RULE_expression = 15, 
		RULE_tupleArguments = 16, RULE_argumentList = 17, RULE_argumentExpression = 18, 
		RULE_initializerExpression = 19, RULE_fieldInitializerExpressions = 20, 
		RULE_fieldInitializerExpression = 21, RULE_collectionInitializerExpressions = 22, 
		RULE_dictionaryInitializerExpressions = 23, RULE_dictionaryInitializerExpression = 24, 
		RULE_lambdaSignature = 25, RULE_implicitLambdaSignature = 26, RULE_implicitParameterList = 27, 
		RULE_implicitParameter = 28, RULE_explicitLambdaSignature = 29, RULE_explicitParameterList = 30, 
		RULE_explicitParameter = 31, RULE_lambdaBody = 32, RULE_variableDefList = 33, 
		RULE_variableDef = 34, RULE_dotOperator = 35, RULE_indexerOperator = 36, 
		RULE_postfixOperator = 37, RULE_unaryOperator = 38, RULE_multiplicativeOperator = 39, 
		RULE_additiveOperator = 40, RULE_shiftOperator = 41, RULE_leftShiftOperator = 42, 
		RULE_rightShiftOperator = 43, RULE_relationalOperator = 44, RULE_equalityOperator = 45, 
		RULE_compoundAssignmentOperator = 46, RULE_returnType = 47, RULE_variableType = 48, 
		RULE_typeReference = 49, RULE_namedType = 50, RULE_genericTypeArguments = 51, 
		RULE_genericTypeArgument = 52, RULE_primitiveType = 53, RULE_voidType = 54, 
		RULE_varType = 55, RULE_name = 56, RULE_qualifiedName = 57, RULE_qualifier = 58, 
		RULE_identifier = 59, RULE_literal = 60, RULE_nullLiteral = 61, RULE_booleanLiteral = 62, 
		RULE_integerLiteral = 63, RULE_decimalLiteral = 64, RULE_scientificLiteral = 65, 
		RULE_stringLiteral = 66;
	public static readonly string[] ruleNames = {
		"main", "mainBlock", "usingNamespace", "statement", "blockStatement", 
		"bareBlockStatement", "switchCase", "caseClause", "singleValueCaseClause", 
		"defaultCaseClause", "catchClause", "catchFilter", "finallyClause", "usingHeader", 
		"expressionList", "expression", "tupleArguments", "argumentList", "argumentExpression", 
		"initializerExpression", "fieldInitializerExpressions", "fieldInitializerExpression", 
		"collectionInitializerExpressions", "dictionaryInitializerExpressions", 
		"dictionaryInitializerExpression", "lambdaSignature", "implicitLambdaSignature", 
		"implicitParameterList", "implicitParameter", "explicitLambdaSignature", 
		"explicitParameterList", "explicitParameter", "lambdaBody", "variableDefList", 
		"variableDef", "dotOperator", "indexerOperator", "postfixOperator", "unaryOperator", 
		"multiplicativeOperator", "additiveOperator", "shiftOperator", "leftShiftOperator", 
		"rightShiftOperator", "relationalOperator", "equalityOperator", "compoundAssignmentOperator", 
		"returnType", "variableType", "typeReference", "namedType", "genericTypeArguments", 
		"genericTypeArgument", "primitiveType", "voidType", "varType", "name", 
		"qualifiedName", "qualifier", "identifier", "literal", "nullLiteral", 
		"booleanLiteral", "integerLiteral", "decimalLiteral", "scientificLiteral", 
		"stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'using'", "'extern'", "'abstract'", "'interface'", 
		"'class'", "'struct'", "'enum'", "'new'", "'null'", "'true'", "'false'", 
		"'dynamic'", "'object'", "'void'", "'bool'", "'char'", "'sbyte'", "'byte'", 
		"'short'", "'ushort'", "'int'", "'uint'", "'long'", "'ulong'", "'decimal'", 
		"'float'", "'double'", "'string'", "'typeof'", "'nameof'", "'sizeof'", 
		"'default'", "'checked'", "'unchecked'", "'as'", "'is'", "'not'", "'this'", 
		"'base'", "'async'", "'await'", "'const'", "'readonly'", "'_'", "'var'", 
		"'for'", "'to'", "'foreach'", "'in'", "'while'", "'do'", "'repeat'", "'until'", 
		"'if'", "'else'", "'switch'", "'case'", "'try'", "'throw'", "'catch'", 
		"'when'", "'finally'", "'break'", "'continue'", "'goto'", "'return'", 
		"'lock'", "'static'", "'?.'", "'?['", "'??'", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", 
		"'=>'", "'<='", "'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", 
		"'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", "'..'", "';'", "':'", 
		"'.'", "','", "'='", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", 
		"'>'", "'?'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'\"'", "'''", "'@\"'", "'@''", 
		"'/*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KUsing", "KExtern", "KAbstract", "KInterface", "KClass", 
		"KStruct", "KEnum", "KNew", "KNull", "KTrue", "KFalse", "KDynamic", "KObject", 
		"KVoid", "KBool", "KChar", "KSByte", "KByte", "KShort", "KUShort", "KInt", 
		"KUInt", "KLong", "KULong", "KDecimal", "KFloat", "KDouble", "KString", 
		"KTypeof", "KNameof", "KSizeof", "KDefault", "KChecked", "KUnchecked", 
		"KAs", "KIs", "KNot", "KThis", "KBase", "KAsync", "KAwait", "KConst", 
		"KReadonly", "KDiscard", "KVar", "KFor", "KTo", "KForEach", "KIn", "KWhile", 
		"KDo", "KRepeat", "KUntil", "KIf", "KElse", "KSwitch", "KCase", "KTry", 
		"KThrow", "KCatch", "KWhen", "KFinally", "KBreak", "KContinue", "KGoto", 
		"KReturn", "KLock", "KStatic", "TQuestionDot", "TQuestionOpenBracket", 
		"TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", "TOrElse", 
		"TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TArrow", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "TDotDot", "TSemicolon", 
		"TColon", "TDot", "TComma", "TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", 
		"TCloseBracket", "TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", 
		"TQuestion", "IdentifierNormal", "IdentifierVerbatim", "LInteger", "LDecimal", 
		"LScientific", "LDateTimeOffset", "LDateTime", "LDate", "LTime", "LRegularString", 
		"LGuid", "LUtf8Bom", "LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", 
		"LComment", "LDoubleQuoteVerbatimString", "LSingleQuoteVerbatimString", 
		"DoubleQuoteVerbatimStringLiteralStart", "SingleQuoteVerbatimStringLiteralStart", 
		"LCommentStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CoreParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CoreParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CoreParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CoreParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainBlockContext mainBlock() {
			return GetRuleContext<MainBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CoreParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingNamespaceContext[] usingNamespace() {
			return GetRuleContexts<UsingNamespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingNamespaceContext usingNamespace(int i) {
			return GetRuleContext<UsingNamespaceContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMain() : _DoParseMain();
	}

	internal MainContext _DoParseMain() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 134;
					usingNamespace();
					}
					} 
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 140;
			mainBlock();
			State = 141;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MainBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainBlockContext mainBlock() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMainBlock() : _DoParseMainBlock();
	}

	internal MainBlockContext _DoParseMainBlock() {
		MainBlockContext _localctx = new MainBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_mainBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KUsing) | (1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KObject) | (1L << KBool) | (1L << KChar) | (1L << KSByte) | (1L << KByte) | (1L << KShort) | (1L << KUShort) | (1L << KInt) | (1L << KUInt) | (1L << KLong) | (1L << KULong) | (1L << KDecimal) | (1L << KFloat) | (1L << KDouble) | (1L << KString) | (1L << KTypeof) | (1L << KNameof) | (1L << KSizeof) | (1L << KDefault) | (1L << KChecked) | (1L << KUnchecked) | (1L << KThis) | (1L << KBase) | (1L << KAwait) | (1L << KConst) | (1L << KDiscard) | (1L << KVar) | (1L << KFor) | (1L << KForEach) | (1L << KWhile) | (1L << KDo) | (1L << KIf) | (1L << KSwitch) | (1L << KTry) | (1L << KThrow))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (KBreak - 64)) | (1L << (KContinue - 64)) | (1L << (KGoto - 64)) | (1L << (KReturn - 64)) | (1L << (KLock - 64)) | (1L << (THat - 64)) | (1L << (TPlusPlus - 64)) | (1L << (TMinusMinus - 64)) | (1L << (TPlus - 64)) | (1L << (TMinus - 64)) | (1L << (TTilde - 64)) | (1L << (TExclamation - 64)) | (1L << (TSemicolon - 64)) | (1L << (TOpenParen - 64)) | (1L << (TOpenBrace - 64)) | (1L << (IdentifierNormal - 64)) | (1L << (IdentifierVerbatim - 64)) | (1L << (LInteger - 64)) | (1L << (LDecimal - 64)) | (1L << (LScientific - 64)) | (1L << (LRegularString - 64)))) != 0)) {
				{
				{
				State = 143;
				statement();
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUsing() { return GetToken(CoreParser.KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CoreParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CoreParser.TAssign, 0); }
		public UsingNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingNamespaceContext usingNamespace() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseUsingNamespace() : _DoParseUsingNamespace();
	}

	internal UsingNamespaceContext _DoParseUsingNamespace() {
		UsingNamespaceContext _localctx = new UsingNamespaceContext(Context, State);
		EnterRule(_localctx, 4, RULE_usingNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(KUsing);
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 150;
				name();
				State = 151;
				Match(TAssign);
				}
				break;
			}
			State = 155;
			qualifier();
			State = 156;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LabeledStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CoreParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : StatementContext {
		public ExpressionListContext before;
		public IToken semicolonBefore;
		public ExpressionContext condition;
		public IToken semicolonAfter;
		public ExpressionListContext atLoopBottom;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFor() { return GetToken(CoreParser.KFor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TSemicolon() { return GetTokens(CoreParser.TSemicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon(int i) {
			return GetToken(CoreParser.TSemicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public ForStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		public ExpressionContext condition;
		public StatementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KWhile() { return GetToken(CoreParser.KWhile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStmtContext : StatementContext {
		public ExpressionContext variable;
		public ExpressionContext collection;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KForEach() { return GetToken(CoreParser.KForEach, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CoreParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForeachStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryStmtContext : StatementContext {
		public BlockStatementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTry() { return GetToken(CoreParser.KTry, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public TryStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingStmtContext : StatementContext {
		public StatementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingHeaderContext[] usingHeader() {
			return GetRuleContexts<UsingHeaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingHeaderContext usingHeader(int i) {
			return GetRuleContext<UsingHeaderContext>(i);
		}
		public UsingStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CoreParser.TSemicolon, 0); }
		public EmptyStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GotoStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KGoto() { return GetToken(CoreParser.KGoto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CoreParser.TSemicolon, 0); }
		public GotoStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StatementContext {
		public ExpressionContext returnedValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KReturn() { return GetToken(CoreParser.KReturn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CoreParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStmtContext : StatementContext {
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSwitch() { return GetToken(CoreParser.KSwitch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBrace() { return GetToken(CoreParser.TOpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBrace() { return GetToken(CoreParser.TCloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseContext[] switchCase() {
			return GetRuleContexts<SwitchCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseContext switchCase(int i) {
			return GetRuleContext<SwitchCaseContext>(i);
		}
		public SwitchStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CoreParser.TSemicolon, 0); }
		public ExprStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : StatementContext {
		public ExpressionContext condition;
		public StatementContext ifTrue;
		public StatementContext ifFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIf() { return GetToken(CoreParser.KIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KElse() { return GetToken(CoreParser.KElse, 0); }
		public IfStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoWhileStmtContext : StatementContext {
		public StatementContext body;
		public ExpressionContext condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDo() { return GetToken(CoreParser.KDo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KWhile() { return GetToken(CoreParser.KWhile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CoreParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoWhileStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public BlockStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KBreak() { return GetToken(CoreParser.KBreak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CoreParser.TSemicolon, 0); }
		public BreakStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KContinue() { return GetToken(CoreParser.KContinue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CoreParser.TSemicolon, 0); }
		public ContinueStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LockStmtContext : StatementContext {
		public ExpressionContext lockedValue;
		public StatementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KLock() { return GetToken(CoreParser.KLock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LockStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseStatement() : _DoParseStatement();
	}

	internal StatementContext _DoParseStatement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new EmptyStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				Match(TSemicolon);
				}
				break;
			case 2:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				blockStatement();
				}
				break;
			case 3:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 160;
				expression(0);
				State = 161;
				Match(TSemicolon);
				}
				break;
			case 4:
				_localctx = new ForeachStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 163;
				Match(KForEach);
				State = 164;
				Match(TOpenParen);
				State = 165;
				((ForeachStmtContext)_localctx).variable = expression(0);
				State = 166;
				Match(TColon);
				State = 167;
				((ForeachStmtContext)_localctx).collection = expression(0);
				State = 168;
				Match(TCloseParen);
				State = 169;
				statement();
				}
				break;
			case 5:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 171;
				Match(KFor);
				State = 172;
				Match(TOpenParen);
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KObject) | (1L << KBool) | (1L << KChar) | (1L << KSByte) | (1L << KByte) | (1L << KShort) | (1L << KUShort) | (1L << KInt) | (1L << KUInt) | (1L << KLong) | (1L << KULong) | (1L << KDecimal) | (1L << KFloat) | (1L << KDouble) | (1L << KString) | (1L << KTypeof) | (1L << KNameof) | (1L << KSizeof) | (1L << KDefault) | (1L << KChecked) | (1L << KUnchecked) | (1L << KThis) | (1L << KBase) | (1L << KAwait) | (1L << KConst) | (1L << KDiscard) | (1L << KVar) | (1L << KThrow))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (THat - 74)) | (1L << (TPlusPlus - 74)) | (1L << (TMinusMinus - 74)) | (1L << (TPlus - 74)) | (1L << (TMinus - 74)) | (1L << (TTilde - 74)) | (1L << (TExclamation - 74)) | (1L << (TOpenParen - 74)) | (1L << (IdentifierNormal - 74)) | (1L << (IdentifierVerbatim - 74)) | (1L << (LInteger - 74)) | (1L << (LDecimal - 74)) | (1L << (LScientific - 74)) | (1L << (LRegularString - 74)))) != 0)) {
					{
					State = 173;
					((ForStmtContext)_localctx).before = expressionList();
					}
				}

				State = 176;
				((ForStmtContext)_localctx).semicolonBefore = Match(TSemicolon);
				State = 177;
				((ForStmtContext)_localctx).condition = expression(0);
				State = 178;
				((ForStmtContext)_localctx).semicolonAfter = Match(TSemicolon);
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KObject) | (1L << KBool) | (1L << KChar) | (1L << KSByte) | (1L << KByte) | (1L << KShort) | (1L << KUShort) | (1L << KInt) | (1L << KUInt) | (1L << KLong) | (1L << KULong) | (1L << KDecimal) | (1L << KFloat) | (1L << KDouble) | (1L << KString) | (1L << KTypeof) | (1L << KNameof) | (1L << KSizeof) | (1L << KDefault) | (1L << KChecked) | (1L << KUnchecked) | (1L << KThis) | (1L << KBase) | (1L << KAwait) | (1L << KConst) | (1L << KDiscard) | (1L << KVar) | (1L << KThrow))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (THat - 74)) | (1L << (TPlusPlus - 74)) | (1L << (TMinusMinus - 74)) | (1L << (TPlus - 74)) | (1L << (TMinus - 74)) | (1L << (TTilde - 74)) | (1L << (TExclamation - 74)) | (1L << (TOpenParen - 74)) | (1L << (IdentifierNormal - 74)) | (1L << (IdentifierVerbatim - 74)) | (1L << (LInteger - 74)) | (1L << (LDecimal - 74)) | (1L << (LScientific - 74)) | (1L << (LRegularString - 74)))) != 0)) {
					{
					State = 179;
					((ForStmtContext)_localctx).atLoopBottom = expressionList();
					}
				}

				State = 182;
				Match(TCloseParen);
				State = 183;
				statement();
				}
				break;
			case 6:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 185;
				Match(KIf);
				State = 186;
				Match(TOpenParen);
				State = 187;
				((IfStmtContext)_localctx).condition = expression(0);
				State = 188;
				Match(TCloseParen);
				State = 189;
				((IfStmtContext)_localctx).ifTrue = statement();
				{
				State = 190;
				Match(KElse);
				State = 191;
				((IfStmtContext)_localctx).ifFalse = statement();
				}
				}
				break;
			case 7:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 193;
				Match(KBreak);
				State = 194;
				Match(TSemicolon);
				}
				break;
			case 8:
				_localctx = new ContinueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 195;
				Match(KContinue);
				State = 196;
				Match(TSemicolon);
				}
				break;
			case 9:
				_localctx = new GotoStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 197;
				Match(KGoto);
				State = 198;
				identifier();
				State = 199;
				Match(TSemicolon);
				}
				break;
			case 10:
				_localctx = new LabeledStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 201;
				name();
				State = 202;
				Match(TColon);
				State = 203;
				statement();
				}
				break;
			case 11:
				_localctx = new LockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 205;
				Match(KLock);
				State = 206;
				Match(TOpenParen);
				State = 207;
				((LockStmtContext)_localctx).lockedValue = expression(0);
				State = 208;
				Match(TCloseParen);
				State = 209;
				((LockStmtContext)_localctx).body = statement();
				}
				break;
			case 12:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 211;
				Match(KReturn);
				State = 212;
				((ReturnStmtContext)_localctx).returnedValue = expression(0);
				State = 213;
				Match(TSemicolon);
				}
				break;
			case 13:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 215;
				Match(KSwitch);
				State = 216;
				Match(TOpenParen);
				State = 217;
				((SwitchStmtContext)_localctx).value = expression(0);
				State = 218;
				Match(TCloseParen);
				State = 219;
				Match(TOpenBrace);
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==KDefault || _la==KCase) {
					{
					{
					State = 220;
					switchCase();
					}
					}
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 226;
				Match(TCloseBrace);
				}
				break;
			case 14:
				_localctx = new TryStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 228;
				Match(KTry);
				State = 229;
				((TryStmtContext)_localctx).body = blockStatement();
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==KCatch) {
					{
					{
					State = 230;
					catchClause();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KFinally) {
					{
					State = 236;
					finallyClause();
					}
				}

				}
				break;
			case 15:
				_localctx = new UsingStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 240;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 239;
						usingHeader();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 242;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 244;
				((UsingStmtContext)_localctx).body = statement();
				}
				break;
			case 16:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 246;
				Match(KWhile);
				State = 247;
				Match(TOpenParen);
				State = 248;
				((WhileStmtContext)_localctx).condition = expression(0);
				State = 249;
				Match(TCloseParen);
				State = 250;
				((WhileStmtContext)_localctx).body = statement();
				}
				break;
			case 17:
				_localctx = new DoWhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 252;
				Match(KDo);
				State = 253;
				((DoWhileStmtContext)_localctx).body = statement();
				State = 254;
				Match(KWhile);
				State = 255;
				Match(TOpenParen);
				State = 256;
				((DoWhileStmtContext)_localctx).condition = expression(0);
				State = 257;
				Match(TCloseParen);
				State = 258;
				Match(TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBrace() { return GetToken(CoreParser.TOpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBrace() { return GetToken(CoreParser.TCloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseBlockStatement() : _DoParseBlockStatement();
	}

	internal BlockStatementContext _DoParseBlockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(TOpenBrace);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KUsing) | (1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KObject) | (1L << KBool) | (1L << KChar) | (1L << KSByte) | (1L << KByte) | (1L << KShort) | (1L << KUShort) | (1L << KInt) | (1L << KUInt) | (1L << KLong) | (1L << KULong) | (1L << KDecimal) | (1L << KFloat) | (1L << KDouble) | (1L << KString) | (1L << KTypeof) | (1L << KNameof) | (1L << KSizeof) | (1L << KDefault) | (1L << KChecked) | (1L << KUnchecked) | (1L << KThis) | (1L << KBase) | (1L << KAwait) | (1L << KConst) | (1L << KDiscard) | (1L << KVar) | (1L << KFor) | (1L << KForEach) | (1L << KWhile) | (1L << KDo) | (1L << KIf) | (1L << KSwitch) | (1L << KTry) | (1L << KThrow))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (KBreak - 64)) | (1L << (KContinue - 64)) | (1L << (KGoto - 64)) | (1L << (KReturn - 64)) | (1L << (KLock - 64)) | (1L << (THat - 64)) | (1L << (TPlusPlus - 64)) | (1L << (TMinusMinus - 64)) | (1L << (TPlus - 64)) | (1L << (TMinus - 64)) | (1L << (TTilde - 64)) | (1L << (TExclamation - 64)) | (1L << (TSemicolon - 64)) | (1L << (TOpenParen - 64)) | (1L << (TOpenBrace - 64)) | (1L << (IdentifierNormal - 64)) | (1L << (IdentifierVerbatim - 64)) | (1L << (LInteger - 64)) | (1L << (LDecimal - 64)) | (1L << (LScientific - 64)) | (1L << (LRegularString - 64)))) != 0)) {
				{
				{
				State = 263;
				statement();
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 269;
			Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BareBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BareBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bareBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBareBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BareBlockStatementContext bareBlockStatement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseBareBlockStatement() : _DoParseBareBlockStatement();
	}

	internal BareBlockStatementContext _DoParseBareBlockStatement() {
		BareBlockStatementContext _localctx = new BareBlockStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_bareBlockStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 271;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BareBlockStatementContext bareBlockStatement() {
			return GetRuleContext<BareBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public SwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseContext switchCase() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseSwitchCase() : _DoParseSwitchCase();
	}

	internal SwitchCaseContext _DoParseSwitchCase() {
		SwitchCaseContext _localctx = new SwitchCaseContext(Context, State);
		EnterRule(_localctx, 12, RULE_switchCase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 276;
					caseClause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 281;
			bareBlockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleValueCaseClauseContext singleValueCaseClause() {
			return GetRuleContext<SingleValueCaseClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCaseClauseContext defaultCaseClause() {
			return GetRuleContext<DefaultCaseClauseContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCaseClause() : _DoParseCaseClause();
	}

	internal CaseClauseContext _DoParseCaseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_caseClause);
		try {
			State = 285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KCase:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				singleValueCaseClause();
				}
				break;
			case KDefault:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284;
				defaultCaseClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleValueCaseClauseContext : ParserRuleContext {
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCase() { return GetToken(CoreParser.KCase, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CoreParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SingleValueCaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleValueCaseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleValueCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleValueCaseClauseContext singleValueCaseClause() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseSingleValueCaseClause() : _DoParseSingleValueCaseClause();
	}

	internal SingleValueCaseClauseContext _DoParseSingleValueCaseClause() {
		SingleValueCaseClauseContext _localctx = new SingleValueCaseClauseContext(Context, State);
		EnterRule(_localctx, 16, RULE_singleValueCaseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(KCase);
			State = 288;
			_localctx.value = expression(0);
			State = 289;
			Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDefault() { return GetToken(CoreParser.KDefault, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CoreParser.TColon, 0); }
		public DefaultCaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCaseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCaseClauseContext defaultCaseClause() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDefaultCaseClause() : _DoParseDefaultCaseClause();
	}

	internal DefaultCaseClauseContext _DoParseDefaultCaseClause() {
		DefaultCaseClauseContext _localctx = new DefaultCaseClauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_defaultCaseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(KDefault);
			State = 292;
			Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		public ExpressionContext value;
		public BlockStatementContext handler;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCatch() { return GetToken(CoreParser.KCatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchFilterContext catchFilter() {
			return GetRuleContext<CatchFilterContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCatchClause() : _DoParseCatchClause();
	}

	internal CatchClauseContext _DoParseCatchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_catchClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(KCatch);
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOpenParen) {
				{
				State = 295;
				Match(TOpenParen);
				State = 296;
				_localctx.value = expression(0);
				State = 297;
				Match(TCloseParen);
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KWhen) {
					{
					State = 298;
					catchFilter();
					}
				}

				}
			}

			State = 303;
			_localctx.handler = blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchFilterContext : ParserRuleContext {
		public ExpressionContext filter;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KWhen() { return GetToken(CoreParser.KWhen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CatchFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchFilterContext catchFilter() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCatchFilter() : _DoParseCatchFilter();
	}

	internal CatchFilterContext _DoParseCatchFilter() {
		CatchFilterContext _localctx = new CatchFilterContext(Context, State);
		EnterRule(_localctx, 22, RULE_catchFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(KWhen);
			State = 306;
			_localctx.filter = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public BlockStatementContext handler;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFinally() { return GetToken(CoreParser.KFinally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFinallyClause() : _DoParseFinallyClause();
	}

	internal FinallyClauseContext _DoParseFinallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 24, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(KFinally);
			State = 309;
			_localctx.handler = blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingHeaderContext : ParserRuleContext {
		public ExpressionContext resource;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUsing() { return GetToken(CoreParser.KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UsingHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingHeaderContext usingHeader() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseUsingHeader() : _DoParseUsingHeader();
	}

	internal UsingHeaderContext _DoParseUsingHeader() {
		UsingHeaderContext _localctx = new UsingHeaderContext(Context, State);
		EnterRule(_localctx, 26, RULE_usingHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(KUsing);
			State = 312;
			Match(TOpenParen);
			State = 313;
			_localctx.resource = expression(0);
			State = 314;
			Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseExpressionList() : _DoParseExpressionList();
	}

	internal ExpressionListContext _DoParseExpressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 28, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			expression(0);
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 317;
				Match(TComma);
				State = 318;
				expression(0);
				}
				}
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNew() { return GetToken(CoreParser.KNew, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerExpressionContext initializerExpression() {
			return GetRuleContext<InitializerExpressionContext>(0);
		}
		public NewExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrElseExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOrElse() { return GetToken(CoreParser.TOrElse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrElseExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrElseExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KThis() { return GetToken(CoreParser.KThis, 0); }
		public ThisExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompAssignExprContext : ExpressionContext {
		public ExpressionContext target;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignmentOperatorContext compoundAssignmentOperator() {
			return GetRuleContext<CompoundAssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompAssignExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTypeof() { return GetToken(CoreParser.KTypeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public TypeofExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondExprContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext whenTrue;
		public ExpressionContext whenFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestion() { return GetToken(CoreParser.TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CoreParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CondExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UncheckedExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUnchecked() { return GetToken(CoreParser.KUnchecked, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public UncheckedExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUncheckedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeCastExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeCastExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCastExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THat() { return GetToken(CoreParser.THat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexerOperatorContext indexerOperator() {
			return GetRuleContext<IndexerOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(CoreParser.TCloseBracket, 0); }
		public IndexerExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexerExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostfixUnaryExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixOperatorContext postfixOperator() {
			return GetRuleContext<PostfixOperatorContext>(0);
		}
		public PostfixUnaryExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvocationExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public InvocationExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaSignatureContext lambdaSignature() {
			return GetRuleContext<LambdaSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TArrow() { return GetToken(CoreParser.TArrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public ParenthesizedExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeIsExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIs() { return GetToken(CoreParser.KIs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNot() { return GetToken(CoreParser.KNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeIsExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DiscardExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDiscard() { return GetToken(CoreParser.KDiscard, 0); }
		public DiscardExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExprContext : ExpressionContext {
		public ExpressionContext target;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CoreParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifierExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotOperatorContext dotOperator() {
			return GetRuleContext<DotOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeArgumentsContext genericTypeArguments() {
			return GetRuleContext<GenericTypeArgumentsContext>(0);
		}
		public QualifierExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KThrow() { return GetToken(CoreParser.KThrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TBar() { return GetToken(CoreParser.TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndAlsoExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAndAlso() { return GetToken(CoreParser.TAndAlso, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndAlsoExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndAlsoExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AwaitExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KAwait() { return GetToken(CoreParser.KAwait, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameofExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNameof() { return GetToken(CoreParser.KNameof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public NameofExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameofExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckedExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KChecked() { return GetToken(CoreParser.KChecked, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public CheckedExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeOperatorContext multiplicativeOperator() {
			return GetRuleContext<MultiplicativeOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalExprContext : ExpressionContext {
		public ExpressionContext value;
		public ExpressionContext whenNull;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestionQuestion() { return GetToken(CoreParser.TQuestionQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOperatorContext shiftOperator() {
			return GetRuleContext<ShiftOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SizeofExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSizeof() { return GetToken(CoreParser.KSizeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public SizeofExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeofExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullForgivingExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TExclamation() { return GetToken(CoreParser.TExclamation, 0); }
		public NullForgivingExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullForgivingExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public EqualityOperatorContext equalityOperator() {
			return GetRuleContext<EqualityOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveOperatorContext additiveOperator() {
			return GetRuleContext<AdditiveOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeAsExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KAs() { return GetToken(CoreParser.KAs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeAsExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDefault() { return GetToken(CoreParser.KDefault, 0); }
		public DefaultExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BaseExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KBase() { return GetToken(CoreParser.KBase, 0); }
		public BaseExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleArgumentsContext tupleArguments() {
			return GetRuleContext<TupleArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public TupleExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDefExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefListContext variableDefList() {
			return GetRuleContext<VariableDefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KConst() { return GetToken(CoreParser.KConst, 0); }
		public VarDefExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDefExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDotDot() { return GetToken(CoreParser.TDotDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RangeExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeArgumentsContext genericTypeArguments() {
			return GetRuleContext<GenericTypeArgumentsContext>(0);
		}
		public IdentifierExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAmpersand() { return GetToken(CoreParser.TAmpersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseExpression(_p) : _DoParseExpression(_p);
	}

	internal ExpressionContext _DoParseExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				_localctx = new ParenthesizedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 325;
				Match(TOpenParen);
				State = 326;
				expression(0);
				State = 327;
				Match(TCloseParen);
				}
				break;
			case 2:
				{
				_localctx = new TupleExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 329;
				Match(TOpenParen);
				State = 330;
				tupleArguments();
				State = 331;
				Match(TCloseParen);
				}
				break;
			case 3:
				{
				_localctx = new DiscardExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 333;
				Match(KDiscard);
				}
				break;
			case 4:
				{
				_localctx = new DefaultExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 334;
				Match(KDefault);
				}
				break;
			case 5:
				{
				_localctx = new ThisExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 335;
				Match(KThis);
				}
				break;
			case 6:
				{
				_localctx = new BaseExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 336;
				Match(KBase);
				}
				break;
			case 7:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 337;
				literal();
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 338;
				identifier();
				State = 340;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 339;
					genericTypeArguments();
					}
					break;
				}
				}
				break;
			case 9:
				{
				_localctx = new TypeofExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 342;
				Match(KTypeof);
				State = 343;
				Match(TOpenParen);
				State = 344;
				typeReference(0);
				State = 345;
				Match(TCloseParen);
				}
				break;
			case 10:
				{
				_localctx = new NameofExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 347;
				Match(KNameof);
				State = 348;
				Match(TOpenParen);
				State = 349;
				expression(0);
				State = 350;
				Match(TCloseParen);
				}
				break;
			case 11:
				{
				_localctx = new SizeofExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 352;
				Match(KSizeof);
				State = 353;
				Match(TOpenParen);
				State = 354;
				typeReference(0);
				State = 355;
				Match(TCloseParen);
				}
				break;
			case 12:
				{
				_localctx = new CheckedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 357;
				Match(KChecked);
				State = 358;
				Match(TOpenParen);
				State = 359;
				expression(0);
				State = 360;
				Match(TCloseParen);
				}
				break;
			case 13:
				{
				_localctx = new UncheckedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 362;
				Match(KUnchecked);
				State = 363;
				Match(TOpenParen);
				State = 364;
				expression(0);
				State = 365;
				Match(TCloseParen);
				}
				break;
			case 14:
				{
				_localctx = new NewExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 367;
				Match(KNew);
				State = 368;
				typeReference(0);
				State = 369;
				Match(TOpenParen);
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KObject) | (1L << KBool) | (1L << KChar) | (1L << KSByte) | (1L << KByte) | (1L << KShort) | (1L << KUShort) | (1L << KInt) | (1L << KUInt) | (1L << KLong) | (1L << KULong) | (1L << KDecimal) | (1L << KFloat) | (1L << KDouble) | (1L << KString) | (1L << KTypeof) | (1L << KNameof) | (1L << KSizeof) | (1L << KDefault) | (1L << KChecked) | (1L << KUnchecked) | (1L << KThis) | (1L << KBase) | (1L << KAwait) | (1L << KConst) | (1L << KDiscard) | (1L << KVar) | (1L << KThrow))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (THat - 74)) | (1L << (TPlusPlus - 74)) | (1L << (TMinusMinus - 74)) | (1L << (TPlus - 74)) | (1L << (TMinus - 74)) | (1L << (TTilde - 74)) | (1L << (TExclamation - 74)) | (1L << (TOpenParen - 74)) | (1L << (IdentifierNormal - 74)) | (1L << (IdentifierVerbatim - 74)) | (1L << (LInteger - 74)) | (1L << (LDecimal - 74)) | (1L << (LScientific - 74)) | (1L << (LRegularString - 74)))) != 0)) {
					{
					State = 370;
					argumentList();
					}
				}

				State = 373;
				Match(TCloseParen);
				State = 375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 374;
					initializerExpression();
					}
					break;
				}
				}
				break;
			case 15:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 377;
				unaryOperator();
				State = 378;
				expression(23);
				}
				break;
			case 16:
				{
				_localctx = new TypeCastExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 380;
				Match(TOpenParen);
				State = 381;
				typeReference(0);
				State = 382;
				Match(TCloseParen);
				State = 383;
				expression(22);
				}
				break;
			case 17:
				{
				_localctx = new AwaitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 385;
				Match(KAwait);
				State = 386;
				expression(21);
				}
				break;
			case 18:
				{
				_localctx = new ThrowExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 387;
				Match(KThrow);
				State = 388;
				expression(7);
				}
				break;
			case 19:
				{
				_localctx = new LambdaExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 389;
				lambdaSignature();
				State = 390;
				Match(TArrow);
				State = 391;
				lambdaBody();
				}
				break;
			case 20:
				{
				_localctx = new VarDefExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KConst) {
					{
					State = 393;
					Match(KConst);
					}
				}

				State = 396;
				variableType();
				State = 397;
				variableDefList();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 490;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 488;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new RangeExprContext(new ExpressionContext(_parentctx, _parentState));
						((RangeExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 401;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 402;
						Match(TDotDot);
						State = 403;
						((RangeExprContext)_localctx).right = expression(21);
						}
						break;
					case 2:
						{
						_localctx = new MultExprContext(new ExpressionContext(_parentctx, _parentState));
						((MultExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 404;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 405;
						multiplicativeOperator();
						State = 406;
						((MultExprContext)_localctx).right = expression(20);
						}
						break;
					case 3:
						{
						_localctx = new AddExprContext(new ExpressionContext(_parentctx, _parentState));
						((AddExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 408;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 409;
						additiveOperator();
						State = 410;
						((AddExprContext)_localctx).right = expression(19);
						}
						break;
					case 4:
						{
						_localctx = new ShiftExprContext(new ExpressionContext(_parentctx, _parentState));
						((ShiftExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 412;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 413;
						shiftOperator();
						State = 414;
						((ShiftExprContext)_localctx).right = expression(18);
						}
						break;
					case 5:
						{
						_localctx = new RelExprContext(new ExpressionContext(_parentctx, _parentState));
						((RelExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 416;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 417;
						relationalOperator();
						State = 418;
						((RelExprContext)_localctx).right = expression(17);
						}
						break;
					case 6:
						{
						_localctx = new EqExprContext(new ExpressionContext(_parentctx, _parentState));
						((EqExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 420;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 421;
						equalityOperator();
						State = 422;
						((EqExprContext)_localctx).right = expression(14);
						}
						break;
					case 7:
						{
						_localctx = new AndExprContext(new ExpressionContext(_parentctx, _parentState));
						((AndExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 424;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 425;
						Match(TAmpersand);
						State = 426;
						((AndExprContext)_localctx).right = expression(13);
						}
						break;
					case 8:
						{
						_localctx = new XorExprContext(new ExpressionContext(_parentctx, _parentState));
						((XorExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 427;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 428;
						Match(THat);
						State = 429;
						((XorExprContext)_localctx).right = expression(12);
						}
						break;
					case 9:
						{
						_localctx = new OrExprContext(new ExpressionContext(_parentctx, _parentState));
						((OrExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 430;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 431;
						Match(TBar);
						State = 432;
						((OrExprContext)_localctx).right = expression(11);
						}
						break;
					case 10:
						{
						_localctx = new AndAlsoExprContext(new ExpressionContext(_parentctx, _parentState));
						((AndAlsoExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 433;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 434;
						Match(TAndAlso);
						State = 435;
						((AndAlsoExprContext)_localctx).right = expression(10);
						}
						break;
					case 11:
						{
						_localctx = new OrElseExprContext(new ExpressionContext(_parentctx, _parentState));
						((OrElseExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 436;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 437;
						Match(TOrElse);
						State = 438;
						((OrElseExprContext)_localctx).right = expression(9);
						}
						break;
					case 12:
						{
						_localctx = new CoalExprContext(new ExpressionContext(_parentctx, _parentState));
						((CoalExprContext)_localctx).value = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 439;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 440;
						Match(TQuestionQuestion);
						State = 441;
						((CoalExprContext)_localctx).whenNull = expression(7);
						}
						break;
					case 13:
						{
						_localctx = new CondExprContext(new ExpressionContext(_parentctx, _parentState));
						((CondExprContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 442;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 443;
						Match(TQuestion);
						State = 444;
						((CondExprContext)_localctx).whenTrue = expression(0);
						State = 445;
						Match(TColon);
						State = 446;
						((CondExprContext)_localctx).whenFalse = expression(6);
						}
						break;
					case 14:
						{
						_localctx = new AssignExprContext(new ExpressionContext(_parentctx, _parentState));
						((AssignExprContext)_localctx).target = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 448;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 449;
						Match(TAssign);
						State = 450;
						((AssignExprContext)_localctx).value = expression(5);
						}
						break;
					case 15:
						{
						_localctx = new CompAssignExprContext(new ExpressionContext(_parentctx, _parentState));
						((CompAssignExprContext)_localctx).target = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 451;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 452;
						compoundAssignmentOperator();
						State = 453;
						((CompAssignExprContext)_localctx).value = expression(4);
						}
						break;
					case 16:
						{
						_localctx = new QualifierExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 455;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 456;
						dotOperator();
						State = 457;
						identifier();
						State = 459;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
						case 1:
							{
							State = 458;
							genericTypeArguments();
							}
							break;
						}
						}
						break;
					case 17:
						{
						_localctx = new IndexerExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 461;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 462;
						indexerOperator();
						State = 463;
						argumentList();
						State = 464;
						Match(TCloseBracket);
						}
						break;
					case 18:
						{
						_localctx = new InvocationExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 466;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 467;
						Match(TOpenParen);
						State = 469;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KObject) | (1L << KBool) | (1L << KChar) | (1L << KSByte) | (1L << KByte) | (1L << KShort) | (1L << KUShort) | (1L << KInt) | (1L << KUInt) | (1L << KLong) | (1L << KULong) | (1L << KDecimal) | (1L << KFloat) | (1L << KDouble) | (1L << KString) | (1L << KTypeof) | (1L << KNameof) | (1L << KSizeof) | (1L << KDefault) | (1L << KChecked) | (1L << KUnchecked) | (1L << KThis) | (1L << KBase) | (1L << KAwait) | (1L << KConst) | (1L << KDiscard) | (1L << KVar) | (1L << KThrow))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (THat - 74)) | (1L << (TPlusPlus - 74)) | (1L << (TMinusMinus - 74)) | (1L << (TPlus - 74)) | (1L << (TMinus - 74)) | (1L << (TTilde - 74)) | (1L << (TExclamation - 74)) | (1L << (TOpenParen - 74)) | (1L << (IdentifierNormal - 74)) | (1L << (IdentifierVerbatim - 74)) | (1L << (LInteger - 74)) | (1L << (LDecimal - 74)) | (1L << (LScientific - 74)) | (1L << (LRegularString - 74)))) != 0)) {
							{
							State = 468;
							argumentList();
							}
						}

						State = 471;
						Match(TCloseParen);
						}
						break;
					case 19:
						{
						_localctx = new PostfixUnaryExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 472;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 473;
						postfixOperator();
						}
						break;
					case 20:
						{
						_localctx = new NullForgivingExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 474;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 475;
						Match(TExclamation);
						}
						break;
					case 21:
						{
						_localctx = new TypeIsExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 476;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 477;
						Match(KIs);
						State = 479;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==KNot) {
							{
							State = 478;
							Match(KNot);
							}
						}

						State = 481;
						typeReference(0);
						State = 483;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
						case 1:
							{
							State = 482;
							name();
							}
							break;
						}
						}
						break;
					case 22:
						{
						_localctx = new TypeAsExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 485;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 486;
						Match(KAs);
						State = 487;
						typeReference(0);
						}
						break;
					}
					} 
				}
				State = 492;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TupleArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma() { return GetToken(CoreParser.TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TupleArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleArgumentsContext tupleArguments() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTupleArguments() : _DoParseTupleArguments();
	}

	internal TupleArgumentsContext _DoParseTupleArguments() {
		TupleArgumentsContext _localctx = new TupleArgumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_tupleArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			argumentExpression();
			State = 494;
			Match(TComma);
			State = 495;
			argumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext[] argumentExpression() {
			return GetRuleContexts<ArgumentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext argumentExpression(int i) {
			return GetRuleContext<ArgumentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseArgumentList() : _DoParseArgumentList();
	}

	internal ArgumentListContext _DoParseArgumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 34, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			argumentExpression();
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 498;
				Match(TComma);
				State = 499;
				argumentExpression();
				}
				}
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CoreParser.TColon, 0); }
		public ArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionContext argumentExpression() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseArgumentExpression() : _DoParseArgumentExpression();
	}

	internal ArgumentExpressionContext _DoParseArgumentExpression() {
		ArgumentExpressionContext _localctx = new ArgumentExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_argumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 505;
				name();
				State = 506;
				Match(TColon);
				}
				break;
			}
			State = 510;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerExpressionsContext fieldInitializerExpressions() {
			return GetRuleContext<FieldInitializerExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionInitializerExpressionsContext collectionInitializerExpressions() {
			return GetRuleContext<CollectionInitializerExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryInitializerExpressionsContext dictionaryInitializerExpressions() {
			return GetRuleContext<DictionaryInitializerExpressionsContext>(0);
		}
		public InitializerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerExpressionContext initializerExpression() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseInitializerExpression() : _DoParseInitializerExpression();
	}

	internal InitializerExpressionContext _DoParseInitializerExpression() {
		InitializerExpressionContext _localctx = new InitializerExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_initializerExpression);
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 512;
				fieldInitializerExpressions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 513;
				collectionInitializerExpressions();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 514;
				dictionaryInitializerExpressions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldInitializerExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerExpressionContext[] fieldInitializerExpression() {
			return GetRuleContexts<FieldInitializerExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerExpressionContext fieldInitializerExpression(int i) {
			return GetRuleContext<FieldInitializerExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public FieldInitializerExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldInitializerExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldInitializerExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldInitializerExpressionsContext fieldInitializerExpressions() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldInitializerExpressions() : _DoParseFieldInitializerExpressions();
	}

	internal FieldInitializerExpressionsContext _DoParseFieldInitializerExpressions() {
		FieldInitializerExpressionsContext _localctx = new FieldInitializerExpressionsContext(Context, State);
		EnterRule(_localctx, 40, RULE_fieldInitializerExpressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			fieldInitializerExpression();
			State = 522;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 518;
					Match(TComma);
					State = 519;
					fieldInitializerExpression();
					}
					} 
				}
				State = 524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldInitializerExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CoreParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldInitializerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldInitializerExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldInitializerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldInitializerExpressionContext fieldInitializerExpression() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldInitializerExpression() : _DoParseFieldInitializerExpression();
	}

	internal FieldInitializerExpressionContext _DoParseFieldInitializerExpression() {
		FieldInitializerExpressionContext _localctx = new FieldInitializerExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_fieldInitializerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			identifier();
			State = 526;
			Match(TAssign);
			State = 527;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionInitializerExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public CollectionInitializerExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionInitializerExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionInitializerExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionInitializerExpressionsContext collectionInitializerExpressions() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCollectionInitializerExpressions() : _DoParseCollectionInitializerExpressions();
	}

	internal CollectionInitializerExpressionsContext _DoParseCollectionInitializerExpressions() {
		CollectionInitializerExpressionsContext _localctx = new CollectionInitializerExpressionsContext(Context, State);
		EnterRule(_localctx, 44, RULE_collectionInitializerExpressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			expression(0);
			State = 534;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 530;
					Match(TComma);
					State = 531;
					expression(0);
					}
					} 
				}
				State = 536;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryInitializerExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryInitializerExpressionContext[] dictionaryInitializerExpression() {
			return GetRuleContexts<DictionaryInitializerExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryInitializerExpressionContext dictionaryInitializerExpression(int i) {
			return GetRuleContext<DictionaryInitializerExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public DictionaryInitializerExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryInitializerExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryInitializerExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryInitializerExpressionsContext dictionaryInitializerExpressions() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDictionaryInitializerExpressions() : _DoParseDictionaryInitializerExpressions();
	}

	internal DictionaryInitializerExpressionsContext _DoParseDictionaryInitializerExpressions() {
		DictionaryInitializerExpressionsContext _localctx = new DictionaryInitializerExpressionsContext(Context, State);
		EnterRule(_localctx, 46, RULE_dictionaryInitializerExpressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			dictionaryInitializerExpression();
			State = 542;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 538;
					Match(TComma);
					State = 539;
					dictionaryInitializerExpression();
					}
					} 
				}
				State = 544;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryInitializerExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(CoreParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(CoreParser.TCloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CoreParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DictionaryInitializerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryInitializerExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryInitializerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryInitializerExpressionContext dictionaryInitializerExpression() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDictionaryInitializerExpression() : _DoParseDictionaryInitializerExpression();
	}

	internal DictionaryInitializerExpressionContext _DoParseDictionaryInitializerExpression() {
		DictionaryInitializerExpressionContext _localctx = new DictionaryInitializerExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_dictionaryInitializerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(TOpenBracket);
			State = 546;
			identifier();
			State = 547;
			Match(TCloseBracket);
			State = 548;
			Match(TAssign);
			State = 549;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitLambdaSignatureContext implicitLambdaSignature() {
			return GetRuleContext<ImplicitLambdaSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitLambdaSignatureContext explicitLambdaSignature() {
			return GetRuleContext<ExplicitLambdaSignatureContext>(0);
		}
		public LambdaSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaSignatureContext lambdaSignature() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLambdaSignature() : _DoParseLambdaSignature();
	}

	internal LambdaSignatureContext _DoParseLambdaSignature() {
		LambdaSignatureContext _localctx = new LambdaSignatureContext(Context, State);
		EnterRule(_localctx, 50, RULE_lambdaSignature);
		try {
			State = 553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551;
				implicitLambdaSignature();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552;
				explicitLambdaSignature();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitLambdaSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitParameterContext implicitParameter() {
			return GetRuleContext<ImplicitParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitParameterListContext implicitParameterList() {
			return GetRuleContext<ImplicitParameterListContext>(0);
		}
		public ImplicitLambdaSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitLambdaSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitLambdaSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitLambdaSignatureContext implicitLambdaSignature() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseImplicitLambdaSignature() : _DoParseImplicitLambdaSignature();
	}

	internal ImplicitLambdaSignatureContext _DoParseImplicitLambdaSignature() {
		ImplicitLambdaSignatureContext _localctx = new ImplicitLambdaSignatureContext(Context, State);
		EnterRule(_localctx, 52, RULE_implicitLambdaSignature);
		try {
			State = 557;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 555;
				implicitParameter();
				}
				break;
			case TOpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 556;
				implicitParameterList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitParameterContext[] implicitParameter() {
			return GetRuleContexts<ImplicitParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitParameterContext implicitParameter(int i) {
			return GetRuleContext<ImplicitParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public ImplicitParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitParameterListContext implicitParameterList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseImplicitParameterList() : _DoParseImplicitParameterList();
	}

	internal ImplicitParameterListContext _DoParseImplicitParameterList() {
		ImplicitParameterListContext _localctx = new ImplicitParameterListContext(Context, State);
		EnterRule(_localctx, 54, RULE_implicitParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(TOpenParen);
			State = 560;
			implicitParameter();
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 561;
				Match(TComma);
				State = 562;
				implicitParameter();
				}
				}
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 568;
			Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ImplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitParameterContext implicitParameter() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseImplicitParameter() : _DoParseImplicitParameter();
	}

	internal ImplicitParameterContext _DoParseImplicitParameter() {
		ImplicitParameterContext _localctx = new ImplicitParameterContext(Context, State);
		EnterRule(_localctx, 56, RULE_implicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitLambdaSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitParameterListContext explicitParameterList() {
			return GetRuleContext<ExplicitParameterListContext>(0);
		}
		public ExplicitLambdaSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitLambdaSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitLambdaSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitLambdaSignatureContext explicitLambdaSignature() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseExplicitLambdaSignature() : _DoParseExplicitLambdaSignature();
	}

	internal ExplicitLambdaSignatureContext _DoParseExplicitLambdaSignature() {
		ExplicitLambdaSignatureContext _localctx = new ExplicitLambdaSignatureContext(Context, State);
		EnterRule(_localctx, 58, RULE_explicitLambdaSignature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			explicitParameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitParameterContext[] explicitParameter() {
			return GetRuleContexts<ExplicitParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitParameterContext explicitParameter(int i) {
			return GetRuleContext<ExplicitParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public ExplicitParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitParameterListContext explicitParameterList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseExplicitParameterList() : _DoParseExplicitParameterList();
	}

	internal ExplicitParameterListContext _DoParseExplicitParameterList() {
		ExplicitParameterListContext _localctx = new ExplicitParameterListContext(Context, State);
		EnterRule(_localctx, 60, RULE_explicitParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(TOpenParen);
			State = 575;
			explicitParameter();
			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 576;
				Match(TComma);
				State = 577;
				explicitParameter();
				}
				}
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 583;
			Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitParameterContext explicitParameter() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseExplicitParameter() : _DoParseExplicitParameter();
	}

	internal ExplicitParameterContext _DoParseExplicitParameter() {
		ExplicitParameterContext _localctx = new ExplicitParameterContext(Context, State);
		EnterRule(_localctx, 62, RULE_explicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			typeReference(0);
			State = 586;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLambdaBody() : _DoParseLambdaBody();
	}

	internal LambdaBodyContext _DoParseLambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 64, RULE_lambdaBody);
		try {
			State = 590;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNew:
			case KNull:
			case KTrue:
			case KFalse:
			case KObject:
			case KBool:
			case KChar:
			case KSByte:
			case KByte:
			case KShort:
			case KUShort:
			case KInt:
			case KUInt:
			case KLong:
			case KULong:
			case KDecimal:
			case KFloat:
			case KDouble:
			case KString:
			case KTypeof:
			case KNameof:
			case KSizeof:
			case KDefault:
			case KChecked:
			case KUnchecked:
			case KThis:
			case KBase:
			case KAwait:
			case KConst:
			case KDiscard:
			case KVar:
			case KThrow:
			case THat:
			case TPlusPlus:
			case TMinusMinus:
			case TPlus:
			case TMinus:
			case TTilde:
			case TExclamation:
			case TOpenParen:
			case IdentifierNormal:
			case IdentifierVerbatim:
			case LInteger:
			case LDecimal:
			case LScientific:
			case LRegularString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 588;
				expression(0);
				}
				break;
			case TOpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 589;
				blockStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefContext[] variableDef() {
			return GetRuleContexts<VariableDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefContext variableDef(int i) {
			return GetRuleContext<VariableDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public VariableDefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefListContext variableDefList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseVariableDefList() : _DoParseVariableDefList();
	}

	internal VariableDefListContext _DoParseVariableDefList() {
		VariableDefListContext _localctx = new VariableDefListContext(Context, State);
		EnterRule(_localctx, 66, RULE_variableDefList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			variableDef();
			State = 597;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 593;
					Match(TComma);
					State = 594;
					variableDef();
					}
					} 
				}
				State = 599;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefContext : ParserRuleContext {
		public ExpressionContext initializer;
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CoreParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefContext variableDef() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseVariableDef() : _DoParseVariableDef();
	}

	internal VariableDefContext _DoParseVariableDef() {
		VariableDefContext _localctx = new VariableDefContext(Context, State);
		EnterRule(_localctx, 68, RULE_variableDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			name();
			State = 603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 601;
				Match(TAssign);
				State = 602;
				_localctx.initializer = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot() { return GetToken(CoreParser.TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestionDot() { return GetToken(CoreParser.TQuestionDot, 0); }
		public DotOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotOperatorContext dotOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDotOperator() : _DoParseDotOperator();
	}

	internal DotOperatorContext _DoParseDotOperator() {
		DotOperatorContext _localctx = new DotOperatorContext(Context, State);
		EnterRule(_localctx, 70, RULE_dotOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			_la = TokenStream.LA(1);
			if ( !(_la==TQuestionDot || _la==TDot) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexerOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(CoreParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestionOpenBracket() { return GetToken(CoreParser.TQuestionOpenBracket, 0); }
		public IndexerOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexerOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexerOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexerOperatorContext indexerOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIndexerOperator() : _DoParseIndexerOperator();
	}

	internal IndexerOperatorContext _DoParseIndexerOperator() {
		IndexerOperatorContext _localctx = new IndexerOperatorContext(Context, State);
		EnterRule(_localctx, 72, RULE_indexerOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			_la = TokenStream.LA(1);
			if ( !(_la==TQuestionOpenBracket || _la==TOpenBracket) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlusPlus() { return GetToken(CoreParser.TPlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinusMinus() { return GetToken(CoreParser.TMinusMinus, 0); }
		public PostfixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixOperatorContext postfixOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParsePostfixOperator() : _DoParsePostfixOperator();
	}

	internal PostfixOperatorContext _DoParsePostfixOperator() {
		PostfixOperatorContext _localctx = new PostfixOperatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_postfixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			_la = TokenStream.LA(1);
			if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlus() { return GetToken(CoreParser.TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinus() { return GetToken(CoreParser.TMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TExclamation() { return GetToken(CoreParser.TExclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TTilde() { return GetToken(CoreParser.TTilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlusPlus() { return GetToken(CoreParser.TPlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinusMinus() { return GetToken(CoreParser.TMinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THat() { return GetToken(CoreParser.THat, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseUnaryOperator() : _DoParseUnaryOperator();
	}

	internal UnaryOperatorContext _DoParseUnaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 76, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (THat - 74)) | (1L << (TPlusPlus - 74)) | (1L << (TMinusMinus - 74)) | (1L << (TPlus - 74)) | (1L << (TMinus - 74)) | (1L << (TTilde - 74)) | (1L << (TExclamation - 74)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAsterisk() { return GetToken(CoreParser.TAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSlash() { return GetToken(CoreParser.TSlash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPercent() { return GetToken(CoreParser.TPercent, 0); }
		public MultiplicativeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeOperatorContext multiplicativeOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMultiplicativeOperator() : _DoParseMultiplicativeOperator();
	}

	internal MultiplicativeOperatorContext _DoParseMultiplicativeOperator() {
		MultiplicativeOperatorContext _localctx = new MultiplicativeOperatorContext(Context, State);
		EnterRule(_localctx, 78, RULE_multiplicativeOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (TSlash - 84)) | (1L << (TAsterisk - 84)) | (1L << (TPercent - 84)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlus() { return GetToken(CoreParser.TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinus() { return GetToken(CoreParser.TMinus, 0); }
		public AdditiveOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveOperatorContext additiveOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAdditiveOperator() : _DoParseAdditiveOperator();
	}

	internal AdditiveOperatorContext _DoParseAdditiveOperator() {
		AdditiveOperatorContext _localctx = new AdditiveOperatorContext(Context, State);
		EnterRule(_localctx, 80, RULE_additiveOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			_la = TokenStream.LA(1);
			if ( !(_la==TPlus || _la==TMinus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeftShiftOperatorContext leftShiftOperator() {
			return GetRuleContext<LeftShiftOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightShiftOperatorContext rightShiftOperator() {
			return GetRuleContext<RightShiftOperatorContext>(0);
		}
		public ShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOperatorContext shiftOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseShiftOperator() : _DoParseShiftOperator();
	}

	internal ShiftOperatorContext _DoParseShiftOperator() {
		ShiftOperatorContext _localctx = new ShiftOperatorContext(Context, State);
		EnterRule(_localctx, 82, RULE_shiftOperator);
		try {
			State = 619;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617;
				leftShiftOperator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 618;
				rightShiftOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftShiftOperatorContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TLessThan() { return GetTokens(CoreParser.TLessThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan(int i) {
			return GetToken(CoreParser.TLessThan, i);
		}
		public LeftShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftShiftOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftShiftOperatorContext leftShiftOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLeftShiftOperator() : _DoParseLeftShiftOperator();
	}

	internal LeftShiftOperatorContext _DoParseLeftShiftOperator() {
		LeftShiftOperatorContext _localctx = new LeftShiftOperatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_leftShiftOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			_localctx.first = Match(TLessThan);
			State = 622;
			_localctx.second = Match(TLessThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftOperatorContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TLessThan() { return GetTokens(CoreParser.TLessThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan(int i) {
			return GetToken(CoreParser.TLessThan, i);
		}
		public RightShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShiftOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftOperatorContext rightShiftOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRightShiftOperator() : _DoParseRightShiftOperator();
	}

	internal RightShiftOperatorContext _DoParseRightShiftOperator() {
		RightShiftOperatorContext _localctx = new RightShiftOperatorContext(Context, State);
		EnterRule(_localctx, 86, RULE_rightShiftOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			_localctx.first = Match(TLessThan);
			State = 625;
			_localctx.second = Match(TLessThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan() { return GetToken(CoreParser.TLessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TGreaterThan() { return GetToken(CoreParser.TGreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThanOrEqual() { return GetToken(CoreParser.TLessThanOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TGreaterThanOrEqual() { return GetToken(CoreParser.TGreaterThanOrEqual, 0); }
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRelationalOperator() : _DoParseRelationalOperator();
	}

	internal RelationalOperatorContext _DoParseRelationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 88, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (TLessThanOrEqual - 88)) | (1L << (TGreaterThanOrEqual - 88)) | (1L << (TLessThan - 88)) | (1L << (TGreaterThan - 88)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEqual() { return GetToken(CoreParser.TEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNotEqual() { return GetToken(CoreParser.TNotEqual, 0); }
		public EqualityOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityOperatorContext equalityOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEqualityOperator() : _DoParseEqualityOperator();
	}

	internal EqualityOperatorContext _DoParseEqualityOperator() {
		EqualityOperatorContext _localctx = new EqualityOperatorContext(Context, State);
		EnterRule(_localctx, 90, RULE_equalityOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			_la = TokenStream.LA(1);
			if ( !(_la==TEqual || _la==TNotEqual) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundAssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlusAssign() { return GetToken(CoreParser.TPlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinusAssign() { return GetToken(CoreParser.TMinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAsteriskAssign() { return GetToken(CoreParser.TAsteriskAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSlashAssign() { return GetToken(CoreParser.TSlashAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPercentAssign() { return GetToken(CoreParser.TPercentAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAmpersandAssign() { return GetToken(CoreParser.TAmpersandAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THatAssign() { return GetToken(CoreParser.THatAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TBarAssign() { return GetToken(CoreParser.TBarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLeftShiftAssign() { return GetToken(CoreParser.TLeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRightShiftAssign() { return GetToken(CoreParser.TRightShiftAssign, 0); }
		public CompoundAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundAssignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundAssignmentOperatorContext compoundAssignmentOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCompoundAssignmentOperator() : _DoParseCompoundAssignmentOperator();
	}

	internal CompoundAssignmentOperatorContext _DoParseCompoundAssignmentOperator() {
		CompoundAssignmentOperatorContext _localctx = new CompoundAssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 92, RULE_compoundAssignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (TAsteriskAssign - 92)) | (1L << (TSlashAssign - 92)) | (1L << (TPercentAssign - 92)) | (1L << (TPlusAssign - 92)) | (1L << (TMinusAssign - 92)) | (1L << (TLeftShiftAssign - 92)) | (1L << (TRightShiftAssign - 92)) | (1L << (TAmpersandAssign - 92)) | (1L << (THatAssign - 92)) | (1L << (TBarAssign - 92)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseReturnType() : _DoParseReturnType();
	}

	internal ReturnTypeContext _DoParseReturnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_returnType);
		try {
			State = 635;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KObject:
			case KBool:
			case KChar:
			case KSByte:
			case KByte:
			case KShort:
			case KUShort:
			case KInt:
			case KUInt:
			case KLong:
			case KULong:
			case KDecimal:
			case KFloat:
			case KDouble:
			case KString:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 633;
				typeReference(0);
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 634;
				voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarTypeContext varType() {
			return GetRuleContext<VarTypeContext>(0);
		}
		public VariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableTypeContext variableType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseVariableType() : _DoParseVariableType();
	}

	internal VariableTypeContext _DoParseVariableType() {
		VariableTypeContext _localctx = new VariableTypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_variableType);
		try {
			State = 639;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KObject:
			case KBool:
			case KChar:
			case KSByte:
			case KByte:
			case KShort:
			case KUShort:
			case KInt:
			case KUInt:
			case KLong:
			case KULong:
			case KDecimal:
			case KFloat:
			case KDouble:
			case KString:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 637;
				typeReference(0);
				}
				break;
			case KVar:
				EnterOuterAlt(_localctx, 2);
				{
				State = 638;
				varType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
	 
		public TypeReferenceContext() { }
		public virtual void CopyFrom(TypeReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimitiveTypeRefContext : TypeReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public PrimitiveTypeRefContext(TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericTypeRefContext : TypeReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeArgumentsContext genericTypeArguments() {
			return GetRuleContext<GenericTypeArgumentsContext>(0);
		}
		public GenericTypeRefContext(TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedTypeRefContext : TypeReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public NamedTypeRefContext(TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayTypeRefContext : TypeReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(CoreParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(CoreParser.TCloseBracket, 0); }
		public ArrayTypeRefContext(TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullableTypeRefContext : TypeReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestion() { return GetToken(CoreParser.TQuestion, 0); }
		public NullableTypeRefContext(TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		return typeReference(0);
	}

	private TypeReferenceContext typeReference(int _p) {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypeReference(_p) : _DoParseTypeReference(_p);
	}

	internal TypeReferenceContext _DoParseTypeReference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, _parentState);
		TypeReferenceContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_typeReference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				_localctx = new PrimitiveTypeRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 642;
				primitiveType();
				}
				break;
			case 2:
				{
				_localctx = new GenericTypeRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 643;
				namedType();
				State = 644;
				genericTypeArguments();
				}
				break;
			case 3:
				{
				_localctx = new NamedTypeRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 646;
				qualifier();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 656;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 654;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						_localctx = new ArrayTypeRefContext(new TypeReferenceContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_typeReference);
						State = 649;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 650;
						Match(TOpenBracket);
						State = 651;
						Match(TCloseBracket);
						}
						break;
					case 2:
						{
						_localctx = new NullableTypeRefContext(new TypeReferenceContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_typeReference);
						State = 652;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 653;
						Match(TQuestion);
						}
						break;
					}
					} 
				}
				State = 658;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NamedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public NamedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedTypeContext namedType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNamedType() : _DoParseNamedType();
	}

	internal NamedTypeContext _DoParseNamedType() {
		NamedTypeContext _localctx = new NamedTypeContext(Context, State);
		EnterRule(_localctx, 100, RULE_namedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan() { return GetToken(CoreParser.TLessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeArgumentContext[] genericTypeArgument() {
			return GetRuleContexts<GenericTypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeArgumentContext genericTypeArgument(int i) {
			return GetRuleContext<GenericTypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TGreaterThan() { return GetToken(CoreParser.TGreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public GenericTypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeArgumentsContext genericTypeArguments() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseGenericTypeArguments() : _DoParseGenericTypeArguments();
	}

	internal GenericTypeArgumentsContext _DoParseGenericTypeArguments() {
		GenericTypeArgumentsContext _localctx = new GenericTypeArgumentsContext(Context, State);
		EnterRule(_localctx, 102, RULE_genericTypeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			Match(TLessThan);
			State = 662;
			genericTypeArgument();
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 663;
				Match(TComma);
				State = 664;
				genericTypeArgument();
				}
				}
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 670;
			Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public GenericTypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeArgumentContext genericTypeArgument() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseGenericTypeArgument() : _DoParseGenericTypeArgument();
	}

	internal GenericTypeArgumentContext _DoParseGenericTypeArgument() {
		GenericTypeArgumentContext _localctx = new GenericTypeArgumentContext(Context, State);
		EnterRule(_localctx, 104, RULE_genericTypeArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			typeReference(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KObject() { return GetToken(CoreParser.KObject, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KBool() { return GetToken(CoreParser.KBool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KChar() { return GetToken(CoreParser.KChar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSByte() { return GetToken(CoreParser.KSByte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KByte() { return GetToken(CoreParser.KByte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KShort() { return GetToken(CoreParser.KShort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUShort() { return GetToken(CoreParser.KUShort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KInt() { return GetToken(CoreParser.KInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUInt() { return GetToken(CoreParser.KUInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KLong() { return GetToken(CoreParser.KLong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KULong() { return GetToken(CoreParser.KULong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDecimal() { return GetToken(CoreParser.KDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFloat() { return GetToken(CoreParser.KFloat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDouble() { return GetToken(CoreParser.KDouble, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KString() { return GetToken(CoreParser.KString, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParsePrimitiveType() : _DoParsePrimitiveType();
	}

	internal PrimitiveTypeContext _DoParsePrimitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 106, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KBool) | (1L << KChar) | (1L << KSByte) | (1L << KByte) | (1L << KShort) | (1L << KUShort) | (1L << KInt) | (1L << KUInt) | (1L << KLong) | (1L << KULong) | (1L << KDecimal) | (1L << KFloat) | (1L << KDouble) | (1L << KString))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KVoid() { return GetToken(CoreParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseVoidType() : _DoParseVoidType();
	}

	internal VoidTypeContext _DoParseVoidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 108, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KVar() { return GetToken(CoreParser.KVar, 0); }
		public VarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarTypeContext varType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseVarType() : _DoParseVarType();
	}

	internal VarTypeContext _DoParseVarType() {
		VarTypeContext _localctx = new VarTypeContext(Context, State);
		EnterRule(_localctx, 110, RULE_varType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(KVar);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseName() : _DoParseName();
	}

	internal NameContext _DoParseName() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 112, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifiedName() : _DoParseQualifiedName();
	}

	internal QualifiedNameContext _DoParseQualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 114, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TDot() { return GetTokens(CoreParser.TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot(int i) {
			return GetToken(CoreParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifier() : _DoParseQualifier();
	}

	internal QualifierContext _DoParseQualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 116, RULE_qualifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			identifier();
			State = 689;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 685;
					Match(TDot);
					State = 686;
					identifier();
					}
					} 
				}
				State = 691;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentifierNormal() { return GetToken(CoreParser.IdentifierNormal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentifierVerbatim() { return GetToken(CoreParser.IdentifierVerbatim, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIdentifier() : _DoParseIdentifier();
	}

	internal IdentifierContext _DoParseIdentifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 118, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			_la = TokenStream.LA(1);
			if ( !(_la==IdentifierNormal || _la==IdentifierVerbatim) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLiteral() : _DoParseLiteral();
	}

	internal LiteralContext _DoParseLiteral() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 120, RULE_literal);
		try {
			State = 700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694;
				nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695;
				booleanLiteral();
				}
				break;
			case LInteger:
				EnterOuterAlt(_localctx, 3);
				{
				State = 696;
				integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 697;
				decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 5);
				{
				State = 698;
				scientificLiteral();
				}
				break;
			case LRegularString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 699;
				stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNull() { return GetToken(CoreParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNullLiteral() : _DoParseNullLiteral();
	}

	internal NullLiteralContext _DoParseNullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 122, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTrue() { return GetToken(CoreParser.KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFalse() { return GetToken(CoreParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseBooleanLiteral() : _DoParseBooleanLiteral();
	}

	internal BooleanLiteralContext _DoParseBooleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 124, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			_la = TokenStream.LA(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LInteger() { return GetToken(CoreParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIntegerLiteral() : _DoParseIntegerLiteral();
	}

	internal IntegerLiteralContext _DoParseIntegerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 126, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDecimal() { return GetToken(CoreParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDecimalLiteral() : _DoParseDecimalLiteral();
	}

	internal DecimalLiteralContext _DoParseDecimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 128, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LScientific() { return GetToken(CoreParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseScientificLiteral() : _DoParseScientificLiteral();
	}

	internal ScientificLiteralContext _DoParseScientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 130, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRegularString() { return GetToken(CoreParser.LRegularString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseStringLiteral() : _DoParseStringLiteral();
	}

	internal StringLiteralContext _DoParseStringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 132, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			Match(LRegularString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 49: return typeReference_sempred((TypeReferenceContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 8);
		case 11: return Precpred(Context, 6);
		case 12: return Precpred(Context, 5);
		case 13: return Precpred(Context, 4);
		case 14: return Precpred(Context, 3);
		case 15: return Precpred(Context, 34);
		case 16: return Precpred(Context, 33);
		case 17: return Precpred(Context, 32);
		case 18: return Precpred(Context, 25);
		case 19: return Precpred(Context, 24);
		case 20: return Precpred(Context, 15);
		case 21: return Precpred(Context, 14);
		}
		return true;
	}
	private bool typeReference_sempred(TypeReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 2);
		case 23: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x8C', '\x2CD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x3', '\x2', '\a', 
		'\x2', '\x8A', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x8D', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', '\x93', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x96', '\v', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x9C', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\xB1', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\xB7', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\xE0', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\xE3', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\xEA', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\xED', '\v', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xF0', '\n', '\x5', '\x3', '\x5', '\x6', '\x5', '\xF3', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '\xF4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x107', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x10B', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\x10E', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x6', '\a', '\x113', '\n', '\a', '\r', '\a', '\xE', 
		'\a', '\x114', '\x3', '\b', '\x6', '\b', '\x118', '\n', '\b', '\r', '\b', 
		'\xE', '\b', '\x119', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x120', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x12E', '\n', 
		'\f', '\x5', '\f', '\x130', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x142', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\x145', '\v', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x157', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x176', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x17A', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x18D', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x192', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x1CE', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x1D8', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x1E2', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x1E6', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x1EB', '\n', '\x11', 
		'\f', '\x11', '\xE', '\x11', '\x1EE', '\v', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\a', '\x13', '\x1F7', '\n', '\x13', '\f', '\x13', '\xE', '\x13', 
		'\x1FA', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x1FF', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x206', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x20B', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\x20E', '\v', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\a', '\x18', '\x217', '\n', '\x18', '\f', '\x18', '\xE', '\x18', 
		'\x21A', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', 
		'\x19', '\x21F', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x222', '\v', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x22C', 
		'\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x230', '\n', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', 
		'\x1D', '\x236', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x239', '\v', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\a', ' ', '\x245', '\n', ' ', '\f', ' ', '\xE', ' ', '\x248', '\v', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x251', '\n', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\a', '#', '\x256', '\n', '#', '\f', '#', '\xE', '#', '\x259', 
		'\v', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x25E', '\n', 
		'$', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', 
		'\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', 
		'*', '\x3', '+', '\x3', '+', '\x5', '+', '\x26E', '\n', '+', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', 
		'\x3', '.', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x31', '\x3', '\x31', '\x5', '\x31', '\x27E', '\n', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x5', '\x32', '\x282', '\n', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', 
		'\x33', '\x28A', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\a', '\x33', '\x291', '\n', '\x33', '\f', 
		'\x33', '\xE', '\x33', '\x294', '\v', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', 
		'\x29C', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x29F', '\v', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', 
		'\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\a', '<', '\x2B2', '\n', '<', '\f', '<', '\xE', '<', '\x2B5', 
		'\v', '<', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x2BF', '\n', '>', '\x3', 
		'?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x2', '\x4', ' ', '\x64', '\x45', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', 
		'\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', 
		'|', '~', '\x80', '\x82', '\x84', '\x86', '\x2', '\xE', '\x4', '\x2', 
		'H', 'H', 'k', 'k', '\x4', '\x2', 'I', 'I', 'p', 'p', '\x3', '\x2', 'P', 
		'Q', '\x4', '\x2', 'L', 'L', 'P', 'U', '\x3', '\x2', 'V', 'X', '\x3', 
		'\x2', 'R', 'S', '\x4', '\x2', 'Z', '[', 't', 'u', '\x3', '\x2', '\\', 
		']', '\x3', '\x2', '^', 'g', '\x4', '\x2', '\x10', '\x10', '\x12', '\x1F', 
		'\x3', '\x2', 'w', 'x', '\x3', '\x2', '\r', '\xE', '\x2', '\x2F6', '\x2', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x4', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x97', '\x3', '\x2', '\x2', '\x2', '\b', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x108', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x112', '\x3', '\x2', '\x2', '\x2', '\xE', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x12', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x125', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x18', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x136', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x13E', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x191', '\x3', '\x2', '\x2', '\x2', '\"', '\x1EF', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x1F3', '\x3', '\x2', '\x2', '\x2', '&', '\x1FE', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x205', '\x3', '\x2', '\x2', '\x2', '*', '\x207', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x213', '\x3', '\x2', '\x2', '\x2', '\x30', '\x21B', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x223', '\x3', '\x2', '\x2', '\x2', '\x34', '\x22B', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x22F', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x231', '\x3', '\x2', '\x2', '\x2', ':', '\x23C', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x23E', '\x3', '\x2', '\x2', '\x2', '>', '\x240', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x24B', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x250', '\x3', '\x2', '\x2', '\x2', '\x44', '\x252', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x25A', '\x3', '\x2', '\x2', '\x2', 'H', '\x25F', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x263', '\x3', '\x2', '\x2', '\x2', 'N', '\x265', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x267', '\x3', '\x2', '\x2', '\x2', 'R', '\x269', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x26D', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x26F', '\x3', '\x2', '\x2', '\x2', 'X', '\x272', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x275', '\x3', '\x2', '\x2', '\x2', '\\', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x62', '\x281', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x289', '\x3', '\x2', '\x2', '\x2', '\x66', '\x295', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x297', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x2A2', '\x3', '\x2', '\x2', '\x2', 'l', '\x2A4', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x2A6', '\x3', '\x2', '\x2', '\x2', 'p', '\x2A8', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x2AA', '\x3', '\x2', '\x2', '\x2', 
		't', '\x2AC', '\x3', '\x2', '\x2', '\x2', 'v', '\x2AE', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x2B6', '\x3', '\x2', '\x2', '\x2', 'z', '\x2BE', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x2C0', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x80', '\x2C4', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x84', '\x2C8', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x2CA', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x8A', '\x5', '\x6', '\x4', '\x2', '\x89', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8F', '\x5', '\x4', '\x3', '\x2', '\x8F', '\x90', 
		'\a', '\x2', '\x2', '\x3', '\x90', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x93', '\x5', '\b', '\x5', '\x2', '\x92', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x96', '\x3', '\x2', '\x2', '\x2', '\x94', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x5', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x9B', '\a', '\x4', '\x2', '\x2', '\x98', '\x99', 
		'\x5', 'r', ':', '\x2', '\x99', '\x9A', '\a', 'm', '\x2', '\x2', '\x9A', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\x5', 'v', '<', '\x2', '\x9E', '\x9F', 
		'\a', 'i', '\x2', '\x2', '\x9F', '\a', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x107', '\a', 'i', '\x2', '\x2', '\xA1', '\x107', '\x5', '\n', '\x6', 
		'\x2', '\xA2', '\xA3', '\x5', ' ', '\x11', '\x2', '\xA3', '\xA4', '\a', 
		'i', '\x2', '\x2', '\xA4', '\x107', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\a', '\x33', '\x2', '\x2', '\xA6', '\xA7', '\a', 'n', '\x2', 
		'\x2', '\xA7', '\xA8', '\x5', ' ', '\x11', '\x2', '\xA8', '\xA9', '\a', 
		'j', '\x2', '\x2', '\xA9', '\xAA', '\x5', ' ', '\x11', '\x2', '\xAA', 
		'\xAB', '\a', 'o', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\b', '\x5', '\x2', 
		'\xAC', '\x107', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x31', 
		'\x2', '\x2', '\xAE', '\xB0', '\a', 'n', '\x2', '\x2', '\xAF', '\xB1', 
		'\x5', '\x1E', '\x10', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB3', '\a', 'i', '\x2', '\x2', '\xB3', '\xB4', 
		'\x5', ' ', '\x11', '\x2', '\xB4', '\xB6', '\a', 'i', '\x2', '\x2', '\xB5', 
		'\xB7', '\x5', '\x1E', '\x10', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', 'o', '\x2', '\x2', '\xB9', 
		'\xBA', '\x5', '\b', '\x5', '\x2', '\xBA', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\a', '\x39', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'n', '\x2', '\x2', '\xBD', '\xBE', '\x5', ' ', '\x11', '\x2', '\xBE', 
		'\xBF', '\a', 'o', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\b', '\x5', '\x2', 
		'\xC0', '\xC1', '\a', ':', '\x2', '\x2', '\xC1', '\xC2', '\x5', '\b', 
		'\x5', '\x2', '\xC2', '\x107', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', 
		'\a', '\x42', '\x2', '\x2', '\xC4', '\x107', '\a', 'i', '\x2', '\x2', 
		'\xC5', '\xC6', '\a', '\x43', '\x2', '\x2', '\xC6', '\x107', '\a', 'i', 
		'\x2', '\x2', '\xC7', '\xC8', '\a', '\x44', '\x2', '\x2', '\xC8', '\xC9', 
		'\x5', 'x', '=', '\x2', '\xC9', '\xCA', '\a', 'i', '\x2', '\x2', '\xCA', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x5', 'r', ':', 
		'\x2', '\xCC', '\xCD', '\a', 'j', '\x2', '\x2', '\xCD', '\xCE', '\x5', 
		'\b', '\x5', '\x2', '\xCE', '\x107', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\a', '\x46', '\x2', '\x2', '\xD0', '\xD1', '\a', 'n', '\x2', 
		'\x2', '\xD1', '\xD2', '\x5', ' ', '\x11', '\x2', '\xD2', '\xD3', '\a', 
		'o', '\x2', '\x2', '\xD3', '\xD4', '\x5', '\b', '\x5', '\x2', '\xD4', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x45', '\x2', 
		'\x2', '\xD6', '\xD7', '\x5', ' ', '\x11', '\x2', '\xD7', '\xD8', '\a', 
		'i', '\x2', '\x2', '\xD8', '\x107', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xDA', '\a', ';', '\x2', '\x2', '\xDA', '\xDB', '\a', 'n', '\x2', '\x2', 
		'\xDB', '\xDC', '\x5', ' ', '\x11', '\x2', '\xDC', '\xDD', '\a', 'o', 
		'\x2', '\x2', '\xDD', '\xE1', '\a', 'r', '\x2', '\x2', '\xDE', '\xE0', 
		'\x5', '\xE', '\b', '\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE5', '\a', 's', '\x2', '\x2', '\xE5', '\x107', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xE7', '\a', '=', '\x2', '\x2', '\xE7', '\xEB', 
		'\x5', '\n', '\x6', '\x2', '\xE8', '\xEA', '\x5', '\x16', '\f', '\x2', 
		'\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF0', '\x5', '\x1A', 
		'\xE', '\x2', '\xEF', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF3', '\x5', '\x1C', '\xF', '\x2', '\xF2', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x5', '\b', 
		'\x5', '\x2', '\xF7', '\x107', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', 
		'\a', '\x35', '\x2', '\x2', '\xF9', '\xFA', '\a', 'n', '\x2', '\x2', '\xFA', 
		'\xFB', '\x5', ' ', '\x11', '\x2', '\xFB', '\xFC', '\a', 'o', '\x2', '\x2', 
		'\xFC', '\xFD', '\x5', '\b', '\x5', '\x2', '\xFD', '\x107', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\xFF', '\a', '\x36', '\x2', '\x2', '\xFF', '\x100', 
		'\x5', '\b', '\x5', '\x2', '\x100', '\x101', '\a', '\x35', '\x2', '\x2', 
		'\x101', '\x102', '\a', 'n', '\x2', '\x2', '\x102', '\x103', '\x5', ' ', 
		'\x11', '\x2', '\x103', '\x104', '\a', 'o', '\x2', '\x2', '\x104', '\x105', 
		'\a', 'i', '\x2', '\x2', '\x105', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x106', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x106', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x106', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x106', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\x106', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x106', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x106', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\x106', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x106', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\xF2', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x106', '\xFE', '\x3', '\x2', 
		'\x2', '\x2', '\x107', '\t', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10C', 
		'\a', 'r', '\x2', '\x2', '\x109', '\x10B', '\x5', '\b', '\x5', '\x2', 
		'\x10A', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', 
		'\a', 's', '\x2', '\x2', '\x110', '\v', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x113', '\x5', '\b', '\x5', '\x2', '\x112', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\r', '\x3', '\x2', '\x2', '\x2', '\x116', '\x118', '\x5', '\x10', 
		'\t', '\x2', '\x117', '\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11C', '\x5', '\f', '\a', '\x2', '\x11C', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x120', '\x5', '\x12', '\n', 
		'\x2', '\x11E', '\x120', '\x5', '\x14', '\v', '\x2', '\x11F', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\a', '<', 
		'\x2', '\x2', '\x122', '\x123', '\x5', ' ', '\x11', '\x2', '\x123', '\x124', 
		'\a', 'j', '\x2', '\x2', '\x124', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x126', '\a', '#', '\x2', '\x2', '\x126', '\x127', '\a', 'j', 
		'\x2', '\x2', '\x127', '\x15', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12F', 
		'\a', '?', '\x2', '\x2', '\x129', '\x12A', '\a', 'n', '\x2', '\x2', '\x12A', 
		'\x12B', '\x5', ' ', '\x11', '\x2', '\x12B', '\x12D', '\a', 'o', '\x2', 
		'\x2', '\x12C', '\x12E', '\x5', '\x18', '\r', '\x2', '\x12D', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x130', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\x5', '\n', '\x6', 
		'\x2', '\x132', '\x17', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', 
		'\a', '@', '\x2', '\x2', '\x134', '\x135', '\x5', ' ', '\x11', '\x2', 
		'\x135', '\x19', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\a', '\x41', 
		'\x2', '\x2', '\x137', '\x138', '\x5', '\n', '\x6', '\x2', '\x138', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\a', '\x4', '\x2', '\x2', 
		'\x13A', '\x13B', '\a', 'n', '\x2', '\x2', '\x13B', '\x13C', '\x5', ' ', 
		'\x11', '\x2', '\x13C', '\x13D', '\a', 'o', '\x2', '\x2', '\x13D', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x143', '\x5', ' ', '\x11', '\x2', 
		'\x13F', '\x140', '\a', 'l', '\x2', '\x2', '\x140', '\x142', '\x5', ' ', 
		'\x11', '\x2', '\x141', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', '\x144', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x147', '\b', '\x11', '\x1', '\x2', '\x147', '\x148', '\a', 
		'n', '\x2', '\x2', '\x148', '\x149', '\x5', ' ', '\x11', '\x2', '\x149', 
		'\x14A', '\a', 'o', '\x2', '\x2', '\x14A', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x14C', '\a', 'n', '\x2', '\x2', '\x14C', '\x14D', '\x5', 
		'\"', '\x12', '\x2', '\x14D', '\x14E', '\a', 'o', '\x2', '\x2', '\x14E', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x192', '\a', '/', '\x2', 
		'\x2', '\x150', '\x192', '\a', '#', '\x2', '\x2', '\x151', '\x192', '\a', 
		')', '\x2', '\x2', '\x152', '\x192', '\a', '*', '\x2', '\x2', '\x153', 
		'\x192', '\x5', 'z', '>', '\x2', '\x154', '\x156', '\x5', 'x', '=', '\x2', 
		'\x155', '\x157', '\x5', 'h', '\x35', '\x2', '\x156', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\a', ' ', '\x2', 
		'\x2', '\x159', '\x15A', '\a', 'n', '\x2', '\x2', '\x15A', '\x15B', '\x5', 
		'\x64', '\x33', '\x2', '\x15B', '\x15C', '\a', 'o', '\x2', '\x2', '\x15C', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\a', '!', '\x2', 
		'\x2', '\x15E', '\x15F', '\a', 'n', '\x2', '\x2', '\x15F', '\x160', '\x5', 
		' ', '\x11', '\x2', '\x160', '\x161', '\a', 'o', '\x2', '\x2', '\x161', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\a', '\"', '\x2', 
		'\x2', '\x163', '\x164', '\a', 'n', '\x2', '\x2', '\x164', '\x165', '\x5', 
		'\x64', '\x33', '\x2', '\x165', '\x166', '\a', 'o', '\x2', '\x2', '\x166', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\a', '$', '\x2', 
		'\x2', '\x168', '\x169', '\a', 'n', '\x2', '\x2', '\x169', '\x16A', '\x5', 
		' ', '\x11', '\x2', '\x16A', '\x16B', '\a', 'o', '\x2', '\x2', '\x16B', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\a', '%', '\x2', 
		'\x2', '\x16D', '\x16E', '\a', 'n', '\x2', '\x2', '\x16E', '\x16F', '\x5', 
		' ', '\x11', '\x2', '\x16F', '\x170', '\a', 'o', '\x2', '\x2', '\x170', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\a', '\v', '\x2', 
		'\x2', '\x172', '\x173', '\x5', '\x64', '\x33', '\x2', '\x173', '\x175', 
		'\a', 'n', '\x2', '\x2', '\x174', '\x176', '\x5', '$', '\x13', '\x2', 
		'\x175', '\x174', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x179', '\a', 'o', '\x2', '\x2', '\x178', '\x17A', '\x5', '(', '\x15', 
		'\x2', '\x179', '\x178', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x17A', '\x192', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17C', '\x5', 'N', '(', '\x2', '\x17C', '\x17D', '\x5', ' ', 
		'\x11', '\x19', '\x17D', '\x192', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17F', '\a', 'n', '\x2', '\x2', '\x17F', '\x180', '\x5', '\x64', '\x33', 
		'\x2', '\x180', '\x181', '\a', 'o', '\x2', '\x2', '\x181', '\x182', '\x5', 
		' ', '\x11', '\x18', '\x182', '\x192', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x184', '\a', ',', '\x2', '\x2', '\x184', '\x192', '\x5', ' ', '\x11', 
		'\x17', '\x185', '\x186', '\a', '>', '\x2', '\x2', '\x186', '\x192', '\x5', 
		' ', '\x11', '\t', '\x187', '\x188', '\x5', '\x34', '\x1B', '\x2', '\x188', 
		'\x189', '\a', 'Y', '\x2', '\x2', '\x189', '\x18A', '\x5', '\x42', '\"', 
		'\x2', '\x18A', '\x192', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18D', 
		'\a', '-', '\x2', '\x2', '\x18C', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x18E', '\x18F', '\x5', '\x62', '\x32', '\x2', '\x18F', 
		'\x190', '\x5', '\x44', '#', '\x2', '\x190', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x191', '\x146', '\x3', '\x2', '\x2', '\x2', '\x191', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x150', '\x3', '\x2', '\x2', '\x2', '\x191', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x152', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x191', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x191', '\x158', '\x3', '\x2', '\x2', '\x2', '\x191', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x167', '\x3', '\x2', '\x2', '\x2', '\x191', '\x16C', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x171', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x191', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x191', '\x183', '\x3', '\x2', '\x2', '\x2', '\x191', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x192', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x194', '\f', '\x16', '\x2', '\x2', '\x194', 
		'\x195', '\a', 'h', '\x2', '\x2', '\x195', '\x1EB', '\x5', ' ', '\x11', 
		'\x17', '\x196', '\x197', '\f', '\x15', '\x2', '\x2', '\x197', '\x198', 
		'\x5', 'P', ')', '\x2', '\x198', '\x199', '\x5', ' ', '\x11', '\x16', 
		'\x199', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\f', 
		'\x14', '\x2', '\x2', '\x19B', '\x19C', '\x5', 'R', '*', '\x2', '\x19C', 
		'\x19D', '\x5', ' ', '\x11', '\x15', '\x19D', '\x1EB', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x19F', '\f', '\x13', '\x2', '\x2', '\x19F', '\x1A0', 
		'\x5', 'T', '+', '\x2', '\x1A0', '\x1A1', '\x5', ' ', '\x11', '\x14', 
		'\x1A1', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\f', 
		'\x12', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', 'Z', '.', '\x2', '\x1A4', 
		'\x1A5', '\x5', ' ', '\x11', '\x13', '\x1A5', '\x1EB', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '\x1A7', '\f', '\xF', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\x5', '\\', '/', '\x2', '\x1A8', '\x1A9', '\x5', ' ', '\x11', '\x10', 
		'\x1A9', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\f', 
		'\xE', '\x2', '\x2', '\x1AB', '\x1AC', '\a', 'K', '\x2', '\x2', '\x1AC', 
		'\x1EB', '\x5', ' ', '\x11', '\xF', '\x1AD', '\x1AE', '\f', '\r', '\x2', 
		'\x2', '\x1AE', '\x1AF', '\a', 'L', '\x2', '\x2', '\x1AF', '\x1EB', '\x5', 
		' ', '\x11', '\xE', '\x1B0', '\x1B1', '\f', '\f', '\x2', '\x2', '\x1B1', 
		'\x1B2', '\a', 'M', '\x2', '\x2', '\x1B2', '\x1EB', '\x5', ' ', '\x11', 
		'\r', '\x1B3', '\x1B4', '\f', '\v', '\x2', '\x2', '\x1B4', '\x1B5', '\a', 
		'N', '\x2', '\x2', '\x1B5', '\x1EB', '\x5', ' ', '\x11', '\f', '\x1B6', 
		'\x1B7', '\f', '\n', '\x2', '\x2', '\x1B7', '\x1B8', '\a', 'O', '\x2', 
		'\x2', '\x1B8', '\x1EB', '\x5', ' ', '\x11', '\v', '\x1B9', '\x1BA', '\f', 
		'\b', '\x2', '\x2', '\x1BA', '\x1BB', '\a', 'J', '\x2', '\x2', '\x1BB', 
		'\x1EB', '\x5', ' ', '\x11', '\t', '\x1BC', '\x1BD', '\f', '\a', '\x2', 
		'\x2', '\x1BD', '\x1BE', '\a', 'v', '\x2', '\x2', '\x1BE', '\x1BF', '\x5', 
		' ', '\x11', '\x2', '\x1BF', '\x1C0', '\a', 'j', '\x2', '\x2', '\x1C0', 
		'\x1C1', '\x5', ' ', '\x11', '\b', '\x1C1', '\x1EB', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', '\x1C3', '\f', '\x6', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\a', 'm', '\x2', '\x2', '\x1C4', '\x1EB', '\x5', ' ', '\x11', '\a', '\x1C5', 
		'\x1C6', '\f', '\x5', '\x2', '\x2', '\x1C6', '\x1C7', '\x5', '^', '\x30', 
		'\x2', '\x1C7', '\x1C8', '\x5', ' ', '\x11', '\x6', '\x1C8', '\x1EB', 
		'\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\f', '$', '\x2', '\x2', 
		'\x1CA', '\x1CB', '\x5', 'H', '%', '\x2', '\x1CB', '\x1CD', '\x5', 'x', 
		'=', '\x2', '\x1CC', '\x1CE', '\x5', 'h', '\x35', '\x2', '\x1CD', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x1CE', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\f', 
		'#', '\x2', '\x2', '\x1D0', '\x1D1', '\x5', 'J', '&', '\x2', '\x1D1', 
		'\x1D2', '\x5', '$', '\x13', '\x2', '\x1D2', '\x1D3', '\a', 'q', '\x2', 
		'\x2', '\x1D3', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', 
		'\f', '\"', '\x2', '\x2', '\x1D5', '\x1D7', '\a', 'n', '\x2', '\x2', '\x1D6', 
		'\x1D8', '\x5', '$', '\x13', '\x2', '\x1D7', '\x1D6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D7', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1EB', '\a', 'o', '\x2', '\x2', 
		'\x1DA', '\x1DB', '\f', '\x1B', '\x2', '\x2', '\x1DB', '\x1EB', '\x5', 
		'L', '\'', '\x2', '\x1DC', '\x1DD', '\f', '\x1A', '\x2', '\x2', '\x1DD', 
		'\x1EB', '\a', 'U', '\x2', '\x2', '\x1DE', '\x1DF', '\f', '\x11', '\x2', 
		'\x2', '\x1DF', '\x1E1', '\a', '\'', '\x2', '\x2', '\x1E0', '\x1E2', '\a', 
		'(', '\x2', '\x2', '\x1E1', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E1', 
		'\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1E5', '\x5', '\x64', '\x33', '\x2', '\x1E4', '\x1E6', 
		'\x5', 'r', ':', '\x2', '\x1E5', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E5', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1EB', '\x3', 
		'\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\f', '\x10', '\x2', '\x2', '\x1E8', 
		'\x1E9', '\a', '&', '\x2', '\x2', '\x1E9', '\x1EB', '\x5', '\x64', '\x33', 
		'\x2', '\x1EA', '\x193', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x196', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1A2', '\x3', 
		'\x2', '\x2', '\x2', '\x1EA', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1EA', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1BC', '\x3', 
		'\x2', '\x2', '\x2', '\x1EA', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\x1EA', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1DA', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1DE', '\x3', 
		'\x2', '\x2', '\x2', '\x1EA', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1EA', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1ED', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x1EE', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EF', 
		'\x1F0', '\x5', '&', '\x14', '\x2', '\x1F0', '\x1F1', '\a', 'l', '\x2', 
		'\x2', '\x1F1', '\x1F2', '\x5', '$', '\x13', '\x2', '\x1F2', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x1F3', '\x1F8', '\x5', '&', '\x14', '\x2', '\x1F4', 
		'\x1F5', '\a', 'l', '\x2', '\x2', '\x1F5', '\x1F7', '\x5', '&', '\x14', 
		'\x2', '\x1F6', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1FA', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F8', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F9', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', 
		'\x5', 'r', ':', '\x2', '\x1FC', '\x1FD', '\a', 'j', '\x2', '\x2', '\x1FD', 
		'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FB', '\x3', '\x2', '\x2', 
		'\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', 
		'\x3', '\x2', '\x2', '\x2', '\x200', '\x201', '\x5', ' ', '\x11', '\x2', 
		'\x201', '\'', '\x3', '\x2', '\x2', '\x2', '\x202', '\x206', '\x5', '*', 
		'\x16', '\x2', '\x203', '\x206', '\x5', '.', '\x18', '\x2', '\x204', '\x206', 
		'\x5', '\x30', '\x19', '\x2', '\x205', '\x202', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '\x203', '\x3', '\x2', '\x2', '\x2', '\x205', '\x204', '\x3', 
		'\x2', '\x2', '\x2', '\x206', ')', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x20C', '\x5', ',', '\x17', '\x2', '\x208', '\x209', '\a', 'l', '\x2', 
		'\x2', '\x209', '\x20B', '\x5', ',', '\x17', '\x2', '\x20A', '\x208', 
		'\x3', '\x2', '\x2', '\x2', '\x20B', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\x20C', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\x3', 
		'\x2', '\x2', '\x2', '\x20D', '+', '\x3', '\x2', '\x2', '\x2', '\x20E', 
		'\x20C', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', '\x5', 'x', '=', 
		'\x2', '\x210', '\x211', '\a', 'm', '\x2', '\x2', '\x211', '\x212', '\x5', 
		' ', '\x11', '\x2', '\x212', '-', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'\x218', '\x5', ' ', '\x11', '\x2', '\x214', '\x215', '\a', 'l', '\x2', 
		'\x2', '\x215', '\x217', '\x5', ' ', '\x11', '\x2', '\x216', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x21A', '\x3', '\x2', '\x2', '\x2', 
		'\x218', '\x216', '\x3', '\x2', '\x2', '\x2', '\x218', '\x219', '\x3', 
		'\x2', '\x2', '\x2', '\x219', '/', '\x3', '\x2', '\x2', '\x2', '\x21A', 
		'\x218', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x220', '\x5', '\x32', 
		'\x1A', '\x2', '\x21C', '\x21D', '\a', 'l', '\x2', '\x2', '\x21D', '\x21F', 
		'\x5', '\x32', '\x1A', '\x2', '\x21E', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x21F', '\x222', '\x3', '\x2', '\x2', '\x2', '\x220', '\x21E', '\x3', 
		'\x2', '\x2', '\x2', '\x220', '\x221', '\x3', '\x2', '\x2', '\x2', '\x221', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x222', '\x220', '\x3', '\x2', '\x2', 
		'\x2', '\x223', '\x224', '\a', 'p', '\x2', '\x2', '\x224', '\x225', '\x5', 
		'x', '=', '\x2', '\x225', '\x226', '\a', 'q', '\x2', '\x2', '\x226', '\x227', 
		'\a', 'm', '\x2', '\x2', '\x227', '\x228', '\x5', ' ', '\x11', '\x2', 
		'\x228', '\x33', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22C', '\x5', 
		'\x36', '\x1C', '\x2', '\x22A', '\x22C', '\x5', '<', '\x1F', '\x2', '\x22B', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22A', '\x3', '\x2', '\x2', 
		'\x2', '\x22C', '\x35', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x230', 
		'\x5', ':', '\x1E', '\x2', '\x22E', '\x230', '\x5', '\x38', '\x1D', '\x2', 
		'\x22F', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x22E', '\x3', 
		'\x2', '\x2', '\x2', '\x230', '\x37', '\x3', '\x2', '\x2', '\x2', '\x231', 
		'\x232', '\a', 'n', '\x2', '\x2', '\x232', '\x237', '\x5', ':', '\x1E', 
		'\x2', '\x233', '\x234', '\a', 'l', '\x2', '\x2', '\x234', '\x236', '\x5', 
		':', '\x1E', '\x2', '\x235', '\x233', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x239', '\x3', '\x2', '\x2', '\x2', '\x237', '\x235', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x238', '\x3', '\x2', '\x2', '\x2', '\x238', '\x23A', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'\x23A', '\x23B', '\a', 'o', '\x2', '\x2', '\x23B', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x23C', '\x23D', '\x5', 'r', ':', '\x2', '\x23D', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\x23F', '\x5', '>', ' ', '\x2', 
		'\x23F', '=', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', '\a', 'n', 
		'\x2', '\x2', '\x241', '\x246', '\x5', '@', '!', '\x2', '\x242', '\x243', 
		'\a', 'l', '\x2', '\x2', '\x243', '\x245', '\x5', '@', '!', '\x2', '\x244', 
		'\x242', '\x3', '\x2', '\x2', '\x2', '\x245', '\x248', '\x3', '\x2', '\x2', 
		'\x2', '\x246', '\x244', '\x3', '\x2', '\x2', '\x2', '\x246', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x247', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'\x248', '\x246', '\x3', '\x2', '\x2', '\x2', '\x249', '\x24A', '\a', 
		'o', '\x2', '\x2', '\x24A', '?', '\x3', '\x2', '\x2', '\x2', '\x24B', 
		'\x24C', '\x5', '\x64', '\x33', '\x2', '\x24C', '\x24D', '\x5', 'r', ':', 
		'\x2', '\x24D', '\x41', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x251', 
		'\x5', ' ', '\x11', '\x2', '\x24F', '\x251', '\x5', '\n', '\x6', '\x2', 
		'\x250', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x250', '\x24F', '\x3', 
		'\x2', '\x2', '\x2', '\x251', '\x43', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x257', '\x5', '\x46', '$', '\x2', '\x253', '\x254', '\a', 'l', '\x2', 
		'\x2', '\x254', '\x256', '\x5', '\x46', '$', '\x2', '\x255', '\x253', 
		'\x3', '\x2', '\x2', '\x2', '\x256', '\x259', '\x3', '\x2', '\x2', '\x2', 
		'\x257', '\x255', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\x3', 
		'\x2', '\x2', '\x2', '\x258', '\x45', '\x3', '\x2', '\x2', '\x2', '\x259', 
		'\x257', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25D', '\x5', 'r', ':', 
		'\x2', '\x25B', '\x25C', '\a', 'm', '\x2', '\x2', '\x25C', '\x25E', '\x5', 
		' ', '\x11', '\x2', '\x25D', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25D', 
		'\x25E', '\x3', '\x2', '\x2', '\x2', '\x25E', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x25F', '\x260', '\t', '\x2', '\x2', '\x2', '\x260', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x261', '\x262', '\t', '\x3', '\x2', '\x2', '\x262', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x263', '\x264', '\t', '\x4', '\x2', 
		'\x2', '\x264', 'M', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', '\t', 
		'\x5', '\x2', '\x2', '\x266', 'O', '\x3', '\x2', '\x2', '\x2', '\x267', 
		'\x268', '\t', '\x6', '\x2', '\x2', '\x268', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x269', '\x26A', '\t', '\a', '\x2', '\x2', '\x26A', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x26B', '\x26E', '\x5', 'V', ',', '\x2', '\x26C', 
		'\x26E', '\x5', 'X', '-', '\x2', '\x26D', '\x26B', '\x3', '\x2', '\x2', 
		'\x2', '\x26D', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26E', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x26F', '\x270', '\a', 't', '\x2', '\x2', '\x270', 
		'\x271', '\a', 't', '\x2', '\x2', '\x271', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x272', '\x273', '\a', 't', '\x2', '\x2', '\x273', '\x274', '\a', 't', 
		'\x2', '\x2', '\x274', 'Y', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', 
		'\t', '\b', '\x2', '\x2', '\x276', '[', '\x3', '\x2', '\x2', '\x2', '\x277', 
		'\x278', '\t', '\t', '\x2', '\x2', '\x278', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x279', '\x27A', '\t', '\n', '\x2', '\x2', '\x27A', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x27B', '\x27E', '\x5', '\x64', '\x33', '\x2', '\x27C', 
		'\x27E', '\x5', 'n', '\x38', '\x2', '\x27D', '\x27B', '\x3', '\x2', '\x2', 
		'\x2', '\x27D', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x27F', '\x282', '\x5', '\x64', '\x33', '\x2', 
		'\x280', '\x282', '\x5', 'p', '\x39', '\x2', '\x281', '\x27F', '\x3', 
		'\x2', '\x2', '\x2', '\x281', '\x280', '\x3', '\x2', '\x2', '\x2', '\x282', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x283', '\x284', '\b', '\x33', '\x1', 
		'\x2', '\x284', '\x28A', '\x5', 'l', '\x37', '\x2', '\x285', '\x286', 
		'\x5', '\x66', '\x34', '\x2', '\x286', '\x287', '\x5', 'h', '\x35', '\x2', 
		'\x287', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x288', '\x28A', '\x5', 
		'v', '<', '\x2', '\x289', '\x283', '\x3', '\x2', '\x2', '\x2', '\x289', 
		'\x285', '\x3', '\x2', '\x2', '\x2', '\x289', '\x288', '\x3', '\x2', '\x2', 
		'\x2', '\x28A', '\x292', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28C', 
		'\f', '\x4', '\x2', '\x2', '\x28C', '\x28D', '\a', 'p', '\x2', '\x2', 
		'\x28D', '\x291', '\a', 'q', '\x2', '\x2', '\x28E', '\x28F', '\f', '\x3', 
		'\x2', '\x2', '\x28F', '\x291', '\a', 'v', '\x2', '\x2', '\x290', '\x28B', 
		'\x3', '\x2', '\x2', '\x2', '\x290', '\x28E', '\x3', '\x2', '\x2', '\x2', 
		'\x291', '\x294', '\x3', '\x2', '\x2', '\x2', '\x292', '\x290', '\x3', 
		'\x2', '\x2', '\x2', '\x292', '\x293', '\x3', '\x2', '\x2', '\x2', '\x293', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x294', '\x292', '\x3', '\x2', '\x2', 
		'\x2', '\x295', '\x296', '\x5', 'v', '<', '\x2', '\x296', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x297', '\x298', '\a', 't', '\x2', '\x2', '\x298', 
		'\x29D', '\x5', 'j', '\x36', '\x2', '\x299', '\x29A', '\a', 'l', '\x2', 
		'\x2', '\x29A', '\x29C', '\x5', 'j', '\x36', '\x2', '\x29B', '\x299', 
		'\x3', '\x2', '\x2', '\x2', '\x29C', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x29D', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\x3', 
		'\x2', '\x2', '\x2', '\x29E', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x29F', 
		'\x29D', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\a', 'u', '\x2', 
		'\x2', '\x2A1', 'i', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', '\x5', 
		'\x64', '\x33', '\x2', '\x2A3', 'k', '\x3', '\x2', '\x2', '\x2', '\x2A4', 
		'\x2A5', '\t', '\v', '\x2', '\x2', '\x2A5', 'm', '\x3', '\x2', '\x2', 
		'\x2', '\x2A6', '\x2A7', '\a', '\x11', '\x2', '\x2', '\x2A7', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x2A8', '\x2A9', '\a', '\x30', '\x2', '\x2', '\x2A9', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\x5', 'x', '=', '\x2', 
		'\x2AB', 's', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\x5', 'v', 
		'<', '\x2', '\x2AD', 'u', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2B3', 
		'\x5', 'x', '=', '\x2', '\x2AF', '\x2B0', '\a', 'k', '\x2', '\x2', '\x2B0', 
		'\x2B2', '\x5', 'x', '=', '\x2', '\x2B1', '\x2AF', '\x3', '\x2', '\x2', 
		'\x2', '\x2B2', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B1', 
		'\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', '\x3', '\x2', '\x2', '\x2', 
		'\x2B4', 'w', '\x3', '\x2', '\x2', '\x2', '\x2B5', '\x2B3', '\x3', '\x2', 
		'\x2', '\x2', '\x2B6', '\x2B7', '\t', '\f', '\x2', '\x2', '\x2B7', 'y', 
		'\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2BF', '\x5', '|', '?', '\x2', 
		'\x2B9', '\x2BF', '\x5', '~', '@', '\x2', '\x2BA', '\x2BF', '\x5', '\x80', 
		'\x41', '\x2', '\x2BB', '\x2BF', '\x5', '\x82', '\x42', '\x2', '\x2BC', 
		'\x2BF', '\x5', '\x84', '\x43', '\x2', '\x2BD', '\x2BF', '\x5', '\x86', 
		'\x44', '\x2', '\x2BE', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2BE', 
		'\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BA', '\x3', '\x2', '\x2', 
		'\x2', '\x2BE', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BD', '\x3', '\x2', '\x2', '\x2', 
		'\x2BF', '{', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\a', '\f', 
		'\x2', '\x2', '\x2C1', '}', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C3', 
		'\t', '\r', '\x2', '\x2', '\x2C3', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x2C4', '\x2C5', '\a', 'y', '\x2', '\x2', '\x2C5', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x2C6', '\x2C7', '\a', 'z', '\x2', '\x2', '\x2C7', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\a', '{', '\x2', '\x2', 
		'\x2C9', '\x85', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', '\a', '\x80', 
		'\x2', '\x2', '\x2CB', '\x87', '\x3', '\x2', '\x2', '\x2', '\x34', '\x8B', 
		'\x94', '\x9B', '\xB0', '\xB6', '\xE1', '\xEB', '\xEF', '\xF4', '\x106', 
		'\x10C', '\x114', '\x119', '\x11F', '\x12D', '\x12F', '\x143', '\x156', 
		'\x175', '\x179', '\x18C', '\x191', '\x1CD', '\x1D7', '\x1E1', '\x1E5', 
		'\x1EA', '\x1EC', '\x1F8', '\x1FE', '\x205', '\x20C', '\x218', '\x220', 
		'\x22B', '\x22F', '\x237', '\x246', '\x250', '\x257', '\x25D', '\x26D', 
		'\x27D', '\x281', '\x289', '\x290', '\x292', '\x29D', '\x2B3', '\x2BE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.Core.Syntax.InternalSyntax
