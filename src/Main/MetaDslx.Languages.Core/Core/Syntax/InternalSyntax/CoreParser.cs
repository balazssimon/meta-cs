//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Core\Syntax\InternalSyntax\CoreParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Core.Syntax.InternalSyntax {

using MetaDslx.CodeAnalysis.Symbols;
using MetaDslx.Languages.Core.Model;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class CoreParser : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.Antlr4Parser {
    private CoreSyntaxParser SyntaxParser => (CoreSyntaxParser)this.IncrementalAntlr4Parser;
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KNamespace=1, KUsing=2, KExtern=3, KAbstract=4, KInterface=5, KClass=6, 
		KStruct=7, KEnum=8, KNew=9, KNull=10, KTrue=11, KFalse=12, KDynamic=13, 
		KObject=14, KVoid=15, KBool=16, KChar=17, KSByte=18, KByte=19, KShort=20, 
		KUShort=21, KInt=22, KUInt=23, KLong=24, KULong=25, KDecimal=26, KFloat=27, 
		KDouble=28, KString=29, KTypeof=30, KNameof=31, KSizeof=32, KDefault=33, 
		KChecked=34, KUnchecked=35, KAs=36, KIs=37, KNot=38, KThis=39, KBase=40, 
		KAsync=41, KAwait=42, KConst=43, KReadonly=44, KDiscard=45, KThrow=46, 
		KStatic=47, TQuestionDot=48, TQuestionOpenBracket=49, TQuestionQuestion=50, 
		TAmpersand=51, THat=52, TBar=53, TAndAlso=54, TOrElse=55, TPlusPlus=56, 
		TMinusMinus=57, TPlus=58, TMinus=59, TTilde=60, TExclamation=61, TSlash=62, 
		TAsterisk=63, TPercent=64, TArrow=65, TLessThanOrEqual=66, TGreaterThanOrEqual=67, 
		TEqual=68, TNotEqual=69, TAsteriskAssign=70, TSlashAssign=71, TPercentAssign=72, 
		TPlusAssign=73, TMinusAssign=74, TLeftShiftAssign=75, TRightShiftAssign=76, 
		TAmpersandAssign=77, THatAssign=78, TBarAssign=79, TDotDot=80, TSemicolon=81, 
		TColon=82, TDot=83, TComma=84, TAssign=85, TOpenParen=86, TCloseParen=87, 
		TOpenBracket=88, TCloseBracket=89, TOpenBrace=90, TCloseBrace=91, TLessThan=92, 
		TGreaterThan=93, TQuestion=94, IdentifierNormal=95, IdentifierVerbatim=96, 
		LInteger=97, LDecimal=98, LScientific=99, LDateTimeOffset=100, LDateTime=101, 
		LDate=102, LTime=103, LRegularString=104, LGuid=105, LUtf8Bom=106, LWhiteSpace=107, 
		LCrLf=108, LLineEnd=109, LSingleLineComment=110, LComment=111, LDoubleQuoteVerbatimString=112, 
		LSingleQuoteVerbatimString=113, DoubleQuoteVerbatimStringLiteralStart=114, 
		SingleQuoteVerbatimStringLiteralStart=115, LCommentStart=116;
	public const int
		RULE_main = 0, RULE_usingNamespace = 1, RULE_statement = 2, RULE_blockStatement = 3, 
		RULE_expression = 4, RULE_tupleArguments = 5, RULE_argumentList = 6, RULE_argumentExpression = 7, 
		RULE_initializerExpression = 8, RULE_fieldInitializerExpressions = 9, 
		RULE_fieldInitializerExpression = 10, RULE_collectionInitializerExpressions = 11, 
		RULE_dictionaryInitializerExpressions = 12, RULE_dictionaryInitializerExpression = 13, 
		RULE_lambdaSignature = 14, RULE_implicitLambdaSignature = 15, RULE_implicitParameterList = 16, 
		RULE_implicitParameter = 17, RULE_explicitLambdaSignature = 18, RULE_explicitParameterList = 19, 
		RULE_explicitParameter = 20, RULE_lambdaBody = 21, RULE_dotOperator = 22, 
		RULE_indexerOperator = 23, RULE_postfixOperator = 24, RULE_unaryOperator = 25, 
		RULE_multiplicativeOperator = 26, RULE_additiveOperator = 27, RULE_shiftOperator = 28, 
		RULE_leftShiftOperator = 29, RULE_rightShiftOperator = 30, RULE_relationalOperator = 31, 
		RULE_equalityOperator = 32, RULE_compoundAssignmentOperator = 33, RULE_returnType = 34, 
		RULE_typeReference = 35, RULE_namedType = 36, RULE_genericTypeArguments = 37, 
		RULE_genericTypeArgument = 38, RULE_primitiveType = 39, RULE_voidType = 40, 
		RULE_name = 41, RULE_qualifiedName = 42, RULE_qualifier = 43, RULE_identifier = 44, 
		RULE_literal = 45, RULE_nullLiteral = 46, RULE_booleanLiteral = 47, RULE_integerLiteral = 48, 
		RULE_decimalLiteral = 49, RULE_scientificLiteral = 50, RULE_stringLiteral = 51;
	public static readonly string[] ruleNames = {
		"main", "usingNamespace", "statement", "blockStatement", "expression", 
		"tupleArguments", "argumentList", "argumentExpression", "initializerExpression", 
		"fieldInitializerExpressions", "fieldInitializerExpression", "collectionInitializerExpressions", 
		"dictionaryInitializerExpressions", "dictionaryInitializerExpression", 
		"lambdaSignature", "implicitLambdaSignature", "implicitParameterList", 
		"implicitParameter", "explicitLambdaSignature", "explicitParameterList", 
		"explicitParameter", "lambdaBody", "dotOperator", "indexerOperator", "postfixOperator", 
		"unaryOperator", "multiplicativeOperator", "additiveOperator", "shiftOperator", 
		"leftShiftOperator", "rightShiftOperator", "relationalOperator", "equalityOperator", 
		"compoundAssignmentOperator", "returnType", "typeReference", "namedType", 
		"genericTypeArguments", "genericTypeArgument", "primitiveType", "voidType", 
		"name", "qualifiedName", "qualifier", "identifier", "literal", "nullLiteral", 
		"booleanLiteral", "integerLiteral", "decimalLiteral", "scientificLiteral", 
		"stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'using'", "'extern'", "'abstract'", "'interface'", 
		"'class'", "'struct'", "'enum'", "'new'", "'null'", "'true'", "'false'", 
		"'dynamic'", "'object'", "'void'", "'bool'", "'char'", "'sbyte'", "'byte'", 
		"'short'", "'ushort'", "'int'", "'uint'", "'long'", "'ulong'", "'decimal'", 
		"'float'", "'double'", "'string'", "'typeof'", "'nameof'", "'sizeof'", 
		"'default'", "'checked'", "'unchecked'", "'as'", "'is'", "'not'", "'this'", 
		"'base'", "'async'", "'await'", "'const'", "'readonly'", "'_'", "'throw'", 
		"'static'", "'?.'", "'?['", "'??'", "'&'", "'^'", "'|'", "'&&'", "'||'", 
		"'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", "'=>'", 
		"'<='", "'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'&='", "'^='", "'|='", "'..'", "';'", "':'", "'.'", 
		"','", "'='", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'>'", 
		"'?'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'\"'", "'''", "'@\"'", "'@''", "'/*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KUsing", "KExtern", "KAbstract", "KInterface", "KClass", 
		"KStruct", "KEnum", "KNew", "KNull", "KTrue", "KFalse", "KDynamic", "KObject", 
		"KVoid", "KBool", "KChar", "KSByte", "KByte", "KShort", "KUShort", "KInt", 
		"KUInt", "KLong", "KULong", "KDecimal", "KFloat", "KDouble", "KString", 
		"KTypeof", "KNameof", "KSizeof", "KDefault", "KChecked", "KUnchecked", 
		"KAs", "KIs", "KNot", "KThis", "KBase", "KAsync", "KAwait", "KConst", 
		"KReadonly", "KDiscard", "KThrow", "KStatic", "TQuestionDot", "TQuestionOpenBracket", 
		"TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", "TOrElse", 
		"TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TArrow", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "TDotDot", "TSemicolon", 
		"TColon", "TDot", "TComma", "TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", 
		"TCloseBracket", "TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", 
		"TQuestion", "IdentifierNormal", "IdentifierVerbatim", "LInteger", "LDecimal", 
		"LScientific", "LDateTimeOffset", "LDateTime", "LDate", "LTime", "LRegularString", 
		"LGuid", "LUtf8Bom", "LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", 
		"LComment", "LDoubleQuoteVerbatimString", "LSingleQuoteVerbatimString", 
		"DoubleQuoteVerbatimStringLiteralStart", "SingleQuoteVerbatimStringLiteralStart", 
		"LCommentStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CoreParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CoreParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CoreParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CoreParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CoreParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingNamespaceContext[] usingNamespace() {
			return GetRuleContexts<UsingNamespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingNamespaceContext usingNamespace(int i) {
			return GetRuleContext<UsingNamespaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMain() : _DoParseMain();
	}

	internal MainContext _DoParseMain() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KUsing) {
				{
				{
				State = 104;
				usingNamespace();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KTypeof) | (1L << KNameof) | (1L << KSizeof) | (1L << KDefault) | (1L << KChecked) | (1L << KUnchecked) | (1L << KThis) | (1L << KBase) | (1L << KAwait) | (1L << KDiscard) | (1L << KThrow) | (1L << THat) | (1L << TPlusPlus) | (1L << TMinusMinus) | (1L << TPlus) | (1L << TMinus) | (1L << TTilde) | (1L << TExclamation))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (TOpenParen - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)) | (1L << (LInteger - 86)) | (1L << (LDecimal - 86)) | (1L << (LScientific - 86)) | (1L << (LRegularString - 86)))) != 0)) {
				{
				{
				State = 110;
				statement();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 116;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUsing() { return GetToken(CoreParser.KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CoreParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CoreParser.TAssign, 0); }
		public UsingNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingNamespaceContext usingNamespace() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseUsingNamespace() : _DoParseUsingNamespace();
	}

	internal UsingNamespaceContext _DoParseUsingNamespace() {
		UsingNamespaceContext _localctx = new UsingNamespaceContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(KUsing);
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 119;
				name();
				State = 120;
				Match(TAssign);
				}
				break;
			}
			State = 124;
			qualifier();
			State = 125;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CoreParser.TSemicolon, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseStatement() : _DoParseStatement();
	}

	internal StatementContext _DoParseStatement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			expression(0);
			State = 128;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBrace() { return GetToken(CoreParser.TOpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBrace() { return GetToken(CoreParser.TCloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseBlockStatement() : _DoParseBlockStatement();
	}

	internal BlockStatementContext _DoParseBlockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(TOpenBrace);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KTypeof) | (1L << KNameof) | (1L << KSizeof) | (1L << KDefault) | (1L << KChecked) | (1L << KUnchecked) | (1L << KThis) | (1L << KBase) | (1L << KAwait) | (1L << KDiscard) | (1L << KThrow) | (1L << THat) | (1L << TPlusPlus) | (1L << TMinusMinus) | (1L << TPlus) | (1L << TMinus) | (1L << TTilde) | (1L << TExclamation))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (TOpenParen - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)) | (1L << (LInteger - 86)) | (1L << (LDecimal - 86)) | (1L << (LScientific - 86)) | (1L << (LRegularString - 86)))) != 0)) {
				{
				{
				State = 131;
				statement();
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 137;
			Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNew() { return GetToken(CoreParser.KNew, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerExpressionContext initializerExpression() {
			return GetRuleContext<InitializerExpressionContext>(0);
		}
		public NewExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrElseExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOrElse() { return GetToken(CoreParser.TOrElse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrElseExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrElseExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KThis() { return GetToken(CoreParser.KThis, 0); }
		public ThisExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompAssignExprContext : ExpressionContext {
		public ExpressionContext target;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignmentOperatorContext compoundAssignmentOperator() {
			return GetRuleContext<CompoundAssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompAssignExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTypeof() { return GetToken(CoreParser.KTypeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public TypeofExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondExprContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext whenTrue;
		public ExpressionContext whenFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestion() { return GetToken(CoreParser.TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CoreParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CondExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UncheckedExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUnchecked() { return GetToken(CoreParser.KUnchecked, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public UncheckedExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUncheckedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeCastExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeCastExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCastExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THat() { return GetToken(CoreParser.THat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexerOperatorContext indexerOperator() {
			return GetRuleContext<IndexerOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(CoreParser.TCloseBracket, 0); }
		public IndexerExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexerExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostfixUnaryExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixOperatorContext postfixOperator() {
			return GetRuleContext<PostfixOperatorContext>(0);
		}
		public PostfixUnaryExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvocationExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public InvocationExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaSignatureContext lambdaSignature() {
			return GetRuleContext<LambdaSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TArrow() { return GetToken(CoreParser.TArrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public ParenthesizedExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeIsExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIs() { return GetToken(CoreParser.KIs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNot() { return GetToken(CoreParser.KNot, 0); }
		public TypeIsExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DiscardExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDiscard() { return GetToken(CoreParser.KDiscard, 0); }
		public DiscardExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExprContext : ExpressionContext {
		public ExpressionContext target;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CoreParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifierExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotOperatorContext dotOperator() {
			return GetRuleContext<DotOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeArgumentsContext genericTypeArguments() {
			return GetRuleContext<GenericTypeArgumentsContext>(0);
		}
		public QualifierExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KThrow() { return GetToken(CoreParser.KThrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TBar() { return GetToken(CoreParser.TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndAlsoExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAndAlso() { return GetToken(CoreParser.TAndAlso, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndAlsoExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndAlsoExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AwaitExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KAwait() { return GetToken(CoreParser.KAwait, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameofExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNameof() { return GetToken(CoreParser.KNameof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public NameofExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameofExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckedExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KChecked() { return GetToken(CoreParser.KChecked, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public CheckedExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeOperatorContext multiplicativeOperator() {
			return GetRuleContext<MultiplicativeOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalExprContext : ExpressionContext {
		public ExpressionContext value;
		public ExpressionContext whenNull;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestionQuestion() { return GetToken(CoreParser.TQuestionQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOperatorContext shiftOperator() {
			return GetRuleContext<ShiftOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SizeofExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSizeof() { return GetToken(CoreParser.KSizeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public SizeofExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeofExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullForgivingExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TExclamation() { return GetToken(CoreParser.TExclamation, 0); }
		public NullForgivingExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullForgivingExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public EqualityOperatorContext equalityOperator() {
			return GetRuleContext<EqualityOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveOperatorContext additiveOperator() {
			return GetRuleContext<AdditiveOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeAsExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KAs() { return GetToken(CoreParser.KAs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeAsExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDefault() { return GetToken(CoreParser.KDefault, 0); }
		public DefaultExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BaseExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KBase() { return GetToken(CoreParser.KBase, 0); }
		public BaseExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleArgumentsContext tupleArguments() {
			return GetRuleContext<TupleArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		public TupleExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDotDot() { return GetToken(CoreParser.TDotDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RangeExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeArgumentsContext genericTypeArguments() {
			return GetRuleContext<GenericTypeArgumentsContext>(0);
		}
		public IdentifierExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAmpersand() { return GetToken(CoreParser.TAmpersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseExpression(_p) : _DoParseExpression(_p);
	}

	internal ExpressionContext _DoParseExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				_localctx = new ParenthesizedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 140;
				Match(TOpenParen);
				State = 141;
				expression(0);
				State = 142;
				Match(TCloseParen);
				}
				break;
			case 2:
				{
				_localctx = new TupleExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 144;
				Match(TOpenParen);
				State = 145;
				tupleArguments();
				State = 146;
				Match(TCloseParen);
				}
				break;
			case 3:
				{
				_localctx = new DiscardExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 148;
				Match(KDiscard);
				}
				break;
			case 4:
				{
				_localctx = new DefaultExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149;
				Match(KDefault);
				}
				break;
			case 5:
				{
				_localctx = new ThisExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150;
				Match(KThis);
				}
				break;
			case 6:
				{
				_localctx = new BaseExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 151;
				Match(KBase);
				}
				break;
			case 7:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 152;
				literal();
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 153;
				identifier();
				State = 155;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 154;
					genericTypeArguments();
					}
					break;
				}
				}
				break;
			case 9:
				{
				_localctx = new TypeofExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 157;
				Match(KTypeof);
				State = 158;
				Match(TOpenParen);
				State = 159;
				typeReference(0);
				State = 160;
				Match(TCloseParen);
				}
				break;
			case 10:
				{
				_localctx = new NameofExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 162;
				Match(KNameof);
				State = 163;
				Match(TOpenParen);
				State = 164;
				expression(0);
				State = 165;
				Match(TCloseParen);
				}
				break;
			case 11:
				{
				_localctx = new SizeofExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 167;
				Match(KSizeof);
				State = 168;
				Match(TOpenParen);
				State = 169;
				typeReference(0);
				State = 170;
				Match(TCloseParen);
				}
				break;
			case 12:
				{
				_localctx = new CheckedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 172;
				Match(KChecked);
				State = 173;
				Match(TOpenParen);
				State = 174;
				expression(0);
				State = 175;
				Match(TCloseParen);
				}
				break;
			case 13:
				{
				_localctx = new UncheckedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 177;
				Match(KUnchecked);
				State = 178;
				Match(TOpenParen);
				State = 179;
				expression(0);
				State = 180;
				Match(TCloseParen);
				}
				break;
			case 14:
				{
				_localctx = new NewExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182;
				Match(KNew);
				State = 183;
				typeReference(0);
				State = 184;
				Match(TOpenParen);
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KTypeof) | (1L << KNameof) | (1L << KSizeof) | (1L << KDefault) | (1L << KChecked) | (1L << KUnchecked) | (1L << KThis) | (1L << KBase) | (1L << KAwait) | (1L << KDiscard) | (1L << KThrow) | (1L << THat) | (1L << TPlusPlus) | (1L << TMinusMinus) | (1L << TPlus) | (1L << TMinus) | (1L << TTilde) | (1L << TExclamation))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (TOpenParen - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)) | (1L << (LInteger - 86)) | (1L << (LDecimal - 86)) | (1L << (LScientific - 86)) | (1L << (LRegularString - 86)))) != 0)) {
					{
					State = 185;
					argumentList();
					}
				}

				State = 188;
				Match(TCloseParen);
				State = 190;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 189;
					initializerExpression();
					}
					break;
				}
				}
				break;
			case 15:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 192;
				unaryOperator();
				State = 193;
				expression(22);
				}
				break;
			case 16:
				{
				_localctx = new TypeCastExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 195;
				Match(TOpenParen);
				State = 196;
				typeReference(0);
				State = 197;
				Match(TCloseParen);
				State = 198;
				expression(21);
				}
				break;
			case 17:
				{
				_localctx = new AwaitExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 200;
				Match(KAwait);
				State = 201;
				expression(20);
				}
				break;
			case 18:
				{
				_localctx = new ThrowExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 202;
				Match(KThrow);
				State = 203;
				expression(6);
				}
				break;
			case 19:
				{
				_localctx = new LambdaExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 204;
				lambdaSignature();
				State = 205;
				Match(TArrow);
				State = 206;
				lambdaBody();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 294;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new RangeExprContext(new ExpressionContext(_parentctx, _parentState));
						((RangeExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 210;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 211;
						Match(TDotDot);
						State = 212;
						((RangeExprContext)_localctx).right = expression(20);
						}
						break;
					case 2:
						{
						_localctx = new MultExprContext(new ExpressionContext(_parentctx, _parentState));
						((MultExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 213;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 214;
						multiplicativeOperator();
						State = 215;
						((MultExprContext)_localctx).right = expression(19);
						}
						break;
					case 3:
						{
						_localctx = new AddExprContext(new ExpressionContext(_parentctx, _parentState));
						((AddExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 217;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 218;
						additiveOperator();
						State = 219;
						((AddExprContext)_localctx).right = expression(18);
						}
						break;
					case 4:
						{
						_localctx = new ShiftExprContext(new ExpressionContext(_parentctx, _parentState));
						((ShiftExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 221;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 222;
						shiftOperator();
						State = 223;
						((ShiftExprContext)_localctx).right = expression(17);
						}
						break;
					case 5:
						{
						_localctx = new RelExprContext(new ExpressionContext(_parentctx, _parentState));
						((RelExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 225;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 226;
						relationalOperator();
						State = 227;
						((RelExprContext)_localctx).right = expression(16);
						}
						break;
					case 6:
						{
						_localctx = new EqExprContext(new ExpressionContext(_parentctx, _parentState));
						((EqExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 229;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 230;
						equalityOperator();
						State = 231;
						((EqExprContext)_localctx).right = expression(13);
						}
						break;
					case 7:
						{
						_localctx = new AndExprContext(new ExpressionContext(_parentctx, _parentState));
						((AndExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 233;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 234;
						Match(TAmpersand);
						State = 235;
						((AndExprContext)_localctx).right = expression(12);
						}
						break;
					case 8:
						{
						_localctx = new XorExprContext(new ExpressionContext(_parentctx, _parentState));
						((XorExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 236;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 237;
						Match(THat);
						State = 238;
						((XorExprContext)_localctx).right = expression(11);
						}
						break;
					case 9:
						{
						_localctx = new OrExprContext(new ExpressionContext(_parentctx, _parentState));
						((OrExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 239;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 240;
						Match(TBar);
						State = 241;
						((OrExprContext)_localctx).right = expression(10);
						}
						break;
					case 10:
						{
						_localctx = new AndAlsoExprContext(new ExpressionContext(_parentctx, _parentState));
						((AndAlsoExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 242;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 243;
						Match(TAndAlso);
						State = 244;
						((AndAlsoExprContext)_localctx).right = expression(9);
						}
						break;
					case 11:
						{
						_localctx = new OrElseExprContext(new ExpressionContext(_parentctx, _parentState));
						((OrElseExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 245;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 246;
						Match(TOrElse);
						State = 247;
						((OrElseExprContext)_localctx).right = expression(8);
						}
						break;
					case 12:
						{
						_localctx = new CoalExprContext(new ExpressionContext(_parentctx, _parentState));
						((CoalExprContext)_localctx).value = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 248;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 249;
						Match(TQuestionQuestion);
						State = 250;
						((CoalExprContext)_localctx).whenNull = expression(6);
						}
						break;
					case 13:
						{
						_localctx = new CondExprContext(new ExpressionContext(_parentctx, _parentState));
						((CondExprContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 251;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 252;
						Match(TQuestion);
						State = 253;
						((CondExprContext)_localctx).whenTrue = expression(0);
						State = 254;
						Match(TColon);
						State = 255;
						((CondExprContext)_localctx).whenFalse = expression(5);
						}
						break;
					case 14:
						{
						_localctx = new AssignExprContext(new ExpressionContext(_parentctx, _parentState));
						((AssignExprContext)_localctx).target = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 257;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 258;
						Match(TAssign);
						State = 259;
						((AssignExprContext)_localctx).value = expression(4);
						}
						break;
					case 15:
						{
						_localctx = new CompAssignExprContext(new ExpressionContext(_parentctx, _parentState));
						((CompAssignExprContext)_localctx).target = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 260;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 261;
						compoundAssignmentOperator();
						State = 262;
						((CompAssignExprContext)_localctx).value = expression(3);
						}
						break;
					case 16:
						{
						_localctx = new QualifierExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 264;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 265;
						dotOperator();
						State = 266;
						identifier();
						State = 268;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
						case 1:
							{
							State = 267;
							genericTypeArguments();
							}
							break;
						}
						}
						break;
					case 17:
						{
						_localctx = new IndexerExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 270;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 271;
						indexerOperator();
						State = 272;
						argumentList();
						State = 273;
						Match(TCloseBracket);
						}
						break;
					case 18:
						{
						_localctx = new InvocationExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 275;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 276;
						Match(TOpenParen);
						State = 278;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KTypeof) | (1L << KNameof) | (1L << KSizeof) | (1L << KDefault) | (1L << KChecked) | (1L << KUnchecked) | (1L << KThis) | (1L << KBase) | (1L << KAwait) | (1L << KDiscard) | (1L << KThrow) | (1L << THat) | (1L << TPlusPlus) | (1L << TMinusMinus) | (1L << TPlus) | (1L << TMinus) | (1L << TTilde) | (1L << TExclamation))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (TOpenParen - 86)) | (1L << (IdentifierNormal - 86)) | (1L << (IdentifierVerbatim - 86)) | (1L << (LInteger - 86)) | (1L << (LDecimal - 86)) | (1L << (LScientific - 86)) | (1L << (LRegularString - 86)))) != 0)) {
							{
							State = 277;
							argumentList();
							}
						}

						State = 280;
						Match(TCloseParen);
						}
						break;
					case 19:
						{
						_localctx = new PostfixUnaryExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 281;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 282;
						postfixOperator();
						}
						break;
					case 20:
						{
						_localctx = new NullForgivingExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 283;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 284;
						Match(TExclamation);
						}
						break;
					case 21:
						{
						_localctx = new TypeIsExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 285;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 286;
						Match(KIs);
						State = 288;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==KNot) {
							{
							State = 287;
							Match(KNot);
							}
						}

						State = 290;
						typeReference(0);
						}
						break;
					case 22:
						{
						_localctx = new TypeAsExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 291;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 292;
						Match(KAs);
						State = 293;
						typeReference(0);
						}
						break;
					}
					} 
				}
				State = 298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TupleArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma() { return GetToken(CoreParser.TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TupleArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleArgumentsContext tupleArguments() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTupleArguments() : _DoParseTupleArguments();
	}

	internal TupleArgumentsContext _DoParseTupleArguments() {
		TupleArgumentsContext _localctx = new TupleArgumentsContext(Context, State);
		EnterRule(_localctx, 10, RULE_tupleArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			argumentExpression();
			State = 300;
			Match(TComma);
			State = 301;
			argumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext[] argumentExpression() {
			return GetRuleContexts<ArgumentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext argumentExpression(int i) {
			return GetRuleContext<ArgumentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseArgumentList() : _DoParseArgumentList();
	}

	internal ArgumentListContext _DoParseArgumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 12, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			argumentExpression();
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 304;
				Match(TComma);
				State = 305;
				argumentExpression();
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CoreParser.TColon, 0); }
		public ArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionContext argumentExpression() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseArgumentExpression() : _DoParseArgumentExpression();
	}

	internal ArgumentExpressionContext _DoParseArgumentExpression() {
		ArgumentExpressionContext _localctx = new ArgumentExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_argumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 311;
				name();
				State = 312;
				Match(TColon);
				}
				break;
			}
			State = 316;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerExpressionsContext fieldInitializerExpressions() {
			return GetRuleContext<FieldInitializerExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionInitializerExpressionsContext collectionInitializerExpressions() {
			return GetRuleContext<CollectionInitializerExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryInitializerExpressionsContext dictionaryInitializerExpressions() {
			return GetRuleContext<DictionaryInitializerExpressionsContext>(0);
		}
		public InitializerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerExpressionContext initializerExpression() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseInitializerExpression() : _DoParseInitializerExpression();
	}

	internal InitializerExpressionContext _DoParseInitializerExpression() {
		InitializerExpressionContext _localctx = new InitializerExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_initializerExpression);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318;
				fieldInitializerExpressions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319;
				collectionInitializerExpressions();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 320;
				dictionaryInitializerExpressions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldInitializerExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerExpressionContext[] fieldInitializerExpression() {
			return GetRuleContexts<FieldInitializerExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerExpressionContext fieldInitializerExpression(int i) {
			return GetRuleContext<FieldInitializerExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public FieldInitializerExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldInitializerExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldInitializerExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldInitializerExpressionsContext fieldInitializerExpressions() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldInitializerExpressions() : _DoParseFieldInitializerExpressions();
	}

	internal FieldInitializerExpressionsContext _DoParseFieldInitializerExpressions() {
		FieldInitializerExpressionsContext _localctx = new FieldInitializerExpressionsContext(Context, State);
		EnterRule(_localctx, 18, RULE_fieldInitializerExpressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			fieldInitializerExpression();
			State = 328;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 324;
					Match(TComma);
					State = 325;
					fieldInitializerExpression();
					}
					} 
				}
				State = 330;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldInitializerExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CoreParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldInitializerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldInitializerExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldInitializerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldInitializerExpressionContext fieldInitializerExpression() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFieldInitializerExpression() : _DoParseFieldInitializerExpression();
	}

	internal FieldInitializerExpressionContext _DoParseFieldInitializerExpression() {
		FieldInitializerExpressionContext _localctx = new FieldInitializerExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_fieldInitializerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			identifier();
			State = 332;
			Match(TAssign);
			State = 333;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionInitializerExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public CollectionInitializerExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionInitializerExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionInitializerExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionInitializerExpressionsContext collectionInitializerExpressions() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCollectionInitializerExpressions() : _DoParseCollectionInitializerExpressions();
	}

	internal CollectionInitializerExpressionsContext _DoParseCollectionInitializerExpressions() {
		CollectionInitializerExpressionsContext _localctx = new CollectionInitializerExpressionsContext(Context, State);
		EnterRule(_localctx, 22, RULE_collectionInitializerExpressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			expression(0);
			State = 340;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 336;
					Match(TComma);
					State = 337;
					expression(0);
					}
					} 
				}
				State = 342;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryInitializerExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryInitializerExpressionContext[] dictionaryInitializerExpression() {
			return GetRuleContexts<DictionaryInitializerExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryInitializerExpressionContext dictionaryInitializerExpression(int i) {
			return GetRuleContext<DictionaryInitializerExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public DictionaryInitializerExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryInitializerExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryInitializerExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryInitializerExpressionsContext dictionaryInitializerExpressions() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDictionaryInitializerExpressions() : _DoParseDictionaryInitializerExpressions();
	}

	internal DictionaryInitializerExpressionsContext _DoParseDictionaryInitializerExpressions() {
		DictionaryInitializerExpressionsContext _localctx = new DictionaryInitializerExpressionsContext(Context, State);
		EnterRule(_localctx, 24, RULE_dictionaryInitializerExpressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			dictionaryInitializerExpression();
			State = 348;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 344;
					Match(TComma);
					State = 345;
					dictionaryInitializerExpression();
					}
					} 
				}
				State = 350;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryInitializerExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(CoreParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(CoreParser.TCloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CoreParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DictionaryInitializerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryInitializerExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryInitializerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryInitializerExpressionContext dictionaryInitializerExpression() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDictionaryInitializerExpression() : _DoParseDictionaryInitializerExpression();
	}

	internal DictionaryInitializerExpressionContext _DoParseDictionaryInitializerExpression() {
		DictionaryInitializerExpressionContext _localctx = new DictionaryInitializerExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_dictionaryInitializerExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(TOpenBracket);
			State = 352;
			identifier();
			State = 353;
			Match(TCloseBracket);
			State = 354;
			Match(TAssign);
			State = 355;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitLambdaSignatureContext implicitLambdaSignature() {
			return GetRuleContext<ImplicitLambdaSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitLambdaSignatureContext explicitLambdaSignature() {
			return GetRuleContext<ExplicitLambdaSignatureContext>(0);
		}
		public LambdaSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaSignatureContext lambdaSignature() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLambdaSignature() : _DoParseLambdaSignature();
	}

	internal LambdaSignatureContext _DoParseLambdaSignature() {
		LambdaSignatureContext _localctx = new LambdaSignatureContext(Context, State);
		EnterRule(_localctx, 28, RULE_lambdaSignature);
		try {
			State = 359;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357;
				implicitLambdaSignature();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358;
				explicitLambdaSignature();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitLambdaSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitParameterContext implicitParameter() {
			return GetRuleContext<ImplicitParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitParameterListContext implicitParameterList() {
			return GetRuleContext<ImplicitParameterListContext>(0);
		}
		public ImplicitLambdaSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitLambdaSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitLambdaSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitLambdaSignatureContext implicitLambdaSignature() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseImplicitLambdaSignature() : _DoParseImplicitLambdaSignature();
	}

	internal ImplicitLambdaSignatureContext _DoParseImplicitLambdaSignature() {
		ImplicitLambdaSignatureContext _localctx = new ImplicitLambdaSignatureContext(Context, State);
		EnterRule(_localctx, 30, RULE_implicitLambdaSignature);
		try {
			State = 363;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361;
				implicitParameter();
				}
				break;
			case TOpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362;
				implicitParameterList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitParameterContext[] implicitParameter() {
			return GetRuleContexts<ImplicitParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitParameterContext implicitParameter(int i) {
			return GetRuleContext<ImplicitParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public ImplicitParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitParameterListContext implicitParameterList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseImplicitParameterList() : _DoParseImplicitParameterList();
	}

	internal ImplicitParameterListContext _DoParseImplicitParameterList() {
		ImplicitParameterListContext _localctx = new ImplicitParameterListContext(Context, State);
		EnterRule(_localctx, 32, RULE_implicitParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			Match(TOpenParen);
			State = 366;
			implicitParameter();
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 367;
				Match(TComma);
				State = 368;
				implicitParameter();
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 374;
			Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ImplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitParameterContext implicitParameter() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseImplicitParameter() : _DoParseImplicitParameter();
	}

	internal ImplicitParameterContext _DoParseImplicitParameter() {
		ImplicitParameterContext _localctx = new ImplicitParameterContext(Context, State);
		EnterRule(_localctx, 34, RULE_implicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitLambdaSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitParameterListContext explicitParameterList() {
			return GetRuleContext<ExplicitParameterListContext>(0);
		}
		public ExplicitLambdaSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitLambdaSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitLambdaSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitLambdaSignatureContext explicitLambdaSignature() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseExplicitLambdaSignature() : _DoParseExplicitLambdaSignature();
	}

	internal ExplicitLambdaSignatureContext _DoParseExplicitLambdaSignature() {
		ExplicitLambdaSignatureContext _localctx = new ExplicitLambdaSignatureContext(Context, State);
		EnterRule(_localctx, 36, RULE_explicitLambdaSignature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			explicitParameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CoreParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitParameterContext[] explicitParameter() {
			return GetRuleContexts<ExplicitParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitParameterContext explicitParameter(int i) {
			return GetRuleContext<ExplicitParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CoreParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public ExplicitParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitParameterListContext explicitParameterList() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseExplicitParameterList() : _DoParseExplicitParameterList();
	}

	internal ExplicitParameterListContext _DoParseExplicitParameterList() {
		ExplicitParameterListContext _localctx = new ExplicitParameterListContext(Context, State);
		EnterRule(_localctx, 38, RULE_explicitParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(TOpenParen);
			State = 381;
			explicitParameter();
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 382;
				Match(TComma);
				State = 383;
				explicitParameter();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 389;
			Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitParameterContext explicitParameter() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseExplicitParameter() : _DoParseExplicitParameter();
	}

	internal ExplicitParameterContext _DoParseExplicitParameter() {
		ExplicitParameterContext _localctx = new ExplicitParameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_explicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			typeReference(0);
			State = 392;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLambdaBody() : _DoParseLambdaBody();
	}

	internal LambdaBodyContext _DoParseLambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_lambdaBody);
		try {
			State = 396;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNew:
			case KNull:
			case KTrue:
			case KFalse:
			case KTypeof:
			case KNameof:
			case KSizeof:
			case KDefault:
			case KChecked:
			case KUnchecked:
			case KThis:
			case KBase:
			case KAwait:
			case KDiscard:
			case KThrow:
			case THat:
			case TPlusPlus:
			case TMinusMinus:
			case TPlus:
			case TMinus:
			case TTilde:
			case TExclamation:
			case TOpenParen:
			case IdentifierNormal:
			case IdentifierVerbatim:
			case LInteger:
			case LDecimal:
			case LScientific:
			case LRegularString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394;
				expression(0);
				}
				break;
			case TOpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395;
				blockStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot() { return GetToken(CoreParser.TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestionDot() { return GetToken(CoreParser.TQuestionDot, 0); }
		public DotOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotOperatorContext dotOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDotOperator() : _DoParseDotOperator();
	}

	internal DotOperatorContext _DoParseDotOperator() {
		DotOperatorContext _localctx = new DotOperatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_dotOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			_la = TokenStream.LA(1);
			if ( !(_la==TQuestionDot || _la==TDot) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexerOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(CoreParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestionOpenBracket() { return GetToken(CoreParser.TQuestionOpenBracket, 0); }
		public IndexerOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexerOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexerOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexerOperatorContext indexerOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIndexerOperator() : _DoParseIndexerOperator();
	}

	internal IndexerOperatorContext _DoParseIndexerOperator() {
		IndexerOperatorContext _localctx = new IndexerOperatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_indexerOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			_la = TokenStream.LA(1);
			if ( !(_la==TQuestionOpenBracket || _la==TOpenBracket) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlusPlus() { return GetToken(CoreParser.TPlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinusMinus() { return GetToken(CoreParser.TMinusMinus, 0); }
		public PostfixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixOperatorContext postfixOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParsePostfixOperator() : _DoParsePostfixOperator();
	}

	internal PostfixOperatorContext _DoParsePostfixOperator() {
		PostfixOperatorContext _localctx = new PostfixOperatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_postfixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_la = TokenStream.LA(1);
			if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlus() { return GetToken(CoreParser.TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinus() { return GetToken(CoreParser.TMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TExclamation() { return GetToken(CoreParser.TExclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TTilde() { return GetToken(CoreParser.TTilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlusPlus() { return GetToken(CoreParser.TPlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinusMinus() { return GetToken(CoreParser.TMinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THat() { return GetToken(CoreParser.THat, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseUnaryOperator() : _DoParseUnaryOperator();
	}

	internal UnaryOperatorContext _DoParseUnaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THat) | (1L << TPlusPlus) | (1L << TMinusMinus) | (1L << TPlus) | (1L << TMinus) | (1L << TTilde) | (1L << TExclamation))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAsterisk() { return GetToken(CoreParser.TAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSlash() { return GetToken(CoreParser.TSlash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPercent() { return GetToken(CoreParser.TPercent, 0); }
		public MultiplicativeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeOperatorContext multiplicativeOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMultiplicativeOperator() : _DoParseMultiplicativeOperator();
	}

	internal MultiplicativeOperatorContext _DoParseMultiplicativeOperator() {
		MultiplicativeOperatorContext _localctx = new MultiplicativeOperatorContext(Context, State);
		EnterRule(_localctx, 52, RULE_multiplicativeOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (TSlash - 62)) | (1L << (TAsterisk - 62)) | (1L << (TPercent - 62)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlus() { return GetToken(CoreParser.TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinus() { return GetToken(CoreParser.TMinus, 0); }
		public AdditiveOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveOperatorContext additiveOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAdditiveOperator() : _DoParseAdditiveOperator();
	}

	internal AdditiveOperatorContext _DoParseAdditiveOperator() {
		AdditiveOperatorContext _localctx = new AdditiveOperatorContext(Context, State);
		EnterRule(_localctx, 54, RULE_additiveOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			_la = TokenStream.LA(1);
			if ( !(_la==TPlus || _la==TMinus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeftShiftOperatorContext leftShiftOperator() {
			return GetRuleContext<LeftShiftOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightShiftOperatorContext rightShiftOperator() {
			return GetRuleContext<RightShiftOperatorContext>(0);
		}
		public ShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOperatorContext shiftOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseShiftOperator() : _DoParseShiftOperator();
	}

	internal ShiftOperatorContext _DoParseShiftOperator() {
		ShiftOperatorContext _localctx = new ShiftOperatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_shiftOperator);
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 410;
				leftShiftOperator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 411;
				rightShiftOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftShiftOperatorContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TLessThan() { return GetTokens(CoreParser.TLessThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan(int i) {
			return GetToken(CoreParser.TLessThan, i);
		}
		public LeftShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftShiftOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftShiftOperatorContext leftShiftOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLeftShiftOperator() : _DoParseLeftShiftOperator();
	}

	internal LeftShiftOperatorContext _DoParseLeftShiftOperator() {
		LeftShiftOperatorContext _localctx = new LeftShiftOperatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_leftShiftOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			_localctx.first = Match(TLessThan);
			State = 415;
			_localctx.second = Match(TLessThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftOperatorContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TLessThan() { return GetTokens(CoreParser.TLessThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan(int i) {
			return GetToken(CoreParser.TLessThan, i);
		}
		public RightShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShiftOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftOperatorContext rightShiftOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRightShiftOperator() : _DoParseRightShiftOperator();
	}

	internal RightShiftOperatorContext _DoParseRightShiftOperator() {
		RightShiftOperatorContext _localctx = new RightShiftOperatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_rightShiftOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			_localctx.first = Match(TLessThan);
			State = 418;
			_localctx.second = Match(TLessThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan() { return GetToken(CoreParser.TLessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TGreaterThan() { return GetToken(CoreParser.TGreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThanOrEqual() { return GetToken(CoreParser.TLessThanOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TGreaterThanOrEqual() { return GetToken(CoreParser.TGreaterThanOrEqual, 0); }
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRelationalOperator() : _DoParseRelationalOperator();
	}

	internal RelationalOperatorContext _DoParseRelationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (TLessThanOrEqual - 66)) | (1L << (TGreaterThanOrEqual - 66)) | (1L << (TLessThan - 66)) | (1L << (TGreaterThan - 66)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEqual() { return GetToken(CoreParser.TEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNotEqual() { return GetToken(CoreParser.TNotEqual, 0); }
		public EqualityOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityOperatorContext equalityOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEqualityOperator() : _DoParseEqualityOperator();
	}

	internal EqualityOperatorContext _DoParseEqualityOperator() {
		EqualityOperatorContext _localctx = new EqualityOperatorContext(Context, State);
		EnterRule(_localctx, 64, RULE_equalityOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			_la = TokenStream.LA(1);
			if ( !(_la==TEqual || _la==TNotEqual) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundAssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlusAssign() { return GetToken(CoreParser.TPlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMinusAssign() { return GetToken(CoreParser.TMinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAsteriskAssign() { return GetToken(CoreParser.TAsteriskAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSlashAssign() { return GetToken(CoreParser.TSlashAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPercentAssign() { return GetToken(CoreParser.TPercentAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAmpersandAssign() { return GetToken(CoreParser.TAmpersandAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THatAssign() { return GetToken(CoreParser.THatAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TBarAssign() { return GetToken(CoreParser.TBarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLeftShiftAssign() { return GetToken(CoreParser.TLeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRightShiftAssign() { return GetToken(CoreParser.TRightShiftAssign, 0); }
		public CompoundAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundAssignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundAssignmentOperatorContext compoundAssignmentOperator() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCompoundAssignmentOperator() : _DoParseCompoundAssignmentOperator();
	}

	internal CompoundAssignmentOperatorContext _DoParseCompoundAssignmentOperator() {
		CompoundAssignmentOperatorContext _localctx = new CompoundAssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 66, RULE_compoundAssignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (TAsteriskAssign - 70)) | (1L << (TSlashAssign - 70)) | (1L << (TPercentAssign - 70)) | (1L << (TPlusAssign - 70)) | (1L << (TMinusAssign - 70)) | (1L << (TLeftShiftAssign - 70)) | (1L << (TRightShiftAssign - 70)) | (1L << (TAmpersandAssign - 70)) | (1L << (THatAssign - 70)) | (1L << (TBarAssign - 70)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseReturnType() : _DoParseReturnType();
	}

	internal ReturnTypeContext _DoParseReturnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_returnType);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KObject:
			case KBool:
			case KChar:
			case KSByte:
			case KByte:
			case KShort:
			case KUShort:
			case KInt:
			case KUInt:
			case KLong:
			case KULong:
			case KDecimal:
			case KFloat:
			case KDouble:
			case KString:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426;
				typeReference(0);
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427;
				voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
	 
		public TypeReferenceContext() { }
		public virtual void CopyFrom(TypeReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimitiveTypeRefContext : TypeReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public PrimitiveTypeRefContext(TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericTypeRefContext : TypeReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeArgumentsContext genericTypeArguments() {
			return GetRuleContext<GenericTypeArgumentsContext>(0);
		}
		public GenericTypeRefContext(TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedTypeRefContext : TypeReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public NamedTypeRefContext(TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayTypeRefContext : TypeReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(CoreParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(CoreParser.TCloseBracket, 0); }
		public ArrayTypeRefContext(TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullableTypeRefContext : TypeReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestion() { return GetToken(CoreParser.TQuestion, 0); }
		public NullableTypeRefContext(TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		return typeReference(0);
	}

	private TypeReferenceContext typeReference(int _p) {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseTypeReference(_p) : _DoParseTypeReference(_p);
	}

	internal TypeReferenceContext _DoParseTypeReference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, _parentState);
		TypeReferenceContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_typeReference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				_localctx = new PrimitiveTypeRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 431;
				primitiveType();
				}
				break;
			case 2:
				{
				_localctx = new GenericTypeRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 432;
				namedType();
				State = 433;
				genericTypeArguments();
				}
				break;
			case 3:
				{
				_localctx = new NamedTypeRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 435;
				qualifier();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 445;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 443;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						_localctx = new ArrayTypeRefContext(new TypeReferenceContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_typeReference);
						State = 438;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 439;
						Match(TOpenBracket);
						State = 440;
						Match(TCloseBracket);
						}
						break;
					case 2:
						{
						_localctx = new NullableTypeRefContext(new TypeReferenceContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_typeReference);
						State = 441;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 442;
						Match(TQuestion);
						}
						break;
					}
					} 
				}
				State = 447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NamedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public NamedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedTypeContext namedType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNamedType() : _DoParseNamedType();
	}

	internal NamedTypeContext _DoParseNamedType() {
		NamedTypeContext _localctx = new NamedTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_namedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLessThan() { return GetToken(CoreParser.TLessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeArgumentContext[] genericTypeArgument() {
			return GetRuleContexts<GenericTypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeArgumentContext genericTypeArgument(int i) {
			return GetRuleContext<GenericTypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TGreaterThan() { return GetToken(CoreParser.TGreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TComma() { return GetTokens(CoreParser.TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TComma(int i) {
			return GetToken(CoreParser.TComma, i);
		}
		public GenericTypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeArgumentsContext genericTypeArguments() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseGenericTypeArguments() : _DoParseGenericTypeArguments();
	}

	internal GenericTypeArgumentsContext _DoParseGenericTypeArguments() {
		GenericTypeArgumentsContext _localctx = new GenericTypeArgumentsContext(Context, State);
		EnterRule(_localctx, 74, RULE_genericTypeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(TLessThan);
			State = 451;
			genericTypeArgument();
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 452;
				Match(TComma);
				State = 453;
				genericTypeArgument();
				}
				}
				State = 458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 459;
			Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public GenericTypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeArgumentContext genericTypeArgument() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseGenericTypeArgument() : _DoParseGenericTypeArgument();
	}

	internal GenericTypeArgumentContext _DoParseGenericTypeArgument() {
		GenericTypeArgumentContext _localctx = new GenericTypeArgumentContext(Context, State);
		EnterRule(_localctx, 76, RULE_genericTypeArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			typeReference(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KObject() { return GetToken(CoreParser.KObject, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KBool() { return GetToken(CoreParser.KBool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KChar() { return GetToken(CoreParser.KChar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSByte() { return GetToken(CoreParser.KSByte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KByte() { return GetToken(CoreParser.KByte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KShort() { return GetToken(CoreParser.KShort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUShort() { return GetToken(CoreParser.KUShort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KInt() { return GetToken(CoreParser.KInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUInt() { return GetToken(CoreParser.KUInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KLong() { return GetToken(CoreParser.KLong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KULong() { return GetToken(CoreParser.KULong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDecimal() { return GetToken(CoreParser.KDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFloat() { return GetToken(CoreParser.KFloat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDouble() { return GetToken(CoreParser.KDouble, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KString() { return GetToken(CoreParser.KString, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParsePrimitiveType() : _DoParsePrimitiveType();
	}

	internal PrimitiveTypeContext _DoParsePrimitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KBool) | (1L << KChar) | (1L << KSByte) | (1L << KByte) | (1L << KShort) | (1L << KUShort) | (1L << KInt) | (1L << KUInt) | (1L << KLong) | (1L << KULong) | (1L << KDecimal) | (1L << KFloat) | (1L << KDouble) | (1L << KString))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KVoid() { return GetToken(CoreParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseVoidType() : _DoParseVoidType();
	}

	internal VoidTypeContext _DoParseVoidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseName() : _DoParseName();
	}

	internal NameContext _DoParseName() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 82, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifiedName() : _DoParseQualifiedName();
	}

	internal QualifiedNameContext _DoParseQualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 84, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TDot() { return GetTokens(CoreParser.TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot(int i) {
			return GetToken(CoreParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifier() : _DoParseQualifier();
	}

	internal QualifierContext _DoParseQualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_qualifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			identifier();
			State = 476;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 472;
					Match(TDot);
					State = 473;
					identifier();
					}
					} 
				}
				State = 478;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentifierNormal() { return GetToken(CoreParser.IdentifierNormal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentifierVerbatim() { return GetToken(CoreParser.IdentifierVerbatim, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIdentifier() : _DoParseIdentifier();
	}

	internal IdentifierContext _DoParseIdentifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 88, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			_la = TokenStream.LA(1);
			if ( !(_la==IdentifierNormal || _la==IdentifierVerbatim) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLiteral() : _DoParseLiteral();
	}

	internal LiteralContext _DoParseLiteral() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_literal);
		try {
			State = 487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 481;
				nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 482;
				booleanLiteral();
				}
				break;
			case LInteger:
				EnterOuterAlt(_localctx, 3);
				{
				State = 483;
				integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 484;
				decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 5);
				{
				State = 485;
				scientificLiteral();
				}
				break;
			case LRegularString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 486;
				stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNull() { return GetToken(CoreParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNullLiteral() : _DoParseNullLiteral();
	}

	internal NullLiteralContext _DoParseNullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTrue() { return GetToken(CoreParser.KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFalse() { return GetToken(CoreParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseBooleanLiteral() : _DoParseBooleanLiteral();
	}

	internal BooleanLiteralContext _DoParseBooleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			_la = TokenStream.LA(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LInteger() { return GetToken(CoreParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIntegerLiteral() : _DoParseIntegerLiteral();
	}

	internal IntegerLiteralContext _DoParseIntegerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDecimal() { return GetToken(CoreParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDecimalLiteral() : _DoParseDecimalLiteral();
	}

	internal DecimalLiteralContext _DoParseDecimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LScientific() { return GetToken(CoreParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseScientificLiteral() : _DoParseScientificLiteral();
	}

	internal ScientificLiteralContext _DoParseScientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 100, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRegularString() { return GetToken(CoreParser.LRegularString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoreParserVisitor<TResult> typedVisitor = visitor as ICoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseStringLiteral() : _DoParseStringLiteral();
	}

	internal StringLiteralContext _DoParseStringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			Match(LRegularString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 35: return typeReference_sempred((TypeReferenceContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 19);
		case 1: return Precpred(Context, 18);
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 16);
		case 4: return Precpred(Context, 15);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 3);
		case 14: return Precpred(Context, 2);
		case 15: return Precpred(Context, 33);
		case 16: return Precpred(Context, 32);
		case 17: return Precpred(Context, 31);
		case 18: return Precpred(Context, 24);
		case 19: return Precpred(Context, 23);
		case 20: return Precpred(Context, 14);
		case 21: return Precpred(Context, 13);
		}
		return true;
	}
	private bool typeReference_sempred(TypeReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 2);
		case 23: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'v', '\x1F8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x3', '\x2', '\a', '\x2', 'l', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', 'o', '\v', '\x2', '\x3', '\x2', '\a', '\x2', 
		'r', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'u', '\v', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '}', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '\x87', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x8A', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x9E', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\xBD', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\xC1', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xD3', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x10F', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x119', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x123', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', 
		'\x6', '\x129', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x12C', '\v', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\a', '\b', '\x135', '\n', '\b', '\f', '\b', 
		'\xE', '\b', '\x138', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x13D', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x144', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\x149', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\x14C', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x155', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\x158', '\v', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x15D', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\x160', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x16A', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x16E', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\x174', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x177', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x183', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\x186', '\v', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x18F', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x19F', '\n', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '$', '\x3', '$', '\x5', '$', '\x1AF', '\n', '$', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x1B7', 
		'\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\a', '%', '\x1BE', '\n', '%', '\f', '%', '\xE', '%', '\x1C1', '\v', '%', 
		'\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\a', '\'', '\x1C9', '\n', '\'', '\f', '\'', '\xE', '\'', '\x1CC', 
		'\v', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', ')', 
		'\x3', ')', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', ',', 
		'\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', '\x1DD', '\n', 
		'-', '\f', '-', '\xE', '-', '\x1E0', '\v', '-', '\x3', '.', '\x3', '.', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x5', '/', '\x1EA', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x2', '\x4', '\n', 'H', '\x36', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', '\x2', '\xE', '\x4', '\x2', '\x32', '\x32', 'U', 'U', '\x4', '\x2', 
		'\x33', '\x33', 'Z', 'Z', '\x3', '\x2', ':', ';', '\x4', '\x2', '\x36', 
		'\x36', ':', '?', '\x3', '\x2', '@', '\x42', '\x3', '\x2', '<', '=', '\x4', 
		'\x2', '\x44', '\x45', '^', '_', '\x3', '\x2', '\x46', 'G', '\x3', '\x2', 
		'H', 'Q', '\x4', '\x2', '\x10', '\x10', '\x12', '\x1F', '\x3', '\x2', 
		'\x61', '\x62', '\x3', '\x2', '\r', '\xE', '\x2', '\x20E', '\x2', 'm', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'x', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\b', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\xD2', '\x3', '\x2', '\x2', '\x2', '\f', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x131', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x12', '\x143', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x145', '\x3', '\x2', '\x2', '\x2', '\x16', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x151', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x169', '\x3', '\x2', '\x2', '\x2', ' ', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x16F', '\x3', '\x2', '\x2', '\x2', '$', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x17E', '\x3', '\x2', '\x2', '\x2', '*', '\x189', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x18E', '\x3', '\x2', '\x2', '\x2', '.', '\x190', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x192', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x194', '\x3', '\x2', '\x2', '\x2', '\x34', '\x196', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x198', '\x3', '\x2', '\x2', '\x2', '\x38', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x19E', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x1A0', '\x3', '\x2', '\x2', '\x2', '>', '\x1A3', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x1AE', '\x3', '\x2', '\x2', '\x2', 'H', '\x1B6', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x1C2', '\x3', '\x2', '\x2', '\x2', 'L', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x1D1', '\x3', '\x2', '\x2', '\x2', 'R', '\x1D3', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x1D5', '\x3', '\x2', '\x2', '\x2', 'V', '\x1D7', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x1D9', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\\', '\x1E9', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x1EB', '\x3', '\x2', '\x2', '\x2', '`', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x66', '\x1F3', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x1F5', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x5', 
		'\x4', '\x3', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'n', 's', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'r', '\x5', '\x6', '\x4', '\x2', 'q', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', 
		'\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', 
		'\x2', '\x2', '\x3', 'w', '\x3', '\x3', '\x2', '\x2', '\x2', 'x', '|', 
		'\a', '\x4', '\x2', '\x2', 'y', 'z', '\x5', 'T', '+', '\x2', 'z', '{', 
		'\a', 'W', '\x2', '\x2', '{', '}', '\x3', '\x2', '\x2', '\x2', '|', 'y', 
		'\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', 
		'~', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x5', 'X', '-', '\x2', 
		'\x7F', '\x80', '\a', 'S', '\x2', '\x2', '\x80', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x82', '\x5', '\n', '\x6', '\x2', '\x82', '\x83', 
		'\a', 'S', '\x2', '\x2', '\x83', '\a', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x88', '\a', '\\', '\x2', '\x2', '\x85', '\x87', '\x5', '\x6', '\x4', 
		'\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\a', 
		']', '\x2', '\x2', '\x8C', '\t', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', 
		'\b', '\x6', '\x1', '\x2', '\x8E', '\x8F', '\a', 'X', '\x2', '\x2', '\x8F', 
		'\x90', '\x5', '\n', '\x6', '\x2', '\x90', '\x91', '\a', 'Y', '\x2', '\x2', 
		'\x91', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', 'X', 
		'\x2', '\x2', '\x93', '\x94', '\x5', '\f', '\a', '\x2', '\x94', '\x95', 
		'\a', 'Y', '\x2', '\x2', '\x95', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\xD3', '\a', '/', '\x2', '\x2', '\x97', '\xD3', '\a', '#', '\x2', '\x2', 
		'\x98', '\xD3', '\a', ')', '\x2', '\x2', '\x99', '\xD3', '\a', '*', '\x2', 
		'\x2', '\x9A', '\xD3', '\x5', '\\', '/', '\x2', '\x9B', '\x9D', '\x5', 
		'Z', '.', '\x2', '\x9C', '\x9E', '\x5', 'L', '\'', '\x2', '\x9D', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', ' ', 
		'\x2', '\x2', '\xA0', '\xA1', '\a', 'X', '\x2', '\x2', '\xA1', '\xA2', 
		'\x5', 'H', '%', '\x2', '\xA2', '\xA3', '\a', 'Y', '\x2', '\x2', '\xA3', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', '!', '\x2', 
		'\x2', '\xA5', '\xA6', '\a', 'X', '\x2', '\x2', '\xA6', '\xA7', '\x5', 
		'\n', '\x6', '\x2', '\xA7', '\xA8', '\a', 'Y', '\x2', '\x2', '\xA8', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\"', '\x2', '\x2', 
		'\xAA', '\xAB', '\a', 'X', '\x2', '\x2', '\xAB', '\xAC', '\x5', 'H', '%', 
		'\x2', '\xAC', '\xAD', '\a', 'Y', '\x2', '\x2', '\xAD', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '$', '\x2', '\x2', '\xAF', 
		'\xB0', '\a', 'X', '\x2', '\x2', '\xB0', '\xB1', '\x5', '\n', '\x6', '\x2', 
		'\xB1', '\xB2', '\a', 'Y', '\x2', '\x2', '\xB2', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB4', '\a', '%', '\x2', '\x2', '\xB4', '\xB5', 
		'\a', 'X', '\x2', '\x2', '\xB5', '\xB6', '\x5', '\n', '\x6', '\x2', '\xB6', 
		'\xB7', '\a', 'Y', '\x2', '\x2', '\xB7', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', '\v', '\x2', '\x2', '\xB9', '\xBA', '\x5', 
		'H', '%', '\x2', '\xBA', '\xBC', '\a', 'X', '\x2', '\x2', '\xBB', '\xBD', 
		'\x5', '\xE', '\b', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xC0', '\a', 'Y', '\x2', '\x2', '\xBF', '\xC1', 
		'\x5', '\x12', '\n', '\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC3', '\x5', '\x34', '\x1B', '\x2', '\xC3', '\xC4', 
		'\x5', '\n', '\x6', '\x18', '\xC4', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC6', '\a', 'X', '\x2', '\x2', '\xC6', '\xC7', '\x5', 'H', '%', 
		'\x2', '\xC7', '\xC8', '\a', 'Y', '\x2', '\x2', '\xC8', '\xC9', '\x5', 
		'\n', '\x6', '\x17', '\xC9', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\a', ',', '\x2', '\x2', '\xCB', '\xD3', '\x5', '\n', '\x6', '\x16', 
		'\xCC', '\xCD', '\a', '\x30', '\x2', '\x2', '\xCD', '\xD3', '\x5', '\n', 
		'\x6', '\b', '\xCE', '\xCF', '\x5', '\x1E', '\x10', '\x2', '\xCF', '\xD0', 
		'\a', '\x43', '\x2', '\x2', '\xD0', '\xD1', '\x5', ',', '\x17', '\x2', 
		'\xD1', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x92', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\x98', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xD3', '\x12A', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\f', '\x15', 
		'\x2', '\x2', '\xD5', '\xD6', '\a', 'R', '\x2', '\x2', '\xD6', '\x129', 
		'\x5', '\n', '\x6', '\x16', '\xD7', '\xD8', '\f', '\x14', '\x2', '\x2', 
		'\xD8', '\xD9', '\x5', '\x36', '\x1C', '\x2', '\xD9', '\xDA', '\x5', '\n', 
		'\x6', '\x15', '\xDA', '\x129', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', 
		'\f', '\x13', '\x2', '\x2', '\xDC', '\xDD', '\x5', '\x38', '\x1D', '\x2', 
		'\xDD', '\xDE', '\x5', '\n', '\x6', '\x14', '\xDE', '\x129', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xE0', '\f', '\x12', '\x2', '\x2', '\xE0', '\xE1', 
		'\x5', ':', '\x1E', '\x2', '\xE1', '\xE2', '\x5', '\n', '\x6', '\x13', 
		'\xE2', '\x129', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\f', '\x11', 
		'\x2', '\x2', '\xE4', '\xE5', '\x5', '@', '!', '\x2', '\xE5', '\xE6', 
		'\x5', '\n', '\x6', '\x12', '\xE6', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE8', '\f', '\xE', '\x2', '\x2', '\xE8', '\xE9', '\x5', '\x42', 
		'\"', '\x2', '\xE9', '\xEA', '\x5', '\n', '\x6', '\xF', '\xEA', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\f', '\r', '\x2', '\x2', 
		'\xEC', '\xED', '\a', '\x35', '\x2', '\x2', '\xED', '\x129', '\x5', '\n', 
		'\x6', '\xE', '\xEE', '\xEF', '\f', '\f', '\x2', '\x2', '\xEF', '\xF0', 
		'\a', '\x36', '\x2', '\x2', '\xF0', '\x129', '\x5', '\n', '\x6', '\r', 
		'\xF1', '\xF2', '\f', '\v', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x37', 
		'\x2', '\x2', '\xF3', '\x129', '\x5', '\n', '\x6', '\f', '\xF4', '\xF5', 
		'\f', '\n', '\x2', '\x2', '\xF5', '\xF6', '\a', '\x38', '\x2', '\x2', 
		'\xF6', '\x129', '\x5', '\n', '\x6', '\v', '\xF7', '\xF8', '\f', '\t', 
		'\x2', '\x2', '\xF8', '\xF9', '\a', '\x39', '\x2', '\x2', '\xF9', '\x129', 
		'\x5', '\n', '\x6', '\n', '\xFA', '\xFB', '\f', '\a', '\x2', '\x2', '\xFB', 
		'\xFC', '\a', '\x34', '\x2', '\x2', '\xFC', '\x129', '\x5', '\n', '\x6', 
		'\b', '\xFD', '\xFE', '\f', '\x6', '\x2', '\x2', '\xFE', '\xFF', '\a', 
		'`', '\x2', '\x2', '\xFF', '\x100', '\x5', '\n', '\x6', '\x2', '\x100', 
		'\x101', '\a', 'T', '\x2', '\x2', '\x101', '\x102', '\x5', '\n', '\x6', 
		'\a', '\x102', '\x129', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', 
		'\f', '\x5', '\x2', '\x2', '\x104', '\x105', '\a', 'W', '\x2', '\x2', 
		'\x105', '\x129', '\x5', '\n', '\x6', '\x6', '\x106', '\x107', '\f', '\x4', 
		'\x2', '\x2', '\x107', '\x108', '\x5', '\x44', '#', '\x2', '\x108', '\x109', 
		'\x5', '\n', '\x6', '\x5', '\x109', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10B', '\f', '#', '\x2', '\x2', '\x10B', '\x10C', '\x5', '.', 
		'\x18', '\x2', '\x10C', '\x10E', '\x5', 'Z', '.', '\x2', '\x10D', '\x10F', 
		'\x5', 'L', '\'', '\x2', '\x10E', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\f', '\"', '\x2', '\x2', '\x111', 
		'\x112', '\x5', '\x30', '\x19', '\x2', '\x112', '\x113', '\x5', '\xE', 
		'\b', '\x2', '\x113', '\x114', '\a', '[', '\x2', '\x2', '\x114', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\f', '!', '\x2', '\x2', 
		'\x116', '\x118', '\a', 'X', '\x2', '\x2', '\x117', '\x119', '\x5', '\xE', 
		'\b', '\x2', '\x118', '\x117', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x129', '\a', 'Y', '\x2', '\x2', '\x11B', '\x11C', '\f', '\x1A', 
		'\x2', '\x2', '\x11C', '\x129', '\x5', '\x32', '\x1A', '\x2', '\x11D', 
		'\x11E', '\f', '\x19', '\x2', '\x2', '\x11E', '\x129', '\a', '?', '\x2', 
		'\x2', '\x11F', '\x120', '\f', '\x10', '\x2', '\x2', '\x120', '\x122', 
		'\a', '\'', '\x2', '\x2', '\x121', '\x123', '\a', '(', '\x2', '\x2', '\x122', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x129', 
		'\x5', 'H', '%', '\x2', '\x125', '\x126', '\f', '\xF', '\x2', '\x2', '\x126', 
		'\x127', '\a', '&', '\x2', '\x2', '\x127', '\x129', '\x5', 'H', '%', '\x2', 
		'\x128', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x128', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\x128', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x128', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x128', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\x128', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x128', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x128', '\xFA', '\x3', '\x2', 
		'\x2', '\x2', '\x128', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x128', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x128', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x115', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x128', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x128', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\v', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x5', '\x10', 
		'\t', '\x2', '\x12E', '\x12F', '\a', 'V', '\x2', '\x2', '\x12F', '\x130', 
		'\x5', '\xE', '\b', '\x2', '\x130', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x136', '\x5', '\x10', '\t', '\x2', '\x132', '\x133', '\a', 
		'V', '\x2', '\x2', '\x133', '\x135', '\x5', '\x10', '\t', '\x2', '\x134', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x135', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x134', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x136', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x5', 
		'T', '+', '\x2', '\x13A', '\x13B', '\a', 'T', '\x2', '\x2', '\x13B', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x13F', '\x5', '\n', '\x6', '\x2', '\x13F', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x140', '\x144', '\x5', '\x14', '\v', 
		'\x2', '\x141', '\x144', '\x5', '\x18', '\r', '\x2', '\x142', '\x144', 
		'\x5', '\x1A', '\xE', '\x2', '\x143', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x141', '\x3', '\x2', '\x2', '\x2', '\x143', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x13', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x14A', '\x5', '\x16', '\f', '\x2', '\x146', '\x147', '\a', 'V', '\x2', 
		'\x2', '\x147', '\x149', '\x5', '\x16', '\f', '\x2', '\x148', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x15', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x5', 'Z', '.', 
		'\x2', '\x14E', '\x14F', '\a', 'W', '\x2', '\x2', '\x14F', '\x150', '\x5', 
		'\n', '\x6', '\x2', '\x150', '\x17', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x156', '\x5', '\n', '\x6', '\x2', '\x152', '\x153', '\a', 'V', '\x2', 
		'\x2', '\x153', '\x155', '\x5', '\n', '\x6', '\x2', '\x154', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x154', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x157', '\x19', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x156', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15E', '\x5', '\x1C', 
		'\xF', '\x2', '\x15A', '\x15B', '\a', 'V', '\x2', '\x2', '\x15B', '\x15D', 
		'\x5', '\x1C', '\xF', '\x2', '\x15C', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x160', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x162', '\a', 'Z', '\x2', '\x2', '\x162', '\x163', '\x5', 
		'Z', '.', '\x2', '\x163', '\x164', '\a', '[', '\x2', '\x2', '\x164', '\x165', 
		'\a', 'W', '\x2', '\x2', '\x165', '\x166', '\x5', '\n', '\x6', '\x2', 
		'\x166', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x167', '\x16A', '\x5', 
		' ', '\x11', '\x2', '\x168', '\x16A', '\x5', '&', '\x14', '\x2', '\x169', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16E', 
		'\x5', '$', '\x13', '\x2', '\x16C', '\x16E', '\x5', '\"', '\x12', '\x2', 
		'\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16C', '\x3', 
		'\x2', '\x2', '\x2', '\x16E', '!', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x170', '\a', 'X', '\x2', '\x2', '\x170', '\x175', '\x5', '$', '\x13', 
		'\x2', '\x171', '\x172', '\a', 'V', '\x2', '\x2', '\x172', '\x174', '\x5', 
		'$', '\x13', '\x2', '\x173', '\x171', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x175', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x179', '\a', 'Y', '\x2', '\x2', '\x179', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x17A', '\x17B', '\x5', 'T', '+', '\x2', '\x17B', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\x5', '(', '\x15', '\x2', 
		'\x17D', '\'', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\a', 'X', 
		'\x2', '\x2', '\x17F', '\x184', '\x5', '*', '\x16', '\x2', '\x180', '\x181', 
		'\a', 'V', '\x2', '\x2', '\x181', '\x183', '\x5', '*', '\x16', '\x2', 
		'\x182', '\x180', '\x3', '\x2', '\x2', '\x2', '\x183', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x182', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x185', '\x187', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', 
		'\a', 'Y', '\x2', '\x2', '\x188', ')', '\x3', '\x2', '\x2', '\x2', '\x189', 
		'\x18A', '\x5', 'H', '%', '\x2', '\x18A', '\x18B', '\x5', 'T', '+', '\x2', 
		'\x18B', '+', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18F', '\x5', '\n', 
		'\x6', '\x2', '\x18D', '\x18F', '\x5', '\b', '\x5', '\x2', '\x18E', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '-', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\t', '\x2', 
		'\x2', '\x2', '\x191', '/', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', 
		'\t', '\x3', '\x2', '\x2', '\x193', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x195', '\t', '\x4', '\x2', '\x2', '\x195', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x196', '\x197', '\t', '\x5', '\x2', '\x2', '\x197', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\t', '\x6', '\x2', '\x2', 
		'\x199', '\x37', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\t', '\a', 
		'\x2', '\x2', '\x19B', '\x39', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19F', 
		'\x5', '<', '\x1F', '\x2', '\x19D', '\x19F', '\x5', '>', ' ', '\x2', '\x19E', 
		'\x19C', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', ';', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\a', 
		'^', '\x2', '\x2', '\x1A1', '\x1A2', '\a', '^', '\x2', '\x2', '\x1A2', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\a', '^', '\x2', '\x2', 
		'\x1A4', '\x1A5', '\a', '^', '\x2', '\x2', '\x1A5', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x1A6', '\x1A7', '\t', '\b', '\x2', '\x2', '\x1A7', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\t', '\t', '\x2', '\x2', 
		'\x1A9', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\t', '\n', 
		'\x2', '\x2', '\x1AB', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AF', 
		'\x5', 'H', '%', '\x2', '\x1AD', '\x1AF', '\x5', 'R', '*', '\x2', '\x1AE', 
		'\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1AF', 'G', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\b', 
		'%', '\x1', '\x2', '\x1B1', '\x1B7', '\x5', 'P', ')', '\x2', '\x1B2', 
		'\x1B3', '\x5', 'J', '&', '\x2', '\x1B3', '\x1B4', '\x5', 'L', '\'', '\x2', 
		'\x1B4', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B7', '\x5', 
		'X', '-', '\x2', '\x1B6', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B6', 
		'\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', 
		'\f', '\x4', '\x2', '\x2', '\x1B9', '\x1BA', '\a', 'Z', '\x2', '\x2', 
		'\x1BA', '\x1BE', '\a', '[', '\x2', '\x2', '\x1BB', '\x1BC', '\f', '\x3', 
		'\x2', '\x2', '\x1BC', '\x1BE', '\a', '`', '\x2', '\x2', '\x1BD', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BD', '\x3', 
		'\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C0', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', '\x1C3', '\x5', 'X', '-', '\x2', '\x1C3', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\a', '^', '\x2', '\x2', '\x1C5', 
		'\x1CA', '\x5', 'N', '(', '\x2', '\x1C6', '\x1C7', '\a', 'V', '\x2', '\x2', 
		'\x1C7', '\x1C9', '\x5', 'N', '(', '\x2', '\x1C8', '\x1C6', '\x3', '\x2', 
		'\x2', '\x2', '\x1C9', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CA', '\x3', 
		'\x2', '\x2', '\x2', '\x1CD', '\x1CE', '\a', '_', '\x2', '\x2', '\x1CE', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x5', 'H', '%', '\x2', 
		'\x1D0', 'O', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\t', '\v', 
		'\x2', '\x2', '\x1D2', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', 
		'\a', '\x11', '\x2', '\x2', '\x1D4', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x1D6', '\x5', 'Z', '.', '\x2', '\x1D6', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x1D7', '\x1D8', '\x5', 'X', '-', '\x2', '\x1D8', 'W', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DE', '\x5', 'Z', '.', '\x2', 
		'\x1DA', '\x1DB', '\a', 'U', '\x2', '\x2', '\x1DB', '\x1DD', '\x5', 'Z', 
		'.', '\x2', '\x1DC', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1E0', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1DF', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x1E0', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', 
		'\t', '\f', '\x2', '\x2', '\x1E2', '[', '\x3', '\x2', '\x2', '\x2', '\x1E3', 
		'\x1EA', '\x5', '^', '\x30', '\x2', '\x1E4', '\x1EA', '\x5', '`', '\x31', 
		'\x2', '\x1E5', '\x1EA', '\x5', '\x62', '\x32', '\x2', '\x1E6', '\x1EA', 
		'\x5', '\x64', '\x33', '\x2', '\x1E7', '\x1EA', '\x5', '\x66', '\x34', 
		'\x2', '\x1E8', '\x1EA', '\x5', 'h', '\x35', '\x2', '\x1E9', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E9', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1E9', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E9', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x1EB', '\x1EC', '\a', '\f', '\x2', '\x2', '\x1EC', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\t', '\r', '\x2', '\x2', '\x1EE', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\a', '\x63', '\x2', 
		'\x2', '\x1F0', '\x63', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', 
		'\a', '\x64', '\x2', '\x2', '\x1F2', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x1F3', '\x1F4', '\a', '\x65', '\x2', '\x2', '\x1F4', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x1F5', '\x1F6', '\a', 'j', '\x2', '\x2', '\x1F6', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\"', 'm', 's', '|', '\x88', '\x9D', '\xBC', 
		'\xC0', '\xD2', '\x10E', '\x118', '\x122', '\x128', '\x12A', '\x136', 
		'\x13C', '\x143', '\x14A', '\x156', '\x15E', '\x169', '\x16D', '\x175', 
		'\x184', '\x18E', '\x19E', '\x1AE', '\x1B6', '\x1BD', '\x1BF', '\x1CA', 
		'\x1DE', '\x1E9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.Core.Syntax.InternalSyntax
