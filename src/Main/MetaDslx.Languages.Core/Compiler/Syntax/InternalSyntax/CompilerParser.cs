//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Compiler\Syntax\InternalSyntax\CompilerParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Compiler.Syntax.InternalSyntax {

using MetaDslx.Languages.Compiler.Model;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class CompilerParser : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.Antlr4Parser {
    private CompilerSyntaxParser SyntaxParser => (CompilerSyntaxParser)this.IncrementalAntlr4Parser;
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KNamespace=1, KUsing=2, KGrammar=3, KOptions=4, KFragment=5, KHidden=6, 
		KDefines=7, KReturns=8, KTrue=9, KFalse=10, KNull=11, KEof=12, TSemicolon=13, 
		TDotDot=14, TDot=15, TNonGreedyZeroOrOne=16, TNonGreedyZeroOrMore=17, 
		TNonGreedyOneOrMore=18, TZeroOrOne=19, TZeroOrMore=20, TOneOrMore=21, 
		TNegate=22, TAssign=23, TQuestionAssign=24, TNegatedAssign=25, TPlusAssign=26, 
		TBar=27, TAmpersand=28, TColon=29, TComma=30, TOpenParen=31, TCloseParen=32, 
		TOpenBracket=33, TCloseBracket=34, TOpenBrace=35, TCloseBrace=36, TLessThan=37, 
		TGreaterThan=38, LexerIdentifier=39, ParserIdentifier=40, IgnoredIdentifier=41, 
		LInteger=42, LDecimal=43, LScientific=44, LString=45, LCharacter=46, LUtf8Bom=47, 
		LWhiteSpace=48, LCrLf=49, LLineEnd=50, LSingleLineComment=51, LMultilineComment=52;
	public const int
		RULE_main = 0, RULE_annotation = 1, RULE_namespaceDeclaration = 2, RULE_namespaceBody = 3, 
		RULE_grammarDeclaration = 4, RULE_usingDeclaration = 5, RULE_ruleDeclarations = 6, 
		RULE_ruleDeclaration = 7, RULE_parserRuleDeclaration = 8, RULE_parserRuleAlt = 9, 
		RULE_parserRuleAltRef = 10, RULE_parserRuleSimple = 11, RULE_eofElement = 12, 
		RULE_parserRuleNamedElement = 13, RULE_assign = 14, RULE_multiplicity = 15, 
		RULE_parserNegatedElement = 16, RULE_parserRuleElement = 17, RULE_parserRuleFixedElement = 18, 
		RULE_parserRuleWildcardElement = 19, RULE_parserRuleReference = 20, RULE_parserRuleBlockElement = 21, 
		RULE_lexerRuleDeclaration = 22, RULE_lexerRuleAlternative = 23, RULE_lexerRuleAlternativeElement = 24, 
		RULE_lexerRuleElement = 25, RULE_lexerRuleReferenceElement = 26, RULE_lexerRuleWildcardElement = 27, 
		RULE_lexerRuleFixedStringElement = 28, RULE_lexerRuleFixedCharElement = 29, 
		RULE_lexerRuleBlockElement = 30, RULE_lexerRuleRangeElement = 31, RULE_name = 32, 
		RULE_qualifiedName = 33, RULE_qualifier = 34, RULE_identifier = 35, RULE_lexerRuleIdentifier = 36, 
		RULE_parserRuleIdentifier = 37, RULE_lexerRuleName = 38, RULE_parserRuleName = 39, 
		RULE_elementName = 40, RULE_literal = 41, RULE_nullLiteral = 42, RULE_booleanLiteral = 43, 
		RULE_integerLiteral = 44, RULE_decimalLiteral = 45, RULE_scientificLiteral = 46, 
		RULE_stringLiteral = 47, RULE_charLiteral = 48;
	public static readonly string[] ruleNames = {
		"main", "annotation", "namespaceDeclaration", "namespaceBody", "grammarDeclaration", 
		"usingDeclaration", "ruleDeclarations", "ruleDeclaration", "parserRuleDeclaration", 
		"parserRuleAlt", "parserRuleAltRef", "parserRuleSimple", "eofElement", 
		"parserRuleNamedElement", "assign", "multiplicity", "parserNegatedElement", 
		"parserRuleElement", "parserRuleFixedElement", "parserRuleWildcardElement", 
		"parserRuleReference", "parserRuleBlockElement", "lexerRuleDeclaration", 
		"lexerRuleAlternative", "lexerRuleAlternativeElement", "lexerRuleElement", 
		"lexerRuleReferenceElement", "lexerRuleWildcardElement", "lexerRuleFixedStringElement", 
		"lexerRuleFixedCharElement", "lexerRuleBlockElement", "lexerRuleRangeElement", 
		"name", "qualifiedName", "qualifier", "identifier", "lexerRuleIdentifier", 
		"parserRuleIdentifier", "lexerRuleName", "parserRuleName", "elementName", 
		"literal", "nullLiteral", "booleanLiteral", "integerLiteral", "decimalLiteral", 
		"scientificLiteral", "stringLiteral", "charLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'using'", "'grammar'", "'options'", "'fragment'", 
		"'hidden'", "'defines'", "'returns'", "'true'", "'false'", "'null'", "'EOF'", 
		"';'", "'..'", "'.'", "'??'", "'*?'", "'+?'", "'?'", "'*'", "'+'", "'~'", 
		"'='", "'?='", "'!='", "'+='", "'|'", "'&'", "':'", "','", "'('", "')'", 
		"'['", "']'", "'{'", "'}'", "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KUsing", "KGrammar", "KOptions", "KFragment", "KHidden", 
		"KDefines", "KReturns", "KTrue", "KFalse", "KNull", "KEof", "TSemicolon", 
		"TDotDot", "TDot", "TNonGreedyZeroOrOne", "TNonGreedyZeroOrMore", "TNonGreedyOneOrMore", 
		"TZeroOrOne", "TZeroOrMore", "TOneOrMore", "TNegate", "TAssign", "TQuestionAssign", 
		"TNegatedAssign", "TPlusAssign", "TBar", "TAmpersand", "TColon", "TComma", 
		"TOpenParen", "TCloseParen", "TOpenBracket", "TCloseBracket", "TOpenBrace", 
		"TCloseBrace", "TLessThan", "TGreaterThan", "LexerIdentifier", "ParserIdentifier", 
		"IgnoredIdentifier", "LInteger", "LDecimal", "LScientific", "LString", 
		"LCharacter", "LUtf8Bom", "LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", 
		"LMultilineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CompilerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CompilerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CompilerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CompilerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CompilerParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMain() : _DoParseMain();
	}

	internal MainContext _DoParseMain() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			namespaceDeclaration();
			State = 99;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenBracket() { return GetToken(CompilerParser.TOpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseBracket() { return GetToken(CompilerParser.TCloseBracket, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAnnotation() : _DoParseAnnotation();
	}

	internal AnnotationContext _DoParseAnnotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 2, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(TOpenBracket);
			State = 102;
			name();
			State = 103;
			Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNamespace() { return GetToken(CompilerParser.KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CompilerParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNamespaceDeclaration() : _DoParseNamespaceDeclaration();
	}

	internal NamespaceDeclarationContext _DoParseNamespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(KNamespace);
			State = 106;
			qualifiedName();
			State = 107;
			Match(TSemicolon);
			State = 108;
			namespaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GrammarDeclarationContext grammarDeclaration() {
			return GetRuleContext<GrammarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext[] usingDeclaration() {
			return GetRuleContexts<UsingDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext usingDeclaration(int i) {
			return GetRuleContext<UsingDeclarationContext>(i);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNamespaceBody() : _DoParseNamespaceBody();
	}

	internal NamespaceBodyContext _DoParseNamespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KUsing) {
				{
				{
				State = 110;
				usingDeclaration();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 116;
			grammarDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KGrammar() { return GetToken(CompilerParser.KGrammar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CompilerParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleDeclarationsContext ruleDeclarations() {
			return GetRuleContext<RuleDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public GrammarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarDeclarationContext grammarDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseGrammarDeclaration() : _DoParseGrammarDeclaration();
	}

	internal GrammarDeclarationContext _DoParseGrammarDeclaration() {
		GrammarDeclarationContext _localctx = new GrammarDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_grammarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 118;
				annotation();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 124;
			Match(KGrammar);
			State = 125;
			name();
			State = 126;
			Match(TSemicolon);
			State = 127;
			ruleDeclarations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KUsing() { return GetToken(CompilerParser.KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CompilerParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CompilerParser.TAssign, 0); }
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseUsingDeclaration() : _DoParseUsingDeclaration();
	}

	internal UsingDeclarationContext _DoParseUsingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_usingDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(KUsing);
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 130;
				name();
				State = 131;
				Match(TAssign);
				}
				break;
			}
			State = 135;
			qualifier();
			State = 136;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleDeclarationContext[] ruleDeclaration() {
			return GetRuleContexts<RuleDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleDeclarationContext ruleDeclaration(int i) {
			return GetRuleContext<RuleDeclarationContext>(i);
		}
		public RuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleDeclarationsContext ruleDeclarations() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRuleDeclarations() : _DoParseRuleDeclarations();
	}

	internal RuleDeclarationsContext _DoParseRuleDeclarations() {
		RuleDeclarationsContext _localctx = new RuleDeclarationsContext(Context, State);
		EnterRule(_localctx, 12, RULE_ruleDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KFragment) | (1L << KHidden) | (1L << TOpenBracket) | (1L << LexerIdentifier) | (1L << ParserIdentifier))) != 0)) {
				{
				{
				State = 138;
				ruleDeclaration();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleDeclarationContext parserRuleDeclaration() {
			return GetRuleContext<ParserRuleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleDeclarationContext lexerRuleDeclaration() {
			return GetRuleContext<LexerRuleDeclarationContext>(0);
		}
		public RuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleDeclarationContext ruleDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRuleDeclaration() : _DoParseRuleDeclaration();
	}

	internal RuleDeclarationContext _DoParseRuleDeclaration() {
		RuleDeclarationContext _localctx = new RuleDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_ruleDeclaration);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				parserRuleDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				lexerRuleDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleAltContext parserRuleAlt() {
			return GetRuleContext<ParserRuleAltContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleSimpleContext parserRuleSimple() {
			return GetRuleContext<ParserRuleSimpleContext>(0);
		}
		public ParserRuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleDeclarationContext parserRuleDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleDeclaration() : _DoParseParserRuleDeclaration();
	}

	internal ParserRuleDeclarationContext _DoParseParserRuleDeclaration() {
		ParserRuleDeclarationContext _localctx = new ParserRuleDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_parserRuleDeclaration);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				parserRuleAlt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				parserRuleSimple();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleAltContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleNameContext parserRuleName() {
			return GetRuleContext<ParserRuleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CompilerParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleAltRefContext[] parserRuleAltRef() {
			return GetRuleContexts<ParserRuleAltRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleAltRefContext parserRuleAltRef(int i) {
			return GetRuleContext<ParserRuleAltRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CompilerParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDefines() { return GetToken(CompilerParser.KDefines, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TBar() { return GetTokens(CompilerParser.TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TBar(int i) {
			return GetToken(CompilerParser.TBar, i);
		}
		public ParserRuleAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleAlt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleAltContext parserRuleAlt() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleAlt() : _DoParseParserRuleAlt();
	}

	internal ParserRuleAltContext _DoParseParserRuleAlt() {
		ParserRuleAltContext _localctx = new ParserRuleAltContext(Context, State);
		EnterRule(_localctx, 18, RULE_parserRuleAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 152;
				annotation();
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 158;
			parserRuleName();
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KDefines) {
				{
				State = 159;
				Match(KDefines);
				State = 160;
				qualifier();
				}
			}

			State = 163;
			Match(TColon);
			State = 164;
			parserRuleAltRef();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar) {
				{
				{
				State = 165;
				Match(TBar);
				State = 166;
				parserRuleAltRef();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 172;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleAltRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleIdentifierContext parserRuleIdentifier() {
			return GetRuleContext<ParserRuleIdentifierContext>(0);
		}
		public ParserRuleAltRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleAltRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleAltRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleAltRefContext parserRuleAltRef() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleAltRef() : _DoParseParserRuleAltRef();
	}

	internal ParserRuleAltRefContext _DoParseParserRuleAltRef() {
		ParserRuleAltRefContext _localctx = new ParserRuleAltRefContext(Context, State);
		EnterRule(_localctx, 20, RULE_parserRuleAltRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			parserRuleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleSimpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleNameContext parserRuleName() {
			return GetRuleContext<ParserRuleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CompilerParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CompilerParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KDefines() { return GetToken(CompilerParser.KDefines, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleNamedElementContext[] parserRuleNamedElement() {
			return GetRuleContexts<ParserRuleNamedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleNamedElementContext parserRuleNamedElement(int i) {
			return GetRuleContext<ParserRuleNamedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EofElementContext eofElement() {
			return GetRuleContext<EofElementContext>(0);
		}
		public ParserRuleSimpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSimple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleSimpleContext parserRuleSimple() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleSimple() : _DoParseParserRuleSimple();
	}

	internal ParserRuleSimpleContext _DoParseParserRuleSimple() {
		ParserRuleSimpleContext _localctx = new ParserRuleSimpleContext(Context, State);
		EnterRule(_localctx, 22, RULE_parserRuleSimple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 176;
				annotation();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 182;
			parserRuleName();
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KDefines) {
				{
				State = 183;
				Match(KDefines);
				State = 184;
				qualifier();
				}
			}

			State = 187;
			Match(TColon);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 188;
				parserRuleNamedElement();
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TDot) | (1L << TNegate) | (1L << TOpenParen) | (1L << TOpenBracket) | (1L << LexerIdentifier) | (1L << ParserIdentifier) | (1L << IgnoredIdentifier) | (1L << LString))) != 0) );
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEof) {
				{
				State = 193;
				eofElement();
				}
			}

			State = 196;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EofElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEof() { return GetToken(CompilerParser.KEof, 0); }
		public EofElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eofElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEofElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EofElementContext eofElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEofElement() : _DoParseEofElement();
	}

	internal EofElementContext _DoParseEofElement() {
		EofElementContext _localctx = new EofElementContext(Context, State);
		EnterRule(_localctx, 24, RULE_eofElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(KEof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleNamedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserNegatedElementContext parserNegatedElement() {
			return GetRuleContext<ParserNegatedElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementNameContext elementName() {
			return GetRuleContext<ElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityContext multiplicity() {
			return GetRuleContext<MultiplicityContext>(0);
		}
		public ParserRuleNamedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleNamedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleNamedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleNamedElementContext parserRuleNamedElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleNamedElement() : _DoParseParserRuleNamedElement();
	}

	internal ParserRuleNamedElementContext _DoParseParserRuleNamedElement() {
		ParserRuleNamedElementContext _localctx = new ParserRuleNamedElementContext(Context, State);
		EnterRule(_localctx, 26, RULE_parserRuleNamedElement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 200;
					annotation();
					}
					} 
				}
				State = 205;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 206;
				elementName();
				State = 207;
				assign();
				}
				break;
			}
			State = 211;
			parserNegatedElement();
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TNonGreedyZeroOrOne) | (1L << TNonGreedyZeroOrMore) | (1L << TNonGreedyOneOrMore) | (1L << TZeroOrOne) | (1L << TZeroOrMore) | (1L << TOneOrMore))) != 0)) {
				{
				State = 212;
				multiplicity();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CompilerParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestionAssign() { return GetToken(CompilerParser.TQuestionAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNegatedAssign() { return GetToken(CompilerParser.TNegatedAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlusAssign() { return GetToken(CompilerParser.TPlusAssign, 0); }
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAssign() : _DoParseAssign();
	}

	internal AssignContext _DoParseAssign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 28, RULE_assign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAssign) | (1L << TQuestionAssign) | (1L << TNegatedAssign) | (1L << TPlusAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNonGreedyZeroOrOne() { return GetToken(CompilerParser.TNonGreedyZeroOrOne, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNonGreedyZeroOrMore() { return GetToken(CompilerParser.TNonGreedyZeroOrMore, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNonGreedyOneOrMore() { return GetToken(CompilerParser.TNonGreedyOneOrMore, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TZeroOrOne() { return GetToken(CompilerParser.TZeroOrOne, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TZeroOrMore() { return GetToken(CompilerParser.TZeroOrMore, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOneOrMore() { return GetToken(CompilerParser.TOneOrMore, 0); }
		public MultiplicityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicityContext multiplicity() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMultiplicity() : _DoParseMultiplicity();
	}

	internal MultiplicityContext _DoParseMultiplicity() {
		MultiplicityContext _localctx = new MultiplicityContext(Context, State);
		EnterRule(_localctx, 30, RULE_multiplicity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TNonGreedyZeroOrOne) | (1L << TNonGreedyZeroOrMore) | (1L << TNonGreedyOneOrMore) | (1L << TZeroOrOne) | (1L << TZeroOrMore) | (1L << TOneOrMore))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserNegatedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleElementContext parserRuleElement() {
			return GetRuleContext<ParserRuleElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNegate() { return GetToken(CompilerParser.TNegate, 0); }
		public ParserNegatedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserNegatedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserNegatedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserNegatedElementContext parserNegatedElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserNegatedElement() : _DoParseParserNegatedElement();
	}

	internal ParserNegatedElementContext _DoParseParserNegatedElement() {
		ParserNegatedElementContext _localctx = new ParserNegatedElementContext(Context, State);
		EnterRule(_localctx, 32, RULE_parserNegatedElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TNegate) {
				{
				State = 219;
				Match(TNegate);
				}
			}

			State = 222;
			parserRuleElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleFixedElementContext parserRuleFixedElement() {
			return GetRuleContext<ParserRuleFixedElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleReferenceContext parserRuleReference() {
			return GetRuleContext<ParserRuleReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleWildcardElementContext parserRuleWildcardElement() {
			return GetRuleContext<ParserRuleWildcardElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleBlockElementContext parserRuleBlockElement() {
			return GetRuleContext<ParserRuleBlockElementContext>(0);
		}
		public ParserRuleElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleElementContext parserRuleElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleElement() : _DoParseParserRuleElement();
	}

	internal ParserRuleElementContext _DoParseParserRuleElement() {
		ParserRuleElementContext _localctx = new ParserRuleElementContext(Context, State);
		EnterRule(_localctx, 34, RULE_parserRuleElement);
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				parserRuleFixedElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				parserRuleReference();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 226;
				parserRuleWildcardElement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 227;
				parserRuleBlockElement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleFixedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ParserRuleFixedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleFixedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleFixedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleFixedElementContext parserRuleFixedElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleFixedElement() : _DoParseParserRuleFixedElement();
	}

	internal ParserRuleFixedElementContext _DoParseParserRuleFixedElement() {
		ParserRuleFixedElementContext _localctx = new ParserRuleFixedElementContext(Context, State);
		EnterRule(_localctx, 36, RULE_parserRuleFixedElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 230;
				annotation();
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 236;
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleWildcardElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot() { return GetToken(CompilerParser.TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ParserRuleWildcardElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleWildcardElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleWildcardElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleWildcardElementContext parserRuleWildcardElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleWildcardElement() : _DoParseParserRuleWildcardElement();
	}

	internal ParserRuleWildcardElementContext _DoParseParserRuleWildcardElement() {
		ParserRuleWildcardElementContext _localctx = new ParserRuleWildcardElementContext(Context, State);
		EnterRule(_localctx, 38, RULE_parserRuleWildcardElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 238;
				annotation();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 244;
			Match(TDot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ParserRuleReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleReferenceContext parserRuleReference() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleReference() : _DoParseParserRuleReference();
	}

	internal ParserRuleReferenceContext _DoParseParserRuleReference() {
		ParserRuleReferenceContext _localctx = new ParserRuleReferenceContext(Context, State);
		EnterRule(_localctx, 40, RULE_parserRuleReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 246;
				annotation();
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 252;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleBlockElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CompilerParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CompilerParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleNamedElementContext[] parserRuleNamedElement() {
			return GetRuleContexts<ParserRuleNamedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleNamedElementContext parserRuleNamedElement(int i) {
			return GetRuleContext<ParserRuleNamedElementContext>(i);
		}
		public ParserRuleBlockElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleBlockElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleBlockElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleBlockElementContext parserRuleBlockElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleBlockElement() : _DoParseParserRuleBlockElement();
	}

	internal ParserRuleBlockElementContext _DoParseParserRuleBlockElement() {
		ParserRuleBlockElementContext _localctx = new ParserRuleBlockElementContext(Context, State);
		EnterRule(_localctx, 42, RULE_parserRuleBlockElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 254;
				annotation();
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 260;
			Match(TOpenParen);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 261;
				parserRuleNamedElement();
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TDot) | (1L << TNegate) | (1L << TOpenParen) | (1L << TOpenBracket) | (1L << LexerIdentifier) | (1L << ParserIdentifier) | (1L << IgnoredIdentifier) | (1L << LString))) != 0) );
			State = 266;
			Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleDeclarationContext : ParserRuleContext {
		public IToken modifier;
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleNameContext lexerRuleName() {
			return GetRuleContext<LexerRuleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CompilerParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeContext[] lexerRuleAlternative() {
			return GetRuleContexts<LexerRuleAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeContext lexerRuleAlternative(int i) {
			return GetRuleContext<LexerRuleAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CompilerParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KReturns() { return GetToken(CompilerParser.KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TBar() { return GetTokens(CompilerParser.TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TBar(int i) {
			return GetToken(CompilerParser.TBar, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KHidden() { return GetToken(CompilerParser.KHidden, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFragment() { return GetToken(CompilerParser.KFragment, 0); }
		public LexerRuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleDeclarationContext lexerRuleDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleDeclaration() : _DoParseLexerRuleDeclaration();
	}

	internal LexerRuleDeclarationContext _DoParseLexerRuleDeclaration() {
		LexerRuleDeclarationContext _localctx = new LexerRuleDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_lexerRuleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 268;
				annotation();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KFragment || _la==KHidden) {
				{
				State = 274;
				_localctx.modifier = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==KFragment || _la==KHidden) ) {
					_localctx.modifier = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 277;
			lexerRuleName();
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KReturns) {
				{
				State = 278;
				Match(KReturns);
				State = 279;
				qualifier();
				}
			}

			State = 282;
			Match(TColon);
			State = 283;
			lexerRuleAlternative();
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar) {
				{
				{
				State = 284;
				Match(TBar);
				State = 285;
				lexerRuleAlternative();
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 291;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeElementContext[] lexerRuleAlternativeElement() {
			return GetRuleContexts<LexerRuleAlternativeElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeElementContext lexerRuleAlternativeElement(int i) {
			return GetRuleContext<LexerRuleAlternativeElementContext>(i);
		}
		public LexerRuleAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleAlternativeContext lexerRuleAlternative() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleAlternative() : _DoParseLexerRuleAlternative();
	}

	internal LexerRuleAlternativeContext _DoParseLexerRuleAlternative() {
		LexerRuleAlternativeContext _localctx = new LexerRuleAlternativeContext(Context, State);
		EnterRule(_localctx, 46, RULE_lexerRuleAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 293;
				lexerRuleAlternativeElement();
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TDot) | (1L << TNegate) | (1L << TOpenParen) | (1L << LexerIdentifier) | (1L << LString) | (1L << LCharacter))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleAlternativeElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleElementContext lexerRuleElement() {
			return GetRuleContext<LexerRuleElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNegate() { return GetToken(CompilerParser.TNegate, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityContext multiplicity() {
			return GetRuleContext<MultiplicityContext>(0);
		}
		public LexerRuleAlternativeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleAlternativeElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleAlternativeElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleAlternativeElementContext lexerRuleAlternativeElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleAlternativeElement() : _DoParseLexerRuleAlternativeElement();
	}

	internal LexerRuleAlternativeElementContext _DoParseLexerRuleAlternativeElement() {
		LexerRuleAlternativeElementContext _localctx = new LexerRuleAlternativeElementContext(Context, State);
		EnterRule(_localctx, 48, RULE_lexerRuleAlternativeElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TNegate) {
				{
				State = 298;
				Match(TNegate);
				}
			}

			State = 301;
			lexerRuleElement();
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TNonGreedyZeroOrOne) | (1L << TNonGreedyZeroOrMore) | (1L << TNonGreedyOneOrMore) | (1L << TZeroOrOne) | (1L << TZeroOrMore) | (1L << TOneOrMore))) != 0)) {
				{
				State = 302;
				multiplicity();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleReferenceElementContext lexerRuleReferenceElement() {
			return GetRuleContext<LexerRuleReferenceElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleFixedStringElementContext lexerRuleFixedStringElement() {
			return GetRuleContext<LexerRuleFixedStringElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleFixedCharElementContext lexerRuleFixedCharElement() {
			return GetRuleContext<LexerRuleFixedCharElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleWildcardElementContext lexerRuleWildcardElement() {
			return GetRuleContext<LexerRuleWildcardElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleBlockElementContext lexerRuleBlockElement() {
			return GetRuleContext<LexerRuleBlockElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleRangeElementContext lexerRuleRangeElement() {
			return GetRuleContext<LexerRuleRangeElementContext>(0);
		}
		public LexerRuleElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleElementContext lexerRuleElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleElement() : _DoParseLexerRuleElement();
	}

	internal LexerRuleElementContext _DoParseLexerRuleElement() {
		LexerRuleElementContext _localctx = new LexerRuleElementContext(Context, State);
		EnterRule(_localctx, 50, RULE_lexerRuleElement);
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				lexerRuleReferenceElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306;
				lexerRuleFixedStringElement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 307;
				lexerRuleFixedCharElement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 308;
				lexerRuleWildcardElement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 309;
				lexerRuleBlockElement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 310;
				lexerRuleRangeElement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleReferenceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleIdentifierContext lexerRuleIdentifier() {
			return GetRuleContext<LexerRuleIdentifierContext>(0);
		}
		public LexerRuleReferenceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleReferenceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleReferenceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleReferenceElementContext lexerRuleReferenceElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleReferenceElement() : _DoParseLexerRuleReferenceElement();
	}

	internal LexerRuleReferenceElementContext _DoParseLexerRuleReferenceElement() {
		LexerRuleReferenceElementContext _localctx = new LexerRuleReferenceElementContext(Context, State);
		EnterRule(_localctx, 52, RULE_lexerRuleReferenceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			lexerRuleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleWildcardElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot() { return GetToken(CompilerParser.TDot, 0); }
		public LexerRuleWildcardElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleWildcardElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleWildcardElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleWildcardElementContext lexerRuleWildcardElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleWildcardElement() : _DoParseLexerRuleWildcardElement();
	}

	internal LexerRuleWildcardElementContext _DoParseLexerRuleWildcardElement() {
		LexerRuleWildcardElementContext _localctx = new LexerRuleWildcardElementContext(Context, State);
		EnterRule(_localctx, 54, RULE_lexerRuleWildcardElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(TDot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleFixedStringElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LString() { return GetToken(CompilerParser.LString, 0); }
		public LexerRuleFixedStringElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleFixedStringElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleFixedStringElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleFixedStringElementContext lexerRuleFixedStringElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleFixedStringElement() : _DoParseLexerRuleFixedStringElement();
	}

	internal LexerRuleFixedStringElementContext _DoParseLexerRuleFixedStringElement() {
		LexerRuleFixedStringElementContext _localctx = new LexerRuleFixedStringElementContext(Context, State);
		EnterRule(_localctx, 56, RULE_lexerRuleFixedStringElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(LString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleFixedCharElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCharacter() { return GetToken(CompilerParser.LCharacter, 0); }
		public LexerRuleFixedCharElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleFixedCharElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleFixedCharElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleFixedCharElementContext lexerRuleFixedCharElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleFixedCharElement() : _DoParseLexerRuleFixedCharElement();
	}

	internal LexerRuleFixedCharElementContext _DoParseLexerRuleFixedCharElement() {
		LexerRuleFixedCharElementContext _localctx = new LexerRuleFixedCharElementContext(Context, State);
		EnterRule(_localctx, 58, RULE_lexerRuleFixedCharElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(LCharacter);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CompilerParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeContext[] lexerRuleAlternative() {
			return GetRuleContexts<LexerRuleAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeContext lexerRuleAlternative(int i) {
			return GetRuleContext<LexerRuleAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CompilerParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TBar() { return GetTokens(CompilerParser.TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TBar(int i) {
			return GetToken(CompilerParser.TBar, i);
		}
		public LexerRuleBlockElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlockElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleBlockElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockElementContext lexerRuleBlockElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleBlockElement() : _DoParseLexerRuleBlockElement();
	}

	internal LexerRuleBlockElementContext _DoParseLexerRuleBlockElement() {
		LexerRuleBlockElementContext _localctx = new LexerRuleBlockElementContext(Context, State);
		EnterRule(_localctx, 60, RULE_lexerRuleBlockElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(TOpenParen);
			State = 322;
			lexerRuleAlternative();
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar) {
				{
				{
				State = 323;
				Match(TBar);
				State = 324;
				lexerRuleAlternative();
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 330;
			Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleRangeElementContext : ParserRuleContext {
		public LexerRuleFixedCharElementContext start;
		public LexerRuleFixedCharElementContext end;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDotDot() { return GetToken(CompilerParser.TDotDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleFixedCharElementContext[] lexerRuleFixedCharElement() {
			return GetRuleContexts<LexerRuleFixedCharElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleFixedCharElementContext lexerRuleFixedCharElement(int i) {
			return GetRuleContext<LexerRuleFixedCharElementContext>(i);
		}
		public LexerRuleRangeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleRangeElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleRangeElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleRangeElementContext lexerRuleRangeElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleRangeElement() : _DoParseLexerRuleRangeElement();
	}

	internal LexerRuleRangeElementContext _DoParseLexerRuleRangeElement() {
		LexerRuleRangeElementContext _localctx = new LexerRuleRangeElementContext(Context, State);
		EnterRule(_localctx, 62, RULE_lexerRuleRangeElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			_localctx.start = lexerRuleFixedCharElement();
			State = 333;
			Match(TDotDot);
			State = 334;
			_localctx.end = lexerRuleFixedCharElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseName() : _DoParseName();
	}

	internal NameContext _DoParseName() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 64, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifiedName() : _DoParseQualifiedName();
	}

	internal QualifiedNameContext _DoParseQualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 66, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TDot() { return GetTokens(CompilerParser.TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot(int i) {
			return GetToken(CompilerParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseQualifier() : _DoParseQualifier();
	}

	internal QualifierContext _DoParseQualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			identifier();
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TDot) {
				{
				{
				State = 341;
				Match(TDot);
				State = 342;
				identifier();
				}
				}
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LexerIdentifier() { return GetToken(CompilerParser.LexerIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParserIdentifier() { return GetToken(CompilerParser.ParserIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIdentifier() : _DoParseIdentifier();
	}

	internal IdentifierContext _DoParseIdentifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_la = TokenStream.LA(1);
			if ( !(_la==LexerIdentifier || _la==ParserIdentifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LexerIdentifier() { return GetToken(CompilerParser.LexerIdentifier, 0); }
		public LexerRuleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleIdentifierContext lexerRuleIdentifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleIdentifier() : _DoParseLexerRuleIdentifier();
	}

	internal LexerRuleIdentifierContext _DoParseLexerRuleIdentifier() {
		LexerRuleIdentifierContext _localctx = new LexerRuleIdentifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_lexerRuleIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(LexerIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParserIdentifier() { return GetToken(CompilerParser.ParserIdentifier, 0); }
		public ParserRuleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleIdentifierContext parserRuleIdentifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleIdentifier() : _DoParseParserRuleIdentifier();
	}

	internal ParserRuleIdentifierContext _DoParseParserRuleIdentifier() {
		ParserRuleIdentifierContext _localctx = new ParserRuleIdentifierContext(Context, State);
		EnterRule(_localctx, 74, RULE_parserRuleIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(ParserIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LexerIdentifier() { return GetToken(CompilerParser.LexerIdentifier, 0); }
		public LexerRuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleNameContext lexerRuleName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleName() : _DoParseLexerRuleName();
	}

	internal LexerRuleNameContext _DoParseLexerRuleName() {
		LexerRuleNameContext _localctx = new LexerRuleNameContext(Context, State);
		EnterRule(_localctx, 76, RULE_lexerRuleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(LexerIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParserIdentifier() { return GetToken(CompilerParser.ParserIdentifier, 0); }
		public ParserRuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleNameContext parserRuleName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleName() : _DoParseParserRuleName();
	}

	internal ParserRuleNameContext _DoParseParserRuleName() {
		ParserRuleNameContext _localctx = new ParserRuleNameContext(Context, State);
		EnterRule(_localctx, 78, RULE_parserRuleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			Match(ParserIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParserIdentifier() { return GetToken(CompilerParser.ParserIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IgnoredIdentifier() { return GetToken(CompilerParser.IgnoredIdentifier, 0); }
		public ElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementNameContext elementName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseElementName() : _DoParseElementName();
	}

	internal ElementNameContext _DoParseElementName() {
		ElementNameContext _localctx = new ElementNameContext(Context, State);
		EnterRule(_localctx, 80, RULE_elementName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !(_la==ParserIdentifier || _la==IgnoredIdentifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLiteral() : _DoParseLiteral();
	}

	internal LiteralContext _DoParseLiteral() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 82, RULE_literal);
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 360;
				nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 361;
				booleanLiteral();
				}
				break;
			case LInteger:
				EnterOuterAlt(_localctx, 3);
				{
				State = 362;
				integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 363;
				decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 5);
				{
				State = 364;
				scientificLiteral();
				}
				break;
			case LString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 365;
				stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNull() { return GetToken(CompilerParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNullLiteral() : _DoParseNullLiteral();
	}

	internal NullLiteralContext _DoParseNullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 84, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTrue() { return GetToken(CompilerParser.KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFalse() { return GetToken(CompilerParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseBooleanLiteral() : _DoParseBooleanLiteral();
	}

	internal BooleanLiteralContext _DoParseBooleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 86, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_la = TokenStream.LA(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LInteger() { return GetToken(CompilerParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIntegerLiteral() : _DoParseIntegerLiteral();
	}

	internal IntegerLiteralContext _DoParseIntegerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 88, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDecimal() { return GetToken(CompilerParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDecimalLiteral() : _DoParseDecimalLiteral();
	}

	internal DecimalLiteralContext _DoParseDecimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LScientific() { return GetToken(CompilerParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseScientificLiteral() : _DoParseScientificLiteral();
	}

	internal ScientificLiteralContext _DoParseScientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LString() { return GetToken(CompilerParser.LString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseStringLiteral() : _DoParseStringLiteral();
	}

	internal StringLiteralContext _DoParseStringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(LString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCharacter() { return GetToken(CompilerParser.LCharacter, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseCharLiteral() : _DoParseCharLiteral();
	}

	internal CharLiteralContext _DoParseCharLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_charLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(LCharacter);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x36', '\x181', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\a', '\x5', 'r', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', 'u', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\a', '\x6', 'z', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '}', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x88', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\a', '\b', '\x8E', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\x91', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x95', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x99', '\n', '\n', 
		'\x3', '\v', '\a', '\v', '\x9C', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\x9F', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\xA4', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\xAA', '\n', '\v', '\f', '\v', '\xE', '\v', '\xAD', '\v', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\a', '\r', '\xB4', '\n', '\r', '\f', '\r', '\xE', '\r', '\xB7', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xBC', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x6', '\r', '\xC0', '\n', '\r', '\r', 
		'\r', '\xE', '\r', '\xC1', '\x3', '\r', '\x5', '\r', '\xC5', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\a', 
		'\xF', '\xCC', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xCF', '\v', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xD4', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xD8', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x5', '\x12', '\xDF', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xE7', 
		'\n', '\x13', '\x3', '\x14', '\a', '\x14', '\xEA', '\n', '\x14', '\f', 
		'\x14', '\xE', '\x14', '\xED', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\a', '\x15', '\xF2', '\n', '\x15', '\f', '\x15', '\xE', 
		'\x15', '\xF5', '\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\a', '\x16', '\xFA', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xFD', 
		'\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\a', '\x17', 
		'\x102', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x105', '\v', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x6', '\x17', '\x109', '\n', '\x17', '\r', 
		'\x17', '\xE', '\x17', '\x10A', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\a', '\x18', '\x110', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x113', 
		'\v', '\x18', '\x3', '\x18', '\x5', '\x18', '\x116', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x11B', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', 
		'\x121', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x124', '\v', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x6', '\x19', '\x129', '\n', 
		'\x19', '\r', '\x19', '\xE', '\x19', '\x12A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x12E', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x132', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x13A', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\a', ' ', '\x148', '\n', ' ', '\f', ' ', '\xE', ' ', '\x14B', 
		'\v', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\a', '$', '\x15A', '\n', '$', '\f', '$', '\xE', 
		'$', '\x15D', '\v', '$', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', 
		'\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x5', '+', '\x171', '\n', '+', '\x3', ',', '\x3', 
		',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x2', '\x2', '\x33', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x2', '\b', '\x3', '\x2', '\x19', '\x1C', '\x3', '\x2', '\x12', '\x17', 
		'\x3', '\x2', '\a', '\b', '\x3', '\x2', ')', '*', '\x3', '\x2', '*', '+', 
		'\x3', '\x2', '\v', '\f', '\x2', '\x17B', '\x2', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'g', '\x3', '\x2', '\x2', '\x2', '\x6', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\b', 's', '\x3', '\x2', '\x2', '\x2', '\n', '{', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x10', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x98', '\x3', '\x2', '\x2', '\x2', '\x14', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xDB', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '$', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xEB', '\x3', '\x2', '\x2', '\x2', '(', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xFB', '\x3', '\x2', '\x2', '\x2', ',', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x111', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x32', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x139', '\x3', '\x2', '\x2', '\x2', '\x36', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x13D', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '<', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x143', '\x3', '\x2', '\x2', '\x2', '@', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x152', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x46', '\x156', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x15E', '\x3', '\x2', '\x2', '\x2', 'J', '\x160', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\x162', '\x3', '\x2', '\x2', '\x2', 'N', '\x164', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x168', '\x3', '\x2', '\x2', '\x2', 'T', '\x170', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x172', '\x3', '\x2', '\x2', '\x2', 'X', '\x174', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x178', '\x3', '\x2', '\x2', '\x2', '^', '\x17A', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x62', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x5', '\x6', '\x4', '\x2', 
		'\x65', '\x66', '\a', '\x2', '\x2', '\x3', '\x66', '\x3', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\a', '#', '\x2', '\x2', 'h', 'i', '\x5', '\x42', 
		'\"', '\x2', 'i', 'j', '\a', '$', '\x2', '\x2', 'j', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\a', '\x3', '\x2', '\x2', 'l', 'm', '\x5', '\x44', 
		'#', '\x2', 'm', 'n', '\a', '\xF', '\x2', '\x2', 'n', 'o', '\x5', '\b', 
		'\x5', '\x2', 'o', '\a', '\x3', '\x2', '\x2', '\x2', 'p', 'r', '\x5', 
		'\f', '\a', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x3', 
		'\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', 
		'\x2', '\x2', '\x2', 't', 'v', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x5', '\n', '\x6', '\x2', 'w', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'z', '\x5', '\x4', '\x3', '\x2', 'y', 'x', '\x3', 
		'\x2', '\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '~', '\x3', 
		'\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\a', '\x5', '\x2', '\x2', '\x7F', '\x80', '\x5', '\x42', '\"', '\x2', 
		'\x80', '\x81', '\a', '\xF', '\x2', '\x2', '\x81', '\x82', '\x5', '\xE', 
		'\b', '\x2', '\x82', '\v', '\x3', '\x2', '\x2', '\x2', '\x83', '\x87', 
		'\a', '\x4', '\x2', '\x2', '\x84', '\x85', '\x5', '\x42', '\"', '\x2', 
		'\x85', '\x86', '\a', '\x19', '\x2', '\x2', '\x86', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x84', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x8A', '\x5', '\x46', '$', '\x2', '\x8A', '\x8B', '\a', '\xF', 
		'\x2', '\x2', '\x8B', '\r', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', 
		'\x5', '\x10', '\t', '\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x91', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x95', '\x5', '\x12', '\n', '\x2', '\x93', '\x95', '\x5', '.', 
		'\x18', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x99', '\x5', '\x14', '\v', '\x2', '\x97', '\x99', '\x5', '\x18', 
		'\r', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x9C', '\x5', '\x4', '\x3', '\x2', '\x9B', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xA3', '\x5', 'P', ')', '\x2', '\xA1', '\xA2', 
		'\a', '\t', '\x2', '\x2', '\xA2', '\xA4', '\x5', '\x46', '$', '\x2', '\xA3', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', 
		'\x1F', '\x2', '\x2', '\xA6', '\xAB', '\x5', '\x16', '\f', '\x2', '\xA7', 
		'\xA8', '\a', '\x1D', '\x2', '\x2', '\xA8', '\xAA', '\x5', '\x16', '\f', 
		'\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', 
		'\xF', '\x2', '\x2', '\xAF', '\x15', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB1', '\x5', 'L', '\'', '\x2', '\xB1', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB4', '\x5', '\x4', '\x3', '\x2', '\xB3', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xBB', '\x5', 'P', ')', '\x2', '\xB9', '\xBA', 
		'\a', '\t', '\x2', '\x2', '\xBA', '\xBC', '\x5', '\x46', '$', '\x2', '\xBB', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBF', '\a', 
		'\x1F', '\x2', '\x2', '\xBE', '\xC0', '\x5', '\x1C', '\xF', '\x2', '\xBF', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC5', '\x5', '\x1A', '\xE', '\x2', '\xC4', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', '\xF', '\x2', '\x2', '\xC7', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\a', '\xE', '\x2', 
		'\x2', '\xC9', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', '\x5', 
		'\x4', '\x3', '\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD1', '\x5', 'R', '*', '\x2', '\xD1', '\xD2', '\x5', '\x1E', '\x10', 
		'\x2', '\xD2', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD7', '\x5', '\"', '\x12', 
		'\x2', '\xD6', '\xD8', '\x5', ' ', '\x11', '\x2', '\xD7', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\t', '\x2', '\x2', 
		'\x2', '\xDA', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\t', 
		'\x3', '\x2', '\x2', '\xDC', '!', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDF', '\a', '\x18', '\x2', '\x2', '\xDE', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE1', '\x5', '$', '\x13', '\x2', '\xE1', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE7', '\x5', '&', '\x14', '\x2', 
		'\xE3', '\xE7', '\x5', '*', '\x16', '\x2', '\xE4', '\xE7', '\x5', '(', 
		'\x15', '\x2', '\xE5', '\xE7', '\x5', ',', '\x17', '\x2', '\xE6', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '%', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEA', 
		'\x5', '\x4', '\x3', '\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xEF', '\x5', '`', '\x31', '\x2', '\xEF', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF2', '\x5', '\x4', '\x3', '\x2', '\xF1', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x11', '\x2', '\x2', 
		'\xF7', ')', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFA', '\x5', '\x4', 
		'\x3', '\x2', '\xF9', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFE', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', 
		'\x5', 'H', '%', '\x2', '\xFF', '+', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x102', '\x5', '\x4', '\x3', '\x2', '\x101', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x105', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x106', '\x3', '\x2', '\x2', '\x2', '\x105', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x108', '\a', '!', '\x2', '\x2', '\x107', 
		'\x109', '\x5', '\x1C', '\xF', '\x2', '\x108', '\x107', '\x3', '\x2', 
		'\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\a', 
		'\"', '\x2', '\x2', '\x10D', '-', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x110', '\x5', '\x4', '\x3', '\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x113', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x115', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x116', '\t', '\x4', '\x2', '\x2', '\x115', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', '\x11A', 
		'\x5', 'N', '(', '\x2', '\x118', '\x119', '\a', '\n', '\x2', '\x2', '\x119', 
		'\x11B', '\x5', '\x46', '$', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\a', '\x1F', '\x2', '\x2', 
		'\x11D', '\x122', '\x5', '\x30', '\x19', '\x2', '\x11E', '\x11F', '\a', 
		'\x1D', '\x2', '\x2', '\x11F', '\x121', '\x5', '\x30', '\x19', '\x2', 
		'\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x121', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x120', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x123', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x124', '\x122', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', 
		'\a', '\xF', '\x2', '\x2', '\x126', '/', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x129', '\x5', '\x32', '\x1A', '\x2', '\x128', '\x127', '\x3', '\x2', 
		'\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x31', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12E', '\a', '\x18', 
		'\x2', '\x2', '\x12D', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x131', '\x5', '\x34', '\x1B', '\x2', '\x130', '\x132', '\x5', 
		' ', '\x11', '\x2', '\x131', '\x130', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x132', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x13A', '\x5', '\x36', '\x1C', '\x2', '\x134', '\x13A', 
		'\x5', ':', '\x1E', '\x2', '\x135', '\x13A', '\x5', '<', '\x1F', '\x2', 
		'\x136', '\x13A', '\x5', '\x38', '\x1D', '\x2', '\x137', '\x13A', '\x5', 
		'>', ' ', '\x2', '\x138', '\x13A', '\x5', '@', '!', '\x2', '\x139', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x135', '\x3', '\x2', '\x2', '\x2', '\x139', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13C', '\x5', 'J', '&', '\x2', '\x13C', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x13E', '\a', '\x11', '\x2', '\x2', '\x13E', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\a', '/', '\x2', 
		'\x2', '\x140', ';', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\a', 
		'\x30', '\x2', '\x2', '\x142', '=', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x144', '\a', '!', '\x2', '\x2', '\x144', '\x149', '\x5', '\x30', '\x19', 
		'\x2', '\x145', '\x146', '\a', '\x1D', '\x2', '\x2', '\x146', '\x148', 
		'\x5', '\x30', '\x19', '\x2', '\x147', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x149', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x14D', '\a', '\"', '\x2', '\x2', '\x14D', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x14E', '\x14F', '\x5', '<', '\x1F', '\x2', '\x14F', 
		'\x150', '\a', '\x10', '\x2', '\x2', '\x150', '\x151', '\x5', '<', '\x1F', 
		'\x2', '\x151', '\x41', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\x5', 'H', '%', '\x2', '\x153', '\x43', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x155', '\x5', '\x46', '$', '\x2', '\x155', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x15B', '\x5', 'H', '%', '\x2', '\x157', '\x158', '\a', 
		'\x11', '\x2', '\x2', '\x158', '\x15A', '\x5', 'H', '%', '\x2', '\x159', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\t', 
		'\x5', '\x2', '\x2', '\x15F', 'I', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x161', '\a', ')', '\x2', '\x2', '\x161', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x163', '\a', '*', '\x2', '\x2', '\x163', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x164', '\x165', '\a', ')', '\x2', '\x2', '\x165', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\a', '*', '\x2', '\x2', 
		'\x167', 'Q', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\t', '\x6', 
		'\x2', '\x2', '\x169', 'S', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x171', 
		'\x5', 'V', ',', '\x2', '\x16B', '\x171', '\x5', 'X', '-', '\x2', '\x16C', 
		'\x171', '\x5', 'Z', '.', '\x2', '\x16D', '\x171', '\x5', '\\', '/', '\x2', 
		'\x16E', '\x171', '\x5', '^', '\x30', '\x2', '\x16F', '\x171', '\x5', 
		'`', '\x31', '\x2', '\x170', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16C', '\x3', '\x2', '\x2', 
		'\x2', '\x170', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x171', 'U', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\a', '\r', 
		'\x2', '\x2', '\x173', 'W', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', 
		'\t', '\a', '\x2', '\x2', '\x175', 'Y', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x177', '\a', ',', '\x2', '\x2', '\x177', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x179', '\a', '-', '\x2', '\x2', '\x179', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x17A', '\x17B', '\a', '.', '\x2', '\x2', '\x17B', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\a', '/', '\x2', '\x2', 
		'\x17D', '\x61', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\a', '\x30', 
		'\x2', '\x2', '\x17F', '\x63', '\x3', '\x2', '\x2', '\x2', '$', 's', '{', 
		'\x87', '\x8F', '\x94', '\x98', '\x9D', '\xA3', '\xAB', '\xB5', '\xBB', 
		'\xC1', '\xC4', '\xCD', '\xD3', '\xD7', '\xDE', '\xE6', '\xEB', '\xF3', 
		'\xFB', '\x103', '\x10A', '\x111', '\x115', '\x11A', '\x122', '\x12A', 
		'\x12D', '\x131', '\x139', '\x149', '\x15B', '\x170',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.Compiler.Syntax.InternalSyntax
