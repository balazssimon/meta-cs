//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Compiler\Syntax\InternalSyntax\CompilerParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Compiler.Syntax.InternalSyntax {

//using MetaDslx.Languages.Core.Model;
using MetaDslx.Languages.Compiler.Model;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class CompilerParser : global::MetaDslx.Languages.Antlr4Roslyn.Syntax.InternalSyntax.Antlr4Parser {
    private CompilerSyntaxParser SyntaxParser => (CompilerSyntaxParser)this.IncrementalAntlr4Parser;
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KNamespace=1, KGrammar=2, KOptions=3, KFragment=4, KHidden=5, KTrue=6, 
		KFalse=7, KNull=8, KEof=9, TSemicolon=10, TArrow=11, TDot=12, TNonGreedyZeroOrOne=13, 
		TNonGreedyZeroOrMore=14, TNonGreedyOneOrMore=15, TZeroOrOne=16, TZeroOrMore=17, 
		TOneOrMore=18, TNegate=19, TAssign=20, TQuestionAssign=21, TNegatedAssign=22, 
		TPlusAssign=23, TBar=24, TAmpersand=25, TColon=26, TComma=27, TOpenParen=28, 
		TCloseParen=29, TOpenBracket=30, TCloseBracket=31, TOpenBrace=32, TCloseBrace=33, 
		TLessThan=34, TGreaterThan=35, LexerIdentifier=36, ParserIdentifier=37, 
		LInteger=38, LDecimal=39, LScientific=40, LString=41, LUtf8Bom=42, LWhiteSpace=43, 
		LCrLf=44, LLineEnd=45, LSingleLineComment=46, LMultilineComment=47;
	public const int
		RULE_main = 0, RULE_grammarDeclaration = 1, RULE_ruleDeclarations = 2, 
		RULE_ruleDeclaration = 3, RULE_parserRuleDeclaration = 4, RULE_parserRuleAlternative = 5, 
		RULE_eofElement = 6, RULE_parserRuleAlternativeElement = 7, RULE_parserMultiElement = 8, 
		RULE_assign = 9, RULE_multiplicity = 10, RULE_parserNegatedElement = 11, 
		RULE_parserRuleElement = 12, RULE_fixedElement = 13, RULE_parserRuleReference = 14, 
		RULE_parserRuleBlock = 15, RULE_lexerRuleDeclaration = 16, RULE_lexerRuleAlternative = 17, 
		RULE_lexerRuleAlternativeElement = 18, RULE_lexerMultiElement = 19, RULE_lexerNegatedElement = 20, 
		RULE_lexerRangeElement = 21, RULE_lexerRuleElement = 22, RULE_wildcardElement = 23, 
		RULE_lexerRuleReference = 24, RULE_lexerRuleBlock = 25, RULE_name = 26, 
		RULE_identifier = 27, RULE_lexerRuleName = 28, RULE_parserRuleName = 29, 
		RULE_elementName = 30, RULE_literal = 31, RULE_nullLiteral = 32, RULE_booleanLiteral = 33, 
		RULE_integerLiteral = 34, RULE_decimalLiteral = 35, RULE_scientificLiteral = 36, 
		RULE_stringLiteral = 37;
	public static readonly string[] ruleNames = {
		"main", "grammarDeclaration", "ruleDeclarations", "ruleDeclaration", "parserRuleDeclaration", 
		"parserRuleAlternative", "eofElement", "parserRuleAlternativeElement", 
		"parserMultiElement", "assign", "multiplicity", "parserNegatedElement", 
		"parserRuleElement", "fixedElement", "parserRuleReference", "parserRuleBlock", 
		"lexerRuleDeclaration", "lexerRuleAlternative", "lexerRuleAlternativeElement", 
		"lexerMultiElement", "lexerNegatedElement", "lexerRangeElement", "lexerRuleElement", 
		"wildcardElement", "lexerRuleReference", "lexerRuleBlock", "name", "identifier", 
		"lexerRuleName", "parserRuleName", "elementName", "literal", "nullLiteral", 
		"booleanLiteral", "integerLiteral", "decimalLiteral", "scientificLiteral", 
		"stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'grammar'", "'options'", "'fragment'", "'hidden'", 
		"'true'", "'false'", "'null'", "'EOF'", "';'", "'->'", "'.'", "'??'", 
		"'*?'", "'+?'", "'?'", "'*'", "'+'", "'~'", "'='", "'?='", "'!='", "'+='", 
		"'|'", "'&'", "':'", "','", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KGrammar", "KOptions", "KFragment", "KHidden", "KTrue", 
		"KFalse", "KNull", "KEof", "TSemicolon", "TArrow", "TDot", "TNonGreedyZeroOrOne", 
		"TNonGreedyZeroOrMore", "TNonGreedyOneOrMore", "TZeroOrOne", "TZeroOrMore", 
		"TOneOrMore", "TNegate", "TAssign", "TQuestionAssign", "TNegatedAssign", 
		"TPlusAssign", "TBar", "TAmpersand", "TColon", "TComma", "TOpenParen", 
		"TCloseParen", "TOpenBracket", "TCloseBracket", "TOpenBrace", "TCloseBrace", 
		"TLessThan", "TGreaterThan", "LexerIdentifier", "ParserIdentifier", "LInteger", 
		"LDecimal", "LScientific", "LString", "LUtf8Bom", "LWhiteSpace", "LCrLf", 
		"LLineEnd", "LSingleLineComment", "LMultilineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CompilerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CompilerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CompilerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CompilerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GrammarDeclarationContext grammarDeclaration() {
			return GetRuleContext<GrammarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CompilerParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMain() : _DoParseMain();
	}

	internal MainContext _DoParseMain() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			grammarDeclaration();
			State = 77;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KGrammar() { return GetToken(CompilerParser.KGrammar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CompilerParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleDeclarationsContext ruleDeclarations() {
			return GetRuleContext<RuleDeclarationsContext>(0);
		}
		public GrammarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarDeclarationContext grammarDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseGrammarDeclaration() : _DoParseGrammarDeclaration();
	}

	internal GrammarDeclarationContext _DoParseGrammarDeclaration() {
		GrammarDeclarationContext _localctx = new GrammarDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(KGrammar);
			State = 80;
			name();
			State = 81;
			Match(TSemicolon);
			State = 82;
			ruleDeclarations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleDeclarationContext[] ruleDeclaration() {
			return GetRuleContexts<RuleDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleDeclarationContext ruleDeclaration(int i) {
			return GetRuleContext<RuleDeclarationContext>(i);
		}
		public RuleDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleDeclarationsContext ruleDeclarations() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRuleDeclarations() : _DoParseRuleDeclarations();
	}

	internal RuleDeclarationsContext _DoParseRuleDeclarations() {
		RuleDeclarationsContext _localctx = new RuleDeclarationsContext(Context, State);
		EnterRule(_localctx, 4, RULE_ruleDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LexerIdentifier || _la==ParserIdentifier) {
				{
				{
				State = 84;
				ruleDeclaration();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleDeclarationContext parserRuleDeclaration() {
			return GetRuleContext<ParserRuleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleDeclarationContext lexerRuleDeclaration() {
			return GetRuleContext<LexerRuleDeclarationContext>(0);
		}
		public RuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleDeclarationContext ruleDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseRuleDeclaration() : _DoParseRuleDeclaration();
	}

	internal RuleDeclarationContext _DoParseRuleDeclaration() {
		RuleDeclarationContext _localctx = new RuleDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_ruleDeclaration);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ParserIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				parserRuleDeclaration();
				}
				break;
			case LexerIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				lexerRuleDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleNameContext parserRuleName() {
			return GetRuleContext<ParserRuleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CompilerParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleAlternativeContext[] parserRuleAlternative() {
			return GetRuleContexts<ParserRuleAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleAlternativeContext parserRuleAlternative(int i) {
			return GetRuleContext<ParserRuleAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CompilerParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TBar() { return GetTokens(CompilerParser.TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TBar(int i) {
			return GetToken(CompilerParser.TBar, i);
		}
		public ParserRuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleDeclarationContext parserRuleDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleDeclaration() : _DoParseParserRuleDeclaration();
	}

	internal ParserRuleDeclarationContext _DoParseParserRuleDeclaration() {
		ParserRuleDeclarationContext _localctx = new ParserRuleDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_parserRuleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			parserRuleName();
			State = 95;
			Match(TColon);
			State = 96;
			parserRuleAlternative();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar) {
				{
				{
				State = 97;
				Match(TBar);
				State = 98;
				parserRuleAlternative();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleAlternativeElementContext[] parserRuleAlternativeElement() {
			return GetRuleContexts<ParserRuleAlternativeElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleAlternativeElementContext parserRuleAlternativeElement(int i) {
			return GetRuleContext<ParserRuleAlternativeElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EofElementContext eofElement() {
			return GetRuleContext<EofElementContext>(0);
		}
		public ParserRuleAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleAlternativeContext parserRuleAlternative() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleAlternative() : _DoParseParserRuleAlternative();
	}

	internal ParserRuleAlternativeContext _DoParseParserRuleAlternative() {
		ParserRuleAlternativeContext _localctx = new ParserRuleAlternativeContext(Context, State);
		EnterRule(_localctx, 10, RULE_parserRuleAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 106;
				parserRuleAlternativeElement();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TNegate) | (1L << TOpenParen) | (1L << LexerIdentifier) | (1L << ParserIdentifier) | (1L << LString))) != 0) );
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEof) {
				{
				State = 111;
				eofElement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EofElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEof() { return GetToken(CompilerParser.KEof, 0); }
		public EofElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eofElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEofElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EofElementContext eofElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseEofElement() : _DoParseEofElement();
	}

	internal EofElementContext _DoParseEofElement() {
		EofElementContext _localctx = new EofElementContext(Context, State);
		EnterRule(_localctx, 12, RULE_eofElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(KEof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleAlternativeElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserMultiElementContext parserMultiElement() {
			return GetRuleContext<ParserMultiElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserNegatedElementContext parserNegatedElement() {
			return GetRuleContext<ParserNegatedElementContext>(0);
		}
		public ParserRuleAlternativeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleAlternativeElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleAlternativeElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleAlternativeElementContext parserRuleAlternativeElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleAlternativeElement() : _DoParseParserRuleAlternativeElement();
	}

	internal ParserRuleAlternativeElementContext _DoParseParserRuleAlternativeElement() {
		ParserRuleAlternativeElementContext _localctx = new ParserRuleAlternativeElementContext(Context, State);
		EnterRule(_localctx, 14, RULE_parserRuleAlternativeElement);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOpenParen:
			case LexerIdentifier:
			case ParserIdentifier:
			case LString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				parserMultiElement();
				}
				break;
			case TNegate:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				parserNegatedElement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserMultiElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleElementContext parserRuleElement() {
			return GetRuleContext<ParserRuleElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementNameContext elementName() {
			return GetRuleContext<ElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityContext multiplicity() {
			return GetRuleContext<MultiplicityContext>(0);
		}
		public ParserMultiElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserMultiElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserMultiElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserMultiElementContext parserMultiElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserMultiElement() : _DoParseParserMultiElement();
	}

	internal ParserMultiElementContext _DoParseParserMultiElement() {
		ParserMultiElementContext _localctx = new ParserMultiElementContext(Context, State);
		EnterRule(_localctx, 16, RULE_parserMultiElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 120;
				elementName();
				State = 121;
				assign();
				}
				break;
			}
			State = 125;
			parserRuleElement();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TNonGreedyZeroOrOne) | (1L << TNonGreedyZeroOrMore) | (1L << TNonGreedyOneOrMore) | (1L << TZeroOrOne) | (1L << TZeroOrMore) | (1L << TOneOrMore))) != 0)) {
				{
				State = 126;
				multiplicity();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAssign() { return GetToken(CompilerParser.TAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TQuestionAssign() { return GetToken(CompilerParser.TQuestionAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNegatedAssign() { return GetToken(CompilerParser.TNegatedAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TPlusAssign() { return GetToken(CompilerParser.TPlusAssign, 0); }
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseAssign() : _DoParseAssign();
	}

	internal AssignContext _DoParseAssign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 18, RULE_assign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAssign) | (1L << TQuestionAssign) | (1L << TNegatedAssign) | (1L << TPlusAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNonGreedyZeroOrOne() { return GetToken(CompilerParser.TNonGreedyZeroOrOne, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNonGreedyZeroOrMore() { return GetToken(CompilerParser.TNonGreedyZeroOrMore, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNonGreedyOneOrMore() { return GetToken(CompilerParser.TNonGreedyOneOrMore, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TZeroOrOne() { return GetToken(CompilerParser.TZeroOrOne, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TZeroOrMore() { return GetToken(CompilerParser.TZeroOrMore, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOneOrMore() { return GetToken(CompilerParser.TOneOrMore, 0); }
		public MultiplicityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicityContext multiplicity() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseMultiplicity() : _DoParseMultiplicity();
	}

	internal MultiplicityContext _DoParseMultiplicity() {
		MultiplicityContext _localctx = new MultiplicityContext(Context, State);
		EnterRule(_localctx, 20, RULE_multiplicity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TNonGreedyZeroOrOne) | (1L << TNonGreedyZeroOrMore) | (1L << TNonGreedyOneOrMore) | (1L << TZeroOrOne) | (1L << TZeroOrMore) | (1L << TOneOrMore))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserNegatedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNegate() { return GetToken(CompilerParser.TNegate, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleElementContext parserRuleElement() {
			return GetRuleContext<ParserRuleElementContext>(0);
		}
		public ParserNegatedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserNegatedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserNegatedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserNegatedElementContext parserNegatedElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserNegatedElement() : _DoParseParserNegatedElement();
	}

	internal ParserNegatedElementContext _DoParseParserNegatedElement() {
		ParserNegatedElementContext _localctx = new ParserNegatedElementContext(Context, State);
		EnterRule(_localctx, 22, RULE_parserNegatedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(TNegate);
			State = 134;
			parserRuleElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedElementContext fixedElement() {
			return GetRuleContext<FixedElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleReferenceContext parserRuleReference() {
			return GetRuleContext<ParserRuleReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleBlockContext parserRuleBlock() {
			return GetRuleContext<ParserRuleBlockContext>(0);
		}
		public ParserRuleElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleElementContext parserRuleElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleElement() : _DoParseParserRuleElement();
	}

	internal ParserRuleElementContext _DoParseParserRuleElement() {
		ParserRuleElementContext _localctx = new ParserRuleElementContext(Context, State);
		EnterRule(_localctx, 24, RULE_parserRuleElement);
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				fixedElement();
				}
				break;
			case LexerIdentifier:
			case ParserIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				parserRuleReference();
				}
				break;
			case TOpenParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 138;
				parserRuleBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public FixedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedElementContext fixedElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseFixedElement() : _DoParseFixedElement();
	}

	internal FixedElementContext _DoParseFixedElement() {
		FixedElementContext _localctx = new FixedElementContext(Context, State);
		EnterRule(_localctx, 26, RULE_fixedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParserRuleReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleReferenceContext parserRuleReference() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleReference() : _DoParseParserRuleReference();
	}

	internal ParserRuleReferenceContext _DoParseParserRuleReference() {
		ParserRuleReferenceContext _localctx = new ParserRuleReferenceContext(Context, State);
		EnterRule(_localctx, 28, RULE_parserRuleReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CompilerParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleAlternativeContext[] parserRuleAlternative() {
			return GetRuleContexts<ParserRuleAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleAlternativeContext parserRuleAlternative(int i) {
			return GetRuleContext<ParserRuleAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CompilerParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TBar() { return GetTokens(CompilerParser.TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TBar(int i) {
			return GetToken(CompilerParser.TBar, i);
		}
		public ParserRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleBlockContext parserRuleBlock() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleBlock() : _DoParseParserRuleBlock();
	}

	internal ParserRuleBlockContext _DoParseParserRuleBlock() {
		ParserRuleBlockContext _localctx = new ParserRuleBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_parserRuleBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(TOpenParen);
			State = 146;
			parserRuleAlternative();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar) {
				{
				{
				State = 147;
				Match(TBar);
				State = 148;
				parserRuleAlternative();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154;
			Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleNameContext lexerRuleName() {
			return GetRuleContext<LexerRuleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TColon() { return GetToken(CompilerParser.TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeContext[] lexerRuleAlternative() {
			return GetRuleContexts<LexerRuleAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeContext lexerRuleAlternative(int i) {
			return GetRuleContext<LexerRuleAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSemicolon() { return GetToken(CompilerParser.TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TBar() { return GetTokens(CompilerParser.TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TBar(int i) {
			return GetToken(CompilerParser.TBar, i);
		}
		public LexerRuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleDeclarationContext lexerRuleDeclaration() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleDeclaration() : _DoParseLexerRuleDeclaration();
	}

	internal LexerRuleDeclarationContext _DoParseLexerRuleDeclaration() {
		LexerRuleDeclarationContext _localctx = new LexerRuleDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_lexerRuleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			lexerRuleName();
			State = 157;
			Match(TColon);
			State = 158;
			lexerRuleAlternative();
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar) {
				{
				{
				State = 159;
				Match(TBar);
				State = 160;
				lexerRuleAlternative();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 166;
			Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeElementContext[] lexerRuleAlternativeElement() {
			return GetRuleContexts<LexerRuleAlternativeElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeElementContext lexerRuleAlternativeElement(int i) {
			return GetRuleContext<LexerRuleAlternativeElementContext>(i);
		}
		public LexerRuleAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleAlternativeContext lexerRuleAlternative() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleAlternative() : _DoParseLexerRuleAlternative();
	}

	internal LexerRuleAlternativeContext _DoParseLexerRuleAlternative() {
		LexerRuleAlternativeContext _localctx = new LexerRuleAlternativeContext(Context, State);
		EnterRule(_localctx, 34, RULE_lexerRuleAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 168;
				lexerRuleAlternativeElement();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TDot) | (1L << TNegate) | (1L << TOpenParen) | (1L << LexerIdentifier) | (1L << ParserIdentifier) | (1L << LString))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleAlternativeElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerMultiElementContext lexerMultiElement() {
			return GetRuleContext<LexerMultiElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerNegatedElementContext lexerNegatedElement() {
			return GetRuleContext<LexerNegatedElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRangeElementContext lexerRangeElement() {
			return GetRuleContext<LexerRangeElementContext>(0);
		}
		public LexerRuleAlternativeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleAlternativeElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleAlternativeElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleAlternativeElementContext lexerRuleAlternativeElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleAlternativeElement() : _DoParseLexerRuleAlternativeElement();
	}

	internal LexerRuleAlternativeElementContext _DoParseLexerRuleAlternativeElement() {
		LexerRuleAlternativeElementContext _localctx = new LexerRuleAlternativeElementContext(Context, State);
		EnterRule(_localctx, 36, RULE_lexerRuleAlternativeElement);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				lexerMultiElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174;
				lexerNegatedElement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 175;
				lexerRangeElement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerMultiElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleElementContext lexerRuleElement() {
			return GetRuleContext<LexerRuleElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityContext multiplicity() {
			return GetRuleContext<MultiplicityContext>(0);
		}
		public LexerMultiElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerMultiElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerMultiElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerMultiElementContext lexerMultiElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerMultiElement() : _DoParseLexerMultiElement();
	}

	internal LexerMultiElementContext _DoParseLexerMultiElement() {
		LexerMultiElementContext _localctx = new LexerMultiElementContext(Context, State);
		EnterRule(_localctx, 38, RULE_lexerMultiElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			lexerRuleElement();
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TNonGreedyZeroOrOne) | (1L << TNonGreedyZeroOrMore) | (1L << TNonGreedyOneOrMore) | (1L << TZeroOrOne) | (1L << TZeroOrMore) | (1L << TOneOrMore))) != 0)) {
				{
				State = 179;
				multiplicity();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerNegatedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TNegate() { return GetToken(CompilerParser.TNegate, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleElementContext lexerRuleElement() {
			return GetRuleContext<LexerRuleElementContext>(0);
		}
		public LexerNegatedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerNegatedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerNegatedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerNegatedElementContext lexerNegatedElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerNegatedElement() : _DoParseLexerNegatedElement();
	}

	internal LexerNegatedElementContext _DoParseLexerNegatedElement() {
		LexerNegatedElementContext _localctx = new LexerNegatedElementContext(Context, State);
		EnterRule(_localctx, 40, RULE_lexerNegatedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(TNegate);
			State = 183;
			lexerRuleElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRangeElementContext : ParserRuleContext {
		public FixedElementContext start;
		public FixedElementContext end;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TArrow() { return GetToken(CompilerParser.TArrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FixedElementContext[] fixedElement() {
			return GetRuleContexts<FixedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedElementContext fixedElement(int i) {
			return GetRuleContext<FixedElementContext>(i);
		}
		public LexerRangeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRangeElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRangeElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRangeElementContext lexerRangeElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRangeElement() : _DoParseLexerRangeElement();
	}

	internal LexerRangeElementContext _DoParseLexerRangeElement() {
		LexerRangeElementContext _localctx = new LexerRangeElementContext(Context, State);
		EnterRule(_localctx, 42, RULE_lexerRangeElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_localctx.start = fixedElement();
			State = 186;
			Match(TArrow);
			State = 187;
			_localctx.end = fixedElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedElementContext fixedElement() {
			return GetRuleContext<FixedElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WildcardElementContext wildcardElement() {
			return GetRuleContext<WildcardElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleReferenceContext lexerRuleReference() {
			return GetRuleContext<LexerRuleReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		public LexerRuleElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleElementContext lexerRuleElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleElement() : _DoParseLexerRuleElement();
	}

	internal LexerRuleElementContext _DoParseLexerRuleElement() {
		LexerRuleElementContext _localctx = new LexerRuleElementContext(Context, State);
		EnterRule(_localctx, 44, RULE_lexerRuleElement);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189;
				fixedElement();
				}
				break;
			case TDot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190;
				wildcardElement();
				}
				break;
			case LexerIdentifier:
			case ParserIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191;
				lexerRuleReference();
				}
				break;
			case TOpenParen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 192;
				lexerRuleBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TDot() { return GetToken(CompilerParser.TDot, 0); }
		public WildcardElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcardElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardElementContext wildcardElement() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseWildcardElement() : _DoParseWildcardElement();
	}

	internal WildcardElementContext _DoParseWildcardElement() {
		WildcardElementContext _localctx = new WildcardElementContext(Context, State);
		EnterRule(_localctx, 46, RULE_wildcardElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(TDot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LexerRuleReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleReferenceContext lexerRuleReference() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleReference() : _DoParseLexerRuleReference();
	}

	internal LexerRuleReferenceContext _DoParseLexerRuleReference() {
		LexerRuleReferenceContext _localctx = new LexerRuleReferenceContext(Context, State);
		EnterRule(_localctx, 48, RULE_lexerRuleReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOpenParen() { return GetToken(CompilerParser.TOpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeContext[] lexerRuleAlternative() {
			return GetRuleContexts<LexerRuleAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleAlternativeContext lexerRuleAlternative(int i) {
			return GetRuleContext<LexerRuleAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCloseParen() { return GetToken(CompilerParser.TCloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TBar() { return GetTokens(CompilerParser.TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TBar(int i) {
			return GetToken(CompilerParser.TBar, i);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockContext lexerRuleBlock() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleBlock() : _DoParseLexerRuleBlock();
	}

	internal LexerRuleBlockContext _DoParseLexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_lexerRuleBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(TOpenParen);
			State = 200;
			lexerRuleAlternative();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar) {
				{
				{
				State = 201;
				Match(TBar);
				State = 202;
				lexerRuleAlternative();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseName() : _DoParseName();
	}

	internal NameContext _DoParseName() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 52, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LexerIdentifier() { return GetToken(CompilerParser.LexerIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParserIdentifier() { return GetToken(CompilerParser.ParserIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIdentifier() : _DoParseIdentifier();
	}

	internal IdentifierContext _DoParseIdentifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_la = TokenStream.LA(1);
			if ( !(_la==LexerIdentifier || _la==ParserIdentifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LexerIdentifier() { return GetToken(CompilerParser.LexerIdentifier, 0); }
		public LexerRuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleNameContext lexerRuleName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLexerRuleName() : _DoParseLexerRuleName();
	}

	internal LexerRuleNameContext _DoParseLexerRuleName() {
		LexerRuleNameContext _localctx = new LexerRuleNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_lexerRuleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(LexerIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParserIdentifier() { return GetToken(CompilerParser.ParserIdentifier, 0); }
		public ParserRuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleNameContext parserRuleName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseParserRuleName() : _DoParseParserRuleName();
	}

	internal ParserRuleNameContext _DoParseParserRuleName() {
		ParserRuleNameContext _localctx = new ParserRuleNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_parserRuleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(ParserIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LexerIdentifier() { return GetToken(CompilerParser.LexerIdentifier, 0); }
		public ElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementNameContext elementName() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseElementName() : _DoParseElementName();
	}

	internal ElementNameContext _DoParseElementName() {
		ElementNameContext _localctx = new ElementNameContext(Context, State);
		EnterRule(_localctx, 60, RULE_elementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(LexerIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseLiteral() : _DoParseLiteral();
	}

	internal LiteralContext _DoParseLiteral() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_literal);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 220;
				nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				booleanLiteral();
				}
				break;
			case LInteger:
				EnterOuterAlt(_localctx, 3);
				{
				State = 222;
				integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223;
				decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 5);
				{
				State = 224;
				scientificLiteral();
				}
				break;
			case LString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 225;
				stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KNull() { return GetToken(CompilerParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseNullLiteral() : _DoParseNullLiteral();
	}

	internal NullLiteralContext _DoParseNullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 64, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KTrue() { return GetToken(CompilerParser.KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KFalse() { return GetToken(CompilerParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseBooleanLiteral() : _DoParseBooleanLiteral();
	}

	internal BooleanLiteralContext _DoParseBooleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 66, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			_la = TokenStream.LA(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LInteger() { return GetToken(CompilerParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseIntegerLiteral() : _DoParseIntegerLiteral();
	}

	internal IntegerLiteralContext _DoParseIntegerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 68, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDecimal() { return GetToken(CompilerParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseDecimalLiteral() : _DoParseDecimalLiteral();
	}

	internal DecimalLiteralContext _DoParseDecimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 70, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LScientific() { return GetToken(CompilerParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseScientificLiteral() : _DoParseScientificLiteral();
	}

	internal ScientificLiteralContext _DoParseScientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 72, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LString() { return GetToken(CompilerParser.LString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		return this.SyntaxParser != null && this.SyntaxParser.IsIncremental ? this.SyntaxParser._Antlr4ParseStringLiteral() : _DoParseStringLiteral();
	}

	internal StringLiteralContext _DoParseStringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 74, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(LString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x31', '\xF3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\a', '\x4', 'X', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '[', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '_', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '\x66', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'i', 
		'\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x6', '\a', 'n', 
		'\n', '\a', '\r', '\a', '\xE', '\a', 'o', '\x3', '\a', '\x5', '\a', 's', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', 'y', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'~', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x82', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x8E', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\x98', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x9B', 
		'\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xA4', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '\xA7', '\v', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x6', '\x13', '\xAC', '\n', '\x13', '\r', 
		'\x13', '\xE', '\x13', '\xAD', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\xB3', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\xB7', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xC4', '\n', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\xCE', 
		'\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\xD1', '\v', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\xE5', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x2', 
		'\x2', '(', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', '\x2', '\x6', '\x3', '\x2', 
		'\x16', '\x19', '\x3', '\x2', '\xF', '\x14', '\x3', '\x2', '&', '\'', 
		'\x3', '\x2', '\b', '\t', '\x2', '\xE5', '\x2', 'N', '\x3', '\x2', '\x2', 
		'\x2', '\x4', 'Q', '\x3', '\x2', '\x2', '\x2', '\x6', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\b', '^', '\x3', '\x2', '\x2', '\x2', '\n', '`', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'm', '\x3', '\x2', '\x2', '\x2', '\xE', 't', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'x', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x14', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x85', '\x3', '\x2', '\x2', '\x2', '\x18', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x91', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x93', '\x3', '\x2', '\x2', '\x2', '\"', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xAB', '\x3', '\x2', '\x2', '\x2', '&', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xB4', '\x3', '\x2', '\x2', '\x2', '*', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xBB', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\x30', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x34', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', ':', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '<', '\xDA', '\x3', '\x2', '\x2', '\x2', '>', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '@', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x42', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\xEA', '\x3', '\x2', '\x2', '\x2', 'H', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\xEE', '\x3', '\x2', '\x2', '\x2', 'L', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'O', '\x5', '\x4', '\x3', '\x2', 'O', 'P', '\a', 
		'\x2', '\x2', '\x3', 'P', '\x3', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', 
		'\a', '\x4', '\x2', '\x2', 'R', 'S', '\x5', '\x36', '\x1C', '\x2', 'S', 
		'T', '\a', '\f', '\x2', '\x2', 'T', 'U', '\x5', '\x6', '\x4', '\x2', 'U', 
		'\x5', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x5', '\b', '\x5', '\x2', 
		'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\a', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\\', '_', '\x5', '\n', '\x6', '\x2', ']', '_', '\x5', '\"', '\x12', 
		'\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', ']', '\x3', '\x2', 
		'\x2', '\x2', '_', '\t', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x5', 
		'<', '\x1F', '\x2', '\x61', '\x62', '\a', '\x1C', '\x2', '\x2', '\x62', 
		'g', '\x5', '\f', '\a', '\x2', '\x63', '\x64', '\a', '\x1A', '\x2', '\x2', 
		'\x64', '\x66', '\x5', '\f', '\a', '\x2', '\x65', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', 
		'\f', '\x2', '\x2', 'k', '\v', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x5', 
		'\x10', '\t', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'r', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\x5', 
		'\xE', '\b', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', 
		'\x2', '\x2', '\x2', 's', '\r', '\x3', '\x2', '\x2', '\x2', 't', 'u', 
		'\a', '\v', '\x2', '\x2', 'u', '\xF', '\x3', '\x2', '\x2', '\x2', 'v', 
		'y', '\x5', '\x12', '\n', '\x2', 'w', 'y', '\x5', '\x18', '\r', '\x2', 
		'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 
		'y', '\x11', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x5', '>', ' ', '\x2', 
		'{', '|', '\x5', '\x14', '\v', '\x2', '|', '~', '\x3', '\x2', '\x2', '\x2', 
		'}', 'z', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x81', '\x5', '\x1A', 
		'\xE', '\x2', '\x80', '\x82', '\x5', '\x16', '\f', '\x2', '\x81', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x13', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\t', '\x2', 
		'\x2', '\x2', '\x84', '\x15', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', 
		'\t', '\x3', '\x2', '\x2', '\x86', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x88', '\a', '\x15', '\x2', '\x2', '\x88', '\x89', '\x5', '\x1A', 
		'\xE', '\x2', '\x89', '\x19', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8E', 
		'\x5', '\x1C', '\xF', '\x2', '\x8B', '\x8E', '\x5', '\x1E', '\x10', '\x2', 
		'\x8C', '\x8E', '\x5', ' ', '\x11', '\x2', '\x8D', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x90', '\x5', 'L', '\'', '\x2', '\x90', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x92', '\x5', '\x38', '\x1D', '\x2', '\x92', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\x1E', '\x2', '\x2', 
		'\x94', '\x99', '\x5', '\f', '\a', '\x2', '\x95', '\x96', '\a', '\x1A', 
		'\x2', '\x2', '\x96', '\x98', '\x5', '\f', '\a', '\x2', '\x97', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x1F', '\x2', '\x2', 
		'\x9D', '!', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x5', ':', '\x1E', 
		'\x2', '\x9F', '\xA0', '\a', '\x1C', '\x2', '\x2', '\xA0', '\xA5', '\x5', 
		'$', '\x13', '\x2', '\xA1', '\xA2', '\a', '\x1A', '\x2', '\x2', '\xA2', 
		'\xA4', '\x5', '$', '\x13', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', '\f', '\x2', '\x2', '\xA9', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAC', '\x5', '&', '\x14', '\x2', '\xAB', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '%', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB3', 
		'\x5', '(', '\x15', '\x2', '\xB0', '\xB3', '\x5', '*', '\x16', '\x2', 
		'\xB1', '\xB3', '\x5', ',', '\x17', '\x2', '\xB2', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB6', '\x5', '.', '\x18', '\x2', '\xB5', '\xB7', '\x5', '\x16', 
		'\f', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', ')', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB9', '\a', '\x15', '\x2', '\x2', '\xB9', '\xBA', '\x5', '.', '\x18', 
		'\x2', '\xBA', '+', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x5', 
		'\x1C', '\xF', '\x2', '\xBC', '\xBD', '\a', '\r', '\x2', '\x2', '\xBD', 
		'\xBE', '\x5', '\x1C', '\xF', '\x2', '\xBE', '-', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC4', '\x5', '\x1C', '\xF', '\x2', '\xC0', '\xC4', '\x5', 
		'\x30', '\x19', '\x2', '\xC1', '\xC4', '\x5', '\x32', '\x1A', '\x2', '\xC2', 
		'\xC4', '\x5', '\x34', '\x1B', '\x2', '\xC3', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'/', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\xE', '\x2', '\x2', 
		'\xC6', '\x31', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x5', '\x38', 
		'\x1D', '\x2', '\xC8', '\x33', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', 
		'\a', '\x1E', '\x2', '\x2', '\xCA', '\xCF', '\x5', '$', '\x13', '\x2', 
		'\xCB', '\xCC', '\a', '\x1A', '\x2', '\x2', '\xCC', '\xCE', '\x5', '$', 
		'\x13', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', 
		'\a', '\x1F', '\x2', '\x2', '\xD3', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD5', '\x5', '\x38', '\x1D', '\x2', '\xD5', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD7', '\t', '\x4', '\x2', '\x2', '\xD7', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '&', '\x2', '\x2', '\xD9', 
		';', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '\'', '\x2', '\x2', 
		'\xDB', '=', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', '&', '\x2', 
		'\x2', '\xDD', '?', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE5', '\x5', 
		'\x42', '\"', '\x2', '\xDF', '\xE5', '\x5', '\x44', '#', '\x2', '\xE0', 
		'\xE5', '\x5', '\x46', '$', '\x2', '\xE1', '\xE5', '\x5', 'H', '%', '\x2', 
		'\xE2', '\xE5', '\x5', 'J', '&', '\x2', '\xE3', '\xE5', '\x5', 'L', '\'', 
		'\x2', '\xE4', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '\n', '\x2', '\x2', '\xE7', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\t', '\x5', '\x2', 
		'\x2', '\xE9', '\x45', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', 
		'(', '\x2', '\x2', '\xEB', 'G', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', 
		'\a', ')', '\x2', '\x2', '\xED', 'I', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEF', '\a', '*', '\x2', '\x2', '\xEF', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xF1', '\a', '+', '\x2', '\x2', '\xF1', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x13', 'Y', '^', 'g', 'o', 'r', 'x', '}', '\x81', '\x8D', '\x99', 
		'\xA5', '\xAD', '\xB2', '\xB6', '\xC3', '\xCF', '\xE4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.Compiler.Syntax.InternalSyntax
