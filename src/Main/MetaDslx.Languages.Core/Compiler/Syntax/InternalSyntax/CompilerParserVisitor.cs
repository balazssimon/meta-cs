//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Compiler\Syntax\InternalSyntax\CompilerParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Compiler.Syntax.InternalSyntax {

using MetaDslx.Languages.Compiler.Model;

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="CompilerParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public interface ICompilerParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMain([NotNull] CompilerParser.MainContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.namespaceDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNamespaceDeclaration([NotNull] CompilerParser.NamespaceDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.namespaceBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNamespaceBody([NotNull] CompilerParser.NamespaceBodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.grammarDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGrammarDeclaration([NotNull] CompilerParser.GrammarDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.usingDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUsingDeclaration([NotNull] CompilerParser.UsingDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.ruleDeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRuleDeclarations([NotNull] CompilerParser.RuleDeclarationsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.ruleDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRuleDeclaration([NotNull] CompilerParser.RuleDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.parserRuleDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParserRuleDeclaration([NotNull] CompilerParser.ParserRuleDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.parserRuleAlternative"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParserRuleAlternative([NotNull] CompilerParser.ParserRuleAlternativeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.eofElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEofElement([NotNull] CompilerParser.EofElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.parserRuleAlternativeElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParserRuleAlternativeElement([NotNull] CompilerParser.ParserRuleAlternativeElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.parserMultiElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParserMultiElement([NotNull] CompilerParser.ParserMultiElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssign([NotNull] CompilerParser.AssignContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.multiplicity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicity([NotNull] CompilerParser.MultiplicityContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.parserNegatedElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParserNegatedElement([NotNull] CompilerParser.ParserNegatedElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.parserRuleElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParserRuleElement([NotNull] CompilerParser.ParserRuleElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.fixedElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFixedElement([NotNull] CompilerParser.FixedElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.parserRuleReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParserRuleReference([NotNull] CompilerParser.ParserRuleReferenceContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.parserRuleBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParserRuleBlock([NotNull] CompilerParser.ParserRuleBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.lexerRuleDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLexerRuleDeclaration([NotNull] CompilerParser.LexerRuleDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.lexerRuleAlternative"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLexerRuleAlternative([NotNull] CompilerParser.LexerRuleAlternativeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.lexerRuleAlternativeElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLexerRuleAlternativeElement([NotNull] CompilerParser.LexerRuleAlternativeElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.lexerMultiElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLexerMultiElement([NotNull] CompilerParser.LexerMultiElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.lexerNegatedElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLexerNegatedElement([NotNull] CompilerParser.LexerNegatedElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.lexerRangeElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLexerRangeElement([NotNull] CompilerParser.LexerRangeElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.lexerRuleElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLexerRuleElement([NotNull] CompilerParser.LexerRuleElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.wildcardElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWildcardElement([NotNull] CompilerParser.WildcardElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.lexerRuleReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLexerRuleReference([NotNull] CompilerParser.LexerRuleReferenceContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.lexerRuleBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLexerRuleBlock([NotNull] CompilerParser.LexerRuleBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitName([NotNull] CompilerParser.NameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.qualifiedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQualifiedName([NotNull] CompilerParser.QualifiedNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.qualifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQualifier([NotNull] CompilerParser.QualifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifier([NotNull] CompilerParser.IdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.lexerRuleName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLexerRuleName([NotNull] CompilerParser.LexerRuleNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.parserRuleName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParserRuleName([NotNull] CompilerParser.ParserRuleNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.elementName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElementName([NotNull] CompilerParser.ElementNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] CompilerParser.LiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.nullLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullLiteral([NotNull] CompilerParser.NullLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.booleanLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanLiteral([NotNull] CompilerParser.BooleanLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.integerLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntegerLiteral([NotNull] CompilerParser.IntegerLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.decimalLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDecimalLiteral([NotNull] CompilerParser.DecimalLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.scientificLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScientificLiteral([NotNull] CompilerParser.ScientificLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CompilerParser.stringLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringLiteral([NotNull] CompilerParser.StringLiteralContext context);
}
} // namespace MetaDslx.Languages.Compiler.Syntax.InternalSyntax
