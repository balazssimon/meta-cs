using MetaDslx.Compiler;
using MetaDslx.Compiler.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MetaDslx.Core
{
    public class ModelDiagnosticDescriptors
    {
        public const string ModelCategory = "MetaDslx.Core";
        public static readonly DiagnosticDescriptor ERR_SymbolAlreadyContainedByModelGroup = new DiagnosticDescriptor("MM0001", "Symbol already contained by model group", "The symbol '{0}' is already contained by the model group.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_SymbolAlreadyContainedByModel = new DiagnosticDescriptor("MM0002", "Symbol already contained by model", "The symbol '{0}' is already contained by the model.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotResolveModel = new DiagnosticDescriptor("MM0003", "Cannot resolve model", "Cannot resolve the model based on the id '{0}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotMergeSymbolsResolve = new DiagnosticDescriptor("MM0004", "Cannot merge symbols", "Cannot merge part symbol '{0}' into target symbol '{1}'. The target and the part symbols must be contained by this model or model group.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotMergeSymbolsProperty = new DiagnosticDescriptor("MM0005", "Cannot merge symbols", "Cannot merge part symbol '{0}' into target symbol '{1}'. They have a different values for the property '{2}' (part value is '{3}', target value is '{4}').", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_SymbolCannotBeAssignedToPropertyModelGroup = new DiagnosticDescriptor("MM0006", "Symbol cannot be assigned to property", "Symbol '{0}' cannot be assigned to property '{1}' of '{2}', since the symbol cannot be resolved within the model group. Either add the symbol to the model first, or make sure to reference the model which contains the symbol from the model group.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_SymbolCannotBeAssignedToPropertyModel = new DiagnosticDescriptor("MM0007", "Symbol cannot be assigned to property", "Symbol '{0}' cannot be assigned to property '{1}' of '{2}', since the symbol cannot be resolved within the model. Either add the symbol to the model first, or create a model group referencing the model which contains the symbol.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_SymbolCannotBeAddedToPropertyModelGroup = new DiagnosticDescriptor("MM0008", "Symbol cannot be added to property", "Symbol '{0}' cannot be added to property '{1}' of '{2}', since the symbol cannot be resolved within the model group. Either add the symbol to the model first, or make sure to reference the model which contains the symbol from the model group.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_SymbolCannotBeAddedToPropertyModel = new DiagnosticDescriptor("MM0009", "Symbol cannot be added to property", "Symbol '{0}' cannot be added to property '{1}' of '{2}', since the symbol cannot be resolved within the model. Either add the symbol to the model first, or create a model group referencing the model which contains the symbol.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotReassignDerivedProperty = new DiagnosticDescriptor("MM0010", "Cannot reassign a derived property", "Cannot reassign derived property '{1}' of symbol '{2}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotReassignReadOnlyProperty = new DiagnosticDescriptor("MM0011", "Cannot reassign a read-only property", "Cannot reassign read-only property '{0}' of symbol '{1}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotReassignLazyValuedProperty = new DiagnosticDescriptor("MM0012", "Cannot reassign a lazy-valued property", "Cannot reassign lazy-valued property '{0}' of symbol '{1}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotAssignNullToProperty = new DiagnosticDescriptor("MM0013", "Cannot assign null to property", "Cannot assign null value to property '{0}' of symbol '{1}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotAssignValueToProperty = new DiagnosticDescriptor("MM0014", "Cannot assign value to property", "Cannot assign value '{0}' of type '{1}' to property '{2}' of type '{3}' in symbol '{4}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotChangeDerivedProperty = new DiagnosticDescriptor("MM0015", "Cannot change derived property", "Cannot change derived property '{1}' of symbol '{2}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotChangeReadOnlyProperty = new DiagnosticDescriptor("MM0016", "Cannot change read-only property", "Cannot change read-only property '{0}' of symbol '{1}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotAddNullToProperty = new DiagnosticDescriptor("MM0017", "Cannot add null value to property", "Cannot add null value to property '{0}' of symbol '{1}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotAddValueToProperty = new DiagnosticDescriptor("MM0018", "Cannot add value to property", "Cannot add value '{0}' of type '{1}' to property '{2}' of type '{3}' in symbol '{4}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_InvalidContainment = new DiagnosticDescriptor("MM0019", "Invalid containment", "Cannot add symbol '{0}' to containing property '{1}' of '{2}'. The symbol is already contained by '{3}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_InvalidSelfContainment = new DiagnosticDescriptor("MM0020", "Invalid self-containment", "Cannot add symbol '{0}' to containing property '{1}' of '{2}'. The symbol cannot contain itself.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_InvalidModelContainment = new DiagnosticDescriptor("MM0021", "Invalid model containment", "Cannot add symbol '{0}' to containing property '{1}' of '{2}'. The containing symbol and the contained symbol must be in the same model.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CircularContainment = new DiagnosticDescriptor("MM0022", "Circular containment", "Cannot add symbol '{0}' to containing property '{1}' of '{2}'. This would result in circular containment.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CircularLazyEvaluation = new DiagnosticDescriptor("MM0023", "Circular lazy evaluation", "Circular dependency between lazy values.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_LazyEvaluationError = new DiagnosticDescriptor("MM0024", "Lazy evaluation error", "The lazy evaluator threw an exception: {0}", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_UnknownTypeName = new DiagnosticDescriptor("MM0025", "Uknown type name", "Uknown type name: '{0}'", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotReassignCollectionProperty = new DiagnosticDescriptor("MM0026", "Cannot reassign collection property", "Cannot reassign collection property '{0}' of symbol '{1}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotAddMultipleValuesToNonCollectionProperty = new DiagnosticDescriptor("MM0027", "Cannot add multiple values to non-collection property", "Cannot add multiple values to non-collection property '{0}' of symbol '{1}'.", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_CannotMergeDifferentSymbols = new DiagnosticDescriptor("MM0028", "Cannot merge different symbols", "Cannot merge part symbol '{0}' into target symbol '{1}'. The target and the part symbols must be of the same type (part symbol is of type '{2}', target symbol is of type '{3}').", ModelCategory, DiagnosticSeverity.Error, true);
        public static readonly DiagnosticDescriptor ERR_Exception = new DiagnosticDescriptor("MM0029", "Unexpected exception", "Unexpected exception: {0}", ModelCategory, DiagnosticSeverity.Error, true);

    }
}
