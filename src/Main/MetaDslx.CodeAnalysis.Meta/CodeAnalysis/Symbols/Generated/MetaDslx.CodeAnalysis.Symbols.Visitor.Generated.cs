using Microsoft.CodeAnalysis;
using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Symbols;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Text;
using System.Threading;
namespace MetaDslx.CodeAnalysis.Symbols
{
	public interface ISymbolVisitor
	{
        void Visit(ModuleSymbol symbol);
        void Visit(Symbol symbol);
        void Visit(BinaryExpressionSymbol symbol);
        void Visit(ConditionalExpressionSymbol symbol);
        void Visit(DefaultExpressionSymbol symbol);
        void Visit(DiscardExpressionSymbol symbol);
        void Visit(DynamicExpressionSymbol symbol);
        void Visit(ExpressionSymbol symbol);
        void Visit(IndexerExpressionSymbol symbol);
        void Visit(InvocationExpressionSymbol symbol);
        void Visit(LiteralExpressionSymbol symbol);
        void Visit(ParenthesizedExpressionSymbol symbol);
        void Visit(ReferenceExpressionSymbol symbol);
        void Visit(UnaryExpressionSymbol symbol);
        void Visit(ConstructorSymbol symbol);
        void Visit(MethodSymbol symbol);
        void Visit(OperatorSymbol symbol);
        void Visit(ParameterSymbol symbol);
        void Visit(PropertySymbol symbol);
        void Visit(AliasSymbol symbol);
        void Visit(NamespaceSymbol symbol);
        void Visit(BlockStatementSymbol symbol);
        void Visit(CatchClauseSymbol symbol);
        void Visit(ExpressionStatementSymbol symbol);
        void Visit(ForEachLoopStatementSymbol symbol);
        void Visit(ForLoopStatementSymbol symbol);
        void Visit(ForToLoopStatementSymbol symbol);
        void Visit(IfStatementSymbol symbol);
        void Visit(JumpStatementSymbol symbol);
        void Visit(LabelSymbol symbol);
        void Visit(LocalVariableSymbol symbol);
        void Visit(ReturnStatementSymbol symbol);
        void Visit(StatementSymbol symbol);
        void Visit(SwitchCaseSymbol symbol);
        void Visit(SwitchStatementSymbol symbol);
        void Visit(TryStatementSymbol symbol);
        void Visit(WhileLoopStatementSymbol symbol);
        void Visit(ArrayTypeSymbol symbol);
        void Visit(ClassTypeSymbol symbol);
        void Visit(DynamicTypeSymbol symbol);
        void Visit(EnumLiteralSymbol symbol);
        void Visit(EnumTypeSymbol symbol);
        void Visit(InterfaceTypeSymbol symbol);
        void Visit(NamedTypeSymbol symbol);
        void Visit(NullableTypeSymbol symbol);
        void Visit(StructTypeSymbol symbol);
        void Visit(TupleTypeSymbol symbol);
        void Visit(TypeParameterSymbol symbol);
        void Visit(TypeSymbol symbol);
        void Visit(AssemblySymbol symbol);
	}

	public interface ISymbolVisitor<TResult>
	{
        TResult Visit(ModuleSymbol symbol);
        TResult Visit(Symbol symbol);
        TResult Visit(BinaryExpressionSymbol symbol);
        TResult Visit(ConditionalExpressionSymbol symbol);
        TResult Visit(DefaultExpressionSymbol symbol);
        TResult Visit(DiscardExpressionSymbol symbol);
        TResult Visit(DynamicExpressionSymbol symbol);
        TResult Visit(ExpressionSymbol symbol);
        TResult Visit(IndexerExpressionSymbol symbol);
        TResult Visit(InvocationExpressionSymbol symbol);
        TResult Visit(LiteralExpressionSymbol symbol);
        TResult Visit(ParenthesizedExpressionSymbol symbol);
        TResult Visit(ReferenceExpressionSymbol symbol);
        TResult Visit(UnaryExpressionSymbol symbol);
        TResult Visit(ConstructorSymbol symbol);
        TResult Visit(MethodSymbol symbol);
        TResult Visit(OperatorSymbol symbol);
        TResult Visit(ParameterSymbol symbol);
        TResult Visit(PropertySymbol symbol);
        TResult Visit(AliasSymbol symbol);
        TResult Visit(NamespaceSymbol symbol);
        TResult Visit(BlockStatementSymbol symbol);
        TResult Visit(CatchClauseSymbol symbol);
        TResult Visit(ExpressionStatementSymbol symbol);
        TResult Visit(ForEachLoopStatementSymbol symbol);
        TResult Visit(ForLoopStatementSymbol symbol);
        TResult Visit(ForToLoopStatementSymbol symbol);
        TResult Visit(IfStatementSymbol symbol);
        TResult Visit(JumpStatementSymbol symbol);
        TResult Visit(LabelSymbol symbol);
        TResult Visit(LocalVariableSymbol symbol);
        TResult Visit(ReturnStatementSymbol symbol);
        TResult Visit(StatementSymbol symbol);
        TResult Visit(SwitchCaseSymbol symbol);
        TResult Visit(SwitchStatementSymbol symbol);
        TResult Visit(TryStatementSymbol symbol);
        TResult Visit(WhileLoopStatementSymbol symbol);
        TResult Visit(ArrayTypeSymbol symbol);
        TResult Visit(ClassTypeSymbol symbol);
        TResult Visit(DynamicTypeSymbol symbol);
        TResult Visit(EnumLiteralSymbol symbol);
        TResult Visit(EnumTypeSymbol symbol);
        TResult Visit(InterfaceTypeSymbol symbol);
        TResult Visit(NamedTypeSymbol symbol);
        TResult Visit(NullableTypeSymbol symbol);
        TResult Visit(StructTypeSymbol symbol);
        TResult Visit(TupleTypeSymbol symbol);
        TResult Visit(TypeParameterSymbol symbol);
        TResult Visit(TypeSymbol symbol);
        TResult Visit(AssemblySymbol symbol);
	}

	public interface ISymbolVisitor<TArgument, TResult>
	{
        TResult Visit(ModuleSymbol symbol, TArgument argument);
        TResult Visit(Symbol symbol, TArgument argument);
        TResult Visit(BinaryExpressionSymbol symbol, TArgument argument);
        TResult Visit(ConditionalExpressionSymbol symbol, TArgument argument);
        TResult Visit(DefaultExpressionSymbol symbol, TArgument argument);
        TResult Visit(DiscardExpressionSymbol symbol, TArgument argument);
        TResult Visit(DynamicExpressionSymbol symbol, TArgument argument);
        TResult Visit(ExpressionSymbol symbol, TArgument argument);
        TResult Visit(IndexerExpressionSymbol symbol, TArgument argument);
        TResult Visit(InvocationExpressionSymbol symbol, TArgument argument);
        TResult Visit(LiteralExpressionSymbol symbol, TArgument argument);
        TResult Visit(ParenthesizedExpressionSymbol symbol, TArgument argument);
        TResult Visit(ReferenceExpressionSymbol symbol, TArgument argument);
        TResult Visit(UnaryExpressionSymbol symbol, TArgument argument);
        TResult Visit(ConstructorSymbol symbol, TArgument argument);
        TResult Visit(MethodSymbol symbol, TArgument argument);
        TResult Visit(OperatorSymbol symbol, TArgument argument);
        TResult Visit(ParameterSymbol symbol, TArgument argument);
        TResult Visit(PropertySymbol symbol, TArgument argument);
        TResult Visit(AliasSymbol symbol, TArgument argument);
        TResult Visit(NamespaceSymbol symbol, TArgument argument);
        TResult Visit(BlockStatementSymbol symbol, TArgument argument);
        TResult Visit(CatchClauseSymbol symbol, TArgument argument);
        TResult Visit(ExpressionStatementSymbol symbol, TArgument argument);
        TResult Visit(ForEachLoopStatementSymbol symbol, TArgument argument);
        TResult Visit(ForLoopStatementSymbol symbol, TArgument argument);
        TResult Visit(ForToLoopStatementSymbol symbol, TArgument argument);
        TResult Visit(IfStatementSymbol symbol, TArgument argument);
        TResult Visit(JumpStatementSymbol symbol, TArgument argument);
        TResult Visit(LabelSymbol symbol, TArgument argument);
        TResult Visit(LocalVariableSymbol symbol, TArgument argument);
        TResult Visit(ReturnStatementSymbol symbol, TArgument argument);
        TResult Visit(StatementSymbol symbol, TArgument argument);
        TResult Visit(SwitchCaseSymbol symbol, TArgument argument);
        TResult Visit(SwitchStatementSymbol symbol, TArgument argument);
        TResult Visit(TryStatementSymbol symbol, TArgument argument);
        TResult Visit(WhileLoopStatementSymbol symbol, TArgument argument);
        TResult Visit(ArrayTypeSymbol symbol, TArgument argument);
        TResult Visit(ClassTypeSymbol symbol, TArgument argument);
        TResult Visit(DynamicTypeSymbol symbol, TArgument argument);
        TResult Visit(EnumLiteralSymbol symbol, TArgument argument);
        TResult Visit(EnumTypeSymbol symbol, TArgument argument);
        TResult Visit(InterfaceTypeSymbol symbol, TArgument argument);
        TResult Visit(NamedTypeSymbol symbol, TArgument argument);
        TResult Visit(NullableTypeSymbol symbol, TArgument argument);
        TResult Visit(StructTypeSymbol symbol, TArgument argument);
        TResult Visit(TupleTypeSymbol symbol, TArgument argument);
        TResult Visit(TypeParameterSymbol symbol, TArgument argument);
        TResult Visit(TypeSymbol symbol, TArgument argument);
        TResult Visit(AssemblySymbol symbol, TArgument argument);
	}
}
