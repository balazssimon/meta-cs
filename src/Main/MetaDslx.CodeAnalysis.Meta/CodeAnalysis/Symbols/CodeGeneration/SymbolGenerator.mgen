namespace MetaDslx.CodeAnalysis.Symbols.CodeGeneration;
generator SymbolGenerator;

template GenerateSymbol(SymbolGenerationInfo symbol)
using Microsoft.CodeAnalysis;
using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Declarations;
using MetaDslx.CodeAnalysis.Symbols;
using MetaDslx.CodeAnalysis.Symbols.Metadata;
using MetaDslx.CodeAnalysis.Symbols.Source;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Text;
using System.Threading;
^
namespace [symbol.NamespaceName]
{
	public abstract partial class [symbol.Name]
	{
        [if (symbol.SymbolKindType != null)]
        /// <summary>
        /// Gets the kind of this symbol.
        /// </summary>
        public override [symbol.SymbolKindType] [symbol.SymbolKindName] => [symbol.SymbolKindType].[symbol.SymbolKind];
        [end if]
^
        [if (symbol.SubSymbolKindType != null)]
        /// <summary>
        /// Gets the kind of this symbol.
        /// </summary>
        public virtual [symbol.SubSymbolKindType] [symbol.SubSymbolKindName] => [symbol.SubSymbolKindType].None;
        [end if]
^
        public [if (symbol.IsSymbolClass)]virtual[else]override[end if] void Accept(MetaDslx.CodeAnalysis.Symbols.SymbolVisitor visitor)
        {
            if (visitor is ISymbolVisitor isv) isv.Visit(this);
        }
^
        public [if (symbol.IsSymbolClass)]virtual[else]override[end if] TResult Accept<TResult>(MetaDslx.CodeAnalysis.Symbols.SymbolVisitor<TResult> visitor)
        {
            if (visitor is ISymbolVisitor<TResult> isv) return isv.Visit(this);
            else return default(TResult);
        }
^
        public [if (symbol.IsSymbolClass)]virtual[else]override[end if] TResult Accept<TArgument, TResult>(MetaDslx.CodeAnalysis.Symbols.SymbolVisitor<TArgument, TResult> visitor, TArgument argument)
        {
            if (visitor is ISymbolVisitor<TArgument, TResult> isv) return isv.Visit(this, argument);
            else return default(TResult);
        }
	}
}
end template

template GenerateCompletionSymbol(SymbolGenerationInfo symbol)
using Microsoft.CodeAnalysis;
using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Declarations;
using MetaDslx.CodeAnalysis.Symbols;
using MetaDslx.CodeAnalysis.Symbols.Metadata;
using MetaDslx.CodeAnalysis.Symbols.Source;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Text;
using System.Threading;
using Roslyn.Utilities;
^
namespace [symbol.NamespaceName].Completion
{
	public abstract partial class Completion[symbol.Name] : [symbol.NamespaceName].[symbol.Name][if(symbol.ModelObjectOption != ParameterOption.Disabled)], MetaDslx.CodeAnalysis.Symbols.Metadata.IModelSymbol[end if]
	{
        public static class CompletionParts
        {
            [loop (partName:symbol.GetCompletionPartNames())]
            public static readonly CompletionPart [partName] = new CompletionPart(nameof([partName]));
            [end loop]
            public static readonly ImmutableHashSet<CompletionPart> AllWithLocation = CompletionPart.Combine([loop (partName:symbol.GetOrderedCompletionParts(true); separator comma = ", ")][partName][comma][end loop]);
            public static readonly ImmutableHashSet<CompletionPart> All = CompletionPart.Combine([loop (partName:symbol.GetOrderedCompletionParts(false); separator comma = ", ")][partName][comma][end loop]);
            public static readonly CompletionGraph CompletionGraph = CompletionGraph.FromCompletionParts([loop (partName:symbol.GetOrderedCompletionParts(false); separator comma = ", ")][partName][comma][end loop]);
        }
^
        private readonly Symbol _container;
        [if(symbol.ModelObjectOption != ParameterOption.Disabled)]
        private readonly object? _modelObject;
        [end if]
        private readonly CompletionState _state;
        private ImmutableArray<Symbol> _childSymbols;
        private string _name;
        [loop (prop:symbol.Properties)]
        private [prop.Type] [prop.FieldName];
        [end loop]
^
        public Completion[symbol.Name](Symbol container[if(symbol.ModelObjectOption != ParameterOption.Disabled)], object? modelObject[if(symbol.ModelObjectOption == ParameterOption.Optional)] = null[end if][end if])
        {
            _container = container;
            [if(symbol.ModelObjectOption == ParameterOption.Required)]
            if (modelObject is null) throw new ArgumentNullException(nameof(modelObject));
            [end if]
            [if(symbol.ModelObjectOption != ParameterOption.Disabled)]
            _modelObject = modelObject;
            [end if]
            _state = CompletionParts.CompletionGraph.CreateState();
        }
^
        public sealed override Language Language => ContainingModule.Language;
^
        public SymbolFactory SymbolFactory => ContainingModule.SymbolFactory;
        [if(symbol.ModelObjectOption != ParameterOption.Disabled)]
^
        public object ModelObject => _modelObject;
^
        public Type ModelObjectType => _modelObject is not null ? Language.SymbolFacts.GetModelObjectType(_modelObject) : null;
        [end if]
^
        public sealed override Symbol ContainingSymbol => _container;
^
        public sealed override ImmutableArray<Symbol> ChildSymbols 
        {
            get
            {
                this.ForceComplete(CompletionGraph.FinishCreatingChildren, null, default);
                return _childSymbols;
            }
        }
^
        public override string Name 
        {
            get
            {
                this.ForceComplete(CompletionGraph.FinishInitializing, null, default);
                return _name;
            }
        }
^
        [loop (prop:symbol.Properties)]
        public override [prop.Type] [prop.Name]
        {
            get
            {
                this.ForceComplete(CompletionParts.[prop.FinishCompletionPartName], null, default);
                return [prop.FieldName];
            }
        }
        [end loop]
^
        #region Completion
^
        public sealed override bool RequiresCompletion => true;
^
        public sealed override bool HasComplete(CompletionPart part)
        {
            return _state.HasComplete(part);
        }
^
        public override void ForceComplete(CompletionPart completionPart, SourceLocation locationOpt, CancellationToken cancellationToken)
        {
            if (completionPart != null && _state.HasComplete(completionPart)) return;
            if (completionPart != null && !CompletionParts.All.Contains(completionPart)) throw new ArgumentException(nameof(completionPart));
            while (true)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var incompletePart = _state.NextIncompletePart;
                if (incompletePart == CompletionGraph.StartInitializing || incompletePart == CompletionGraph.FinishInitializing)
                {
                    if (_state.NotePartComplete(CompletionGraph.StartInitializing))
                    {
                        var diagnostics = DiagnosticBag.GetInstance();
                        _name = CompleteSymbolProperty_Name(diagnostics, cancellationToken);
                        CompleteInitializingSymbol(diagnostics, cancellationToken);
                        AddSymbolDiagnostics(diagnostics);
                        diagnostics.Free();
                        _state.NotePartComplete(CompletionGraph.FinishInitializing);
                    }
                }
                else if (incompletePart == CompletionGraph.StartCreatingChildren || incompletePart == CompletionGraph.FinishCreatingChildren)
                {
                    if (_state.NotePartComplete(CompletionGraph.StartCreatingChildren))
                    {
                        var diagnostics = DiagnosticBag.GetInstance();
                        _childSymbols = CompleteCreatingChildSymbols(diagnostics, cancellationToken);
                        AddSymbolDiagnostics(diagnostics);
                        diagnostics.Free();
                        _state.NotePartComplete(CompletionGraph.FinishCreatingChildren);
                    }
                }
                [loop (part:symbol.CompletionParts)]
                    [if (part.IsLocked)]
                else if (incompletePart == CompletionParts.[part.StartCompletionPartName] || incompletePart == CompletionParts.[part.FinishCompletionPartName])
                {
                    if (_state.NotePartComplete(CompletionParts.[part.StartCompletionPartName]))
                    {
                        [if (part.CompleteMethodParameters.HasFlag(CompleteMethodParameters.Diagnostics))]
                        var diagnostics = DiagnosticBag.GetInstance();
                        [end if]
                        [if (part is SymbolPropertyGenerationInfo)][((SymbolPropertyGenerationInfo)part).FieldName] = [end if][part.CompleteMethodName]([part.CompleteMethodArgList]);
                        [if (part.CompleteMethodParameters.HasFlag(CompleteMethodParameters.Diagnostics))]
                        AddSymbolDiagnostics(diagnostics);
                        diagnostics.Free();
                        [end if]
                        _state.NotePartComplete(CompletionParts.[part.FinishCompletionPartName]);
                    }
                }
                    [else]
                else if (incompletePart == CompletionParts.[part.CompletionPartName])
                {
                    [if (part.CompleteMethodParameters.HasFlag(CompleteMethodParameters.Diagnostics))]
                    var diagnostics = DiagnosticBag.GetInstance();
                    [end if]
                    [part.CompleteMethodName]([part.CompleteMethodArgList]);
                    [if (part.CompleteMethodParameters.HasFlag(CompleteMethodParameters.Diagnostics))]
                    AddSymbolDiagnostics(diagnostics);
                    diagnostics.Free();
                    [end if]
                    _state.NotePartComplete(CompletionParts.[part.CompletionPartName]);
                }
                    [end if]
                [end loop]
                else if (incompletePart == CompletionGraph.StartComputingNonSymbolProperties || incompletePart == CompletionGraph.FinishComputingNonSymbolProperties)
                {
                    if (_state.NotePartComplete(CompletionGraph.StartComputingNonSymbolProperties))
                    {
                        var diagnostics = DiagnosticBag.GetInstance();
                        CompleteNonSymbolProperties(locationOpt, diagnostics, cancellationToken);
                        AddSymbolDiagnostics(diagnostics);
                        diagnostics.Free();
                        _state.NotePartComplete(CompletionGraph.FinishComputingNonSymbolProperties);
                    }
                }
                else if (incompletePart == CompletionGraph.ChildrenCompleted)
                {
                    var diagnostics = DiagnosticBag.GetInstance();
                    CompleteImports(locationOpt, diagnostics, cancellationToken);
                    AddSymbolDiagnostics(diagnostics);
                    diagnostics.Free();

                    bool allCompleted = true;
                    if (locationOpt == null)
                    {
                        foreach (var child in _childSymbols)
                        {
                            cancellationToken.ThrowIfCancellationRequested();
                            child.ForceComplete(null, locationOpt, cancellationToken);
                        }
                    }
                    else
                    {
                        foreach (var child in _childSymbols)
                        {
                            ForceCompleteChildByLocation(locationOpt, child, cancellationToken);
                            allCompleted = allCompleted && child.HasComplete(CompletionGraph.All);
                        }
                    }

                    if (!allCompleted)
                    {
                        // We did not complete all members, so just kick out now.
                        var allParts = CompletionParts.AllWithLocation;
                        _state.SpinWaitComplete(allParts, cancellationToken);
                        return;
                    }

                    // We've completed all members, proceed to the next iteration.
                    _state.NotePartComplete(CompletionGraph.ChildrenCompleted);
                }
                if (incompletePart == null)
                {
                    return;
                }
                else
                {
                    // This assert will trigger if we forgot to handle any of the completion parts
                    Debug.Assert(!CompletionParts.All.Contains(incompletePart));
                    // any other values are completion parts intended for other kinds of symbols
                    _state.NotePartComplete(incompletePart);
                }
                if (completionPart != null && _state.HasComplete(completionPart)) return;
                _state.SpinWaitComplete(incompletePart, cancellationToken);
            }
            throw ExceptionUtilities.Unreachable;
        }
^
        protected abstract string CompleteSymbolProperty_Name(DiagnosticBag diagnostics, CancellationToken cancellationToken);
        protected abstract void CompleteInitializingSymbol(DiagnosticBag diagnostics, CancellationToken cancellationToken);
        protected abstract ImmutableArray<Symbol> CompleteCreatingChildSymbols(DiagnosticBag diagnostics, CancellationToken cancellationToken);
        protected abstract void CompleteImports(SourceLocation locationOpt, DiagnosticBag diagnostics, CancellationToken cancellationToken);
        [loop (part:symbol.CompletionParts where part.GenerateCompleteMethod)]
        protected abstract [part.CompleteMethodReturnType] [part.CompleteMethodName]([part.CompleteMethodParamList]);
        [end loop]
        protected abstract void CompleteNonSymbolProperties(SourceLocation locationOpt, DiagnosticBag diagnostics, CancellationToken cancellationToken);
        #endregion
^
    }
}
end template

template GenerateMetadataSymbol(SymbolGenerationInfo symbol)
using Microsoft.CodeAnalysis;
using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Declarations;
using MetaDslx.CodeAnalysis.Symbols;
using MetaDslx.CodeAnalysis.Symbols.Metadata;
using MetaDslx.CodeAnalysis.Symbols.Source;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Text;
using System.Threading;
^
namespace [symbol.NamespaceName].Metadata
{
	public partial class Metadata[symbol.Name] : [symbol.NamespaceName].Completion.Completion[symbol.Name]
	{
        public Metadata[symbol.Name](Symbol container[if(symbol.ModelObjectOption != ParameterOption.Disabled)], object modelObject[if(symbol.ModelObjectOption == ParameterOption.Optional)] = null[end if][end if])
            : base(container, modelObject)
        {
        }
^
        public override ImmutableArray<Location> Locations => this.ContainingModule.Locations;
^
        public override ImmutableArray<SyntaxReference> DeclaringSyntaxReferences => ImmutableArray<SyntaxReference>.Empty;
^
        protected override string CompleteSymbolProperty_Name(DiagnosticBag diagnostics, CancellationToken cancellationToken)
        {
            return ModelSymbolImplementation.AssignSymbolPropertyValue<string>(this, nameof(Name), diagnostics, cancellationToken);
        }
^
        protected override void CompleteInitializingSymbol(DiagnosticBag diagnostics, CancellationToken cancellationToken)
        {
        }
^
        protected override ImmutableArray<Symbol> CompleteCreatingChildSymbols(DiagnosticBag diagnostics, CancellationToken cancellationToken)
        {
            return ModelSymbolImplementation.MakeChildSymbols(this, nameof(ChildSymbols), diagnostics, cancellationToken);
        }
^
        protected override void CompleteImports(SourceLocation locationOpt, DiagnosticBag diagnostics, CancellationToken cancellationToken)
        {
        }
^
        [loop (part:symbol.CompletionParts where part.GenerateCompleteMethod)]
        protected override [part.CompleteMethodReturnType] [part.CompleteMethodName]([part.CompleteMethodParamList])
        {
            [if (part is SymbolPropertyGenerationInfo)]
                [var prop = (SymbolPropertyGenerationInfo)part]
                [if (prop.IsCollection)]
            return ModelSymbolImplementation.AssignSymbolPropertyValues<[prop.ItemType]>(this, nameof([prop.Name]), diagnostics, cancellationToken);
                [else]
            return ModelSymbolImplementation.AssignSymbolPropertyValue<[prop.Type]>(this, nameof([prop.Name]), diagnostics, cancellationToken);
                [end if]
            [end if]
        }
        [end loop]
^
        protected override void CompleteNonSymbolProperties(SourceLocation locationOpt, DiagnosticBag diagnostics, CancellationToken cancellationToken)
        {
        }
    }
}
end template

template GenerateSourceSymbol(SymbolGenerationInfo symbol)
using Microsoft.CodeAnalysis;
using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Binding;
using MetaDslx.CodeAnalysis.Binding.Binders;
using MetaDslx.CodeAnalysis.Declarations;
using MetaDslx.CodeAnalysis.Symbols;
using MetaDslx.CodeAnalysis.Symbols.Metadata;
using MetaDslx.CodeAnalysis.Symbols.Source;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
^
namespace [symbol.NamespaceName].Source
{
	public partial class Source[symbol.Name] : [symbol.NamespaceName].Completion.Completion[symbol.Name], MetaDslx.CodeAnalysis.Symbols.Source.ISourceSymbol
	{
        private readonly MergedDeclaration _declaration;

		public Source[symbol.Name](Symbol containingSymbol, [if(symbol.ModelObjectOption != ParameterOption.Disabled)]object modelObject[if(symbol.ModelObjectOption == ParameterOption.Optional)] = null[end if], [end if]MergedDeclaration declaration)
            : base(containingSymbol, modelObject)
        {
            if (declaration is null) throw new ArgumentNullException(nameof(declaration));
            _declaration = declaration;
		}
^
        public MergedDeclaration MergedDeclaration => _declaration;
^
        public override ImmutableArray<Location> Locations => _declaration.NameLocations;
^
        public override ImmutableArray<SyntaxReference> DeclaringSyntaxReferences => _declaration.SyntaxReferences;
^
        public BinderPosition<SymbolBinder> GetBinder(SyntaxReference reference)
        {
            Debug.Assert(this.DeclaringSyntaxReferences.Contains(reference));
            return FindBinders.FindSymbolBinder(this, reference);
        }
^
        public Symbol GetChildSymbol(SyntaxReference syntax)
        {
            foreach (var child in this.ChildSymbols)
            {
                if (child.DeclaringSyntaxReferences.Any(sr => sr.GetLocation() == syntax.GetLocation()))
                {
                    return child;
                }
            }
            return null;
        }
^
        protected override void CompleteInitializingSymbol(DiagnosticBag diagnostics, CancellationToken cancellationToken)
        {
        }
^
        protected override ImmutableArray<Symbol> CompleteCreatingChildSymbols(DiagnosticBag diagnostics, CancellationToken cancellationToken)
        {
            return SourceSymbolImplementation.MakeChildSymbols(this, nameof(ChildSymbols), diagnostics, cancellationToken);
        }
^
        protected override void CompleteImports(SourceLocation locationOpt, DiagnosticBag diagnostics, CancellationToken cancellationToken)
        {
            SourceSymbolImplementation.CompleteImports(this, locationOpt, diagnostics, cancellationToken);
        }
^
        protected override string CompleteSymbolProperty_Name(DiagnosticBag diagnostics, CancellationToken cancellationToken)
        {
            return SourceSymbolImplementation.AssignSymbolPropertyValue<string>(this, nameof(Name), diagnostics, cancellationToken);
        }
^
        [loop (part:symbol.CompletionParts where part.GenerateCompleteMethod)]
        protected override [part.CompleteMethodReturnType] [part.CompleteMethodName]([part.CompleteMethodParamList])
        {
            [if (part is SymbolPropertyGenerationInfo)]
                [var prop = (SymbolPropertyGenerationInfo)part]
                [if (prop.IsCollection)]
            return SourceSymbolImplementation.AssignSymbolPropertyValues<[prop.ItemType]>(this, nameof([prop.Name]), diagnostics, cancellationToken);
                [else]
            return SourceSymbolImplementation.AssignSymbolPropertyValue<[prop.Type]>(this, nameof([prop.Name]), diagnostics, cancellationToken);
                [end if]
            [end if]
        }
        [end loop]
^
        protected override void CompleteNonSymbolProperties(SourceLocation locationOpt, DiagnosticBag diagnostics, CancellationToken cancellationToken)
        {
            SourceSymbolImplementation.AssignNonSymbolProperties(this, diagnostics, cancellationToken);
        }
^
	}
}
end template

template GenerateVisitor(string namespaceName, IEnumerable<SymbolGenerationInfo> symbols)
using Microsoft.CodeAnalysis;
using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Symbols;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Text;
using System.Threading;

namespace [namespaceName]
{
	public interface ISymbolVisitor
	{
        [loop (symbol: symbols)]
        void Visit([symbol.Name] symbol);
        [end loop]
	}
^
	public interface ISymbolVisitor<TResult>
	{
        [loop (symbol: symbols)]
        TResult Visit([symbol.Name] symbol);
        [end loop]
	}
^
	public interface ISymbolVisitor<TArgument, TResult>
	{
        [loop (symbol: symbols)]
        TResult Visit([symbol.Name] symbol, TArgument argument);
        [end loop]
	}
}
end template

