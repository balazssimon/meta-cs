namespace MetaDslx.CodeAnalysis.Symbols
{
    abstract symbol Symbol
    {
        LanguageSymbolKind Kind;

        string Name;
        string MetadataName;
        bool CanBeReferencedByName;
        LexicalSortKey GetLexicalSortKey();

        Symbol ContainingSymbol;
        AssemblySymbol ContainingAssembly;
        ModuleSymbol ContainingModule;
        LanguageCompilation DeclaringCompilation;

        ImmutableArray<Location> Locations;
        ImmutableArray<AttributeData> GetAttributes();
    }

    abstract symbol DeclaredSymbol : Symbol
    {
        init(ContainingDeclaration, MergedDeclaration);
    
        DeclaredSymbol ContainingDeclaration;
        NamedTypeSymbol ContainingType;
        NamespaceSymbol ContainingNamespace;

        MergedDeclaration MergedDeclaration;
        ImmutableArray<SyntaxReference> DeclaringSyntaxReferences;
        Accessibility DeclaredAccessibility;

        Symbol OriginalDefinition;
        bool IsDefinition;
        Symbol ConstructedFrom;

        bool IsStatic;
        bool IsVirtual;
        bool IsOverride;
        bool IsAbstract;
        bool IsSealed;
        bool IsExtern;
        bool IsImplicitlyDeclared;
    }

    abstract symbol AssemblySymbol : Symbol
    {
    }

    abstract symbol NonMissingAssemblySymbol : AssemblySymbol
    {
    }

    abstract symbol MetadataOrSourceAssemblySymbol : NonMissingAssemblySymbol
    {
    }

    symbol MissingAssemblySymbol : AssemblySymbol
    {
    }

    symbol MissingCorLibrarySymbol : MissingAssemblySymbol
    {
    }

    abstract symbol ModuleSymbol : Symbol
    {
    }

    symbol MissingModuleSymbol : ModuleSymbol
    {
    }

    symbol MissingModuleSymbolWithName : MissingModuleSymbol
    {
    }

    abstract symbol NamespaceOrTypeSymbol : DeclaredSymbol
    {
    }

    abstract symbol NamespaceSymbol : NamespaceOrTypeSymbol
    {
    }

    symbol MergedNamespaceSymbol : NamespaceSymbol
    {
    }

    symbol MissingNamespaceSymbol : NamespaceSymbol
    {
    }

    abstract symbol TypeSymbol : NamespaceOrTypeSymbol
    {
    }

    abstract symbol ErrorTypeSymbol : NamedTypeSymbol
    {
    }

    abstract symbol MissingMetadataTypeSymbol : ErrorTypeSymbol
    {
    }

    symbol UnsupportedSymbol : Symbol, IMetaErrorSymbol
    {
    }

    abstract symbol MemberSymbol : DeclaredSymbol
    {
    }

    abstract symbol MethodSymbol : MemberSymbol
    {
    }

    symbol DiscardSymbol : Symbol
    {
    }
    
    
    // ================================================
    
    symbol CSharpAssemblySymbol : NonMissingAssemblySymbol
    {
    }
    
    symbol CSharpModuleSymbol : NonMissingModuleSymbol
    {
    }
    
    symbol CSharpNamespaceSymbol : NamespaceSymbol
    {
    }
    
    symbol CSharpNamedTypeSymbol : NamedTypeSymbol
    {
    }

    // ================================================

    symbol MetaModuleSymbol : NonMissingModuleSymbol
    {
    }

    symbol MetaNamespaceSymbol : NamespaceSymbol
    {
    }

    symbol MetaGlobalNamespaceSymbol : NamespaceSymbol
    {
    }

    symbol MetaNamedTypeSymbol : NamedTypeSymbol
    {
    }

    symbol MetaMemberSymbol : MemberSymbol
    {
    }
    
    // ================================================

    symbol SourceAssemblySymbol : MetadataOrSourceAssemblySymbol
    {
    }

    symbol SourceModuleSymbol : NonMissingModuleSymbol
    {
    }

    symbol SourceNamespaceSymbol : NamespaceSymbol
    {
    }

    abstract symbol SourceMemberContainerTypeSymbol : NamedTypeSymbol
    {
    }

    symbol SourceNamedTypeSymbol : SourceMemberContainerTypeSymbol
    {
    }

    symbol SourceAnonymousTypeSymbol : SourceNamedTypeSymbol
    {
    }    
    
    symbol ImplicitNamedTypeSymbol : SourceMemberContainerTypeSymbol
    {
    }

    symbol DynamicTypeSymbol : TypeSymbol
    {
    }

    symbol SourceMemberSymbol : MemberSymbol
    {
    }
    
    symbol AliasSymbol : Symbol
    {
    }
}


namespace MetaDslx.CodeAnalysis.Binding.Binders
{
    binder Binder
    {
    }

    binder BuckStopsHereBinder : Binder
    {
    }

    binder class HostObjectModelBinder : Binder
    {
    }

    binder ValueBinder : Binder
    {
    }
    
    binder EnumValueBinder : ValueBinder
    {
    }

    binder SymbolDefBinder : Binder
    {
    }

    binder SymbolUseBinder : Binder
    {
    }

    binder AttributeBinder : SymbolUseBinder
    {
    }
    
    binder SpecialSymbolBinder : Binder
    {
    }

    binder InContainerBinder : Binder
    {
    }

    binder ScopeBinder : Binder
    {
    }

    binder LocalScopeBinder : Binder
    {
    }
    
    binder PropertyBinder : Binder
    {
    }

    binder NameBinder : Binder
    {
    }

    binder QualifierBinder : Binder
    {
    }

    binder IdentifierBinder : Binder
    {
    }
    
    binder CustomBinder : Binder
    {
    }    
}

