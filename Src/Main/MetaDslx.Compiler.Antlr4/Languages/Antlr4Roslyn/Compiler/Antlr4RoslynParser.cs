//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\l505bhqd.rid\Antlr4RoslynParser.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Antlr4Roslyn.Compiler {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class Antlr4RoslynParser : Parser {
	public const int
		TOKEN_REF=1, RULE_REF=2, LEXER_CHAR_SET=3, LINE_COMMENT=4, INT=5, STRING_LITERAL=6, 
		UNTERMINATED_STRING_LITERAL=7, BEGIN_ARGUMENT=8, BEGIN_ACTION=9, OPTIONS=10, 
		TOKENS=11, CHANNELS=12, IMPORT=13, FRAGMENT=14, LEXER=15, PARSER=16, GRAMMAR=17, 
		PROTECTED=18, PUBLIC=19, PRIVATE=20, RETURNS=21, LOCALS=22, THROWS=23, 
		CATCH=24, FINALLY=25, MODE=26, TRUE=27, FALSE=28, NULL=29, COLON=30, COLONCOLON=31, 
		COMMA=32, SEMI=33, LPAREN=34, RPAREN=35, LBRACE=36, RBRACE=37, RARROW=38, 
		LT=39, GT=40, ASSIGN=41, QUESTION=42, STAR=43, PLUS_ASSIGN=44, PLUS=45, 
		OR=46, DOLLAR=47, RANGE=48, DOT=49, AT=50, POUND=51, NOT=52, ID=53, WS=54, 
		ERRCHAR=55, END_ARGUMENT=56, UNTERMINATED_ARGUMENT=57, ARGUMENT_CONTENT=58, 
		END_ACTION=59, UNTERMINATED_ACTION=60, ACTION_CONTENT=61, UNTERMINATED_CHAR_SET=62, 
		DOC_COMMENT=63, BLOCK_COMMENT=64, DOC_COMMENT_STAR=65;
	public const int
		RULE_grammarSpec = 0, RULE_grammarType = 1, RULE_prequelConstruct = 2, 
		RULE_optionsSpec = 3, RULE_option = 4, RULE_optionValue = 5, RULE_delegateGrammars = 6, 
		RULE_delegateGrammar = 7, RULE_tokensSpec = 8, RULE_channelsSpec = 9, 
		RULE_idList = 10, RULE_annotatedIdentifier = 11, RULE_action = 12, RULE_actionScopeName = 13, 
		RULE_actionBlock = 14, RULE_argActionBlock = 15, RULE_modeSpec = 16, RULE_rules = 17, 
		RULE_ruleSpec = 18, RULE_parserRuleSpec = 19, RULE_exceptionGroup = 20, 
		RULE_exceptionHandler = 21, RULE_finallyClause = 22, RULE_rulePrequel = 23, 
		RULE_ruleReturns = 24, RULE_throwsSpec = 25, RULE_localsSpec = 26, RULE_ruleAction = 27, 
		RULE_ruleModifiers = 28, RULE_ruleModifier = 29, RULE_ruleBlock = 30, 
		RULE_ruleAltList = 31, RULE_labeledAlt = 32, RULE_lexerRuleSpec = 33, 
		RULE_lexerRuleBlock = 34, RULE_lexerAltList = 35, RULE_lexerAlt = 36, 
		RULE_lexerElements = 37, RULE_lexerElement = 38, RULE_labeledLexerElement = 39, 
		RULE_lexerBlock = 40, RULE_lexerCommands = 41, RULE_lexerCommand = 42, 
		RULE_lexerCommandName = 43, RULE_lexerCommandExpr = 44, RULE_altList = 45, 
		RULE_alternative = 46, RULE_element = 47, RULE_labeledElement = 48, RULE_ebnf = 49, 
		RULE_blockSuffix = 50, RULE_ebnfSuffix = 51, RULE_lexerAtom = 52, RULE_atom = 53, 
		RULE_notSet = 54, RULE_blockSet = 55, RULE_setElement = 56, RULE_block = 57, 
		RULE_ruleref = 58, RULE_characterRange = 59, RULE_terminal = 60, RULE_elementOptions = 61, 
		RULE_elementOption = 62, RULE_identifier = 63, RULE_annotation = 64, RULE_annotationBody = 65, 
		RULE_annotationAttributeList = 66, RULE_annotationAttribute = 67, RULE_expressionList = 68, 
		RULE_qualifiedName = 69, RULE_expression = 70, RULE_literal = 71, RULE_annotationIdentifier = 72, 
		RULE_boolLiteral = 73, RULE_nullLiteral = 74;
	public static readonly string[] ruleNames = {
		"grammarSpec", "grammarType", "prequelConstruct", "optionsSpec", "option", 
		"optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec", "channelsSpec", 
		"idList", "annotatedIdentifier", "action", "actionScopeName", "actionBlock", 
		"argActionBlock", "modeSpec", "rules", "ruleSpec", "parserRuleSpec", "exceptionGroup", 
		"exceptionHandler", "finallyClause", "rulePrequel", "ruleReturns", "throwsSpec", 
		"localsSpec", "ruleAction", "ruleModifiers", "ruleModifier", "ruleBlock", 
		"ruleAltList", "labeledAlt", "lexerRuleSpec", "lexerRuleBlock", "lexerAltList", 
		"lexerAlt", "lexerElements", "lexerElement", "labeledLexerElement", "lexerBlock", 
		"lexerCommands", "lexerCommand", "lexerCommandName", "lexerCommandExpr", 
		"altList", "alternative", "element", "labeledElement", "ebnf", "blockSuffix", 
		"ebnfSuffix", "lexerAtom", "atom", "notSet", "blockSet", "setElement", 
		"block", "ruleref", "characterRange", "terminal", "elementOptions", "elementOption", 
		"identifier", "annotation", "annotationBody", "annotationAttributeList", 
		"annotationAttribute", "expressionList", "qualifiedName", "expression", 
		"literal", "annotationIdentifier", "boolLiteral", "nullLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'options'", 
		"'tokens'", "'channels'", "'import'", "'fragment'", "'lexer'", "'parser'", 
		"'grammar'", "'protected'", "'public'", "'private'", "'returns'", "'locals'", 
		"'throws'", "'catch'", "'finally'", "'mode'", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "LINE_COMMENT", "INT", 
		"STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", "BEGIN_ARGUMENT", "BEGIN_ACTION", 
		"OPTIONS", "TOKENS", "CHANNELS", "IMPORT", "FRAGMENT", "LEXER", "PARSER", 
		"GRAMMAR", "PROTECTED", "PUBLIC", "PRIVATE", "RETURNS", "LOCALS", "THROWS", 
		"CATCH", "FINALLY", "MODE", "TRUE", "FALSE", "NULL", "COLON", "COLONCOLON", 
		"COMMA", "SEMI", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RARROW", "LT", 
		"GT", "ASSIGN", "QUESTION", "STAR", "PLUS_ASSIGN", "PLUS", "OR", "DOLLAR", 
		"RANGE", "DOT", "AT", "POUND", "NOT", "ID", "WS", "ERRCHAR", "END_ARGUMENT", 
		"UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "END_ACTION", "UNTERMINATED_ACTION", 
		"ACTION_CONTENT", "UNTERMINATED_CHAR_SET", "DOC_COMMENT", "BLOCK_COMMENT", 
		"DOC_COMMENT_STAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Antlr4RoslynParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Antlr4RoslynParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GrammarSpecContext : ParserRuleContext {
		public GrammarTypeContext grammarType() {
			return GetRuleContext<GrammarTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(Antlr4RoslynParser.Eof, 0); }
		public ITerminalNode[] DOC_COMMENT() { return GetTokens(Antlr4RoslynParser.DOC_COMMENT); }
		public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(Antlr4RoslynParser.DOC_COMMENT, i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PrequelConstructContext[] prequelConstruct() {
			return GetRuleContexts<PrequelConstructContext>();
		}
		public PrequelConstructContext prequelConstruct(int i) {
			return GetRuleContext<PrequelConstructContext>(i);
		}
		public ModeSpecContext[] modeSpec() {
			return GetRuleContexts<ModeSpecContext>();
		}
		public ModeSpecContext modeSpec(int i) {
			return GetRuleContext<ModeSpecContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterGrammarSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitGrammarSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarSpecContext grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 150; Match(DOC_COMMENT);
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 156; annotation();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 162; grammarType();
			State = 163; identifier();
			State = 164; Match(SEMI);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << TOKENS) | (1L << CHANNELS) | (1L << IMPORT) | (1L << AT))) != 0)) {
				{
				{
				State = 165; prequelConstruct();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 171; rules();
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MODE || _la==DOLLAR) {
				{
				{
				State = 172; modeSpec();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 178; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarTypeContext : ParserRuleContext {
		public ITerminalNode LEXER() { return GetToken(Antlr4RoslynParser.LEXER, 0); }
		public ITerminalNode GRAMMAR() { return GetToken(Antlr4RoslynParser.GRAMMAR, 0); }
		public ITerminalNode PARSER() { return GetToken(Antlr4RoslynParser.PARSER, 0); }
		public GrammarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterGrammarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitGrammarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarTypeContext grammarType() {
		GrammarTypeContext _localctx = new GrammarTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			switch (TokenStream.La(1)) {
			case LEXER:
				{
				State = 180; Match(LEXER);
				State = 181; Match(GRAMMAR);
				}
				break;
			case PARSER:
				{
				State = 182; Match(PARSER);
				State = 183; Match(GRAMMAR);
				}
				break;
			case GRAMMAR:
				{
				State = 184; Match(GRAMMAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrequelConstructContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public DelegateGrammarsContext delegateGrammars() {
			return GetRuleContext<DelegateGrammarsContext>(0);
		}
		public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		public ChannelsSpecContext channelsSpec() {
			return GetRuleContext<ChannelsSpecContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public PrequelConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prequelConstruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterPrequelConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitPrequelConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrequelConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrequelConstructContext prequelConstruct() {
		PrequelConstructContext _localctx = new PrequelConstructContext(Context, State);
		EnterRule(_localctx, 4, RULE_prequelConstruct);
		try {
			State = 192;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187; optionsSpec();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; delegateGrammars();
				}
				break;
			case TOKENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 189; tokensSpec();
				}
				break;
			case CHANNELS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 190; channelsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 191; action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		public ITerminalNode OPTIONS() { return GetToken(Antlr4RoslynParser.OPTIONS, 0); }
		public ITerminalNode LBRACE() { return GetToken(Antlr4RoslynParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Antlr4RoslynParser.RBRACE, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(OPTIONS);
			State = 195; Match(LBRACE);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 196; option();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 202; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; identifier();
			State = 205; Match(ASSIGN);
			State = 206; optionValue();
			State = 207; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(Antlr4RoslynParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Antlr4RoslynParser.DOT, i);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_optionValue);
		int _la;
		try {
			State = 219;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; identifier();
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOT) {
					{
					{
					State = 210; Match(DOT);
					State = 211; identifier();
					}
					}
					State = 216;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case INT:
			case STRING_LITERAL:
			case TRUE:
			case FALSE:
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217; literal();
				}
				break;
			case BEGIN_ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 218; actionBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarsContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(Antlr4RoslynParser.IMPORT, 0); }
		public DelegateGrammarContext[] delegateGrammar() {
			return GetRuleContexts<DelegateGrammarContext>();
		}
		public DelegateGrammarContext delegateGrammar(int i) {
			return GetRuleContext<DelegateGrammarContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarsContext delegateGrammars() {
		DelegateGrammarsContext _localctx = new DelegateGrammarsContext(Context, State);
		EnterRule(_localctx, 12, RULE_delegateGrammars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(IMPORT);
			State = 222; delegateGrammar();
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 223; Match(COMMA);
				State = 224; delegateGrammar();
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 230; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarContext delegateGrammar() {
		DelegateGrammarContext _localctx = new DelegateGrammarContext(Context, State);
		EnterRule(_localctx, 14, RULE_delegateGrammar);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; identifier();
				State = 233; Match(ASSIGN);
				State = 234; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		public ITerminalNode TOKENS() { return GetToken(Antlr4RoslynParser.TOKENS, 0); }
		public ITerminalNode LBRACE() { return GetToken(Antlr4RoslynParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Antlr4RoslynParser.RBRACE, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokensSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 16, RULE_tokensSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(TOKENS);
			State = 240; Match(LBRACE);
			State = 242;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << DOLLAR))) != 0)) {
				{
				State = 241; idList();
				}
			}

			State = 244; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelsSpecContext : ParserRuleContext {
		public ITerminalNode CHANNELS() { return GetToken(Antlr4RoslynParser.CHANNELS, 0); }
		public ITerminalNode LBRACE() { return GetToken(Antlr4RoslynParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Antlr4RoslynParser.RBRACE, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public ChannelsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterChannelsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitChannelsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelsSpecContext channelsSpec() {
		ChannelsSpecContext _localctx = new ChannelsSpecContext(Context, State);
		EnterRule(_localctx, 18, RULE_channelsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(CHANNELS);
			State = 247; Match(LBRACE);
			State = 249;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << DOLLAR))) != 0)) {
				{
				State = 248; idList();
				}
			}

			State = 251; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		public AnnotatedIdentifierContext[] annotatedIdentifier() {
			return GetRuleContexts<AnnotatedIdentifierContext>();
		}
		public AnnotatedIdentifierContext annotatedIdentifier(int i) {
			return GetRuleContext<AnnotatedIdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitIdList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 20, RULE_idList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; annotatedIdentifier();
			State = 258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 254; Match(COMMA);
					State = 255; annotatedIdentifier();
					}
					} 
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 262;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 261; Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotatedIdentifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotatedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotatedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotatedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotatedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotatedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotatedIdentifierContext annotatedIdentifier() {
		AnnotatedIdentifierContext _localctx = new AnnotatedIdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_annotatedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 264; annotation();
				}
				}
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 270; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(Antlr4RoslynParser.AT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(Antlr4RoslynParser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 24, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(AT);
			State = 276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 273; actionScopeName();
				State = 274; Match(COLONCOLON);
				}
				break;
			}
			State = 278; identifier();
			State = 279; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LEXER() { return GetToken(Antlr4RoslynParser.LEXER, 0); }
		public ITerminalNode PARSER() { return GetToken(Antlr4RoslynParser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionScopeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_actionScopeName);
		try {
			State = 284;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281; identifier();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282; Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 283; Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : ParserRuleContext {
		public ITerminalNode BEGIN_ACTION() { return GetToken(Antlr4RoslynParser.BEGIN_ACTION, 0); }
		public ITerminalNode END_ACTION() { return GetToken(Antlr4RoslynParser.END_ACTION, 0); }
		public ITerminalNode[] ACTION_CONTENT() { return GetTokens(Antlr4RoslynParser.ACTION_CONTENT); }
		public ITerminalNode ACTION_CONTENT(int i) {
			return GetToken(Antlr4RoslynParser.ACTION_CONTENT, i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(BEGIN_ACTION);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ACTION_CONTENT) {
				{
				{
				State = 287; Match(ACTION_CONTENT);
				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 293; Match(END_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgActionBlockContext : ParserRuleContext {
		public ITerminalNode BEGIN_ARGUMENT() { return GetToken(Antlr4RoslynParser.BEGIN_ARGUMENT, 0); }
		public ITerminalNode END_ARGUMENT() { return GetToken(Antlr4RoslynParser.END_ARGUMENT, 0); }
		public ITerminalNode[] ARGUMENT_CONTENT() { return GetTokens(Antlr4RoslynParser.ARGUMENT_CONTENT); }
		public ITerminalNode ARGUMENT_CONTENT(int i) {
			return GetToken(Antlr4RoslynParser.ARGUMENT_CONTENT, i);
		}
		public ArgActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argActionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterArgActionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitArgActionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgActionBlockContext argActionBlock() {
		ArgActionBlockContext _localctx = new ArgActionBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_argActionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(BEGIN_ARGUMENT);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ARGUMENT_CONTENT) {
				{
				{
				State = 296; Match(ARGUMENT_CONTENT);
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 302; Match(END_ARGUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecContext : ParserRuleContext {
		public ITerminalNode MODE() { return GetToken(Antlr4RoslynParser.MODE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LexerRuleSpecContext[] lexerRuleSpec() {
			return GetRuleContexts<LexerRuleSpecContext>();
		}
		public LexerRuleSpecContext lexerRuleSpec(int i) {
			return GetRuleContext<LexerRuleSpecContext>(i);
		}
		public ModeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterModeSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitModeSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecContext modeSpec() {
		ModeSpecContext _localctx = new ModeSpecContext(Context, State);
		EnterRule(_localctx, 32, RULE_modeSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 304; annotation();
				}
				}
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 310; Match(MODE);
			State = 311; identifier();
			State = 312; Match(SEMI);
			State = 316;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 313; lexerRuleSpec();
					}
					} 
				}
				State = 318;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleSpecContext[] ruleSpec() {
			return GetRuleContexts<RuleSpecContext>();
		}
		public RuleSpecContext ruleSpec(int i) {
			return GetRuleContext<RuleSpecContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 34, RULE_rules);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 319; ruleSpec();
					}
					} 
				}
				State = 324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSpecContext : ParserRuleContext {
		public ParserRuleSpecContext parserRuleSpec() {
			return GetRuleContext<ParserRuleSpecContext>(0);
		}
		public LexerRuleSpecContext lexerRuleSpec() {
			return GetRuleContext<LexerRuleSpecContext>(0);
		}
		public RuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSpecContext ruleSpec() {
		RuleSpecContext _localctx = new RuleSpecContext(Context, State);
		EnterRule(_localctx, 36, RULE_ruleSpec);
		try {
			State = 327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325; parserRuleSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326; lexerRuleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleSpecContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(Antlr4RoslynParser.RULE_REF, 0); }
		public ITerminalNode COLON() { return GetToken(Antlr4RoslynParser.COLON, 0); }
		public RuleBlockContext ruleBlock() {
			return GetRuleContext<RuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		public ITerminalNode[] DOC_COMMENT() { return GetTokens(Antlr4RoslynParser.DOC_COMMENT); }
		public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(Antlr4RoslynParser.DOC_COMMENT, i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public RuleModifiersContext ruleModifiers() {
			return GetRuleContext<RuleModifiersContext>(0);
		}
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public RuleReturnsContext ruleReturns() {
			return GetRuleContext<RuleReturnsContext>(0);
		}
		public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		public LocalsSpecContext localsSpec() {
			return GetRuleContext<LocalsSpecContext>(0);
		}
		public RulePrequelContext[] rulePrequel() {
			return GetRuleContexts<RulePrequelContext>();
		}
		public RulePrequelContext rulePrequel(int i) {
			return GetRuleContext<RulePrequelContext>(i);
		}
		public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterParserRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitParserRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleSpecContext parserRuleSpec() {
		ParserRuleSpecContext _localctx = new ParserRuleSpecContext(Context, State);
		EnterRule(_localctx, 38, RULE_parserRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 329; Match(DOC_COMMENT);
				}
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 335; annotation();
				}
				}
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 342;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
				{
				State = 341; ruleModifiers();
				}
			}

			State = 344; Match(RULE_REF);
			State = 346;
			_la = TokenStream.La(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 345; argActionBlock();
				}
			}

			State = 349;
			_la = TokenStream.La(1);
			if (_la==RETURNS) {
				{
				State = 348; ruleReturns();
				}
			}

			State = 352;
			_la = TokenStream.La(1);
			if (_la==THROWS) {
				{
				State = 351; throwsSpec();
				}
			}

			State = 355;
			_la = TokenStream.La(1);
			if (_la==LOCALS) {
				{
				State = 354; localsSpec();
				}
			}

			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OPTIONS || _la==AT) {
				{
				{
				State = 357; rulePrequel();
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 363; Match(COLON);
			State = 364; ruleBlock();
			State = 365; Match(SEMI);
			State = 366; exceptionGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 40, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CATCH) {
				{
				{
				State = 368; exceptionHandler();
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 375;
			_la = TokenStream.La(1);
			if (_la==FINALLY) {
				{
				State = 374; finallyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(Antlr4RoslynParser.CATCH, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 42, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(CATCH);
			State = 378; argActionBlock();
			State = 379; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(Antlr4RoslynParser.FINALLY, 0); }
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 44, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(FINALLY);
			State = 382; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulePrequelContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext ruleAction() {
			return GetRuleContext<RuleActionContext>(0);
		}
		public RulePrequelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulePrequel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRulePrequel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRulePrequel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulePrequel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulePrequelContext rulePrequel() {
		RulePrequelContext _localctx = new RulePrequelContext(Context, State);
		EnterRule(_localctx, 46, RULE_rulePrequel);
		try {
			State = 386;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384; optionsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 385; ruleAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleReturnsContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(Antlr4RoslynParser.RETURNS, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public RuleReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleReturns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleReturns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleReturns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleReturnsContext ruleReturns() {
		RuleReturnsContext _localctx = new RuleReturnsContext(Context, State);
		EnterRule(_localctx, 48, RULE_ruleReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(RETURNS);
			State = 389; argActionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		public ITerminalNode THROWS() { return GetToken(Antlr4RoslynParser.THROWS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 50, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(THROWS);
			State = 392; identifier();
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 393; Match(COMMA);
				State = 394; identifier();
				}
				}
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalsSpecContext : ParserRuleContext {
		public ITerminalNode LOCALS() { return GetToken(Antlr4RoslynParser.LOCALS, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public LocalsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLocalsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLocalsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalsSpecContext localsSpec() {
		LocalsSpecContext _localctx = new LocalsSpecContext(Context, State);
		EnterRule(_localctx, 52, RULE_localsSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(LOCALS);
			State = 401; argActionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(Antlr4RoslynParser.AT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 54, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(AT);
			State = 404; identifier();
			State = 405; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifiersContext : ParserRuleContext {
		public RuleModifierContext[] ruleModifier() {
			return GetRuleContexts<RuleModifierContext>();
		}
		public RuleModifierContext ruleModifier(int i) {
			return GetRuleContext<RuleModifierContext>(i);
		}
		public RuleModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifiersContext ruleModifiers() {
		RuleModifiersContext _localctx = new RuleModifiersContext(Context, State);
		EnterRule(_localctx, 56, RULE_ruleModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 407; ruleModifier();
				}
				}
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(Antlr4RoslynParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(Antlr4RoslynParser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(Antlr4RoslynParser.PROTECTED, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(Antlr4RoslynParser.FRAGMENT, 0); }
		public RuleModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifierContext ruleModifier() {
		RuleModifierContext _localctx = new RuleModifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_ruleModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleBlockContext : ParserRuleContext {
		public RuleAltListContext ruleAltList() {
			return GetRuleContext<RuleAltListContext>(0);
		}
		public RuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleBlockContext ruleBlock() {
		RuleBlockContext _localctx = new RuleBlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_ruleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; ruleAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleAltListContext : ParserRuleContext {
		public LabeledAltContext[] labeledAlt() {
			return GetRuleContexts<LabeledAltContext>();
		}
		public LabeledAltContext labeledAlt(int i) {
			return GetRuleContext<LabeledAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(Antlr4RoslynParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(Antlr4RoslynParser.OR, i);
		}
		public RuleAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleAltListContext ruleAltList() {
		RuleAltListContext _localctx = new RuleAltListContext(Context, State);
		EnterRule(_localctx, 62, RULE_ruleAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; labeledAlt();
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 417; Match(OR);
				State = 418; labeledAlt();
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledAltContext : ParserRuleContext {
		public AlternativeContext alternative() {
			return GetRuleContext<AlternativeContext>(0);
		}
		public ITerminalNode POUND() { return GetToken(Antlr4RoslynParser.POUND, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LabeledAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLabeledAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLabeledAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledAltContext labeledAlt() {
		LabeledAltContext _localctx = new LabeledAltContext(Context, State);
		EnterRule(_localctx, 64, RULE_labeledAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; alternative();
			State = 433;
			_la = TokenStream.La(1);
			if (_la==POUND) {
				{
				State = 425; Match(POUND);
				State = 426; identifier();
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 427; annotation();
					}
					}
					State = 432;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleSpecContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(Antlr4RoslynParser.TOKEN_REF, 0); }
		public ITerminalNode COLON() { return GetToken(Antlr4RoslynParser.COLON, 0); }
		public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public ITerminalNode[] DOC_COMMENT() { return GetTokens(Antlr4RoslynParser.DOC_COMMENT); }
		public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(Antlr4RoslynParser.DOC_COMMENT, i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode FRAGMENT() { return GetToken(Antlr4RoslynParser.FRAGMENT, 0); }
		public LexerRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleSpecContext lexerRuleSpec() {
		LexerRuleSpecContext _localctx = new LexerRuleSpecContext(Context, State);
		EnterRule(_localctx, 66, RULE_lexerRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 435; Match(DOC_COMMENT);
				}
				}
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 441; annotation();
				}
				}
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 448;
			_la = TokenStream.La(1);
			if (_la==FRAGMENT) {
				{
				State = 447; Match(FRAGMENT);
				}
			}

			State = 450; Match(TOKEN_REF);
			State = 451; Match(COLON);
			State = 452; lexerRuleBlock();
			State = 453; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockContext lexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_lexerRuleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; lexerAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltListContext : ParserRuleContext {
		public LexerAltContext[] lexerAlt() {
			return GetRuleContexts<LexerAltContext>();
		}
		public LexerAltContext lexerAlt(int i) {
			return GetRuleContext<LexerAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(Antlr4RoslynParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(Antlr4RoslynParser.OR, i);
		}
		public LexerAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltListContext lexerAltList() {
		LexerAltListContext _localctx = new LexerAltListContext(Context, State);
		EnterRule(_localctx, 70, RULE_lexerAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; lexerAlt();
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 458; Match(OR);
				State = 459; lexerAlt();
				}
				}
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltContext : ParserRuleContext {
		public LexerElementsContext lexerElements() {
			return GetRuleContext<LexerElementsContext>(0);
		}
		public LexerCommandsContext lexerCommands() {
			return GetRuleContext<LexerCommandsContext>(0);
		}
		public LexerAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltContext lexerAlt() {
		LexerAltContext _localctx = new LexerAltContext(Context, State);
		EnterRule(_localctx, 72, RULE_lexerAlt);
		int _la;
		try {
			State = 470;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case LPAREN:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465; lexerElements();
				State = 467;
				_la = TokenStream.La(1);
				if (_la==RARROW) {
					{
					State = 466; lexerCommands();
					}
				}

				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementsContext : ParserRuleContext {
		public LexerElementContext[] lexerElement() {
			return GetRuleContexts<LexerElementContext>();
		}
		public LexerElementContext lexerElement(int i) {
			return GetRuleContext<LexerElementContext>(i);
		}
		public LexerElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementsContext lexerElements() {
		LexerElementsContext _localctx = new LexerElementsContext(Context, State);
		EnterRule(_localctx, 74, RULE_lexerElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 472; lexerElement();
				}
				}
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LEXER_CHAR_SET) | (1L << STRING_LITERAL) | (1L << BEGIN_ACTION) | (1L << LPAREN) | (1L << DOT) | (1L << NOT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementContext : ParserRuleContext {
		public LabeledLexerElementContext labeledLexerElement() {
			return GetRuleContext<LabeledLexerElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ITerminalNode QUESTION() { return GetToken(Antlr4RoslynParser.QUESTION, 0); }
		public LexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementContext lexerElement() {
		LexerElementContext _localctx = new LexerElementContext(Context, State);
		EnterRule(_localctx, 76, RULE_lexerElement);
		int _la;
		try {
			State = 493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 477; labeledLexerElement();
				State = 479;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 478; ebnfSuffix();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 481; lexerAtom();
				State = 483;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 482; ebnfSuffix();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 485; lexerBlock();
				State = 487;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 486; ebnfSuffix();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 489; actionBlock();
				State = 491;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 490; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledLexerElementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(Antlr4RoslynParser.PLUS_ASSIGN, 0); }
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledLexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledLexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLabeledLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLabeledLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledLexerElementContext labeledLexerElement() {
		LabeledLexerElementContext _localctx = new LabeledLexerElementContext(Context, State);
		EnterRule(_localctx, 78, RULE_labeledLexerElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; identifier();
			State = 496;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 499;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case DOT:
			case NOT:
				{
				State = 497; lexerAtom();
				}
				break;
			case LPAREN:
				{
				State = 498; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerBlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public LexerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerBlockContext lexerBlock() {
		LexerBlockContext _localctx = new LexerBlockContext(Context, State);
		EnterRule(_localctx, 80, RULE_lexerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(LPAREN);
			State = 502; lexerAltList();
			State = 503; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandsContext : ParserRuleContext {
		public ITerminalNode RARROW() { return GetToken(Antlr4RoslynParser.RARROW, 0); }
		public LexerCommandContext[] lexerCommand() {
			return GetRuleContexts<LexerCommandContext>();
		}
		public LexerCommandContext lexerCommand(int i) {
			return GetRuleContext<LexerCommandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public LexerCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandsContext lexerCommands() {
		LexerCommandsContext _localctx = new LexerCommandsContext(Context, State);
		EnterRule(_localctx, 82, RULE_lexerCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(RARROW);
			State = 506; lexerCommand();
			State = 511;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 507; Match(COMMA);
				State = 508; lexerCommand();
				}
				}
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandContext : ParserRuleContext {
		public LexerCommandNameContext lexerCommandName() {
			return GetRuleContext<LexerCommandNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public LexerCommandExprContext lexerCommandExpr() {
			return GetRuleContext<LexerCommandExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public LexerCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandContext lexerCommand() {
		LexerCommandContext _localctx = new LexerCommandContext(Context, State);
		EnterRule(_localctx, 84, RULE_lexerCommand);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 514; lexerCommandName();
				State = 515; Match(LPAREN);
				State = 516; lexerCommandExpr();
				State = 517; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519; lexerCommandName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(Antlr4RoslynParser.MODE, 0); }
		public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandNameContext lexerCommandName() {
		LexerCommandNameContext _localctx = new LexerCommandNameContext(Context, State);
		EnterRule(_localctx, 86, RULE_lexerCommandName);
		try {
			State = 524;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 522; identifier();
				}
				break;
			case MODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 523; Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandExprContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode INT() { return GetToken(Antlr4RoslynParser.INT, 0); }
		public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandExprContext lexerCommandExpr() {
		LexerCommandExprContext _localctx = new LexerCommandExprContext(Context, State);
		EnterRule(_localctx, 88, RULE_lexerCommandExpr);
		try {
			State = 528;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 526; identifier();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(Antlr4RoslynParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(Antlr4RoslynParser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 90, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; alternative();
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 531; Match(OR);
				State = 532; alternative();
				}
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 92, RULE_alternative);
		int _la;
		try {
			State = 547;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case LPAREN:
			case LT:
			case DOLLAR:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 539;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 538; elementOptions();
					}
				}

				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 541; element();
					}
					}
					State = 544;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << STRING_LITERAL) | (1L << BEGIN_ACTION) | (1L << LPAREN) | (1L << DOLLAR) | (1L << DOT) | (1L << NOT))) != 0) );
				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
			case POUND:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public LabeledElementContext labeledElement() {
			return GetRuleContext<LabeledElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ITerminalNode QUESTION() { return GetToken(Antlr4RoslynParser.QUESTION, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 94, RULE_element);
		int _la;
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 552;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 549; annotation();
					}
					}
					State = 554;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 555; labeledElement();
				State = 558;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 556; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOLLAR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 563;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 560; annotation();
					}
					}
					State = 565;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 566; atom();
				State = 569;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 567; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOLLAR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 571; ebnf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 572; actionBlock();
				State = 574;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 573; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledElementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(Antlr4RoslynParser.PLUS_ASSIGN, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLabeledElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLabeledElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledElementContext labeledElement() {
		LabeledElementContext _localctx = new LabeledElementContext(Context, State);
		EnterRule(_localctx, 96, RULE_labeledElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578; identifier();
			State = 579;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 582;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case STRING_LITERAL:
			case DOT:
			case NOT:
				{
				State = 580; atom();
				}
				break;
			case LPAREN:
				{
				State = 581; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockSuffixContext blockSuffix() {
			return GetRuleContext<BlockSuffixContext>(0);
		}
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 98, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584; block();
			State = 586;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
				{
				State = 585; blockSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSuffixContext : ParserRuleContext {
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public BlockSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterBlockSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitBlockSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSuffixContext blockSuffix() {
		BlockSuffixContext _localctx = new BlockSuffixContext(Context, State);
		EnterRule(_localctx, 100, RULE_blockSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588; ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		public ITerminalNode[] QUESTION() { return GetTokens(Antlr4RoslynParser.QUESTION); }
		public ITerminalNode QUESTION(int i) {
			return GetToken(Antlr4RoslynParser.QUESTION, i);
		}
		public ITerminalNode STAR() { return GetToken(Antlr4RoslynParser.STAR, 0); }
		public ITerminalNode PLUS() { return GetToken(Antlr4RoslynParser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnfSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 102, RULE_ebnfSuffix);
		int _la;
		try {
			State = 602;
			switch (TokenStream.La(1)) {
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 590; Match(QUESTION);
				State = 592;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 591; Match(QUESTION);
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 594; Match(STAR);
				State = 596;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 595; Match(QUESTION);
					}
				}

				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 598; Match(PLUS);
				State = 600;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 599; Match(QUESTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAtomContext : ParserRuleContext {
		public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(Antlr4RoslynParser.LEXER_CHAR_SET, 0); }
		public ITerminalNode DOT() { return GetToken(Antlr4RoslynParser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public LexerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAtomContext lexerAtom() {
		LexerAtomContext _localctx = new LexerAtomContext(Context, State);
		EnterRule(_localctx, 104, RULE_lexerAtom);
		int _la;
		try {
			State = 612;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 604; characterRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 605; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 606; notSet();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 607; Match(LEXER_CHAR_SET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 608; Match(DOT);
				State = 610;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 609; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public RulerefContext ruleref() {
			return GetRuleContext<RulerefContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Antlr4RoslynParser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 106, RULE_atom);
		int _la;
		try {
			State = 622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614; characterRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 616; ruleref();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 617; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 618; Match(DOT);
				State = 620;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 619; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(Antlr4RoslynParser.NOT, 0); }
		public SetElementContext setElement() {
			return GetRuleContext<SetElementContext>(0);
		}
		public BlockSetContext blockSet() {
			return GetRuleContext<BlockSetContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 108, RULE_notSet);
		try {
			State = 628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624; Match(NOT);
				State = 625; setElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 626; Match(NOT);
				State = 627; blockSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSetContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public SetElementContext[] setElement() {
			return GetRuleContexts<SetElementContext>();
		}
		public SetElementContext setElement(int i) {
			return GetRuleContext<SetElementContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public ITerminalNode[] OR() { return GetTokens(Antlr4RoslynParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(Antlr4RoslynParser.OR, i);
		}
		public BlockSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterBlockSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitBlockSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSetContext blockSet() {
		BlockSetContext _localctx = new BlockSetContext(Context, State);
		EnterRule(_localctx, 110, RULE_blockSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630; Match(LPAREN);
			State = 631; setElement();
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 632; Match(OR);
				State = 633; setElement();
				}
				}
				State = 638;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 639; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetElementContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(Antlr4RoslynParser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(Antlr4RoslynParser.STRING_LITERAL, 0); }
		public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(Antlr4RoslynParser.LEXER_CHAR_SET, 0); }
		public SetElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterSetElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitSetElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetElementContext setElement() {
		SetElementContext _localctx = new SetElementContext(Context, State);
		EnterRule(_localctx, 112, RULE_setElement);
		int _la;
		try {
			State = 651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 641; Match(TOKEN_REF);
				State = 643;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 642; elementOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 645; Match(STRING_LITERAL);
				State = 647;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 646; elementOptions();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 649; characterRange();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 650; Match(LEXER_CHAR_SET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(Antlr4RoslynParser.COLON, 0); }
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 114, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653; Match(LPAREN);
			State = 664;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << COLON) | (1L << AT))) != 0)) {
				{
				State = 655;
				_la = TokenStream.La(1);
				if (_la==OPTIONS) {
					{
					State = 654; optionsSpec();
					}
				}

				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AT) {
					{
					{
					State = 657; ruleAction();
					}
					}
					State = 662;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 663; Match(COLON);
				}
			}

			State = 666; altList();
			State = 667; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulerefContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(Antlr4RoslynParser.RULE_REF, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public RulerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulerefContext ruleref() {
		RulerefContext _localctx = new RulerefContext(Context, State);
		EnterRule(_localctx, 116, RULE_ruleref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669; Match(RULE_REF);
			State = 671;
			_la = TokenStream.La(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 670; argActionBlock();
				}
			}

			State = 674;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 673; elementOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterRangeContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(Antlr4RoslynParser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(Antlr4RoslynParser.STRING_LITERAL, i);
		}
		public ITerminalNode RANGE() { return GetToken(Antlr4RoslynParser.RANGE, 0); }
		public CharacterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterCharacterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitCharacterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterRangeContext characterRange() {
		CharacterRangeContext _localctx = new CharacterRangeContext(Context, State);
		EnterRule(_localctx, 118, RULE_characterRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676; Match(STRING_LITERAL);
			State = 677; Match(RANGE);
			State = 678; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(Antlr4RoslynParser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(Antlr4RoslynParser.STRING_LITERAL, 0); }
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 120, RULE_terminal);
		int _la;
		try {
			State = 688;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 680; Match(TOKEN_REF);
				State = 682;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 681; elementOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 684; Match(STRING_LITERAL);
				State = 686;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 685; elementOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(Antlr4RoslynParser.LT, 0); }
		public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		public ITerminalNode GT() { return GetToken(Antlr4RoslynParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 122, RULE_elementOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690; Match(LT);
			State = 691; elementOption();
			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 692; Match(COMMA);
				State = 693; elementOption();
				}
				}
				State = 698;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 699; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(Antlr4RoslynParser.STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 124, RULE_elementOption);
		try {
			State = 708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 701; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 702; identifier();
				State = 703; Match(ASSIGN);
				State = 706;
				switch (TokenStream.La(1)) {
				case TOKEN_REF:
				case RULE_REF:
					{
					State = 704; identifier();
					}
					break;
				case STRING_LITERAL:
					{
					State = 705; Match(STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(Antlr4RoslynParser.RULE_REF, 0); }
		public ITerminalNode TOKEN_REF() { return GetToken(Antlr4RoslynParser.TOKEN_REF, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 126, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			_la = TokenStream.La(1);
			if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(Antlr4RoslynParser.DOLLAR, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 128, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; Match(DOLLAR);
			State = 713; qualifiedName();
			State = 715;
			_la = TokenStream.La(1);
			if (_la==LPAREN) {
				{
				State = 714; annotationBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationBodyContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AnnotationAttributeListContext annotationAttributeList() {
			return GetRuleContext<AnnotationAttributeListContext>(0);
		}
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(Context, State);
		EnterRule(_localctx, 130, RULE_annotationBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717; Match(LPAREN);
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 718; expression();
				}
				break;
			case 2:
				{
				State = 719; expressionList();
				}
				break;
			case 3:
				{
				State = 720; annotationAttributeList();
				}
				break;
			}
			State = 723; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeListContext : ParserRuleContext {
		public AnnotationAttributeContext[] annotationAttribute() {
			return GetRuleContexts<AnnotationAttributeContext>();
		}
		public AnnotationAttributeContext annotationAttribute(int i) {
			return GetRuleContext<AnnotationAttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public AnnotationAttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttributeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttributeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeListContext annotationAttributeList() {
		AnnotationAttributeListContext _localctx = new AnnotationAttributeListContext(Context, State);
		EnterRule(_localctx, 132, RULE_annotationAttributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725; annotationAttribute();
			State = 730;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 726; Match(COMMA);
				State = 727; annotationAttribute();
				}
				}
				State = 732;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeContext : ParserRuleContext {
		public AnnotationIdentifierContext annotationIdentifier() {
			return GetRuleContext<AnnotationIdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AnnotationAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeContext annotationAttribute() {
		AnnotationAttributeContext _localctx = new AnnotationAttributeContext(Context, State);
		EnterRule(_localctx, 134, RULE_annotationAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733; annotationIdentifier();
			State = 734; Match(ASSIGN);
			State = 737;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case INT:
			case STRING_LITERAL:
			case TRUE:
			case FALSE:
			case NULL:
			case ID:
				{
				State = 735; expression();
				}
				break;
			case LPAREN:
				{
				State = 736; expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 136, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; Match(LPAREN);
			State = 740; expression();
			State = 745;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 741; Match(COMMA);
				State = 742; expression();
				}
				}
				State = 747;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 748; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public AnnotationIdentifierContext[] annotationIdentifier() {
			return GetRuleContexts<AnnotationIdentifierContext>();
		}
		public AnnotationIdentifierContext annotationIdentifier(int i) {
			return GetRuleContext<AnnotationIdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(Antlr4RoslynParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Antlr4RoslynParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 138, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 750; annotationIdentifier();
			State = 755;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 751; Match(DOT);
					State = 752; annotationIdentifier();
					}
					} 
				}
				State = 757;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 140, RULE_expression);
		try {
			State = 760;
			switch (TokenStream.La(1)) {
			case INT:
			case STRING_LITERAL:
			case TRUE:
			case FALSE:
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 758; literal();
				}
				break;
			case TOKEN_REF:
			case RULE_REF:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 759; qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public ITerminalNode INT() { return GetToken(Antlr4RoslynParser.INT, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(Antlr4RoslynParser.STRING_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 142, RULE_literal);
		try {
			State = 766;
			switch (TokenStream.La(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 762; nullLiteral();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 763; boolLiteral();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 764; Match(INT);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 765; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationIdentifierContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(Antlr4RoslynParser.TOKEN_REF, 0); }
		public ITerminalNode RULE_REF() { return GetToken(Antlr4RoslynParser.RULE_REF, 0); }
		public ITerminalNode ID() { return GetToken(Antlr4RoslynParser.ID, 0); }
		public AnnotationIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotationIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotationIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationIdentifierContext annotationIdentifier() {
		AnnotationIdentifierContext _localctx = new AnnotationIdentifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_annotationIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(Antlr4RoslynParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(Antlr4RoslynParser.FALSE, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 146, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			_la = TokenStream.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(Antlr4RoslynParser.NULL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 148, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x43");
		sb.Append("\x309\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x3\x2\a\x2");
		sb.Append("\x9A\n\x2\f\x2\xE\x2\x9D\v\x2\x3\x2\a\x2\xA0\n\x2\f\x2\xE\x2");
		sb.Append("\xA3\v\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\xA9\n\x2\f\x2\xE\x2\xAC");
		sb.Append("\v\x2\x3\x2\x3\x2\a\x2\xB0\n\x2\f\x2\xE\x2\xB3\v\x2\x3\x2\x3");
		sb.Append("\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xBC\n\x3\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x5\x4\xC3\n\x4\x3\x5\x3\x5\x3\x5\a\x5\xC8");
		sb.Append("\n\x5\f\x5\xE\x5\xCB\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\a\x3\a\x3\a\a\a\xD7\n\a\f\a\xE\a\xDA\v\a\x3\a\x3\a");
		sb.Append("\x5\a\xDE\n\a\x3\b\x3\b\x3\b\x3\b\a\b\xE4\n\b\f\b\xE\b\xE7\v");
		sb.Append("\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xF0\n\t\x3\n\x3\n");
		sb.Append("\x3\n\x5\n\xF5\n\n\x3\n\x3\n\x3\v\x3\v\x3\v\x5\v\xFC\n\v\x3");
		sb.Append("\v\x3\v\x3\f\x3\f\x3\f\a\f\x103\n\f\f\f\xE\f\x106\v\f\x3\f\x5");
		sb.Append("\f\x109\n\f\x3\r\a\r\x10C\n\r\f\r\xE\r\x10F\v\r\x3\r\x3\r\x3");
		sb.Append("\xE\x3\xE\x3\xE\x3\xE\x5\xE\x117\n\xE\x3\xE\x3\xE\x3\xE\x3\xF");
		sb.Append("\x3\xF\x3\xF\x5\xF\x11F\n\xF\x3\x10\x3\x10\a\x10\x123\n\x10");
		sb.Append("\f\x10\xE\x10\x126\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\a\x11\x12C");
		sb.Append("\n\x11\f\x11\xE\x11\x12F\v\x11\x3\x11\x3\x11\x3\x12\a\x12\x134");
		sb.Append("\n\x12\f\x12\xE\x12\x137\v\x12\x3\x12\x3\x12\x3\x12\x3\x12\a");
		sb.Append("\x12\x13D\n\x12\f\x12\xE\x12\x140\v\x12\x3\x13\a\x13\x143\n");
		sb.Append("\x13\f\x13\xE\x13\x146\v\x13\x3\x14\x3\x14\x5\x14\x14A\n\x14");
		sb.Append("\x3\x15\a\x15\x14D\n\x15\f\x15\xE\x15\x150\v\x15\x3\x15\a\x15");
		sb.Append("\x153\n\x15\f\x15\xE\x15\x156\v\x15\x3\x15\x5\x15\x159\n\x15");
		sb.Append("\x3\x15\x3\x15\x5\x15\x15D\n\x15\x3\x15\x5\x15\x160\n\x15\x3");
		sb.Append("\x15\x5\x15\x163\n\x15\x3\x15\x5\x15\x166\n\x15\x3\x15\a\x15");
		sb.Append("\x169\n\x15\f\x15\xE\x15\x16C\v\x15\x3\x15\x3\x15\x3\x15\x3");
		sb.Append("\x15\x3\x15\x3\x16\a\x16\x174\n\x16\f\x16\xE\x16\x177\v\x16");
		sb.Append("\x3\x16\x5\x16\x17A\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18");
		sb.Append("\x3\x18\x3\x18\x3\x19\x3\x19\x5\x19\x185\n\x19\x3\x1A\x3\x1A");
		sb.Append("\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x18E\n\x1B\f\x1B\xE");
		sb.Append("\x1B\x191\v\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3");
		sb.Append("\x1D\x3\x1E\x6\x1E\x19B\n\x1E\r\x1E\xE\x1E\x19C\x3\x1F\x3\x1F");
		sb.Append("\x3 \x3 \x3!\x3!\x3!\a!\x1A6\n!\f!\xE!\x1A9\v!\x3\"\x3\"\x3");
		sb.Append("\"\x3\"\a\"\x1AF\n\"\f\"\xE\"\x1B2\v\"\x5\"\x1B4\n\"\x3#\a#");
		sb.Append("\x1B7\n#\f#\xE#\x1BA\v#\x3#\a#\x1BD\n#\f#\xE#\x1C0\v#\x3#\x5");
		sb.Append("#\x1C3\n#\x3#\x3#\x3#\x3#\x3#\x3$\x3$\x3%\x3%\x3%\a%\x1CF\n");
		sb.Append("%\f%\xE%\x1D2\v%\x3&\x3&\x5&\x1D6\n&\x3&\x5&\x1D9\n&\x3\'\x6");
		sb.Append("\'\x1DC\n\'\r\'\xE\'\x1DD\x3(\x3(\x5(\x1E2\n(\x3(\x3(\x5(\x1E6");
		sb.Append("\n(\x3(\x3(\x5(\x1EA\n(\x3(\x3(\x5(\x1EE\n(\x5(\x1F0\n(\x3)");
		sb.Append("\x3)\x3)\x3)\x5)\x1F6\n)\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x3+\a+");
		sb.Append("\x200\n+\f+\xE+\x203\v+\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x20B\n,");
		sb.Append("\x3-\x3-\x5-\x20F\n-\x3.\x3.\x5.\x213\n.\x3/\x3/\x3/\a/\x218");
		sb.Append("\n/\f/\xE/\x21B\v/\x3\x30\x5\x30\x21E\n\x30\x3\x30\x6\x30\x221");
		sb.Append("\n\x30\r\x30\xE\x30\x222\x3\x30\x5\x30\x226\n\x30\x3\x31\a\x31");
		sb.Append("\x229\n\x31\f\x31\xE\x31\x22C\v\x31\x3\x31\x3\x31\x3\x31\x5");
		sb.Append("\x31\x231\n\x31\x3\x31\a\x31\x234\n\x31\f\x31\xE\x31\x237\v");
		sb.Append("\x31\x3\x31\x3\x31\x3\x31\x5\x31\x23C\n\x31\x3\x31\x3\x31\x3");
		sb.Append("\x31\x5\x31\x241\n\x31\x5\x31\x243\n\x31\x3\x32\x3\x32\x3\x32");
		sb.Append("\x3\x32\x5\x32\x249\n\x32\x3\x33\x3\x33\x5\x33\x24D\n\x33\x3");
		sb.Append("\x34\x3\x34\x3\x35\x3\x35\x5\x35\x253\n\x35\x3\x35\x3\x35\x5");
		sb.Append("\x35\x257\n\x35\x3\x35\x3\x35\x5\x35\x25B\n\x35\x5\x35\x25D");
		sb.Append("\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x265");
		sb.Append("\n\x36\x5\x36\x267\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37");
		sb.Append("\x3\x37\x5\x37\x26F\n\x37\x5\x37\x271\n\x37\x3\x38\x3\x38\x3");
		sb.Append("\x38\x3\x38\x5\x38\x277\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\a");
		sb.Append("\x39\x27D\n\x39\f\x39\xE\x39\x280\v\x39\x3\x39\x3\x39\x3:\x3");
		sb.Append(":\x5:\x286\n:\x3:\x3:\x5:\x28A\n:\x3:\x3:\x5:\x28E\n:\x3;\x3");
		sb.Append(";\x5;\x292\n;\x3;\a;\x295\n;\f;\xE;\x298\v;\x3;\x5;\x29B\n;");
		sb.Append("\x3;\x3;\x3;\x3<\x3<\x5<\x2A2\n<\x3<\x5<\x2A5\n<\x3=\x3=\x3");
		sb.Append("=\x3=\x3>\x3>\x5>\x2AD\n>\x3>\x3>\x5>\x2B1\n>\x5>\x2B3\n>\x3");
		sb.Append("?\x3?\x3?\x3?\a?\x2B9\n?\f?\xE?\x2BC\v?\x3?\x3?\x3@\x3@\x3@");
		sb.Append("\x3@\x3@\x5@\x2C5\n@\x5@\x2C7\n@\x3\x41\x3\x41\x3\x42\x3\x42");
		sb.Append("\x3\x42\x5\x42\x2CE\n\x42\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43");
		sb.Append("\x2D4\n\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\a\x44\x2DB\n");
		sb.Append("\x44\f\x44\xE\x44\x2DE\v\x44\x3\x45\x3\x45\x3\x45\x3\x45\x5");
		sb.Append("\x45\x2E4\n\x45\x3\x46\x3\x46\x3\x46\x3\x46\a\x46\x2EA\n\x46");
		sb.Append("\f\x46\xE\x46\x2ED\v\x46\x3\x46\x3\x46\x3G\x3G\x3G\aG\x2F4\n");
		sb.Append("G\fG\xEG\x2F7\vG\x3H\x3H\x5H\x2FB\nH\x3I\x3I\x3I\x3I\x5I\x301");
		sb.Append("\nI\x3J\x3J\x3K\x3K\x3L\x3L\x3L\x2\x2M\x2\x4\x6\b\n\f\xE\x10");
		sb.Append("\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<");
		sb.Append(">@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82");
		sb.Append("\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x2\a\x4\x2\x10\x10");
		sb.Append("\x14\x16\x4\x2++..\x3\x2\x3\x4\x4\x2\x3\x4\x37\x37\x3\x2\x1D");
		sb.Append("\x1E\x338\x2\x9B\x3\x2\x2\x2\x4\xBB\x3\x2\x2\x2\x6\xC2\x3\x2");
		sb.Append("\x2\x2\b\xC4\x3\x2\x2\x2\n\xCE\x3\x2\x2\x2\f\xDD\x3\x2\x2\x2");
		sb.Append("\xE\xDF\x3\x2\x2\x2\x10\xEF\x3\x2\x2\x2\x12\xF1\x3\x2\x2\x2");
		sb.Append("\x14\xF8\x3\x2\x2\x2\x16\xFF\x3\x2\x2\x2\x18\x10D\x3\x2\x2\x2");
		sb.Append("\x1A\x112\x3\x2\x2\x2\x1C\x11E\x3\x2\x2\x2\x1E\x120\x3\x2\x2");
		sb.Append("\x2 \x129\x3\x2\x2\x2\"\x135\x3\x2\x2\x2$\x144\x3\x2\x2\x2&");
		sb.Append("\x149\x3\x2\x2\x2(\x14E\x3\x2\x2\x2*\x175\x3\x2\x2\x2,\x17B");
		sb.Append("\x3\x2\x2\x2.\x17F\x3\x2\x2\x2\x30\x184\x3\x2\x2\x2\x32\x186");
		sb.Append("\x3\x2\x2\x2\x34\x189\x3\x2\x2\x2\x36\x192\x3\x2\x2\x2\x38\x195");
		sb.Append("\x3\x2\x2\x2:\x19A\x3\x2\x2\x2<\x19E\x3\x2\x2\x2>\x1A0\x3\x2");
		sb.Append("\x2\x2@\x1A2\x3\x2\x2\x2\x42\x1AA\x3\x2\x2\x2\x44\x1B8\x3\x2");
		sb.Append("\x2\x2\x46\x1C9\x3\x2\x2\x2H\x1CB\x3\x2\x2\x2J\x1D8\x3\x2\x2");
		sb.Append("\x2L\x1DB\x3\x2\x2\x2N\x1EF\x3\x2\x2\x2P\x1F1\x3\x2\x2\x2R\x1F7");
		sb.Append("\x3\x2\x2\x2T\x1FB\x3\x2\x2\x2V\x20A\x3\x2\x2\x2X\x20E\x3\x2");
		sb.Append("\x2\x2Z\x212\x3\x2\x2\x2\\\x214\x3\x2\x2\x2^\x225\x3\x2\x2\x2");
		sb.Append("`\x242\x3\x2\x2\x2\x62\x244\x3\x2\x2\x2\x64\x24A\x3\x2\x2\x2");
		sb.Append("\x66\x24E\x3\x2\x2\x2h\x25C\x3\x2\x2\x2j\x266\x3\x2\x2\x2l\x270");
		sb.Append("\x3\x2\x2\x2n\x276\x3\x2\x2\x2p\x278\x3\x2\x2\x2r\x28D\x3\x2");
		sb.Append("\x2\x2t\x28F\x3\x2\x2\x2v\x29F\x3\x2\x2\x2x\x2A6\x3\x2\x2\x2");
		sb.Append("z\x2B2\x3\x2\x2\x2|\x2B4\x3\x2\x2\x2~\x2C6\x3\x2\x2\x2\x80\x2C8");
		sb.Append("\x3\x2\x2\x2\x82\x2CA\x3\x2\x2\x2\x84\x2CF\x3\x2\x2\x2\x86\x2D7");
		sb.Append("\x3\x2\x2\x2\x88\x2DF\x3\x2\x2\x2\x8A\x2E5\x3\x2\x2\x2\x8C\x2F0");
		sb.Append("\x3\x2\x2\x2\x8E\x2FA\x3\x2\x2\x2\x90\x300\x3\x2\x2\x2\x92\x302");
		sb.Append("\x3\x2\x2\x2\x94\x304\x3\x2\x2\x2\x96\x306\x3\x2\x2\x2\x98\x9A");
		sb.Append("\a\x41\x2\x2\x99\x98\x3\x2\x2\x2\x9A\x9D\x3\x2\x2\x2\x9B\x99");
		sb.Append("\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\xA1\x3\x2\x2\x2\x9D\x9B");
		sb.Append("\x3\x2\x2\x2\x9E\xA0\x5\x82\x42\x2\x9F\x9E\x3\x2\x2\x2\xA0\xA3");
		sb.Append("\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4");
		sb.Append("\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA4\xA5\x5\x4\x3\x2\xA5\xA6");
		sb.Append("\x5\x80\x41\x2\xA6\xAA\a#\x2\x2\xA7\xA9\x5\x6\x4\x2\xA8\xA7");
		sb.Append("\x3\x2\x2\x2\xA9\xAC\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB");
		sb.Append("\x3\x2\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xB1");
		sb.Append("\x5$\x13\x2\xAE\xB0\x5\"\x12\x2\xAF\xAE\x3\x2\x2\x2\xB0\xB3");
		sb.Append("\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB4");
		sb.Append("\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB4\xB5\a\x2\x2\x3\xB5\x3\x3");
		sb.Append("\x2\x2\x2\xB6\xB7\a\x11\x2\x2\xB7\xBC\a\x13\x2\x2\xB8\xB9\a");
		sb.Append("\x12\x2\x2\xB9\xBC\a\x13\x2\x2\xBA\xBC\a\x13\x2\x2\xBB\xB6\x3");
		sb.Append("\x2\x2\x2\xBB\xB8\x3\x2\x2\x2\xBB\xBA\x3\x2\x2\x2\xBC\x5\x3");
		sb.Append("\x2\x2\x2\xBD\xC3\x5\b\x5\x2\xBE\xC3\x5\xE\b\x2\xBF\xC3\x5\x12");
		sb.Append("\n\x2\xC0\xC3\x5\x14\v\x2\xC1\xC3\x5\x1A\xE\x2\xC2\xBD\x3\x2");
		sb.Append("\x2\x2\xC2\xBE\x3\x2\x2\x2\xC2\xBF\x3\x2\x2\x2\xC2\xC0\x3\x2");
		sb.Append("\x2\x2\xC2\xC1\x3\x2\x2\x2\xC3\a\x3\x2\x2\x2\xC4\xC5\a\f\x2");
		sb.Append("\x2\xC5\xC9\a&\x2\x2\xC6\xC8\x5\n\x6\x2\xC7\xC6\x3\x2\x2\x2");
		sb.Append("\xC8\xCB\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2");
		sb.Append("\xCA\xCC\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCC\xCD\a\'\x2\x2\xCD");
		sb.Append("\t\x3\x2\x2\x2\xCE\xCF\x5\x80\x41\x2\xCF\xD0\a+\x2\x2\xD0\xD1");
		sb.Append("\x5\f\a\x2\xD1\xD2\a#\x2\x2\xD2\v\x3\x2\x2\x2\xD3\xD8\x5\x80");
		sb.Append("\x41\x2\xD4\xD5\a\x33\x2\x2\xD5\xD7\x5\x80\x41\x2\xD6\xD4\x3");
		sb.Append("\x2\x2\x2\xD7\xDA\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD9\x3");
		sb.Append("\x2\x2\x2\xD9\xDE\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDB\xDE\x5");
		sb.Append("\x90I\x2\xDC\xDE\x5\x1E\x10\x2\xDD\xD3\x3\x2\x2\x2\xDD\xDB\x3");
		sb.Append("\x2\x2\x2\xDD\xDC\x3\x2\x2\x2\xDE\r\x3\x2\x2\x2\xDF\xE0\a\xF");
		sb.Append("\x2\x2\xE0\xE5\x5\x10\t\x2\xE1\xE2\a\"\x2\x2\xE2\xE4\x5\x10");
		sb.Append("\t\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE7\x3\x2\x2\x2\xE5\xE3\x3\x2");
		sb.Append("\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE8\x3\x2\x2\x2\xE7\xE5\x3\x2");
		sb.Append("\x2\x2\xE8\xE9\a#\x2\x2\xE9\xF\x3\x2\x2\x2\xEA\xEB\x5\x80\x41");
		sb.Append("\x2\xEB\xEC\a+\x2\x2\xEC\xED\x5\x80\x41\x2\xED\xF0\x3\x2\x2");
		sb.Append("\x2\xEE\xF0\x5\x80\x41\x2\xEF\xEA\x3\x2\x2\x2\xEF\xEE\x3\x2");
		sb.Append("\x2\x2\xF0\x11\x3\x2\x2\x2\xF1\xF2\a\r\x2\x2\xF2\xF4\a&\x2\x2");
		sb.Append("\xF3\xF5\x5\x16\f\x2\xF4\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2");
		sb.Append("\xF5\xF6\x3\x2\x2\x2\xF6\xF7\a\'\x2\x2\xF7\x13\x3\x2\x2\x2\xF8");
		sb.Append("\xF9\a\xE\x2\x2\xF9\xFB\a&\x2\x2\xFA\xFC\x5\x16\f\x2\xFB\xFA");
		sb.Append("\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFE");
		sb.Append("\a\'\x2\x2\xFE\x15\x3\x2\x2\x2\xFF\x104\x5\x18\r\x2\x100\x101");
		sb.Append("\a\"\x2\x2\x101\x103\x5\x18\r\x2\x102\x100\x3\x2\x2\x2\x103");
		sb.Append("\x106\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2");
		sb.Append("\x105\x108\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x107\x109\a\"\x2");
		sb.Append("\x2\x108\x107\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x17\x3");
		sb.Append("\x2\x2\x2\x10A\x10C\x5\x82\x42\x2\x10B\x10A\x3\x2\x2\x2\x10C");
		sb.Append("\x10F\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2");
		sb.Append("\x10E\x110\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x110\x111\x5\x80");
		sb.Append("\x41\x2\x111\x19\x3\x2\x2\x2\x112\x116\a\x34\x2\x2\x113\x114");
		sb.Append("\x5\x1C\xF\x2\x114\x115\a!\x2\x2\x115\x117\x3\x2\x2\x2\x116");
		sb.Append("\x113\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2");
		sb.Append("\x118\x119\x5\x80\x41\x2\x119\x11A\x5\x1E\x10\x2\x11A\x1B\x3");
		sb.Append("\x2\x2\x2\x11B\x11F\x5\x80\x41\x2\x11C\x11F\a\x11\x2\x2\x11D");
		sb.Append("\x11F\a\x12\x2\x2\x11E\x11B\x3\x2\x2\x2\x11E\x11C\x3\x2\x2\x2");
		sb.Append("\x11E\x11D\x3\x2\x2\x2\x11F\x1D\x3\x2\x2\x2\x120\x124\a\v\x2");
		sb.Append("\x2\x121\x123\a?\x2\x2\x122\x121\x3\x2\x2\x2\x123\x126\x3\x2");
		sb.Append("\x2\x2\x124\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x127");
		sb.Append("\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x127\x128\a=\x2\x2\x128\x1F");
		sb.Append("\x3\x2\x2\x2\x129\x12D\a\n\x2\x2\x12A\x12C\a<\x2\x2\x12B\x12A");
		sb.Append("\x3\x2\x2\x2\x12C\x12F\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12D");
		sb.Append("\x12E\x3\x2\x2\x2\x12E\x130\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2");
		sb.Append("\x130\x131\a:\x2\x2\x131!\x3\x2\x2\x2\x132\x134\x5\x82\x42\x2");
		sb.Append("\x133\x132\x3\x2\x2\x2\x134\x137\x3\x2\x2\x2\x135\x133\x3\x2");
		sb.Append("\x2\x2\x135\x136\x3\x2\x2\x2\x136\x138\x3\x2\x2\x2\x137\x135");
		sb.Append("\x3\x2\x2\x2\x138\x139\a\x1C\x2\x2\x139\x13A\x5\x80\x41\x2\x13A");
		sb.Append("\x13E\a#\x2\x2\x13B\x13D\x5\x44#\x2\x13C\x13B\x3\x2\x2\x2\x13D");
		sb.Append("\x140\x3\x2\x2\x2\x13E\x13C\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2");
		sb.Append("\x13F#\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x141\x143\x5&\x14\x2");
		sb.Append("\x142\x141\x3\x2\x2\x2\x143\x146\x3\x2\x2\x2\x144\x142\x3\x2");
		sb.Append("\x2\x2\x144\x145\x3\x2\x2\x2\x145%\x3\x2\x2\x2\x146\x144\x3");
		sb.Append("\x2\x2\x2\x147\x14A\x5(\x15\x2\x148\x14A\x5\x44#\x2\x149\x147");
		sb.Append("\x3\x2\x2\x2\x149\x148\x3\x2\x2\x2\x14A\'\x3\x2\x2\x2\x14B\x14D");
		sb.Append("\a\x41\x2\x2\x14C\x14B\x3\x2\x2\x2\x14D\x150\x3\x2\x2\x2\x14E");
		sb.Append("\x14C\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x154\x3\x2\x2\x2");
		sb.Append("\x150\x14E\x3\x2\x2\x2\x151\x153\x5\x82\x42\x2\x152\x151\x3");
		sb.Append("\x2\x2\x2\x153\x156\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x154\x155");
		sb.Append("\x3\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2\x157");
		sb.Append("\x159\x5:\x1E\x2\x158\x157\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2");
		sb.Append("\x159\x15A\x3\x2\x2\x2\x15A\x15C\a\x4\x2\x2\x15B\x15D\x5 \x11");
		sb.Append("\x2\x15C\x15B\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15F\x3");
		sb.Append("\x2\x2\x2\x15E\x160\x5\x32\x1A\x2\x15F\x15E\x3\x2\x2\x2\x15F");
		sb.Append("\x160\x3\x2\x2\x2\x160\x162\x3\x2\x2\x2\x161\x163\x5\x34\x1B");
		sb.Append("\x2\x162\x161\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163\x165\x3");
		sb.Append("\x2\x2\x2\x164\x166\x5\x36\x1C\x2\x165\x164\x3\x2\x2\x2\x165");
		sb.Append("\x166\x3\x2\x2\x2\x166\x16A\x3\x2\x2\x2\x167\x169\x5\x30\x19");
		sb.Append("\x2\x168\x167\x3\x2\x2\x2\x169\x16C\x3\x2\x2\x2\x16A\x168\x3");
		sb.Append("\x2\x2\x2\x16A\x16B\x3\x2\x2\x2\x16B\x16D\x3\x2\x2\x2\x16C\x16A");
		sb.Append("\x3\x2\x2\x2\x16D\x16E\a \x2\x2\x16E\x16F\x5> \x2\x16F\x170");
		sb.Append("\a#\x2\x2\x170\x171\x5*\x16\x2\x171)\x3\x2\x2\x2\x172\x174\x5");
		sb.Append(",\x17\x2\x173\x172\x3\x2\x2\x2\x174\x177\x3\x2\x2\x2\x175\x173");
		sb.Append("\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176\x179\x3\x2\x2\x2\x177");
		sb.Append("\x175\x3\x2\x2\x2\x178\x17A\x5.\x18\x2\x179\x178\x3\x2\x2\x2");
		sb.Append("\x179\x17A\x3\x2\x2\x2\x17A+\x3\x2\x2\x2\x17B\x17C\a\x1A\x2");
		sb.Append("\x2\x17C\x17D\x5 \x11\x2\x17D\x17E\x5\x1E\x10\x2\x17E-\x3\x2");
		sb.Append("\x2\x2\x17F\x180\a\x1B\x2\x2\x180\x181\x5\x1E\x10\x2\x181/\x3");
		sb.Append("\x2\x2\x2\x182\x185\x5\b\x5\x2\x183\x185\x5\x38\x1D\x2\x184");
		sb.Append("\x182\x3\x2\x2\x2\x184\x183\x3\x2\x2\x2\x185\x31\x3\x2\x2\x2");
		sb.Append("\x186\x187\a\x17\x2\x2\x187\x188\x5 \x11\x2\x188\x33\x3\x2\x2");
		sb.Append("\x2\x189\x18A\a\x19\x2\x2\x18A\x18F\x5\x80\x41\x2\x18B\x18C");
		sb.Append("\a\"\x2\x2\x18C\x18E\x5\x80\x41\x2\x18D\x18B\x3\x2\x2\x2\x18E");
		sb.Append("\x191\x3\x2\x2\x2\x18F\x18D\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2");
		sb.Append("\x190\x35\x3\x2\x2\x2\x191\x18F\x3\x2\x2\x2\x192\x193\a\x18");
		sb.Append("\x2\x2\x193\x194\x5 \x11\x2\x194\x37\x3\x2\x2\x2\x195\x196\a");
		sb.Append("\x34\x2\x2\x196\x197\x5\x80\x41\x2\x197\x198\x5\x1E\x10\x2\x198");
		sb.Append("\x39\x3\x2\x2\x2\x199\x19B\x5<\x1F\x2\x19A\x199\x3\x2\x2\x2");
		sb.Append("\x19B\x19C\x3\x2\x2\x2\x19C\x19A\x3\x2\x2\x2\x19C\x19D\x3\x2");
		sb.Append("\x2\x2\x19D;\x3\x2\x2\x2\x19E\x19F\t\x2\x2\x2\x19F=\x3\x2\x2");
		sb.Append("\x2\x1A0\x1A1\x5@!\x2\x1A1?\x3\x2\x2\x2\x1A2\x1A7\x5\x42\"\x2");
		sb.Append("\x1A3\x1A4\a\x30\x2\x2\x1A4\x1A6\x5\x42\"\x2\x1A5\x1A3\x3\x2");
		sb.Append("\x2\x2\x1A6\x1A9\x3\x2\x2\x2\x1A7\x1A5\x3\x2\x2\x2\x1A7\x1A8");
		sb.Append("\x3\x2\x2\x2\x1A8\x41\x3\x2\x2\x2\x1A9\x1A7\x3\x2\x2\x2\x1AA");
		sb.Append("\x1B3\x5^\x30\x2\x1AB\x1AC\a\x35\x2\x2\x1AC\x1B0\x5\x80\x41");
		sb.Append("\x2\x1AD\x1AF\x5\x82\x42\x2\x1AE\x1AD\x3\x2\x2\x2\x1AF\x1B2");
		sb.Append("\x3\x2\x2\x2\x1B0\x1AE\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1");
		sb.Append("\x1B4\x3\x2\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B3\x1AB\x3\x2\x2\x2");
		sb.Append("\x1B3\x1B4\x3\x2\x2\x2\x1B4\x43\x3\x2\x2\x2\x1B5\x1B7\a\x41");
		sb.Append("\x2\x2\x1B6\x1B5\x3\x2\x2\x2\x1B7\x1BA\x3\x2\x2\x2\x1B8\x1B6");
		sb.Append("\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BE\x3\x2\x2\x2\x1BA");
		sb.Append("\x1B8\x3\x2\x2\x2\x1BB\x1BD\x5\x82\x42\x2\x1BC\x1BB\x3\x2\x2");
		sb.Append("\x2\x1BD\x1C0\x3\x2\x2\x2\x1BE\x1BC\x3\x2\x2\x2\x1BE\x1BF\x3");
		sb.Append("\x2\x2\x2\x1BF\x1C2\x3\x2\x2\x2\x1C0\x1BE\x3\x2\x2\x2\x1C1\x1C3");
		sb.Append("\a\x10\x2\x2\x1C2\x1C1\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3");
		sb.Append("\x1C4\x3\x2\x2\x2\x1C4\x1C5\a\x3\x2\x2\x1C5\x1C6\a \x2\x2\x1C6");
		sb.Append("\x1C7\x5\x46$\x2\x1C7\x1C8\a#\x2\x2\x1C8\x45\x3\x2\x2\x2\x1C9");
		sb.Append("\x1CA\x5H%\x2\x1CAG\x3\x2\x2\x2\x1CB\x1D0\x5J&\x2\x1CC\x1CD");
		sb.Append("\a\x30\x2\x2\x1CD\x1CF\x5J&\x2\x1CE\x1CC\x3\x2\x2\x2\x1CF\x1D2");
		sb.Append("\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1");
		sb.Append("I\x3\x2\x2\x2\x1D2\x1D0\x3\x2\x2\x2\x1D3\x1D5\x5L\'\x2\x1D4");
		sb.Append("\x1D6\x5T+\x2\x1D5\x1D4\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6");
		sb.Append("\x1D9\x3\x2\x2\x2\x1D7\x1D9\x3\x2\x2\x2\x1D8\x1D3\x3\x2\x2\x2");
		sb.Append("\x1D8\x1D7\x3\x2\x2\x2\x1D9K\x3\x2\x2\x2\x1DA\x1DC\x5N(\x2\x1DB");
		sb.Append("\x1DA\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2");
		sb.Append("\x1DD\x1DE\x3\x2\x2\x2\x1DEM\x3\x2\x2\x2\x1DF\x1E1\x5P)\x2\x1E0");
		sb.Append("\x1E2\x5h\x35\x2\x1E1\x1E0\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2");
		sb.Append("\x1E2\x1F0\x3\x2\x2\x2\x1E3\x1E5\x5j\x36\x2\x1E4\x1E6\x5h\x35");
		sb.Append("\x2\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1F0\x3");
		sb.Append("\x2\x2\x2\x1E7\x1E9\x5R*\x2\x1E8\x1EA\x5h\x35\x2\x1E9\x1E8\x3");
		sb.Append("\x2\x2\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA\x1F0\x3\x2\x2\x2\x1EB\x1ED");
		sb.Append("\x5\x1E\x10\x2\x1EC\x1EE\a,\x2\x2\x1ED\x1EC\x3\x2\x2\x2\x1ED");
		sb.Append("\x1EE\x3\x2\x2\x2\x1EE\x1F0\x3\x2\x2\x2\x1EF\x1DF\x3\x2\x2\x2");
		sb.Append("\x1EF\x1E3\x3\x2\x2\x2\x1EF\x1E7\x3\x2\x2\x2\x1EF\x1EB\x3\x2");
		sb.Append("\x2\x2\x1F0O\x3\x2\x2\x2\x1F1\x1F2\x5\x80\x41\x2\x1F2\x1F5\t");
		sb.Append("\x3\x2\x2\x1F3\x1F6\x5j\x36\x2\x1F4\x1F6\x5t;\x2\x1F5\x1F3\x3");
		sb.Append("\x2\x2\x2\x1F5\x1F4\x3\x2\x2\x2\x1F6Q\x3\x2\x2\x2\x1F7\x1F8");
		sb.Append("\a$\x2\x2\x1F8\x1F9\x5H%\x2\x1F9\x1FA\a%\x2\x2\x1FAS\x3\x2\x2");
		sb.Append("\x2\x1FB\x1FC\a(\x2\x2\x1FC\x201\x5V,\x2\x1FD\x1FE\a\"\x2\x2");
		sb.Append("\x1FE\x200\x5V,\x2\x1FF\x1FD\x3\x2\x2\x2\x200\x203\x3\x2\x2");
		sb.Append("\x2\x201\x1FF\x3\x2\x2\x2\x201\x202\x3\x2\x2\x2\x202U\x3\x2");
		sb.Append("\x2\x2\x203\x201\x3\x2\x2\x2\x204\x205\x5X-\x2\x205\x206\a$");
		sb.Append("\x2\x2\x206\x207\x5Z.\x2\x207\x208\a%\x2\x2\x208\x20B\x3\x2");
		sb.Append("\x2\x2\x209\x20B\x5X-\x2\x20A\x204\x3\x2\x2\x2\x20A\x209\x3");
		sb.Append("\x2\x2\x2\x20BW\x3\x2\x2\x2\x20C\x20F\x5\x80\x41\x2\x20D\x20F");
		sb.Append("\a\x1C\x2\x2\x20E\x20C\x3\x2\x2\x2\x20E\x20D\x3\x2\x2\x2\x20F");
		sb.Append("Y\x3\x2\x2\x2\x210\x213\x5\x80\x41\x2\x211\x213\a\a\x2\x2\x212");
		sb.Append("\x210\x3\x2\x2\x2\x212\x211\x3\x2\x2\x2\x213[\x3\x2\x2\x2\x214");
		sb.Append("\x219\x5^\x30\x2\x215\x216\a\x30\x2\x2\x216\x218\x5^\x30\x2");
		sb.Append("\x217\x215\x3\x2\x2\x2\x218\x21B\x3\x2\x2\x2\x219\x217\x3\x2");
		sb.Append("\x2\x2\x219\x21A\x3\x2\x2\x2\x21A]\x3\x2\x2\x2\x21B\x219\x3");
		sb.Append("\x2\x2\x2\x21C\x21E\x5|?\x2\x21D\x21C\x3\x2\x2\x2\x21D\x21E");
		sb.Append("\x3\x2\x2\x2\x21E\x220\x3\x2\x2\x2\x21F\x221\x5`\x31\x2\x220");
		sb.Append("\x21F\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2\x222\x220\x3\x2\x2\x2");
		sb.Append("\x222\x223\x3\x2\x2\x2\x223\x226\x3\x2\x2\x2\x224\x226\x3\x2");
		sb.Append("\x2\x2\x225\x21D\x3\x2\x2\x2\x225\x224\x3\x2\x2\x2\x226_\x3");
		sb.Append("\x2\x2\x2\x227\x229\x5\x82\x42\x2\x228\x227\x3\x2\x2\x2\x229");
		sb.Append("\x22C\x3\x2\x2\x2\x22A\x228\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2");
		sb.Append("\x22B\x22D\x3\x2\x2\x2\x22C\x22A\x3\x2\x2\x2\x22D\x230\x5\x62");
		sb.Append("\x32\x2\x22E\x231\x5h\x35\x2\x22F\x231\x3\x2\x2\x2\x230\x22E");
		sb.Append("\x3\x2\x2\x2\x230\x22F\x3\x2\x2\x2\x231\x243\x3\x2\x2\x2\x232");
		sb.Append("\x234\x5\x82\x42\x2\x233\x232\x3\x2\x2\x2\x234\x237\x3\x2\x2");
		sb.Append("\x2\x235\x233\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2\x236\x238\x3");
		sb.Append("\x2\x2\x2\x237\x235\x3\x2\x2\x2\x238\x23B\x5l\x37\x2\x239\x23C");
		sb.Append("\x5h\x35\x2\x23A\x23C\x3\x2\x2\x2\x23B\x239\x3\x2\x2\x2\x23B");
		sb.Append("\x23A\x3\x2\x2\x2\x23C\x243\x3\x2\x2\x2\x23D\x243\x5\x64\x33");
		sb.Append("\x2\x23E\x240\x5\x1E\x10\x2\x23F\x241\a,\x2\x2\x240\x23F\x3");
		sb.Append("\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241\x243\x3\x2\x2\x2\x242\x22A");
		sb.Append("\x3\x2\x2\x2\x242\x235\x3\x2\x2\x2\x242\x23D\x3\x2\x2\x2\x242");
		sb.Append("\x23E\x3\x2\x2\x2\x243\x61\x3\x2\x2\x2\x244\x245\x5\x80\x41");
		sb.Append("\x2\x245\x248\t\x3\x2\x2\x246\x249\x5l\x37\x2\x247\x249\x5t");
		sb.Append(";\x2\x248\x246\x3\x2\x2\x2\x248\x247\x3\x2\x2\x2\x249\x63\x3");
		sb.Append("\x2\x2\x2\x24A\x24C\x5t;\x2\x24B\x24D\x5\x66\x34\x2\x24C\x24B");
		sb.Append("\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x65\x3\x2\x2\x2\x24E");
		sb.Append("\x24F\x5h\x35\x2\x24Fg\x3\x2\x2\x2\x250\x252\a,\x2\x2\x251\x253");
		sb.Append("\a,\x2\x2\x252\x251\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253\x25D");
		sb.Append("\x3\x2\x2\x2\x254\x256\a-\x2\x2\x255\x257\a,\x2\x2\x256\x255");
		sb.Append("\x3\x2\x2\x2\x256\x257\x3\x2\x2\x2\x257\x25D\x3\x2\x2\x2\x258");
		sb.Append("\x25A\a/\x2\x2\x259\x25B\a,\x2\x2\x25A\x259\x3\x2\x2\x2\x25A");
		sb.Append("\x25B\x3\x2\x2\x2\x25B\x25D\x3\x2\x2\x2\x25C\x250\x3\x2\x2\x2");
		sb.Append("\x25C\x254\x3\x2\x2\x2\x25C\x258\x3\x2\x2\x2\x25Di\x3\x2\x2");
		sb.Append("\x2\x25E\x267\x5x=\x2\x25F\x267\x5z>\x2\x260\x267\x5n\x38\x2");
		sb.Append("\x261\x267\a\x5\x2\x2\x262\x264\a\x33\x2\x2\x263\x265\x5|?\x2");
		sb.Append("\x264\x263\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x267\x3\x2");
		sb.Append("\x2\x2\x266\x25E\x3\x2\x2\x2\x266\x25F\x3\x2\x2\x2\x266\x260");
		sb.Append("\x3\x2\x2\x2\x266\x261\x3\x2\x2\x2\x266\x262\x3\x2\x2\x2\x267");
		sb.Append("k\x3\x2\x2\x2\x268\x271\x5x=\x2\x269\x271\x5z>\x2\x26A\x271");
		sb.Append("\x5v<\x2\x26B\x271\x5n\x38\x2\x26C\x26E\a\x33\x2\x2\x26D\x26F");
		sb.Append("\x5|?\x2\x26E\x26D\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x271");
		sb.Append("\x3\x2\x2\x2\x270\x268\x3\x2\x2\x2\x270\x269\x3\x2\x2\x2\x270");
		sb.Append("\x26A\x3\x2\x2\x2\x270\x26B\x3\x2\x2\x2\x270\x26C\x3\x2\x2\x2");
		sb.Append("\x271m\x3\x2\x2\x2\x272\x273\a\x36\x2\x2\x273\x277\x5r:\x2\x274");
		sb.Append("\x275\a\x36\x2\x2\x275\x277\x5p\x39\x2\x276\x272\x3\x2\x2\x2");
		sb.Append("\x276\x274\x3\x2\x2\x2\x277o\x3\x2\x2\x2\x278\x279\a$\x2\x2");
		sb.Append("\x279\x27E\x5r:\x2\x27A\x27B\a\x30\x2\x2\x27B\x27D\x5r:\x2\x27C");
		sb.Append("\x27A\x3\x2\x2\x2\x27D\x280\x3\x2\x2\x2\x27E\x27C\x3\x2\x2\x2");
		sb.Append("\x27E\x27F\x3\x2\x2\x2\x27F\x281\x3\x2\x2\x2\x280\x27E\x3\x2");
		sb.Append("\x2\x2\x281\x282\a%\x2\x2\x282q\x3\x2\x2\x2\x283\x285\a\x3\x2");
		sb.Append("\x2\x284\x286\x5|?\x2\x285\x284\x3\x2\x2\x2\x285\x286\x3\x2");
		sb.Append("\x2\x2\x286\x28E\x3\x2\x2\x2\x287\x289\a\b\x2\x2\x288\x28A\x5");
		sb.Append("|?\x2\x289\x288\x3\x2\x2\x2\x289\x28A\x3\x2\x2\x2\x28A\x28E");
		sb.Append("\x3\x2\x2\x2\x28B\x28E\x5x=\x2\x28C\x28E\a\x5\x2\x2\x28D\x283");
		sb.Append("\x3\x2\x2\x2\x28D\x287\x3\x2\x2\x2\x28D\x28B\x3\x2\x2\x2\x28D");
		sb.Append("\x28C\x3\x2\x2\x2\x28Es\x3\x2\x2\x2\x28F\x29A\a$\x2\x2\x290");
		sb.Append("\x292\x5\b\x5\x2\x291\x290\x3\x2\x2\x2\x291\x292\x3\x2\x2\x2");
		sb.Append("\x292\x296\x3\x2\x2\x2\x293\x295\x5\x38\x1D\x2\x294\x293\x3");
		sb.Append("\x2\x2\x2\x295\x298\x3\x2\x2\x2\x296\x294\x3\x2\x2\x2\x296\x297");
		sb.Append("\x3\x2\x2\x2\x297\x299\x3\x2\x2\x2\x298\x296\x3\x2\x2\x2\x299");
		sb.Append("\x29B\a \x2\x2\x29A\x291\x3\x2\x2\x2\x29A\x29B\x3\x2\x2\x2\x29B");
		sb.Append("\x29C\x3\x2\x2\x2\x29C\x29D\x5\\/\x2\x29D\x29E\a%\x2\x2\x29E");
		sb.Append("u\x3\x2\x2\x2\x29F\x2A1\a\x4\x2\x2\x2A0\x2A2\x5 \x11\x2\x2A1");
		sb.Append("\x2A0\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2A4\x3\x2\x2\x2");
		sb.Append("\x2A3\x2A5\x5|?\x2\x2A4\x2A3\x3\x2\x2\x2\x2A4\x2A5\x3\x2\x2");
		sb.Append("\x2\x2A5w\x3\x2\x2\x2\x2A6\x2A7\a\b\x2\x2\x2A7\x2A8\a\x32\x2");
		sb.Append("\x2\x2A8\x2A9\a\b\x2\x2\x2A9y\x3\x2\x2\x2\x2AA\x2AC\a\x3\x2");
		sb.Append("\x2\x2AB\x2AD\x5|?\x2\x2AC\x2AB\x3\x2\x2\x2\x2AC\x2AD\x3\x2");
		sb.Append("\x2\x2\x2AD\x2B3\x3\x2\x2\x2\x2AE\x2B0\a\b\x2\x2\x2AF\x2B1\x5");
		sb.Append("|?\x2\x2B0\x2AF\x3\x2\x2\x2\x2B0\x2B1\x3\x2\x2\x2\x2B1\x2B3");
		sb.Append("\x3\x2\x2\x2\x2B2\x2AA\x3\x2\x2\x2\x2B2\x2AE\x3\x2\x2\x2\x2B3");
		sb.Append("{\x3\x2\x2\x2\x2B4\x2B5\a)\x2\x2\x2B5\x2BA\x5~@\x2\x2B6\x2B7");
		sb.Append("\a\"\x2\x2\x2B7\x2B9\x5~@\x2\x2B8\x2B6\x3\x2\x2\x2\x2B9\x2BC");
		sb.Append("\x3\x2\x2\x2\x2BA\x2B8\x3\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB");
		sb.Append("\x2BD\x3\x2\x2\x2\x2BC\x2BA\x3\x2\x2\x2\x2BD\x2BE\a*\x2\x2\x2BE");
		sb.Append("}\x3\x2\x2\x2\x2BF\x2C7\x5\x80\x41\x2\x2C0\x2C1\x5\x80\x41\x2");
		sb.Append("\x2C1\x2C4\a+\x2\x2\x2C2\x2C5\x5\x80\x41\x2\x2C3\x2C5\a\b\x2");
		sb.Append("\x2\x2C4\x2C2\x3\x2\x2\x2\x2C4\x2C3\x3\x2\x2\x2\x2C5\x2C7\x3");
		sb.Append("\x2\x2\x2\x2C6\x2BF\x3\x2\x2\x2\x2C6\x2C0\x3\x2\x2\x2\x2C7\x7F");
		sb.Append("\x3\x2\x2\x2\x2C8\x2C9\t\x4\x2\x2\x2C9\x81\x3\x2\x2\x2\x2CA");
		sb.Append("\x2CB\a\x31\x2\x2\x2CB\x2CD\x5\x8CG\x2\x2CC\x2CE\x5\x84\x43");
		sb.Append("\x2\x2CD\x2CC\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x83\x3");
		sb.Append("\x2\x2\x2\x2CF\x2D3\a$\x2\x2\x2D0\x2D4\x5\x8EH\x2\x2D1\x2D4");
		sb.Append("\x5\x8A\x46\x2\x2D2\x2D4\x5\x86\x44\x2\x2D3\x2D0\x3\x2\x2\x2");
		sb.Append("\x2D3\x2D1\x3\x2\x2\x2\x2D3\x2D2\x3\x2\x2\x2\x2D4\x2D5\x3\x2");
		sb.Append("\x2\x2\x2D5\x2D6\a%\x2\x2\x2D6\x85\x3\x2\x2\x2\x2D7\x2DC\x5");
		sb.Append("\x88\x45\x2\x2D8\x2D9\a\"\x2\x2\x2D9\x2DB\x5\x88\x45\x2\x2DA");
		sb.Append("\x2D8\x3\x2\x2\x2\x2DB\x2DE\x3\x2\x2\x2\x2DC\x2DA\x3\x2\x2\x2");
		sb.Append("\x2DC\x2DD\x3\x2\x2\x2\x2DD\x87\x3\x2\x2\x2\x2DE\x2DC\x3\x2");
		sb.Append("\x2\x2\x2DF\x2E0\x5\x92J\x2\x2E0\x2E3\a+\x2\x2\x2E1\x2E4\x5");
		sb.Append("\x8EH\x2\x2E2\x2E4\x5\x8A\x46\x2\x2E3\x2E1\x3\x2\x2\x2\x2E3");
		sb.Append("\x2E2\x3\x2\x2\x2\x2E4\x89\x3\x2\x2\x2\x2E5\x2E6\a$\x2\x2\x2E6");
		sb.Append("\x2EB\x5\x8EH\x2\x2E7\x2E8\a\"\x2\x2\x2E8\x2EA\x5\x8EH\x2\x2E9");
		sb.Append("\x2E7\x3\x2\x2\x2\x2EA\x2ED\x3\x2\x2\x2\x2EB\x2E9\x3\x2\x2\x2");
		sb.Append("\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2EE\x3\x2\x2\x2\x2ED\x2EB\x3\x2");
		sb.Append("\x2\x2\x2EE\x2EF\a%\x2\x2\x2EF\x8B\x3\x2\x2\x2\x2F0\x2F5\x5");
		sb.Append("\x92J\x2\x2F1\x2F2\a\x33\x2\x2\x2F2\x2F4\x5\x92J\x2\x2F3\x2F1");
		sb.Append("\x3\x2\x2\x2\x2F4\x2F7\x3\x2\x2\x2\x2F5\x2F3\x3\x2\x2\x2\x2F5");
		sb.Append("\x2F6\x3\x2\x2\x2\x2F6\x8D\x3\x2\x2\x2\x2F7\x2F5\x3\x2\x2\x2");
		sb.Append("\x2F8\x2FB\x5\x90I\x2\x2F9\x2FB\x5\x8CG\x2\x2FA\x2F8\x3\x2\x2");
		sb.Append("\x2\x2FA\x2F9\x3\x2\x2\x2\x2FB\x8F\x3\x2\x2\x2\x2FC\x301\x5");
		sb.Append("\x96L\x2\x2FD\x301\x5\x94K\x2\x2FE\x301\a\a\x2\x2\x2FF\x301");
		sb.Append("\a\b\x2\x2\x300\x2FC\x3\x2\x2\x2\x300\x2FD\x3\x2\x2\x2\x300");
		sb.Append("\x2FE\x3\x2\x2\x2\x300\x2FF\x3\x2\x2\x2\x301\x91\x3\x2\x2\x2");
		sb.Append("\x302\x303\t\x5\x2\x2\x303\x93\x3\x2\x2\x2\x304\x305\t\x6\x2");
		sb.Append("\x2\x305\x95\x3\x2\x2\x2\x306\x307\a\x1F\x2\x2\x307\x97\x3\x2");
		sb.Append("\x2\x2g\x9B\xA1\xAA\xB1\xBB\xC2\xC9\xD8\xDD\xE5\xEF\xF4\xFB");
		sb.Append("\x104\x108\x10D\x116\x11E\x124\x12D\x135\x13E\x144\x149\x14E");
		sb.Append("\x154\x158\x15C\x15F\x162\x165\x16A\x175\x179\x184\x18F\x19C");
		sb.Append("\x1A7\x1B0\x1B3\x1B8\x1BE\x1C2\x1D0\x1D5\x1D8\x1DD\x1E1\x1E5");
		sb.Append("\x1E9\x1ED\x1EF\x1F5\x201\x20A\x20E\x212\x219\x21D\x222\x225");
		sb.Append("\x22A\x230\x235\x23B\x240\x242\x248\x24C\x252\x256\x25A\x25C");
		sb.Append("\x264\x266\x26E\x270\x276\x27E\x285\x289\x28D\x291\x296\x29A");
		sb.Append("\x2A1\x2A4\x2AC\x2B0\x2B2\x2BA\x2C4\x2C6\x2CD\x2D3\x2DC\x2E3");
		sb.Append("\x2EB\x2F5\x2FA\x300");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Languages.Antlr4Roslyn.Compiler
