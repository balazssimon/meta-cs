//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Meta.Syntax.InternalSyntax {

using MetaDslx.Core;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class MetaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KNamespace=1, KUsing=2, KMetamodel=3, KExtern=4, KTypeDef=5, KAbstract=6, 
		KClass=7, KEnum=8, KAssociation=9, KContainment=10, KWith=11, KNew=12, 
		KNull=13, KTrue=14, KFalse=15, KVoid=16, KObject=17, KSymbol=18, KString=19, 
		KInt=20, KLong=21, KFloat=22, KDouble=23, KByte=24, KBool=25, KList=26, 
		KAny=27, KNone=28, KError=29, KSet=30, KMultiList=31, KMultiSet=32, KThis=33, 
		KTypeof=34, KAs=35, KIs=36, KBase=37, KConst=38, KRedefines=39, KSubsets=40, 
		KReadonly=41, KLazy=42, KSynthetized=43, KInherited=44, KDerived=45, KStatic=46, 
		TSemicolon=47, TColon=48, TDot=49, TComma=50, TAssign=51, TOpenParen=52, 
		TCloseParen=53, TOpenBracket=54, TCloseBracket=55, TOpenBrace=56, TCloseBrace=57, 
		TLessThan=58, TGreaterThan=59, TQuestion=60, TQuestionQuestion=61, TAmpersand=62, 
		THat=63, TBar=64, TAndAlso=65, TOrElse=66, TPlusPlus=67, TMinusMinus=68, 
		TPlus=69, TMinus=70, TTilde=71, TExclamation=72, TSlash=73, TAsterisk=74, 
		TPercent=75, TLessThanOrEqual=76, TGreaterThanOrEqual=77, TEqual=78, TNotEqual=79, 
		TAsteriskAssign=80, TSlashAssign=81, TPercentAssign=82, TPlusAssign=83, 
		TMinusAssign=84, TLeftShiftAssign=85, TRightShiftAssign=86, TAmpersandAssign=87, 
		THatAssign=88, TBarAssign=89, IUri=90, IdentifierNormal=91, IdentifierVerbatim=92, 
		LInteger=93, LDecimal=94, LScientific=95, LDateTimeOffset=96, LDateTime=97, 
		LDate=98, LTime=99, LRegularString=100, LGuid=101, LUtf8Bom=102, LWhiteSpace=103, 
		LCrLf=104, LLineEnd=105, LSingleLineComment=106, LComment=107, LDoubleQuoteVerbatimString=108, 
		LSingleQuoteVerbatimString=109, DoubleQuoteVerbatimStringLiteralStart=110, 
		SingleQuoteVerbatimStringLiteralStart=111, LCommentStart=112;
	public const int
		RULE_main = 0, RULE_name = 1, RULE_qualifiedName = 2, RULE_qualifier = 3, 
		RULE_annotation = 4, RULE_namespaceDeclaration = 5, RULE_namespaceBody = 6, 
		RULE_metamodelDeclaration = 7, RULE_metamodelPropertyList = 8, RULE_metamodelProperty = 9, 
		RULE_metamodelUriProperty = 10, RULE_declaration = 11, RULE_enumDeclaration = 12, 
		RULE_enumBody = 13, RULE_enumValues = 14, RULE_enumValue = 15, RULE_enumMemberDeclaration = 16, 
		RULE_classDeclaration = 17, RULE_classBody = 18, RULE_classAncestors = 19, 
		RULE_classAncestor = 20, RULE_classMemberDeclaration = 21, RULE_fieldDeclaration = 22, 
		RULE_fieldModifier = 23, RULE_redefinitionsOrSubsettings = 24, RULE_redefinitions = 25, 
		RULE_subsettings = 26, RULE_nameUseList = 27, RULE_constDeclaration = 28, 
		RULE_returnType = 29, RULE_typeOfReference = 30, RULE_typeReference = 31, 
		RULE_simpleType = 32, RULE_classType = 33, RULE_objectType = 34, RULE_primitiveType = 35, 
		RULE_voidType = 36, RULE_nullableType = 37, RULE_collectionType = 38, 
		RULE_collectionKind = 39, RULE_operationDeclaration = 40, RULE_parameterList = 41, 
		RULE_parameter = 42, RULE_associationDeclaration = 43, RULE_identifier = 44, 
		RULE_literal = 45, RULE_nullLiteral = 46, RULE_booleanLiteral = 47, RULE_integerLiteral = 48, 
		RULE_decimalLiteral = 49, RULE_scientificLiteral = 50, RULE_stringLiteral = 51;
	public static readonly string[] ruleNames = {
		"main", "name", "qualifiedName", "qualifier", "annotation", "namespaceDeclaration", 
		"namespaceBody", "metamodelDeclaration", "metamodelPropertyList", "metamodelProperty", 
		"metamodelUriProperty", "declaration", "enumDeclaration", "enumBody", 
		"enumValues", "enumValue", "enumMemberDeclaration", "classDeclaration", 
		"classBody", "classAncestors", "classAncestor", "classMemberDeclaration", 
		"fieldDeclaration", "fieldModifier", "redefinitionsOrSubsettings", "redefinitions", 
		"subsettings", "nameUseList", "constDeclaration", "returnType", "typeOfReference", 
		"typeReference", "simpleType", "classType", "objectType", "primitiveType", 
		"voidType", "nullableType", "collectionType", "collectionKind", "operationDeclaration", 
		"parameterList", "parameter", "associationDeclaration", "identifier", 
		"literal", "nullLiteral", "booleanLiteral", "integerLiteral", "decimalLiteral", 
		"scientificLiteral", "stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'using'", "'metamodel'", "'extern'", "'typedef'", 
		"'abstract'", "'class'", "'enum'", "'association'", "'containment'", "'with'", 
		"'new'", "'null'", "'true'", "'false'", "'void'", "'object'", "'symbol'", 
		"'string'", "'int'", "'long'", "'float'", "'double'", "'byte'", "'bool'", 
		"'list'", "'any'", "'none'", "'error'", "'set'", "'multi_list'", "'multi_set'", 
		"'this'", "'typeof'", "'as'", "'is'", "'base'", "'const'", "'redefines'", 
		"'subsets'", "'readonly'", "'lazy'", "'synthetized'", "'inherited'", "'derived'", 
		"'static'", "';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", 
		"'<='", "'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'&='", "'^='", "'|='", "'Uri'", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'\"'", "'''", "'@\"'", "'@''", "'/*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KUsing", "KMetamodel", "KExtern", "KTypeDef", "KAbstract", 
		"KClass", "KEnum", "KAssociation", "KContainment", "KWith", "KNew", "KNull", 
		"KTrue", "KFalse", "KVoid", "KObject", "KSymbol", "KString", "KInt", "KLong", 
		"KFloat", "KDouble", "KByte", "KBool", "KList", "KAny", "KNone", "KError", 
		"KSet", "KMultiList", "KMultiSet", "KThis", "KTypeof", "KAs", "KIs", "KBase", 
		"KConst", "KRedefines", "KSubsets", "KReadonly", "KLazy", "KSynthetized", 
		"KInherited", "KDerived", "KStatic", "TSemicolon", "TColon", "TDot", "TComma", 
		"TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", "TCloseBracket", 
		"TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", "TQuestion", 
		"TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", "TOrElse", 
		"TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IUri", "IdentifierNormal", 
		"IdentifierVerbatim", "LInteger", "LDecimal", "LScientific", "LDateTimeOffset", 
		"LDateTime", "LDate", "LTime", "LRegularString", "LGuid", "LUtf8Bom", 
		"LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", "LComment", 
		"LDoubleQuoteVerbatimString", "LSingleQuoteVerbatimString", "DoubleQuoteVerbatimStringLiteralStart", 
		"SingleQuoteVerbatimStringLiteralStart", "LCommentStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MetaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MetaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MetaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MetaParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; namespaceDeclaration();
			State = 105; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 2, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitQualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; identifier();
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TDot) {
				{
				{
				State = 112; Match(TDot);
				State = 113; identifier();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaParser.TOpenBracket, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaParser.TCloseBracket, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 8, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(TOpenBracket);
			State = 120; name();
			State = 121; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 123; annotation();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129; Match(KNamespace);
			State = 130; qualifiedName();
			State = 131; namespaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		public MetamodelDeclarationContext metamodelDeclaration() {
			return GetRuleContext<MetamodelDeclarationContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterNamespaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitNamespaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(TOpenBrace);
			State = 134; metamodelDeclaration();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KAbstract) | (1L << KClass) | (1L << KEnum) | (1L << KAssociation) | (1L << KConst) | (1L << TOpenBracket))) != 0)) {
				{
				{
				State = 135; declaration();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelDeclarationContext : ParserRuleContext {
		public ITerminalNode KMetamodel() { return GetToken(MetaParser.KMetamodel, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaParser.TCloseParen, 0); }
		public MetamodelPropertyListContext metamodelPropertyList() {
			return GetRuleContext<MetamodelPropertyListContext>(0);
		}
		public MetamodelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterMetamodelDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitMetamodelDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelDeclarationContext metamodelDeclaration() {
		MetamodelDeclarationContext _localctx = new MetamodelDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_metamodelDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 143; annotation();
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 149; Match(KMetamodel);
			State = 150; name();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOpenParen) {
				{
				State = 151; Match(TOpenParen);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IUri) {
					{
					State = 152; metamodelPropertyList();
					}
				}

				State = 155; Match(TCloseParen);
				}
			}

			State = 158; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyListContext : ParserRuleContext {
		public MetamodelPropertyContext[] metamodelProperty() {
			return GetRuleContexts<MetamodelPropertyContext>();
		}
		public MetamodelPropertyContext metamodelProperty(int i) {
			return GetRuleContext<MetamodelPropertyContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public MetamodelPropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelPropertyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterMetamodelPropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitMetamodelPropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyListContext metamodelPropertyList() {
		MetamodelPropertyListContext _localctx = new MetamodelPropertyListContext(Context, State);
		EnterRule(_localctx, 16, RULE_metamodelPropertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; metamodelProperty();
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 161; Match(TComma);
				State = 162; metamodelProperty();
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyContext : ParserRuleContext {
		public MetamodelUriPropertyContext metamodelUriProperty() {
			return GetRuleContext<MetamodelUriPropertyContext>(0);
		}
		public MetamodelPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterMetamodelProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitMetamodelProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyContext metamodelProperty() {
		MetamodelPropertyContext _localctx = new MetamodelPropertyContext(Context, State);
		EnterRule(_localctx, 18, RULE_metamodelProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; metamodelUriProperty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelUriPropertyContext : ParserRuleContext {
		public ITerminalNode IUri() { return GetToken(MetaParser.IUri, 0); }
		public ITerminalNode TAssign() { return GetToken(MetaParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public MetamodelUriPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelUriProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterMetamodelUriProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitMetamodelUriProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelUriProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelUriPropertyContext metamodelUriProperty() {
		MetamodelUriPropertyContext _localctx = new MetamodelUriPropertyContext(Context, State);
		EnterRule(_localctx, 20, RULE_metamodelUriProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(IUri);
			State = 171; Match(TAssign);
			State = 172; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public AssociationDeclarationContext associationDeclaration() {
			return GetRuleContext<AssociationDeclarationContext>(0);
		}
		public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_declaration);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174; enumDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175; classDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 176; associationDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 177; constDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnum() { return GetToken(MetaParser.KEnum, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 180; annotation();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 186; Match(KEnum);
			State = 187; name();
			State = 188; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(TOpenBrace);
			State = 191; enumValues();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TSemicolon) {
				{
				State = 192; Match(TSemicolon);
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KVoid) | (1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KStatic) | (1L << TOpenBracket))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (IUri - 90)) | (1L << (IdentifierNormal - 90)) | (1L << (IdentifierVerbatim - 90)))) != 0)) {
					{
					{
					State = 193; enumMemberDeclaration();
					}
					}
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 201; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterEnumValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitEnumValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; enumValue();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 204; Match(TComma);
				State = 205; enumValue();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 211; annotation();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 217; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext enumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; operationDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode KClass() { return GetToken(MetaParser.KClass, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode KAbstract() { return GetToken(MetaParser.KAbstract, 0); }
		public ITerminalNode TColon() { return GetToken(MetaParser.TColon, 0); }
		public ClassAncestorsContext classAncestors() {
			return GetRuleContext<ClassAncestorsContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 221; annotation();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KAbstract) {
				{
				State = 227; Match(KAbstract);
				}
			}

			State = 230; Match(KClass);
			State = 231; name();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TColon) {
				{
				State = 232; Match(TColon);
				State = 233; classAncestors();
				}
			}

			State = 236; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(MetaParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaParser.TCloseBrace, 0); }
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 36, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(TOpenBrace);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KVoid) | (1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << KStatic) | (1L << TOpenBracket))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (IUri - 90)) | (1L << (IdentifierNormal - 90)) | (1L << (IdentifierVerbatim - 90)))) != 0)) {
				{
				{
				State = 239; classMemberDeclaration();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 245; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorsContext : ParserRuleContext {
		public ClassAncestorContext[] classAncestor() {
			return GetRuleContexts<ClassAncestorContext>();
		}
		public ClassAncestorContext classAncestor(int i) {
			return GetRuleContext<ClassAncestorContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public ClassAncestorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestors; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassAncestors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassAncestors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorsContext classAncestors() {
		ClassAncestorsContext _localctx = new ClassAncestorsContext(Context, State);
		EnterRule(_localctx, 38, RULE_classAncestors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; classAncestor();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 248; Match(TComma);
				State = 249; classAncestor();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ClassAncestorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassAncestor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassAncestor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorContext classAncestor() {
		ClassAncestorContext _localctx = new ClassAncestorContext(Context, State);
		EnterRule(_localctx, 40, RULE_classAncestor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_classMemberDeclaration);
		try {
			State = 259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 257; fieldDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 258; operationDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FieldModifierContext fieldModifier() {
			return GetRuleContext<FieldModifierContext>(0);
		}
		public RedefinitionsOrSubsettingsContext redefinitionsOrSubsettings() {
			return GetRuleContext<RedefinitionsOrSubsettingsContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 261; annotation();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived))) != 0)) {
				{
				State = 267; fieldModifier();
				}
			}

			State = 270; typeReference();
			State = 271; name();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KRedefines || _la==KSubsets) {
				{
				State = 272; redefinitionsOrSubsettings();
				}
			}

			State = 275; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public ITerminalNode KContainment() { return GetToken(MetaParser.KContainment, 0); }
		public ITerminalNode KReadonly() { return GetToken(MetaParser.KReadonly, 0); }
		public ITerminalNode KLazy() { return GetToken(MetaParser.KLazy, 0); }
		public ITerminalNode KDerived() { return GetToken(MetaParser.KDerived, 0); }
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_fieldModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedefinitionsOrSubsettingsContext : ParserRuleContext {
		public RedefinitionsContext redefinitions() {
			return GetRuleContext<RedefinitionsContext>(0);
		}
		public SubsettingsContext subsettings() {
			return GetRuleContext<SubsettingsContext>(0);
		}
		public RedefinitionsOrSubsettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redefinitionsOrSubsettings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterRedefinitionsOrSubsettings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitRedefinitionsOrSubsettings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitionsOrSubsettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedefinitionsOrSubsettingsContext redefinitionsOrSubsettings() {
		RedefinitionsOrSubsettingsContext _localctx = new RedefinitionsOrSubsettingsContext(Context, State);
		EnterRule(_localctx, 48, RULE_redefinitionsOrSubsettings);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KRedefines:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; redefinitions();
				}
				break;
			case KSubsets:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280; subsettings();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedefinitionsContext : ParserRuleContext {
		public ITerminalNode KRedefines() { return GetToken(MetaParser.KRedefines, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public RedefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterRedefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitRedefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedefinitionsContext redefinitions() {
		RedefinitionsContext _localctx = new RedefinitionsContext(Context, State);
		EnterRule(_localctx, 50, RULE_redefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(KRedefines);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (IUri - 90)) | (1L << (IdentifierNormal - 90)) | (1L << (IdentifierVerbatim - 90)))) != 0)) {
				{
				State = 284; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsettingsContext : ParserRuleContext {
		public ITerminalNode KSubsets() { return GetToken(MetaParser.KSubsets, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public SubsettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsettings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterSubsettings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitSubsettings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsettingsContext subsettings() {
		SubsettingsContext _localctx = new SubsettingsContext(Context, State);
		EnterRule(_localctx, 52, RULE_subsettings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(KSubsets);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (IUri - 90)) | (1L << (IdentifierNormal - 90)) | (1L << (IdentifierVerbatim - 90)))) != 0)) {
				{
				State = 288; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameUseListContext : ParserRuleContext {
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public NameUseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameUseList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterNameUseList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitNameUseList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameUseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameUseListContext nameUseList() {
		NameUseListContext _localctx = new NameUseListContext(Context, State);
		EnterRule(_localctx, 54, RULE_nameUseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; qualifier();
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 292; Match(TComma);
				State = 293; qualifier();
				}
				}
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		public ITerminalNode KConst() { return GetToken(MetaParser.KConst, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterConstDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitConstDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_constDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(KConst);
			State = 300; typeReference();
			State = 301; name();
			State = 302; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_returnType);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KObject:
			case KSymbol:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
			case IUri:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfReferenceContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeOfReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterTypeOfReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitTypeOfReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfReferenceContext typeOfReference() {
		TypeOfReferenceContext _localctx = new TypeOfReferenceContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeOfReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeReference);
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 310; collectionType();
				}
				break;
			case KObject:
			case KSymbol:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IUri:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 311; simpleType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_simpleType);
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315; objectType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 316; nullableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 317; qualifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_classType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(MetaParser.KObject, 0); }
		public ITerminalNode KSymbol() { return GetToken(MetaParser.KSymbol, 0); }
		public ITerminalNode KString() { return GetToken(MetaParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KSymbol) | (1L << KString))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(MetaParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(MetaParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(MetaParser.KBool, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; primitiveType();
			State = 329; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		public CollectionKindContext collectionKind() {
			return GetRuleContext<CollectionKindContext>(0);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaParser.TLessThan, 0); }
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaParser.TGreaterThan, 0); }
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterCollectionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitCollectionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_collectionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; collectionKind();
			State = 332; Match(TLessThan);
			State = 333; simpleType();
			State = 334; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionKindContext : ParserRuleContext {
		public ITerminalNode KSet() { return GetToken(MetaParser.KSet, 0); }
		public ITerminalNode KList() { return GetToken(MetaParser.KList, 0); }
		public ITerminalNode KMultiSet() { return GetToken(MetaParser.KMultiSet, 0); }
		public ITerminalNode KMultiList() { return GetToken(MetaParser.KMultiList, 0); }
		public CollectionKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterCollectionKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitCollectionKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionKindContext collectionKind() {
		CollectionKindContext _localctx = new CollectionKindContext(Context, State);
		EnterRule(_localctx, 78, RULE_collectionKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode KStatic() { return GetToken(MetaParser.KStatic, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterOperationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitOperationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 338; annotation();
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KStatic) {
				{
				State = 344; Match(KStatic);
				}
			}

			State = 347; returnType();
			State = 348; name();
			State = 349; Match(TOpenParen);
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << TOpenBracket))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (IUri - 90)) | (1L << (IdentifierNormal - 90)) | (1L << (IdentifierVerbatim - 90)))) != 0)) {
				{
				State = 350; parameterList();
				}
			}

			State = 353; Match(TCloseParen);
			State = 354; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaParser.TComma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 82, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; parameter();
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 357; Match(TComma);
				State = 358; parameter();
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 84, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 364; annotation();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 370; typeReference();
			State = 371; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationDeclarationContext : ParserRuleContext {
		public QualifierContext source;
		public QualifierContext target;
		public ITerminalNode KAssociation() { return GetToken(MetaParser.KAssociation, 0); }
		public ITerminalNode KWith() { return GetToken(MetaParser.KWith, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaParser.TSemicolon, 0); }
		public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AssociationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterAssociationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitAssociationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationDeclarationContext associationDeclaration() {
		AssociationDeclarationContext _localctx = new AssociationDeclarationContext(Context, State);
		EnterRule(_localctx, 86, RULE_associationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 373; annotation();
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 379; Match(KAssociation);
			State = 380; _localctx.source = qualifier();
			State = 381; Match(KWith);
			State = 382; _localctx.target = qualifier();
			State = 383; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(MetaParser.IdentifierVerbatim, 0); }
		public ITerminalNode IUri() { return GetToken(MetaParser.IUri, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 88, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (IUri - 90)) | (1L << (IdentifierNormal - 90)) | (1L << (IdentifierVerbatim - 90)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_literal);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388; booleanLiteral();
				}
				break;
			case LInteger:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389; integerLiteral();
				}
				break;
			case LDecimal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 390; decimalLiteral();
				}
				break;
			case LScientific:
				EnterOuterAlt(_localctx, 5);
				{
				State = 391; scientificLiteral();
				}
				break;
			case LRegularString:
				EnterOuterAlt(_localctx, 6);
				{
				State = 392; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			_la = TokenStream.LA(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode LInteger() { return GetToken(MetaParser.LInteger, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(LInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode LDecimal() { return GetToken(MetaParser.LDecimal, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(LDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode LScientific() { return GetToken(MetaParser.LScientific, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 100, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(LScientific);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode LRegularString() { return GetToken(MetaParser.LRegularString, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaParserListener typedListener = listener as IMetaParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405; Match(LRegularString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'r', '\x19A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'u', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'x', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\a', '\a', '\x7F', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '\x82', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x8B', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\x8E', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\a', '\t', '\x93', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\x96', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x9C', '\n', '\t', '\x3', '\t', '\x5', '\t', 
		'\x9F', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', '\xA6', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'\xA9', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xB5', '\n', '\r', '\x3', '\xE', '\a', '\xE', '\xB8', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xBB', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xC5', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\xC8', '\v', '\xF', '\x5', '\xF', '\xCA', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\xD1', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xD4', 
		'\v', '\x10', '\x3', '\x11', '\a', '\x11', '\xD7', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xDA', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\a', '\x13', '\xE1', '\n', 
		'\x13', '\f', '\x13', '\xE', '\x13', '\xE4', '\v', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\xE7', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xED', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xF3', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\xF6', '\v', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\xFD', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x100', '\v', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x106', '\n', '\x17', '\x3', '\x18', '\a', '\x18', '\x109', '\n', '\x18', 
		'\f', '\x18', '\xE', '\x18', '\x10C', '\v', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x10F', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x114', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x11C', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x120', '\n', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x124', '\n', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x129', '\n', 
		'\x1D', '\f', '\x1D', '\xE', '\x1D', '\x12C', '\v', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x135', '\n', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x5', '!', '\x13B', '\n', '!', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x141', '\n', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', 
		')', '\x3', '*', '\a', '*', '\x156', '\n', '*', '\f', '*', '\xE', '*', 
		'\x159', '\v', '*', '\x3', '*', '\x5', '*', '\x15C', '\n', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x162', '\n', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\a', '+', '\x16A', '\n', '+', '\f', '+', '\xE', '+', '\x16D', '\v', '+', 
		'\x3', ',', '\a', ',', '\x170', '\n', ',', '\f', ',', '\xE', ',', '\x173', 
		'\v', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\a', '-', 
		'\x179', '\n', '-', '\f', '-', '\xE', '-', '\x17C', '\v', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x5', '/', '\x18C', '\n', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x2', '\x2', '\x36', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', '\x2', '\b', '\x5', '\x2', '\f', '\f', '+', ',', '/', '/', 
		'\x3', '\x2', '\x13', '\x15', '\x3', '\x2', '\x16', '\x1B', '\x4', '\x2', 
		'\x1C', '\x1C', ' ', '\"', '\x3', '\x2', '\\', '^', '\x3', '\x2', '\x10', 
		'\x11', '\x2', '\x191', '\x2', 'j', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'm', '\x3', '\x2', '\x2', '\x2', '\x6', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'q', '\x3', '\x2', '\x2', '\x2', '\n', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x80', '\x3', '\x2', '\x2', '\x2', '\xE', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x94', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\x14', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xAC', '\x3', '\x2', '\x2', '\x2', '\x18', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xD8', '\x3', '\x2', '\x2', '\x2', '\"', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xE2', '\x3', '\x2', '\x2', '\x2', '&', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xF9', '\x3', '\x2', '\x2', '\x2', '*', '\x101', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x30', '\x117', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x34', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x125', '\x3', '\x2', '\x2', '\x2', ':', '\x12D', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x134', '\x3', '\x2', '\x2', '\x2', '>', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x140', '\x3', '\x2', '\x2', '\x2', '\x44', '\x142', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x144', '\x3', '\x2', '\x2', '\x2', 'H', '\x146', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x14A', '\x3', '\x2', '\x2', '\x2', 'N', '\x14D', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x152', '\x3', '\x2', '\x2', '\x2', 'R', '\x157', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x171', '\x3', '\x2', '\x2', '\x2', 'X', '\x17A', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x183', '\x3', '\x2', '\x2', '\x2', '\\', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x62', '\x191', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x193', '\x3', '\x2', '\x2', '\x2', '\x66', '\x195', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x197', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x5', '\f', '\a', '\x2', 'k', 'l', '\a', '\x2', '\x2', '\x3', 
		'l', '\x3', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x5', 'Z', '.', '\x2', 
		'n', '\x5', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x5', '\b', '\x5', 
		'\x2', 'p', '\a', '\x3', '\x2', '\x2', '\x2', 'q', 'v', '\x5', 'Z', '.', 
		'\x2', 'r', 's', '\a', '\x33', '\x2', '\x2', 's', 'u', '\x5', 'Z', '.', 
		'\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'w', '\t', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'z', '\a', '\x38', '\x2', '\x2', 'z', '{', '\x5', '\x4', 
		'\x3', '\x2', '{', '|', '\a', '\x39', '\x2', '\x2', '|', '\v', '\x3', 
		'\x2', '\x2', '\x2', '}', '\x7F', '\x5', '\n', '\x6', '\x2', '~', '}', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x83', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\x3', '\x2', '\x2', 
		'\x84', '\x85', '\x5', '\x6', '\x4', '\x2', '\x85', '\x86', '\x5', '\xE', 
		'\b', '\x2', '\x86', '\r', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', 
		'\a', ':', '\x2', '\x2', '\x88', '\x8C', '\x5', '\x10', '\t', '\x2', '\x89', 
		'\x8B', '\x5', '\x18', '\r', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\a', ';', '\x2', '\x2', '\x90', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x93', '\x5', '\n', '\x6', '\x2', '\x92', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x97', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', '\x5', '\x2', 
		'\x2', '\x98', '\x9E', '\x5', '\x4', '\x3', '\x2', '\x99', '\x9B', '\a', 
		'\x36', '\x2', '\x2', '\x9A', '\x9C', '\x5', '\x12', '\n', '\x2', '\x9B', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', '\a', 
		'\x37', '\x2', '\x2', '\x9E', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\a', '\x31', '\x2', '\x2', '\xA1', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA7', '\x5', '\x14', '\v', '\x2', '\xA3', 
		'\xA4', '\a', '\x34', '\x2', '\x2', '\xA4', '\xA6', '\x5', '\x14', '\v', 
		'\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x5', 
		'\x16', '\f', '\x2', '\xAB', '\x15', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\a', '\\', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x35', '\x2', 
		'\x2', '\xAE', '\xAF', '\x5', 'h', '\x35', '\x2', '\xAF', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB5', '\x5', '\x1A', '\xE', '\x2', '\xB1', 
		'\xB5', '\x5', '$', '\x13', '\x2', '\xB2', '\xB5', '\x5', 'X', '-', '\x2', 
		'\xB3', '\xB5', '\x5', ':', '\x1E', '\x2', '\xB4', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB8', '\x5', '\n', 
		'\x6', '\x2', '\xB7', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', 
		'\a', '\n', '\x2', '\x2', '\xBD', '\xBE', '\x5', '\x4', '\x3', '\x2', 
		'\xBE', '\xBF', '\x5', '\x1C', '\xF', '\x2', '\xBF', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xC1', '\a', ':', '\x2', '\x2', '\xC1', '\xC9', 
		'\x5', '\x1E', '\x10', '\x2', '\xC2', '\xC6', '\a', '\x31', '\x2', '\x2', 
		'\xC3', '\xC5', '\x5', '\"', '\x12', '\x2', '\xC4', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xCC', '\a', ';', '\x2', '\x2', '\xCC', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xCD', '\xD2', '\x5', ' ', '\x11', '\x2', '\xCE', '\xCF', 
		'\a', '\x34', '\x2', '\x2', '\xCF', '\xD1', '\x5', ' ', '\x11', '\x2', 
		'\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD7', '\x5', '\n', 
		'\x6', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', 
		'\x5', '\x4', '\x3', '\x2', '\xDC', '!', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDE', '\x5', 'R', '*', '\x2', '\xDE', '#', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xE1', '\x5', '\n', '\x6', '\x2', '\xE0', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE7', '\a', '\b', '\x2', '\x2', '\xE6', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\a', '\t', 
		'\x2', '\x2', '\xE9', '\xEC', '\x5', '\x4', '\x3', '\x2', '\xEA', '\xEB', 
		'\a', '\x32', '\x2', '\x2', '\xEB', '\xED', '\x5', '(', '\x15', '\x2', 
		'\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', 
		'\x5', '&', '\x14', '\x2', '\xEF', '%', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF4', '\a', ':', '\x2', '\x2', '\xF1', '\xF3', '\x5', ',', '\x17', '\x2', 
		'\xF2', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF6', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\a', ';', 
		'\x2', '\x2', '\xF8', '\'', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFE', 
		'\x5', '*', '\x16', '\x2', '\xFA', '\xFB', '\a', '\x34', '\x2', '\x2', 
		'\xFB', '\xFD', '\x5', '*', '\x16', '\x2', '\xFC', '\xFA', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\x100', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', ')', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', 
		'\x2', '\x2', '\x101', '\x102', '\x5', '\b', '\x5', '\x2', '\x102', '+', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x106', '\x5', '.', '\x18', '\x2', 
		'\x104', '\x106', '\x5', 'R', '*', '\x2', '\x105', '\x103', '\x3', '\x2', 
		'\x2', '\x2', '\x105', '\x104', '\x3', '\x2', '\x2', '\x2', '\x106', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x109', '\x5', '\n', '\x6', '\x2', 
		'\x108', '\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10F', 
		'\x5', '\x30', '\x19', '\x2', '\x10E', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\x5', '@', '!', '\x2', '\x111', 
		'\x113', '\x5', '\x4', '\x3', '\x2', '\x112', '\x114', '\x5', '\x32', 
		'\x1A', '\x2', '\x113', '\x112', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x116', '\a', '\x31', '\x2', '\x2', '\x116', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\t', '\x2', '\x2', '\x2', '\x118', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11C', '\x5', '\x34', '\x1B', 
		'\x2', '\x11A', '\x11C', '\x5', '\x36', '\x1C', '\x2', '\x11B', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x33', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11F', '\a', ')', 
		'\x2', '\x2', '\x11E', '\x120', '\x5', '\x38', '\x1D', '\x2', '\x11F', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x35', '\x3', '\x2', '\x2', '\x2', '\x121', '\x123', 
		'\a', '*', '\x2', '\x2', '\x122', '\x124', '\x5', '\x38', '\x1D', '\x2', 
		'\x123', '\x122', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x37', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x12A', '\x5', '\b', '\x5', '\x2', '\x126', '\x127', '\a', '\x34', '\x2', 
		'\x2', '\x127', '\x129', '\x5', '\b', '\x5', '\x2', '\x128', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x39', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', '(', '\x2', 
		'\x2', '\x12E', '\x12F', '\x5', '@', '!', '\x2', '\x12F', '\x130', '\x5', 
		'\x4', '\x3', '\x2', '\x130', '\x131', '\a', '\x31', '\x2', '\x2', '\x131', 
		';', '\x3', '\x2', '\x2', '\x2', '\x132', '\x135', '\x5', '@', '!', '\x2', 
		'\x133', '\x135', '\x5', 'J', '&', '\x2', '\x134', '\x132', '\x3', '\x2', 
		'\x2', '\x2', '\x134', '\x133', '\x3', '\x2', '\x2', '\x2', '\x135', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x5', '@', '!', '\x2', 
		'\x137', '?', '\x3', '\x2', '\x2', '\x2', '\x138', '\x13B', '\x5', 'N', 
		'(', '\x2', '\x139', '\x13B', '\x5', '\x42', '\"', '\x2', '\x13A', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x41', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x141', '\x5', 
		'H', '%', '\x2', '\x13D', '\x141', '\x5', '\x46', '$', '\x2', '\x13E', 
		'\x141', '\x5', 'L', '\'', '\x2', '\x13F', '\x141', '\x5', '\b', '\x5', 
		'\x2', '\x140', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x140', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x141', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\x5', '\b', '\x5', '\x2', '\x143', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\t', '\x3', '\x2', 
		'\x2', '\x145', 'G', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\t', 
		'\x4', '\x2', '\x2', '\x147', 'I', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x149', '\a', '\x12', '\x2', '\x2', '\x149', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14B', '\x5', 'H', '%', '\x2', '\x14B', '\x14C', '\a', 
		'>', '\x2', '\x2', '\x14C', 'M', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14E', '\x5', 'P', ')', '\x2', '\x14E', '\x14F', '\a', '<', '\x2', '\x2', 
		'\x14F', '\x150', '\x5', '\x42', '\"', '\x2', '\x150', '\x151', '\a', 
		'=', '\x2', '\x2', '\x151', 'O', '\x3', '\x2', '\x2', '\x2', '\x152', 
		'\x153', '\t', '\x5', '\x2', '\x2', '\x153', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x154', '\x156', '\x5', '\n', '\x6', '\x2', '\x155', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x155', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15C', '\a', '\x30', '\x2', 
		'\x2', '\x15B', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15E', '\x5', '<', '\x1F', '\x2', '\x15E', '\x15F', '\x5', 
		'\x4', '\x3', '\x2', '\x15F', '\x161', '\a', '\x36', '\x2', '\x2', '\x160', 
		'\x162', '\x5', 'T', '+', '\x2', '\x161', '\x160', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x162', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\a', '\x37', '\x2', '\x2', 
		'\x164', '\x165', '\a', '\x31', '\x2', '\x2', '\x165', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x166', '\x16B', '\x5', 'V', ',', '\x2', '\x167', '\x168', 
		'\a', '\x34', '\x2', '\x2', '\x168', '\x16A', '\x5', 'V', ',', '\x2', 
		'\x169', '\x167', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x16B', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16B', 
		'\x16C', '\x3', '\x2', '\x2', '\x2', '\x16C', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x170', 
		'\x5', '\n', '\x6', '\x2', '\x16F', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x173', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x172', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x174', '\x3', '\x2', '\x2', '\x2', '\x173', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x174', '\x175', '\x5', '@', '!', '\x2', '\x175', '\x176', '\x5', 
		'\x4', '\x3', '\x2', '\x176', 'W', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x179', '\x5', '\n', '\x6', '\x2', '\x178', '\x177', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x17E', '\a', '\v', '\x2', '\x2', '\x17E', 
		'\x17F', '\x5', '\b', '\x5', '\x2', '\x17F', '\x180', '\a', '\r', '\x2', 
		'\x2', '\x180', '\x181', '\x5', '\b', '\x5', '\x2', '\x181', '\x182', 
		'\a', '\x31', '\x2', '\x2', '\x182', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x184', '\t', '\x6', '\x2', '\x2', '\x184', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x185', '\x18C', '\x5', '^', '\x30', '\x2', '\x186', '\x18C', 
		'\x5', '`', '\x31', '\x2', '\x187', '\x18C', '\x5', '\x62', '\x32', '\x2', 
		'\x188', '\x18C', '\x5', '\x64', '\x33', '\x2', '\x189', '\x18C', '\x5', 
		'\x66', '\x34', '\x2', '\x18A', '\x18C', '\x5', 'h', '\x35', '\x2', '\x18B', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x186', '\x3', '\x2', '\x2', 
		'\x2', '\x18B', '\x187', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18C', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x18D', '\x18E', '\a', '\xF', '\x2', '\x2', '\x18E', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\t', '\a', '\x2', '\x2', 
		'\x190', '\x61', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\a', '_', 
		'\x2', '\x2', '\x192', '\x63', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', 
		'\a', '`', '\x2', '\x2', '\x194', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x195', '\x196', '\a', '\x61', '\x2', '\x2', '\x196', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x197', '\x198', '\a', '\x66', '\x2', '\x2', '\x198', 'i', 
		'\x3', '\x2', '\x2', '\x2', '&', 'v', '\x80', '\x8C', '\x94', '\x9B', 
		'\x9E', '\xA7', '\xB4', '\xB9', '\xC6', '\xC9', '\xD2', '\xD8', '\xE2', 
		'\xE6', '\xEC', '\xF4', '\xFE', '\x105', '\x10A', '\x10E', '\x113', '\x11B', 
		'\x11F', '\x123', '\x12A', '\x134', '\x13A', '\x140', '\x157', '\x15B', 
		'\x161', '\x16B', '\x171', '\x17A', '\x18B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.Meta.Syntax.InternalSyntax
