parser grammar MetaParser;

options
{
    tokenVocab = MetaLexer; 
	generateCompiler=true;
}

@header {
using MetaDslx.Core;
}

$Root(MetaNamespace)
main: $Property(Symbols) namespaceDeclaration EOF;

$Name
name : identifier;

$Name
qualifiedName : qualifier;

$Qualifier
qualifier : identifier (TDot identifier)*;

$Property(Annotations)
$SymbolDef(MetaAnnotation)
annotation : TOpenBracket $Property(Name) name /*annotationParams?*/ TCloseBracket;

/*
annotationParams : TOpenParen annotationParamList? TCloseParen;
annotationParamList : annotationParam (TComma annotationParam)*;

$Property(Properties)
$SymbolDef(MetaAnnotationProperty)
annotationParam : $Property(Name) name;
*/

$SymbolDef(symbolType=MetaNamespace,nestingProperty=Declarations,merge=true)
namespaceDeclaration: annotation* KNamespace qualifiedName namespaceBody;

$Scope
namespaceBody : TOpenBrace metamodelDeclaration declaration* TCloseBrace;

$Property(MetaModel)
$SymbolDef(MetaModel)
metamodelDeclaration: annotation* KMetamodel name (TOpenParen metamodelPropertyList? TCloseParen)? TSemicolon;

metamodelPropertyList : metamodelProperty (TComma metamodelProperty)*;

metamodelProperty : metamodelUriProperty;

$Property(Uri)
metamodelUriProperty : IUri TAssign $Value stringLiteral;

declaration : enumDeclaration | classDeclaration | associationDeclaration | constDeclaration;

$Property(Declarations) 
$SymbolDef(MetaEnum)
enumDeclaration : annotation* KEnum name enumBody;
$Scope
enumBody : TOpenBrace $Property(EnumLiterals) enumValues (TSemicolon enumMemberDeclaration*)? TCloseBrace;
enumValues : enumValue (TComma enumValue)*;
$SymbolDef(MetaEnumLiteral)
enumValue : annotation* name;
enumMemberDeclaration : $Property(Operations) operationDeclaration;

$Property(Declarations) 
$SymbolDef(MetaClass)
classDeclaration : annotation* $Property(name=IsAbstract,value=true) KAbstract? KClass name (TColon $Property(SuperClasses) classAncestors)? classBody;
$Scope
classBody : TOpenBrace classMemberDeclaration* TCloseBrace;
classAncestors : classAncestor (TComma classAncestor)*;
classAncestor : $SymbolUse(symbolType=MetaClass,location=ResolutionLocation.Parent) qualifier;
classMemberDeclaration 
	: $Property(Properties) fieldDeclaration 
	| $Property(Operations) operationDeclaration
	;

$SymbolDef(MetaProperty)
fieldDeclaration : annotation* $Property(Kind) fieldModifier? $Property(Type) typeReference name redefinitionsOrSubsettings? TSemicolon;
fieldModifier 
	: $Value(MetaPropertyKind.Containment) KContainment 
	| $Value(MetaPropertyKind.Readonly) KReadonly 
	| $Value(MetaPropertyKind.Lazy) KLazy 
	| $Value(MetaPropertyKind.Derived) KDerived
	;

redefinitionsOrSubsettings : redefinitions | subsettings;
redefinitions : KRedefines $Property(RedefinedProperties) nameUseList?;
subsettings : KSubsets $Property(SubsettedProperties) nameUseList?;

$SymbolUse(MetaProperty)
nameUseList : qualifier (TComma qualifier)*;

$Property(Declarations) 
$SymbolDef(MetaConstant)
constDeclaration : KConst $Property(Type) typeReference name TSemicolon;

returnType : typeReference | voidType;
typeOfReference : typeReference;
typeReference : collectionType | simpleType;
simpleType : primitiveType | objectType | nullableType | classType;

$SymbolUse(MetaClass)
classType : qualifier;

objectType 
	: $Value(MetaInstance.Object) KObject 
	| $Value(MetaInstance.Symbol) KSymbol
	| $Value(MetaInstance.String) KString
	;

primitiveType 
	: $Value(MetaInstance.Int) KInt 
	| $Value(MetaInstance.Long) KLong 
	| $Value(MetaInstance.Float) KFloat 
	| $Value(MetaInstance.Double) KDouble 
	| $Value(MetaInstance.Byte) KByte 
	| $Value(MetaInstance.Bool) KBool
	;

voidType 
	: $Value(MetaInstance.Void) KVoid
	;

$SymbolCtr(MetaNullableType)
nullableType : $Property(InnerType) primitiveType TQuestion;

$SymbolCtr(MetaCollectionType)
collectionType : $Property(Kind) collectionKind TLessThan $Property(InnerType) simpleType TGreaterThan;
collectionKind 
	: $Value(MetaCollectionKind.Set) KSet 
	| $Value(MetaCollectionKind.List) KList
	| $Value(MetaCollectionKind.MultiSet) KMultiSet 
	| $Value(MetaCollectionKind.MultiList) KMultiList
	;

$SymbolDef(MetaOperation)
operationDeclaration : annotation* KStatic? $Property(ReturnType) returnType name TOpenParen $Property(Parameters) parameterList? TCloseParen TSemicolon;
parameterList : parameter (TComma parameter)*;

$SymbolDef(MetaParameter)
parameter : annotation* $Property(Type) typeReference name;

$Opposite
associationDeclaration : annotation* KAssociation $SymbolUse(MetaProperty) source=qualifier KWith $SymbolUse(MetaProperty) target=qualifier TSemicolon;


// Additional rules for lexer:

// Identifiers
$Identifier
identifier 
	: IdentifierNormal 
	| IdentifierVerbatim
	| IUri
	;

// Literals
literal 
    : nullLiteral
	| booleanLiteral
	| integerLiteral
	| decimalLiteral
	| scientificLiteral
    | stringLiteral
	;

// Null literal
$Value
nullLiteral : KNull;

// Boolean literals
$Value
booleanLiteral : KTrue | KFalse;

// Number literals
$Value
integerLiteral : LInteger;
$Value
decimalLiteral : LDecimal;
$Value
scientificLiteral : LScientific;

// String literals
$Value
stringLiteral : LRegularString;
