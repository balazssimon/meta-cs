//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\vtqkh4vb.u10\MetaGeneratorParser.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaGenerator.Generator {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class MetaGeneratorParser : Parser {
	public const int
		KNamespace=1, KGenerator=2, KUsing=3, KConfiguration=4, KProperties=5, 
		KTemplate=6, KFunction=7, KExtern=8, KReturn=9, KSwitch=10, KCase=11, 
		KType=12, KVoid=13, KEnd=14, KFor=15, KForEach=16, KIn=17, KIf=18, KElse=19, 
		KLoop=20, KHasLoop=21, KWhere=22, KOrderBy=23, KDescending=24, KSeparator=25, 
		KNull=26, KTrue=27, KFalse=28, KBool=29, KByte=30, KChar=31, KDecimal=32, 
		KDouble=33, KFloat=34, KInt=35, KLong=36, KObject=37, KSByte=38, KShort=39, 
		KString=40, KUInt=41, KULong=42, KUShort=43, KThis=44, KNew=45, KIs=46, 
		KAs=47, KTypeof=48, KDefault=49, TSemicolon=50, TColon=51, TDot=52, TComma=53, 
		TAssign=54, TAssignPlus=55, TAssignMinus=56, TAssignAsterisk=57, TAssignSlash=58, 
		TAssignPercent=59, TAssignAmp=60, TAssignPipe=61, TAssignHat=62, TAssignLeftShift=63, 
		TAssignRightShift=64, TOpenParenthesis=65, TCloseParenthesis=66, TOpenBracket=67, 
		TCloseBracket=68, TOpenBrace=69, TCloseBrace=70, TEquals=71, TNotEquals=72, 
		TArrow=73, TSingleArrow=74, TLessThan=75, TGreaterThan=76, TLessThanOrEquals=77, 
		TGreaterThanOrEquals=78, TQuestion=79, TPlus=80, TMinus=81, TExclamation=82, 
		TTilde=83, TAsterisk=84, TSlash=85, TPercent=86, TPlusPlus=87, TMinusMinus=88, 
		TColonColon=89, TAmp=90, THat=91, TPipe=92, TAnd=93, TXor=94, TOr=95, 
		TQuestionQuestion=96, IdentifierNormal=97, IntegerLiteral=98, DecimalLiteral=99, 
		ScientificLiteral=100, DateTimeOffsetLiteral=101, DateTimeLiteral=102, 
		DateLiteral=103, TimeLiteral=104, CharLiteral=105, RegularStringLiteral=106, 
		GuidLiteral=107, UTF8BOM=108, WHITESPACE=109, CRLF=110, LINEBREAK=111, 
		LINE_COMMENT=112, COMMENT=113, DoubleQuoteVerbatimStringLiteral=114, TH_CRLF=115, 
		TH_LINEBREAK=116, TH_TOpenParenthesis=117, TH_TCloseParenthesis=118, KEndTemplate=119, 
		TemplateLineControl=120, TemplateOutput=121, TemplateCrLf=122, TemplateLineBreak=123, 
		TemplateStatementStart=124, TemplateStatementEnd=125, TS_TOpenBracket=126, 
		TS_TCloseBracket=127, DoubleQuoteVerbatimStringLiteralStart=128;
	public const int
		RULE_main = 0, RULE_namespaceDeclaration = 1, RULE_generatorDeclaration = 2, 
		RULE_usingDeclaration = 3, RULE_configDeclaration = 4, RULE_configProperty = 5, 
		RULE_methodDeclaration = 6, RULE_externFunctionDeclaration = 7, RULE_functionDeclaration = 8, 
		RULE_functionSignature = 9, RULE_paramList = 10, RULE_parameter = 11, 
		RULE_body = 12, RULE_statement = 13, RULE_variableDeclarationStatement = 14, 
		RULE_returnStatement = 15, RULE_expressionStatement = 16, RULE_ifStatement = 17, 
		RULE_ifStatementBegin = 18, RULE_elseIfStatement = 19, RULE_ifStatementElse = 20, 
		RULE_ifStatementEnd = 21, RULE_loopStatement = 22, RULE_loopStatementBegin = 23, 
		RULE_loopStatementEnd = 24, RULE_loopChain = 25, RULE_loopChainItem = 26, 
		RULE_loopChainExpression = 27, RULE_loopWhereExpression = 28, RULE_loopRunExpression = 29, 
		RULE_separatorStatement = 30, RULE_switchStatement = 31, RULE_switchStatementBegin = 32, 
		RULE_switchStatementEnd = 33, RULE_switchBranchStatement = 34, RULE_switchBranchHeadStatement = 35, 
		RULE_switchCaseOrTypeIsHeadStatement = 36, RULE_switchCaseHeadStatement = 37, 
		RULE_switchTypeIsHeadStatement = 38, RULE_switchTypeAsHeadStatement = 39, 
		RULE_switchDefaultStatement = 40, RULE_switchDefaultHeadStatement = 41, 
		RULE_templateDeclaration = 42, RULE_templateSignature = 43, RULE_templateBody = 44, 
		RULE_templateContentLine = 45, RULE_templateOutput = 46, RULE_templateLineEnd = 47, 
		RULE_templateStatementStartEnd = 48, RULE_templateStatement = 49, RULE_typeArgumentList = 50, 
		RULE_predefinedType = 51, RULE_typeReferenceList = 52, RULE_typeReference = 53, 
		RULE_arrayType = 54, RULE_nullableType = 55, RULE_genericType = 56, RULE_simpleType = 57, 
		RULE_voidType = 58, RULE_returnType = 59, RULE_expressionList = 60, RULE_variableReference = 61, 
		RULE_rankSpecifiers = 62, RULE_rankSpecifier = 63, RULE_unboundTypeName = 64, 
		RULE_genericDimensionSpecifier = 65, RULE_anonymousFunctionSignature = 66, 
		RULE_explicitParameter = 67, RULE_implicitParameter = 68, RULE_expression = 69, 
		RULE_qualifiedName = 70, RULE_identifierList = 71, RULE_identifier = 72, 
		RULE_literal = 73, RULE_nullLiteral = 74, RULE_booleanLiteral = 75, RULE_numberLiteral = 76, 
		RULE_integerLiteral = 77, RULE_decimalLiteral = 78, RULE_scientificLiteral = 79, 
		RULE_dateOrTimeLiteral = 80, RULE_dateTimeOffsetLiteral = 81, RULE_dateTimeLiteral = 82, 
		RULE_dateLiteral = 83, RULE_timeLiteral = 84, RULE_charLiteral = 85, RULE_stringLiteral = 86, 
		RULE_guidLiteral = 87;
	public static readonly string[] ruleNames = {
		"main", "namespaceDeclaration", "generatorDeclaration", "usingDeclaration", 
		"configDeclaration", "configProperty", "methodDeclaration", "externFunctionDeclaration", 
		"functionDeclaration", "functionSignature", "paramList", "parameter", 
		"body", "statement", "variableDeclarationStatement", "returnStatement", 
		"expressionStatement", "ifStatement", "ifStatementBegin", "elseIfStatement", 
		"ifStatementElse", "ifStatementEnd", "loopStatement", "loopStatementBegin", 
		"loopStatementEnd", "loopChain", "loopChainItem", "loopChainExpression", 
		"loopWhereExpression", "loopRunExpression", "separatorStatement", "switchStatement", 
		"switchStatementBegin", "switchStatementEnd", "switchBranchStatement", 
		"switchBranchHeadStatement", "switchCaseOrTypeIsHeadStatement", "switchCaseHeadStatement", 
		"switchTypeIsHeadStatement", "switchTypeAsHeadStatement", "switchDefaultStatement", 
		"switchDefaultHeadStatement", "templateDeclaration", "templateSignature", 
		"templateBody", "templateContentLine", "templateOutput", "templateLineEnd", 
		"templateStatementStartEnd", "templateStatement", "typeArgumentList", 
		"predefinedType", "typeReferenceList", "typeReference", "arrayType", "nullableType", 
		"genericType", "simpleType", "voidType", "returnType", "expressionList", 
		"variableReference", "rankSpecifiers", "rankSpecifier", "unboundTypeName", 
		"genericDimensionSpecifier", "anonymousFunctionSignature", "explicitParameter", 
		"implicitParameter", "expression", "qualifiedName", "identifierList", 
		"identifier", "literal", "nullLiteral", "booleanLiteral", "numberLiteral", 
		"integerLiteral", "decimalLiteral", "scientificLiteral", "dateOrTimeLiteral", 
		"dateTimeOffsetLiteral", "dateTimeLiteral", "dateLiteral", "timeLiteral", 
		"charLiteral", "stringLiteral", "guidLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'generator'", "'using'", "'configuration'", "'properties'", 
		"'template'", "'function'", "'extern'", "'return'", "'switch'", "'case'", 
		"'type'", "'void'", "'end'", "'for'", "'foreach'", "'in'", "'if'", "'else'", 
		"'loop'", "'hasloop'", "'where'", "'orderby'", "'descending'", "'separator'", 
		"'null'", "'true'", "'false'", null, "'byte'", "'char'", "'decimal'", 
		"'double'", "'float'", "'int'", "'long'", "'object'", "'sbyte'", "'short'", 
		"'string'", "'uint'", "'ulong'", "'ushort'", "'this'", "'new'", "'is'", 
		"'as'", "'typeof'", "'default'", "';'", "':'", "'.'", "','", "'='", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", 
		"'('", "')'", null, "']'", "'{'", "'}'", "'=='", "'!='", "'=>'", "'->'", 
		"'<'", "'>'", "'<='", "'>='", "'?'", "'+'", "'-'", "'!'", "'~'", null, 
		"'/'", "'%'", "'++'", "'--'", "'::'", "'&'", "'^'", "'|'", "'&&'", "'^^'", 
		"'||'", "'??'", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'\"'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'@\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KGenerator", "KUsing", "KConfiguration", "KProperties", 
		"KTemplate", "KFunction", "KExtern", "KReturn", "KSwitch", "KCase", "KType", 
		"KVoid", "KEnd", "KFor", "KForEach", "KIn", "KIf", "KElse", "KLoop", "KHasLoop", 
		"KWhere", "KOrderBy", "KDescending", "KSeparator", "KNull", "KTrue", "KFalse", 
		"KBool", "KByte", "KChar", "KDecimal", "KDouble", "KFloat", "KInt", "KLong", 
		"KObject", "KSByte", "KShort", "KString", "KUInt", "KULong", "KUShort", 
		"KThis", "KNew", "KIs", "KAs", "KTypeof", "KDefault", "TSemicolon", "TColon", 
		"TDot", "TComma", "TAssign", "TAssignPlus", "TAssignMinus", "TAssignAsterisk", 
		"TAssignSlash", "TAssignPercent", "TAssignAmp", "TAssignPipe", "TAssignHat", 
		"TAssignLeftShift", "TAssignRightShift", "TOpenParenthesis", "TCloseParenthesis", 
		"TOpenBracket", "TCloseBracket", "TOpenBrace", "TCloseBrace", "TEquals", 
		"TNotEquals", "TArrow", "TSingleArrow", "TLessThan", "TGreaterThan", "TLessThanOrEquals", 
		"TGreaterThanOrEquals", "TQuestion", "TPlus", "TMinus", "TExclamation", 
		"TTilde", "TAsterisk", "TSlash", "TPercent", "TPlusPlus", "TMinusMinus", 
		"TColonColon", "TAmp", "THat", "TPipe", "TAnd", "TXor", "TOr", "TQuestionQuestion", 
		"IdentifierNormal", "IntegerLiteral", "DecimalLiteral", "ScientificLiteral", 
		"DateTimeOffsetLiteral", "DateTimeLiteral", "DateLiteral", "TimeLiteral", 
		"CharLiteral", "RegularStringLiteral", "GuidLiteral", "UTF8BOM", "WHITESPACE", 
		"CRLF", "LINEBREAK", "LINE_COMMENT", "COMMENT", "DoubleQuoteVerbatimStringLiteral", 
		"TH_CRLF", "TH_LINEBREAK", "TH_TOpenParenthesis", "TH_TCloseParenthesis", 
		"KEndTemplate", "TemplateLineControl", "TemplateOutput", "TemplateCrLf", 
		"TemplateLineBreak", "TemplateStatementStart", "TemplateStatementEnd", 
		"TS_TOpenBracket", "TS_TCloseBracket", "DoubleQuoteVerbatimStringLiteralStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaGeneratorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaGeneratorParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public GeneratorDeclarationContext generatorDeclaration() {
			return GetRuleContext<GeneratorDeclarationContext>(0);
		}
		public UsingDeclarationContext[] usingDeclaration() {
			return GetRuleContexts<UsingDeclarationContext>();
		}
		public UsingDeclarationContext usingDeclaration(int i) {
			return GetRuleContext<UsingDeclarationContext>(i);
		}
		public ConfigDeclarationContext configDeclaration() {
			return GetRuleContext<ConfigDeclarationContext>(0);
		}
		public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; namespaceDeclaration();
			State = 177; generatorDeclaration();
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KUsing) {
				{
				{
				State = 178; usingDeclaration();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 185;
			_la = TokenStream.La(1);
			if (_la==KProperties) {
				{
				State = 184; configDeclaration();
				}
			}

			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KTemplate) | (1L << KFunction) | (1L << KExtern))) != 0)) {
				{
				{
				State = 187; methodDeclaration();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaGeneratorParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(KNamespace);
			State = 194; qualifiedName();
			State = 195; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorDeclarationContext : ParserRuleContext {
		public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public GeneratorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGeneratorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGeneratorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorDeclarationContext generatorDeclaration() {
		GeneratorDeclarationContext _localctx = new GeneratorDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_generatorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(KGenerator);
			State = 198; identifier();
			{
			State = 199; Match(KFor);
			State = 200; typeReference();
			}
			State = 202; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
	 
		public UsingDeclarationContext() { }
		public virtual void CopyFrom(UsingDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingNamespaceDeclarationContext : UsingDeclarationContext {
		public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public UsingNamespaceDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUsingNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUsingNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingGeneratorDeclarationContext : UsingDeclarationContext {
		public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UsingGeneratorDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUsingGeneratorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUsingGeneratorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_usingDeclaration);
		int _la;
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new UsingNamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 204; Match(KUsing);
				State = 205; qualifiedName();
				State = 206; Match(TSemicolon);
				}
				break;
			case 2:
				_localctx = new UsingGeneratorDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 208; Match(KUsing);
				State = 209; Match(KGenerator);
				State = 210; qualifiedName();
				State = 212;
				_la = TokenStream.La(1);
				if (_la==IdentifierNormal) {
					{
					State = 211; identifier();
					}
				}

				State = 214; Match(TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigDeclarationContext : ParserRuleContext {
		public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigDeclarationContext configDeclaration() {
		ConfigDeclarationContext _localctx = new ConfigDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_configDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(KProperties);
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 219; identifier();
				}
				break;
			}
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				{
				State = 222; configProperty();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 228; Match(KEnd);
			State = 229; Match(KProperties);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigPropertyContext : ParserRuleContext {
		public ConfigPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configProperty; } }
	 
		public ConfigPropertyContext() { }
		public virtual void CopyFrom(ConfigPropertyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConfigPropertyGroupDeclarationContext : ConfigPropertyContext {
		public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigPropertyGroupDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigPropertyGroupDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigPropertyGroupDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyGroupDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConfigPropertyDeclarationContext : ConfigPropertyContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConfigPropertyDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigPropertyContext configProperty() {
		ConfigPropertyContext _localctx = new ConfigPropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_configProperty);
		int _la;
		try {
			State = 250;
			switch (TokenStream.La(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				_localctx = new ConfigPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 231; typeReference();
				State = 232; identifier();
				State = 235;
				_la = TokenStream.La(1);
				if (_la==TAssign) {
					{
					State = 233; Match(TAssign);
					State = 234; expression(0);
					}
				}

				State = 237; Match(TSemicolon);
				}
				break;
			case KProperties:
				_localctx = new ConfigPropertyGroupDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 239; Match(KProperties);
				State = 240; identifier();
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					{
					State = 241; configProperty();
					}
					}
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 247; Match(KEnd);
				State = 248; Match(KProperties);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		public ExternFunctionDeclarationContext externFunctionDeclaration() {
			return GetRuleContext<ExternFunctionDeclarationContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_methodDeclaration);
		try {
			State = 255;
			switch (TokenStream.La(1)) {
			case KFunction:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252; functionDeclaration();
				}
				break;
			case KTemplate:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253; templateDeclaration();
				}
				break;
			case KExtern:
				EnterOuterAlt(_localctx, 3);
				{
				State = 254; externFunctionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternFunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode KExtern() { return GetToken(MetaGeneratorParser.KExtern, 0); }
		public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		public ExternFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externFunctionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExternFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExternFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternFunctionDeclarationContext externFunctionDeclaration() {
		ExternFunctionDeclarationContext _localctx = new ExternFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_externFunctionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(KExtern);
			State = 258; functionSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; functionSignature();
			State = 261; body();
			State = 262; Match(KEnd);
			State = 263; Match(KFunction);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(KFunction);
			State = 266; returnType();
			State = 267; identifier();
			State = 268; Match(TOpenParenthesis);
			State = 270;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 269; paramList();
				}
			}

			State = 272; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 20, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; parameter();
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 275; Match(TComma);
				State = 276; parameter();
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; typeReference();
			State = 283; identifier();
			State = 286;
			_la = TokenStream.La(1);
			if (_la==TAssign) {
				{
				State = 284; Match(TAssign);
				State = 285; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_body);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 288; statement();
					}
					} 
				}
				State = 293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294; variableDeclarationStatement();
				State = 295; Match(TSemicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297; returnStatement();
				State = 298; Match(TSemicolon);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 300; expressionStatement();
				State = 301; Match(TSemicolon);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 303; ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 304; loopStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 305; switchStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; typeReference();
			State = 309; identifier();
			State = 312;
			_la = TokenStream.La(1);
			if (_la==TAssign) {
				{
				State = 310; Match(TAssign);
				State = 311; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode KReturn() { return GetToken(MetaGeneratorParser.KReturn, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(KReturn);
			State = 315; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		public BodyContext[] body() {
			return GetRuleContexts<BodyContext>();
		}
		public BodyContext body(int i) {
			return GetRuleContext<BodyContext>(i);
		}
		public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; ifStatementBegin();
			State = 320; body();
			State = 326;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 321; elseIfStatement();
					State = 322; body();
					}
					} 
				}
				State = 328;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 332;
			_la = TokenStream.La(1);
			if (_la==KElse) {
				{
				State = 329; ifStatementElse();
				State = 330; body();
				}
			}

			State = 334; ifStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementBeginContext : ParserRuleContext {
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public IfStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementBeginContext ifStatementBegin() {
		IfStatementBeginContext _localctx = new IfStatementBeginContext(Context, State);
		EnterRule(_localctx, 36, RULE_ifStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(KIf);
			State = 337; Match(TOpenParenthesis);
			State = 338; expression(0);
			State = 339; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(KElse);
			State = 342; Match(KIf);
			State = 343; Match(TOpenParenthesis);
			State = 344; expression(0);
			State = 345; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementElseContext : ParserRuleContext {
		public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		public IfStatementElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementElseContext ifStatementElse() {
		IfStatementElseContext _localctx = new IfStatementElseContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifStatementElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(KElse);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public IfStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementEndContext ifStatementEnd() {
		IfStatementEndContext _localctx = new IfStatementEndContext(Context, State);
		EnterRule(_localctx, 42, RULE_ifStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(KEnd);
			State = 350; Match(KIf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; loopStatementBegin();
			State = 353; body();
			State = 354; loopStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementBeginContext : ParserRuleContext {
		public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		public LoopRunExpressionContext loopRunExpression() {
			return GetRuleContext<LoopRunExpressionContext>(0);
		}
		public LoopStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementBeginContext loopStatementBegin() {
		LoopStatementBeginContext _localctx = new LoopStatementBeginContext(Context, State);
		EnterRule(_localctx, 46, RULE_loopStatementBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(KLoop);
			State = 357; Match(TOpenParenthesis);
			State = 358; loopChain();
			State = 360;
			_la = TokenStream.La(1);
			if (_la==KWhere) {
				{
				State = 359; loopWhereExpression();
				}
			}

			State = 363;
			_la = TokenStream.La(1);
			if (_la==TSemicolon) {
				{
				State = 362; loopRunExpression();
				}
			}

			State = 365; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		public LoopStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementEndContext loopStatementEnd() {
		LoopStatementEndContext _localctx = new LoopStatementEndContext(Context, State);
		EnterRule(_localctx, 48, RULE_loopStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(KEnd);
			State = 368; Match(KLoop);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainContext : ParserRuleContext {
		public LoopChainItemContext[] loopChainItem() {
			return GetRuleContexts<LoopChainItemContext>();
		}
		public LoopChainItemContext loopChainItem(int i) {
			return GetRuleContext<LoopChainItemContext>(i);
		}
		public ITerminalNode[] TSingleArrow() { return GetTokens(MetaGeneratorParser.TSingleArrow); }
		public ITerminalNode TSingleArrow(int i) {
			return GetToken(MetaGeneratorParser.TSingleArrow, i);
		}
		public LoopChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainContext loopChain() {
		LoopChainContext _localctx = new LoopChainContext(Context, State);
		EnterRule(_localctx, 50, RULE_loopChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; loopChainItem();
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TSingleArrow) {
				{
				{
				State = 371; Match(TSingleArrow);
				State = 372; loopChainItem();
				}
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainItemContext : ParserRuleContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public LoopChainItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainItemContext loopChainItem() {
		LoopChainItemContext _localctx = new LoopChainItemContext(Context, State);
		EnterRule(_localctx, 52, RULE_loopChainItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 379;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 378; typeReference();
					}
					break;
				}
				State = 381; identifier();
				State = 382; Match(TColon);
				}
				break;
			}
			State = 386; loopChainExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainExpressionContext : ParserRuleContext {
		public LoopChainExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainExpression; } }
	 
		public LoopChainExpressionContext() { }
		public virtual void CopyFrom(LoopChainExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopChainMemberAccessExpressionContext : LoopChainExpressionContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainMemberAccessExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainMethodCallExpressionContext : LoopChainExpressionContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public LoopChainMethodCallExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainMethodCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainIdentifierExpressionContext : LoopChainExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainIdentifierExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainTypeofExpressionContext : LoopChainExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopChainTypeofExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainTypeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainExpressionContext loopChainExpression() {
		return loopChainExpression(0);
	}

	private LoopChainExpressionContext loopChainExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LoopChainExpressionContext _localctx = new LoopChainExpressionContext(Context, _parentState);
		LoopChainExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_loopChainExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			switch (TokenStream.La(1)) {
			case KTypeof:
				{
				_localctx = new LoopChainTypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 389; Match(KTypeof);
				State = 390; Match(TOpenParenthesis);
				State = 391; typeReference();
				State = 392; Match(TCloseParenthesis);
				}
				break;
			case IdentifierNormal:
				{
				_localctx = new LoopChainIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 394; identifier();
				State = 396;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 395; typeArgumentList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 414;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 412;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new LoopChainMemberAccessExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 400;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 401; Match(TDot);
						State = 402; identifier();
						State = 404;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
						case 1:
							{
							State = 403; typeArgumentList();
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new LoopChainMethodCallExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 406;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 407; Match(TOpenParenthesis);
						State = 409;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TOpenParenthesis - 65)) | (1L << (TPlus - 65)) | (1L << (TMinus - 65)) | (1L << (TExclamation - 65)) | (1L << (TTilde - 65)) | (1L << (TPlusPlus - 65)) | (1L << (TMinusMinus - 65)) | (1L << (IdentifierNormal - 65)) | (1L << (IntegerLiteral - 65)) | (1L << (DecimalLiteral - 65)) | (1L << (ScientificLiteral - 65)) | (1L << (DateTimeOffsetLiteral - 65)) | (1L << (DateTimeLiteral - 65)) | (1L << (DateLiteral - 65)) | (1L << (TimeLiteral - 65)) | (1L << (CharLiteral - 65)) | (1L << (RegularStringLiteral - 65)) | (1L << (GuidLiteral - 65)) | (1L << (DoubleQuoteVerbatimStringLiteral - 65)))) != 0)) {
							{
							State = 408; expressionList();
							}
						}

						State = 411; Match(TCloseParenthesis);
						}
						break;
					}
					} 
				}
				State = 416;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LoopWhereExpressionContext : ParserRuleContext {
		public ITerminalNode KWhere() { return GetToken(MetaGeneratorParser.KWhere, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopWhereExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopWhereExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopWhereExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopWhereExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopWhereExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopWhereExpressionContext loopWhereExpression() {
		LoopWhereExpressionContext _localctx = new LoopWhereExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_loopWhereExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(KWhere);
			State = 418; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopRunExpressionContext : ParserRuleContext {
		public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public LoopRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopRunExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopRunExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopRunExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopRunExpressionContext loopRunExpression() {
		LoopRunExpressionContext _localctx = new LoopRunExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_loopRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorStatementContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode KSeparator() { return GetToken(MetaGeneratorParser.KSeparator, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public SeparatorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSeparatorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSeparatorStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorStatementContext separatorStatement() {
		SeparatorStatementContext _localctx = new SeparatorStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_separatorStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(TSemicolon);
			State = 423; Match(KSeparator);
			State = 424; identifier();
			State = 425; Match(TAssign);
			State = 426; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		public SwitchBranchStatementContext[] switchBranchStatement() {
			return GetRuleContexts<SwitchBranchStatementContext>();
		}
		public SwitchBranchStatementContext switchBranchStatement(int i) {
			return GetRuleContext<SwitchBranchStatementContext>(i);
		}
		public SwitchDefaultStatementContext switchDefaultStatement() {
			return GetRuleContext<SwitchDefaultStatementContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; switchStatementBegin();
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KCase || _la==KType) {
				{
				{
				State = 429; switchBranchStatement();
				}
				}
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 436;
			_la = TokenStream.La(1);
			if (_la==KDefault) {
				{
				State = 435; switchDefaultStatement();
				}
			}

			State = 438; switchStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementBeginContext : ParserRuleContext {
		public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public SwitchStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementBeginContext switchStatementBegin() {
		SwitchStatementBeginContext _localctx = new SwitchStatementBeginContext(Context, State);
		EnterRule(_localctx, 64, RULE_switchStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(KSwitch);
			State = 441; Match(TOpenParenthesis);
			State = 442; expression(0);
			State = 443; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		public SwitchStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementEndContext switchStatementEnd() {
		SwitchStatementEndContext _localctx = new SwitchStatementEndContext(Context, State);
		EnterRule(_localctx, 66, RULE_switchStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; Match(KEnd);
			State = 446; Match(KSwitch);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchStatementContext : ParserRuleContext {
		public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchBranchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchBranchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchBranchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchStatementContext switchBranchStatement() {
		SwitchBranchStatementContext _localctx = new SwitchBranchStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_switchBranchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; switchBranchHeadStatement();
			State = 449; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchHeadStatementContext : ParserRuleContext {
		public SwitchCaseOrTypeIsHeadStatementContext[] switchCaseOrTypeIsHeadStatement() {
			return GetRuleContexts<SwitchCaseOrTypeIsHeadStatementContext>();
		}
		public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement(int i) {
			return GetRuleContext<SwitchCaseOrTypeIsHeadStatementContext>(i);
		}
		public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
			return GetRuleContext<SwitchTypeAsHeadStatementContext>(0);
		}
		public SwitchBranchHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchBranchHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchBranchHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
		SwitchBranchHeadStatementContext _localctx = new SwitchBranchHeadStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_switchBranchHeadStatement);
		try {
			int _alt;
			State = 457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 452;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 451; switchCaseOrTypeIsHeadStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 454;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 456; switchTypeAsHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseOrTypeIsHeadStatementContext : ParserRuleContext {
		public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
			return GetRuleContext<SwitchCaseHeadStatementContext>(0);
		}
		public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
			return GetRuleContext<SwitchTypeIsHeadStatementContext>(0);
		}
		public SwitchCaseOrTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseOrTypeIsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseOrTypeIsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseOrTypeIsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseOrTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement() {
		SwitchCaseOrTypeIsHeadStatementContext _localctx = new SwitchCaseOrTypeIsHeadStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_switchCaseOrTypeIsHeadStatement);
		try {
			State = 461;
			switch (TokenStream.La(1)) {
			case KCase:
				EnterOuterAlt(_localctx, 1);
				{
				State = 459; switchCaseHeadStatement();
				}
				break;
			case KType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 460; switchTypeIsHeadStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseHeadStatementContext : ParserRuleContext {
		public ITerminalNode KCase() { return GetToken(MetaGeneratorParser.KCase, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchCaseHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
		SwitchCaseHeadStatementContext _localctx = new SwitchCaseHeadStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_switchCaseHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(KCase);
			State = 464; expressionList();
			State = 465; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeIsHeadStatementContext : ParserRuleContext {
		public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeIsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchTypeIsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchTypeIsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
		SwitchTypeIsHeadStatementContext _localctx = new SwitchTypeIsHeadStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_switchTypeIsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; Match(KType);
			State = 468; Match(KIs);
			State = 469; typeReferenceList();
			State = 470; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeAsHeadStatementContext : ParserRuleContext {
		public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeAsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeAsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchTypeAsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchTypeAsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeAsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
		SwitchTypeAsHeadStatementContext _localctx = new SwitchTypeAsHeadStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_switchTypeAsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; Match(KType);
			State = 473; Match(KAs);
			State = 474; typeReference();
			State = 475; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultStatementContext : ParserRuleContext {
		public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchDefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchDefaultStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchDefaultStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultStatementContext switchDefaultStatement() {
		SwitchDefaultStatementContext _localctx = new SwitchDefaultStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_switchDefaultStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; switchDefaultHeadStatement();
			State = 478; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultHeadStatementContext : ParserRuleContext {
		public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchDefaultHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchDefaultHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchDefaultHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
		SwitchDefaultHeadStatementContext _localctx = new SwitchDefaultHeadStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_switchDefaultHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480; Match(KDefault);
			State = 481; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDeclarationContext : ParserRuleContext {
		public TemplateSignatureContext templateSignature() {
			return GetRuleContext<TemplateSignatureContext>(0);
		}
		public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		public ITerminalNode KEndTemplate() { return GetToken(MetaGeneratorParser.KEndTemplate, 0); }
		public TemplateDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDeclarationContext templateDeclaration() {
		TemplateDeclarationContext _localctx = new TemplateDeclarationContext(Context, State);
		EnterRule(_localctx, 84, RULE_templateDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483; templateSignature();
			State = 484; templateBody();
			State = 485; Match(KEndTemplate);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateSignatureContext : ParserRuleContext {
		public ITerminalNode KTemplate() { return GetToken(MetaGeneratorParser.KTemplate, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public TemplateSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateSignatureContext templateSignature() {
		TemplateSignatureContext _localctx = new TemplateSignatureContext(Context, State);
		EnterRule(_localctx, 86, RULE_templateSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; Match(KTemplate);
			State = 488; identifier();
			State = 489; Match(TOpenParenthesis);
			State = 491;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 490; paramList();
				}
			}

			State = 493; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBodyContext : ParserRuleContext {
		public TemplateContentLineContext[] templateContentLine() {
			return GetRuleContexts<TemplateContentLineContext>();
		}
		public TemplateContentLineContext templateContentLine(int i) {
			return GetRuleContext<TemplateContentLineContext>(i);
		}
		public TemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBodyContext templateBody() {
		TemplateBodyContext _localctx = new TemplateBodyContext(Context, State);
		EnterRule(_localctx, 88, RULE_templateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & ((1L << (TemplateLineControl - 120)) | (1L << (TemplateOutput - 120)) | (1L << (TemplateCrLf - 120)) | (1L << (TemplateLineBreak - 120)) | (1L << (TemplateStatementStart - 120)))) != 0)) {
				{
				{
				State = 495; templateContentLine();
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContentLineContext : ParserRuleContext {
		public TemplateLineEndContext templateLineEnd() {
			return GetRuleContext<TemplateLineEndContext>(0);
		}
		public TemplateOutputContext[] templateOutput() {
			return GetRuleContexts<TemplateOutputContext>();
		}
		public TemplateOutputContext templateOutput(int i) {
			return GetRuleContext<TemplateOutputContext>(i);
		}
		public TemplateStatementStartEndContext[] templateStatementStartEnd() {
			return GetRuleContexts<TemplateStatementStartEndContext>();
		}
		public TemplateStatementStartEndContext templateStatementStartEnd(int i) {
			return GetRuleContext<TemplateStatementStartEndContext>(i);
		}
		public TemplateContentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContentLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateContentLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateContentLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContentLineContext templateContentLine() {
		TemplateContentLineContext _localctx = new TemplateContentLineContext(Context, State);
		EnterRule(_localctx, 90, RULE_templateContentLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TemplateOutput || _la==TemplateStatementStart) {
				{
				State = 503;
				switch (TokenStream.La(1)) {
				case TemplateOutput:
					{
					State = 501; templateOutput();
					}
					break;
				case TemplateStatementStart:
					{
					State = 502; templateStatementStartEnd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 508; templateLineEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateOutputContext : ParserRuleContext {
		public ITerminalNode TemplateOutput() { return GetToken(MetaGeneratorParser.TemplateOutput, 0); }
		public TemplateOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateOutputContext templateOutput() {
		TemplateOutputContext _localctx = new TemplateOutputContext(Context, State);
		EnterRule(_localctx, 92, RULE_templateOutput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510; Match(TemplateOutput);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateLineEndContext : ParserRuleContext {
		public ITerminalNode TemplateCrLf() { return GetToken(MetaGeneratorParser.TemplateCrLf, 0); }
		public ITerminalNode TemplateLineBreak() { return GetToken(MetaGeneratorParser.TemplateLineBreak, 0); }
		public ITerminalNode TemplateLineControl() { return GetToken(MetaGeneratorParser.TemplateLineControl, 0); }
		public TemplateLineEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateLineEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateLineEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateLineEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateLineEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateLineEndContext templateLineEnd() {
		TemplateLineEndContext _localctx = new TemplateLineEndContext(Context, State);
		EnterRule(_localctx, 94, RULE_templateLineEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			_la = TokenStream.La(1);
			if ( !(((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & ((1L << (TemplateLineControl - 120)) | (1L << (TemplateCrLf - 120)) | (1L << (TemplateLineBreak - 120)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementStartEndContext : ParserRuleContext {
		public ITerminalNode TemplateStatementStart() { return GetToken(MetaGeneratorParser.TemplateStatementStart, 0); }
		public ITerminalNode TemplateStatementEnd() { return GetToken(MetaGeneratorParser.TemplateStatementEnd, 0); }
		public TemplateStatementContext templateStatement() {
			return GetRuleContext<TemplateStatementContext>(0);
		}
		public TemplateStatementStartEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatementStartEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateStatementStartEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateStatementStartEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatementStartEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementStartEndContext templateStatementStartEnd() {
		TemplateStatementStartEndContext _localctx = new TemplateStatementStartEndContext(Context, State);
		EnterRule(_localctx, 96, RULE_templateStatementStartEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514; Match(TemplateStatementStart);
			State = 516;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KSwitch) | (1L << KCase) | (1L << KType) | (1L << KEnd) | (1L << KIf) | (1L << KElse) | (1L << KLoop) | (1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TOpenParenthesis - 65)) | (1L << (TPlus - 65)) | (1L << (TMinus - 65)) | (1L << (TExclamation - 65)) | (1L << (TTilde - 65)) | (1L << (TPlusPlus - 65)) | (1L << (TMinusMinus - 65)) | (1L << (IdentifierNormal - 65)) | (1L << (IntegerLiteral - 65)) | (1L << (DecimalLiteral - 65)) | (1L << (ScientificLiteral - 65)) | (1L << (DateTimeOffsetLiteral - 65)) | (1L << (DateTimeLiteral - 65)) | (1L << (DateLiteral - 65)) | (1L << (TimeLiteral - 65)) | (1L << (CharLiteral - 65)) | (1L << (RegularStringLiteral - 65)) | (1L << (GuidLiteral - 65)) | (1L << (DoubleQuoteVerbatimStringLiteral - 65)))) != 0)) {
				{
				State = 515; templateStatement();
				}
			}

			State = 518; Match(TemplateStatementEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementContext : ParserRuleContext {
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		public TemplateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementContext templateStatement() {
		TemplateStatementContext _localctx = new TemplateStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_templateStatement);
		try {
			State = 532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520; variableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 521; expressionStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 522; ifStatementBegin();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 523; elseIfStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 524; ifStatementElse();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 525; ifStatementEnd();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 526; loopStatementBegin();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 527; loopStatementEnd();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 528; switchStatementBegin();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 529; switchStatementEnd();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 530; switchBranchHeadStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 531; switchDefaultHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 100, RULE_typeArgumentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534; Match(TLessThan);
			State = 535; typeReferenceList();
			State = 536; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		public ITerminalNode KBool() { return GetToken(MetaGeneratorParser.KBool, 0); }
		public ITerminalNode KByte() { return GetToken(MetaGeneratorParser.KByte, 0); }
		public ITerminalNode KChar() { return GetToken(MetaGeneratorParser.KChar, 0); }
		public ITerminalNode KDecimal() { return GetToken(MetaGeneratorParser.KDecimal, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaGeneratorParser.KDouble, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaGeneratorParser.KFloat, 0); }
		public ITerminalNode KInt() { return GetToken(MetaGeneratorParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaGeneratorParser.KLong, 0); }
		public ITerminalNode KObject() { return GetToken(MetaGeneratorParser.KObject, 0); }
		public ITerminalNode KSByte() { return GetToken(MetaGeneratorParser.KSByte, 0); }
		public ITerminalNode KShort() { return GetToken(MetaGeneratorParser.KShort, 0); }
		public ITerminalNode KString() { return GetToken(MetaGeneratorParser.KString, 0); }
		public ITerminalNode KUInt() { return GetToken(MetaGeneratorParser.KUInt, 0); }
		public ITerminalNode KULong() { return GetToken(MetaGeneratorParser.KULong, 0); }
		public ITerminalNode KUShort() { return GetToken(MetaGeneratorParser.KUShort, 0); }
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 102, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceListContext : ParserRuleContext {
		public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public TypeReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReferenceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeReferenceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeReferenceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceListContext typeReferenceList() {
		TypeReferenceListContext _localctx = new TypeReferenceListContext(Context, State);
		EnterRule(_localctx, 104, RULE_typeReferenceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; typeReference();
			State = 545;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 541; Match(TComma);
				State = 542; typeReference();
				}
				}
				State = 547;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 106, RULE_typeReference);
		try {
			State = 552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 548; arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 549; nullableType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 550; genericType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 551; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public RankSpecifiersContext rankSpecifiers() {
			return GetRuleContext<RankSpecifiersContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 108, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 554; nullableType();
				}
				break;
			case 2:
				{
				State = 555; genericType();
				}
				break;
			case 3:
				{
				State = 556; simpleType();
				}
				break;
			}
			State = 559; rankSpecifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 110, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 561; genericType();
				}
				break;
			case 2:
				{
				State = 562; simpleType();
				}
				break;
			}
			State = 565; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_genericType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; qualifiedName();
			State = 568; typeArgumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_simpleType);
		try {
			State = 572;
			switch (TokenStream.La(1)) {
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570; qualifiedName();
				}
				break;
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571; predefinedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_returnType);
		try {
			State = 578;
			switch (TokenStream.La(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 576; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 577; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 120, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580; expression(0);
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 581; Match(TComma);
				State = 582; expression(0);
				}
				}
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 122, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifiersContext : ParserRuleContext {
		public RankSpecifierContext[] rankSpecifier() {
			return GetRuleContexts<RankSpecifierContext>();
		}
		public RankSpecifierContext rankSpecifier(int i) {
			return GetRuleContext<RankSpecifierContext>(i);
		}
		public RankSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRankSpecifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRankSpecifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifiersContext rankSpecifiers() {
		RankSpecifiersContext _localctx = new RankSpecifiersContext(Context, State);
		EnterRule(_localctx, 124, RULE_rankSpecifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 590; rankSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 593;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifierContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public RankSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRankSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRankSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifierContext rankSpecifier() {
		RankSpecifierContext _localctx = new RankSpecifierContext(Context, State);
		EnterRule(_localctx, 126, RULE_rankSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595; Match(TOpenBracket);
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 596; Match(TComma);
				}
				}
				State = 601;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 602; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnboundTypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public GenericDimensionSpecifierContext[] genericDimensionSpecifier() {
			return GetRuleContexts<GenericDimensionSpecifierContext>();
		}
		public GenericDimensionSpecifierContext genericDimensionSpecifier(int i) {
			return GetRuleContext<GenericDimensionSpecifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public UnboundTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unboundTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUnboundTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUnboundTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnboundTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnboundTypeNameContext unboundTypeName() {
		UnboundTypeNameContext _localctx = new UnboundTypeNameContext(Context, State);
		EnterRule(_localctx, 128, RULE_unboundTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604; identifier();
			State = 606;
			_la = TokenStream.La(1);
			if (_la==TLessThan) {
				{
				State = 605; genericDimensionSpecifier();
				}
			}

			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TDot) {
				{
				{
				State = 608; Match(TDot);
				State = 609; identifier();
				State = 611;
				_la = TokenStream.La(1);
				if (_la==TLessThan) {
					{
					State = 610; genericDimensionSpecifier();
					}
				}

				}
				}
				State = 617;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDimensionSpecifierContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public GenericDimensionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDimensionSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericDimensionSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericDimensionSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericDimensionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericDimensionSpecifierContext genericDimensionSpecifier() {
		GenericDimensionSpecifierContext _localctx = new GenericDimensionSpecifierContext(Context, State);
		EnterRule(_localctx, 130, RULE_genericDimensionSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; Match(TLessThan);
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 619; Match(TComma);
				}
				}
				State = 624;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 625; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionSignatureContext : ParserRuleContext {
		public AnonymousFunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionSignature; } }
	 
		public AnonymousFunctionSignatureContext() { }
		public virtual void CopyFrom(AnonymousFunctionSignatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleParamAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ImplicitParameterContext implicitParameter() {
			return GetRuleContext<ImplicitParameterContext>(0);
		}
		public SingleParamAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSingleParamAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSingleParamAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleParamAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ImplicitParameterContext[] implicitParameter() {
			return GetRuleContexts<ImplicitParameterContext>();
		}
		public ImplicitParameterContext implicitParameter(int i) {
			return GetRuleContext<ImplicitParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ImplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterImplicitAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitImplicitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExplicitParameterContext[] explicitParameter() {
			return GetRuleContexts<ExplicitParameterContext>();
		}
		public ExplicitParameterContext explicitParameter(int i) {
			return GetRuleContext<ExplicitParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
		AnonymousFunctionSignatureContext _localctx = new AnonymousFunctionSignatureContext(Context, State);
		EnterRule(_localctx, 132, RULE_anonymousFunctionSignature);
		int _la;
		try {
			State = 652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				_localctx = new ExplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 627; Match(TOpenParenthesis);
				State = 636;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					State = 628; explicitParameter();
					State = 633;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==TComma) {
						{
						{
						State = 629; Match(TComma);
						State = 630; explicitParameter();
						}
						}
						State = 635;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
				}

				State = 638; Match(TCloseParenthesis);
				}
				break;
			case 2:
				_localctx = new ImplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 639; Match(TOpenParenthesis);
				State = 648;
				_la = TokenStream.La(1);
				if (_la==IdentifierNormal) {
					{
					State = 640; implicitParameter();
					State = 645;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==TComma) {
						{
						{
						State = 641; Match(TComma);
						State = 642; implicitParameter();
						}
						}
						State = 647;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
				}

				State = 650; Match(TCloseParenthesis);
				}
				break;
			case 3:
				_localctx = new SingleParamAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 651; implicitParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExplicitParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExplicitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitParameterContext explicitParameter() {
		ExplicitParameterContext _localctx = new ExplicitParameterContext(Context, State);
		EnterRule(_localctx, 134, RULE_explicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654; typeReference();
			State = 655; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterImplicitParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitImplicitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitParameterContext implicitParameter() {
		ImplicitParameterContext _localctx = new ImplicitParameterContext(Context, State);
		EnterRule(_localctx, 136, RULE_implicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeofUnboundTypeExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public UnboundTypeNameContext unboundTypeName() {
			return GetRuleContext<UnboundTypeNameContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofUnboundTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofUnboundTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofUnboundTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofUnboundTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		public TypecheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypecheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypecheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public ITerminalNode TLessThanOrEquals() { return GetToken(MetaGeneratorParser.TLessThanOrEquals, 0); }
		public ITerminalNode TGreaterThanOrEquals() { return GetToken(MetaGeneratorParser.TGreaterThanOrEquals, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public PostExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPostExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPostExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofVoidExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofVoidExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofVoidExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofVoidExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofVoidExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseAndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAmp() { return GetToken(MetaGeneratorParser.TAmp, 0); }
		public BitwiseAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAnd() { return GetToken(MetaGeneratorParser.TAnd, 0); }
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		public ITerminalNode TExclamation() { return GetToken(MetaGeneratorParser.TExclamation, 0); }
		public ITerminalNode TTilde() { return GetToken(MetaGeneratorParser.TTilde, 0); }
		public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecastExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypecastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypecastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypecastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalXorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TXor() { return GetToken(MetaGeneratorParser.TXor, 0); }
		public LogicalXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefinedTypeMemberAccessExpressionContext : ExpressionContext {
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public PredefinedTypeMemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPredefinedTypeMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPredefinedTypeMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedTypeMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseXorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THat() { return GetToken(MetaGeneratorParser.THat, 0); }
		public BitwiseXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
			return GetRuleContext<AnonymousFunctionSignatureContext>(0);
		}
		public ITerminalNode TArrow() { return GetToken(MetaGeneratorParser.TArrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultValueExpressionContext : ExpressionContext {
		public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public DefaultValueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ITerminalNode TAssignPlus() { return GetToken(MetaGeneratorParser.TAssignPlus, 0); }
		public ITerminalNode TAssignMinus() { return GetToken(MetaGeneratorParser.TAssignMinus, 0); }
		public ITerminalNode TAssignAsterisk() { return GetToken(MetaGeneratorParser.TAssignAsterisk, 0); }
		public ITerminalNode TAssignSlash() { return GetToken(MetaGeneratorParser.TAssignSlash, 0); }
		public ITerminalNode TAssignPercent() { return GetToken(MetaGeneratorParser.TAssignPercent, 0); }
		public ITerminalNode TAssignAmp() { return GetToken(MetaGeneratorParser.TAssignAmp, 0); }
		public ITerminalNode TAssignPipe() { return GetToken(MetaGeneratorParser.TAssignPipe, 0); }
		public ITerminalNode TAssignHat() { return GetToken(MetaGeneratorParser.TAssignHat, 0); }
		public ITerminalNode TAssignLeftShift() { return GetToken(MetaGeneratorParser.TAssignLeftShift, 0); }
		public ITerminalNode TAssignRightShift() { return GetToken(MetaGeneratorParser.TAssignRightShift, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAsterisk() { return GetToken(MetaGeneratorParser.TAsterisk, 0); }
		public ITerminalNode TSlash() { return GetToken(MetaGeneratorParser.TSlash, 0); }
		public ITerminalNode TPercent() { return GetToken(MetaGeneratorParser.TPercent, 0); }
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectOrCollectionWithConstructorExpressionContext : ExpressionContext {
		public ITerminalNode KNew() { return GetToken(MetaGeneratorParser.KNew, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public NewObjectOrCollectionWithConstructorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNewObjectOrCollectionWithConstructorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNewObjectOrCollectionWithConstructorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectOrCollectionWithConstructorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TOr() { return GetToken(MetaGeneratorParser.TOr, 0); }
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TPipe() { return GetToken(MetaGeneratorParser.TPipe, 0); }
		public BitwiseOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HasLoopExpressionContext : ExpressionContext {
		public ITerminalNode KHasLoop() { return GetToken(MetaGeneratorParser.KHasLoop, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		public HasLoopExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterHasLoopExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitHasLoopExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ITerminalNode KThis() { return GetToken(MetaGeneratorParser.KThis, 0); }
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		public ElementAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElementAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElementAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofTypeExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TEquals() { return GetToken(MetaGeneratorParser.TEquals, 0); }
		public ITerminalNode TNotEquals() { return GetToken(MetaGeneratorParser.TNotEquals, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 138;
		EnterRecursionRule(_localctx, 138, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 660; Match(KThis);
				}
				break;
			case 2:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 661; literal();
				}
				break;
			case 3:
				{
				_localctx = new TypeofVoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 662; Match(KTypeof);
				State = 663; Match(TOpenParenthesis);
				State = 664; Match(KVoid);
				State = 665; Match(TCloseParenthesis);
				}
				break;
			case 4:
				{
				_localctx = new TypeofUnboundTypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 666; Match(KTypeof);
				State = 667; Match(TOpenParenthesis);
				State = 668; unboundTypeName();
				State = 669; Match(TCloseParenthesis);
				}
				break;
			case 5:
				{
				_localctx = new TypeofTypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 671; Match(KTypeof);
				State = 672; Match(TOpenParenthesis);
				State = 673; typeReference();
				State = 674; Match(TCloseParenthesis);
				}
				break;
			case 6:
				{
				_localctx = new DefaultValueExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 676; Match(KDefault);
				State = 677; Match(TOpenParenthesis);
				State = 678; typeReference();
				State = 679; Match(TCloseParenthesis);
				}
				break;
			case 7:
				{
				_localctx = new NewObjectOrCollectionWithConstructorExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 681; Match(KNew);
				State = 682; typeReference();
				State = 683; Match(TOpenParenthesis);
				State = 685;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TOpenParenthesis - 65)) | (1L << (TPlus - 65)) | (1L << (TMinus - 65)) | (1L << (TExclamation - 65)) | (1L << (TTilde - 65)) | (1L << (TPlusPlus - 65)) | (1L << (TMinusMinus - 65)) | (1L << (IdentifierNormal - 65)) | (1L << (IntegerLiteral - 65)) | (1L << (DecimalLiteral - 65)) | (1L << (ScientificLiteral - 65)) | (1L << (DateTimeOffsetLiteral - 65)) | (1L << (DateTimeLiteral - 65)) | (1L << (DateLiteral - 65)) | (1L << (TimeLiteral - 65)) | (1L << (CharLiteral - 65)) | (1L << (RegularStringLiteral - 65)) | (1L << (GuidLiteral - 65)) | (1L << (DoubleQuoteVerbatimStringLiteral - 65)))) != 0)) {
					{
					State = 684; expressionList();
					}
				}

				State = 687; Match(TCloseParenthesis);
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 689; identifier();
				State = 691;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 690; typeArgumentList();
					}
					break;
				}
				}
				break;
			case 9:
				{
				_localctx = new HasLoopExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 693; Match(KHasLoop);
				State = 694; Match(TOpenParenthesis);
				State = 695; loopChain();
				State = 697;
				_la = TokenStream.La(1);
				if (_la==KWhere) {
					{
					State = 696; loopWhereExpression();
					}
				}

				State = 699; Match(TCloseParenthesis);
				}
				break;
			case 10:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 701; Match(TOpenParenthesis);
				State = 702; expression(0);
				State = 703; Match(TCloseParenthesis);
				}
				break;
			case 11:
				{
				_localctx = new PredefinedTypeMemberAccessExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 705; predefinedType();
				State = 706; Match(TDot);
				State = 707; identifier();
				State = 709;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 708; typeArgumentList();
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new TypecastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 711; Match(TOpenParenthesis);
				State = 712; typeReference();
				State = 713; Match(TCloseParenthesis);
				State = 714; expression(17);
				}
				break;
			case 13:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 716;
				_la = TokenStream.La(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (TPlus - 80)) | (1L << (TMinus - 80)) | (1L << (TExclamation - 80)) | (1L << (TTilde - 80)) | (1L << (TPlusPlus - 80)) | (1L << (TMinusMinus - 80)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 717; expression(16);
				}
				break;
			case 14:
				{
				_localctx = new LambdaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 718; anonymousFunctionSignature();
				State = 719; Match(TArrow);
				State = 720; expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 787;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 785;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 724;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 725;
						_la = TokenStream.La(1);
						if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (TAsterisk - 84)) | (1L << (TSlash - 84)) | (1L << (TPercent - 84)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 726; expression(15);
						}
						break;
					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 727;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 728;
						_la = TokenStream.La(1);
						if ( !(_la==TPlus || _la==TMinus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 729; expression(14);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 730;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 731;
						_la = TokenStream.La(1);
						if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (TLessThan - 75)) | (1L << (TGreaterThan - 75)) | (1L << (TLessThanOrEquals - 75)) | (1L << (TGreaterThanOrEquals - 75)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 732; expression(13);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 733;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 734;
						_la = TokenStream.La(1);
						if ( !(_la==TEquals || _la==TNotEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 735; expression(11);
						}
						break;
					case 5:
						{
						_localctx = new BitwiseAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 736;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 737; Match(TAmp);
						State = 738; expression(10);
						}
						break;
					case 6:
						{
						_localctx = new BitwiseXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 739;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 740; Match(THat);
						State = 741; expression(9);
						}
						break;
					case 7:
						{
						_localctx = new BitwiseOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 742;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 743; Match(TPipe);
						State = 744; expression(8);
						}
						break;
					case 8:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 745;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 746; Match(TAnd);
						State = 747; expression(7);
						}
						break;
					case 9:
						{
						_localctx = new LogicalXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 748;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 749; Match(TXor);
						State = 750; expression(6);
						}
						break;
					case 10:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 751;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 752; Match(TOr);
						State = 753; expression(5);
						}
						break;
					case 11:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 754;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 755; Match(TQuestion);
						State = 756; expression(0);
						State = 757; Match(TColon);
						State = 758; expression(4);
						}
						break;
					case 12:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 760;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 761;
						_la = TokenStream.La(1);
						if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (TAssign - 54)) | (1L << (TAssignPlus - 54)) | (1L << (TAssignMinus - 54)) | (1L << (TAssignAsterisk - 54)) | (1L << (TAssignSlash - 54)) | (1L << (TAssignPercent - 54)) | (1L << (TAssignAmp - 54)) | (1L << (TAssignPipe - 54)) | (1L << (TAssignHat - 54)) | (1L << (TAssignLeftShift - 54)) | (1L << (TAssignRightShift - 54)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 762; expression(3);
						}
						break;
					case 13:
						{
						_localctx = new ElementAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 763;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 764; Match(TOpenBracket);
						State = 765; expressionList();
						State = 766; Match(TCloseBracket);
						}
						break;
					case 14:
						{
						_localctx = new FunctionCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 768;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 769; Match(TOpenParenthesis);
						State = 771;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TOpenParenthesis - 65)) | (1L << (TPlus - 65)) | (1L << (TMinus - 65)) | (1L << (TExclamation - 65)) | (1L << (TTilde - 65)) | (1L << (TPlusPlus - 65)) | (1L << (TMinusMinus - 65)) | (1L << (IdentifierNormal - 65)) | (1L << (IntegerLiteral - 65)) | (1L << (DecimalLiteral - 65)) | (1L << (ScientificLiteral - 65)) | (1L << (DateTimeOffsetLiteral - 65)) | (1L << (DateTimeLiteral - 65)) | (1L << (DateLiteral - 65)) | (1L << (TimeLiteral - 65)) | (1L << (CharLiteral - 65)) | (1L << (RegularStringLiteral - 65)) | (1L << (GuidLiteral - 65)) | (1L << (DoubleQuoteVerbatimStringLiteral - 65)))) != 0)) {
							{
							State = 770; expressionList();
							}
						}

						State = 773; Match(TCloseParenthesis);
						}
						break;
					case 15:
						{
						_localctx = new MemberAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 774;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 775; Match(TDot);
						State = 776; identifier();
						State = 778;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
						case 1:
							{
							State = 777; typeArgumentList();
							}
							break;
						}
						}
						break;
					case 16:
						{
						_localctx = new PostExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 780;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 781;
						_la = TokenStream.La(1);
						if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						}
						break;
					case 17:
						{
						_localctx = new TypecheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 782;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 783;
						_la = TokenStream.La(1);
						if ( !(_la==KIs || _la==KAs) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 784; typeReference();
						}
						break;
					}
					} 
				}
				State = 789;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 140, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 790; identifier();
			State = 795;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 791; Match(TDot);
					State = 792; identifier();
					}
					} 
				}
				State = 797;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 142, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798; identifier();
			State = 803;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 799; Match(TComma);
				State = 800; identifier();
				}
				}
				State = 805;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaGeneratorParser.IdentifierNormal, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806; Match(IdentifierNormal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public DateOrTimeLiteralContext dateOrTimeLiteral() {
			return GetRuleContext<DateOrTimeLiteralContext>(0);
		}
		public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public GuidLiteralContext guidLiteral() {
			return GetRuleContext<GuidLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 146, RULE_literal);
		try {
			State = 815;
			switch (TokenStream.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 808; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 809; booleanLiteral();
				}
				break;
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 810; numberLiteral();
				}
				break;
			case DateTimeOffsetLiteral:
			case DateTimeLiteral:
			case DateLiteral:
			case TimeLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 811; dateOrTimeLiteral();
				}
				break;
			case CharLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 812; charLiteral();
				}
				break;
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 813; stringLiteral();
				}
				break;
			case GuidLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 814; guidLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaGeneratorParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 148, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaGeneratorParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaGeneratorParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 150, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			_la = TokenStream.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 152, RULE_numberLiteral);
		try {
			State = 824;
			switch (TokenStream.La(1)) {
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 821; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 822; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 823; scientificLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(MetaGeneratorParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 154, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(MetaGeneratorParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 156, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 828; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(MetaGeneratorParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 158, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateOrTimeLiteralContext : ParserRuleContext {
		public DateTimeLiteralContext dateTimeLiteral() {
			return GetRuleContext<DateTimeLiteralContext>(0);
		}
		public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
			return GetRuleContext<DateTimeOffsetLiteralContext>(0);
		}
		public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		public TimeLiteralContext timeLiteral() {
			return GetRuleContext<TimeLiteralContext>(0);
		}
		public DateOrTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateOrTimeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateOrTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateOrTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateOrTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateOrTimeLiteralContext dateOrTimeLiteral() {
		DateOrTimeLiteralContext _localctx = new DateOrTimeLiteralContext(Context, State);
		EnterRule(_localctx, 160, RULE_dateOrTimeLiteral);
		try {
			State = 836;
			switch (TokenStream.La(1)) {
			case DateTimeLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 832; dateTimeLiteral();
				}
				break;
			case DateTimeOffsetLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 833; dateTimeOffsetLiteral();
				}
				break;
			case DateLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 834; dateLiteral();
				}
				break;
			case TimeLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 835; timeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeOffsetLiteralContext : ParserRuleContext {
		public ITerminalNode DateTimeOffsetLiteral() { return GetToken(MetaGeneratorParser.DateTimeOffsetLiteral, 0); }
		public DateTimeOffsetLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeOffsetLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateTimeOffsetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateTimeOffsetLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeOffsetLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
		DateTimeOffsetLiteralContext _localctx = new DateTimeOffsetLiteralContext(Context, State);
		EnterRule(_localctx, 162, RULE_dateTimeOffsetLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838; Match(DateTimeOffsetLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeLiteralContext : ParserRuleContext {
		public ITerminalNode DateTimeLiteral() { return GetToken(MetaGeneratorParser.DateTimeLiteral, 0); }
		public DateTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeLiteralContext dateTimeLiteral() {
		DateTimeLiteralContext _localctx = new DateTimeLiteralContext(Context, State);
		EnterRule(_localctx, 164, RULE_dateTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840; Match(DateTimeLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		public ITerminalNode DateLiteral() { return GetToken(MetaGeneratorParser.DateLiteral, 0); }
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(Context, State);
		EnterRule(_localctx, 166, RULE_dateLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842; Match(DateLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeLiteralContext : ParserRuleContext {
		public ITerminalNode TimeLiteral() { return GetToken(MetaGeneratorParser.TimeLiteral, 0); }
		public TimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeLiteralContext timeLiteral() {
		TimeLiteralContext _localctx = new TimeLiteralContext(Context, State);
		EnterRule(_localctx, 168, RULE_timeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844; Match(TimeLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		public ITerminalNode CharLiteral() { return GetToken(MetaGeneratorParser.CharLiteral, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterCharLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitCharLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 170, RULE_charLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846; Match(CharLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(MetaGeneratorParser.RegularStringLiteral, 0); }
		public ITerminalNode DoubleQuoteVerbatimStringLiteral() { return GetToken(MetaGeneratorParser.DoubleQuoteVerbatimStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 172, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848;
			_la = TokenStream.La(1);
			if ( !(_la==RegularStringLiteral || _la==DoubleQuoteVerbatimStringLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidLiteralContext : ParserRuleContext {
		public ITerminalNode GuidLiteral() { return GetToken(MetaGeneratorParser.GuidLiteral, 0); }
		public GuidLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guidLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGuidLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGuidLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuidLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuidLiteralContext guidLiteral() {
		GuidLiteralContext _localctx = new GuidLiteralContext(Context, State);
		EnterRule(_localctx, 174, RULE_guidLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850; Match(GuidLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return loopChainExpression_sempred((LoopChainExpressionContext)_localctx, predIndex);
		case 69: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool loopChainExpression_sempred(LoopChainExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 21);
		case 15: return Precpred(Context, 20);
		case 16: return Precpred(Context, 18);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 11);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x82");
		sb.Append("\x357\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N");
		sb.Append("\tN\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV");
		sb.Append("\x4W\tW\x4X\tX\x4Y\tY\x3\x2\x3\x2\x3\x2\a\x2\xB6\n\x2\f\x2\xE");
		sb.Append("\x2\xB9\v\x2\x3\x2\x5\x2\xBC\n\x2\x3\x2\a\x2\xBF\n\x2\f\x2\xE");
		sb.Append("\x2\xC2\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x5\x5\x5\xD7\n\x5\x3\x5\x3\x5\x5\x5\xDB\n\x5\x3\x6\x3\x6");
		sb.Append("\x5\x6\xDF\n\x6\x3\x6\a\x6\xE2\n\x6\f\x6\xE\x6\xE5\v\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x5\a\xEE\n\a\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x3\a\a\a\xF5\n\a\f\a\xE\a\xF8\v\a\x3\a\x3\a\x3\a\x5\a");
		sb.Append("\xFD\n\a\x3\b\x3\b\x3\b\x5\b\x102\n\b\x3\t\x3\t\x3\t\x3\n\x3");
		sb.Append("\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x111\n\v\x3");
		sb.Append("\v\x3\v\x3\f\x3\f\x3\f\a\f\x118\n\f\f\f\xE\f\x11B\v\f\x3\r\x3");
		sb.Append("\r\x3\r\x3\r\x5\r\x121\n\r\x3\xE\a\xE\x124\n\xE\f\xE\xE\xE\x127");
		sb.Append("\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x5\xF\x135\n\xF\x3\x10\x3\x10\x3\x10\x3\x10");
		sb.Append("\x5\x10\x13B\n\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13");
		sb.Append("\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x147\n\x13\f\x13\xE\x13\x14A");
		sb.Append("\v\x13\x3\x13\x3\x13\x3\x13\x5\x13\x14F\n\x13\x3\x13\x3\x13");
		sb.Append("\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3");
		sb.Append("\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18");
		sb.Append("\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x16B");
		sb.Append("\n\x19\x3\x19\x5\x19\x16E\n\x19\x3\x19\x3\x19\x3\x1A\x3\x1A");
		sb.Append("\x3\x1A\x3\x1B\x3\x1B\x3\x1B\a\x1B\x178\n\x1B\f\x1B\xE\x1B\x17B");
		sb.Append("\v\x1B\x3\x1C\x5\x1C\x17E\n\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C");
		sb.Append("\x183\n\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D");
		sb.Append("\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x18F\n\x1D\x5\x1D\x191\n\x1D\x3");
		sb.Append("\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x197\n\x1D\x3\x1D\x3\x1D\x3");
		sb.Append("\x1D\x5\x1D\x19C\n\x1D\x3\x1D\a\x1D\x19F\n\x1D\f\x1D\xE\x1D");
		sb.Append("\x1A2\v\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \x3");
		sb.Append(" \x3 \x3 \x3!\x3!\a!\x1B1\n!\f!\xE!\x1B4\v!\x3!\x5!\x1B7\n!");
		sb.Append("\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$\x3$\x3");
		sb.Append("%\x6%\x1C7\n%\r%\xE%\x1C8\x3%\x5%\x1CC\n%\x3&\x3&\x5&\x1D0\n");
		sb.Append("&\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3");
		sb.Append(")\x3*\x3*\x3*\x3+\x3+\x3+\x3,\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x5");
		sb.Append("-\x1EE\n-\x3-\x3-\x3.\a.\x1F3\n.\f.\xE.\x1F6\v.\x3/\x3/\a/\x1FA");
		sb.Append("\n/\f/\xE/\x1FD\v/\x3/\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x32");
		sb.Append("\x3\x32\x5\x32\x207\n\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33");
		sb.Append("\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3");
		sb.Append("\x33\x5\x33\x217\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3");
		sb.Append("\x35\x3\x36\x3\x36\x3\x36\a\x36\x222\n\x36\f\x36\xE\x36\x225");
		sb.Append("\v\x36\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x22B\n\x37\x3\x38");
		sb.Append("\x3\x38\x3\x38\x5\x38\x230\n\x38\x3\x38\x3\x38\x3\x39\x3\x39");
		sb.Append("\x5\x39\x236\n\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3;\x3;\x5;\x23F");
		sb.Append("\n;\x3<\x3<\x3=\x3=\x5=\x245\n=\x3>\x3>\x3>\a>\x24A\n>\f>\xE");
		sb.Append(">\x24D\v>\x3?\x3?\x3@\x6@\x252\n@\r@\xE@\x253\x3\x41\x3\x41");
		sb.Append("\a\x41\x258\n\x41\f\x41\xE\x41\x25B\v\x41\x3\x41\x3\x41\x3\x42");
		sb.Append("\x3\x42\x5\x42\x261\n\x42\x3\x42\x3\x42\x3\x42\x5\x42\x266\n");
		sb.Append("\x42\a\x42\x268\n\x42\f\x42\xE\x42\x26B\v\x42\x3\x43\x3\x43");
		sb.Append("\a\x43\x26F\n\x43\f\x43\xE\x43\x272\v\x43\x3\x43\x3\x43\x3\x44");
		sb.Append("\x3\x44\x3\x44\x3\x44\a\x44\x27A\n\x44\f\x44\xE\x44\x27D\v\x44");
		sb.Append("\x5\x44\x27F\n\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\a\x44");
		sb.Append("\x286\n\x44\f\x44\xE\x44\x289\v\x44\x5\x44\x28B\n\x44\x3\x44");
		sb.Append("\x3\x44\x5\x44\x28F\n\x44\x3\x45\x3\x45\x3\x45\x3\x46\x3\x46");
		sb.Append("\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3");
		sb.Append("G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x2B0\nG\x3");
		sb.Append("G\x3G\x3G\x3G\x5G\x2B6\nG\x3G\x3G\x3G\x3G\x5G\x2BC\nG\x3G\x3");
		sb.Append("G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x2C8\nG\x3G\x3G\x3G\x3");
		sb.Append("G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x2D5\nG\x3G\x3G\x3G\x3G\x3");
		sb.Append("G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3");
		sb.Append("G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3");
		sb.Append("G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x306\n");
		sb.Append("G\x3G\x3G\x3G\x3G\x3G\x5G\x30D\nG\x3G\x3G\x3G\x3G\x3G\aG\x314");
		sb.Append("\nG\fG\xEG\x317\vG\x3H\x3H\x3H\aH\x31C\nH\fH\xEH\x31F\vH\x3");
		sb.Append("I\x3I\x3I\aI\x324\nI\fI\xEI\x327\vI\x3J\x3J\x3K\x3K\x3K\x3K");
		sb.Append("\x3K\x3K\x3K\x5K\x332\nK\x3L\x3L\x3M\x3M\x3N\x3N\x3N\x5N\x33B");
		sb.Append("\nN\x3O\x3O\x3P\x3P\x3Q\x3Q\x3R\x3R\x3R\x3R\x5R\x347\nR\x3S");
		sb.Append("\x3S\x3T\x3T\x3U\x3U\x3V\x3V\x3W\x3W\x3X\x3X\x3Y\x3Y\x3Y\x2");
		sb.Append("\x4\x38\x8CZ\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E");
		sb.Append(" \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`");
		sb.Append("\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90");
		sb.Append("\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE");
		sb.Append("\xB0\x2\xE\x4\x2zz|}\x3\x2\x1F-\x4\x2RUYZ\x3\x2VX\x3\x2RS\x3");
		sb.Append("\x2MP\x3\x2IJ\x3\x2\x38\x42\x3\x2YZ\x3\x2\x30\x31\x3\x2\x1D");
		sb.Append("\x1E\x4\x2lltt\x37D\x2\xB2\x3\x2\x2\x2\x4\xC3\x3\x2\x2\x2\x6");
		sb.Append("\xC7\x3\x2\x2\x2\b\xDA\x3\x2\x2\x2\n\xDC\x3\x2\x2\x2\f\xFC\x3");
		sb.Append("\x2\x2\x2\xE\x101\x3\x2\x2\x2\x10\x103\x3\x2\x2\x2\x12\x106");
		sb.Append("\x3\x2\x2\x2\x14\x10B\x3\x2\x2\x2\x16\x114\x3\x2\x2\x2\x18\x11C");
		sb.Append("\x3\x2\x2\x2\x1A\x125\x3\x2\x2\x2\x1C\x134\x3\x2\x2\x2\x1E\x136");
		sb.Append("\x3\x2\x2\x2 \x13C\x3\x2\x2\x2\"\x13F\x3\x2\x2\x2$\x141\x3\x2");
		sb.Append("\x2\x2&\x152\x3\x2\x2\x2(\x157\x3\x2\x2\x2*\x15D\x3\x2\x2\x2");
		sb.Append(",\x15F\x3\x2\x2\x2.\x162\x3\x2\x2\x2\x30\x166\x3\x2\x2\x2\x32");
		sb.Append("\x171\x3\x2\x2\x2\x34\x174\x3\x2\x2\x2\x36\x182\x3\x2\x2\x2");
		sb.Append("\x38\x190\x3\x2\x2\x2:\x1A3\x3\x2\x2\x2<\x1A6\x3\x2\x2\x2>\x1A8");
		sb.Append("\x3\x2\x2\x2@\x1AE\x3\x2\x2\x2\x42\x1BA\x3\x2\x2\x2\x44\x1BF");
		sb.Append("\x3\x2\x2\x2\x46\x1C2\x3\x2\x2\x2H\x1CB\x3\x2\x2\x2J\x1CF\x3");
		sb.Append("\x2\x2\x2L\x1D1\x3\x2\x2\x2N\x1D5\x3\x2\x2\x2P\x1DA\x3\x2\x2");
		sb.Append("\x2R\x1DF\x3\x2\x2\x2T\x1E2\x3\x2\x2\x2V\x1E5\x3\x2\x2\x2X\x1E9");
		sb.Append("\x3\x2\x2\x2Z\x1F4\x3\x2\x2\x2\\\x1FB\x3\x2\x2\x2^\x200\x3\x2");
		sb.Append("\x2\x2`\x202\x3\x2\x2\x2\x62\x204\x3\x2\x2\x2\x64\x216\x3\x2");
		sb.Append("\x2\x2\x66\x218\x3\x2\x2\x2h\x21C\x3\x2\x2\x2j\x21E\x3\x2\x2");
		sb.Append("\x2l\x22A\x3\x2\x2\x2n\x22F\x3\x2\x2\x2p\x235\x3\x2\x2\x2r\x239");
		sb.Append("\x3\x2\x2\x2t\x23E\x3\x2\x2\x2v\x240\x3\x2\x2\x2x\x244\x3\x2");
		sb.Append("\x2\x2z\x246\x3\x2\x2\x2|\x24E\x3\x2\x2\x2~\x251\x3\x2\x2\x2");
		sb.Append("\x80\x255\x3\x2\x2\x2\x82\x25E\x3\x2\x2\x2\x84\x26C\x3\x2\x2");
		sb.Append("\x2\x86\x28E\x3\x2\x2\x2\x88\x290\x3\x2\x2\x2\x8A\x293\x3\x2");
		sb.Append("\x2\x2\x8C\x2D4\x3\x2\x2\x2\x8E\x318\x3\x2\x2\x2\x90\x320\x3");
		sb.Append("\x2\x2\x2\x92\x328\x3\x2\x2\x2\x94\x331\x3\x2\x2\x2\x96\x333");
		sb.Append("\x3\x2\x2\x2\x98\x335\x3\x2\x2\x2\x9A\x33A\x3\x2\x2\x2\x9C\x33C");
		sb.Append("\x3\x2\x2\x2\x9E\x33E\x3\x2\x2\x2\xA0\x340\x3\x2\x2\x2\xA2\x346");
		sb.Append("\x3\x2\x2\x2\xA4\x348\x3\x2\x2\x2\xA6\x34A\x3\x2\x2\x2\xA8\x34C");
		sb.Append("\x3\x2\x2\x2\xAA\x34E\x3\x2\x2\x2\xAC\x350\x3\x2\x2\x2\xAE\x352");
		sb.Append("\x3\x2\x2\x2\xB0\x354\x3\x2\x2\x2\xB2\xB3\x5\x4\x3\x2\xB3\xB7");
		sb.Append("\x5\x6\x4\x2\xB4\xB6\x5\b\x5\x2\xB5\xB4\x3\x2\x2\x2\xB6\xB9");
		sb.Append("\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xBB");
		sb.Append("\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xBA\xBC\x5\n\x6\x2\xBB\xBA");
		sb.Append("\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xC0\x3\x2\x2\x2\xBD\xBF");
		sb.Append("\x5\xE\b\x2\xBE\xBD\x3\x2\x2\x2\xBF\xC2\x3\x2\x2\x2\xC0\xBE");
		sb.Append("\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\x3\x3\x2\x2\x2\xC2\xC0");
		sb.Append("\x3\x2\x2\x2\xC3\xC4\a\x3\x2\x2\xC4\xC5\x5\x8EH\x2\xC5\xC6\a");
		sb.Append("\x34\x2\x2\xC6\x5\x3\x2\x2\x2\xC7\xC8\a\x4\x2\x2\xC8\xC9\x5");
		sb.Append("\x92J\x2\xC9\xCA\a\x11\x2\x2\xCA\xCB\x5l\x37\x2\xCB\xCC\x3\x2");
		sb.Append("\x2\x2\xCC\xCD\a\x34\x2\x2\xCD\a\x3\x2\x2\x2\xCE\xCF\a\x5\x2");
		sb.Append("\x2\xCF\xD0\x5\x8EH\x2\xD0\xD1\a\x34\x2\x2\xD1\xDB\x3\x2\x2");
		sb.Append("\x2\xD2\xD3\a\x5\x2\x2\xD3\xD4\a\x4\x2\x2\xD4\xD6\x5\x8EH\x2");
		sb.Append("\xD5\xD7\x5\x92J\x2\xD6\xD5\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2");
		sb.Append("\xD7\xD8\x3\x2\x2\x2\xD8\xD9\a\x34\x2\x2\xD9\xDB\x3\x2\x2\x2");
		sb.Append("\xDA\xCE\x3\x2\x2\x2\xDA\xD2\x3\x2\x2\x2\xDB\t\x3\x2\x2\x2\xDC");
		sb.Append("\xDE\a\a\x2\x2\xDD\xDF\x5\x92J\x2\xDE\xDD\x3\x2\x2\x2\xDE\xDF");
		sb.Append("\x3\x2\x2\x2\xDF\xE3\x3\x2\x2\x2\xE0\xE2\x5\f\a\x2\xE1\xE0\x3");
		sb.Append("\x2\x2\x2\xE2\xE5\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE3\xE4\x3");
		sb.Append("\x2\x2\x2\xE4\xE6\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE6\xE7\a");
		sb.Append("\x10\x2\x2\xE7\xE8\a\a\x2\x2\xE8\v\x3\x2\x2\x2\xE9\xEA\x5l\x37");
		sb.Append("\x2\xEA\xED\x5\x92J\x2\xEB\xEC\a\x38\x2\x2\xEC\xEE\x5\x8CG\x2");
		sb.Append("\xED\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2");
		sb.Append("\xEF\xF0\a\x34\x2\x2\xF0\xFD\x3\x2\x2\x2\xF1\xF2\a\a\x2\x2\xF2");
		sb.Append("\xF6\x5\x92J\x2\xF3\xF5\x5\f\a\x2\xF4\xF3\x3\x2\x2\x2\xF5\xF8");
		sb.Append("\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF9");
		sb.Append("\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF9\xFA\a\x10\x2\x2\xFA\xFB");
		sb.Append("\a\a\x2\x2\xFB\xFD\x3\x2\x2\x2\xFC\xE9\x3\x2\x2\x2\xFC\xF1\x3");
		sb.Append("\x2\x2\x2\xFD\r\x3\x2\x2\x2\xFE\x102\x5\x12\n\x2\xFF\x102\x5");
		sb.Append("V,\x2\x100\x102\x5\x10\t\x2\x101\xFE\x3\x2\x2\x2\x101\xFF\x3");
		sb.Append("\x2\x2\x2\x101\x100\x3\x2\x2\x2\x102\xF\x3\x2\x2\x2\x103\x104");
		sb.Append("\a\n\x2\x2\x104\x105\x5\x14\v\x2\x105\x11\x3\x2\x2\x2\x106\x107");
		sb.Append("\x5\x14\v\x2\x107\x108\x5\x1A\xE\x2\x108\x109\a\x10\x2\x2\x109");
		sb.Append("\x10A\a\t\x2\x2\x10A\x13\x3\x2\x2\x2\x10B\x10C\a\t\x2\x2\x10C");
		sb.Append("\x10D\x5x=\x2\x10D\x10E\x5\x92J\x2\x10E\x110\a\x43\x2\x2\x10F");
		sb.Append("\x111\x5\x16\f\x2\x110\x10F\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2");
		sb.Append("\x111\x112\x3\x2\x2\x2\x112\x113\a\x44\x2\x2\x113\x15\x3\x2");
		sb.Append("\x2\x2\x114\x119\x5\x18\r\x2\x115\x116\a\x37\x2\x2\x116\x118");
		sb.Append("\x5\x18\r\x2\x117\x115\x3\x2\x2\x2\x118\x11B\x3\x2\x2\x2\x119");
		sb.Append("\x117\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x17\x3\x2\x2\x2");
		sb.Append("\x11B\x119\x3\x2\x2\x2\x11C\x11D\x5l\x37\x2\x11D\x120\x5\x92");
		sb.Append("J\x2\x11E\x11F\a\x38\x2\x2\x11F\x121\x5\x8CG\x2\x120\x11E\x3");
		sb.Append("\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121\x19\x3\x2\x2\x2\x122\x124");
		sb.Append("\x5\x1C\xF\x2\x123\x122\x3\x2\x2\x2\x124\x127\x3\x2\x2\x2\x125");
		sb.Append("\x123\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126\x1B\x3\x2\x2\x2");
		sb.Append("\x127\x125\x3\x2\x2\x2\x128\x129\x5\x1E\x10\x2\x129\x12A\a\x34");
		sb.Append("\x2\x2\x12A\x135\x3\x2\x2\x2\x12B\x12C\x5 \x11\x2\x12C\x12D");
		sb.Append("\a\x34\x2\x2\x12D\x135\x3\x2\x2\x2\x12E\x12F\x5\"\x12\x2\x12F");
		sb.Append("\x130\a\x34\x2\x2\x130\x135\x3\x2\x2\x2\x131\x135\x5$\x13\x2");
		sb.Append("\x132\x135\x5.\x18\x2\x133\x135\x5@!\x2\x134\x128\x3\x2\x2\x2");
		sb.Append("\x134\x12B\x3\x2\x2\x2\x134\x12E\x3\x2\x2\x2\x134\x131\x3\x2");
		sb.Append("\x2\x2\x134\x132\x3\x2\x2\x2\x134\x133\x3\x2\x2\x2\x135\x1D");
		sb.Append("\x3\x2\x2\x2\x136\x137\x5l\x37\x2\x137\x13A\x5\x92J\x2\x138");
		sb.Append("\x139\a\x38\x2\x2\x139\x13B\x5\x8CG\x2\x13A\x138\x3\x2\x2\x2");
		sb.Append("\x13A\x13B\x3\x2\x2\x2\x13B\x1F\x3\x2\x2\x2\x13C\x13D\a\v\x2");
		sb.Append("\x2\x13D\x13E\x5\x8CG\x2\x13E!\x3\x2\x2\x2\x13F\x140\x5\x8C");
		sb.Append("G\x2\x140#\x3\x2\x2\x2\x141\x142\x5&\x14\x2\x142\x148\x5\x1A");
		sb.Append("\xE\x2\x143\x144\x5(\x15\x2\x144\x145\x5\x1A\xE\x2\x145\x147");
		sb.Append("\x3\x2\x2\x2\x146\x143\x3\x2\x2\x2\x147\x14A\x3\x2\x2\x2\x148");
		sb.Append("\x146\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14E\x3\x2\x2\x2");
		sb.Append("\x14A\x148\x3\x2\x2\x2\x14B\x14C\x5*\x16\x2\x14C\x14D\x5\x1A");
		sb.Append("\xE\x2\x14D\x14F\x3\x2\x2\x2\x14E\x14B\x3\x2\x2\x2\x14E\x14F");
		sb.Append("\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x151\x5,\x17\x2\x151");
		sb.Append("%\x3\x2\x2\x2\x152\x153\a\x14\x2\x2\x153\x154\a\x43\x2\x2\x154");
		sb.Append("\x155\x5\x8CG\x2\x155\x156\a\x44\x2\x2\x156\'\x3\x2\x2\x2\x157");
		sb.Append("\x158\a\x15\x2\x2\x158\x159\a\x14\x2\x2\x159\x15A\a\x43\x2\x2");
		sb.Append("\x15A\x15B\x5\x8CG\x2\x15B\x15C\a\x44\x2\x2\x15C)\x3\x2\x2\x2");
		sb.Append("\x15D\x15E\a\x15\x2\x2\x15E+\x3\x2\x2\x2\x15F\x160\a\x10\x2");
		sb.Append("\x2\x160\x161\a\x14\x2\x2\x161-\x3\x2\x2\x2\x162\x163\x5\x30");
		sb.Append("\x19\x2\x163\x164\x5\x1A\xE\x2\x164\x165\x5\x32\x1A\x2\x165");
		sb.Append("/\x3\x2\x2\x2\x166\x167\a\x16\x2\x2\x167\x168\a\x43\x2\x2\x168");
		sb.Append("\x16A\x5\x34\x1B\x2\x169\x16B\x5:\x1E\x2\x16A\x169\x3\x2\x2");
		sb.Append("\x2\x16A\x16B\x3\x2\x2\x2\x16B\x16D\x3\x2\x2\x2\x16C\x16E\x5");
		sb.Append("<\x1F\x2\x16D\x16C\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x16F");
		sb.Append("\x3\x2\x2\x2\x16F\x170\a\x44\x2\x2\x170\x31\x3\x2\x2\x2\x171");
		sb.Append("\x172\a\x10\x2\x2\x172\x173\a\x16\x2\x2\x173\x33\x3\x2\x2\x2");
		sb.Append("\x174\x179\x5\x36\x1C\x2\x175\x176\aL\x2\x2\x176\x178\x5\x36");
		sb.Append("\x1C\x2\x177\x175\x3\x2\x2\x2\x178\x17B\x3\x2\x2\x2\x179\x177");
		sb.Append("\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x35\x3\x2\x2\x2\x17B");
		sb.Append("\x179\x3\x2\x2\x2\x17C\x17E\x5l\x37\x2\x17D\x17C\x3\x2\x2\x2");
		sb.Append("\x17D\x17E\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\x180\x5\x92");
		sb.Append("J\x2\x180\x181\a\x35\x2\x2\x181\x183\x3\x2\x2\x2\x182\x17D\x3");
		sb.Append("\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x185");
		sb.Append("\x5\x38\x1D\x2\x185\x37\x3\x2\x2\x2\x186\x187\b\x1D\x1\x2\x187");
		sb.Append("\x188\a\x32\x2\x2\x188\x189\a\x43\x2\x2\x189\x18A\x5l\x37\x2");
		sb.Append("\x18A\x18B\a\x44\x2\x2\x18B\x191\x3\x2\x2\x2\x18C\x18E\x5\x92");
		sb.Append("J\x2\x18D\x18F\x5\x66\x34\x2\x18E\x18D\x3\x2\x2\x2\x18E\x18F");
		sb.Append("\x3\x2\x2\x2\x18F\x191\x3\x2\x2\x2\x190\x186\x3\x2\x2\x2\x190");
		sb.Append("\x18C\x3\x2\x2\x2\x191\x1A0\x3\x2\x2\x2\x192\x193\f\x4\x2\x2");
		sb.Append("\x193\x194\a\x36\x2\x2\x194\x196\x5\x92J\x2\x195\x197\x5\x66");
		sb.Append("\x34\x2\x196\x195\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x19F");
		sb.Append("\x3\x2\x2\x2\x198\x199\f\x3\x2\x2\x199\x19B\a\x43\x2\x2\x19A");
		sb.Append("\x19C\x5z>\x2\x19B\x19A\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19C");
		sb.Append("\x19D\x3\x2\x2\x2\x19D\x19F\a\x44\x2\x2\x19E\x192\x3\x2\x2\x2");
		sb.Append("\x19E\x198\x3\x2\x2\x2\x19F\x1A2\x3\x2\x2\x2\x1A0\x19E\x3\x2");
		sb.Append("\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x39\x3\x2\x2\x2\x1A2\x1A0");
		sb.Append("\x3\x2\x2\x2\x1A3\x1A4\a\x18\x2\x2\x1A4\x1A5\x5\x8CG\x2\x1A5");
		sb.Append(";\x3\x2\x2\x2\x1A6\x1A7\x5> \x2\x1A7=\x3\x2\x2\x2\x1A8\x1A9");
		sb.Append("\a\x34\x2\x2\x1A9\x1AA\a\x1B\x2\x2\x1AA\x1AB\x5\x92J\x2\x1AB");
		sb.Append("\x1AC\a\x38\x2\x2\x1AC\x1AD\x5\xAEX\x2\x1AD?\x3\x2\x2\x2\x1AE");
		sb.Append("\x1B2\x5\x42\"\x2\x1AF\x1B1\x5\x46$\x2\x1B0\x1AF\x3\x2\x2\x2");
		sb.Append("\x1B1\x1B4\x3\x2\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3\x3\x2");
		sb.Append("\x2\x2\x1B3\x1B6\x3\x2\x2\x2\x1B4\x1B2\x3\x2\x2\x2\x1B5\x1B7");
		sb.Append("\x5R*\x2\x1B6\x1B5\x3\x2\x2\x2\x1B6\x1B7\x3\x2\x2\x2\x1B7\x1B8");
		sb.Append("\x3\x2\x2\x2\x1B8\x1B9\x5\x44#\x2\x1B9\x41\x3\x2\x2\x2\x1BA");
		sb.Append("\x1BB\a\f\x2\x2\x1BB\x1BC\a\x43\x2\x2\x1BC\x1BD\x5\x8CG\x2\x1BD");
		sb.Append("\x1BE\a\x44\x2\x2\x1BE\x43\x3\x2\x2\x2\x1BF\x1C0\a\x10\x2\x2");
		sb.Append("\x1C0\x1C1\a\f\x2\x2\x1C1\x45\x3\x2\x2\x2\x1C2\x1C3\x5H%\x2");
		sb.Append("\x1C3\x1C4\x5\x1A\xE\x2\x1C4G\x3\x2\x2\x2\x1C5\x1C7\x5J&\x2");
		sb.Append("\x1C6\x1C5\x3\x2\x2\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8\x1C6\x3\x2");
		sb.Append("\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CC\x3\x2\x2\x2\x1CA\x1CC");
		sb.Append("\x5P)\x2\x1CB\x1C6\x3\x2\x2\x2\x1CB\x1CA\x3\x2\x2\x2\x1CCI\x3");
		sb.Append("\x2\x2\x2\x1CD\x1D0\x5L\'\x2\x1CE\x1D0\x5N(\x2\x1CF\x1CD\x3");
		sb.Append("\x2\x2\x2\x1CF\x1CE\x3\x2\x2\x2\x1D0K\x3\x2\x2\x2\x1D1\x1D2");
		sb.Append("\a\r\x2\x2\x1D2\x1D3\x5z>\x2\x1D3\x1D4\a\x35\x2\x2\x1D4M\x3");
		sb.Append("\x2\x2\x2\x1D5\x1D6\a\xE\x2\x2\x1D6\x1D7\a\x30\x2\x2\x1D7\x1D8");
		sb.Append("\x5j\x36\x2\x1D8\x1D9\a\x35\x2\x2\x1D9O\x3\x2\x2\x2\x1DA\x1DB");
		sb.Append("\a\xE\x2\x2\x1DB\x1DC\a\x31\x2\x2\x1DC\x1DD\x5l\x37\x2\x1DD");
		sb.Append("\x1DE\a\x35\x2\x2\x1DEQ\x3\x2\x2\x2\x1DF\x1E0\x5T+\x2\x1E0\x1E1");
		sb.Append("\x5\x1A\xE\x2\x1E1S\x3\x2\x2\x2\x1E2\x1E3\a\x33\x2\x2\x1E3\x1E4");
		sb.Append("\a\x35\x2\x2\x1E4U\x3\x2\x2\x2\x1E5\x1E6\x5X-\x2\x1E6\x1E7\x5");
		sb.Append("Z.\x2\x1E7\x1E8\ay\x2\x2\x1E8W\x3\x2\x2\x2\x1E9\x1EA\a\b\x2");
		sb.Append("\x2\x1EA\x1EB\x5\x92J\x2\x1EB\x1ED\a\x43\x2\x2\x1EC\x1EE\x5");
		sb.Append("\x16\f\x2\x1ED\x1EC\x3\x2\x2\x2\x1ED\x1EE\x3\x2\x2\x2\x1EE\x1EF");
		sb.Append("\x3\x2\x2\x2\x1EF\x1F0\a\x44\x2\x2\x1F0Y\x3\x2\x2\x2\x1F1\x1F3");
		sb.Append("\x5\\/\x2\x1F2\x1F1\x3\x2\x2\x2\x1F3\x1F6\x3\x2\x2\x2\x1F4\x1F2");
		sb.Append("\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5[\x3\x2\x2\x2\x1F6\x1F4");
		sb.Append("\x3\x2\x2\x2\x1F7\x1FA\x5^\x30\x2\x1F8\x1FA\x5\x62\x32\x2\x1F9");
		sb.Append("\x1F7\x3\x2\x2\x2\x1F9\x1F8\x3\x2\x2\x2\x1FA\x1FD\x3\x2\x2\x2");
		sb.Append("\x1FB\x1F9\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FE\x3\x2");
		sb.Append("\x2\x2\x1FD\x1FB\x3\x2\x2\x2\x1FE\x1FF\x5`\x31\x2\x1FF]\x3\x2");
		sb.Append("\x2\x2\x200\x201\a{\x2\x2\x201_\x3\x2\x2\x2\x202\x203\t\x2\x2");
		sb.Append("\x2\x203\x61\x3\x2\x2\x2\x204\x206\a~\x2\x2\x205\x207\x5\x64");
		sb.Append("\x33\x2\x206\x205\x3\x2\x2\x2\x206\x207\x3\x2\x2\x2\x207\x208");
		sb.Append("\x3\x2\x2\x2\x208\x209\a\x7F\x2\x2\x209\x63\x3\x2\x2\x2\x20A");
		sb.Append("\x217\x5\x1E\x10\x2\x20B\x217\x5\"\x12\x2\x20C\x217\x5&\x14");
		sb.Append("\x2\x20D\x217\x5(\x15\x2\x20E\x217\x5*\x16\x2\x20F\x217\x5,");
		sb.Append("\x17\x2\x210\x217\x5\x30\x19\x2\x211\x217\x5\x32\x1A\x2\x212");
		sb.Append("\x217\x5\x42\"\x2\x213\x217\x5\x44#\x2\x214\x217\x5H%\x2\x215");
		sb.Append("\x217\x5T+\x2\x216\x20A\x3\x2\x2\x2\x216\x20B\x3\x2\x2\x2\x216");
		sb.Append("\x20C\x3\x2\x2\x2\x216\x20D\x3\x2\x2\x2\x216\x20E\x3\x2\x2\x2");
		sb.Append("\x216\x20F\x3\x2\x2\x2\x216\x210\x3\x2\x2\x2\x216\x211\x3\x2");
		sb.Append("\x2\x2\x216\x212\x3\x2\x2\x2\x216\x213\x3\x2\x2\x2\x216\x214");
		sb.Append("\x3\x2\x2\x2\x216\x215\x3\x2\x2\x2\x217\x65\x3\x2\x2\x2\x218");
		sb.Append("\x219\aM\x2\x2\x219\x21A\x5j\x36\x2\x21A\x21B\aN\x2\x2\x21B");
		sb.Append("g\x3\x2\x2\x2\x21C\x21D\t\x3\x2\x2\x21Di\x3\x2\x2\x2\x21E\x223");
		sb.Append("\x5l\x37\x2\x21F\x220\a\x37\x2\x2\x220\x222\x5l\x37\x2\x221");
		sb.Append("\x21F\x3\x2\x2\x2\x222\x225\x3\x2\x2\x2\x223\x221\x3\x2\x2\x2");
		sb.Append("\x223\x224\x3\x2\x2\x2\x224k\x3\x2\x2\x2\x225\x223\x3\x2\x2");
		sb.Append("\x2\x226\x22B\x5n\x38\x2\x227\x22B\x5p\x39\x2\x228\x22B\x5r");
		sb.Append(":\x2\x229\x22B\x5t;\x2\x22A\x226\x3\x2\x2\x2\x22A\x227\x3\x2");
		sb.Append("\x2\x2\x22A\x228\x3\x2\x2\x2\x22A\x229\x3\x2\x2\x2\x22Bm\x3");
		sb.Append("\x2\x2\x2\x22C\x230\x5p\x39\x2\x22D\x230\x5r:\x2\x22E\x230\x5");
		sb.Append("t;\x2\x22F\x22C\x3\x2\x2\x2\x22F\x22D\x3\x2\x2\x2\x22F\x22E");
		sb.Append("\x3\x2\x2\x2\x230\x231\x3\x2\x2\x2\x231\x232\x5~@\x2\x232o\x3");
		sb.Append("\x2\x2\x2\x233\x236\x5r:\x2\x234\x236\x5t;\x2\x235\x233\x3\x2");
		sb.Append("\x2\x2\x235\x234\x3\x2\x2\x2\x236\x237\x3\x2\x2\x2\x237\x238");
		sb.Append("\aQ\x2\x2\x238q\x3\x2\x2\x2\x239\x23A\x5\x8EH\x2\x23A\x23B\x5");
		sb.Append("\x66\x34\x2\x23Bs\x3\x2\x2\x2\x23C\x23F\x5\x8EH\x2\x23D\x23F");
		sb.Append("\x5h\x35\x2\x23E\x23C\x3\x2\x2\x2\x23E\x23D\x3\x2\x2\x2\x23F");
		sb.Append("u\x3\x2\x2\x2\x240\x241\a\xF\x2\x2\x241w\x3\x2\x2\x2\x242\x245");
		sb.Append("\x5l\x37\x2\x243\x245\x5v<\x2\x244\x242\x3\x2\x2\x2\x244\x243");
		sb.Append("\x3\x2\x2\x2\x245y\x3\x2\x2\x2\x246\x24B\x5\x8CG\x2\x247\x248");
		sb.Append("\a\x37\x2\x2\x248\x24A\x5\x8CG\x2\x249\x247\x3\x2\x2\x2\x24A");
		sb.Append("\x24D\x3\x2\x2\x2\x24B\x249\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2");
		sb.Append("\x24C{\x3\x2\x2\x2\x24D\x24B\x3\x2\x2\x2\x24E\x24F\x5\x8CG\x2");
		sb.Append("\x24F}\x3\x2\x2\x2\x250\x252\x5\x80\x41\x2\x251\x250\x3\x2\x2");
		sb.Append("\x2\x252\x253\x3\x2\x2\x2\x253\x251\x3\x2\x2\x2\x253\x254\x3");
		sb.Append("\x2\x2\x2\x254\x7F\x3\x2\x2\x2\x255\x259\a\x45\x2\x2\x256\x258");
		sb.Append("\a\x37\x2\x2\x257\x256\x3\x2\x2\x2\x258\x25B\x3\x2\x2\x2\x259");
		sb.Append("\x257\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25C\x3\x2\x2\x2");
		sb.Append("\x25B\x259\x3\x2\x2\x2\x25C\x25D\a\x46\x2\x2\x25D\x81\x3\x2");
		sb.Append("\x2\x2\x25E\x260\x5\x92J\x2\x25F\x261\x5\x84\x43\x2\x260\x25F");
		sb.Append("\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x269\x3\x2\x2\x2\x262");
		sb.Append("\x263\a\x36\x2\x2\x263\x265\x5\x92J\x2\x264\x266\x5\x84\x43");
		sb.Append("\x2\x265\x264\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266\x268\x3");
		sb.Append("\x2\x2\x2\x267\x262\x3\x2\x2\x2\x268\x26B\x3\x2\x2\x2\x269\x267");
		sb.Append("\x3\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x83\x3\x2\x2\x2\x26B");
		sb.Append("\x269\x3\x2\x2\x2\x26C\x270\aM\x2\x2\x26D\x26F\a\x37\x2\x2\x26E");
		sb.Append("\x26D\x3\x2\x2\x2\x26F\x272\x3\x2\x2\x2\x270\x26E\x3\x2\x2\x2");
		sb.Append("\x270\x271\x3\x2\x2\x2\x271\x273\x3\x2\x2\x2\x272\x270\x3\x2");
		sb.Append("\x2\x2\x273\x274\aN\x2\x2\x274\x85\x3\x2\x2\x2\x275\x27E\a\x43");
		sb.Append("\x2\x2\x276\x27B\x5\x88\x45\x2\x277\x278\a\x37\x2\x2\x278\x27A");
		sb.Append("\x5\x88\x45\x2\x279\x277\x3\x2\x2\x2\x27A\x27D\x3\x2\x2\x2\x27B");
		sb.Append("\x279\x3\x2\x2\x2\x27B\x27C\x3\x2\x2\x2\x27C\x27F\x3\x2\x2\x2");
		sb.Append("\x27D\x27B\x3\x2\x2\x2\x27E\x276\x3\x2\x2\x2\x27E\x27F\x3\x2");
		sb.Append("\x2\x2\x27F\x280\x3\x2\x2\x2\x280\x28F\a\x44\x2\x2\x281\x28A");
		sb.Append("\a\x43\x2\x2\x282\x287\x5\x8A\x46\x2\x283\x284\a\x37\x2\x2\x284");
		sb.Append("\x286\x5\x8A\x46\x2\x285\x283\x3\x2\x2\x2\x286\x289\x3\x2\x2");
		sb.Append("\x2\x287\x285\x3\x2\x2\x2\x287\x288\x3\x2\x2\x2\x288\x28B\x3");
		sb.Append("\x2\x2\x2\x289\x287\x3\x2\x2\x2\x28A\x282\x3\x2\x2\x2\x28A\x28B");
		sb.Append("\x3\x2\x2\x2\x28B\x28C\x3\x2\x2\x2\x28C\x28F\a\x44\x2\x2\x28D");
		sb.Append("\x28F\x5\x8A\x46\x2\x28E\x275\x3\x2\x2\x2\x28E\x281\x3\x2\x2");
		sb.Append("\x2\x28E\x28D\x3\x2\x2\x2\x28F\x87\x3\x2\x2\x2\x290\x291\x5");
		sb.Append("l\x37\x2\x291\x292\x5\x92J\x2\x292\x89\x3\x2\x2\x2\x293\x294");
		sb.Append("\x5\x92J\x2\x294\x8B\x3\x2\x2\x2\x295\x296\bG\x1\x2\x296\x2D5");
		sb.Append("\a.\x2\x2\x297\x2D5\x5\x94K\x2\x298\x299\a\x32\x2\x2\x299\x29A");
		sb.Append("\a\x43\x2\x2\x29A\x29B\a\xF\x2\x2\x29B\x2D5\a\x44\x2\x2\x29C");
		sb.Append("\x29D\a\x32\x2\x2\x29D\x29E\a\x43\x2\x2\x29E\x29F\x5\x82\x42");
		sb.Append("\x2\x29F\x2A0\a\x44\x2\x2\x2A0\x2D5\x3\x2\x2\x2\x2A1\x2A2\a");
		sb.Append("\x32\x2\x2\x2A2\x2A3\a\x43\x2\x2\x2A3\x2A4\x5l\x37\x2\x2A4\x2A5");
		sb.Append("\a\x44\x2\x2\x2A5\x2D5\x3\x2\x2\x2\x2A6\x2A7\a\x33\x2\x2\x2A7");
		sb.Append("\x2A8\a\x43\x2\x2\x2A8\x2A9\x5l\x37\x2\x2A9\x2AA\a\x44\x2\x2");
		sb.Append("\x2AA\x2D5\x3\x2\x2\x2\x2AB\x2AC\a/\x2\x2\x2AC\x2AD\x5l\x37");
		sb.Append("\x2\x2AD\x2AF\a\x43\x2\x2\x2AE\x2B0\x5z>\x2\x2AF\x2AE\x3\x2");
		sb.Append("\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x2B1\x3\x2\x2\x2\x2B1\x2B2");
		sb.Append("\a\x44\x2\x2\x2B2\x2D5\x3\x2\x2\x2\x2B3\x2B5\x5\x92J\x2\x2B4");
		sb.Append("\x2B6\x5\x66\x34\x2\x2B5\x2B4\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2");
		sb.Append("\x2\x2B6\x2D5\x3\x2\x2\x2\x2B7\x2B8\a\x17\x2\x2\x2B8\x2B9\a");
		sb.Append("\x43\x2\x2\x2B9\x2BB\x5\x34\x1B\x2\x2BA\x2BC\x5:\x1E\x2\x2BB");
		sb.Append("\x2BA\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2\x2BC\x2BD\x3\x2\x2\x2");
		sb.Append("\x2BD\x2BE\a\x44\x2\x2\x2BE\x2D5\x3\x2\x2\x2\x2BF\x2C0\a\x43");
		sb.Append("\x2\x2\x2C0\x2C1\x5\x8CG\x2\x2C1\x2C2\a\x44\x2\x2\x2C2\x2D5");
		sb.Append("\x3\x2\x2\x2\x2C3\x2C4\x5h\x35\x2\x2C4\x2C5\a\x36\x2\x2\x2C5");
		sb.Append("\x2C7\x5\x92J\x2\x2C6\x2C8\x5\x66\x34\x2\x2C7\x2C6\x3\x2\x2");
		sb.Append("\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\x2D5\x3\x2\x2\x2\x2C9\x2CA\a");
		sb.Append("\x43\x2\x2\x2CA\x2CB\x5l\x37\x2\x2CB\x2CC\a\x44\x2\x2\x2CC\x2CD");
		sb.Append("\x5\x8CG\x13\x2CD\x2D5\x3\x2\x2\x2\x2CE\x2CF\t\x4\x2\x2\x2CF");
		sb.Append("\x2D5\x5\x8CG\x12\x2D0\x2D1\x5\x86\x44\x2\x2D1\x2D2\aK\x2\x2");
		sb.Append("\x2D2\x2D3\x5\x8CG\x3\x2D3\x2D5\x3\x2\x2\x2\x2D4\x295\x3\x2");
		sb.Append("\x2\x2\x2D4\x297\x3\x2\x2\x2\x2D4\x298\x3\x2\x2\x2\x2D4\x29C");
		sb.Append("\x3\x2\x2\x2\x2D4\x2A1\x3\x2\x2\x2\x2D4\x2A6\x3\x2\x2\x2\x2D4");
		sb.Append("\x2AB\x3\x2\x2\x2\x2D4\x2B3\x3\x2\x2\x2\x2D4\x2B7\x3\x2\x2\x2");
		sb.Append("\x2D4\x2BF\x3\x2\x2\x2\x2D4\x2C3\x3\x2\x2\x2\x2D4\x2C9\x3\x2");
		sb.Append("\x2\x2\x2D4\x2CE\x3\x2\x2\x2\x2D4\x2D0\x3\x2\x2\x2\x2D5\x315");
		sb.Append("\x3\x2\x2\x2\x2D6\x2D7\f\x10\x2\x2\x2D7\x2D8\t\x5\x2\x2\x2D8");
		sb.Append("\x314\x5\x8CG\x11\x2D9\x2DA\f\xF\x2\x2\x2DA\x2DB\t\x6\x2\x2");
		sb.Append("\x2DB\x314\x5\x8CG\x10\x2DC\x2DD\f\xE\x2\x2\x2DD\x2DE\t\a\x2");
		sb.Append("\x2\x2DE\x314\x5\x8CG\xF\x2DF\x2E0\f\f\x2\x2\x2E0\x2E1\t\b\x2");
		sb.Append("\x2\x2E1\x314\x5\x8CG\r\x2E2\x2E3\f\v\x2\x2\x2E3\x2E4\a\\\x2");
		sb.Append("\x2\x2E4\x314\x5\x8CG\f\x2E5\x2E6\f\n\x2\x2\x2E6\x2E7\a]\x2");
		sb.Append("\x2\x2E7\x314\x5\x8CG\v\x2E8\x2E9\f\t\x2\x2\x2E9\x2EA\a^\x2");
		sb.Append("\x2\x2EA\x314\x5\x8CG\n\x2EB\x2EC\f\b\x2\x2\x2EC\x2ED\a_\x2");
		sb.Append("\x2\x2ED\x314\x5\x8CG\t\x2EE\x2EF\f\a\x2\x2\x2EF\x2F0\a`\x2");
		sb.Append("\x2\x2F0\x314\x5\x8CG\b\x2F1\x2F2\f\x6\x2\x2\x2F2\x2F3\a\x61");
		sb.Append("\x2\x2\x2F3\x314\x5\x8CG\a\x2F4\x2F5\f\x5\x2\x2\x2F5\x2F6\a");
		sb.Append("Q\x2\x2\x2F6\x2F7\x5\x8CG\x2\x2F7\x2F8\a\x35\x2\x2\x2F8\x2F9");
		sb.Append("\x5\x8CG\x6\x2F9\x314\x3\x2\x2\x2\x2FA\x2FB\f\x4\x2\x2\x2FB");
		sb.Append("\x2FC\t\t\x2\x2\x2FC\x314\x5\x8CG\x5\x2FD\x2FE\f\x17\x2\x2\x2FE");
		sb.Append("\x2FF\a\x45\x2\x2\x2FF\x300\x5z>\x2\x300\x301\a\x46\x2\x2\x301");
		sb.Append("\x314\x3\x2\x2\x2\x302\x303\f\x16\x2\x2\x303\x305\a\x43\x2\x2");
		sb.Append("\x304\x306\x5z>\x2\x305\x304\x3\x2\x2\x2\x305\x306\x3\x2\x2");
		sb.Append("\x2\x306\x307\x3\x2\x2\x2\x307\x314\a\x44\x2\x2\x308\x309\f");
		sb.Append("\x14\x2\x2\x309\x30A\a\x36\x2\x2\x30A\x30C\x5\x92J\x2\x30B\x30D");
		sb.Append("\x5\x66\x34\x2\x30C\x30B\x3\x2\x2\x2\x30C\x30D\x3\x2\x2\x2\x30D");
		sb.Append("\x314\x3\x2\x2\x2\x30E\x30F\f\x11\x2\x2\x30F\x314\t\n\x2\x2");
		sb.Append("\x310\x311\f\r\x2\x2\x311\x312\t\v\x2\x2\x312\x314\x5l\x37\x2");
		sb.Append("\x313\x2D6\x3\x2\x2\x2\x313\x2D9\x3\x2\x2\x2\x313\x2DC\x3\x2");
		sb.Append("\x2\x2\x313\x2DF\x3\x2\x2\x2\x313\x2E2\x3\x2\x2\x2\x313\x2E5");
		sb.Append("\x3\x2\x2\x2\x313\x2E8\x3\x2\x2\x2\x313\x2EB\x3\x2\x2\x2\x313");
		sb.Append("\x2EE\x3\x2\x2\x2\x313\x2F1\x3\x2\x2\x2\x313\x2F4\x3\x2\x2\x2");
		sb.Append("\x313\x2FA\x3\x2\x2\x2\x313\x2FD\x3\x2\x2\x2\x313\x302\x3\x2");
		sb.Append("\x2\x2\x313\x308\x3\x2\x2\x2\x313\x30E\x3\x2\x2\x2\x313\x310");
		sb.Append("\x3\x2\x2\x2\x314\x317\x3\x2\x2\x2\x315\x313\x3\x2\x2\x2\x315");
		sb.Append("\x316\x3\x2\x2\x2\x316\x8D\x3\x2\x2\x2\x317\x315\x3\x2\x2\x2");
		sb.Append("\x318\x31D\x5\x92J\x2\x319\x31A\a\x36\x2\x2\x31A\x31C\x5\x92");
		sb.Append("J\x2\x31B\x319\x3\x2\x2\x2\x31C\x31F\x3\x2\x2\x2\x31D\x31B\x3");
		sb.Append("\x2\x2\x2\x31D\x31E\x3\x2\x2\x2\x31E\x8F\x3\x2\x2\x2\x31F\x31D");
		sb.Append("\x3\x2\x2\x2\x320\x325\x5\x92J\x2\x321\x322\a\x37\x2\x2\x322");
		sb.Append("\x324\x5\x92J\x2\x323\x321\x3\x2\x2\x2\x324\x327\x3\x2\x2\x2");
		sb.Append("\x325\x323\x3\x2\x2\x2\x325\x326\x3\x2\x2\x2\x326\x91\x3\x2");
		sb.Append("\x2\x2\x327\x325\x3\x2\x2\x2\x328\x329\a\x63\x2\x2\x329\x93");
		sb.Append("\x3\x2\x2\x2\x32A\x332\x5\x96L\x2\x32B\x332\x5\x98M\x2\x32C");
		sb.Append("\x332\x5\x9AN\x2\x32D\x332\x5\xA2R\x2\x32E\x332\x5\xACW\x2\x32F");
		sb.Append("\x332\x5\xAEX\x2\x330\x332\x5\xB0Y\x2\x331\x32A\x3\x2\x2\x2");
		sb.Append("\x331\x32B\x3\x2\x2\x2\x331\x32C\x3\x2\x2\x2\x331\x32D\x3\x2");
		sb.Append("\x2\x2\x331\x32E\x3\x2\x2\x2\x331\x32F\x3\x2\x2\x2\x331\x330");
		sb.Append("\x3\x2\x2\x2\x332\x95\x3\x2\x2\x2\x333\x334\a\x1C\x2\x2\x334");
		sb.Append("\x97\x3\x2\x2\x2\x335\x336\t\f\x2\x2\x336\x99\x3\x2\x2\x2\x337");
		sb.Append("\x33B\x5\x9CO\x2\x338\x33B\x5\x9EP\x2\x339\x33B\x5\xA0Q\x2\x33A");
		sb.Append("\x337\x3\x2\x2\x2\x33A\x338\x3\x2\x2\x2\x33A\x339\x3\x2\x2\x2");
		sb.Append("\x33B\x9B\x3\x2\x2\x2\x33C\x33D\a\x64\x2\x2\x33D\x9D\x3\x2\x2");
		sb.Append("\x2\x33E\x33F\a\x65\x2\x2\x33F\x9F\x3\x2\x2\x2\x340\x341\a\x66");
		sb.Append("\x2\x2\x341\xA1\x3\x2\x2\x2\x342\x347\x5\xA6T\x2\x343\x347\x5");
		sb.Append("\xA4S\x2\x344\x347\x5\xA8U\x2\x345\x347\x5\xAAV\x2\x346\x342");
		sb.Append("\x3\x2\x2\x2\x346\x343\x3\x2\x2\x2\x346\x344\x3\x2\x2\x2\x346");
		sb.Append("\x345\x3\x2\x2\x2\x347\xA3\x3\x2\x2\x2\x348\x349\ag\x2\x2\x349");
		sb.Append("\xA5\x3\x2\x2\x2\x34A\x34B\ah\x2\x2\x34B\xA7\x3\x2\x2\x2\x34C");
		sb.Append("\x34D\ai\x2\x2\x34D\xA9\x3\x2\x2\x2\x34E\x34F\aj\x2\x2\x34F");
		sb.Append("\xAB\x3\x2\x2\x2\x350\x351\ak\x2\x2\x351\xAD\x3\x2\x2\x2\x352");
		sb.Append("\x353\t\r\x2\x2\x353\xAF\x3\x2\x2\x2\x354\x355\am\x2\x2\x355");
		sb.Append("\xB1\x3\x2\x2\x2K\xB7\xBB\xC0\xD6\xDA\xDE\xE3\xED\xF6\xFC\x101");
		sb.Append("\x110\x119\x120\x125\x134\x13A\x148\x14E\x16A\x16D\x179\x17D");
		sb.Append("\x182\x18E\x190\x196\x19B\x19E\x1A0\x1B2\x1B6\x1C8\x1CB\x1CF");
		sb.Append("\x1ED\x1F4\x1F9\x1FB\x206\x216\x223\x22A\x22F\x235\x23E\x244");
		sb.Append("\x24B\x253\x259\x260\x265\x269\x270\x27B\x27E\x287\x28A\x28E");
		sb.Append("\x2AF\x2B5\x2BB\x2C7\x2D4\x305\x30C\x313\x315\x31D\x325\x331");
		sb.Append("\x33A\x346");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Languages.MetaGenerator.Generator
