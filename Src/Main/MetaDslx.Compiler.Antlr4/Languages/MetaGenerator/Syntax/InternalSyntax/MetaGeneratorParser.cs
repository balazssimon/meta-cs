//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaGeneratorParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaGenerator.Syntax.InternalSyntax {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class MetaGeneratorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KNamespace=1, KGenerator=2, KUsing=3, KConfiguration=4, KProperties=5, 
		KTemplate=6, KFunction=7, KExtern=8, KReturn=9, KSwitch=10, KCase=11, 
		KType=12, KVoid=13, KEnd=14, KFor=15, KForEach=16, KIn=17, KIf=18, KElse=19, 
		KRepeat=20, KUntil=21, KWhile=22, KLoop=23, KHasLoop=24, KWhere=25, KOrderBy=26, 
		KDescending=27, KSeparator=28, KNull=29, KTrue=30, KFalse=31, KBool=32, 
		KByte=33, KChar=34, KDecimal=35, KDouble=36, KFloat=37, KInt=38, KLong=39, 
		KObject=40, KSByte=41, KShort=42, KString=43, KUInt=44, KULong=45, KUShort=46, 
		KThis=47, KNew=48, KIs=49, KAs=50, KTypeof=51, KDefault=52, TSemicolon=53, 
		TColon=54, TDot=55, TComma=56, TAssign=57, TAssignPlus=58, TAssignMinus=59, 
		TAssignAsterisk=60, TAssignSlash=61, TAssignPercent=62, TAssignAmp=63, 
		TAssignPipe=64, TAssignHat=65, TAssignLeftShift=66, TAssignRightShift=67, 
		TOpenParenthesis=68, TCloseParenthesis=69, TOpenBracket=70, TCloseBracket=71, 
		TOpenBrace=72, TCloseBrace=73, TEquals=74, TNotEquals=75, TArrow=76, TSingleArrow=77, 
		TLessThan=78, TGreaterThan=79, TLessThanOrEquals=80, TGreaterThanOrEquals=81, 
		TQuestion=82, TPlus=83, TMinus=84, TExclamation=85, TTilde=86, TAsterisk=87, 
		TSlash=88, TPercent=89, TPlusPlus=90, TMinusMinus=91, TColonColon=92, 
		TAmp=93, THat=94, TPipe=95, TAnd=96, TXor=97, TOr=98, TQuestionQuestion=99, 
		IdentifierNormal=100, IntegerLiteral=101, DecimalLiteral=102, ScientificLiteral=103, 
		DateTimeOffsetLiteral=104, DateTimeLiteral=105, DateLiteral=106, TimeLiteral=107, 
		CharLiteral=108, RegularStringLiteral=109, GuidLiteral=110, LUtf8Bom=111, 
		LWhitespace=112, LCrLf=113, LLineBreak=114, LLineComment=115, LMultiLineComment=116, 
		DoubleQuoteVerbatimStringLiteral=117, TH_TOpenParenthesis=118, TH_TCloseParenthesis=119, 
		KEndTemplate=120, TemplateLineControl=121, TemplateOutput=122, TemplateCrLf=123, 
		TemplateLineBreak=124, TemplateStatementStart=125, TemplateStatementEnd=126, 
		TS_TOpenBracket=127, TS_TCloseBracket=128, DoubleQuoteVerbatimStringLiteralStart=129, 
		COMMENT_START=130;
	public const int
		RULE_main = 0, RULE_namespaceDeclaration = 1, RULE_generatorDeclaration = 2, 
		RULE_usingDeclaration = 3, RULE_configDeclaration = 4, RULE_configProperty = 5, 
		RULE_methodDeclaration = 6, RULE_externFunctionDeclaration = 7, RULE_functionDeclaration = 8, 
		RULE_functionSignature = 9, RULE_paramList = 10, RULE_parameter = 11, 
		RULE_body = 12, RULE_statement = 13, RULE_singleStatement = 14, RULE_singleStatementSemicolon = 15, 
		RULE_variableDeclarationStatement = 16, RULE_variableDeclarationExpression = 17, 
		RULE_variableDeclarationItem = 18, RULE_returnStatement = 19, RULE_expressionStatement = 20, 
		RULE_ifStatement = 21, RULE_elseIfStatementBody = 22, RULE_ifStatementElseBody = 23, 
		RULE_ifStatementBegin = 24, RULE_elseIfStatement = 25, RULE_ifStatementElse = 26, 
		RULE_ifStatementEnd = 27, RULE_forStatement = 28, RULE_forStatementBegin = 29, 
		RULE_forStatementEnd = 30, RULE_forInitStatement = 31, RULE_whileStatement = 32, 
		RULE_whileStatementBegin = 33, RULE_whileStatementEnd = 34, RULE_whileRunExpression = 35, 
		RULE_repeatStatement = 36, RULE_repeatStatementBegin = 37, RULE_repeatStatementEnd = 38, 
		RULE_repeatRunExpression = 39, RULE_loopStatement = 40, RULE_loopStatementBegin = 41, 
		RULE_loopStatementEnd = 42, RULE_loopChain = 43, RULE_loopChainItem = 44, 
		RULE_loopChainExpression = 45, RULE_loopWhereExpression = 46, RULE_loopRunExpression = 47, 
		RULE_separatorStatement = 48, RULE_switchStatement = 49, RULE_switchStatementBegin = 50, 
		RULE_switchStatementEnd = 51, RULE_switchBranchStatement = 52, RULE_switchBranchHeadStatement = 53, 
		RULE_switchCaseOrTypeIsHeadStatement = 54, RULE_switchCaseHeadStatement = 55, 
		RULE_switchTypeIsHeadStatement = 56, RULE_switchTypeAsHeadStatement = 57, 
		RULE_switchDefaultStatement = 58, RULE_switchDefaultHeadStatement = 59, 
		RULE_templateDeclaration = 60, RULE_templateSignature = 61, RULE_templateBody = 62, 
		RULE_templateContentLine = 63, RULE_templateContent = 64, RULE_templateOutput = 65, 
		RULE_templateLineEnd = 66, RULE_templateStatementStartEnd = 67, RULE_templateStatement = 68, 
		RULE_typeArgumentList = 69, RULE_predefinedType = 70, RULE_typeReferenceList = 71, 
		RULE_typeReference = 72, RULE_arrayType = 73, RULE_arrayItemType = 74, 
		RULE_nullableType = 75, RULE_nullableItemType = 76, RULE_genericType = 77, 
		RULE_simpleType = 78, RULE_voidType = 79, RULE_returnType = 80, RULE_expressionList = 81, 
		RULE_variableReference = 82, RULE_rankSpecifiers = 83, RULE_rankSpecifier = 84, 
		RULE_unboundTypeName = 85, RULE_genericDimensionItem = 86, RULE_genericDimensionSpecifier = 87, 
		RULE_anonymousFunctionSignature = 88, RULE_explicitParameter = 89, RULE_implicitParameter = 90, 
		RULE_expression = 91, RULE_qualifiedName = 92, RULE_identifierList = 93, 
		RULE_identifier = 94, RULE_literal = 95, RULE_nullLiteral = 96, RULE_booleanLiteral = 97, 
		RULE_numberLiteral = 98, RULE_integerLiteral = 99, RULE_decimalLiteral = 100, 
		RULE_scientificLiteral = 101, RULE_dateOrTimeLiteral = 102, RULE_dateTimeOffsetLiteral = 103, 
		RULE_dateTimeLiteral = 104, RULE_dateLiteral = 105, RULE_timeLiteral = 106, 
		RULE_charLiteral = 107, RULE_stringLiteral = 108, RULE_guidLiteral = 109;
	public static readonly string[] ruleNames = {
		"main", "namespaceDeclaration", "generatorDeclaration", "usingDeclaration", 
		"configDeclaration", "configProperty", "methodDeclaration", "externFunctionDeclaration", 
		"functionDeclaration", "functionSignature", "paramList", "parameter", 
		"body", "statement", "singleStatement", "singleStatementSemicolon", "variableDeclarationStatement", 
		"variableDeclarationExpression", "variableDeclarationItem", "returnStatement", 
		"expressionStatement", "ifStatement", "elseIfStatementBody", "ifStatementElseBody", 
		"ifStatementBegin", "elseIfStatement", "ifStatementElse", "ifStatementEnd", 
		"forStatement", "forStatementBegin", "forStatementEnd", "forInitStatement", 
		"whileStatement", "whileStatementBegin", "whileStatementEnd", "whileRunExpression", 
		"repeatStatement", "repeatStatementBegin", "repeatStatementEnd", "repeatRunExpression", 
		"loopStatement", "loopStatementBegin", "loopStatementEnd", "loopChain", 
		"loopChainItem", "loopChainExpression", "loopWhereExpression", "loopRunExpression", 
		"separatorStatement", "switchStatement", "switchStatementBegin", "switchStatementEnd", 
		"switchBranchStatement", "switchBranchHeadStatement", "switchCaseOrTypeIsHeadStatement", 
		"switchCaseHeadStatement", "switchTypeIsHeadStatement", "switchTypeAsHeadStatement", 
		"switchDefaultStatement", "switchDefaultHeadStatement", "templateDeclaration", 
		"templateSignature", "templateBody", "templateContentLine", "templateContent", 
		"templateOutput", "templateLineEnd", "templateStatementStartEnd", "templateStatement", 
		"typeArgumentList", "predefinedType", "typeReferenceList", "typeReference", 
		"arrayType", "arrayItemType", "nullableType", "nullableItemType", "genericType", 
		"simpleType", "voidType", "returnType", "expressionList", "variableReference", 
		"rankSpecifiers", "rankSpecifier", "unboundTypeName", "genericDimensionItem", 
		"genericDimensionSpecifier", "anonymousFunctionSignature", "explicitParameter", 
		"implicitParameter", "expression", "qualifiedName", "identifierList", 
		"identifier", "literal", "nullLiteral", "booleanLiteral", "numberLiteral", 
		"integerLiteral", "decimalLiteral", "scientificLiteral", "dateOrTimeLiteral", 
		"dateTimeOffsetLiteral", "dateTimeLiteral", "dateLiteral", "timeLiteral", 
		"charLiteral", "stringLiteral", "guidLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'generator'", "'using'", "'configuration'", "'properties'", 
		"'template'", "'function'", "'extern'", "'return'", "'switch'", "'case'", 
		"'type'", "'void'", "'end'", "'for'", "'foreach'", "'in'", "'if'", "'else'", 
		"'repeat'", "'until'", "'while'", "'loop'", "'hasloop'", "'where'", "'orderby'", 
		"'descending'", "'separator'", "'null'", "'true'", "'false'", null, "'byte'", 
		"'char'", "'decimal'", "'double'", "'float'", "'int'", "'long'", "'object'", 
		"'sbyte'", "'short'", "'string'", "'uint'", "'ulong'", "'ushort'", "'this'", 
		"'new'", "'is'", "'as'", "'typeof'", "'default'", "';'", "':'", "'.'", 
		"','", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<='", "'>>='", "'('", "')'", null, "']'", "'{'", "'}'", "'=='", 
		"'!='", "'=>'", "'->'", "'<'", "'>'", "'<='", "'>='", "'?'", "'+'", "'-'", 
		"'!'", "'~'", null, "'/'", "'%'", "'++'", "'--'", "'::'", "'&'", "'^'", 
		"'|'", "'&&'", "'^^'", "'||'", "'??'", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'\"'", 
		null, null, null, null, null, null, null, null, null, null, null, "'@\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KGenerator", "KUsing", "KConfiguration", "KProperties", 
		"KTemplate", "KFunction", "KExtern", "KReturn", "KSwitch", "KCase", "KType", 
		"KVoid", "KEnd", "KFor", "KForEach", "KIn", "KIf", "KElse", "KRepeat", 
		"KUntil", "KWhile", "KLoop", "KHasLoop", "KWhere", "KOrderBy", "KDescending", 
		"KSeparator", "KNull", "KTrue", "KFalse", "KBool", "KByte", "KChar", "KDecimal", 
		"KDouble", "KFloat", "KInt", "KLong", "KObject", "KSByte", "KShort", "KString", 
		"KUInt", "KULong", "KUShort", "KThis", "KNew", "KIs", "KAs", "KTypeof", 
		"KDefault", "TSemicolon", "TColon", "TDot", "TComma", "TAssign", "TAssignPlus", 
		"TAssignMinus", "TAssignAsterisk", "TAssignSlash", "TAssignPercent", "TAssignAmp", 
		"TAssignPipe", "TAssignHat", "TAssignLeftShift", "TAssignRightShift", 
		"TOpenParenthesis", "TCloseParenthesis", "TOpenBracket", "TCloseBracket", 
		"TOpenBrace", "TCloseBrace", "TEquals", "TNotEquals", "TArrow", "TSingleArrow", 
		"TLessThan", "TGreaterThan", "TLessThanOrEquals", "TGreaterThanOrEquals", 
		"TQuestion", "TPlus", "TMinus", "TExclamation", "TTilde", "TAsterisk", 
		"TSlash", "TPercent", "TPlusPlus", "TMinusMinus", "TColonColon", "TAmp", 
		"THat", "TPipe", "TAnd", "TXor", "TOr", "TQuestionQuestion", "IdentifierNormal", 
		"IntegerLiteral", "DecimalLiteral", "ScientificLiteral", "DateTimeOffsetLiteral", 
		"DateTimeLiteral", "DateLiteral", "TimeLiteral", "CharLiteral", "RegularStringLiteral", 
		"GuidLiteral", "LUtf8Bom", "LWhitespace", "LCrLf", "LLineBreak", "LLineComment", 
		"LMultiLineComment", "DoubleQuoteVerbatimStringLiteral", "TH_TOpenParenthesis", 
		"TH_TCloseParenthesis", "KEndTemplate", "TemplateLineControl", "TemplateOutput", 
		"TemplateCrLf", "TemplateLineBreak", "TemplateStatementStart", "TemplateStatementEnd", 
		"TS_TOpenBracket", "TS_TCloseBracket", "DoubleQuoteVerbatimStringLiteralStart", 
		"COMMENT_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaGeneratorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MetaGeneratorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MetaGeneratorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MetaGeneratorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public GeneratorDeclarationContext generatorDeclaration() {
			return GetRuleContext<GeneratorDeclarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MetaGeneratorParser.Eof, 0); }
		public UsingDeclarationContext[] usingDeclaration() {
			return GetRuleContexts<UsingDeclarationContext>();
		}
		public UsingDeclarationContext usingDeclaration(int i) {
			return GetRuleContext<UsingDeclarationContext>(i);
		}
		public ConfigDeclarationContext configDeclaration() {
			return GetRuleContext<ConfigDeclarationContext>(0);
		}
		public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; namespaceDeclaration();
			State = 221; generatorDeclaration();
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KUsing) {
				{
				{
				State = 222; usingDeclaration();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KProperties) {
				{
				State = 228; configDeclaration();
				}
			}

			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KTemplate) | (1L << KFunction) | (1L << KExtern))) != 0)) {
				{
				{
				State = 231; methodDeclaration();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 237; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaGeneratorParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(KNamespace);
			State = 240; qualifiedName();
			State = 241; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorDeclarationContext : ParserRuleContext {
		public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public GeneratorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGeneratorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGeneratorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorDeclarationContext generatorDeclaration() {
		GeneratorDeclarationContext _localctx = new GeneratorDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_generatorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(KGenerator);
			State = 244; identifier();
			{
			State = 245; Match(KFor);
			State = 246; typeReference();
			}
			State = 248; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
	 
		public UsingDeclarationContext() { }
		public virtual void CopyFrom(UsingDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingNamespaceDeclarationContext : UsingDeclarationContext {
		public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public UsingNamespaceDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUsingNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUsingNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingGeneratorDeclarationContext : UsingDeclarationContext {
		public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UsingGeneratorDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUsingGeneratorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUsingGeneratorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_usingDeclaration);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new UsingNamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; Match(KUsing);
				State = 251; qualifiedName();
				State = 252; Match(TSemicolon);
				}
				break;
			case 2:
				_localctx = new UsingGeneratorDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 254; Match(KUsing);
				State = 255; Match(KGenerator);
				State = 256; qualifiedName();
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IdentifierNormal) {
					{
					State = 257; identifier();
					}
				}

				State = 260; Match(TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigDeclarationContext : ParserRuleContext {
		public IToken startProperties;
		public IToken endProperties;
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigDeclarationContext configDeclaration() {
		ConfigDeclarationContext _localctx = new ConfigDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_configDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; _localctx.startProperties = Match(KProperties);
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 265; identifier();
				}
				break;
			}
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				{
				State = 268; configProperty();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274; Match(KEnd);
			State = 275; _localctx.endProperties = Match(KProperties);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigPropertyContext : ParserRuleContext {
		public ConfigPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configProperty; } }
	 
		public ConfigPropertyContext() { }
		public virtual void CopyFrom(ConfigPropertyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConfigPropertyGroupDeclarationContext : ConfigPropertyContext {
		public IToken startProperties;
		public IToken endProperties;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigPropertyGroupDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigPropertyGroupDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigPropertyGroupDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyGroupDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConfigPropertyDeclarationContext : ConfigPropertyContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConfigPropertyDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigPropertyContext configProperty() {
		ConfigPropertyContext _localctx = new ConfigPropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_configProperty);
		int _la;
		try {
			State = 296;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				_localctx = new ConfigPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 277; typeReference();
				State = 278; identifier();
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TAssign) {
					{
					State = 279; Match(TAssign);
					State = 280; expression(0);
					}
				}

				State = 283; Match(TSemicolon);
				}
				break;
			case KProperties:
				_localctx = new ConfigPropertyGroupDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; ((ConfigPropertyGroupDeclarationContext)_localctx).startProperties = Match(KProperties);
				State = 286; identifier();
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					{
					State = 287; configProperty();
					}
					}
					State = 292;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 293; Match(KEnd);
				State = 294; ((ConfigPropertyGroupDeclarationContext)_localctx).endProperties = Match(KProperties);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		public ExternFunctionDeclarationContext externFunctionDeclaration() {
			return GetRuleContext<ExternFunctionDeclarationContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_methodDeclaration);
		try {
			State = 301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KFunction:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298; functionDeclaration();
				}
				break;
			case KTemplate:
				EnterOuterAlt(_localctx, 2);
				{
				State = 299; templateDeclaration();
				}
				break;
			case KExtern:
				EnterOuterAlt(_localctx, 3);
				{
				State = 300; externFunctionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternFunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode KExtern() { return GetToken(MetaGeneratorParser.KExtern, 0); }
		public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		public ExternFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externFunctionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExternFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExternFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternFunctionDeclarationContext externFunctionDeclaration() {
		ExternFunctionDeclarationContext _localctx = new ExternFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_externFunctionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(KExtern);
			State = 304; functionSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; functionSignature();
			State = 307; body();
			State = 308; Match(KEnd);
			State = 309; Match(KFunction);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(KFunction);
			State = 312; returnType();
			State = 313; identifier();
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TLessThan) {
				{
				State = 314; typeArgumentList();
				}
			}

			State = 317; Match(TOpenParenthesis);
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 318; paramList();
				}
			}

			State = 321; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 20, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; parameter();
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 324; Match(TComma);
				State = 325; parameter();
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; typeReference();
			State = 332; identifier();
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 333; Match(TAssign);
				State = 334; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_body);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 337; statement();
					}
					} 
				}
				State = 342;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SingleStatementSemicolonContext singleStatementSemicolon() {
			return GetRuleContext<SingleStatementSemicolonContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KReturn:
			case KHasLoop:
			case KNull:
			case KTrue:
			case KFalse:
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case KThis:
			case KNew:
			case KTypeof:
			case KDefault:
			case TOpenParenthesis:
			case TPlus:
			case TMinus:
			case TExclamation:
			case TTilde:
			case TPlusPlus:
			case TMinusMinus:
			case IdentifierNormal:
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
			case DateTimeOffsetLiteral:
			case DateTimeLiteral:
			case DateLiteral:
			case TimeLiteral:
			case CharLiteral:
			case RegularStringLiteral:
			case GuidLiteral:
			case DoubleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343; singleStatementSemicolon();
				}
				break;
			case KIf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344; ifStatement();
				}
				break;
			case KFor:
				EnterOuterAlt(_localctx, 3);
				{
				State = 345; forStatement();
				}
				break;
			case KWhile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 346; whileStatement();
				}
				break;
			case KRepeat:
				EnterOuterAlt(_localctx, 5);
				{
				State = 347; repeatStatement();
				}
				break;
			case KLoop:
				EnterOuterAlt(_localctx, 6);
				{
				State = 348; loopStatement();
				}
				break;
			case KSwitch:
				EnterOuterAlt(_localctx, 7);
				{
				State = 349; switchStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementContext : ParserRuleContext {
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SingleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSingleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSingleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementContext singleStatement() {
		SingleStatementContext _localctx = new SingleStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_singleStatement);
		try {
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352; variableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353; returnStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 354; expressionStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementSemicolonContext : ParserRuleContext {
		public SingleStatementContext singleStatement() {
			return GetRuleContext<SingleStatementContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public SingleStatementSemicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatementSemicolon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSingleStatementSemicolon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSingleStatementSemicolon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatementSemicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementSemicolonContext singleStatementSemicolon() {
		SingleStatementSemicolonContext _localctx = new SingleStatementSemicolonContext(Context, State);
		EnterRule(_localctx, 30, RULE_singleStatementSemicolon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; singleStatement();
			State = 358; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public VariableDeclarationExpressionContext variableDeclarationExpression() {
			return GetRuleContext<VariableDeclarationExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; variableDeclarationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationExpressionContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VariableDeclarationItemContext[] variableDeclarationItem() {
			return GetRuleContexts<VariableDeclarationItemContext>();
		}
		public VariableDeclarationItemContext variableDeclarationItem(int i) {
			return GetRuleContext<VariableDeclarationItemContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public VariableDeclarationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationExpressionContext variableDeclarationExpression() {
		VariableDeclarationExpressionContext _localctx = new VariableDeclarationExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_variableDeclarationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; typeReference();
			State = 363; variableDeclarationItem();
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 364; Match(TComma);
				State = 365; variableDeclarationItem();
				}
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationItemContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationItemContext variableDeclarationItem() {
		VariableDeclarationItemContext _localctx = new VariableDeclarationItemContext(Context, State);
		EnterRule(_localctx, 36, RULE_variableDeclarationItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; identifier();
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 372; Match(TAssign);
				State = 373; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode KReturn() { return GetToken(MetaGeneratorParser.KReturn, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; Match(KReturn);
			State = 377; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		public ElseIfStatementBodyContext[] elseIfStatementBody() {
			return GetRuleContexts<ElseIfStatementBodyContext>();
		}
		public ElseIfStatementBodyContext elseIfStatementBody(int i) {
			return GetRuleContext<ElseIfStatementBodyContext>(i);
		}
		public IfStatementElseBodyContext ifStatementElseBody() {
			return GetRuleContext<IfStatementElseBodyContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; ifStatementBegin();
			State = 382; body();
			State = 386;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 383; elseIfStatementBody();
					}
					} 
				}
				State = 388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KElse) {
				{
				State = 389; ifStatementElseBody();
				}
			}

			State = 392; ifStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementBodyContext : ParserRuleContext {
		public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseIfStatementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementBodyContext elseIfStatementBody() {
		ElseIfStatementBodyContext _localctx = new ElseIfStatementBodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_elseIfStatementBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; elseIfStatement();
			State = 395; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementElseBodyContext : ParserRuleContext {
		public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public IfStatementElseBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementElseBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementElseBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementElseBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementElseBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementElseBodyContext ifStatementElseBody() {
		IfStatementElseBodyContext _localctx = new IfStatementElseBodyContext(Context, State);
		EnterRule(_localctx, 46, RULE_ifStatementElseBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; ifStatementElse();
			State = 398; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementBeginContext : ParserRuleContext {
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public IfStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementBeginContext ifStatementBegin() {
		IfStatementBeginContext _localctx = new IfStatementBeginContext(Context, State);
		EnterRule(_localctx, 48, RULE_ifStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(KIf);
			State = 401; Match(TOpenParenthesis);
			State = 402; expression(0);
			State = 403; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405; Match(KElse);
			State = 406; Match(KIf);
			State = 407; Match(TOpenParenthesis);
			State = 408; expression(0);
			State = 409; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementElseContext : ParserRuleContext {
		public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		public IfStatementElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementElseContext ifStatementElse() {
		IfStatementElseContext _localctx = new IfStatementElseContext(Context, State);
		EnterRule(_localctx, 52, RULE_ifStatementElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; Match(KElse);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public IfStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementEndContext ifStatementEnd() {
		IfStatementEndContext _localctx = new IfStatementEndContext(Context, State);
		EnterRule(_localctx, 54, RULE_ifStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; Match(KEnd);
			State = 414; Match(KIf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ForStatementBeginContext forStatementBegin() {
			return GetRuleContext<ForStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ForStatementEndContext forStatementEnd() {
			return GetRuleContext<ForStatementEndContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; forStatementBegin();
			State = 417; body();
			State = 418; forStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementBeginContext : ParserRuleContext {
		public IToken semi1;
		public ExpressionListContext endExpression;
		public IToken semi2;
		public ExpressionListContext stepExpression;
		public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ITerminalNode[] TSemicolon() { return GetTokens(MetaGeneratorParser.TSemicolon); }
		public ITerminalNode TSemicolon(int i) {
			return GetToken(MetaGeneratorParser.TSemicolon, i);
		}
		public ForInitStatementContext forInitStatement() {
			return GetRuleContext<ForInitStatementContext>(0);
		}
		public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public ForStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterForStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitForStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementBeginContext forStatementBegin() {
		ForStatementBeginContext _localctx = new ForStatementBeginContext(Context, State);
		EnterRule(_localctx, 58, RULE_forStatementBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(KFor);
			State = 421; Match(TOpenParenthesis);
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
				{
				State = 422; forInitStatement();
				}
			}

			State = 425; _localctx.semi1 = Match(TSemicolon);
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
				{
				State = 426; _localctx.endExpression = expressionList();
				}
			}

			State = 429; _localctx.semi2 = Match(TSemicolon);
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
				{
				State = 430; _localctx.stepExpression = expressionList();
				}
			}

			State = 433; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		public ForStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterForStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitForStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementEndContext forStatementEnd() {
		ForStatementEndContext _localctx = new ForStatementEndContext(Context, State);
		EnterRule(_localctx, 60, RULE_forStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; Match(KEnd);
			State = 436; Match(KFor);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitStatementContext : ParserRuleContext {
		public VariableDeclarationExpressionContext variableDeclarationExpression() {
			return GetRuleContext<VariableDeclarationExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterForInitStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitForInitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitStatementContext forInitStatement() {
		ForInitStatementContext _localctx = new ForInitStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_forInitStatement);
		try {
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438; variableDeclarationExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439; expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public WhileStatementBeginContext whileStatementBegin() {
			return GetRuleContext<WhileStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public WhileStatementEndContext whileStatementEnd() {
			return GetRuleContext<WhileStatementEndContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; whileStatementBegin();
			State = 443; body();
			State = 444; whileStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementBeginContext : ParserRuleContext {
		public ITerminalNode KWhile() { return GetToken(MetaGeneratorParser.KWhile, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public WhileStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterWhileStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitWhileStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementBeginContext whileStatementBegin() {
		WhileStatementBeginContext _localctx = new WhileStatementBeginContext(Context, State);
		EnterRule(_localctx, 66, RULE_whileStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(KWhile);
			State = 447; Match(TOpenParenthesis);
			State = 448; expression(0);
			State = 449; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KWhile() { return GetToken(MetaGeneratorParser.KWhile, 0); }
		public WhileStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterWhileStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitWhileStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementEndContext whileStatementEnd() {
		WhileStatementEndContext _localctx = new WhileStatementEndContext(Context, State);
		EnterRule(_localctx, 68, RULE_whileStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(KEnd);
			State = 452; Match(KWhile);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileRunExpressionContext : ParserRuleContext {
		public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public WhileRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileRunExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterWhileRunExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitWhileRunExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileRunExpressionContext whileRunExpression() {
		WhileRunExpressionContext _localctx = new WhileRunExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_whileRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		public RepeatStatementBeginContext repeatStatementBegin() {
			return GetRuleContext<RepeatStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public RepeatStatementEndContext repeatStatementEnd() {
			return GetRuleContext<RepeatStatementEndContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; repeatStatementBegin();
			State = 457; body();
			State = 458; repeatStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementBeginContext : ParserRuleContext {
		public ITerminalNode KRepeat() { return GetToken(MetaGeneratorParser.KRepeat, 0); }
		public RepeatStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementBeginContext repeatStatementBegin() {
		RepeatStatementBeginContext _localctx = new RepeatStatementBeginContext(Context, State);
		EnterRule(_localctx, 74, RULE_repeatStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(KRepeat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementEndContext : ParserRuleContext {
		public ITerminalNode KUntil() { return GetToken(MetaGeneratorParser.KUntil, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public RepeatStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementEndContext repeatStatementEnd() {
		RepeatStatementEndContext _localctx = new RepeatStatementEndContext(Context, State);
		EnterRule(_localctx, 76, RULE_repeatStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; Match(KUntil);
			State = 463; Match(TOpenParenthesis);
			State = 464; expression(0);
			State = 465; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatRunExpressionContext : ParserRuleContext {
		public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public RepeatRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatRunExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRepeatRunExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRepeatRunExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatRunExpressionContext repeatRunExpression() {
		RepeatRunExpressionContext _localctx = new RepeatRunExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_repeatRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; loopStatementBegin();
			State = 470; body();
			State = 471; loopStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementBeginContext : ParserRuleContext {
		public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		public LoopRunExpressionContext loopRunExpression() {
			return GetRuleContext<LoopRunExpressionContext>(0);
		}
		public LoopStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementBeginContext loopStatementBegin() {
		LoopStatementBeginContext _localctx = new LoopStatementBeginContext(Context, State);
		EnterRule(_localctx, 82, RULE_loopStatementBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; Match(KLoop);
			State = 474; Match(TOpenParenthesis);
			State = 475; loopChain();
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KWhere) {
				{
				State = 476; loopWhereExpression();
				}
			}

			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TSemicolon) {
				{
				State = 479; loopRunExpression();
				}
			}

			State = 482; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		public LoopStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementEndContext loopStatementEnd() {
		LoopStatementEndContext _localctx = new LoopStatementEndContext(Context, State);
		EnterRule(_localctx, 84, RULE_loopStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484; Match(KEnd);
			State = 485; Match(KLoop);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainContext : ParserRuleContext {
		public LoopChainItemContext[] loopChainItem() {
			return GetRuleContexts<LoopChainItemContext>();
		}
		public LoopChainItemContext loopChainItem(int i) {
			return GetRuleContext<LoopChainItemContext>(i);
		}
		public ITerminalNode[] TSingleArrow() { return GetTokens(MetaGeneratorParser.TSingleArrow); }
		public ITerminalNode TSingleArrow(int i) {
			return GetToken(MetaGeneratorParser.TSingleArrow, i);
		}
		public LoopChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainContext loopChain() {
		LoopChainContext _localctx = new LoopChainContext(Context, State);
		EnterRule(_localctx, 86, RULE_loopChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; loopChainItem();
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TSingleArrow) {
				{
				{
				State = 488; Match(TSingleArrow);
				State = 489; loopChainItem();
				}
				}
				State = 494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainItemContext : ParserRuleContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public LoopChainItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainItemContext loopChainItem() {
		LoopChainItemContext _localctx = new LoopChainItemContext(Context, State);
		EnterRule(_localctx, 88, RULE_loopChainItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 496;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 495; typeReference();
					}
					break;
				}
				State = 498; identifier();
				State = 499; Match(TColon);
				}
				break;
			}
			State = 503; loopChainExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainExpressionContext : ParserRuleContext {
		public LoopChainExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainExpression; } }
	 
		public LoopChainExpressionContext() { }
		public virtual void CopyFrom(LoopChainExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopChainMemberAccessExpressionContext : LoopChainExpressionContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainMemberAccessExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainMethodCallExpressionContext : LoopChainExpressionContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public LoopChainMethodCallExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainMethodCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainIdentifierExpressionContext : LoopChainExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainIdentifierExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainTypeofExpressionContext : LoopChainExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopChainTypeofExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainTypeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainExpressionContext loopChainExpression() {
		return loopChainExpression(0);
	}

	private LoopChainExpressionContext loopChainExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LoopChainExpressionContext _localctx = new LoopChainExpressionContext(Context, _parentState);
		LoopChainExpressionContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_loopChainExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KTypeof:
				{
				_localctx = new LoopChainTypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 506; Match(KTypeof);
				State = 507; Match(TOpenParenthesis);
				State = 508; typeReference();
				State = 509; Match(TCloseParenthesis);
				}
				break;
			case IdentifierNormal:
				{
				_localctx = new LoopChainIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 511; identifier();
				State = 513;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 512; typeArgumentList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 531;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 529;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new LoopChainMemberAccessExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 517;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 518; Match(TDot);
						State = 519; identifier();
						State = 521;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
						case 1:
							{
							State = 520; typeArgumentList();
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new LoopChainMethodCallExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 523;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 524; Match(TOpenParenthesis);
						State = 526;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
							{
							State = 525; expressionList();
							}
						}

						State = 528; Match(TCloseParenthesis);
						}
						break;
					}
					} 
				}
				State = 533;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LoopWhereExpressionContext : ParserRuleContext {
		public ITerminalNode KWhere() { return GetToken(MetaGeneratorParser.KWhere, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopWhereExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopWhereExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopWhereExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopWhereExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopWhereExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopWhereExpressionContext loopWhereExpression() {
		LoopWhereExpressionContext _localctx = new LoopWhereExpressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_loopWhereExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534; Match(KWhere);
			State = 535; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopRunExpressionContext : ParserRuleContext {
		public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public LoopRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopRunExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopRunExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopRunExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopRunExpressionContext loopRunExpression() {
		LoopRunExpressionContext _localctx = new LoopRunExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_loopRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorStatementContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode KSeparator() { return GetToken(MetaGeneratorParser.KSeparator, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public SeparatorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSeparatorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSeparatorStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorStatementContext separatorStatement() {
		SeparatorStatementContext _localctx = new SeparatorStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_separatorStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539; Match(TSemicolon);
			State = 540; Match(KSeparator);
			State = 541; identifier();
			State = 542; Match(TAssign);
			State = 543; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		public SwitchBranchStatementContext[] switchBranchStatement() {
			return GetRuleContexts<SwitchBranchStatementContext>();
		}
		public SwitchBranchStatementContext switchBranchStatement(int i) {
			return GetRuleContext<SwitchBranchStatementContext>(i);
		}
		public SwitchDefaultStatementContext switchDefaultStatement() {
			return GetRuleContext<SwitchDefaultStatementContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; switchStatementBegin();
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KCase || _la==KType) {
				{
				{
				State = 546; switchBranchStatement();
				}
				}
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KDefault) {
				{
				State = 552; switchDefaultStatement();
				}
			}

			State = 555; switchStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementBeginContext : ParserRuleContext {
		public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public SwitchStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementBeginContext switchStatementBegin() {
		SwitchStatementBeginContext _localctx = new SwitchStatementBeginContext(Context, State);
		EnterRule(_localctx, 100, RULE_switchStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(KSwitch);
			State = 558; Match(TOpenParenthesis);
			State = 559; expression(0);
			State = 560; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		public SwitchStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementEndContext switchStatementEnd() {
		SwitchStatementEndContext _localctx = new SwitchStatementEndContext(Context, State);
		EnterRule(_localctx, 102, RULE_switchStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562; Match(KEnd);
			State = 563; Match(KSwitch);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchStatementContext : ParserRuleContext {
		public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchBranchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchBranchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchBranchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchStatementContext switchBranchStatement() {
		SwitchBranchStatementContext _localctx = new SwitchBranchStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_switchBranchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565; switchBranchHeadStatement();
			State = 566; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchHeadStatementContext : ParserRuleContext {
		public SwitchCaseOrTypeIsHeadStatementContext[] switchCaseOrTypeIsHeadStatement() {
			return GetRuleContexts<SwitchCaseOrTypeIsHeadStatementContext>();
		}
		public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement(int i) {
			return GetRuleContext<SwitchCaseOrTypeIsHeadStatementContext>(i);
		}
		public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
			return GetRuleContext<SwitchTypeAsHeadStatementContext>(0);
		}
		public SwitchBranchHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchBranchHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchBranchHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
		SwitchBranchHeadStatementContext _localctx = new SwitchBranchHeadStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_switchBranchHeadStatement);
		try {
			int _alt;
			State = 574;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 569;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 568; switchCaseOrTypeIsHeadStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 571;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573; switchTypeAsHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseOrTypeIsHeadStatementContext : ParserRuleContext {
		public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
			return GetRuleContext<SwitchCaseHeadStatementContext>(0);
		}
		public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
			return GetRuleContext<SwitchTypeIsHeadStatementContext>(0);
		}
		public SwitchCaseOrTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseOrTypeIsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseOrTypeIsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseOrTypeIsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseOrTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement() {
		SwitchCaseOrTypeIsHeadStatementContext _localctx = new SwitchCaseOrTypeIsHeadStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_switchCaseOrTypeIsHeadStatement);
		try {
			State = 578;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KCase:
				EnterOuterAlt(_localctx, 1);
				{
				State = 576; switchCaseHeadStatement();
				}
				break;
			case KType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 577; switchTypeIsHeadStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseHeadStatementContext : ParserRuleContext {
		public ITerminalNode KCase() { return GetToken(MetaGeneratorParser.KCase, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchCaseHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
		SwitchCaseHeadStatementContext _localctx = new SwitchCaseHeadStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_switchCaseHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580; Match(KCase);
			State = 581; expressionList();
			State = 582; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeIsHeadStatementContext : ParserRuleContext {
		public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeIsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchTypeIsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchTypeIsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
		SwitchTypeIsHeadStatementContext _localctx = new SwitchTypeIsHeadStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_switchTypeIsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584; Match(KType);
			State = 585; Match(KIs);
			State = 586; typeReferenceList();
			State = 587; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeAsHeadStatementContext : ParserRuleContext {
		public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeAsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeAsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchTypeAsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchTypeAsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeAsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
		SwitchTypeAsHeadStatementContext _localctx = new SwitchTypeAsHeadStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_switchTypeAsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; Match(KType);
			State = 590; Match(KAs);
			State = 591; typeReference();
			State = 592; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultStatementContext : ParserRuleContext {
		public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchDefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchDefaultStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchDefaultStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultStatementContext switchDefaultStatement() {
		SwitchDefaultStatementContext _localctx = new SwitchDefaultStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_switchDefaultStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594; switchDefaultHeadStatement();
			State = 595; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultHeadStatementContext : ParserRuleContext {
		public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchDefaultHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchDefaultHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchDefaultHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
		SwitchDefaultHeadStatementContext _localctx = new SwitchDefaultHeadStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_switchDefaultHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597; Match(KDefault);
			State = 598; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDeclarationContext : ParserRuleContext {
		public TemplateSignatureContext templateSignature() {
			return GetRuleContext<TemplateSignatureContext>(0);
		}
		public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		public ITerminalNode KEndTemplate() { return GetToken(MetaGeneratorParser.KEndTemplate, 0); }
		public TemplateDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDeclarationContext templateDeclaration() {
		TemplateDeclarationContext _localctx = new TemplateDeclarationContext(Context, State);
		EnterRule(_localctx, 120, RULE_templateDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; templateSignature();
			State = 601; templateBody();
			State = 602; Match(KEndTemplate);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateSignatureContext : ParserRuleContext {
		public ITerminalNode KTemplate() { return GetToken(MetaGeneratorParser.KTemplate, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public TemplateSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateSignatureContext templateSignature() {
		TemplateSignatureContext _localctx = new TemplateSignatureContext(Context, State);
		EnterRule(_localctx, 122, RULE_templateSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604; Match(KTemplate);
			State = 605; identifier();
			State = 606; Match(TOpenParenthesis);
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 607; paramList();
				}
			}

			State = 610; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBodyContext : ParserRuleContext {
		public TemplateContentLineContext[] templateContentLine() {
			return GetRuleContexts<TemplateContentLineContext>();
		}
		public TemplateContentLineContext templateContentLine(int i) {
			return GetRuleContext<TemplateContentLineContext>(i);
		}
		public TemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBodyContext templateBody() {
		TemplateBodyContext _localctx = new TemplateBodyContext(Context, State);
		EnterRule(_localctx, 124, RULE_templateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (TemplateLineControl - 121)) | (1L << (TemplateOutput - 121)) | (1L << (TemplateCrLf - 121)) | (1L << (TemplateLineBreak - 121)) | (1L << (TemplateStatementStart - 121)))) != 0)) {
				{
				{
				State = 612; templateContentLine();
				}
				}
				State = 617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContentLineContext : ParserRuleContext {
		public TemplateLineEndContext templateLineEnd() {
			return GetRuleContext<TemplateLineEndContext>(0);
		}
		public TemplateContentContext[] templateContent() {
			return GetRuleContexts<TemplateContentContext>();
		}
		public TemplateContentContext templateContent(int i) {
			return GetRuleContext<TemplateContentContext>(i);
		}
		public TemplateContentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContentLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateContentLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateContentLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContentLineContext templateContentLine() {
		TemplateContentLineContext _localctx = new TemplateContentLineContext(Context, State);
		EnterRule(_localctx, 126, RULE_templateContentLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TemplateOutput || _la==TemplateStatementStart) {
				{
				{
				State = 618; templateContent();
				}
				}
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 624; templateLineEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContentContext : ParserRuleContext {
		public TemplateOutputContext templateOutput() {
			return GetRuleContext<TemplateOutputContext>(0);
		}
		public TemplateStatementStartEndContext templateStatementStartEnd() {
			return GetRuleContext<TemplateStatementStartEndContext>(0);
		}
		public TemplateContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContentContext templateContent() {
		TemplateContentContext _localctx = new TemplateContentContext(Context, State);
		EnterRule(_localctx, 128, RULE_templateContent);
		try {
			State = 628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TemplateOutput:
				EnterOuterAlt(_localctx, 1);
				{
				State = 626; templateOutput();
				}
				break;
			case TemplateStatementStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 627; templateStatementStartEnd();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateOutputContext : ParserRuleContext {
		public ITerminalNode TemplateOutput() { return GetToken(MetaGeneratorParser.TemplateOutput, 0); }
		public TemplateOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateOutputContext templateOutput() {
		TemplateOutputContext _localctx = new TemplateOutputContext(Context, State);
		EnterRule(_localctx, 130, RULE_templateOutput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630; Match(TemplateOutput);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateLineEndContext : ParserRuleContext {
		public ITerminalNode TemplateCrLf() { return GetToken(MetaGeneratorParser.TemplateCrLf, 0); }
		public ITerminalNode TemplateLineBreak() { return GetToken(MetaGeneratorParser.TemplateLineBreak, 0); }
		public ITerminalNode TemplateLineControl() { return GetToken(MetaGeneratorParser.TemplateLineControl, 0); }
		public TemplateLineEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateLineEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateLineEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateLineEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateLineEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateLineEndContext templateLineEnd() {
		TemplateLineEndContext _localctx = new TemplateLineEndContext(Context, State);
		EnterRule(_localctx, 132, RULE_templateLineEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (TemplateLineControl - 121)) | (1L << (TemplateCrLf - 121)) | (1L << (TemplateLineBreak - 121)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementStartEndContext : ParserRuleContext {
		public ITerminalNode TemplateStatementStart() { return GetToken(MetaGeneratorParser.TemplateStatementStart, 0); }
		public ITerminalNode TemplateStatementEnd() { return GetToken(MetaGeneratorParser.TemplateStatementEnd, 0); }
		public TemplateStatementContext templateStatement() {
			return GetRuleContext<TemplateStatementContext>(0);
		}
		public TemplateStatementStartEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatementStartEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateStatementStartEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateStatementStartEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatementStartEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementStartEndContext templateStatementStartEnd() {
		TemplateStatementStartEndContext _localctx = new TemplateStatementStartEndContext(Context, State);
		EnterRule(_localctx, 134, RULE_templateStatementStartEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634; Match(TemplateStatementStart);
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KSwitch) | (1L << KCase) | (1L << KType) | (1L << KEnd) | (1L << KFor) | (1L << KIf) | (1L << KElse) | (1L << KRepeat) | (1L << KUntil) | (1L << KWhile) | (1L << KLoop) | (1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
				{
				State = 635; templateStatement();
				}
			}

			State = 638; Match(TemplateStatementEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementContext : ParserRuleContext {
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		public ForStatementBeginContext forStatementBegin() {
			return GetRuleContext<ForStatementBeginContext>(0);
		}
		public ForStatementEndContext forStatementEnd() {
			return GetRuleContext<ForStatementEndContext>(0);
		}
		public WhileStatementBeginContext whileStatementBegin() {
			return GetRuleContext<WhileStatementBeginContext>(0);
		}
		public WhileStatementEndContext whileStatementEnd() {
			return GetRuleContext<WhileStatementEndContext>(0);
		}
		public RepeatStatementBeginContext repeatStatementBegin() {
			return GetRuleContext<RepeatStatementBeginContext>(0);
		}
		public RepeatStatementEndContext repeatStatementEnd() {
			return GetRuleContext<RepeatStatementEndContext>(0);
		}
		public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		public TemplateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementContext templateStatement() {
		TemplateStatementContext _localctx = new TemplateStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_templateStatement);
		try {
			State = 658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 640; variableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 641; expressionStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 642; ifStatementBegin();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 643; elseIfStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 644; ifStatementElse();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 645; ifStatementEnd();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 646; forStatementBegin();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 647; forStatementEnd();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 648; whileStatementBegin();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 649; whileStatementEnd();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 650; repeatStatementBegin();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 651; repeatStatementEnd();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 652; loopStatementBegin();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 653; loopStatementEnd();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 654; switchStatementBegin();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 655; switchStatementEnd();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 656; switchBranchHeadStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 657; switchDefaultHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 138, RULE_typeArgumentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660; Match(TLessThan);
			State = 661; typeReferenceList();
			State = 662; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		public ITerminalNode KBool() { return GetToken(MetaGeneratorParser.KBool, 0); }
		public ITerminalNode KByte() { return GetToken(MetaGeneratorParser.KByte, 0); }
		public ITerminalNode KChar() { return GetToken(MetaGeneratorParser.KChar, 0); }
		public ITerminalNode KDecimal() { return GetToken(MetaGeneratorParser.KDecimal, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaGeneratorParser.KDouble, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaGeneratorParser.KFloat, 0); }
		public ITerminalNode KInt() { return GetToken(MetaGeneratorParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaGeneratorParser.KLong, 0); }
		public ITerminalNode KObject() { return GetToken(MetaGeneratorParser.KObject, 0); }
		public ITerminalNode KSByte() { return GetToken(MetaGeneratorParser.KSByte, 0); }
		public ITerminalNode KShort() { return GetToken(MetaGeneratorParser.KShort, 0); }
		public ITerminalNode KString() { return GetToken(MetaGeneratorParser.KString, 0); }
		public ITerminalNode KUInt() { return GetToken(MetaGeneratorParser.KUInt, 0); }
		public ITerminalNode KULong() { return GetToken(MetaGeneratorParser.KULong, 0); }
		public ITerminalNode KUShort() { return GetToken(MetaGeneratorParser.KUShort, 0); }
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 140, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceListContext : ParserRuleContext {
		public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public TypeReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReferenceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeReferenceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeReferenceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceListContext typeReferenceList() {
		TypeReferenceListContext _localctx = new TypeReferenceListContext(Context, State);
		EnterRule(_localctx, 142, RULE_typeReferenceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666; typeReference();
			State = 671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 667; Match(TComma);
				State = 668; typeReference();
				}
				}
				State = 673;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 144, RULE_typeReference);
		try {
			State = 678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 674; arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 675; nullableType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 676; genericType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 677; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ArrayItemTypeContext arrayItemType() {
			return GetRuleContext<ArrayItemTypeContext>(0);
		}
		public RankSpecifiersContext rankSpecifiers() {
			return GetRuleContext<RankSpecifiersContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; arrayItemType();
			State = 681; rankSpecifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayItemTypeContext : ParserRuleContext {
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ArrayItemTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayItemType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterArrayItemType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitArrayItemType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayItemType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayItemTypeContext arrayItemType() {
		ArrayItemTypeContext _localctx = new ArrayItemTypeContext(Context, State);
		EnterRule(_localctx, 148, RULE_arrayItemType);
		try {
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 683; nullableType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 684; genericType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 685; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public NullableItemTypeContext nullableItemType() {
			return GetRuleContext<NullableItemTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688; nullableItemType();
			State = 689; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableItemTypeContext : ParserRuleContext {
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public NullableItemTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableItemType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullableItemType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullableItemType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableItemType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableItemTypeContext nullableItemType() {
		NullableItemTypeContext _localctx = new NullableItemTypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_nullableItemType);
		try {
			State = 693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 691; genericType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 692; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 154, RULE_genericType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695; qualifiedName();
			State = 696; typeArgumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 156, RULE_simpleType);
		try {
			State = 700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 698; qualifiedName();
				}
				break;
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
				EnterOuterAlt(_localctx, 2);
				{
				State = 699; predefinedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 160, RULE_returnType);
		try {
			State = 706;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 704; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 705; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 162, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708; expression(0);
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 709; Match(TComma);
				State = 710; expression(0);
				}
				}
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 164, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifiersContext : ParserRuleContext {
		public RankSpecifierContext[] rankSpecifier() {
			return GetRuleContexts<RankSpecifierContext>();
		}
		public RankSpecifierContext rankSpecifier(int i) {
			return GetRuleContext<RankSpecifierContext>(i);
		}
		public RankSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRankSpecifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRankSpecifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifiersContext rankSpecifiers() {
		RankSpecifiersContext _localctx = new RankSpecifiersContext(Context, State);
		EnterRule(_localctx, 166, RULE_rankSpecifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 718; rankSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 721;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifierContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public RankSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRankSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRankSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifierContext rankSpecifier() {
		RankSpecifierContext _localctx = new RankSpecifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_rankSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; Match(TOpenBracket);
			State = 727;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 724; Match(TComma);
				}
				}
				State = 729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 730; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnboundTypeNameContext : ParserRuleContext {
		public GenericDimensionItemContext[] genericDimensionItem() {
			return GetRuleContexts<GenericDimensionItemContext>();
		}
		public GenericDimensionItemContext genericDimensionItem(int i) {
			return GetRuleContext<GenericDimensionItemContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public UnboundTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unboundTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUnboundTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUnboundTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnboundTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnboundTypeNameContext unboundTypeName() {
		UnboundTypeNameContext _localctx = new UnboundTypeNameContext(Context, State);
		EnterRule(_localctx, 170, RULE_unboundTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; genericDimensionItem();
			State = 737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TDot) {
				{
				{
				State = 733; Match(TDot);
				State = 734; genericDimensionItem();
				}
				}
				State = 739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDimensionItemContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GenericDimensionSpecifierContext genericDimensionSpecifier() {
			return GetRuleContext<GenericDimensionSpecifierContext>(0);
		}
		public GenericDimensionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDimensionItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericDimensionItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericDimensionItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericDimensionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericDimensionItemContext genericDimensionItem() {
		GenericDimensionItemContext _localctx = new GenericDimensionItemContext(Context, State);
		EnterRule(_localctx, 172, RULE_genericDimensionItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740; identifier();
			State = 742;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TLessThan) {
				{
				State = 741; genericDimensionSpecifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDimensionSpecifierContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public GenericDimensionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDimensionSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericDimensionSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericDimensionSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericDimensionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericDimensionSpecifierContext genericDimensionSpecifier() {
		GenericDimensionSpecifierContext _localctx = new GenericDimensionSpecifierContext(Context, State);
		EnterRule(_localctx, 174, RULE_genericDimensionSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744; Match(TLessThan);
			State = 748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 745; Match(TComma);
				}
				}
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 751; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionSignatureContext : ParserRuleContext {
		public AnonymousFunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionSignature; } }
	 
		public AnonymousFunctionSignatureContext() { }
		public virtual void CopyFrom(AnonymousFunctionSignatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleParamAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ImplicitParameterContext implicitParameter() {
			return GetRuleContext<ImplicitParameterContext>(0);
		}
		public SingleParamAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSingleParamAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSingleParamAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleParamAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ImplicitParameterContext[] implicitParameter() {
			return GetRuleContexts<ImplicitParameterContext>();
		}
		public ImplicitParameterContext implicitParameter(int i) {
			return GetRuleContext<ImplicitParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ImplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterImplicitAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitImplicitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExplicitParameterContext[] explicitParameter() {
			return GetRuleContexts<ExplicitParameterContext>();
		}
		public ExplicitParameterContext explicitParameter(int i) {
			return GetRuleContext<ExplicitParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
		AnonymousFunctionSignatureContext _localctx = new AnonymousFunctionSignatureContext(Context, State);
		EnterRule(_localctx, 176, RULE_anonymousFunctionSignature);
		int _la;
		try {
			State = 778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				_localctx = new ExplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 753; Match(TOpenParenthesis);
				State = 762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					State = 754; explicitParameter();
					State = 759;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TComma) {
						{
						{
						State = 755; Match(TComma);
						State = 756; explicitParameter();
						}
						}
						State = 761;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 764; Match(TCloseParenthesis);
				}
				break;
			case 2:
				_localctx = new ImplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 765; Match(TOpenParenthesis);
				State = 774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IdentifierNormal) {
					{
					State = 766; implicitParameter();
					State = 771;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TComma) {
						{
						{
						State = 767; Match(TComma);
						State = 768; implicitParameter();
						}
						}
						State = 773;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 776; Match(TCloseParenthesis);
				}
				break;
			case 3:
				_localctx = new SingleParamAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 777; implicitParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExplicitParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExplicitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitParameterContext explicitParameter() {
		ExplicitParameterContext _localctx = new ExplicitParameterContext(Context, State);
		EnterRule(_localctx, 178, RULE_explicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780; typeReference();
			State = 781; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterImplicitParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitImplicitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitParameterContext implicitParameter() {
		ImplicitParameterContext _localctx = new ImplicitParameterContext(Context, State);
		EnterRule(_localctx, 180, RULE_implicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeofUnboundTypeExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public UnboundTypeNameContext unboundTypeName() {
			return GetRuleContext<UnboundTypeNameContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofUnboundTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofUnboundTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofUnboundTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofUnboundTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecheckExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		public TypecheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypecheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypecheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public ITerminalNode TLessThanOrEquals() { return GetToken(MetaGeneratorParser.TLessThanOrEquals, 0); }
		public ITerminalNode TGreaterThanOrEquals() { return GetToken(MetaGeneratorParser.TGreaterThanOrEquals, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostExpressionContext : ExpressionContext {
		public IToken @operator;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public PostExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPostExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPostExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofVoidExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofVoidExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofVoidExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofVoidExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofVoidExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TAmp() { return GetToken(MetaGeneratorParser.TAmp, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TAnd() { return GetToken(MetaGeneratorParser.TAnd, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken @operator;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		public ITerminalNode TExclamation() { return GetToken(MetaGeneratorParser.TExclamation, 0); }
		public ITerminalNode TTilde() { return GetToken(MetaGeneratorParser.TTilde, 0); }
		public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecastExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypecastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypecastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypecastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalXorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TXor() { return GetToken(MetaGeneratorParser.TXor, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefinedTypeMemberAccessExpressionContext : ExpressionContext {
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public PredefinedTypeMemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPredefinedTypeMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPredefinedTypeMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedTypeMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseXorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode THat() { return GetToken(MetaGeneratorParser.THat, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
			return GetRuleContext<AnonymousFunctionSignatureContext>(0);
		}
		public ITerminalNode TArrow() { return GetToken(MetaGeneratorParser.TArrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultValueExpressionContext : ExpressionContext {
		public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public DefaultValueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext thenBranch;
		public ExpressionContext elseBranch;
		public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ITerminalNode TAssignPlus() { return GetToken(MetaGeneratorParser.TAssignPlus, 0); }
		public ITerminalNode TAssignMinus() { return GetToken(MetaGeneratorParser.TAssignMinus, 0); }
		public ITerminalNode TAssignAsterisk() { return GetToken(MetaGeneratorParser.TAssignAsterisk, 0); }
		public ITerminalNode TAssignSlash() { return GetToken(MetaGeneratorParser.TAssignSlash, 0); }
		public ITerminalNode TAssignPercent() { return GetToken(MetaGeneratorParser.TAssignPercent, 0); }
		public ITerminalNode TAssignAmp() { return GetToken(MetaGeneratorParser.TAssignAmp, 0); }
		public ITerminalNode TAssignPipe() { return GetToken(MetaGeneratorParser.TAssignPipe, 0); }
		public ITerminalNode TAssignHat() { return GetToken(MetaGeneratorParser.TAssignHat, 0); }
		public ITerminalNode TAssignLeftShift() { return GetToken(MetaGeneratorParser.TAssignLeftShift, 0); }
		public ITerminalNode TAssignRightShift() { return GetToken(MetaGeneratorParser.TAssignRightShift, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAsterisk() { return GetToken(MetaGeneratorParser.TAsterisk, 0); }
		public ITerminalNode TSlash() { return GetToken(MetaGeneratorParser.TSlash, 0); }
		public ITerminalNode TPercent() { return GetToken(MetaGeneratorParser.TPercent, 0); }
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectOrCollectionWithConstructorExpressionContext : ExpressionContext {
		public ITerminalNode KNew() { return GetToken(MetaGeneratorParser.KNew, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public NewObjectOrCollectionWithConstructorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNewObjectOrCollectionWithConstructorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNewObjectOrCollectionWithConstructorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectOrCollectionWithConstructorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TOr() { return GetToken(MetaGeneratorParser.TOr, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TPipe() { return GetToken(MetaGeneratorParser.TPipe, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HasLoopExpressionContext : ExpressionContext {
		public ITerminalNode KHasLoop() { return GetToken(MetaGeneratorParser.KHasLoop, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		public HasLoopExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterHasLoopExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitHasLoopExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ITerminalNode KThis() { return GetToken(MetaGeneratorParser.KThis, 0); }
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		public ElementAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElementAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElementAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofTypeExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TEquals() { return GetToken(MetaGeneratorParser.TEquals, 0); }
		public ITerminalNode TNotEquals() { return GetToken(MetaGeneratorParser.TNotEquals, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 182;
		EnterRecursionRule(_localctx, 182, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 786; Match(KThis);
				}
				break;
			case 2:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 787; literal();
				}
				break;
			case 3:
				{
				_localctx = new TypeofVoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 788; Match(KTypeof);
				State = 789; Match(TOpenParenthesis);
				State = 790; Match(KVoid);
				State = 791; Match(TCloseParenthesis);
				}
				break;
			case 4:
				{
				_localctx = new TypeofUnboundTypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 792; Match(KTypeof);
				State = 793; Match(TOpenParenthesis);
				State = 794; unboundTypeName();
				State = 795; Match(TCloseParenthesis);
				}
				break;
			case 5:
				{
				_localctx = new TypeofTypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 797; Match(KTypeof);
				State = 798; Match(TOpenParenthesis);
				State = 799; typeReference();
				State = 800; Match(TCloseParenthesis);
				}
				break;
			case 6:
				{
				_localctx = new DefaultValueExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 802; Match(KDefault);
				State = 803; Match(TOpenParenthesis);
				State = 804; typeReference();
				State = 805; Match(TCloseParenthesis);
				}
				break;
			case 7:
				{
				_localctx = new NewObjectOrCollectionWithConstructorExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 807; Match(KNew);
				State = 808; typeReference();
				State = 809; Match(TOpenParenthesis);
				State = 811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
					{
					State = 810; expressionList();
					}
				}

				State = 813; Match(TCloseParenthesis);
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 815; identifier();
				State = 817;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 816; typeArgumentList();
					}
					break;
				}
				}
				break;
			case 9:
				{
				_localctx = new HasLoopExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 819; Match(KHasLoop);
				State = 820; Match(TOpenParenthesis);
				State = 821; loopChain();
				State = 823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KWhere) {
					{
					State = 822; loopWhereExpression();
					}
				}

				State = 825; Match(TCloseParenthesis);
				}
				break;
			case 10:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 827; Match(TOpenParenthesis);
				State = 828; expression(0);
				State = 829; Match(TCloseParenthesis);
				}
				break;
			case 11:
				{
				_localctx = new PredefinedTypeMemberAccessExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 831; predefinedType();
				State = 832; Match(TDot);
				State = 833; identifier();
				State = 835;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 834; typeArgumentList();
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new TypecastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 837; Match(TOpenParenthesis);
				State = 838; typeReference();
				State = 839; Match(TCloseParenthesis);
				State = 840; expression(17);
				}
				break;
			case 13:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 842;
				((UnaryExpressionContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (TPlus - 83)) | (1L << (TMinus - 83)) | (1L << (TExclamation - 83)) | (1L << (TTilde - 83)) | (1L << (TPlusPlus - 83)) | (1L << (TMinusMinus - 83)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 843; expression(16);
				}
				break;
			case 14:
				{
				_localctx = new LambdaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 844; anonymousFunctionSignature();
				State = 845; Match(TArrow);
				State = 846; expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 913;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 911;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicationExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 850;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 851;
						((MultiplicationExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (TAsterisk - 87)) | (1L << (TSlash - 87)) | (1L << (TPercent - 87)))) != 0)) ) {
							((MultiplicationExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 852; ((MultiplicationExpressionContext)_localctx).right = expression(15);
						}
						break;
					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditionExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 853;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 854;
						((AdditionExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TPlus || _la==TMinus) ) {
							((AdditionExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 855; ((AdditionExpressionContext)_localctx).right = expression(14);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 856;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 857;
						((RelationalExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (TLessThan - 78)) | (1L << (TGreaterThan - 78)) | (1L << (TLessThanOrEquals - 78)) | (1L << (TGreaterThanOrEquals - 78)))) != 0)) ) {
							((RelationalExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 858; ((RelationalExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 859;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 860;
						((EqualityExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TEquals || _la==TNotEquals) ) {
							((EqualityExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 861; ((EqualityExpressionContext)_localctx).right = expression(11);
						}
						break;
					case 5:
						{
						_localctx = new BitwiseAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 862;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 863; Match(TAmp);
						State = 864; ((BitwiseAndExpressionContext)_localctx).right = expression(10);
						}
						break;
					case 6:
						{
						_localctx = new BitwiseXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseXorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 865;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 866; Match(THat);
						State = 867; ((BitwiseXorExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 7:
						{
						_localctx = new BitwiseOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 868;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 869; Match(TPipe);
						State = 870; ((BitwiseOrExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 8:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 871;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 872; Match(TAnd);
						State = 873; ((LogicalAndExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 9:
						{
						_localctx = new LogicalXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalXorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 874;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 875; Match(TXor);
						State = 876; ((LogicalXorExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 10:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 877;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 878; Match(TOr);
						State = 879; ((LogicalOrExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 11:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ConditionalExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 880;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 881; Match(TQuestion);
						State = 882; ((ConditionalExpressionContext)_localctx).thenBranch = expression(0);
						State = 883; Match(TColon);
						State = 884; ((ConditionalExpressionContext)_localctx).elseBranch = expression(4);
						}
						break;
					case 12:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 886;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 887;
						((AssignmentExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (TAssign - 57)) | (1L << (TAssignPlus - 57)) | (1L << (TAssignMinus - 57)) | (1L << (TAssignAsterisk - 57)) | (1L << (TAssignSlash - 57)) | (1L << (TAssignPercent - 57)) | (1L << (TAssignAmp - 57)) | (1L << (TAssignPipe - 57)) | (1L << (TAssignHat - 57)) | (1L << (TAssignLeftShift - 57)) | (1L << (TAssignRightShift - 57)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 888; expression(3);
						}
						break;
					case 13:
						{
						_localctx = new ElementAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 889;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 890; Match(TOpenBracket);
						State = 891; expressionList();
						State = 892; Match(TCloseBracket);
						}
						break;
					case 14:
						{
						_localctx = new FunctionCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 894;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 895; Match(TOpenParenthesis);
						State = 897;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TOpenParenthesis - 68)) | (1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TExclamation - 68)) | (1L << (TTilde - 68)) | (1L << (TPlusPlus - 68)) | (1L << (TMinusMinus - 68)) | (1L << (IdentifierNormal - 68)) | (1L << (IntegerLiteral - 68)) | (1L << (DecimalLiteral - 68)) | (1L << (ScientificLiteral - 68)) | (1L << (DateTimeOffsetLiteral - 68)) | (1L << (DateTimeLiteral - 68)) | (1L << (DateLiteral - 68)) | (1L << (TimeLiteral - 68)) | (1L << (CharLiteral - 68)) | (1L << (RegularStringLiteral - 68)) | (1L << (GuidLiteral - 68)) | (1L << (DoubleQuoteVerbatimStringLiteral - 68)))) != 0)) {
							{
							State = 896; expressionList();
							}
						}

						State = 899; Match(TCloseParenthesis);
						}
						break;
					case 15:
						{
						_localctx = new MemberAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 900;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 901; Match(TDot);
						State = 902; identifier();
						State = 904;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
						case 1:
							{
							State = 903; typeArgumentList();
							}
							break;
						}
						}
						break;
					case 16:
						{
						_localctx = new PostExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 906;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 907;
						((PostExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
							((PostExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 17:
						{
						_localctx = new TypecheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypecheckExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 908;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 909;
						((TypecheckExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==KIs || _la==KAs) ) {
							((TypecheckExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 910; typeReference();
						}
						break;
					}
					} 
				}
				State = 915;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 184, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 916; identifier();
			State = 921;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 917; Match(TDot);
					State = 918; identifier();
					}
					} 
				}
				State = 923;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 186, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924; identifier();
			State = 929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 925; Match(TComma);
				State = 926; identifier();
				}
				}
				State = 931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaGeneratorParser.IdentifierNormal, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 188, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932; Match(IdentifierNormal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public DateOrTimeLiteralContext dateOrTimeLiteral() {
			return GetRuleContext<DateOrTimeLiteralContext>(0);
		}
		public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public GuidLiteralContext guidLiteral() {
			return GetRuleContext<GuidLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 190, RULE_literal);
		try {
			State = 941;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 934; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 935; booleanLiteral();
				}
				break;
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 936; numberLiteral();
				}
				break;
			case DateTimeOffsetLiteral:
			case DateTimeLiteral:
			case DateLiteral:
			case TimeLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 937; dateOrTimeLiteral();
				}
				break;
			case CharLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 938; charLiteral();
				}
				break;
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 939; stringLiteral();
				}
				break;
			case GuidLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 940; guidLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaGeneratorParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 192, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 943; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaGeneratorParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaGeneratorParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 194, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945;
			_la = TokenStream.LA(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 196, RULE_numberLiteral);
		try {
			State = 950;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 947; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 948; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 949; scientificLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(MetaGeneratorParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(MetaGeneratorParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 200, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(MetaGeneratorParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 202, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateOrTimeLiteralContext : ParserRuleContext {
		public DateTimeLiteralContext dateTimeLiteral() {
			return GetRuleContext<DateTimeLiteralContext>(0);
		}
		public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
			return GetRuleContext<DateTimeOffsetLiteralContext>(0);
		}
		public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		public TimeLiteralContext timeLiteral() {
			return GetRuleContext<TimeLiteralContext>(0);
		}
		public DateOrTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateOrTimeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateOrTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateOrTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateOrTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateOrTimeLiteralContext dateOrTimeLiteral() {
		DateOrTimeLiteralContext _localctx = new DateOrTimeLiteralContext(Context, State);
		EnterRule(_localctx, 204, RULE_dateOrTimeLiteral);
		try {
			State = 962;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DateTimeLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 958; dateTimeLiteral();
				}
				break;
			case DateTimeOffsetLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 959; dateTimeOffsetLiteral();
				}
				break;
			case DateLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 960; dateLiteral();
				}
				break;
			case TimeLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 961; timeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeOffsetLiteralContext : ParserRuleContext {
		public ITerminalNode DateTimeOffsetLiteral() { return GetToken(MetaGeneratorParser.DateTimeOffsetLiteral, 0); }
		public DateTimeOffsetLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeOffsetLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateTimeOffsetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateTimeOffsetLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeOffsetLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
		DateTimeOffsetLiteralContext _localctx = new DateTimeOffsetLiteralContext(Context, State);
		EnterRule(_localctx, 206, RULE_dateTimeOffsetLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964; Match(DateTimeOffsetLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeLiteralContext : ParserRuleContext {
		public ITerminalNode DateTimeLiteral() { return GetToken(MetaGeneratorParser.DateTimeLiteral, 0); }
		public DateTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeLiteralContext dateTimeLiteral() {
		DateTimeLiteralContext _localctx = new DateTimeLiteralContext(Context, State);
		EnterRule(_localctx, 208, RULE_dateTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966; Match(DateTimeLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		public ITerminalNode DateLiteral() { return GetToken(MetaGeneratorParser.DateLiteral, 0); }
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(Context, State);
		EnterRule(_localctx, 210, RULE_dateLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968; Match(DateLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeLiteralContext : ParserRuleContext {
		public ITerminalNode TimeLiteral() { return GetToken(MetaGeneratorParser.TimeLiteral, 0); }
		public TimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeLiteralContext timeLiteral() {
		TimeLiteralContext _localctx = new TimeLiteralContext(Context, State);
		EnterRule(_localctx, 212, RULE_timeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970; Match(TimeLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		public ITerminalNode CharLiteral() { return GetToken(MetaGeneratorParser.CharLiteral, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterCharLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitCharLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 214, RULE_charLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972; Match(CharLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(MetaGeneratorParser.RegularStringLiteral, 0); }
		public ITerminalNode DoubleQuoteVerbatimStringLiteral() { return GetToken(MetaGeneratorParser.DoubleQuoteVerbatimStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 216, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974;
			_la = TokenStream.LA(1);
			if ( !(_la==RegularStringLiteral || _la==DoubleQuoteVerbatimStringLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidLiteralContext : ParserRuleContext {
		public ITerminalNode GuidLiteral() { return GetToken(MetaGeneratorParser.GuidLiteral, 0); }
		public GuidLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guidLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGuidLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGuidLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuidLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuidLiteralContext guidLiteral() {
		GuidLiteralContext _localctx = new GuidLiteralContext(Context, State);
		EnterRule(_localctx, 218, RULE_guidLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 976; Match(GuidLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 45: return loopChainExpression_sempred((LoopChainExpressionContext)_localctx, predIndex);
		case 91: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool loopChainExpression_sempred(LoopChainExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 21);
		case 15: return Precpred(Context, 20);
		case 16: return Precpred(Context, 18);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 11);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x84', '\x3D5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xE2', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\xE5', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', '\xE8', 
		'\n', '\x2', '\x3', '\x2', '\a', '\x2', '\xEB', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\xEE', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x105', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x109', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x10D', '\n', '\x6', 
		'\x3', '\x6', '\a', '\x6', '\x110', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'\x113', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x11C', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\x123', '\n', '\a', '\f', '\a', '\xE', '\a', '\x126', '\v', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x12B', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x130', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x13E', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\x142', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x149', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\x14C', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\x152', '\n', '\r', '\x3', '\xE', '\a', 
		'\xE', '\x155', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x158', '\v', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x161', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x166', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x171', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x174', '\v', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x179', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', 
		'\x183', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x186', '\v', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x189', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x1AA', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\x1AE', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1B2', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x5', '!', '\x1BB', '\n', '!', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x1E0', 
		'\n', '+', '\x3', '+', '\x5', '+', '\x1E3', '\n', '+', '\x3', '+', '\x3', 
		'+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\a', '-', '\x1ED', '\n', '-', '\f', '-', '\xE', '-', '\x1F0', '\v', 
		'-', '\x3', '.', '\x5', '.', '\x1F3', '\n', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x5', '.', '\x1F8', '\n', '.', '\x3', '.', '\x3', '.', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x5', '/', '\x204', '\n', '/', '\x5', '/', '\x206', 
		'\n', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', 
		'\x20C', '\n', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x211', 
		'\n', '/', '\x3', '/', '\a', '/', '\x214', '\n', '/', '\f', '/', '\xE', 
		'/', '\x217', '\v', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\a', '\x33', '\x226', '\n', '\x33', '\f', '\x33', '\xE', '\x33', '\x229', 
		'\v', '\x33', '\x3', '\x33', '\x5', '\x33', '\x22C', '\n', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x6', '\x37', '\x23C', 
		'\n', '\x37', '\r', '\x37', '\xE', '\x37', '\x23D', '\x3', '\x37', '\x5', 
		'\x37', '\x241', '\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', 
		'\x245', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', 
		'<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x5', '?', '\x263', '\n', '?', '\x3', '?', '\x3', '?', '\x3', '@', 
		'\a', '@', '\x268', '\n', '@', '\f', '@', '\xE', '@', '\x26B', '\v', '@', 
		'\x3', '\x41', '\a', '\x41', '\x26E', '\n', '\x41', '\f', '\x41', '\xE', 
		'\x41', '\x271', '\v', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x5', '\x42', '\x277', '\n', '\x42', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x5', 
		'\x45', '\x27F', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x295', '\n', '\x46', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\a', 'I', '\x2A0', '\n', 'I', '\f', 'I', 
		'\xE', 'I', '\x2A3', '\v', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x5', 'J', '\x2A9', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x2B1', '\n', 'L', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x2B8', 
		'\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', 
		'\x5', 'P', '\x2BF', '\n', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 
		'R', '\x5', 'R', '\x2C5', '\n', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\a', 'S', '\x2CA', '\n', 'S', '\f', 'S', '\xE', 'S', '\x2CD', '\v', 'S', 
		'\x3', 'T', '\x3', 'T', '\x3', 'U', '\x6', 'U', '\x2D2', '\n', 'U', '\r', 
		'U', '\xE', 'U', '\x2D3', '\x3', 'V', '\x3', 'V', '\a', 'V', '\x2D8', 
		'\n', 'V', '\f', 'V', '\xE', 'V', '\x2DB', '\v', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\a', 'W', '\x2E2', '\n', 'W', 
		'\f', 'W', '\xE', 'W', '\x2E5', '\v', 'W', '\x3', 'X', '\x3', 'X', '\x5', 
		'X', '\x2E9', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\a', 'Y', '\x2ED', '\n', 
		'Y', '\f', 'Y', '\xE', 'Y', '\x2F0', '\v', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\a', 'Z', '\x2F8', '\n', 
		'Z', '\f', 'Z', '\xE', 'Z', '\x2FB', '\v', 'Z', '\x5', 'Z', '\x2FD', '\n', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\a', 
		'Z', '\x304', '\n', 'Z', '\f', 'Z', '\xE', 'Z', '\x307', '\v', 'Z', '\x5', 
		'Z', '\x309', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x30D', 
		'\n', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x5', ']', '\x32E', '\n', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x5', ']', '\x334', '\n', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x5', ']', '\x33A', '\n', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x5', ']', '\x346', '\n', ']', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x5', ']', 
		'\x353', '\n', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x5', ']', '\x384', '\n', ']', '\x3', ']', '\x3', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x5', ']', '\x38B', '\n', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\a', ']', '\x392', '\n', ']', 
		'\f', ']', '\xE', ']', '\x395', '\v', ']', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\a', '^', '\x39A', '\n', '^', '\f', '^', '\xE', '^', '\x39D', '\v', 
		'^', '\x3', '_', '\x3', '_', '\x3', '_', '\a', '_', '\x3A2', '\n', '_', 
		'\f', '_', '\xE', '_', '\x3A5', '\v', '_', '\x3', '`', '\x3', '`', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x5', '\x61', '\x3B0', '\n', '\x61', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x5', '\x64', '\x3B9', '\n', '\x64', '\x3', '\x65', '\x3', 
		'\x65', '\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'h', 
		'\x3', 'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\x3C5', '\n', 'h', '\x3', 
		'i', '\x3', 'i', '\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 'k', '\x3', 
		'l', '\x3', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'n', '\x3', 'n', '\x3', 
		'o', '\x3', 'o', '\x3', 'o', '\x2', '\x4', '\\', '\xB8', 'p', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', 
		'~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', 
		'\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', 
		'\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', 
		'\xB6', '\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', 
		'\xC8', '\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', 
		'\xDA', '\xDC', '\x2', '\xE', '\x4', '\x2', '{', '{', '}', '~', '\x3', 
		'\x2', '\"', '\x30', '\x4', '\x2', 'U', 'X', '\\', ']', '\x3', '\x2', 
		'Y', '[', '\x3', '\x2', 'U', 'V', '\x3', '\x2', 'P', 'S', '\x3', '\x2', 
		'L', 'M', '\x3', '\x2', ';', '\x45', '\x3', '\x2', '\\', ']', '\x3', '\x2', 
		'\x33', '\x34', '\x3', '\x2', ' ', '!', '\x4', '\x2', 'o', 'o', 'w', 'w', 
		'\x2', '\x3F3', '\x2', '\xDE', '\x3', '\x2', '\x2', '\x2', '\x4', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x108', '\x3', '\x2', '\x2', '\x2', '\n', '\x10A', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x12A', '\x3', '\x2', '\x2', '\x2', '\xE', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x134', '\x3', '\x2', '\x2', '\x2', '\x14', '\x139', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x145', '\x3', '\x2', '\x2', '\x2', '\x18', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x160', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x165', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x167', '\x3', '\x2', '\x2', '\x2', '\"', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x175', '\x3', '\x2', '\x2', '\x2', '(', '\x17A', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x17D', '\x3', '\x2', '\x2', '\x2', ',', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x32', '\x192', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x197', '\x3', '\x2', '\x2', '\x2', '\x36', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		':', '\x1A2', '\x3', '\x2', '\x2', '\x2', '<', '\x1A6', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1B5', '\x3', '\x2', '\x2', '\x2', '@', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1BC', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1C5', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1C8', '\x3', '\x2', '\x2', '\x2', 'J', '\x1CA', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1D0', '\x3', '\x2', '\x2', '\x2', 'P', '\x1D5', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1D7', '\x3', '\x2', '\x2', '\x2', 'T', '\x1DB', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x1E9', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1F7', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x205', '\x3', '\x2', '\x2', '\x2', '^', '\x218', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x64', '\x223', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x22F', '\x3', '\x2', '\x2', '\x2', 'h', '\x234', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x240', '\x3', '\x2', '\x2', '\x2', 'n', '\x244', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x246', '\x3', '\x2', '\x2', '\x2', 'r', '\x24A', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x24F', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x254', '\x3', '\x2', '\x2', '\x2', 'x', '\x257', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x25A', '\x3', '\x2', '\x2', '\x2', '|', '\x25E', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x269', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x276', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x278', '\x3', '\x2', '\x2', '\x2', '\x86', '\x27A', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x294', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x296', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x90', '\x29C', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x2A8', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x2AA', '\x3', '\x2', '\x2', '\x2', '\x96', '\x2B0', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x2B7', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x2B9', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x2C0', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x2C6', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x2CE', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x2D5', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x2E6', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x2EA', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x30C', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x30E', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x311', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x352', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x396', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x39E', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x3A6', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x3B1', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x3B3', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x3BA', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\x3BC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\x3BE', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\x3C4', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\x3C6', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x3C8', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x3CC', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\x3CE', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x3D2', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xDF', '\x5', '\x4', '\x3', '\x2', '\xDF', '\xE3', 
		'\x5', '\x6', '\x4', '\x2', '\xE0', '\xE2', '\x5', '\b', '\x5', '\x2', 
		'\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE8', '\x5', '\n', 
		'\x6', '\x2', '\xE7', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xEB', '\x5', '\xE', '\b', '\x2', '\xEA', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF0', '\a', '\x2', '\x2', '\x3', '\xF0', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x3', '\x2', '\x2', 
		'\xF2', '\xF3', '\x5', '\xBA', '^', '\x2', '\xF3', '\xF4', '\a', '\x37', 
		'\x2', '\x2', '\xF4', '\x5', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', 
		'\a', '\x4', '\x2', '\x2', '\xF6', '\xF7', '\x5', '\xBE', '`', '\x2', 
		'\xF7', '\xF8', '\a', '\x11', '\x2', '\x2', '\xF8', '\xF9', '\x5', '\x92', 
		'J', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', 
		'\a', '\x37', '\x2', '\x2', '\xFB', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFD', '\a', '\x5', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\xBA', 
		'^', '\x2', '\xFE', '\xFF', '\a', '\x37', '\x2', '\x2', '\xFF', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\a', '\x5', '\x2', '\x2', 
		'\x101', '\x102', '\a', '\x4', '\x2', '\x2', '\x102', '\x104', '\x5', 
		'\xBA', '^', '\x2', '\x103', '\x105', '\x5', '\xBE', '`', '\x2', '\x104', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', 
		'\a', '\x37', '\x2', '\x2', '\x107', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x108', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\t', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x10C', '\a', '\a', '\x2', '\x2', '\x10B', '\x10D', '\x5', '\xBE', '`', 
		'\x2', '\x10C', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x110', '\x5', '\f', '\a', '\x2', '\x10F', '\x10E', '\x3', '\x2', 
		'\x2', '\x2', '\x110', '\x113', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x114', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x115', '\a', '\x10', '\x2', '\x2', '\x115', 
		'\x116', '\a', '\a', '\x2', '\x2', '\x116', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x118', '\x5', '\x92', 'J', '\x2', '\x118', '\x11B', 
		'\x5', '\xBE', '`', '\x2', '\x119', '\x11A', '\a', ';', '\x2', '\x2', 
		'\x11A', '\x11C', '\x5', '\xB8', ']', '\x2', '\x11B', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '\x37', '\x2', 
		'\x2', '\x11E', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', 
		'\a', '\a', '\x2', '\x2', '\x120', '\x124', '\x5', '\xBE', '`', '\x2', 
		'\x121', '\x123', '\x5', '\f', '\a', '\x2', '\x122', '\x121', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\x126', '\x3', '\x2', '\x2', '\x2', '\x124', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x127', '\x3', '\x2', '\x2', '\x2', '\x126', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x128', '\a', '\x10', '\x2', '\x2', '\x128', 
		'\x129', '\a', '\a', '\x2', '\x2', '\x129', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x117', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x130', '\x5', '\x12', '\n', '\x2', '\x12D', '\x130', '\x5', 
		'z', '>', '\x2', '\x12E', '\x130', '\x5', '\x10', '\t', '\x2', '\x12F', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x12F', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x132', '\a', '\n', '\x2', '\x2', '\x132', 
		'\x133', '\x5', '\x14', '\v', '\x2', '\x133', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x135', '\x5', '\x14', '\v', '\x2', '\x135', '\x136', 
		'\x5', '\x1A', '\xE', '\x2', '\x136', '\x137', '\a', '\x10', '\x2', '\x2', 
		'\x137', '\x138', '\a', '\t', '\x2', '\x2', '\x138', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x139', '\x13A', '\a', '\t', '\x2', '\x2', '\x13A', '\x13B', 
		'\x5', '\xA2', 'R', '\x2', '\x13B', '\x13D', '\x5', '\xBE', '`', '\x2', 
		'\x13C', '\x13E', '\x5', '\x8C', 'G', '\x2', '\x13D', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x141', '\a', '\x46', '\x2', 
		'\x2', '\x140', '\x142', '\x5', '\x16', '\f', '\x2', '\x141', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x143', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\a', 
		'G', '\x2', '\x2', '\x144', '\x15', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x14A', '\x5', '\x18', '\r', '\x2', '\x146', '\x147', '\a', ':', '\x2', 
		'\x2', '\x147', '\x149', '\x5', '\x18', '\r', '\x2', '\x148', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x17', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x5', '\x92', 
		'J', '\x2', '\x14E', '\x151', '\x5', '\xBE', '`', '\x2', '\x14F', '\x150', 
		'\a', ';', '\x2', '\x2', '\x150', '\x152', '\x5', '\xB8', ']', '\x2', 
		'\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x19', '\x3', '\x2', '\x2', '\x2', '\x153', 
		'\x155', '\x5', '\x1C', '\xF', '\x2', '\x154', '\x153', '\x3', '\x2', 
		'\x2', '\x2', '\x155', '\x158', '\x3', '\x2', '\x2', '\x2', '\x156', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x158', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x161', '\x5', ' ', '\x11', '\x2', '\x15A', 
		'\x161', '\x5', ',', '\x17', '\x2', '\x15B', '\x161', '\x5', ':', '\x1E', 
		'\x2', '\x15C', '\x161', '\x5', '\x42', '\"', '\x2', '\x15D', '\x161', 
		'\x5', 'J', '&', '\x2', '\x15E', '\x161', '\x5', 'R', '*', '\x2', '\x15F', 
		'\x161', '\x5', '\x64', '\x33', '\x2', '\x160', '\x159', '\x3', '\x2', 
		'\x2', '\x2', '\x160', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x160', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x161', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x162', '\x166', '\x5', '\"', '\x12', 
		'\x2', '\x163', '\x166', '\x5', '(', '\x15', '\x2', '\x164', '\x166', 
		'\x5', '*', '\x16', '\x2', '\x165', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x163', '\x3', '\x2', '\x2', '\x2', '\x165', '\x164', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x168', '\x5', '\x1E', '\x10', '\x2', '\x168', '\x169', '\a', '\x37', 
		'\x2', '\x2', '\x169', '!', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', 
		'\x5', '$', '\x13', '\x2', '\x16B', '#', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x16D', '\x5', '\x92', 'J', '\x2', '\x16D', '\x172', '\x5', '&', '\x14', 
		'\x2', '\x16E', '\x16F', '\a', ':', '\x2', '\x2', '\x16F', '\x171', '\x5', 
		'&', '\x14', '\x2', '\x170', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'\x174', '\x3', '\x2', '\x2', '\x2', '\x172', '\x170', '\x3', '\x2', '\x2', 
		'\x2', '\x172', '\x173', '\x3', '\x2', '\x2', '\x2', '\x173', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x172', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x178', '\x5', '\xBE', '`', '\x2', '\x176', '\x177', '\a', ';', '\x2', 
		'\x2', '\x177', '\x179', '\x5', '\xB8', ']', '\x2', '\x178', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\'', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', '\a', '\v', 
		'\x2', '\x2', '\x17B', '\x17C', '\x5', '\xB8', ']', '\x2', '\x17C', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\x5', '\xB8', ']', '\x2', 
		'\x17E', '+', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x5', '\x32', 
		'\x1A', '\x2', '\x180', '\x184', '\x5', '\x1A', '\xE', '\x2', '\x181', 
		'\x183', '\x5', '.', '\x18', '\x2', '\x182', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x186', '\x3', '\x2', '\x2', '\x2', '\x184', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x188', '\x3', '\x2', '\x2', '\x2', '\x186', '\x184', '\x3', 
		'\x2', '\x2', '\x2', '\x187', '\x189', '\x5', '\x30', '\x19', '\x2', '\x188', 
		'\x187', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x189', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', 
		'\x5', '\x38', '\x1D', '\x2', '\x18B', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18D', '\x5', '\x34', '\x1B', '\x2', '\x18D', '\x18E', '\x5', 
		'\x1A', '\xE', '\x2', '\x18E', '/', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x190', '\x5', '\x36', '\x1C', '\x2', '\x190', '\x191', '\x5', '\x1A', 
		'\xE', '\x2', '\x191', '\x31', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', 
		'\a', '\x14', '\x2', '\x2', '\x193', '\x194', '\a', '\x46', '\x2', '\x2', 
		'\x194', '\x195', '\x5', '\xB8', ']', '\x2', '\x195', '\x196', '\a', 'G', 
		'\x2', '\x2', '\x196', '\x33', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', 
		'\a', '\x15', '\x2', '\x2', '\x198', '\x199', '\a', '\x14', '\x2', '\x2', 
		'\x199', '\x19A', '\a', '\x46', '\x2', '\x2', '\x19A', '\x19B', '\x5', 
		'\xB8', ']', '\x2', '\x19B', '\x19C', '\a', 'G', '\x2', '\x2', '\x19C', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\a', '\x15', '\x2', 
		'\x2', '\x19E', '\x37', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', 
		'\a', '\x10', '\x2', '\x2', '\x1A0', '\x1A1', '\a', '\x14', '\x2', '\x2', 
		'\x1A1', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\x5', 
		'<', '\x1F', '\x2', '\x1A3', '\x1A4', '\x5', '\x1A', '\xE', '\x2', '\x1A4', 
		'\x1A5', '\x5', '>', ' ', '\x2', '\x1A5', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x1A6', '\x1A7', '\a', '\x11', '\x2', '\x2', '\x1A7', '\x1A9', '\a', 
		'\x46', '\x2', '\x2', '\x1A8', '\x1AA', '\x5', '@', '!', '\x2', '\x1A9', 
		'\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AD', 
		'\a', '\x37', '\x2', '\x2', '\x1AC', '\x1AE', '\x5', '\xA4', 'S', '\x2', 
		'\x1AD', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1B1', '\a', '\x37', '\x2', '\x2', '\x1B0', '\x1B2', '\x5', '\xA4', 
		'S', '\x2', '\x1B1', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B4', '\a', 'G', '\x2', '\x2', '\x1B4', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5', '\x1B6', '\a', '\x10', '\x2', '\x2', '\x1B6', '\x1B7', 
		'\a', '\x11', '\x2', '\x2', '\x1B7', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1BB', '\x5', '$', '\x13', '\x2', '\x1B9', '\x1BB', '\x5', 
		'\xA4', 'S', '\x2', '\x1BA', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x1BC', '\x1BD', '\x5', '\x44', '#', '\x2', '\x1BD', '\x1BE', 
		'\x5', '\x1A', '\xE', '\x2', '\x1BE', '\x1BF', '\x5', '\x46', '$', '\x2', 
		'\x1BF', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\a', '\x18', 
		'\x2', '\x2', '\x1C1', '\x1C2', '\a', '\x46', '\x2', '\x2', '\x1C2', '\x1C3', 
		'\x5', '\xB8', ']', '\x2', '\x1C3', '\x1C4', '\a', 'G', '\x2', '\x2', 
		'\x1C4', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\a', '\x10', 
		'\x2', '\x2', '\x1C6', '\x1C7', '\a', '\x18', '\x2', '\x2', '\x1C7', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x5', '\x62', '\x32', '\x2', 
		'\x1C9', 'I', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\x5', 'L', 
		'\'', '\x2', '\x1CB', '\x1CC', '\x5', '\x1A', '\xE', '\x2', '\x1CC', '\x1CD', 
		'\x5', 'N', '(', '\x2', '\x1CD', 'K', '\x3', '\x2', '\x2', '\x2', '\x1CE', 
		'\x1CF', '\a', '\x16', '\x2', '\x2', '\x1CF', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x1D0', '\x1D1', '\a', '\x17', '\x2', '\x2', '\x1D1', '\x1D2', 
		'\a', '\x46', '\x2', '\x2', '\x1D2', '\x1D3', '\x5', '\xB8', ']', '\x2', 
		'\x1D3', '\x1D4', '\a', 'G', '\x2', '\x2', '\x1D4', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x1D5', '\x1D6', '\x5', '\x62', '\x32', '\x2', '\x1D6', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\x5', 'T', '+', '\x2', 
		'\x1D8', '\x1D9', '\x5', '\x1A', '\xE', '\x2', '\x1D9', '\x1DA', '\x5', 
		'V', ',', '\x2', '\x1DA', 'S', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', 
		'\a', '\x19', '\x2', '\x2', '\x1DC', '\x1DD', '\a', '\x46', '\x2', '\x2', 
		'\x1DD', '\x1DF', '\x5', 'X', '-', '\x2', '\x1DE', '\x1E0', '\x5', '^', 
		'\x30', '\x2', '\x1DF', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1DF', 
		'\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E2', '\x3', '\x2', '\x2', 
		'\x2', '\x1E1', '\x1E3', '\x5', '`', '\x31', '\x2', '\x1E2', '\x1E1', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\a', 
		'G', '\x2', '\x2', '\x1E5', 'U', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\x1E7', '\a', '\x10', '\x2', '\x2', '\x1E7', '\x1E8', '\a', '\x19', '\x2', 
		'\x2', '\x1E8', 'W', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EE', '\x5', 
		'Z', '.', '\x2', '\x1EA', '\x1EB', '\a', 'O', '\x2', '\x2', '\x1EB', '\x1ED', 
		'\x5', 'Z', '.', '\x2', '\x1EC', '\x1EA', '\x3', '\x2', '\x2', '\x2', 
		'\x1ED', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EF', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1EE', '\x3', '\x2', '\x2', 
		'\x2', '\x1F1', '\x1F3', '\x5', '\x92', 'J', '\x2', '\x1F2', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\x3', '\x2', '\x2', '\x2', 
		'\x1F3', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\x5', 
		'\xBE', '`', '\x2', '\x1F5', '\x1F6', '\a', '\x38', '\x2', '\x2', '\x1F6', 
		'\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F2', '\x3', '\x2', '\x2', 
		'\x2', '\x1F7', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', 
		'\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\x5', '\\', '/', '\x2', 
		'\x1FA', '[', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\b', '/', 
		'\x1', '\x2', '\x1FC', '\x1FD', '\a', '\x35', '\x2', '\x2', '\x1FD', '\x1FE', 
		'\a', '\x46', '\x2', '\x2', '\x1FE', '\x1FF', '\x5', '\x92', 'J', '\x2', 
		'\x1FF', '\x200', '\a', 'G', '\x2', '\x2', '\x200', '\x206', '\x3', '\x2', 
		'\x2', '\x2', '\x201', '\x203', '\x5', '\xBE', '`', '\x2', '\x202', '\x204', 
		'\x5', '\x8C', 'G', '\x2', '\x203', '\x202', '\x3', '\x2', '\x2', '\x2', 
		'\x203', '\x204', '\x3', '\x2', '\x2', '\x2', '\x204', '\x206', '\x3', 
		'\x2', '\x2', '\x2', '\x205', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x205', 
		'\x201', '\x3', '\x2', '\x2', '\x2', '\x206', '\x215', '\x3', '\x2', '\x2', 
		'\x2', '\x207', '\x208', '\f', '\x4', '\x2', '\x2', '\x208', '\x209', 
		'\a', '\x39', '\x2', '\x2', '\x209', '\x20B', '\x5', '\xBE', '`', '\x2', 
		'\x20A', '\x20C', '\x5', '\x8C', 'G', '\x2', '\x20B', '\x20A', '\x3', 
		'\x2', '\x2', '\x2', '\x20B', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x214', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', '\f', '\x3', '\x2', 
		'\x2', '\x20E', '\x210', '\a', '\x46', '\x2', '\x2', '\x20F', '\x211', 
		'\x5', '\xA4', 'S', '\x2', '\x210', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'\x210', '\x211', '\x3', '\x2', '\x2', '\x2', '\x211', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x214', '\a', 'G', '\x2', '\x2', '\x213', 
		'\x207', '\x3', '\x2', '\x2', '\x2', '\x213', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x214', '\x217', '\x3', '\x2', '\x2', '\x2', '\x215', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x216', '\x3', '\x2', '\x2', '\x2', 
		'\x216', ']', '\x3', '\x2', '\x2', '\x2', '\x217', '\x215', '\x3', '\x2', 
		'\x2', '\x2', '\x218', '\x219', '\a', '\x1B', '\x2', '\x2', '\x219', '\x21A', 
		'\x5', '\xB8', ']', '\x2', '\x21A', '_', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x21C', '\x5', '\x62', '\x32', '\x2', '\x21C', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x21D', '\x21E', '\a', '\x37', '\x2', '\x2', '\x21E', '\x21F', 
		'\a', '\x1E', '\x2', '\x2', '\x21F', '\x220', '\x5', '\xBE', '`', '\x2', 
		'\x220', '\x221', '\a', ';', '\x2', '\x2', '\x221', '\x222', '\x5', '\xDA', 
		'n', '\x2', '\x222', '\x63', '\x3', '\x2', '\x2', '\x2', '\x223', '\x227', 
		'\x5', '\x66', '\x34', '\x2', '\x224', '\x226', '\x5', 'j', '\x36', '\x2', 
		'\x225', '\x224', '\x3', '\x2', '\x2', '\x2', '\x226', '\x229', '\x3', 
		'\x2', '\x2', '\x2', '\x227', '\x225', '\x3', '\x2', '\x2', '\x2', '\x227', 
		'\x228', '\x3', '\x2', '\x2', '\x2', '\x228', '\x22B', '\x3', '\x2', '\x2', 
		'\x2', '\x229', '\x227', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22C', 
		'\x5', 'v', '<', '\x2', '\x22B', '\x22A', '\x3', '\x2', '\x2', '\x2', 
		'\x22B', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', '\x3', 
		'\x2', '\x2', '\x2', '\x22D', '\x22E', '\x5', 'h', '\x35', '\x2', '\x22E', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\a', '\f', '\x2', 
		'\x2', '\x230', '\x231', '\a', '\x46', '\x2', '\x2', '\x231', '\x232', 
		'\x5', '\xB8', ']', '\x2', '\x232', '\x233', '\a', 'G', '\x2', '\x2', 
		'\x233', 'g', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\a', '\x10', 
		'\x2', '\x2', '\x235', '\x236', '\a', '\f', '\x2', '\x2', '\x236', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\x5', 'l', '\x37', '\x2', 
		'\x238', '\x239', '\x5', '\x1A', '\xE', '\x2', '\x239', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x23A', '\x23C', '\x5', 'n', '\x38', '\x2', '\x23B', '\x23A', 
		'\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', '\x3', '\x2', '\x2', '\x2', 
		'\x23D', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\x3', 
		'\x2', '\x2', '\x2', '\x23E', '\x241', '\x3', '\x2', '\x2', '\x2', '\x23F', 
		'\x241', '\x5', 't', ';', '\x2', '\x240', '\x23B', '\x3', '\x2', '\x2', 
		'\x2', '\x240', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x241', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x242', '\x245', '\x5', 'p', '\x39', '\x2', '\x243', 
		'\x245', '\x5', 'r', ':', '\x2', '\x244', '\x242', '\x3', '\x2', '\x2', 
		'\x2', '\x244', '\x243', '\x3', '\x2', '\x2', '\x2', '\x245', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x246', '\x247', '\a', '\r', '\x2', '\x2', '\x247', 
		'\x248', '\x5', '\xA4', 'S', '\x2', '\x248', '\x249', '\a', '\x38', '\x2', 
		'\x2', '\x249', 'q', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', '\a', 
		'\xE', '\x2', '\x2', '\x24B', '\x24C', '\a', '\x33', '\x2', '\x2', '\x24C', 
		'\x24D', '\x5', '\x90', 'I', '\x2', '\x24D', '\x24E', '\a', '\x38', '\x2', 
		'\x2', '\x24E', 's', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\a', 
		'\xE', '\x2', '\x2', '\x250', '\x251', '\a', '\x34', '\x2', '\x2', '\x251', 
		'\x252', '\x5', '\x92', 'J', '\x2', '\x252', '\x253', '\a', '\x38', '\x2', 
		'\x2', '\x253', 'u', '\x3', '\x2', '\x2', '\x2', '\x254', '\x255', '\x5', 
		'x', '=', '\x2', '\x255', '\x256', '\x5', '\x1A', '\xE', '\x2', '\x256', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\a', '\x36', '\x2', 
		'\x2', '\x258', '\x259', '\a', '\x38', '\x2', '\x2', '\x259', 'y', '\x3', 
		'\x2', '\x2', '\x2', '\x25A', '\x25B', '\x5', '|', '?', '\x2', '\x25B', 
		'\x25C', '\x5', '~', '@', '\x2', '\x25C', '\x25D', '\a', 'z', '\x2', '\x2', 
		'\x25D', '{', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\a', '\b', 
		'\x2', '\x2', '\x25F', '\x260', '\x5', '\xBE', '`', '\x2', '\x260', '\x262', 
		'\a', '\x46', '\x2', '\x2', '\x261', '\x263', '\x5', '\x16', '\f', '\x2', 
		'\x262', '\x261', '\x3', '\x2', '\x2', '\x2', '\x262', '\x263', '\x3', 
		'\x2', '\x2', '\x2', '\x263', '\x264', '\x3', '\x2', '\x2', '\x2', '\x264', 
		'\x265', '\a', 'G', '\x2', '\x2', '\x265', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x266', '\x268', '\x5', '\x80', '\x41', '\x2', '\x267', '\x266', '\x3', 
		'\x2', '\x2', '\x2', '\x268', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x269', 
		'\x267', '\x3', '\x2', '\x2', '\x2', '\x269', '\x26A', '\x3', '\x2', '\x2', 
		'\x2', '\x26A', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x269', 
		'\x3', '\x2', '\x2', '\x2', '\x26C', '\x26E', '\x5', '\x82', '\x42', '\x2', 
		'\x26D', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x271', '\x3', 
		'\x2', '\x2', '\x2', '\x26F', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26F', 
		'\x270', '\x3', '\x2', '\x2', '\x2', '\x270', '\x272', '\x3', '\x2', '\x2', 
		'\x2', '\x271', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x272', '\x273', 
		'\x5', '\x86', '\x44', '\x2', '\x273', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x274', '\x277', '\x5', '\x84', '\x43', '\x2', '\x275', '\x277', '\x5', 
		'\x88', '\x45', '\x2', '\x276', '\x274', '\x3', '\x2', '\x2', '\x2', '\x276', 
		'\x275', '\x3', '\x2', '\x2', '\x2', '\x277', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x278', '\x279', '\a', '|', '\x2', '\x2', '\x279', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x27A', '\x27B', '\t', '\x2', '\x2', '\x2', '\x27B', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27E', '\a', '\x7F', '\x2', 
		'\x2', '\x27D', '\x27F', '\x5', '\x8A', '\x46', '\x2', '\x27E', '\x27D', 
		'\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x280', '\x3', '\x2', '\x2', '\x2', '\x280', '\x281', '\a', 
		'\x80', '\x2', '\x2', '\x281', '\x89', '\x3', '\x2', '\x2', '\x2', '\x282', 
		'\x295', '\x5', '\"', '\x12', '\x2', '\x283', '\x295', '\x5', '*', '\x16', 
		'\x2', '\x284', '\x295', '\x5', '\x32', '\x1A', '\x2', '\x285', '\x295', 
		'\x5', '\x34', '\x1B', '\x2', '\x286', '\x295', '\x5', '\x36', '\x1C', 
		'\x2', '\x287', '\x295', '\x5', '\x38', '\x1D', '\x2', '\x288', '\x295', 
		'\x5', '<', '\x1F', '\x2', '\x289', '\x295', '\x5', '>', ' ', '\x2', '\x28A', 
		'\x295', '\x5', '\x44', '#', '\x2', '\x28B', '\x295', '\x5', '\x46', '$', 
		'\x2', '\x28C', '\x295', '\x5', 'L', '\'', '\x2', '\x28D', '\x295', '\x5', 
		'N', '(', '\x2', '\x28E', '\x295', '\x5', 'T', '+', '\x2', '\x28F', '\x295', 
		'\x5', 'V', ',', '\x2', '\x290', '\x295', '\x5', '\x66', '\x34', '\x2', 
		'\x291', '\x295', '\x5', 'h', '\x35', '\x2', '\x292', '\x295', '\x5', 
		'l', '\x37', '\x2', '\x293', '\x295', '\x5', 'x', '=', '\x2', '\x294', 
		'\x282', '\x3', '\x2', '\x2', '\x2', '\x294', '\x283', '\x3', '\x2', '\x2', 
		'\x2', '\x294', '\x284', '\x3', '\x2', '\x2', '\x2', '\x294', '\x285', 
		'\x3', '\x2', '\x2', '\x2', '\x294', '\x286', '\x3', '\x2', '\x2', '\x2', 
		'\x294', '\x287', '\x3', '\x2', '\x2', '\x2', '\x294', '\x288', '\x3', 
		'\x2', '\x2', '\x2', '\x294', '\x289', '\x3', '\x2', '\x2', '\x2', '\x294', 
		'\x28A', '\x3', '\x2', '\x2', '\x2', '\x294', '\x28B', '\x3', '\x2', '\x2', 
		'\x2', '\x294', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x294', '\x28D', 
		'\x3', '\x2', '\x2', '\x2', '\x294', '\x28E', '\x3', '\x2', '\x2', '\x2', 
		'\x294', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x294', '\x290', '\x3', 
		'\x2', '\x2', '\x2', '\x294', '\x291', '\x3', '\x2', '\x2', '\x2', '\x294', 
		'\x292', '\x3', '\x2', '\x2', '\x2', '\x294', '\x293', '\x3', '\x2', '\x2', 
		'\x2', '\x295', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x296', '\x297', 
		'\a', 'P', '\x2', '\x2', '\x297', '\x298', '\x5', '\x90', 'I', '\x2', 
		'\x298', '\x299', '\a', 'Q', '\x2', '\x2', '\x299', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x29A', '\x29B', '\t', '\x3', '\x2', '\x2', '\x29B', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x29C', '\x2A1', '\x5', '\x92', 'J', '\x2', 
		'\x29D', '\x29E', '\a', ':', '\x2', '\x2', '\x29E', '\x2A0', '\x5', '\x92', 
		'J', '\x2', '\x29F', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A3', 
		'\x3', '\x2', '\x2', '\x2', '\x2A1', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x2A1', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x2A3', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x2A4', 
		'\x2A9', '\x5', '\x94', 'K', '\x2', '\x2A5', '\x2A9', '\x5', '\x98', 'M', 
		'\x2', '\x2A6', '\x2A9', '\x5', '\x9C', 'O', '\x2', '\x2A7', '\x2A9', 
		'\x5', '\x9E', 'P', '\x2', '\x2A8', '\x2A4', '\x3', '\x2', '\x2', '\x2', 
		'\x2A8', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A6', '\x3', 
		'\x2', '\x2', '\x2', '\x2A8', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A9', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\x5', '\x96', 'L', 
		'\x2', '\x2AB', '\x2AC', '\x5', '\xA8', 'U', '\x2', '\x2AC', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x2AD', '\x2B1', '\x5', '\x98', 'M', '\x2', '\x2AE', 
		'\x2B1', '\x5', '\x9C', 'O', '\x2', '\x2AF', '\x2B1', '\x5', '\x9E', 'P', 
		'\x2', '\x2B0', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2AE', 
		'\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2AF', '\x3', '\x2', '\x2', '\x2', 
		'\x2B1', '\x97', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', '\x5', 
		'\x9A', 'N', '\x2', '\x2B3', '\x2B4', '\a', 'T', '\x2', '\x2', '\x2B4', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x2B5', '\x2B8', '\x5', '\x9C', 'O', 
		'\x2', '\x2B6', '\x2B8', '\x5', '\x9E', 'P', '\x2', '\x2B7', '\x2B5', 
		'\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B6', '\x3', '\x2', '\x2', '\x2', 
		'\x2B8', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BA', '\x5', 
		'\xBA', '^', '\x2', '\x2BA', '\x2BB', '\x5', '\x8C', 'G', '\x2', '\x2BB', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BF', '\x5', '\xBA', '^', 
		'\x2', '\x2BD', '\x2BF', '\x5', '\x8E', 'H', '\x2', '\x2BE', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BD', '\x3', '\x2', '\x2', '\x2', 
		'\x2BF', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\a', '\xF', 
		'\x2', '\x2', '\x2C1', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C5', 
		'\x5', '\x92', 'J', '\x2', '\x2C3', '\x2C5', '\x5', '\xA0', 'Q', '\x2', 
		'\x2C4', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C3', '\x3', 
		'\x2', '\x2', '\x2', '\x2C5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\x2CB', '\x5', '\xB8', ']', '\x2', '\x2C7', '\x2C8', '\a', ':', '\x2', 
		'\x2', '\x2C8', '\x2CA', '\x5', '\xB8', ']', '\x2', '\x2C9', '\x2C7', 
		'\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CD', '\x3', '\x2', '\x2', '\x2', 
		'\x2CB', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2CC', '\x3', 
		'\x2', '\x2', '\x2', '\x2CC', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x2CD', 
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2CF', '\x5', '\xB8', 
		']', '\x2', '\x2CF', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D2', 
		'\x5', '\xAA', 'V', '\x2', '\x2D1', '\x2D0', '\x3', '\x2', '\x2', '\x2', 
		'\x2D2', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D1', '\x3', 
		'\x2', '\x2', '\x2', '\x2D3', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D4', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D9', '\a', 'H', '\x2', 
		'\x2', '\x2D6', '\x2D8', '\a', ':', '\x2', '\x2', '\x2D7', '\x2D6', '\x3', 
		'\x2', '\x2', '\x2', '\x2D8', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2D9', 
		'\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DA', '\x3', '\x2', '\x2', 
		'\x2', '\x2DA', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2D9', 
		'\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DD', '\a', 'I', '\x2', '\x2', 
		'\x2DD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2E3', '\x5', 
		'\xAE', 'X', '\x2', '\x2DF', '\x2E0', '\a', '\x39', '\x2', '\x2', '\x2E0', 
		'\x2E2', '\x5', '\xAE', 'X', '\x2', '\x2E1', '\x2DF', '\x3', '\x2', '\x2', 
		'\x2', '\x2E2', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E1', 
		'\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E4', '\x3', '\x2', '\x2', '\x2', 
		'\x2E4', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E3', '\x3', 
		'\x2', '\x2', '\x2', '\x2E6', '\x2E8', '\x5', '\xBE', '`', '\x2', '\x2E7', 
		'\x2E9', '\x5', '\xB0', 'Y', '\x2', '\x2E8', '\x2E7', '\x3', '\x2', '\x2', 
		'\x2', '\x2E8', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EE', '\a', 'P', '\x2', '\x2', 
		'\x2EB', '\x2ED', '\a', ':', '\x2', '\x2', '\x2EC', '\x2EB', '\x3', '\x2', 
		'\x2', '\x2', '\x2ED', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EC', 
		'\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EF', '\x3', '\x2', '\x2', '\x2', 
		'\x2EF', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2EE', '\x3', 
		'\x2', '\x2', '\x2', '\x2F1', '\x2F2', '\a', 'Q', '\x2', '\x2', '\x2F2', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2FC', '\a', '\x46', '\x2', 
		'\x2', '\x2F4', '\x2F9', '\x5', '\xB4', '[', '\x2', '\x2F5', '\x2F6', 
		'\a', ':', '\x2', '\x2', '\x2F6', '\x2F8', '\x5', '\xB4', '[', '\x2', 
		'\x2F7', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2FB', '\x3', 
		'\x2', '\x2', '\x2', '\x2F9', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F9', 
		'\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2FD', '\x3', '\x2', '\x2', 
		'\x2', '\x2FB', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2F4', 
		'\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2FD', '\x3', '\x2', '\x2', '\x2', 
		'\x2FD', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x30D', '\a', 
		'G', '\x2', '\x2', '\x2FF', '\x308', '\a', '\x46', '\x2', '\x2', '\x300', 
		'\x305', '\x5', '\xB6', '\\', '\x2', '\x301', '\x302', '\a', ':', '\x2', 
		'\x2', '\x302', '\x304', '\x5', '\xB6', '\\', '\x2', '\x303', '\x301', 
		'\x3', '\x2', '\x2', '\x2', '\x304', '\x307', '\x3', '\x2', '\x2', '\x2', 
		'\x305', '\x303', '\x3', '\x2', '\x2', '\x2', '\x305', '\x306', '\x3', 
		'\x2', '\x2', '\x2', '\x306', '\x309', '\x3', '\x2', '\x2', '\x2', '\x307', 
		'\x305', '\x3', '\x2', '\x2', '\x2', '\x308', '\x300', '\x3', '\x2', '\x2', 
		'\x2', '\x308', '\x309', '\x3', '\x2', '\x2', '\x2', '\x309', '\x30A', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x30D', '\a', 'G', '\x2', '\x2', 
		'\x30B', '\x30D', '\x5', '\xB6', '\\', '\x2', '\x30C', '\x2F3', '\x3', 
		'\x2', '\x2', '\x2', '\x30C', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x30C', 
		'\x30B', '\x3', '\x2', '\x2', '\x2', '\x30D', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\x30E', '\x30F', '\x5', '\x92', 'J', '\x2', '\x30F', '\x310', 
		'\x5', '\xBE', '`', '\x2', '\x310', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\x311', '\x312', '\x5', '\xBE', '`', '\x2', '\x312', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\x313', '\x314', '\b', ']', '\x1', '\x2', '\x314', '\x353', 
		'\a', '\x31', '\x2', '\x2', '\x315', '\x353', '\x5', '\xC0', '\x61', '\x2', 
		'\x316', '\x317', '\a', '\x35', '\x2', '\x2', '\x317', '\x318', '\a', 
		'\x46', '\x2', '\x2', '\x318', '\x319', '\a', '\xF', '\x2', '\x2', '\x319', 
		'\x353', '\a', 'G', '\x2', '\x2', '\x31A', '\x31B', '\a', '\x35', '\x2', 
		'\x2', '\x31B', '\x31C', '\a', '\x46', '\x2', '\x2', '\x31C', '\x31D', 
		'\x5', '\xAC', 'W', '\x2', '\x31D', '\x31E', '\a', 'G', '\x2', '\x2', 
		'\x31E', '\x353', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x320', '\a', 
		'\x35', '\x2', '\x2', '\x320', '\x321', '\a', '\x46', '\x2', '\x2', '\x321', 
		'\x322', '\x5', '\x92', 'J', '\x2', '\x322', '\x323', '\a', 'G', '\x2', 
		'\x2', '\x323', '\x353', '\x3', '\x2', '\x2', '\x2', '\x324', '\x325', 
		'\a', '\x36', '\x2', '\x2', '\x325', '\x326', '\a', '\x46', '\x2', '\x2', 
		'\x326', '\x327', '\x5', '\x92', 'J', '\x2', '\x327', '\x328', '\a', 'G', 
		'\x2', '\x2', '\x328', '\x353', '\x3', '\x2', '\x2', '\x2', '\x329', '\x32A', 
		'\a', '\x32', '\x2', '\x2', '\x32A', '\x32B', '\x5', '\x92', 'J', '\x2', 
		'\x32B', '\x32D', '\a', '\x46', '\x2', '\x2', '\x32C', '\x32E', '\x5', 
		'\xA4', 'S', '\x2', '\x32D', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x32D', 
		'\x32E', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x32F', '\x3', '\x2', '\x2', 
		'\x2', '\x32F', '\x330', '\a', 'G', '\x2', '\x2', '\x330', '\x353', '\x3', 
		'\x2', '\x2', '\x2', '\x331', '\x333', '\x5', '\xBE', '`', '\x2', '\x332', 
		'\x334', '\x5', '\x8C', 'G', '\x2', '\x333', '\x332', '\x3', '\x2', '\x2', 
		'\x2', '\x333', '\x334', '\x3', '\x2', '\x2', '\x2', '\x334', '\x353', 
		'\x3', '\x2', '\x2', '\x2', '\x335', '\x336', '\a', '\x1A', '\x2', '\x2', 
		'\x336', '\x337', '\a', '\x46', '\x2', '\x2', '\x337', '\x339', '\x5', 
		'X', '-', '\x2', '\x338', '\x33A', '\x5', '^', '\x30', '\x2', '\x339', 
		'\x338', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33A', '\x3', '\x2', '\x2', 
		'\x2', '\x33A', '\x33B', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33C', 
		'\a', 'G', '\x2', '\x2', '\x33C', '\x353', '\x3', '\x2', '\x2', '\x2', 
		'\x33D', '\x33E', '\a', '\x46', '\x2', '\x2', '\x33E', '\x33F', '\x5', 
		'\xB8', ']', '\x2', '\x33F', '\x340', '\a', 'G', '\x2', '\x2', '\x340', 
		'\x353', '\x3', '\x2', '\x2', '\x2', '\x341', '\x342', '\x5', '\x8E', 
		'H', '\x2', '\x342', '\x343', '\a', '\x39', '\x2', '\x2', '\x343', '\x345', 
		'\x5', '\xBE', '`', '\x2', '\x344', '\x346', '\x5', '\x8C', 'G', '\x2', 
		'\x345', '\x344', '\x3', '\x2', '\x2', '\x2', '\x345', '\x346', '\x3', 
		'\x2', '\x2', '\x2', '\x346', '\x353', '\x3', '\x2', '\x2', '\x2', '\x347', 
		'\x348', '\a', '\x46', '\x2', '\x2', '\x348', '\x349', '\x5', '\x92', 
		'J', '\x2', '\x349', '\x34A', '\a', 'G', '\x2', '\x2', '\x34A', '\x34B', 
		'\x5', '\xB8', ']', '\x13', '\x34B', '\x353', '\x3', '\x2', '\x2', '\x2', 
		'\x34C', '\x34D', '\t', '\x4', '\x2', '\x2', '\x34D', '\x353', '\x5', 
		'\xB8', ']', '\x12', '\x34E', '\x34F', '\x5', '\xB2', 'Z', '\x2', '\x34F', 
		'\x350', '\a', 'N', '\x2', '\x2', '\x350', '\x351', '\x5', '\xB8', ']', 
		'\x3', '\x351', '\x353', '\x3', '\x2', '\x2', '\x2', '\x352', '\x313', 
		'\x3', '\x2', '\x2', '\x2', '\x352', '\x315', '\x3', '\x2', '\x2', '\x2', 
		'\x352', '\x316', '\x3', '\x2', '\x2', '\x2', '\x352', '\x31A', '\x3', 
		'\x2', '\x2', '\x2', '\x352', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x352', 
		'\x324', '\x3', '\x2', '\x2', '\x2', '\x352', '\x329', '\x3', '\x2', '\x2', 
		'\x2', '\x352', '\x331', '\x3', '\x2', '\x2', '\x2', '\x352', '\x335', 
		'\x3', '\x2', '\x2', '\x2', '\x352', '\x33D', '\x3', '\x2', '\x2', '\x2', 
		'\x352', '\x341', '\x3', '\x2', '\x2', '\x2', '\x352', '\x347', '\x3', 
		'\x2', '\x2', '\x2', '\x352', '\x34C', '\x3', '\x2', '\x2', '\x2', '\x352', 
		'\x34E', '\x3', '\x2', '\x2', '\x2', '\x353', '\x393', '\x3', '\x2', '\x2', 
		'\x2', '\x354', '\x355', '\f', '\x10', '\x2', '\x2', '\x355', '\x356', 
		'\t', '\x5', '\x2', '\x2', '\x356', '\x392', '\x5', '\xB8', ']', '\x11', 
		'\x357', '\x358', '\f', '\xF', '\x2', '\x2', '\x358', '\x359', '\t', '\x6', 
		'\x2', '\x2', '\x359', '\x392', '\x5', '\xB8', ']', '\x10', '\x35A', '\x35B', 
		'\f', '\xE', '\x2', '\x2', '\x35B', '\x35C', '\t', '\a', '\x2', '\x2', 
		'\x35C', '\x392', '\x5', '\xB8', ']', '\xF', '\x35D', '\x35E', '\f', '\f', 
		'\x2', '\x2', '\x35E', '\x35F', '\t', '\b', '\x2', '\x2', '\x35F', '\x392', 
		'\x5', '\xB8', ']', '\r', '\x360', '\x361', '\f', '\v', '\x2', '\x2', 
		'\x361', '\x362', '\a', '_', '\x2', '\x2', '\x362', '\x392', '\x5', '\xB8', 
		']', '\f', '\x363', '\x364', '\f', '\n', '\x2', '\x2', '\x364', '\x365', 
		'\a', '`', '\x2', '\x2', '\x365', '\x392', '\x5', '\xB8', ']', '\v', '\x366', 
		'\x367', '\f', '\t', '\x2', '\x2', '\x367', '\x368', '\a', '\x61', '\x2', 
		'\x2', '\x368', '\x392', '\x5', '\xB8', ']', '\n', '\x369', '\x36A', '\f', 
		'\b', '\x2', '\x2', '\x36A', '\x36B', '\a', '\x62', '\x2', '\x2', '\x36B', 
		'\x392', '\x5', '\xB8', ']', '\t', '\x36C', '\x36D', '\f', '\a', '\x2', 
		'\x2', '\x36D', '\x36E', '\a', '\x63', '\x2', '\x2', '\x36E', '\x392', 
		'\x5', '\xB8', ']', '\b', '\x36F', '\x370', '\f', '\x6', '\x2', '\x2', 
		'\x370', '\x371', '\a', '\x64', '\x2', '\x2', '\x371', '\x392', '\x5', 
		'\xB8', ']', '\a', '\x372', '\x373', '\f', '\x5', '\x2', '\x2', '\x373', 
		'\x374', '\a', 'T', '\x2', '\x2', '\x374', '\x375', '\x5', '\xB8', ']', 
		'\x2', '\x375', '\x376', '\a', '\x38', '\x2', '\x2', '\x376', '\x377', 
		'\x5', '\xB8', ']', '\x6', '\x377', '\x392', '\x3', '\x2', '\x2', '\x2', 
		'\x378', '\x379', '\f', '\x4', '\x2', '\x2', '\x379', '\x37A', '\t', '\t', 
		'\x2', '\x2', '\x37A', '\x392', '\x5', '\xB8', ']', '\x5', '\x37B', '\x37C', 
		'\f', '\x17', '\x2', '\x2', '\x37C', '\x37D', '\a', 'H', '\x2', '\x2', 
		'\x37D', '\x37E', '\x5', '\xA4', 'S', '\x2', '\x37E', '\x37F', '\a', 'I', 
		'\x2', '\x2', '\x37F', '\x392', '\x3', '\x2', '\x2', '\x2', '\x380', '\x381', 
		'\f', '\x16', '\x2', '\x2', '\x381', '\x383', '\a', '\x46', '\x2', '\x2', 
		'\x382', '\x384', '\x5', '\xA4', 'S', '\x2', '\x383', '\x382', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x384', '\x3', '\x2', '\x2', '\x2', '\x384', 
		'\x385', '\x3', '\x2', '\x2', '\x2', '\x385', '\x392', '\a', 'G', '\x2', 
		'\x2', '\x386', '\x387', '\f', '\x14', '\x2', '\x2', '\x387', '\x388', 
		'\a', '\x39', '\x2', '\x2', '\x388', '\x38A', '\x5', '\xBE', '`', '\x2', 
		'\x389', '\x38B', '\x5', '\x8C', 'G', '\x2', '\x38A', '\x389', '\x3', 
		'\x2', '\x2', '\x2', '\x38A', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x38B', 
		'\x392', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x38D', '\f', '\x11', '\x2', 
		'\x2', '\x38D', '\x392', '\t', '\n', '\x2', '\x2', '\x38E', '\x38F', '\f', 
		'\r', '\x2', '\x2', '\x38F', '\x390', '\t', '\v', '\x2', '\x2', '\x390', 
		'\x392', '\x5', '\x92', 'J', '\x2', '\x391', '\x354', '\x3', '\x2', '\x2', 
		'\x2', '\x391', '\x357', '\x3', '\x2', '\x2', '\x2', '\x391', '\x35A', 
		'\x3', '\x2', '\x2', '\x2', '\x391', '\x35D', '\x3', '\x2', '\x2', '\x2', 
		'\x391', '\x360', '\x3', '\x2', '\x2', '\x2', '\x391', '\x363', '\x3', 
		'\x2', '\x2', '\x2', '\x391', '\x366', '\x3', '\x2', '\x2', '\x2', '\x391', 
		'\x369', '\x3', '\x2', '\x2', '\x2', '\x391', '\x36C', '\x3', '\x2', '\x2', 
		'\x2', '\x391', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x391', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x391', '\x378', '\x3', '\x2', '\x2', '\x2', 
		'\x391', '\x37B', '\x3', '\x2', '\x2', '\x2', '\x391', '\x380', '\x3', 
		'\x2', '\x2', '\x2', '\x391', '\x386', '\x3', '\x2', '\x2', '\x2', '\x391', 
		'\x38C', '\x3', '\x2', '\x2', '\x2', '\x391', '\x38E', '\x3', '\x2', '\x2', 
		'\x2', '\x392', '\x395', '\x3', '\x2', '\x2', '\x2', '\x393', '\x391', 
		'\x3', '\x2', '\x2', '\x2', '\x393', '\x394', '\x3', '\x2', '\x2', '\x2', 
		'\x394', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x395', '\x393', '\x3', 
		'\x2', '\x2', '\x2', '\x396', '\x39B', '\x5', '\xBE', '`', '\x2', '\x397', 
		'\x398', '\a', '\x39', '\x2', '\x2', '\x398', '\x39A', '\x5', '\xBE', 
		'`', '\x2', '\x399', '\x397', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x39D', 
		'\x3', '\x2', '\x2', '\x2', '\x39B', '\x399', '\x3', '\x2', '\x2', '\x2', 
		'\x39B', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39C', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\x39D', '\x39B', '\x3', '\x2', '\x2', '\x2', '\x39E', 
		'\x3A3', '\x5', '\xBE', '`', '\x2', '\x39F', '\x3A0', '\a', ':', '\x2', 
		'\x2', '\x3A0', '\x3A2', '\x5', '\xBE', '`', '\x2', '\x3A1', '\x39F', 
		'\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A5', '\x3', '\x2', '\x2', '\x2', 
		'\x3A3', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A4', '\x3', 
		'\x2', '\x2', '\x2', '\x3A4', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x3A5', 
		'\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A6', '\x3A7', '\a', '\x66', '\x2', 
		'\x2', '\x3A7', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3B0', 
		'\x5', '\xC2', '\x62', '\x2', '\x3A9', '\x3B0', '\x5', '\xC4', '\x63', 
		'\x2', '\x3AA', '\x3B0', '\x5', '\xC6', '\x64', '\x2', '\x3AB', '\x3B0', 
		'\x5', '\xCE', 'h', '\x2', '\x3AC', '\x3B0', '\x5', '\xD8', 'm', '\x2', 
		'\x3AD', '\x3B0', '\x5', '\xDA', 'n', '\x2', '\x3AE', '\x3B0', '\x5', 
		'\xDC', 'o', '\x2', '\x3AF', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3AF', 
		'\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3AA', '\x3', '\x2', '\x2', 
		'\x2', '\x3AF', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3AC', 
		'\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3AD', '\x3', '\x2', '\x2', '\x2', 
		'\x3AF', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x3B1', '\x3B2', '\a', '\x1F', '\x2', '\x2', '\x3B2', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B4', '\t', '\f', '\x2', 
		'\x2', '\x3B4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B9', 
		'\x5', '\xC8', '\x65', '\x2', '\x3B6', '\x3B9', '\x5', '\xCA', '\x66', 
		'\x2', '\x3B7', '\x3B9', '\x5', '\xCC', 'g', '\x2', '\x3B8', '\x3B5', 
		'\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3B6', '\x3', '\x2', '\x2', '\x2', 
		'\x3B8', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3B9', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\x3BA', '\x3BB', '\a', 'g', '\x2', '\x2', '\x3BB', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3BD', '\a', 'h', '\x2', 
		'\x2', '\x3BD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3BF', 
		'\a', 'i', '\x2', '\x2', '\x3BF', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\x3C0', '\x3C5', '\x5', '\xD2', 'j', '\x2', '\x3C1', '\x3C5', '\x5', 
		'\xD0', 'i', '\x2', '\x3C2', '\x3C5', '\x5', '\xD4', 'k', '\x2', '\x3C3', 
		'\x3C5', '\x5', '\xD6', 'l', '\x2', '\x3C4', '\x3C0', '\x3', '\x2', '\x2', 
		'\x2', '\x3C4', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C2', 
		'\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C3', '\x3', '\x2', '\x2', '\x2', 
		'\x3C5', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C7', '\a', 'j', 
		'\x2', '\x2', '\x3C7', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3C9', 
		'\a', 'k', '\x2', '\x2', '\x3C9', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\x3CA', '\x3CB', '\a', 'l', '\x2', '\x2', '\x3CB', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\x3CC', '\x3CD', '\a', 'm', '\x2', '\x2', '\x3CD', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\x3CE', '\x3CF', '\a', 'n', '\x2', '\x2', 
		'\x3CF', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3D1', '\t', '\r', 
		'\x2', '\x2', '\x3D1', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D3', 
		'\a', 'p', '\x2', '\x2', '\x3D3', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'Q', '\xE3', '\xE7', '\xEC', '\x104', '\x108', '\x10C', '\x111', '\x11B', 
		'\x124', '\x12A', '\x12F', '\x13D', '\x141', '\x14A', '\x151', '\x156', 
		'\x160', '\x165', '\x172', '\x178', '\x184', '\x188', '\x1A9', '\x1AD', 
		'\x1B1', '\x1BA', '\x1DF', '\x1E2', '\x1EE', '\x1F2', '\x1F7', '\x203', 
		'\x205', '\x20B', '\x210', '\x213', '\x215', '\x227', '\x22B', '\x23D', 
		'\x240', '\x244', '\x262', '\x269', '\x26F', '\x276', '\x27E', '\x294', 
		'\x2A1', '\x2A8', '\x2B0', '\x2B7', '\x2BE', '\x2C4', '\x2CB', '\x2D3', 
		'\x2D9', '\x2E3', '\x2E8', '\x2EE', '\x2F9', '\x2FC', '\x305', '\x308', 
		'\x30C', '\x32D', '\x333', '\x339', '\x345', '\x352', '\x383', '\x38A', 
		'\x391', '\x393', '\x39B', '\x3A3', '\x3AF', '\x3B8', '\x3C4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaGenerator.Syntax.InternalSyntax

