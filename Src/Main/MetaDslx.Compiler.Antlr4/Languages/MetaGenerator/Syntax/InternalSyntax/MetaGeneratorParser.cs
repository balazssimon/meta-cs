//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaGeneratorParser.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaGenerator.Syntax.InternalSyntax {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class MetaGeneratorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KNamespace=1, KGenerator=2, KUsing=3, KConfiguration=4, KProperties=5, 
		KTemplate=6, KFunction=7, KExtern=8, KReturn=9, KSwitch=10, KCase=11, 
		KType=12, KVoid=13, KEnd=14, KFor=15, KForEach=16, KIn=17, KIf=18, KElse=19, 
		KLoop=20, KHasLoop=21, KWhere=22, KOrderBy=23, KDescending=24, KSeparator=25, 
		KNull=26, KTrue=27, KFalse=28, KBool=29, KByte=30, KChar=31, KDecimal=32, 
		KDouble=33, KFloat=34, KInt=35, KLong=36, KObject=37, KSByte=38, KShort=39, 
		KString=40, KUInt=41, KULong=42, KUShort=43, KThis=44, KNew=45, KIs=46, 
		KAs=47, KTypeof=48, KDefault=49, TSemicolon=50, TColon=51, TDot=52, TComma=53, 
		TAssign=54, TAssignPlus=55, TAssignMinus=56, TAssignAsterisk=57, TAssignSlash=58, 
		TAssignPercent=59, TAssignAmp=60, TAssignPipe=61, TAssignHat=62, TAssignLeftShift=63, 
		TAssignRightShift=64, TOpenParenthesis=65, TCloseParenthesis=66, TOpenBracket=67, 
		TCloseBracket=68, TOpenBrace=69, TCloseBrace=70, TEquals=71, TNotEquals=72, 
		TArrow=73, TSingleArrow=74, TLessThan=75, TGreaterThan=76, TLessThanOrEquals=77, 
		TGreaterThanOrEquals=78, TQuestion=79, TPlus=80, TMinus=81, TExclamation=82, 
		TTilde=83, TAsterisk=84, TSlash=85, TPercent=86, TPlusPlus=87, TMinusMinus=88, 
		TColonColon=89, TAmp=90, THat=91, TPipe=92, TAnd=93, TXor=94, TOr=95, 
		TQuestionQuestion=96, IdentifierNormal=97, IntegerLiteral=98, DecimalLiteral=99, 
		ScientificLiteral=100, DateTimeOffsetLiteral=101, DateTimeLiteral=102, 
		DateLiteral=103, TimeLiteral=104, CharLiteral=105, RegularStringLiteral=106, 
		GuidLiteral=107, LUtf8Bom=108, LWhitespace=109, LCrLf=110, LLineBreak=111, 
		LLineComment=112, LMultiLineComment=113, DoubleQuoteVerbatimStringLiteral=114, 
		TH_TOpenParenthesis=115, TH_TCloseParenthesis=116, KEndTemplate=117, TemplateLineControl=118, 
		TemplateOutput=119, TemplateCrLf=120, TemplateLineBreak=121, TemplateStatementStart=122, 
		TemplateStatementEnd=123, TS_TOpenBracket=124, TS_TCloseBracket=125, DoubleQuoteVerbatimStringLiteralStart=126, 
		COMMENT_START=127;
	public const int
		RULE_main = 0, RULE_namespaceDeclaration = 1, RULE_generatorDeclaration = 2, 
		RULE_usingDeclaration = 3, RULE_configDeclaration = 4, RULE_configProperty = 5, 
		RULE_methodDeclaration = 6, RULE_externFunctionDeclaration = 7, RULE_functionDeclaration = 8, 
		RULE_functionSignature = 9, RULE_paramList = 10, RULE_parameter = 11, 
		RULE_body = 12, RULE_statement = 13, RULE_singleStatement = 14, RULE_singleStatementSemicolon = 15, 
		RULE_variableDeclarationStatement = 16, RULE_returnStatement = 17, RULE_expressionStatement = 18, 
		RULE_ifStatement = 19, RULE_elseIfStatementBody = 20, RULE_ifStatementElseBody = 21, 
		RULE_ifStatementBegin = 22, RULE_elseIfStatement = 23, RULE_ifStatementElse = 24, 
		RULE_ifStatementEnd = 25, RULE_loopStatement = 26, RULE_loopStatementBegin = 27, 
		RULE_loopStatementEnd = 28, RULE_loopChain = 29, RULE_loopChainItem = 30, 
		RULE_loopChainExpression = 31, RULE_loopWhereExpression = 32, RULE_loopRunExpression = 33, 
		RULE_separatorStatement = 34, RULE_switchStatement = 35, RULE_switchStatementBegin = 36, 
		RULE_switchStatementEnd = 37, RULE_switchBranchStatement = 38, RULE_switchBranchHeadStatement = 39, 
		RULE_switchCaseOrTypeIsHeadStatement = 40, RULE_switchCaseHeadStatement = 41, 
		RULE_switchTypeIsHeadStatement = 42, RULE_switchTypeAsHeadStatement = 43, 
		RULE_switchDefaultStatement = 44, RULE_switchDefaultHeadStatement = 45, 
		RULE_templateDeclaration = 46, RULE_templateSignature = 47, RULE_templateBody = 48, 
		RULE_templateContentLine = 49, RULE_templateContent = 50, RULE_templateOutput = 51, 
		RULE_templateLineEnd = 52, RULE_templateStatementStartEnd = 53, RULE_templateStatement = 54, 
		RULE_typeArgumentList = 55, RULE_predefinedType = 56, RULE_typeReferenceList = 57, 
		RULE_typeReference = 58, RULE_arrayType = 59, RULE_arrayItemType = 60, 
		RULE_nullableType = 61, RULE_nullableItemType = 62, RULE_genericType = 63, 
		RULE_simpleType = 64, RULE_voidType = 65, RULE_returnType = 66, RULE_expressionList = 67, 
		RULE_variableReference = 68, RULE_rankSpecifiers = 69, RULE_rankSpecifier = 70, 
		RULE_unboundTypeName = 71, RULE_genericDimensionItem = 72, RULE_genericDimensionSpecifier = 73, 
		RULE_anonymousFunctionSignature = 74, RULE_explicitParameter = 75, RULE_implicitParameter = 76, 
		RULE_expression = 77, RULE_qualifiedName = 78, RULE_identifierList = 79, 
		RULE_identifier = 80, RULE_literal = 81, RULE_nullLiteral = 82, RULE_booleanLiteral = 83, 
		RULE_numberLiteral = 84, RULE_integerLiteral = 85, RULE_decimalLiteral = 86, 
		RULE_scientificLiteral = 87, RULE_dateOrTimeLiteral = 88, RULE_dateTimeOffsetLiteral = 89, 
		RULE_dateTimeLiteral = 90, RULE_dateLiteral = 91, RULE_timeLiteral = 92, 
		RULE_charLiteral = 93, RULE_stringLiteral = 94, RULE_guidLiteral = 95;
	public static readonly string[] ruleNames = {
		"main", "namespaceDeclaration", "generatorDeclaration", "usingDeclaration", 
		"configDeclaration", "configProperty", "methodDeclaration", "externFunctionDeclaration", 
		"functionDeclaration", "functionSignature", "paramList", "parameter", 
		"body", "statement", "singleStatement", "singleStatementSemicolon", "variableDeclarationStatement", 
		"returnStatement", "expressionStatement", "ifStatement", "elseIfStatementBody", 
		"ifStatementElseBody", "ifStatementBegin", "elseIfStatement", "ifStatementElse", 
		"ifStatementEnd", "loopStatement", "loopStatementBegin", "loopStatementEnd", 
		"loopChain", "loopChainItem", "loopChainExpression", "loopWhereExpression", 
		"loopRunExpression", "separatorStatement", "switchStatement", "switchStatementBegin", 
		"switchStatementEnd", "switchBranchStatement", "switchBranchHeadStatement", 
		"switchCaseOrTypeIsHeadStatement", "switchCaseHeadStatement", "switchTypeIsHeadStatement", 
		"switchTypeAsHeadStatement", "switchDefaultStatement", "switchDefaultHeadStatement", 
		"templateDeclaration", "templateSignature", "templateBody", "templateContentLine", 
		"templateContent", "templateOutput", "templateLineEnd", "templateStatementStartEnd", 
		"templateStatement", "typeArgumentList", "predefinedType", "typeReferenceList", 
		"typeReference", "arrayType", "arrayItemType", "nullableType", "nullableItemType", 
		"genericType", "simpleType", "voidType", "returnType", "expressionList", 
		"variableReference", "rankSpecifiers", "rankSpecifier", "unboundTypeName", 
		"genericDimensionItem", "genericDimensionSpecifier", "anonymousFunctionSignature", 
		"explicitParameter", "implicitParameter", "expression", "qualifiedName", 
		"identifierList", "identifier", "literal", "nullLiteral", "booleanLiteral", 
		"numberLiteral", "integerLiteral", "decimalLiteral", "scientificLiteral", 
		"dateOrTimeLiteral", "dateTimeOffsetLiteral", "dateTimeLiteral", "dateLiteral", 
		"timeLiteral", "charLiteral", "stringLiteral", "guidLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'generator'", "'using'", "'configuration'", "'properties'", 
		"'template'", "'function'", "'extern'", "'return'", "'switch'", "'case'", 
		"'type'", "'void'", "'end'", "'for'", "'foreach'", "'in'", "'if'", "'else'", 
		"'loop'", "'hasloop'", "'where'", "'orderby'", "'descending'", "'separator'", 
		"'null'", "'true'", "'false'", null, "'byte'", "'char'", "'decimal'", 
		"'double'", "'float'", "'int'", "'long'", "'object'", "'sbyte'", "'short'", 
		"'string'", "'uint'", "'ulong'", "'ushort'", "'this'", "'new'", "'is'", 
		"'as'", "'typeof'", "'default'", "';'", "':'", "'.'", "','", "'='", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", 
		"'('", "')'", null, "']'", "'{'", "'}'", "'=='", "'!='", "'=>'", "'->'", 
		"'<'", "'>'", "'<='", "'>='", "'?'", "'+'", "'-'", "'!'", "'~'", null, 
		"'/'", "'%'", "'++'", "'--'", "'::'", "'&'", "'^'", "'|'", "'&&'", "'^^'", 
		"'||'", "'??'", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'\"'", null, null, null, 
		null, null, null, null, null, null, null, null, "'@\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KGenerator", "KUsing", "KConfiguration", "KProperties", 
		"KTemplate", "KFunction", "KExtern", "KReturn", "KSwitch", "KCase", "KType", 
		"KVoid", "KEnd", "KFor", "KForEach", "KIn", "KIf", "KElse", "KLoop", "KHasLoop", 
		"KWhere", "KOrderBy", "KDescending", "KSeparator", "KNull", "KTrue", "KFalse", 
		"KBool", "KByte", "KChar", "KDecimal", "KDouble", "KFloat", "KInt", "KLong", 
		"KObject", "KSByte", "KShort", "KString", "KUInt", "KULong", "KUShort", 
		"KThis", "KNew", "KIs", "KAs", "KTypeof", "KDefault", "TSemicolon", "TColon", 
		"TDot", "TComma", "TAssign", "TAssignPlus", "TAssignMinus", "TAssignAsterisk", 
		"TAssignSlash", "TAssignPercent", "TAssignAmp", "TAssignPipe", "TAssignHat", 
		"TAssignLeftShift", "TAssignRightShift", "TOpenParenthesis", "TCloseParenthesis", 
		"TOpenBracket", "TCloseBracket", "TOpenBrace", "TCloseBrace", "TEquals", 
		"TNotEquals", "TArrow", "TSingleArrow", "TLessThan", "TGreaterThan", "TLessThanOrEquals", 
		"TGreaterThanOrEquals", "TQuestion", "TPlus", "TMinus", "TExclamation", 
		"TTilde", "TAsterisk", "TSlash", "TPercent", "TPlusPlus", "TMinusMinus", 
		"TColonColon", "TAmp", "THat", "TPipe", "TAnd", "TXor", "TOr", "TQuestionQuestion", 
		"IdentifierNormal", "IntegerLiteral", "DecimalLiteral", "ScientificLiteral", 
		"DateTimeOffsetLiteral", "DateTimeLiteral", "DateLiteral", "TimeLiteral", 
		"CharLiteral", "RegularStringLiteral", "GuidLiteral", "LUtf8Bom", "LWhitespace", 
		"LCrLf", "LLineBreak", "LLineComment", "LMultiLineComment", "DoubleQuoteVerbatimStringLiteral", 
		"TH_TOpenParenthesis", "TH_TCloseParenthesis", "KEndTemplate", "TemplateLineControl", 
		"TemplateOutput", "TemplateCrLf", "TemplateLineBreak", "TemplateStatementStart", 
		"TemplateStatementEnd", "TS_TOpenBracket", "TS_TCloseBracket", "DoubleQuoteVerbatimStringLiteralStart", 
		"COMMENT_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaGeneratorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static MetaGeneratorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public MetaGeneratorParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public GeneratorDeclarationContext generatorDeclaration() {
			return GetRuleContext<GeneratorDeclarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MetaGeneratorParser.Eof, 0); }
		public UsingDeclarationContext[] usingDeclaration() {
			return GetRuleContexts<UsingDeclarationContext>();
		}
		public UsingDeclarationContext usingDeclaration(int i) {
			return GetRuleContext<UsingDeclarationContext>(i);
		}
		public ConfigDeclarationContext configDeclaration() {
			return GetRuleContext<ConfigDeclarationContext>(0);
		}
		public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; namespaceDeclaration();
			State = 193; generatorDeclaration();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KUsing) {
				{
				{
				State = 194; usingDeclaration();
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KProperties) {
				{
				State = 200; configDeclaration();
				}
			}

			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KTemplate) | (1L << KFunction) | (1L << KExtern))) != 0)) {
				{
				{
				State = 203; methodDeclaration();
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 209; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaGeneratorParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; Match(KNamespace);
			State = 212; qualifiedName();
			State = 213; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorDeclarationContext : ParserRuleContext {
		public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public GeneratorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGeneratorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGeneratorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorDeclarationContext generatorDeclaration() {
		GeneratorDeclarationContext _localctx = new GeneratorDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_generatorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(KGenerator);
			State = 216; identifier();
			{
			State = 217; Match(KFor);
			State = 218; typeReference();
			}
			State = 220; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
	 
		public UsingDeclarationContext() { }
		public virtual void CopyFrom(UsingDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingNamespaceDeclarationContext : UsingDeclarationContext {
		public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public UsingNamespaceDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUsingNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUsingNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingGeneratorDeclarationContext : UsingDeclarationContext {
		public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UsingGeneratorDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUsingGeneratorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUsingGeneratorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_usingDeclaration);
		int _la;
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new UsingNamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 222; Match(KUsing);
				State = 223; qualifiedName();
				State = 224; Match(TSemicolon);
				}
				break;
			case 2:
				_localctx = new UsingGeneratorDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 226; Match(KUsing);
				State = 227; Match(KGenerator);
				State = 228; qualifiedName();
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IdentifierNormal) {
					{
					State = 229; identifier();
					}
				}

				State = 232; Match(TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigDeclarationContext : ParserRuleContext {
		public IToken startProperties;
		public IToken endProperties;
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigDeclarationContext configDeclaration() {
		ConfigDeclarationContext _localctx = new ConfigDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_configDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; _localctx.startProperties = Match(KProperties);
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 237; identifier();
				}
				break;
			}
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				{
				State = 240; configProperty();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246; Match(KEnd);
			State = 247; _localctx.endProperties = Match(KProperties);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigPropertyContext : ParserRuleContext {
		public ConfigPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configProperty; } }
	 
		public ConfigPropertyContext() { }
		public virtual void CopyFrom(ConfigPropertyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConfigPropertyGroupDeclarationContext : ConfigPropertyContext {
		public IToken startProperties;
		public IToken endProperties;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigPropertyGroupDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigPropertyGroupDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigPropertyGroupDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyGroupDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConfigPropertyDeclarationContext : ConfigPropertyContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConfigPropertyDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigPropertyContext configProperty() {
		ConfigPropertyContext _localctx = new ConfigPropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_configProperty);
		int _la;
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				_localctx = new ConfigPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 249; typeReference();
				State = 250; identifier();
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TAssign) {
					{
					State = 251; Match(TAssign);
					State = 252; expression(0);
					}
				}

				State = 255; Match(TSemicolon);
				}
				break;
			case KProperties:
				_localctx = new ConfigPropertyGroupDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 257; ((ConfigPropertyGroupDeclarationContext)_localctx).startProperties = Match(KProperties);
				State = 258; identifier();
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					{
					State = 259; configProperty();
					}
					}
					State = 264;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 265; Match(KEnd);
				State = 266; ((ConfigPropertyGroupDeclarationContext)_localctx).endProperties = Match(KProperties);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		public ExternFunctionDeclarationContext externFunctionDeclaration() {
			return GetRuleContext<ExternFunctionDeclarationContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_methodDeclaration);
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KFunction:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270; functionDeclaration();
				}
				break;
			case KTemplate:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271; templateDeclaration();
				}
				break;
			case KExtern:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272; externFunctionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternFunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode KExtern() { return GetToken(MetaGeneratorParser.KExtern, 0); }
		public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		public ExternFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externFunctionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExternFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExternFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternFunctionDeclarationContext externFunctionDeclaration() {
		ExternFunctionDeclarationContext _localctx = new ExternFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_externFunctionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(KExtern);
			State = 276; functionSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; functionSignature();
			State = 279; body();
			State = 280; Match(KEnd);
			State = 281; Match(KFunction);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(KFunction);
			State = 284; returnType();
			State = 285; identifier();
			State = 286; Match(TOpenParenthesis);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 287; paramList();
				}
			}

			State = 290; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 20, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; parameter();
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 293; Match(TComma);
				State = 294; parameter();
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; typeReference();
			State = 301; identifier();
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 302; Match(TAssign);
				State = 303; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_body);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 306; statement();
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SingleStatementSemicolonContext singleStatementSemicolon() {
			return GetRuleContext<SingleStatementSemicolonContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KReturn:
			case KHasLoop:
			case KNull:
			case KTrue:
			case KFalse:
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case KThis:
			case KNew:
			case KTypeof:
			case KDefault:
			case TOpenParenthesis:
			case TPlus:
			case TMinus:
			case TExclamation:
			case TTilde:
			case TPlusPlus:
			case TMinusMinus:
			case IdentifierNormal:
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
			case DateTimeOffsetLiteral:
			case DateTimeLiteral:
			case DateLiteral:
			case TimeLiteral:
			case CharLiteral:
			case RegularStringLiteral:
			case GuidLiteral:
			case DoubleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312; singleStatementSemicolon();
				}
				break;
			case KIf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313; ifStatement();
				}
				break;
			case KLoop:
				EnterOuterAlt(_localctx, 3);
				{
				State = 314; loopStatement();
				}
				break;
			case KSwitch:
				EnterOuterAlt(_localctx, 4);
				{
				State = 315; switchStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementContext : ParserRuleContext {
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SingleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSingleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSingleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementContext singleStatement() {
		SingleStatementContext _localctx = new SingleStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_singleStatement);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; variableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; returnStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 320; expressionStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementSemicolonContext : ParserRuleContext {
		public SingleStatementContext singleStatement() {
			return GetRuleContext<SingleStatementContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public SingleStatementSemicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatementSemicolon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSingleStatementSemicolon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSingleStatementSemicolon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatementSemicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementSemicolonContext singleStatementSemicolon() {
		SingleStatementSemicolonContext _localctx = new SingleStatementSemicolonContext(Context, State);
		EnterRule(_localctx, 30, RULE_singleStatementSemicolon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; singleStatement();
			State = 324; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; typeReference();
			State = 327; identifier();
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 328; Match(TAssign);
				State = 329; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode KReturn() { return GetToken(MetaGeneratorParser.KReturn, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(KReturn);
			State = 333; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		public ElseIfStatementBodyContext[] elseIfStatementBody() {
			return GetRuleContexts<ElseIfStatementBodyContext>();
		}
		public ElseIfStatementBodyContext elseIfStatementBody(int i) {
			return GetRuleContext<ElseIfStatementBodyContext>(i);
		}
		public IfStatementElseBodyContext ifStatementElseBody() {
			return GetRuleContext<IfStatementElseBodyContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; ifStatementBegin();
			State = 338; body();
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 339; elseIfStatementBody();
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KElse) {
				{
				State = 345; ifStatementElseBody();
				}
			}

			State = 348; ifStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementBodyContext : ParserRuleContext {
		public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseIfStatementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatementBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementBodyContext elseIfStatementBody() {
		ElseIfStatementBodyContext _localctx = new ElseIfStatementBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_elseIfStatementBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; elseIfStatement();
			State = 351; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementElseBodyContext : ParserRuleContext {
		public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public IfStatementElseBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementElseBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementElseBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementElseBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementElseBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementElseBodyContext ifStatementElseBody() {
		IfStatementElseBodyContext _localctx = new IfStatementElseBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_ifStatementElseBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; ifStatementElse();
			State = 354; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementBeginContext : ParserRuleContext {
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public IfStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementBeginContext ifStatementBegin() {
		IfStatementBeginContext _localctx = new IfStatementBeginContext(Context, State);
		EnterRule(_localctx, 44, RULE_ifStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(KIf);
			State = 357; Match(TOpenParenthesis);
			State = 358; expression(0);
			State = 359; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(KElse);
			State = 362; Match(KIf);
			State = 363; Match(TOpenParenthesis);
			State = 364; expression(0);
			State = 365; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementElseContext : ParserRuleContext {
		public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		public IfStatementElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementElseContext ifStatementElse() {
		IfStatementElseContext _localctx = new IfStatementElseContext(Context, State);
		EnterRule(_localctx, 48, RULE_ifStatementElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(KElse);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public IfStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementEndContext ifStatementEnd() {
		IfStatementEndContext _localctx = new IfStatementEndContext(Context, State);
		EnterRule(_localctx, 50, RULE_ifStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; Match(KEnd);
			State = 370; Match(KIf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; loopStatementBegin();
			State = 373; body();
			State = 374; loopStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementBeginContext : ParserRuleContext {
		public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		public LoopRunExpressionContext loopRunExpression() {
			return GetRuleContext<LoopRunExpressionContext>(0);
		}
		public LoopStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementBeginContext loopStatementBegin() {
		LoopStatementBeginContext _localctx = new LoopStatementBeginContext(Context, State);
		EnterRule(_localctx, 54, RULE_loopStatementBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; Match(KLoop);
			State = 377; Match(TOpenParenthesis);
			State = 378; loopChain();
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KWhere) {
				{
				State = 379; loopWhereExpression();
				}
			}

			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TSemicolon) {
				{
				State = 382; loopRunExpression();
				}
			}

			State = 385; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		public LoopStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementEndContext loopStatementEnd() {
		LoopStatementEndContext _localctx = new LoopStatementEndContext(Context, State);
		EnterRule(_localctx, 56, RULE_loopStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(KEnd);
			State = 388; Match(KLoop);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainContext : ParserRuleContext {
		public LoopChainItemContext[] loopChainItem() {
			return GetRuleContexts<LoopChainItemContext>();
		}
		public LoopChainItemContext loopChainItem(int i) {
			return GetRuleContext<LoopChainItemContext>(i);
		}
		public ITerminalNode[] TSingleArrow() { return GetTokens(MetaGeneratorParser.TSingleArrow); }
		public ITerminalNode TSingleArrow(int i) {
			return GetToken(MetaGeneratorParser.TSingleArrow, i);
		}
		public LoopChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainContext loopChain() {
		LoopChainContext _localctx = new LoopChainContext(Context, State);
		EnterRule(_localctx, 58, RULE_loopChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; loopChainItem();
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TSingleArrow) {
				{
				{
				State = 391; Match(TSingleArrow);
				State = 392; loopChainItem();
				}
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainItemContext : ParserRuleContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public LoopChainItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainItemContext loopChainItem() {
		LoopChainItemContext _localctx = new LoopChainItemContext(Context, State);
		EnterRule(_localctx, 60, RULE_loopChainItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 399;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 398; typeReference();
					}
					break;
				}
				State = 401; identifier();
				State = 402; Match(TColon);
				}
				break;
			}
			State = 406; loopChainExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainExpressionContext : ParserRuleContext {
		public LoopChainExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainExpression; } }
	 
		public LoopChainExpressionContext() { }
		public virtual void CopyFrom(LoopChainExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopChainMemberAccessExpressionContext : LoopChainExpressionContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainMemberAccessExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainMethodCallExpressionContext : LoopChainExpressionContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public LoopChainMethodCallExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainMethodCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainIdentifierExpressionContext : LoopChainExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainIdentifierExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainTypeofExpressionContext : LoopChainExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopChainTypeofExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainTypeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainExpressionContext loopChainExpression() {
		return loopChainExpression(0);
	}

	private LoopChainExpressionContext loopChainExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LoopChainExpressionContext _localctx = new LoopChainExpressionContext(Context, _parentState);
		LoopChainExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_loopChainExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KTypeof:
				{
				_localctx = new LoopChainTypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 409; Match(KTypeof);
				State = 410; Match(TOpenParenthesis);
				State = 411; typeReference();
				State = 412; Match(TCloseParenthesis);
				}
				break;
			case IdentifierNormal:
				{
				_localctx = new LoopChainIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 414; identifier();
				State = 416;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 415; typeArgumentList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 434;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 432;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						_localctx = new LoopChainMemberAccessExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 420;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 421; Match(TDot);
						State = 422; identifier();
						State = 424;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
						case 1:
							{
							State = 423; typeArgumentList();
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new LoopChainMethodCallExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 426;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 427; Match(TOpenParenthesis);
						State = 429;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TOpenParenthesis - 65)) | (1L << (TPlus - 65)) | (1L << (TMinus - 65)) | (1L << (TExclamation - 65)) | (1L << (TTilde - 65)) | (1L << (TPlusPlus - 65)) | (1L << (TMinusMinus - 65)) | (1L << (IdentifierNormal - 65)) | (1L << (IntegerLiteral - 65)) | (1L << (DecimalLiteral - 65)) | (1L << (ScientificLiteral - 65)) | (1L << (DateTimeOffsetLiteral - 65)) | (1L << (DateTimeLiteral - 65)) | (1L << (DateLiteral - 65)) | (1L << (TimeLiteral - 65)) | (1L << (CharLiteral - 65)) | (1L << (RegularStringLiteral - 65)) | (1L << (GuidLiteral - 65)) | (1L << (DoubleQuoteVerbatimStringLiteral - 65)))) != 0)) {
							{
							State = 428; expressionList();
							}
						}

						State = 431; Match(TCloseParenthesis);
						}
						break;
					}
					} 
				}
				State = 436;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LoopWhereExpressionContext : ParserRuleContext {
		public ITerminalNode KWhere() { return GetToken(MetaGeneratorParser.KWhere, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopWhereExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopWhereExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopWhereExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopWhereExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopWhereExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopWhereExpressionContext loopWhereExpression() {
		LoopWhereExpressionContext _localctx = new LoopWhereExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_loopWhereExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(KWhere);
			State = 438; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopRunExpressionContext : ParserRuleContext {
		public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public LoopRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopRunExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopRunExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopRunExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopRunExpressionContext loopRunExpression() {
		LoopRunExpressionContext _localctx = new LoopRunExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_loopRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorStatementContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode KSeparator() { return GetToken(MetaGeneratorParser.KSeparator, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public SeparatorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSeparatorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSeparatorStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorStatementContext separatorStatement() {
		SeparatorStatementContext _localctx = new SeparatorStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_separatorStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(TSemicolon);
			State = 443; Match(KSeparator);
			State = 444; identifier();
			State = 445; Match(TAssign);
			State = 446; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		public SwitchBranchStatementContext[] switchBranchStatement() {
			return GetRuleContexts<SwitchBranchStatementContext>();
		}
		public SwitchBranchStatementContext switchBranchStatement(int i) {
			return GetRuleContext<SwitchBranchStatementContext>(i);
		}
		public SwitchDefaultStatementContext switchDefaultStatement() {
			return GetRuleContext<SwitchDefaultStatementContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; switchStatementBegin();
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KCase || _la==KType) {
				{
				{
				State = 449; switchBranchStatement();
				}
				}
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KDefault) {
				{
				State = 455; switchDefaultStatement();
				}
			}

			State = 458; switchStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementBeginContext : ParserRuleContext {
		public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public SwitchStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementBeginContext switchStatementBegin() {
		SwitchStatementBeginContext _localctx = new SwitchStatementBeginContext(Context, State);
		EnterRule(_localctx, 72, RULE_switchStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(KSwitch);
			State = 461; Match(TOpenParenthesis);
			State = 462; expression(0);
			State = 463; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		public SwitchStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementEndContext switchStatementEnd() {
		SwitchStatementEndContext _localctx = new SwitchStatementEndContext(Context, State);
		EnterRule(_localctx, 74, RULE_switchStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; Match(KEnd);
			State = 466; Match(KSwitch);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchStatementContext : ParserRuleContext {
		public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchBranchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchBranchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchBranchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchStatementContext switchBranchStatement() {
		SwitchBranchStatementContext _localctx = new SwitchBranchStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_switchBranchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; switchBranchHeadStatement();
			State = 469; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchHeadStatementContext : ParserRuleContext {
		public SwitchCaseOrTypeIsHeadStatementContext[] switchCaseOrTypeIsHeadStatement() {
			return GetRuleContexts<SwitchCaseOrTypeIsHeadStatementContext>();
		}
		public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement(int i) {
			return GetRuleContext<SwitchCaseOrTypeIsHeadStatementContext>(i);
		}
		public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
			return GetRuleContext<SwitchTypeAsHeadStatementContext>(0);
		}
		public SwitchBranchHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchBranchHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchBranchHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
		SwitchBranchHeadStatementContext _localctx = new SwitchBranchHeadStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_switchBranchHeadStatement);
		try {
			int _alt;
			State = 477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 471; switchCaseOrTypeIsHeadStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 474;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476; switchTypeAsHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseOrTypeIsHeadStatementContext : ParserRuleContext {
		public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
			return GetRuleContext<SwitchCaseHeadStatementContext>(0);
		}
		public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
			return GetRuleContext<SwitchTypeIsHeadStatementContext>(0);
		}
		public SwitchCaseOrTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseOrTypeIsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseOrTypeIsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseOrTypeIsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseOrTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement() {
		SwitchCaseOrTypeIsHeadStatementContext _localctx = new SwitchCaseOrTypeIsHeadStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_switchCaseOrTypeIsHeadStatement);
		try {
			State = 481;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KCase:
				EnterOuterAlt(_localctx, 1);
				{
				State = 479; switchCaseHeadStatement();
				}
				break;
			case KType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 480; switchTypeIsHeadStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseHeadStatementContext : ParserRuleContext {
		public ITerminalNode KCase() { return GetToken(MetaGeneratorParser.KCase, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchCaseHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
		SwitchCaseHeadStatementContext _localctx = new SwitchCaseHeadStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_switchCaseHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483; Match(KCase);
			State = 484; expressionList();
			State = 485; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeIsHeadStatementContext : ParserRuleContext {
		public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeIsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchTypeIsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchTypeIsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
		SwitchTypeIsHeadStatementContext _localctx = new SwitchTypeIsHeadStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_switchTypeIsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; Match(KType);
			State = 488; Match(KIs);
			State = 489; typeReferenceList();
			State = 490; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeAsHeadStatementContext : ParserRuleContext {
		public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeAsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeAsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchTypeAsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchTypeAsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeAsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
		SwitchTypeAsHeadStatementContext _localctx = new SwitchTypeAsHeadStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_switchTypeAsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492; Match(KType);
			State = 493; Match(KAs);
			State = 494; typeReference();
			State = 495; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultStatementContext : ParserRuleContext {
		public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchDefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchDefaultStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchDefaultStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultStatementContext switchDefaultStatement() {
		SwitchDefaultStatementContext _localctx = new SwitchDefaultStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_switchDefaultStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; switchDefaultHeadStatement();
			State = 498; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultHeadStatementContext : ParserRuleContext {
		public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchDefaultHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchDefaultHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchDefaultHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
		SwitchDefaultHeadStatementContext _localctx = new SwitchDefaultHeadStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_switchDefaultHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; Match(KDefault);
			State = 501; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDeclarationContext : ParserRuleContext {
		public TemplateSignatureContext templateSignature() {
			return GetRuleContext<TemplateSignatureContext>(0);
		}
		public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		public ITerminalNode KEndTemplate() { return GetToken(MetaGeneratorParser.KEndTemplate, 0); }
		public TemplateDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDeclarationContext templateDeclaration() {
		TemplateDeclarationContext _localctx = new TemplateDeclarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_templateDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; templateSignature();
			State = 504; templateBody();
			State = 505; Match(KEndTemplate);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateSignatureContext : ParserRuleContext {
		public ITerminalNode KTemplate() { return GetToken(MetaGeneratorParser.KTemplate, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public TemplateSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateSignatureContext templateSignature() {
		TemplateSignatureContext _localctx = new TemplateSignatureContext(Context, State);
		EnterRule(_localctx, 94, RULE_templateSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; Match(KTemplate);
			State = 508; identifier();
			State = 509; Match(TOpenParenthesis);
			State = 511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 510; paramList();
				}
			}

			State = 513; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBodyContext : ParserRuleContext {
		public TemplateContentLineContext[] templateContentLine() {
			return GetRuleContexts<TemplateContentLineContext>();
		}
		public TemplateContentLineContext templateContentLine(int i) {
			return GetRuleContext<TemplateContentLineContext>(i);
		}
		public TemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBodyContext templateBody() {
		TemplateBodyContext _localctx = new TemplateBodyContext(Context, State);
		EnterRule(_localctx, 96, RULE_templateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (TemplateLineControl - 118)) | (1L << (TemplateOutput - 118)) | (1L << (TemplateCrLf - 118)) | (1L << (TemplateLineBreak - 118)) | (1L << (TemplateStatementStart - 118)))) != 0)) {
				{
				{
				State = 515; templateContentLine();
				}
				}
				State = 520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContentLineContext : ParserRuleContext {
		public TemplateLineEndContext templateLineEnd() {
			return GetRuleContext<TemplateLineEndContext>(0);
		}
		public TemplateContentContext[] templateContent() {
			return GetRuleContexts<TemplateContentContext>();
		}
		public TemplateContentContext templateContent(int i) {
			return GetRuleContext<TemplateContentContext>(i);
		}
		public TemplateContentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContentLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateContentLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateContentLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContentLineContext templateContentLine() {
		TemplateContentLineContext _localctx = new TemplateContentLineContext(Context, State);
		EnterRule(_localctx, 98, RULE_templateContentLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TemplateOutput || _la==TemplateStatementStart) {
				{
				{
				State = 521; templateContent();
				}
				}
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 527; templateLineEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContentContext : ParserRuleContext {
		public TemplateOutputContext templateOutput() {
			return GetRuleContext<TemplateOutputContext>(0);
		}
		public TemplateStatementStartEndContext templateStatementStartEnd() {
			return GetRuleContext<TemplateStatementStartEndContext>(0);
		}
		public TemplateContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContentContext templateContent() {
		TemplateContentContext _localctx = new TemplateContentContext(Context, State);
		EnterRule(_localctx, 100, RULE_templateContent);
		try {
			State = 531;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TemplateOutput:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529; templateOutput();
				}
				break;
			case TemplateStatementStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530; templateStatementStartEnd();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateOutputContext : ParserRuleContext {
		public ITerminalNode TemplateOutput() { return GetToken(MetaGeneratorParser.TemplateOutput, 0); }
		public TemplateOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateOutputContext templateOutput() {
		TemplateOutputContext _localctx = new TemplateOutputContext(Context, State);
		EnterRule(_localctx, 102, RULE_templateOutput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533; Match(TemplateOutput);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateLineEndContext : ParserRuleContext {
		public ITerminalNode TemplateCrLf() { return GetToken(MetaGeneratorParser.TemplateCrLf, 0); }
		public ITerminalNode TemplateLineBreak() { return GetToken(MetaGeneratorParser.TemplateLineBreak, 0); }
		public ITerminalNode TemplateLineControl() { return GetToken(MetaGeneratorParser.TemplateLineControl, 0); }
		public TemplateLineEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateLineEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateLineEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateLineEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateLineEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateLineEndContext templateLineEnd() {
		TemplateLineEndContext _localctx = new TemplateLineEndContext(Context, State);
		EnterRule(_localctx, 104, RULE_templateLineEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (TemplateLineControl - 118)) | (1L << (TemplateCrLf - 118)) | (1L << (TemplateLineBreak - 118)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementStartEndContext : ParserRuleContext {
		public ITerminalNode TemplateStatementStart() { return GetToken(MetaGeneratorParser.TemplateStatementStart, 0); }
		public ITerminalNode TemplateStatementEnd() { return GetToken(MetaGeneratorParser.TemplateStatementEnd, 0); }
		public TemplateStatementContext templateStatement() {
			return GetRuleContext<TemplateStatementContext>(0);
		}
		public TemplateStatementStartEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatementStartEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateStatementStartEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateStatementStartEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatementStartEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementStartEndContext templateStatementStartEnd() {
		TemplateStatementStartEndContext _localctx = new TemplateStatementStartEndContext(Context, State);
		EnterRule(_localctx, 106, RULE_templateStatementStartEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; Match(TemplateStatementStart);
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KSwitch) | (1L << KCase) | (1L << KType) | (1L << KEnd) | (1L << KIf) | (1L << KElse) | (1L << KLoop) | (1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TOpenParenthesis - 65)) | (1L << (TPlus - 65)) | (1L << (TMinus - 65)) | (1L << (TExclamation - 65)) | (1L << (TTilde - 65)) | (1L << (TPlusPlus - 65)) | (1L << (TMinusMinus - 65)) | (1L << (IdentifierNormal - 65)) | (1L << (IntegerLiteral - 65)) | (1L << (DecimalLiteral - 65)) | (1L << (ScientificLiteral - 65)) | (1L << (DateTimeOffsetLiteral - 65)) | (1L << (DateTimeLiteral - 65)) | (1L << (DateLiteral - 65)) | (1L << (TimeLiteral - 65)) | (1L << (CharLiteral - 65)) | (1L << (RegularStringLiteral - 65)) | (1L << (GuidLiteral - 65)) | (1L << (DoubleQuoteVerbatimStringLiteral - 65)))) != 0)) {
				{
				State = 538; templateStatement();
				}
			}

			State = 541; Match(TemplateStatementEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementContext : ParserRuleContext {
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		public TemplateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementContext templateStatement() {
		TemplateStatementContext _localctx = new TemplateStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_templateStatement);
		try {
			State = 555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543; variableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544; expressionStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 545; ifStatementBegin();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 546; elseIfStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 547; ifStatementElse();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 548; ifStatementEnd();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 549; loopStatementBegin();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 550; loopStatementEnd();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 551; switchStatementBegin();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 552; switchStatementEnd();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 553; switchBranchHeadStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 554; switchDefaultHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 110, RULE_typeArgumentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(TLessThan);
			State = 558; typeReferenceList();
			State = 559; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		public ITerminalNode KBool() { return GetToken(MetaGeneratorParser.KBool, 0); }
		public ITerminalNode KByte() { return GetToken(MetaGeneratorParser.KByte, 0); }
		public ITerminalNode KChar() { return GetToken(MetaGeneratorParser.KChar, 0); }
		public ITerminalNode KDecimal() { return GetToken(MetaGeneratorParser.KDecimal, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaGeneratorParser.KDouble, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaGeneratorParser.KFloat, 0); }
		public ITerminalNode KInt() { return GetToken(MetaGeneratorParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaGeneratorParser.KLong, 0); }
		public ITerminalNode KObject() { return GetToken(MetaGeneratorParser.KObject, 0); }
		public ITerminalNode KSByte() { return GetToken(MetaGeneratorParser.KSByte, 0); }
		public ITerminalNode KShort() { return GetToken(MetaGeneratorParser.KShort, 0); }
		public ITerminalNode KString() { return GetToken(MetaGeneratorParser.KString, 0); }
		public ITerminalNode KUInt() { return GetToken(MetaGeneratorParser.KUInt, 0); }
		public ITerminalNode KULong() { return GetToken(MetaGeneratorParser.KULong, 0); }
		public ITerminalNode KUShort() { return GetToken(MetaGeneratorParser.KUShort, 0); }
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceListContext : ParserRuleContext {
		public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public TypeReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReferenceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeReferenceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeReferenceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceListContext typeReferenceList() {
		TypeReferenceListContext _localctx = new TypeReferenceListContext(Context, State);
		EnterRule(_localctx, 114, RULE_typeReferenceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563; typeReference();
			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 564; Match(TComma);
				State = 565; typeReference();
				}
				}
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 116, RULE_typeReference);
		try {
			State = 575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 571; arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572; nullableType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 573; genericType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 574; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ArrayItemTypeContext arrayItemType() {
			return GetRuleContext<ArrayItemTypeContext>(0);
		}
		public RankSpecifiersContext rankSpecifiers() {
			return GetRuleContext<RankSpecifiersContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; arrayItemType();
			State = 578; rankSpecifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayItemTypeContext : ParserRuleContext {
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ArrayItemTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayItemType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterArrayItemType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitArrayItemType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayItemType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayItemTypeContext arrayItemType() {
		ArrayItemTypeContext _localctx = new ArrayItemTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_arrayItemType);
		try {
			State = 583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 580; nullableType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 581; genericType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 582; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public NullableItemTypeContext nullableItemType() {
			return GetRuleContext<NullableItemTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585; nullableItemType();
			State = 586; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableItemTypeContext : ParserRuleContext {
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public NullableItemTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableItemType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullableItemType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullableItemType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableItemType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableItemTypeContext nullableItemType() {
		NullableItemTypeContext _localctx = new NullableItemTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_nullableItemType);
		try {
			State = 590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 588; genericType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 589; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_genericType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592; qualifiedName();
			State = 593; typeArgumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_simpleType);
		try {
			State = 597;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 595; qualifiedName();
				}
				break;
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
				EnterOuterAlt(_localctx, 2);
				{
				State = 596; predefinedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 130, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 132, RULE_returnType);
		try {
			State = 603;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 601; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 602; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 134, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605; expression(0);
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 606; Match(TComma);
				State = 607; expression(0);
				}
				}
				State = 612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 136, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifiersContext : ParserRuleContext {
		public RankSpecifierContext[] rankSpecifier() {
			return GetRuleContexts<RankSpecifierContext>();
		}
		public RankSpecifierContext rankSpecifier(int i) {
			return GetRuleContext<RankSpecifierContext>(i);
		}
		public RankSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRankSpecifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRankSpecifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifiersContext rankSpecifiers() {
		RankSpecifiersContext _localctx = new RankSpecifiersContext(Context, State);
		EnterRule(_localctx, 138, RULE_rankSpecifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 615; rankSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 618;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifierContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public RankSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRankSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRankSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifierContext rankSpecifier() {
		RankSpecifierContext _localctx = new RankSpecifierContext(Context, State);
		EnterRule(_localctx, 140, RULE_rankSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620; Match(TOpenBracket);
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 621; Match(TComma);
				}
				}
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 627; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnboundTypeNameContext : ParserRuleContext {
		public GenericDimensionItemContext[] genericDimensionItem() {
			return GetRuleContexts<GenericDimensionItemContext>();
		}
		public GenericDimensionItemContext genericDimensionItem(int i) {
			return GetRuleContext<GenericDimensionItemContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public UnboundTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unboundTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUnboundTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUnboundTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnboundTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnboundTypeNameContext unboundTypeName() {
		UnboundTypeNameContext _localctx = new UnboundTypeNameContext(Context, State);
		EnterRule(_localctx, 142, RULE_unboundTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629; genericDimensionItem();
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TDot) {
				{
				{
				State = 630; Match(TDot);
				State = 631; genericDimensionItem();
				}
				}
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDimensionItemContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GenericDimensionSpecifierContext genericDimensionSpecifier() {
			return GetRuleContext<GenericDimensionSpecifierContext>(0);
		}
		public GenericDimensionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDimensionItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericDimensionItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericDimensionItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericDimensionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericDimensionItemContext genericDimensionItem() {
		GenericDimensionItemContext _localctx = new GenericDimensionItemContext(Context, State);
		EnterRule(_localctx, 144, RULE_genericDimensionItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637; identifier();
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TLessThan) {
				{
				State = 638; genericDimensionSpecifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDimensionSpecifierContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public GenericDimensionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDimensionSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericDimensionSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericDimensionSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericDimensionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericDimensionSpecifierContext genericDimensionSpecifier() {
		GenericDimensionSpecifierContext _localctx = new GenericDimensionSpecifierContext(Context, State);
		EnterRule(_localctx, 146, RULE_genericDimensionSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641; Match(TLessThan);
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 642; Match(TComma);
				}
				}
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 648; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionSignatureContext : ParserRuleContext {
		public AnonymousFunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionSignature; } }
	 
		public AnonymousFunctionSignatureContext() { }
		public virtual void CopyFrom(AnonymousFunctionSignatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleParamAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ImplicitParameterContext implicitParameter() {
			return GetRuleContext<ImplicitParameterContext>(0);
		}
		public SingleParamAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSingleParamAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSingleParamAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleParamAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ImplicitParameterContext[] implicitParameter() {
			return GetRuleContexts<ImplicitParameterContext>();
		}
		public ImplicitParameterContext implicitParameter(int i) {
			return GetRuleContext<ImplicitParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ImplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterImplicitAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitImplicitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExplicitParameterContext[] explicitParameter() {
			return GetRuleContexts<ExplicitParameterContext>();
		}
		public ExplicitParameterContext explicitParameter(int i) {
			return GetRuleContext<ExplicitParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
		AnonymousFunctionSignatureContext _localctx = new AnonymousFunctionSignatureContext(Context, State);
		EnterRule(_localctx, 148, RULE_anonymousFunctionSignature);
		int _la;
		try {
			State = 675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				_localctx = new ExplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 650; Match(TOpenParenthesis);
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					State = 651; explicitParameter();
					State = 656;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TComma) {
						{
						{
						State = 652; Match(TComma);
						State = 653; explicitParameter();
						}
						}
						State = 658;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 661; Match(TCloseParenthesis);
				}
				break;
			case 2:
				_localctx = new ImplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 662; Match(TOpenParenthesis);
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IdentifierNormal) {
					{
					State = 663; implicitParameter();
					State = 668;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TComma) {
						{
						{
						State = 664; Match(TComma);
						State = 665; implicitParameter();
						}
						}
						State = 670;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 673; Match(TCloseParenthesis);
				}
				break;
			case 3:
				_localctx = new SingleParamAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 674; implicitParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExplicitParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExplicitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitParameterContext explicitParameter() {
		ExplicitParameterContext _localctx = new ExplicitParameterContext(Context, State);
		EnterRule(_localctx, 150, RULE_explicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677; typeReference();
			State = 678; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterImplicitParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitImplicitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitParameterContext implicitParameter() {
		ImplicitParameterContext _localctx = new ImplicitParameterContext(Context, State);
		EnterRule(_localctx, 152, RULE_implicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeofUnboundTypeExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public UnboundTypeNameContext unboundTypeName() {
			return GetRuleContext<UnboundTypeNameContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofUnboundTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofUnboundTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofUnboundTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofUnboundTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecheckExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		public TypecheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypecheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypecheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public ITerminalNode TLessThanOrEquals() { return GetToken(MetaGeneratorParser.TLessThanOrEquals, 0); }
		public ITerminalNode TGreaterThanOrEquals() { return GetToken(MetaGeneratorParser.TGreaterThanOrEquals, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostExpressionContext : ExpressionContext {
		public IToken @operator;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public PostExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPostExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPostExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofVoidExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofVoidExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofVoidExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofVoidExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofVoidExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TAmp() { return GetToken(MetaGeneratorParser.TAmp, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TAnd() { return GetToken(MetaGeneratorParser.TAnd, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken @operator;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		public ITerminalNode TExclamation() { return GetToken(MetaGeneratorParser.TExclamation, 0); }
		public ITerminalNode TTilde() { return GetToken(MetaGeneratorParser.TTilde, 0); }
		public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecastExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypecastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypecastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypecastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalXorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TXor() { return GetToken(MetaGeneratorParser.TXor, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefinedTypeMemberAccessExpressionContext : ExpressionContext {
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public PredefinedTypeMemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPredefinedTypeMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPredefinedTypeMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedTypeMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseXorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode THat() { return GetToken(MetaGeneratorParser.THat, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
			return GetRuleContext<AnonymousFunctionSignatureContext>(0);
		}
		public ITerminalNode TArrow() { return GetToken(MetaGeneratorParser.TArrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultValueExpressionContext : ExpressionContext {
		public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public DefaultValueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext thenBranch;
		public ExpressionContext elseBranch;
		public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ITerminalNode TAssignPlus() { return GetToken(MetaGeneratorParser.TAssignPlus, 0); }
		public ITerminalNode TAssignMinus() { return GetToken(MetaGeneratorParser.TAssignMinus, 0); }
		public ITerminalNode TAssignAsterisk() { return GetToken(MetaGeneratorParser.TAssignAsterisk, 0); }
		public ITerminalNode TAssignSlash() { return GetToken(MetaGeneratorParser.TAssignSlash, 0); }
		public ITerminalNode TAssignPercent() { return GetToken(MetaGeneratorParser.TAssignPercent, 0); }
		public ITerminalNode TAssignAmp() { return GetToken(MetaGeneratorParser.TAssignAmp, 0); }
		public ITerminalNode TAssignPipe() { return GetToken(MetaGeneratorParser.TAssignPipe, 0); }
		public ITerminalNode TAssignHat() { return GetToken(MetaGeneratorParser.TAssignHat, 0); }
		public ITerminalNode TAssignLeftShift() { return GetToken(MetaGeneratorParser.TAssignLeftShift, 0); }
		public ITerminalNode TAssignRightShift() { return GetToken(MetaGeneratorParser.TAssignRightShift, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAsterisk() { return GetToken(MetaGeneratorParser.TAsterisk, 0); }
		public ITerminalNode TSlash() { return GetToken(MetaGeneratorParser.TSlash, 0); }
		public ITerminalNode TPercent() { return GetToken(MetaGeneratorParser.TPercent, 0); }
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectOrCollectionWithConstructorExpressionContext : ExpressionContext {
		public ITerminalNode KNew() { return GetToken(MetaGeneratorParser.KNew, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public NewObjectOrCollectionWithConstructorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNewObjectOrCollectionWithConstructorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNewObjectOrCollectionWithConstructorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectOrCollectionWithConstructorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TOr() { return GetToken(MetaGeneratorParser.TOr, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TPipe() { return GetToken(MetaGeneratorParser.TPipe, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HasLoopExpressionContext : ExpressionContext {
		public ITerminalNode KHasLoop() { return GetToken(MetaGeneratorParser.KHasLoop, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		public HasLoopExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterHasLoopExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitHasLoopExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ITerminalNode KThis() { return GetToken(MetaGeneratorParser.KThis, 0); }
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		public ElementAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElementAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElementAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofTypeExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TEquals() { return GetToken(MetaGeneratorParser.TEquals, 0); }
		public ITerminalNode TNotEquals() { return GetToken(MetaGeneratorParser.TNotEquals, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 154;
		EnterRecursionRule(_localctx, 154, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 683; Match(KThis);
				}
				break;
			case 2:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 684; literal();
				}
				break;
			case 3:
				{
				_localctx = new TypeofVoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 685; Match(KTypeof);
				State = 686; Match(TOpenParenthesis);
				State = 687; Match(KVoid);
				State = 688; Match(TCloseParenthesis);
				}
				break;
			case 4:
				{
				_localctx = new TypeofUnboundTypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 689; Match(KTypeof);
				State = 690; Match(TOpenParenthesis);
				State = 691; unboundTypeName();
				State = 692; Match(TCloseParenthesis);
				}
				break;
			case 5:
				{
				_localctx = new TypeofTypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 694; Match(KTypeof);
				State = 695; Match(TOpenParenthesis);
				State = 696; typeReference();
				State = 697; Match(TCloseParenthesis);
				}
				break;
			case 6:
				{
				_localctx = new DefaultValueExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 699; Match(KDefault);
				State = 700; Match(TOpenParenthesis);
				State = 701; typeReference();
				State = 702; Match(TCloseParenthesis);
				}
				break;
			case 7:
				{
				_localctx = new NewObjectOrCollectionWithConstructorExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 704; Match(KNew);
				State = 705; typeReference();
				State = 706; Match(TOpenParenthesis);
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TOpenParenthesis - 65)) | (1L << (TPlus - 65)) | (1L << (TMinus - 65)) | (1L << (TExclamation - 65)) | (1L << (TTilde - 65)) | (1L << (TPlusPlus - 65)) | (1L << (TMinusMinus - 65)) | (1L << (IdentifierNormal - 65)) | (1L << (IntegerLiteral - 65)) | (1L << (DecimalLiteral - 65)) | (1L << (ScientificLiteral - 65)) | (1L << (DateTimeOffsetLiteral - 65)) | (1L << (DateTimeLiteral - 65)) | (1L << (DateLiteral - 65)) | (1L << (TimeLiteral - 65)) | (1L << (CharLiteral - 65)) | (1L << (RegularStringLiteral - 65)) | (1L << (GuidLiteral - 65)) | (1L << (DoubleQuoteVerbatimStringLiteral - 65)))) != 0)) {
					{
					State = 707; expressionList();
					}
				}

				State = 710; Match(TCloseParenthesis);
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 712; identifier();
				State = 714;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 713; typeArgumentList();
					}
					break;
				}
				}
				break;
			case 9:
				{
				_localctx = new HasLoopExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 716; Match(KHasLoop);
				State = 717; Match(TOpenParenthesis);
				State = 718; loopChain();
				State = 720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KWhere) {
					{
					State = 719; loopWhereExpression();
					}
				}

				State = 722; Match(TCloseParenthesis);
				}
				break;
			case 10:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 724; Match(TOpenParenthesis);
				State = 725; expression(0);
				State = 726; Match(TCloseParenthesis);
				}
				break;
			case 11:
				{
				_localctx = new PredefinedTypeMemberAccessExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 728; predefinedType();
				State = 729; Match(TDot);
				State = 730; identifier();
				State = 732;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 731; typeArgumentList();
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new TypecastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 734; Match(TOpenParenthesis);
				State = 735; typeReference();
				State = 736; Match(TCloseParenthesis);
				State = 737; expression(17);
				}
				break;
			case 13:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 739;
				((UnaryExpressionContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (TPlus - 80)) | (1L << (TMinus - 80)) | (1L << (TExclamation - 80)) | (1L << (TTilde - 80)) | (1L << (TPlusPlus - 80)) | (1L << (TMinusMinus - 80)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 740; expression(16);
				}
				break;
			case 14:
				{
				_localctx = new LambdaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 741; anonymousFunctionSignature();
				State = 742; Match(TArrow);
				State = 743; expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 810;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 808;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicationExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 747;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 748;
						((MultiplicationExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (TAsterisk - 84)) | (1L << (TSlash - 84)) | (1L << (TPercent - 84)))) != 0)) ) {
							((MultiplicationExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 749; ((MultiplicationExpressionContext)_localctx).right = expression(15);
						}
						break;
					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditionExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 750;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 751;
						((AdditionExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TPlus || _la==TMinus) ) {
							((AdditionExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 752; ((AdditionExpressionContext)_localctx).right = expression(14);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 753;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 754;
						((RelationalExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (TLessThan - 75)) | (1L << (TGreaterThan - 75)) | (1L << (TLessThanOrEquals - 75)) | (1L << (TGreaterThanOrEquals - 75)))) != 0)) ) {
							((RelationalExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 755; ((RelationalExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 756;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 757;
						((EqualityExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TEquals || _la==TNotEquals) ) {
							((EqualityExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 758; ((EqualityExpressionContext)_localctx).right = expression(11);
						}
						break;
					case 5:
						{
						_localctx = new BitwiseAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 759;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 760; Match(TAmp);
						State = 761; ((BitwiseAndExpressionContext)_localctx).right = expression(10);
						}
						break;
					case 6:
						{
						_localctx = new BitwiseXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseXorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 762;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 763; Match(THat);
						State = 764; ((BitwiseXorExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 7:
						{
						_localctx = new BitwiseOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 765;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 766; Match(TPipe);
						State = 767; ((BitwiseOrExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 8:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 768;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 769; Match(TAnd);
						State = 770; ((LogicalAndExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 9:
						{
						_localctx = new LogicalXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalXorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 771;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 772; Match(TXor);
						State = 773; ((LogicalXorExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 10:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 774;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 775; Match(TOr);
						State = 776; ((LogicalOrExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 11:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ConditionalExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 777;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 778; Match(TQuestion);
						State = 779; ((ConditionalExpressionContext)_localctx).thenBranch = expression(0);
						State = 780; Match(TColon);
						State = 781; ((ConditionalExpressionContext)_localctx).elseBranch = expression(4);
						}
						break;
					case 12:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 783;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 784;
						((AssignmentExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (TAssign - 54)) | (1L << (TAssignPlus - 54)) | (1L << (TAssignMinus - 54)) | (1L << (TAssignAsterisk - 54)) | (1L << (TAssignSlash - 54)) | (1L << (TAssignPercent - 54)) | (1L << (TAssignAmp - 54)) | (1L << (TAssignPipe - 54)) | (1L << (TAssignHat - 54)) | (1L << (TAssignLeftShift - 54)) | (1L << (TAssignRightShift - 54)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 785; expression(3);
						}
						break;
					case 13:
						{
						_localctx = new ElementAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 786;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 787; Match(TOpenBracket);
						State = 788; expressionList();
						State = 789; Match(TCloseBracket);
						}
						break;
					case 14:
						{
						_localctx = new FunctionCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 791;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 792; Match(TOpenParenthesis);
						State = 794;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TOpenParenthesis - 65)) | (1L << (TPlus - 65)) | (1L << (TMinus - 65)) | (1L << (TExclamation - 65)) | (1L << (TTilde - 65)) | (1L << (TPlusPlus - 65)) | (1L << (TMinusMinus - 65)) | (1L << (IdentifierNormal - 65)) | (1L << (IntegerLiteral - 65)) | (1L << (DecimalLiteral - 65)) | (1L << (ScientificLiteral - 65)) | (1L << (DateTimeOffsetLiteral - 65)) | (1L << (DateTimeLiteral - 65)) | (1L << (DateLiteral - 65)) | (1L << (TimeLiteral - 65)) | (1L << (CharLiteral - 65)) | (1L << (RegularStringLiteral - 65)) | (1L << (GuidLiteral - 65)) | (1L << (DoubleQuoteVerbatimStringLiteral - 65)))) != 0)) {
							{
							State = 793; expressionList();
							}
						}

						State = 796; Match(TCloseParenthesis);
						}
						break;
					case 15:
						{
						_localctx = new MemberAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 797;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 798; Match(TDot);
						State = 799; identifier();
						State = 801;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
						case 1:
							{
							State = 800; typeArgumentList();
							}
							break;
						}
						}
						break;
					case 16:
						{
						_localctx = new PostExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 803;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 804;
						((PostExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
							((PostExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 17:
						{
						_localctx = new TypecheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypecheckExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 805;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 806;
						((TypecheckExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==KIs || _la==KAs) ) {
							((TypecheckExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 807; typeReference();
						}
						break;
					}
					} 
				}
				State = 812;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 156, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 813; identifier();
			State = 818;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 814; Match(TDot);
					State = 815; identifier();
					}
					} 
				}
				State = 820;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 158, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821; identifier();
			State = 826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TComma) {
				{
				{
				State = 822; Match(TComma);
				State = 823; identifier();
				}
				}
				State = 828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaGeneratorParser.IdentifierNormal, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 160, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829; Match(IdentifierNormal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public DateOrTimeLiteralContext dateOrTimeLiteral() {
			return GetRuleContext<DateOrTimeLiteralContext>(0);
		}
		public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public GuidLiteralContext guidLiteral() {
			return GetRuleContext<GuidLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 162, RULE_literal);
		try {
			State = 838;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 831; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 832; booleanLiteral();
				}
				break;
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 833; numberLiteral();
				}
				break;
			case DateTimeOffsetLiteral:
			case DateTimeLiteral:
			case DateLiteral:
			case TimeLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 834; dateOrTimeLiteral();
				}
				break;
			case CharLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 835; charLiteral();
				}
				break;
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 836; stringLiteral();
				}
				break;
			case GuidLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 837; guidLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaGeneratorParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 164, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaGeneratorParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaGeneratorParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 166, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			_la = TokenStream.LA(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 168, RULE_numberLiteral);
		try {
			State = 847;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 844; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 845; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 846; scientificLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(MetaGeneratorParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 170, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(MetaGeneratorParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 172, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(MetaGeneratorParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 174, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 853; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateOrTimeLiteralContext : ParserRuleContext {
		public DateTimeLiteralContext dateTimeLiteral() {
			return GetRuleContext<DateTimeLiteralContext>(0);
		}
		public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
			return GetRuleContext<DateTimeOffsetLiteralContext>(0);
		}
		public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		public TimeLiteralContext timeLiteral() {
			return GetRuleContext<TimeLiteralContext>(0);
		}
		public DateOrTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateOrTimeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateOrTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateOrTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateOrTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateOrTimeLiteralContext dateOrTimeLiteral() {
		DateOrTimeLiteralContext _localctx = new DateOrTimeLiteralContext(Context, State);
		EnterRule(_localctx, 176, RULE_dateOrTimeLiteral);
		try {
			State = 859;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DateTimeLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 855; dateTimeLiteral();
				}
				break;
			case DateTimeOffsetLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 856; dateTimeOffsetLiteral();
				}
				break;
			case DateLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 857; dateLiteral();
				}
				break;
			case TimeLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 858; timeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeOffsetLiteralContext : ParserRuleContext {
		public ITerminalNode DateTimeOffsetLiteral() { return GetToken(MetaGeneratorParser.DateTimeOffsetLiteral, 0); }
		public DateTimeOffsetLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeOffsetLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateTimeOffsetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateTimeOffsetLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeOffsetLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
		DateTimeOffsetLiteralContext _localctx = new DateTimeOffsetLiteralContext(Context, State);
		EnterRule(_localctx, 178, RULE_dateTimeOffsetLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861; Match(DateTimeOffsetLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeLiteralContext : ParserRuleContext {
		public ITerminalNode DateTimeLiteral() { return GetToken(MetaGeneratorParser.DateTimeLiteral, 0); }
		public DateTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeLiteralContext dateTimeLiteral() {
		DateTimeLiteralContext _localctx = new DateTimeLiteralContext(Context, State);
		EnterRule(_localctx, 180, RULE_dateTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863; Match(DateTimeLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		public ITerminalNode DateLiteral() { return GetToken(MetaGeneratorParser.DateLiteral, 0); }
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(Context, State);
		EnterRule(_localctx, 182, RULE_dateLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865; Match(DateLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeLiteralContext : ParserRuleContext {
		public ITerminalNode TimeLiteral() { return GetToken(MetaGeneratorParser.TimeLiteral, 0); }
		public TimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeLiteralContext timeLiteral() {
		TimeLiteralContext _localctx = new TimeLiteralContext(Context, State);
		EnterRule(_localctx, 184, RULE_timeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867; Match(TimeLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		public ITerminalNode CharLiteral() { return GetToken(MetaGeneratorParser.CharLiteral, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterCharLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitCharLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 186, RULE_charLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869; Match(CharLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(MetaGeneratorParser.RegularStringLiteral, 0); }
		public ITerminalNode DoubleQuoteVerbatimStringLiteral() { return GetToken(MetaGeneratorParser.DoubleQuoteVerbatimStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 188, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			_la = TokenStream.LA(1);
			if ( !(_la==RegularStringLiteral || _la==DoubleQuoteVerbatimStringLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidLiteralContext : ParserRuleContext {
		public ITerminalNode GuidLiteral() { return GetToken(MetaGeneratorParser.GuidLiteral, 0); }
		public GuidLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guidLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGuidLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGuidLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuidLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuidLiteralContext guidLiteral() {
		GuidLiteralContext _localctx = new GuidLiteralContext(Context, State);
		EnterRule(_localctx, 190, RULE_guidLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873; Match(GuidLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 31: return loopChainExpression_sempred((LoopChainExpressionContext)_localctx, predIndex);
		case 77: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool loopChainExpression_sempred(LoopChainExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 21);
		case 15: return Precpred(Context, 20);
		case 16: return Precpred(Context, 18);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 11);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x81");
		sb.Append("\x36E\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N");
		sb.Append("\tN\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV");
		sb.Append("\x4W\tW\x4X\tX\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4");
		sb.Append("_\t_\x4`\t`\x4\x61\t\x61\x3\x2\x3\x2\x3\x2\a\x2\xC6\n\x2\f\x2");
		sb.Append("\xE\x2\xC9\v\x2\x3\x2\x5\x2\xCC\n\x2\x3\x2\a\x2\xCF\n\x2\f\x2");
		sb.Append("\xE\x2\xD2\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x5\x3\x5\x3\x5\x3\x5\x5\x5\xE9\n\x5\x3\x5\x3\x5\x5\x5\xED\n");
		sb.Append("\x5\x3\x6\x3\x6\x5\x6\xF1\n\x6\x3\x6\a\x6\xF4\n\x6\f\x6\xE\x6");
		sb.Append("\xF7\v\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x5\a\x100\n");
		sb.Append("\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\a\x107\n\a\f\a\xE\a\x10A\v\a\x3");
		sb.Append("\a\x3\a\x3\a\x5\a\x10F\n\a\x3\b\x3\b\x3\b\x5\b\x114\n\b\x3\t");
		sb.Append("\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v");
		sb.Append("\x5\v\x123\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\a\f\x12A\n\f\f\f\xE");
		sb.Append("\f\x12D\v\f\x3\r\x3\r\x3\r\x3\r\x5\r\x133\n\r\x3\xE\a\xE\x136");
		sb.Append("\n\xE\f\xE\xE\xE\x139\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x13F");
		sb.Append("\n\xF\x3\x10\x3\x10\x3\x10\x5\x10\x144\n\x10\x3\x11\x3\x11\x3");
		sb.Append("\x11\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x14D\n\x12\x3\x13\x3");
		sb.Append("\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\a\x15\x157\n");
		sb.Append("\x15\f\x15\xE\x15\x15A\v\x15\x3\x15\x5\x15\x15D\n\x15\x3\x15");
		sb.Append("\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3");
		sb.Append("\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19");
		sb.Append("\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3");
		sb.Append("\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x17F\n\x1D\x3");
		sb.Append("\x1D\x5\x1D\x182\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3");
		sb.Append("\x1F\x3\x1F\x3\x1F\a\x1F\x18C\n\x1F\f\x1F\xE\x1F\x18F\v\x1F");
		sb.Append("\x3 \x5 \x192\n \x3 \x3 \x3 \x5 \x197\n \x3 \x3 \x3!\x3!\x3");
		sb.Append("!\x3!\x3!\x3!\x3!\x3!\x5!\x1A3\n!\x5!\x1A5\n!\x3!\x3!\x3!\x3");
		sb.Append("!\x5!\x1AB\n!\x3!\x3!\x3!\x5!\x1B0\n!\x3!\a!\x1B3\n!\f!\xE!");
		sb.Append("\x1B6\v!\x3\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x3%");
		sb.Append("\x3%\a%\x1C5\n%\f%\xE%\x1C8\v%\x3%\x5%\x1CB\n%\x3%\x3%\x3&\x3");
		sb.Append("&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3)\x6)\x1DB\n)\r)");
		sb.Append("\xE)\x1DC\x3)\x5)\x1E0\n)\x3*\x3*\x5*\x1E4\n*\x3+\x3+\x3+\x3");
		sb.Append("+\x3,\x3,\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3.\x3.\x3.\x3/\x3");
		sb.Append("/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31");
		sb.Append("\x5\x31\x202\n\x31\x3\x31\x3\x31\x3\x32\a\x32\x207\n\x32\f\x32");
		sb.Append("\xE\x32\x20A\v\x32\x3\x33\a\x33\x20D\n\x33\f\x33\xE\x33\x210");
		sb.Append("\v\x33\x3\x33\x3\x33\x3\x34\x3\x34\x5\x34\x216\n\x34\x3\x35");
		sb.Append("\x3\x35\x3\x36\x3\x36\x3\x37\x3\x37\x5\x37\x21E\n\x37\x3\x37");
		sb.Append("\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3");
		sb.Append("\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x22E\n\x38\x3\x39\x3");
		sb.Append("\x39\x3\x39\x3\x39\x3:\x3:\x3;\x3;\x3;\a;\x239\n;\f;\xE;\x23C");
		sb.Append("\v;\x3<\x3<\x3<\x3<\x5<\x242\n<\x3=\x3=\x3=\x3>\x3>\x3>\x5>");
		sb.Append("\x24A\n>\x3?\x3?\x3?\x3@\x3@\x5@\x251\n@\x3\x41\x3\x41\x3\x41");
		sb.Append("\x3\x42\x3\x42\x5\x42\x258\n\x42\x3\x43\x3\x43\x3\x44\x3\x44");
		sb.Append("\x5\x44\x25E\n\x44\x3\x45\x3\x45\x3\x45\a\x45\x263\n\x45\f\x45");
		sb.Append("\xE\x45\x266\v\x45\x3\x46\x3\x46\x3G\x6G\x26B\nG\rG\xEG\x26C");
		sb.Append("\x3H\x3H\aH\x271\nH\fH\xEH\x274\vH\x3H\x3H\x3I\x3I\x3I\aI\x27B");
		sb.Append("\nI\fI\xEI\x27E\vI\x3J\x3J\x5J\x282\nJ\x3K\x3K\aK\x286\nK\f");
		sb.Append("K\xEK\x289\vK\x3K\x3K\x3L\x3L\x3L\x3L\aL\x291\nL\fL\xEL\x294");
		sb.Append("\vL\x5L\x296\nL\x3L\x3L\x3L\x3L\x3L\aL\x29D\nL\fL\xEL\x2A0\v");
		sb.Append("L\x5L\x2A2\nL\x3L\x3L\x5L\x2A6\nL\x3M\x3M\x3M\x3N\x3N\x3O\x3");
		sb.Append("O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3");
		sb.Append("O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x2C7\nO\x3O\x3O\x3");
		sb.Append("O\x3O\x5O\x2CD\nO\x3O\x3O\x3O\x3O\x5O\x2D3\nO\x3O\x3O\x3O\x3");
		sb.Append("O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x2DF\nO\x3O\x3O\x3O\x3O\x3O\x3");
		sb.Append("O\x3O\x3O\x3O\x3O\x3O\x5O\x2EC\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3");
		sb.Append("O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3");
		sb.Append("O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3");
		sb.Append("O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x31D\nO\x3O\x3");
		sb.Append("O\x3O\x3O\x3O\x5O\x324\nO\x3O\x3O\x3O\x3O\x3O\aO\x32B\nO\fO");
		sb.Append("\xEO\x32E\vO\x3P\x3P\x3P\aP\x333\nP\fP\xEP\x336\vP\x3Q\x3Q\x3");
		sb.Append("Q\aQ\x33B\nQ\fQ\xEQ\x33E\vQ\x3R\x3R\x3S\x3S\x3S\x3S\x3S\x3S");
		sb.Append("\x3S\x5S\x349\nS\x3T\x3T\x3U\x3U\x3V\x3V\x3V\x5V\x352\nV\x3");
		sb.Append("W\x3W\x3X\x3X\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x5Z\x35E\nZ\x3[\x3[\x3");
		sb.Append("\\\x3\\\x3]\x3]\x3^\x3^\x3_\x3_\x3`\x3`\x3\x61\x3\x61\x3\x61");
		sb.Append("\x2\x4@\x9C\x62\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C");
		sb.Append("\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ");
		sb.Append("\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E");
		sb.Append("\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC");
		sb.Append("\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\x2\xE\x4\x2xxz{\x3");
		sb.Append("\x2\x1F-\x4\x2RUYZ\x3\x2VX\x3\x2RS\x3\x2MP\x3\x2IJ\x3\x2\x38");
		sb.Append("\x42\x3\x2YZ\x3\x2\x30\x31\x3\x2\x1D\x1E\x4\x2lltt\x38B\x2\xC2");
		sb.Append("\x3\x2\x2\x2\x4\xD5\x3\x2\x2\x2\x6\xD9\x3\x2\x2\x2\b\xEC\x3");
		sb.Append("\x2\x2\x2\n\xEE\x3\x2\x2\x2\f\x10E\x3\x2\x2\x2\xE\x113\x3\x2");
		sb.Append("\x2\x2\x10\x115\x3\x2\x2\x2\x12\x118\x3\x2\x2\x2\x14\x11D\x3");
		sb.Append("\x2\x2\x2\x16\x126\x3\x2\x2\x2\x18\x12E\x3\x2\x2\x2\x1A\x137");
		sb.Append("\x3\x2\x2\x2\x1C\x13E\x3\x2\x2\x2\x1E\x143\x3\x2\x2\x2 \x145");
		sb.Append("\x3\x2\x2\x2\"\x148\x3\x2\x2\x2$\x14E\x3\x2\x2\x2&\x151\x3\x2");
		sb.Append("\x2\x2(\x153\x3\x2\x2\x2*\x160\x3\x2\x2\x2,\x163\x3\x2\x2\x2");
		sb.Append(".\x166\x3\x2\x2\x2\x30\x16B\x3\x2\x2\x2\x32\x171\x3\x2\x2\x2");
		sb.Append("\x34\x173\x3\x2\x2\x2\x36\x176\x3\x2\x2\x2\x38\x17A\x3\x2\x2");
		sb.Append("\x2:\x185\x3\x2\x2\x2<\x188\x3\x2\x2\x2>\x196\x3\x2\x2\x2@\x1A4");
		sb.Append("\x3\x2\x2\x2\x42\x1B7\x3\x2\x2\x2\x44\x1BA\x3\x2\x2\x2\x46\x1BC");
		sb.Append("\x3\x2\x2\x2H\x1C2\x3\x2\x2\x2J\x1CE\x3\x2\x2\x2L\x1D3\x3\x2");
		sb.Append("\x2\x2N\x1D6\x3\x2\x2\x2P\x1DF\x3\x2\x2\x2R\x1E3\x3\x2\x2\x2");
		sb.Append("T\x1E5\x3\x2\x2\x2V\x1E9\x3\x2\x2\x2X\x1EE\x3\x2\x2\x2Z\x1F3");
		sb.Append("\x3\x2\x2\x2\\\x1F6\x3\x2\x2\x2^\x1F9\x3\x2\x2\x2`\x1FD\x3\x2");
		sb.Append("\x2\x2\x62\x208\x3\x2\x2\x2\x64\x20E\x3\x2\x2\x2\x66\x215\x3");
		sb.Append("\x2\x2\x2h\x217\x3\x2\x2\x2j\x219\x3\x2\x2\x2l\x21B\x3\x2\x2");
		sb.Append("\x2n\x22D\x3\x2\x2\x2p\x22F\x3\x2\x2\x2r\x233\x3\x2\x2\x2t\x235");
		sb.Append("\x3\x2\x2\x2v\x241\x3\x2\x2\x2x\x243\x3\x2\x2\x2z\x249\x3\x2");
		sb.Append("\x2\x2|\x24B\x3\x2\x2\x2~\x250\x3\x2\x2\x2\x80\x252\x3\x2\x2");
		sb.Append("\x2\x82\x257\x3\x2\x2\x2\x84\x259\x3\x2\x2\x2\x86\x25D\x3\x2");
		sb.Append("\x2\x2\x88\x25F\x3\x2\x2\x2\x8A\x267\x3\x2\x2\x2\x8C\x26A\x3");
		sb.Append("\x2\x2\x2\x8E\x26E\x3\x2\x2\x2\x90\x277\x3\x2\x2\x2\x92\x27F");
		sb.Append("\x3\x2\x2\x2\x94\x283\x3\x2\x2\x2\x96\x2A5\x3\x2\x2\x2\x98\x2A7");
		sb.Append("\x3\x2\x2\x2\x9A\x2AA\x3\x2\x2\x2\x9C\x2EB\x3\x2\x2\x2\x9E\x32F");
		sb.Append("\x3\x2\x2\x2\xA0\x337\x3\x2\x2\x2\xA2\x33F\x3\x2\x2\x2\xA4\x348");
		sb.Append("\x3\x2\x2\x2\xA6\x34A\x3\x2\x2\x2\xA8\x34C\x3\x2\x2\x2\xAA\x351");
		sb.Append("\x3\x2\x2\x2\xAC\x353\x3\x2\x2\x2\xAE\x355\x3\x2\x2\x2\xB0\x357");
		sb.Append("\x3\x2\x2\x2\xB2\x35D\x3\x2\x2\x2\xB4\x35F\x3\x2\x2\x2\xB6\x361");
		sb.Append("\x3\x2\x2\x2\xB8\x363\x3\x2\x2\x2\xBA\x365\x3\x2\x2\x2\xBC\x367");
		sb.Append("\x3\x2\x2\x2\xBE\x369\x3\x2\x2\x2\xC0\x36B\x3\x2\x2\x2\xC2\xC3");
		sb.Append("\x5\x4\x3\x2\xC3\xC7\x5\x6\x4\x2\xC4\xC6\x5\b\x5\x2\xC5\xC4");
		sb.Append("\x3\x2\x2\x2\xC6\xC9\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7\xC8");
		sb.Append("\x3\x2\x2\x2\xC8\xCB\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA\xCC");
		sb.Append("\x5\n\x6\x2\xCB\xCA\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xD0");
		sb.Append("\x3\x2\x2\x2\xCD\xCF\x5\xE\b\x2\xCE\xCD\x3\x2\x2\x2\xCF\xD2");
		sb.Append("\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD3");
		sb.Append("\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3\xD4\a\x2\x2\x3\xD4\x3\x3");
		sb.Append("\x2\x2\x2\xD5\xD6\a\x3\x2\x2\xD6\xD7\x5\x9EP\x2\xD7\xD8\a\x34");
		sb.Append("\x2\x2\xD8\x5\x3\x2\x2\x2\xD9\xDA\a\x4\x2\x2\xDA\xDB\x5\xA2");
		sb.Append("R\x2\xDB\xDC\a\x11\x2\x2\xDC\xDD\x5v<\x2\xDD\xDE\x3\x2\x2\x2");
		sb.Append("\xDE\xDF\a\x34\x2\x2\xDF\a\x3\x2\x2\x2\xE0\xE1\a\x5\x2\x2\xE1");
		sb.Append("\xE2\x5\x9EP\x2\xE2\xE3\a\x34\x2\x2\xE3\xED\x3\x2\x2\x2\xE4");
		sb.Append("\xE5\a\x5\x2\x2\xE5\xE6\a\x4\x2\x2\xE6\xE8\x5\x9EP\x2\xE7\xE9");
		sb.Append("\x5\xA2R\x2\xE8\xE7\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEA");
		sb.Append("\x3\x2\x2\x2\xEA\xEB\a\x34\x2\x2\xEB\xED\x3\x2\x2\x2\xEC\xE0");
		sb.Append("\x3\x2\x2\x2\xEC\xE4\x3\x2\x2\x2\xED\t\x3\x2\x2\x2\xEE\xF0\a");
		sb.Append("\a\x2\x2\xEF\xF1\x5\xA2R\x2\xF0\xEF\x3\x2\x2\x2\xF0\xF1\x3\x2");
		sb.Append("\x2\x2\xF1\xF5\x3\x2\x2\x2\xF2\xF4\x5\f\a\x2\xF3\xF2\x3\x2\x2");
		sb.Append("\x2\xF4\xF7\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF6\x3\x2\x2");
		sb.Append("\x2\xF6\xF8\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF8\xF9\a\x10\x2");
		sb.Append("\x2\xF9\xFA\a\a\x2\x2\xFA\v\x3\x2\x2\x2\xFB\xFC\x5v<\x2\xFC");
		sb.Append("\xFF\x5\xA2R\x2\xFD\xFE\a\x38\x2\x2\xFE\x100\x5\x9CO\x2\xFF");
		sb.Append("\xFD\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2");
		sb.Append("\x101\x102\a\x34\x2\x2\x102\x10F\x3\x2\x2\x2\x103\x104\a\a\x2");
		sb.Append("\x2\x104\x108\x5\xA2R\x2\x105\x107\x5\f\a\x2\x106\x105\x3\x2");
		sb.Append("\x2\x2\x107\x10A\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x108\x109");
		sb.Append("\x3\x2\x2\x2\x109\x10B\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B");
		sb.Append("\x10C\a\x10\x2\x2\x10C\x10D\a\a\x2\x2\x10D\x10F\x3\x2\x2\x2");
		sb.Append("\x10E\xFB\x3\x2\x2\x2\x10E\x103\x3\x2\x2\x2\x10F\r\x3\x2\x2");
		sb.Append("\x2\x110\x114\x5\x12\n\x2\x111\x114\x5^\x30\x2\x112\x114\x5");
		sb.Append("\x10\t\x2\x113\x110\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x113\x112");
		sb.Append("\x3\x2\x2\x2\x114\xF\x3\x2\x2\x2\x115\x116\a\n\x2\x2\x116\x117");
		sb.Append("\x5\x14\v\x2\x117\x11\x3\x2\x2\x2\x118\x119\x5\x14\v\x2\x119");
		sb.Append("\x11A\x5\x1A\xE\x2\x11A\x11B\a\x10\x2\x2\x11B\x11C\a\t\x2\x2");
		sb.Append("\x11C\x13\x3\x2\x2\x2\x11D\x11E\a\t\x2\x2\x11E\x11F\x5\x86\x44");
		sb.Append("\x2\x11F\x120\x5\xA2R\x2\x120\x122\a\x43\x2\x2\x121\x123\x5");
		sb.Append("\x16\f\x2\x122\x121\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x124");
		sb.Append("\x3\x2\x2\x2\x124\x125\a\x44\x2\x2\x125\x15\x3\x2\x2\x2\x126");
		sb.Append("\x12B\x5\x18\r\x2\x127\x128\a\x37\x2\x2\x128\x12A\x5\x18\r\x2");
		sb.Append("\x129\x127\x3\x2\x2\x2\x12A\x12D\x3\x2\x2\x2\x12B\x129\x3\x2");
		sb.Append("\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x17\x3\x2\x2\x2\x12D\x12B");
		sb.Append("\x3\x2\x2\x2\x12E\x12F\x5v<\x2\x12F\x132\x5\xA2R\x2\x130\x131");
		sb.Append("\a\x38\x2\x2\x131\x133\x5\x9CO\x2\x132\x130\x3\x2\x2\x2\x132");
		sb.Append("\x133\x3\x2\x2\x2\x133\x19\x3\x2\x2\x2\x134\x136\x5\x1C\xF\x2");
		sb.Append("\x135\x134\x3\x2\x2\x2\x136\x139\x3\x2\x2\x2\x137\x135\x3\x2");
		sb.Append("\x2\x2\x137\x138\x3\x2\x2\x2\x138\x1B\x3\x2\x2\x2\x139\x137");
		sb.Append("\x3\x2\x2\x2\x13A\x13F\x5 \x11\x2\x13B\x13F\x5(\x15\x2\x13C");
		sb.Append("\x13F\x5\x36\x1C\x2\x13D\x13F\x5H%\x2\x13E\x13A\x3\x2\x2\x2");
		sb.Append("\x13E\x13B\x3\x2\x2\x2\x13E\x13C\x3\x2\x2\x2\x13E\x13D\x3\x2");
		sb.Append("\x2\x2\x13F\x1D\x3\x2\x2\x2\x140\x144\x5\"\x12\x2\x141\x144");
		sb.Append("\x5$\x13\x2\x142\x144\x5&\x14\x2\x143\x140\x3\x2\x2\x2\x143");
		sb.Append("\x141\x3\x2\x2\x2\x143\x142\x3\x2\x2\x2\x144\x1F\x3\x2\x2\x2");
		sb.Append("\x145\x146\x5\x1E\x10\x2\x146\x147\a\x34\x2\x2\x147!\x3\x2\x2");
		sb.Append("\x2\x148\x149\x5v<\x2\x149\x14C\x5\xA2R\x2\x14A\x14B\a\x38\x2");
		sb.Append("\x2\x14B\x14D\x5\x9CO\x2\x14C\x14A\x3\x2\x2\x2\x14C\x14D\x3");
		sb.Append("\x2\x2\x2\x14D#\x3\x2\x2\x2\x14E\x14F\a\v\x2\x2\x14F\x150\x5");
		sb.Append("\x9CO\x2\x150%\x3\x2\x2\x2\x151\x152\x5\x9CO\x2\x152\'\x3\x2");
		sb.Append("\x2\x2\x153\x154\x5.\x18\x2\x154\x158\x5\x1A\xE\x2\x155\x157");
		sb.Append("\x5*\x16\x2\x156\x155\x3\x2\x2\x2\x157\x15A\x3\x2\x2\x2\x158");
		sb.Append("\x156\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15C\x3\x2\x2\x2");
		sb.Append("\x15A\x158\x3\x2\x2\x2\x15B\x15D\x5,\x17\x2\x15C\x15B\x3\x2");
		sb.Append("\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x15F");
		sb.Append("\x5\x34\x1B\x2\x15F)\x3\x2\x2\x2\x160\x161\x5\x30\x19\x2\x161");
		sb.Append("\x162\x5\x1A\xE\x2\x162+\x3\x2\x2\x2\x163\x164\x5\x32\x1A\x2");
		sb.Append("\x164\x165\x5\x1A\xE\x2\x165-\x3\x2\x2\x2\x166\x167\a\x14\x2");
		sb.Append("\x2\x167\x168\a\x43\x2\x2\x168\x169\x5\x9CO\x2\x169\x16A\a\x44");
		sb.Append("\x2\x2\x16A/\x3\x2\x2\x2\x16B\x16C\a\x15\x2\x2\x16C\x16D\a\x14");
		sb.Append("\x2\x2\x16D\x16E\a\x43\x2\x2\x16E\x16F\x5\x9CO\x2\x16F\x170");
		sb.Append("\a\x44\x2\x2\x170\x31\x3\x2\x2\x2\x171\x172\a\x15\x2\x2\x172");
		sb.Append("\x33\x3\x2\x2\x2\x173\x174\a\x10\x2\x2\x174\x175\a\x14\x2\x2");
		sb.Append("\x175\x35\x3\x2\x2\x2\x176\x177\x5\x38\x1D\x2\x177\x178\x5\x1A");
		sb.Append("\xE\x2\x178\x179\x5:\x1E\x2\x179\x37\x3\x2\x2\x2\x17A\x17B\a");
		sb.Append("\x16\x2\x2\x17B\x17C\a\x43\x2\x2\x17C\x17E\x5<\x1F\x2\x17D\x17F");
		sb.Append("\x5\x42\"\x2\x17E\x17D\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F");
		sb.Append("\x181\x3\x2\x2\x2\x180\x182\x5\x44#\x2\x181\x180\x3\x2\x2\x2");
		sb.Append("\x181\x182\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183\x184\a\x44");
		sb.Append("\x2\x2\x184\x39\x3\x2\x2\x2\x185\x186\a\x10\x2\x2\x186\x187");
		sb.Append("\a\x16\x2\x2\x187;\x3\x2\x2\x2\x188\x18D\x5> \x2\x189\x18A\a");
		sb.Append("L\x2\x2\x18A\x18C\x5> \x2\x18B\x189\x3\x2\x2\x2\x18C\x18F\x3");
		sb.Append("\x2\x2\x2\x18D\x18B\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18E=");
		sb.Append("\x3\x2\x2\x2\x18F\x18D\x3\x2\x2\x2\x190\x192\x5v<\x2\x191\x190");
		sb.Append("\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193");
		sb.Append("\x194\x5\xA2R\x2\x194\x195\a\x35\x2\x2\x195\x197\x3\x2\x2\x2");
		sb.Append("\x196\x191\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x198\x3\x2");
		sb.Append("\x2\x2\x198\x199\x5@!\x2\x199?\x3\x2\x2\x2\x19A\x19B\b!\x1\x2");
		sb.Append("\x19B\x19C\a\x32\x2\x2\x19C\x19D\a\x43\x2\x2\x19D\x19E\x5v<");
		sb.Append("\x2\x19E\x19F\a\x44\x2\x2\x19F\x1A5\x3\x2\x2\x2\x1A0\x1A2\x5");
		sb.Append("\xA2R\x2\x1A1\x1A3\x5p\x39\x2\x1A2\x1A1\x3\x2\x2\x2\x1A2\x1A3");
		sb.Append("\x3\x2\x2\x2\x1A3\x1A5\x3\x2\x2\x2\x1A4\x19A\x3\x2\x2\x2\x1A4");
		sb.Append("\x1A0\x3\x2\x2\x2\x1A5\x1B4\x3\x2\x2\x2\x1A6\x1A7\f\x4\x2\x2");
		sb.Append("\x1A7\x1A8\a\x36\x2\x2\x1A8\x1AA\x5\xA2R\x2\x1A9\x1AB\x5p\x39");
		sb.Append("\x2\x1AA\x1A9\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2\x1AB\x1B3\x3");
		sb.Append("\x2\x2\x2\x1AC\x1AD\f\x3\x2\x2\x1AD\x1AF\a\x43\x2\x2\x1AE\x1B0");
		sb.Append("\x5\x88\x45\x2\x1AF\x1AE\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0");
		sb.Append("\x1B1\x3\x2\x2\x2\x1B1\x1B3\a\x44\x2\x2\x1B2\x1A6\x3\x2\x2\x2");
		sb.Append("\x1B2\x1AC\x3\x2\x2\x2\x1B3\x1B6\x3\x2\x2\x2\x1B4\x1B2\x3\x2");
		sb.Append("\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x41\x3\x2\x2\x2\x1B6\x1B4");
		sb.Append("\x3\x2\x2\x2\x1B7\x1B8\a\x18\x2\x2\x1B8\x1B9\x5\x9CO\x2\x1B9");
		sb.Append("\x43\x3\x2\x2\x2\x1BA\x1BB\x5\x46$\x2\x1BB\x45\x3\x2\x2\x2\x1BC");
		sb.Append("\x1BD\a\x34\x2\x2\x1BD\x1BE\a\x1B\x2\x2\x1BE\x1BF\x5\xA2R\x2");
		sb.Append("\x1BF\x1C0\a\x38\x2\x2\x1C0\x1C1\x5\xBE`\x2\x1C1G\x3\x2\x2\x2");
		sb.Append("\x1C2\x1C6\x5J&\x2\x1C3\x1C5\x5N(\x2\x1C4\x1C3\x3\x2\x2\x2\x1C5");
		sb.Append("\x1C8\x3\x2\x2\x2\x1C6\x1C4\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2\x2");
		sb.Append("\x1C7\x1CA\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2\x2\x1C9\x1CB\x5Z.");
		sb.Append("\x2\x1CA\x1C9\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1CC\x3");
		sb.Append("\x2\x2\x2\x1CC\x1CD\x5L\'\x2\x1CDI\x3\x2\x2\x2\x1CE\x1CF\a\f");
		sb.Append("\x2\x2\x1CF\x1D0\a\x43\x2\x2\x1D0\x1D1\x5\x9CO\x2\x1D1\x1D2");
		sb.Append("\a\x44\x2\x2\x1D2K\x3\x2\x2\x2\x1D3\x1D4\a\x10\x2\x2\x1D4\x1D5");
		sb.Append("\a\f\x2\x2\x1D5M\x3\x2\x2\x2\x1D6\x1D7\x5P)\x2\x1D7\x1D8\x5");
		sb.Append("\x1A\xE\x2\x1D8O\x3\x2\x2\x2\x1D9\x1DB\x5R*\x2\x1DA\x1D9\x3");
		sb.Append("\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DA\x3\x2\x2\x2\x1DC\x1DD");
		sb.Append("\x3\x2\x2\x2\x1DD\x1E0\x3\x2\x2\x2\x1DE\x1E0\x5X-\x2\x1DF\x1DA");
		sb.Append("\x3\x2\x2\x2\x1DF\x1DE\x3\x2\x2\x2\x1E0Q\x3\x2\x2\x2\x1E1\x1E4");
		sb.Append("\x5T+\x2\x1E2\x1E4\x5V,\x2\x1E3\x1E1\x3\x2\x2\x2\x1E3\x1E2\x3");
		sb.Append("\x2\x2\x2\x1E4S\x3\x2\x2\x2\x1E5\x1E6\a\r\x2\x2\x1E6\x1E7\x5");
		sb.Append("\x88\x45\x2\x1E7\x1E8\a\x35\x2\x2\x1E8U\x3\x2\x2\x2\x1E9\x1EA");
		sb.Append("\a\xE\x2\x2\x1EA\x1EB\a\x30\x2\x2\x1EB\x1EC\x5t;\x2\x1EC\x1ED");
		sb.Append("\a\x35\x2\x2\x1EDW\x3\x2\x2\x2\x1EE\x1EF\a\xE\x2\x2\x1EF\x1F0");
		sb.Append("\a\x31\x2\x2\x1F0\x1F1\x5v<\x2\x1F1\x1F2\a\x35\x2\x2\x1F2Y\x3");
		sb.Append("\x2\x2\x2\x1F3\x1F4\x5\\/\x2\x1F4\x1F5\x5\x1A\xE\x2\x1F5[\x3");
		sb.Append("\x2\x2\x2\x1F6\x1F7\a\x33\x2\x2\x1F7\x1F8\a\x35\x2\x2\x1F8]");
		sb.Append("\x3\x2\x2\x2\x1F9\x1FA\x5`\x31\x2\x1FA\x1FB\x5\x62\x32\x2\x1FB");
		sb.Append("\x1FC\aw\x2\x2\x1FC_\x3\x2\x2\x2\x1FD\x1FE\a\b\x2\x2\x1FE\x1FF");
		sb.Append("\x5\xA2R\x2\x1FF\x201\a\x43\x2\x2\x200\x202\x5\x16\f\x2\x201");
		sb.Append("\x200\x3\x2\x2\x2\x201\x202\x3\x2\x2\x2\x202\x203\x3\x2\x2\x2");
		sb.Append("\x203\x204\a\x44\x2\x2\x204\x61\x3\x2\x2\x2\x205\x207\x5\x64");
		sb.Append("\x33\x2\x206\x205\x3\x2\x2\x2\x207\x20A\x3\x2\x2\x2\x208\x206");
		sb.Append("\x3\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209\x63\x3\x2\x2\x2\x20A");
		sb.Append("\x208\x3\x2\x2\x2\x20B\x20D\x5\x66\x34\x2\x20C\x20B\x3\x2\x2");
		sb.Append("\x2\x20D\x210\x3\x2\x2\x2\x20E\x20C\x3\x2\x2\x2\x20E\x20F\x3");
		sb.Append("\x2\x2\x2\x20F\x211\x3\x2\x2\x2\x210\x20E\x3\x2\x2\x2\x211\x212");
		sb.Append("\x5j\x36\x2\x212\x65\x3\x2\x2\x2\x213\x216\x5h\x35\x2\x214\x216");
		sb.Append("\x5l\x37\x2\x215\x213\x3\x2\x2\x2\x215\x214\x3\x2\x2\x2\x216");
		sb.Append("g\x3\x2\x2\x2\x217\x218\ay\x2\x2\x218i\x3\x2\x2\x2\x219\x21A");
		sb.Append("\t\x2\x2\x2\x21Ak\x3\x2\x2\x2\x21B\x21D\a|\x2\x2\x21C\x21E\x5");
		sb.Append("n\x38\x2\x21D\x21C\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x21F");
		sb.Append("\x3\x2\x2\x2\x21F\x220\a}\x2\x2\x220m\x3\x2\x2\x2\x221\x22E");
		sb.Append("\x5\"\x12\x2\x222\x22E\x5&\x14\x2\x223\x22E\x5.\x18\x2\x224");
		sb.Append("\x22E\x5\x30\x19\x2\x225\x22E\x5\x32\x1A\x2\x226\x22E\x5\x34");
		sb.Append("\x1B\x2\x227\x22E\x5\x38\x1D\x2\x228\x22E\x5:\x1E\x2\x229\x22E");
		sb.Append("\x5J&\x2\x22A\x22E\x5L\'\x2\x22B\x22E\x5P)\x2\x22C\x22E\x5\\");
		sb.Append("/\x2\x22D\x221\x3\x2\x2\x2\x22D\x222\x3\x2\x2\x2\x22D\x223\x3");
		sb.Append("\x2\x2\x2\x22D\x224\x3\x2\x2\x2\x22D\x225\x3\x2\x2\x2\x22D\x226");
		sb.Append("\x3\x2\x2\x2\x22D\x227\x3\x2\x2\x2\x22D\x228\x3\x2\x2\x2\x22D");
		sb.Append("\x229\x3\x2\x2\x2\x22D\x22A\x3\x2\x2\x2\x22D\x22B\x3\x2\x2\x2");
		sb.Append("\x22D\x22C\x3\x2\x2\x2\x22Eo\x3\x2\x2\x2\x22F\x230\aM\x2\x2");
		sb.Append("\x230\x231\x5t;\x2\x231\x232\aN\x2\x2\x232q\x3\x2\x2\x2\x233");
		sb.Append("\x234\t\x3\x2\x2\x234s\x3\x2\x2\x2\x235\x23A\x5v<\x2\x236\x237");
		sb.Append("\a\x37\x2\x2\x237\x239\x5v<\x2\x238\x236\x3\x2\x2\x2\x239\x23C");
		sb.Append("\x3\x2\x2\x2\x23A\x238\x3\x2\x2\x2\x23A\x23B\x3\x2\x2\x2\x23B");
		sb.Append("u\x3\x2\x2\x2\x23C\x23A\x3\x2\x2\x2\x23D\x242\x5x=\x2\x23E\x242");
		sb.Append("\x5|?\x2\x23F\x242\x5\x80\x41\x2\x240\x242\x5\x82\x42\x2\x241");
		sb.Append("\x23D\x3\x2\x2\x2\x241\x23E\x3\x2\x2\x2\x241\x23F\x3\x2\x2\x2");
		sb.Append("\x241\x240\x3\x2\x2\x2\x242w\x3\x2\x2\x2\x243\x244\x5z>\x2\x244");
		sb.Append("\x245\x5\x8CG\x2\x245y\x3\x2\x2\x2\x246\x24A\x5|?\x2\x247\x24A");
		sb.Append("\x5\x80\x41\x2\x248\x24A\x5\x82\x42\x2\x249\x246\x3\x2\x2\x2");
		sb.Append("\x249\x247\x3\x2\x2\x2\x249\x248\x3\x2\x2\x2\x24A{\x3\x2\x2");
		sb.Append("\x2\x24B\x24C\x5~@\x2\x24C\x24D\aQ\x2\x2\x24D}\x3\x2\x2\x2\x24E");
		sb.Append("\x251\x5\x80\x41\x2\x24F\x251\x5\x82\x42\x2\x250\x24E\x3\x2");
		sb.Append("\x2\x2\x250\x24F\x3\x2\x2\x2\x251\x7F\x3\x2\x2\x2\x252\x253");
		sb.Append("\x5\x9EP\x2\x253\x254\x5p\x39\x2\x254\x81\x3\x2\x2\x2\x255\x258");
		sb.Append("\x5\x9EP\x2\x256\x258\x5r:\x2\x257\x255\x3\x2\x2\x2\x257\x256");
		sb.Append("\x3\x2\x2\x2\x258\x83\x3\x2\x2\x2\x259\x25A\a\xF\x2\x2\x25A");
		sb.Append("\x85\x3\x2\x2\x2\x25B\x25E\x5v<\x2\x25C\x25E\x5\x84\x43\x2\x25D");
		sb.Append("\x25B\x3\x2\x2\x2\x25D\x25C\x3\x2\x2\x2\x25E\x87\x3\x2\x2\x2");
		sb.Append("\x25F\x264\x5\x9CO\x2\x260\x261\a\x37\x2\x2\x261\x263\x5\x9C");
		sb.Append("O\x2\x262\x260\x3\x2\x2\x2\x263\x266\x3\x2\x2\x2\x264\x262\x3");
		sb.Append("\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x89\x3\x2\x2\x2\x266\x264");
		sb.Append("\x3\x2\x2\x2\x267\x268\x5\x9CO\x2\x268\x8B\x3\x2\x2\x2\x269");
		sb.Append("\x26B\x5\x8EH\x2\x26A\x269\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2");
		sb.Append("\x26C\x26A\x3\x2\x2\x2\x26C\x26D\x3\x2\x2\x2\x26D\x8D\x3\x2");
		sb.Append("\x2\x2\x26E\x272\a\x45\x2\x2\x26F\x271\a\x37\x2\x2\x270\x26F");
		sb.Append("\x3\x2\x2\x2\x271\x274\x3\x2\x2\x2\x272\x270\x3\x2\x2\x2\x272");
		sb.Append("\x273\x3\x2\x2\x2\x273\x275\x3\x2\x2\x2\x274\x272\x3\x2\x2\x2");
		sb.Append("\x275\x276\a\x46\x2\x2\x276\x8F\x3\x2\x2\x2\x277\x27C\x5\x92");
		sb.Append("J\x2\x278\x279\a\x36\x2\x2\x279\x27B\x5\x92J\x2\x27A\x278\x3");
		sb.Append("\x2\x2\x2\x27B\x27E\x3\x2\x2\x2\x27C\x27A\x3\x2\x2\x2\x27C\x27D");
		sb.Append("\x3\x2\x2\x2\x27D\x91\x3\x2\x2\x2\x27E\x27C\x3\x2\x2\x2\x27F");
		sb.Append("\x281\x5\xA2R\x2\x280\x282\x5\x94K\x2\x281\x280\x3\x2\x2\x2");
		sb.Append("\x281\x282\x3\x2\x2\x2\x282\x93\x3\x2\x2\x2\x283\x287\aM\x2");
		sb.Append("\x2\x284\x286\a\x37\x2\x2\x285\x284\x3\x2\x2\x2\x286\x289\x3");
		sb.Append("\x2\x2\x2\x287\x285\x3\x2\x2\x2\x287\x288\x3\x2\x2\x2\x288\x28A");
		sb.Append("\x3\x2\x2\x2\x289\x287\x3\x2\x2\x2\x28A\x28B\aN\x2\x2\x28B\x95");
		sb.Append("\x3\x2\x2\x2\x28C\x295\a\x43\x2\x2\x28D\x292\x5\x98M\x2\x28E");
		sb.Append("\x28F\a\x37\x2\x2\x28F\x291\x5\x98M\x2\x290\x28E\x3\x2\x2\x2");
		sb.Append("\x291\x294\x3\x2\x2\x2\x292\x290\x3\x2\x2\x2\x292\x293\x3\x2");
		sb.Append("\x2\x2\x293\x296\x3\x2\x2\x2\x294\x292\x3\x2\x2\x2\x295\x28D");
		sb.Append("\x3\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297");
		sb.Append("\x2A6\a\x44\x2\x2\x298\x2A1\a\x43\x2\x2\x299\x29E\x5\x9AN\x2");
		sb.Append("\x29A\x29B\a\x37\x2\x2\x29B\x29D\x5\x9AN\x2\x29C\x29A\x3\x2");
		sb.Append("\x2\x2\x29D\x2A0\x3\x2\x2\x2\x29E\x29C\x3\x2\x2\x2\x29E\x29F");
		sb.Append("\x3\x2\x2\x2\x29F\x2A2\x3\x2\x2\x2\x2A0\x29E\x3\x2\x2\x2\x2A1");
		sb.Append("\x299\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2A3\x3\x2\x2\x2");
		sb.Append("\x2A3\x2A6\a\x44\x2\x2\x2A4\x2A6\x5\x9AN\x2\x2A5\x28C\x3\x2");
		sb.Append("\x2\x2\x2A5\x298\x3\x2\x2\x2\x2A5\x2A4\x3\x2\x2\x2\x2A6\x97");
		sb.Append("\x3\x2\x2\x2\x2A7\x2A8\x5v<\x2\x2A8\x2A9\x5\xA2R\x2\x2A9\x99");
		sb.Append("\x3\x2\x2\x2\x2AA\x2AB\x5\xA2R\x2\x2AB\x9B\x3\x2\x2\x2\x2AC");
		sb.Append("\x2AD\bO\x1\x2\x2AD\x2EC\a.\x2\x2\x2AE\x2EC\x5\xA4S\x2\x2AF");
		sb.Append("\x2B0\a\x32\x2\x2\x2B0\x2B1\a\x43\x2\x2\x2B1\x2B2\a\xF\x2\x2");
		sb.Append("\x2B2\x2EC\a\x44\x2\x2\x2B3\x2B4\a\x32\x2\x2\x2B4\x2B5\a\x43");
		sb.Append("\x2\x2\x2B5\x2B6\x5\x90I\x2\x2B6\x2B7\a\x44\x2\x2\x2B7\x2EC");
		sb.Append("\x3\x2\x2\x2\x2B8\x2B9\a\x32\x2\x2\x2B9\x2BA\a\x43\x2\x2\x2BA");
		sb.Append("\x2BB\x5v<\x2\x2BB\x2BC\a\x44\x2\x2\x2BC\x2EC\x3\x2\x2\x2\x2BD");
		sb.Append("\x2BE\a\x33\x2\x2\x2BE\x2BF\a\x43\x2\x2\x2BF\x2C0\x5v<\x2\x2C0");
		sb.Append("\x2C1\a\x44\x2\x2\x2C1\x2EC\x3\x2\x2\x2\x2C2\x2C3\a/\x2\x2\x2C3");
		sb.Append("\x2C4\x5v<\x2\x2C4\x2C6\a\x43\x2\x2\x2C5\x2C7\x5\x88\x45\x2");
		sb.Append("\x2C6\x2C5\x3\x2\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2C8\x3\x2");
		sb.Append("\x2\x2\x2C8\x2C9\a\x44\x2\x2\x2C9\x2EC\x3\x2\x2\x2\x2CA\x2CC");
		sb.Append("\x5\xA2R\x2\x2CB\x2CD\x5p\x39\x2\x2CC\x2CB\x3\x2\x2\x2\x2CC");
		sb.Append("\x2CD\x3\x2\x2\x2\x2CD\x2EC\x3\x2\x2\x2\x2CE\x2CF\a\x17\x2\x2");
		sb.Append("\x2CF\x2D0\a\x43\x2\x2\x2D0\x2D2\x5<\x1F\x2\x2D1\x2D3\x5\x42");
		sb.Append("\"\x2\x2D2\x2D1\x3\x2\x2\x2\x2D2\x2D3\x3\x2\x2\x2\x2D3\x2D4");
		sb.Append("\x3\x2\x2\x2\x2D4\x2D5\a\x44\x2\x2\x2D5\x2EC\x3\x2\x2\x2\x2D6");
		sb.Append("\x2D7\a\x43\x2\x2\x2D7\x2D8\x5\x9CO\x2\x2D8\x2D9\a\x44\x2\x2");
		sb.Append("\x2D9\x2EC\x3\x2\x2\x2\x2DA\x2DB\x5r:\x2\x2DB\x2DC\a\x36\x2");
		sb.Append("\x2\x2DC\x2DE\x5\xA2R\x2\x2DD\x2DF\x5p\x39\x2\x2DE\x2DD\x3\x2");
		sb.Append("\x2\x2\x2DE\x2DF\x3\x2\x2\x2\x2DF\x2EC\x3\x2\x2\x2\x2E0\x2E1");
		sb.Append("\a\x43\x2\x2\x2E1\x2E2\x5v<\x2\x2E2\x2E3\a\x44\x2\x2\x2E3\x2E4");
		sb.Append("\x5\x9CO\x13\x2E4\x2EC\x3\x2\x2\x2\x2E5\x2E6\t\x4\x2\x2\x2E6");
		sb.Append("\x2EC\x5\x9CO\x12\x2E7\x2E8\x5\x96L\x2\x2E8\x2E9\aK\x2\x2\x2E9");
		sb.Append("\x2EA\x5\x9CO\x3\x2EA\x2EC\x3\x2\x2\x2\x2EB\x2AC\x3\x2\x2\x2");
		sb.Append("\x2EB\x2AE\x3\x2\x2\x2\x2EB\x2AF\x3\x2\x2\x2\x2EB\x2B3\x3\x2");
		sb.Append("\x2\x2\x2EB\x2B8\x3\x2\x2\x2\x2EB\x2BD\x3\x2\x2\x2\x2EB\x2C2");
		sb.Append("\x3\x2\x2\x2\x2EB\x2CA\x3\x2\x2\x2\x2EB\x2CE\x3\x2\x2\x2\x2EB");
		sb.Append("\x2D6\x3\x2\x2\x2\x2EB\x2DA\x3\x2\x2\x2\x2EB\x2E0\x3\x2\x2\x2");
		sb.Append("\x2EB\x2E5\x3\x2\x2\x2\x2EB\x2E7\x3\x2\x2\x2\x2EC\x32C\x3\x2");
		sb.Append("\x2\x2\x2ED\x2EE\f\x10\x2\x2\x2EE\x2EF\t\x5\x2\x2\x2EF\x32B");
		sb.Append("\x5\x9CO\x11\x2F0\x2F1\f\xF\x2\x2\x2F1\x2F2\t\x6\x2\x2\x2F2");
		sb.Append("\x32B\x5\x9CO\x10\x2F3\x2F4\f\xE\x2\x2\x2F4\x2F5\t\a\x2\x2\x2F5");
		sb.Append("\x32B\x5\x9CO\xF\x2F6\x2F7\f\f\x2\x2\x2F7\x2F8\t\b\x2\x2\x2F8");
		sb.Append("\x32B\x5\x9CO\r\x2F9\x2FA\f\v\x2\x2\x2FA\x2FB\a\\\x2\x2\x2FB");
		sb.Append("\x32B\x5\x9CO\f\x2FC\x2FD\f\n\x2\x2\x2FD\x2FE\a]\x2\x2\x2FE");
		sb.Append("\x32B\x5\x9CO\v\x2FF\x300\f\t\x2\x2\x300\x301\a^\x2\x2\x301");
		sb.Append("\x32B\x5\x9CO\n\x302\x303\f\b\x2\x2\x303\x304\a_\x2\x2\x304");
		sb.Append("\x32B\x5\x9CO\t\x305\x306\f\a\x2\x2\x306\x307\a`\x2\x2\x307");
		sb.Append("\x32B\x5\x9CO\b\x308\x309\f\x6\x2\x2\x309\x30A\a\x61\x2\x2\x30A");
		sb.Append("\x32B\x5\x9CO\a\x30B\x30C\f\x5\x2\x2\x30C\x30D\aQ\x2\x2\x30D");
		sb.Append("\x30E\x5\x9CO\x2\x30E\x30F\a\x35\x2\x2\x30F\x310\x5\x9CO\x6");
		sb.Append("\x310\x32B\x3\x2\x2\x2\x311\x312\f\x4\x2\x2\x312\x313\t\t\x2");
		sb.Append("\x2\x313\x32B\x5\x9CO\x5\x314\x315\f\x17\x2\x2\x315\x316\a\x45");
		sb.Append("\x2\x2\x316\x317\x5\x88\x45\x2\x317\x318\a\x46\x2\x2\x318\x32B");
		sb.Append("\x3\x2\x2\x2\x319\x31A\f\x16\x2\x2\x31A\x31C\a\x43\x2\x2\x31B");
		sb.Append("\x31D\x5\x88\x45\x2\x31C\x31B\x3\x2\x2\x2\x31C\x31D\x3\x2\x2");
		sb.Append("\x2\x31D\x31E\x3\x2\x2\x2\x31E\x32B\a\x44\x2\x2\x31F\x320\f");
		sb.Append("\x14\x2\x2\x320\x321\a\x36\x2\x2\x321\x323\x5\xA2R\x2\x322\x324");
		sb.Append("\x5p\x39\x2\x323\x322\x3\x2\x2\x2\x323\x324\x3\x2\x2\x2\x324");
		sb.Append("\x32B\x3\x2\x2\x2\x325\x326\f\x11\x2\x2\x326\x32B\t\n\x2\x2");
		sb.Append("\x327\x328\f\r\x2\x2\x328\x329\t\v\x2\x2\x329\x32B\x5v<\x2\x32A");
		sb.Append("\x2ED\x3\x2\x2\x2\x32A\x2F0\x3\x2\x2\x2\x32A\x2F3\x3\x2\x2\x2");
		sb.Append("\x32A\x2F6\x3\x2\x2\x2\x32A\x2F9\x3\x2\x2\x2\x32A\x2FC\x3\x2");
		sb.Append("\x2\x2\x32A\x2FF\x3\x2\x2\x2\x32A\x302\x3\x2\x2\x2\x32A\x305");
		sb.Append("\x3\x2\x2\x2\x32A\x308\x3\x2\x2\x2\x32A\x30B\x3\x2\x2\x2\x32A");
		sb.Append("\x311\x3\x2\x2\x2\x32A\x314\x3\x2\x2\x2\x32A\x319\x3\x2\x2\x2");
		sb.Append("\x32A\x31F\x3\x2\x2\x2\x32A\x325\x3\x2\x2\x2\x32A\x327\x3\x2");
		sb.Append("\x2\x2\x32B\x32E\x3\x2\x2\x2\x32C\x32A\x3\x2\x2\x2\x32C\x32D");
		sb.Append("\x3\x2\x2\x2\x32D\x9D\x3\x2\x2\x2\x32E\x32C\x3\x2\x2\x2\x32F");
		sb.Append("\x334\x5\xA2R\x2\x330\x331\a\x36\x2\x2\x331\x333\x5\xA2R\x2");
		sb.Append("\x332\x330\x3\x2\x2\x2\x333\x336\x3\x2\x2\x2\x334\x332\x3\x2");
		sb.Append("\x2\x2\x334\x335\x3\x2\x2\x2\x335\x9F\x3\x2\x2\x2\x336\x334");
		sb.Append("\x3\x2\x2\x2\x337\x33C\x5\xA2R\x2\x338\x339\a\x37\x2\x2\x339");
		sb.Append("\x33B\x5\xA2R\x2\x33A\x338\x3\x2\x2\x2\x33B\x33E\x3\x2\x2\x2");
		sb.Append("\x33C\x33A\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\xA1\x3\x2");
		sb.Append("\x2\x2\x33E\x33C\x3\x2\x2\x2\x33F\x340\a\x63\x2\x2\x340\xA3");
		sb.Append("\x3\x2\x2\x2\x341\x349\x5\xA6T\x2\x342\x349\x5\xA8U\x2\x343");
		sb.Append("\x349\x5\xAAV\x2\x344\x349\x5\xB2Z\x2\x345\x349\x5\xBC_\x2\x346");
		sb.Append("\x349\x5\xBE`\x2\x347\x349\x5\xC0\x61\x2\x348\x341\x3\x2\x2");
		sb.Append("\x2\x348\x342\x3\x2\x2\x2\x348\x343\x3\x2\x2\x2\x348\x344\x3");
		sb.Append("\x2\x2\x2\x348\x345\x3\x2\x2\x2\x348\x346\x3\x2\x2\x2\x348\x347");
		sb.Append("\x3\x2\x2\x2\x349\xA5\x3\x2\x2\x2\x34A\x34B\a\x1C\x2\x2\x34B");
		sb.Append("\xA7\x3\x2\x2\x2\x34C\x34D\t\f\x2\x2\x34D\xA9\x3\x2\x2\x2\x34E");
		sb.Append("\x352\x5\xACW\x2\x34F\x352\x5\xAEX\x2\x350\x352\x5\xB0Y\x2\x351");
		sb.Append("\x34E\x3\x2\x2\x2\x351\x34F\x3\x2\x2\x2\x351\x350\x3\x2\x2\x2");
		sb.Append("\x352\xAB\x3\x2\x2\x2\x353\x354\a\x64\x2\x2\x354\xAD\x3\x2\x2");
		sb.Append("\x2\x355\x356\a\x65\x2\x2\x356\xAF\x3\x2\x2\x2\x357\x358\a\x66");
		sb.Append("\x2\x2\x358\xB1\x3\x2\x2\x2\x359\x35E\x5\xB6\\\x2\x35A\x35E");
		sb.Append("\x5\xB4[\x2\x35B\x35E\x5\xB8]\x2\x35C\x35E\x5\xBA^\x2\x35D\x359");
		sb.Append("\x3\x2\x2\x2\x35D\x35A\x3\x2\x2\x2\x35D\x35B\x3\x2\x2\x2\x35D");
		sb.Append("\x35C\x3\x2\x2\x2\x35E\xB3\x3\x2\x2\x2\x35F\x360\ag\x2\x2\x360");
		sb.Append("\xB5\x3\x2\x2\x2\x361\x362\ah\x2\x2\x362\xB7\x3\x2\x2\x2\x363");
		sb.Append("\x364\ai\x2\x2\x364\xB9\x3\x2\x2\x2\x365\x366\aj\x2\x2\x366");
		sb.Append("\xBB\x3\x2\x2\x2\x367\x368\ak\x2\x2\x368\xBD\x3\x2\x2\x2\x369");
		sb.Append("\x36A\t\r\x2\x2\x36A\xBF\x3\x2\x2\x2\x36B\x36C\am\x2\x2\x36C");
		sb.Append("\xC1\x3\x2\x2\x2K\xC7\xCB\xD0\xE8\xEC\xF0\xF5\xFF\x108\x10E");
		sb.Append("\x113\x122\x12B\x132\x137\x13E\x143\x14C\x158\x15C\x17E\x181");
		sb.Append("\x18D\x191\x196\x1A2\x1A4\x1AA\x1AF\x1B2\x1B4\x1C6\x1CA\x1DC");
		sb.Append("\x1DF\x1E3\x201\x208\x20E\x215\x21D\x22D\x23A\x241\x249\x250");
		sb.Append("\x257\x25D\x264\x26C\x272\x27C\x281\x287\x292\x295\x29E\x2A1");
		sb.Append("\x2A5\x2C6\x2CC\x2D2\x2DE\x2EB\x31C\x323\x32A\x32C\x334\x33C");
		sb.Append("\x348\x351\x35D");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace MetaDslx.Languages.MetaGenerator.Syntax.InternalSyntax
