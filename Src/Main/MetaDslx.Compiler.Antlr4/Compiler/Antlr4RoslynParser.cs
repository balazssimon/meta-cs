//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\oig2lb0k.bch\Antlr4RoslynParser.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Compiler.Antlr4Roslyn {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class Antlr4RoslynParser : Parser {
	public const int
		TOKEN_REF=1, RULE_REF=2, LEXER_CHAR_SET=3, LINE_COMMENT=4, INT=5, STRING_LITERAL=6, 
		UNTERMINATED_STRING_LITERAL=7, BEGIN_ARGUMENT=8, BEGIN_ACTION=9, OPTIONS=10, 
		TOKENS=11, CHANNELS=12, IMPORT=13, FRAGMENT=14, LEXER=15, PARSER=16, GRAMMAR=17, 
		PROTECTED=18, PUBLIC=19, PRIVATE=20, RETURNS=21, LOCALS=22, THROWS=23, 
		CATCH=24, FINALLY=25, MODE=26, TRUE=27, FALSE=28, NULL=29, COLON=30, COLONCOLON=31, 
		COMMA=32, SEMI=33, LPAREN=34, RPAREN=35, LBRACE=36, RBRACE=37, RARROW=38, 
		LT=39, GT=40, ASSIGN=41, QUESTION=42, STAR=43, PLUS_ASSIGN=44, PLUS=45, 
		OR=46, DOLLAR=47, RANGE=48, DOT=49, AT=50, POUND=51, NOT=52, ID=53, WS=54, 
		ERRCHAR=55, END_ARGUMENT=56, UNTERMINATED_ARGUMENT=57, ARGUMENT_CONTENT=58, 
		END_ACTION=59, UNTERMINATED_ACTION=60, ACTION_CONTENT=61, UNTERMINATED_CHAR_SET=62, 
		DOC_COMMENT=63, BLOCK_COMMENT=64, DOC_COMMENT_STAR=65;
	public const int
		RULE_grammarSpec = 0, RULE_grammarType = 1, RULE_prequelConstruct = 2, 
		RULE_optionsSpec = 3, RULE_option = 4, RULE_optionValue = 5, RULE_delegateGrammars = 6, 
		RULE_delegateGrammar = 7, RULE_tokensSpec = 8, RULE_channelsSpec = 9, 
		RULE_idList = 10, RULE_annotatedIdentifier = 11, RULE_action = 12, RULE_actionScopeName = 13, 
		RULE_actionBlock = 14, RULE_argActionBlock = 15, RULE_modeSpec = 16, RULE_rules = 17, 
		RULE_ruleSpec = 18, RULE_parserRuleSpec = 19, RULE_exceptionGroup = 20, 
		RULE_exceptionHandler = 21, RULE_finallyClause = 22, RULE_rulePrequel = 23, 
		RULE_ruleReturns = 24, RULE_throwsSpec = 25, RULE_localsSpec = 26, RULE_ruleAction = 27, 
		RULE_ruleModifiers = 28, RULE_ruleModifier = 29, RULE_ruleBlock = 30, 
		RULE_ruleAltList = 31, RULE_labeledAlt = 32, RULE_propertiesBlock = 33, 
		RULE_lexerRuleSpec = 34, RULE_lexerRuleBlock = 35, RULE_lexerAltList = 36, 
		RULE_lexerAlt = 37, RULE_lexerElements = 38, RULE_lexerElement = 39, RULE_labeledLexerElement = 40, 
		RULE_lexerBlock = 41, RULE_lexerCommands = 42, RULE_lexerCommand = 43, 
		RULE_lexerCommandName = 44, RULE_lexerCommandExpr = 45, RULE_altList = 46, 
		RULE_alternative = 47, RULE_element = 48, RULE_labeledElement = 49, RULE_ebnf = 50, 
		RULE_blockSuffix = 51, RULE_ebnfSuffix = 52, RULE_lexerAtom = 53, RULE_atom = 54, 
		RULE_notSet = 55, RULE_blockSet = 56, RULE_setElement = 57, RULE_block = 58, 
		RULE_ruleref = 59, RULE_characterRange = 60, RULE_terminal = 61, RULE_elementOptions = 62, 
		RULE_elementOption = 63, RULE_identifier = 64, RULE_annotation = 65, RULE_annotationBody = 66, 
		RULE_annotationAttributeList = 67, RULE_annotationAttribute = 68, RULE_expressionList = 69, 
		RULE_qualifiedName = 70, RULE_expression = 71, RULE_literal = 72, RULE_annotationIdentifier = 73, 
		RULE_boolLiteral = 74, RULE_nullLiteral = 75;
	public static readonly string[] ruleNames = {
		"grammarSpec", "grammarType", "prequelConstruct", "optionsSpec", "option", 
		"optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec", "channelsSpec", 
		"idList", "annotatedIdentifier", "action", "actionScopeName", "actionBlock", 
		"argActionBlock", "modeSpec", "rules", "ruleSpec", "parserRuleSpec", "exceptionGroup", 
		"exceptionHandler", "finallyClause", "rulePrequel", "ruleReturns", "throwsSpec", 
		"localsSpec", "ruleAction", "ruleModifiers", "ruleModifier", "ruleBlock", 
		"ruleAltList", "labeledAlt", "propertiesBlock", "lexerRuleSpec", "lexerRuleBlock", 
		"lexerAltList", "lexerAlt", "lexerElements", "lexerElement", "labeledLexerElement", 
		"lexerBlock", "lexerCommands", "lexerCommand", "lexerCommandName", "lexerCommandExpr", 
		"altList", "alternative", "element", "labeledElement", "ebnf", "blockSuffix", 
		"ebnfSuffix", "lexerAtom", "atom", "notSet", "blockSet", "setElement", 
		"block", "ruleref", "characterRange", "terminal", "elementOptions", "elementOption", 
		"identifier", "annotation", "annotationBody", "annotationAttributeList", 
		"annotationAttribute", "expressionList", "qualifiedName", "expression", 
		"literal", "annotationIdentifier", "boolLiteral", "nullLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'options'", 
		"'tokens'", "'channels'", "'import'", "'fragment'", "'lexer'", "'parser'", 
		"'grammar'", "'protected'", "'public'", "'private'", "'returns'", "'locals'", 
		"'throws'", "'catch'", "'finally'", "'mode'", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "LINE_COMMENT", "INT", 
		"STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", "BEGIN_ARGUMENT", "BEGIN_ACTION", 
		"OPTIONS", "TOKENS", "CHANNELS", "IMPORT", "FRAGMENT", "LEXER", "PARSER", 
		"GRAMMAR", "PROTECTED", "PUBLIC", "PRIVATE", "RETURNS", "LOCALS", "THROWS", 
		"CATCH", "FINALLY", "MODE", "TRUE", "FALSE", "NULL", "COLON", "COLONCOLON", 
		"COMMA", "SEMI", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RARROW", "LT", 
		"GT", "ASSIGN", "QUESTION", "STAR", "PLUS_ASSIGN", "PLUS", "OR", "DOLLAR", 
		"RANGE", "DOT", "AT", "POUND", "NOT", "ID", "WS", "ERRCHAR", "END_ARGUMENT", 
		"UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "END_ACTION", "UNTERMINATED_ACTION", 
		"ACTION_CONTENT", "UNTERMINATED_CHAR_SET", "DOC_COMMENT", "BLOCK_COMMENT", 
		"DOC_COMMENT_STAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Antlr4RoslynParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Antlr4RoslynParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GrammarSpecContext : ParserRuleContext {
		public GrammarTypeContext grammarType() {
			return GetRuleContext<GrammarTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(Antlr4RoslynParser.Eof, 0); }
		public ITerminalNode[] DOC_COMMENT() { return GetTokens(Antlr4RoslynParser.DOC_COMMENT); }
		public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(Antlr4RoslynParser.DOC_COMMENT, i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PrequelConstructContext[] prequelConstruct() {
			return GetRuleContexts<PrequelConstructContext>();
		}
		public PrequelConstructContext prequelConstruct(int i) {
			return GetRuleContext<PrequelConstructContext>(i);
		}
		public ModeSpecContext[] modeSpec() {
			return GetRuleContexts<ModeSpecContext>();
		}
		public ModeSpecContext modeSpec(int i) {
			return GetRuleContext<ModeSpecContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterGrammarSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitGrammarSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarSpecContext grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 152; Match(DOC_COMMENT);
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 158; annotation();
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 164; grammarType();
			State = 165; identifier();
			State = 166; Match(SEMI);
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << TOKENS) | (1L << CHANNELS) | (1L << IMPORT) | (1L << AT))) != 0)) {
				{
				{
				State = 167; prequelConstruct();
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 173; rules();
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MODE || _la==DOLLAR) {
				{
				{
				State = 174; modeSpec();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 180; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarTypeContext : ParserRuleContext {
		public ITerminalNode LEXER() { return GetToken(Antlr4RoslynParser.LEXER, 0); }
		public ITerminalNode GRAMMAR() { return GetToken(Antlr4RoslynParser.GRAMMAR, 0); }
		public ITerminalNode PARSER() { return GetToken(Antlr4RoslynParser.PARSER, 0); }
		public GrammarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterGrammarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitGrammarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarTypeContext grammarType() {
		GrammarTypeContext _localctx = new GrammarTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			switch (TokenStream.La(1)) {
			case LEXER:
				{
				State = 182; Match(LEXER);
				State = 183; Match(GRAMMAR);
				}
				break;
			case PARSER:
				{
				State = 184; Match(PARSER);
				State = 185; Match(GRAMMAR);
				}
				break;
			case GRAMMAR:
				{
				State = 186; Match(GRAMMAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrequelConstructContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public DelegateGrammarsContext delegateGrammars() {
			return GetRuleContext<DelegateGrammarsContext>(0);
		}
		public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		public ChannelsSpecContext channelsSpec() {
			return GetRuleContext<ChannelsSpecContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public PrequelConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prequelConstruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterPrequelConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitPrequelConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrequelConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrequelConstructContext prequelConstruct() {
		PrequelConstructContext _localctx = new PrequelConstructContext(Context, State);
		EnterRule(_localctx, 4, RULE_prequelConstruct);
		try {
			State = 194;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; optionsSpec();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190; delegateGrammars();
				}
				break;
			case TOKENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191; tokensSpec();
				}
				break;
			case CHANNELS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 192; channelsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 193; action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		public ITerminalNode OPTIONS() { return GetToken(Antlr4RoslynParser.OPTIONS, 0); }
		public ITerminalNode LBRACE() { return GetToken(Antlr4RoslynParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Antlr4RoslynParser.RBRACE, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(OPTIONS);
			State = 197; Match(LBRACE);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 198; option();
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 204; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; identifier();
			State = 207; Match(ASSIGN);
			State = 208; optionValue();
			State = 209; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(Antlr4RoslynParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Antlr4RoslynParser.DOT, i);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_optionValue);
		int _la;
		try {
			State = 221;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211; identifier();
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOT) {
					{
					{
					State = 212; Match(DOT);
					State = 213; identifier();
					}
					}
					State = 218;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case INT:
			case STRING_LITERAL:
			case TRUE:
			case FALSE:
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; literal();
				}
				break;
			case BEGIN_ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220; actionBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarsContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(Antlr4RoslynParser.IMPORT, 0); }
		public DelegateGrammarContext[] delegateGrammar() {
			return GetRuleContexts<DelegateGrammarContext>();
		}
		public DelegateGrammarContext delegateGrammar(int i) {
			return GetRuleContext<DelegateGrammarContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarsContext delegateGrammars() {
		DelegateGrammarsContext _localctx = new DelegateGrammarsContext(Context, State);
		EnterRule(_localctx, 12, RULE_delegateGrammars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(IMPORT);
			State = 224; delegateGrammar();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 225; Match(COMMA);
				State = 226; delegateGrammar();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 232; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarContext delegateGrammar() {
		DelegateGrammarContext _localctx = new DelegateGrammarContext(Context, State);
		EnterRule(_localctx, 14, RULE_delegateGrammar);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; identifier();
				State = 235; Match(ASSIGN);
				State = 236; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		public ITerminalNode TOKENS() { return GetToken(Antlr4RoslynParser.TOKENS, 0); }
		public ITerminalNode LBRACE() { return GetToken(Antlr4RoslynParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Antlr4RoslynParser.RBRACE, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokensSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 16, RULE_tokensSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(TOKENS);
			State = 242; Match(LBRACE);
			State = 244;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << DOLLAR))) != 0)) {
				{
				State = 243; idList();
				}
			}

			State = 246; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelsSpecContext : ParserRuleContext {
		public ITerminalNode CHANNELS() { return GetToken(Antlr4RoslynParser.CHANNELS, 0); }
		public ITerminalNode LBRACE() { return GetToken(Antlr4RoslynParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Antlr4RoslynParser.RBRACE, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public ChannelsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterChannelsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitChannelsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelsSpecContext channelsSpec() {
		ChannelsSpecContext _localctx = new ChannelsSpecContext(Context, State);
		EnterRule(_localctx, 18, RULE_channelsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(CHANNELS);
			State = 249; Match(LBRACE);
			State = 251;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << DOLLAR))) != 0)) {
				{
				State = 250; idList();
				}
			}

			State = 253; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		public AnnotatedIdentifierContext[] annotatedIdentifier() {
			return GetRuleContexts<AnnotatedIdentifierContext>();
		}
		public AnnotatedIdentifierContext annotatedIdentifier(int i) {
			return GetRuleContext<AnnotatedIdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitIdList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 20, RULE_idList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; annotatedIdentifier();
			State = 260;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 256; Match(COMMA);
					State = 257; annotatedIdentifier();
					}
					} 
				}
				State = 262;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 264;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 263; Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotatedIdentifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotatedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotatedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotatedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotatedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotatedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotatedIdentifierContext annotatedIdentifier() {
		AnnotatedIdentifierContext _localctx = new AnnotatedIdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_annotatedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 266; annotation();
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 272; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(Antlr4RoslynParser.AT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(Antlr4RoslynParser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 24, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(AT);
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 275; actionScopeName();
				State = 276; Match(COLONCOLON);
				}
				break;
			}
			State = 280; identifier();
			State = 281; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LEXER() { return GetToken(Antlr4RoslynParser.LEXER, 0); }
		public ITerminalNode PARSER() { return GetToken(Antlr4RoslynParser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionScopeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_actionScopeName);
		try {
			State = 286;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283; identifier();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284; Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 285; Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : ParserRuleContext {
		public ITerminalNode BEGIN_ACTION() { return GetToken(Antlr4RoslynParser.BEGIN_ACTION, 0); }
		public ITerminalNode END_ACTION() { return GetToken(Antlr4RoslynParser.END_ACTION, 0); }
		public ITerminalNode[] ACTION_CONTENT() { return GetTokens(Antlr4RoslynParser.ACTION_CONTENT); }
		public ITerminalNode ACTION_CONTENT(int i) {
			return GetToken(Antlr4RoslynParser.ACTION_CONTENT, i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(BEGIN_ACTION);
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ACTION_CONTENT) {
				{
				{
				State = 289; Match(ACTION_CONTENT);
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 295; Match(END_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgActionBlockContext : ParserRuleContext {
		public ITerminalNode BEGIN_ARGUMENT() { return GetToken(Antlr4RoslynParser.BEGIN_ARGUMENT, 0); }
		public ITerminalNode END_ARGUMENT() { return GetToken(Antlr4RoslynParser.END_ARGUMENT, 0); }
		public ITerminalNode[] ARGUMENT_CONTENT() { return GetTokens(Antlr4RoslynParser.ARGUMENT_CONTENT); }
		public ITerminalNode ARGUMENT_CONTENT(int i) {
			return GetToken(Antlr4RoslynParser.ARGUMENT_CONTENT, i);
		}
		public ArgActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argActionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterArgActionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitArgActionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgActionBlockContext argActionBlock() {
		ArgActionBlockContext _localctx = new ArgActionBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_argActionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(BEGIN_ARGUMENT);
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ARGUMENT_CONTENT) {
				{
				{
				State = 298; Match(ARGUMENT_CONTENT);
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 304; Match(END_ARGUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecContext : ParserRuleContext {
		public ITerminalNode MODE() { return GetToken(Antlr4RoslynParser.MODE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LexerRuleSpecContext[] lexerRuleSpec() {
			return GetRuleContexts<LexerRuleSpecContext>();
		}
		public LexerRuleSpecContext lexerRuleSpec(int i) {
			return GetRuleContext<LexerRuleSpecContext>(i);
		}
		public ModeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterModeSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitModeSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecContext modeSpec() {
		ModeSpecContext _localctx = new ModeSpecContext(Context, State);
		EnterRule(_localctx, 32, RULE_modeSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 306; annotation();
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 312; Match(MODE);
			State = 313; identifier();
			State = 314; Match(SEMI);
			State = 318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 315; lexerRuleSpec();
					}
					} 
				}
				State = 320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleSpecContext[] ruleSpec() {
			return GetRuleContexts<RuleSpecContext>();
		}
		public RuleSpecContext ruleSpec(int i) {
			return GetRuleContext<RuleSpecContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 34, RULE_rules);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 321; ruleSpec();
					}
					} 
				}
				State = 326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSpecContext : ParserRuleContext {
		public ParserRuleSpecContext parserRuleSpec() {
			return GetRuleContext<ParserRuleSpecContext>(0);
		}
		public LexerRuleSpecContext lexerRuleSpec() {
			return GetRuleContext<LexerRuleSpecContext>(0);
		}
		public RuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSpecContext ruleSpec() {
		RuleSpecContext _localctx = new RuleSpecContext(Context, State);
		EnterRule(_localctx, 36, RULE_ruleSpec);
		try {
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327; parserRuleSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328; lexerRuleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleSpecContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(Antlr4RoslynParser.RULE_REF, 0); }
		public ITerminalNode COLON() { return GetToken(Antlr4RoslynParser.COLON, 0); }
		public RuleBlockContext ruleBlock() {
			return GetRuleContext<RuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		public ITerminalNode[] DOC_COMMENT() { return GetTokens(Antlr4RoslynParser.DOC_COMMENT); }
		public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(Antlr4RoslynParser.DOC_COMMENT, i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public RuleModifiersContext ruleModifiers() {
			return GetRuleContext<RuleModifiersContext>(0);
		}
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public RuleReturnsContext ruleReturns() {
			return GetRuleContext<RuleReturnsContext>(0);
		}
		public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		public LocalsSpecContext localsSpec() {
			return GetRuleContext<LocalsSpecContext>(0);
		}
		public RulePrequelContext[] rulePrequel() {
			return GetRuleContexts<RulePrequelContext>();
		}
		public RulePrequelContext rulePrequel(int i) {
			return GetRuleContext<RulePrequelContext>(i);
		}
		public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterParserRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitParserRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleSpecContext parserRuleSpec() {
		ParserRuleSpecContext _localctx = new ParserRuleSpecContext(Context, State);
		EnterRule(_localctx, 38, RULE_parserRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 331; Match(DOC_COMMENT);
				}
				}
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 337; annotation();
				}
				}
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 344;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
				{
				State = 343; ruleModifiers();
				}
			}

			State = 346; Match(RULE_REF);
			State = 348;
			_la = TokenStream.La(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 347; argActionBlock();
				}
			}

			State = 351;
			_la = TokenStream.La(1);
			if (_la==RETURNS) {
				{
				State = 350; ruleReturns();
				}
			}

			State = 354;
			_la = TokenStream.La(1);
			if (_la==THROWS) {
				{
				State = 353; throwsSpec();
				}
			}

			State = 357;
			_la = TokenStream.La(1);
			if (_la==LOCALS) {
				{
				State = 356; localsSpec();
				}
			}

			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OPTIONS || _la==AT) {
				{
				{
				State = 359; rulePrequel();
				}
				}
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 365; Match(COLON);
			State = 366; ruleBlock();
			State = 367; Match(SEMI);
			State = 368; exceptionGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 40, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CATCH) {
				{
				{
				State = 370; exceptionHandler();
				}
				}
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 377;
			_la = TokenStream.La(1);
			if (_la==FINALLY) {
				{
				State = 376; finallyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(Antlr4RoslynParser.CATCH, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 42, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(CATCH);
			State = 380; argActionBlock();
			State = 381; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(Antlr4RoslynParser.FINALLY, 0); }
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 44, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(FINALLY);
			State = 384; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulePrequelContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext ruleAction() {
			return GetRuleContext<RuleActionContext>(0);
		}
		public RulePrequelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulePrequel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRulePrequel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRulePrequel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulePrequel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulePrequelContext rulePrequel() {
		RulePrequelContext _localctx = new RulePrequelContext(Context, State);
		EnterRule(_localctx, 46, RULE_rulePrequel);
		try {
			State = 388;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386; optionsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387; ruleAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleReturnsContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(Antlr4RoslynParser.RETURNS, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public RuleReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleReturns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleReturns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleReturns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleReturnsContext ruleReturns() {
		RuleReturnsContext _localctx = new RuleReturnsContext(Context, State);
		EnterRule(_localctx, 48, RULE_ruleReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(RETURNS);
			State = 391; argActionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		public ITerminalNode THROWS() { return GetToken(Antlr4RoslynParser.THROWS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 50, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(THROWS);
			State = 394; identifier();
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 395; Match(COMMA);
				State = 396; identifier();
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalsSpecContext : ParserRuleContext {
		public ITerminalNode LOCALS() { return GetToken(Antlr4RoslynParser.LOCALS, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public LocalsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLocalsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLocalsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalsSpecContext localsSpec() {
		LocalsSpecContext _localctx = new LocalsSpecContext(Context, State);
		EnterRule(_localctx, 52, RULE_localsSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402; Match(LOCALS);
			State = 403; argActionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(Antlr4RoslynParser.AT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 54, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405; Match(AT);
			State = 406; identifier();
			State = 407; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifiersContext : ParserRuleContext {
		public RuleModifierContext[] ruleModifier() {
			return GetRuleContexts<RuleModifierContext>();
		}
		public RuleModifierContext ruleModifier(int i) {
			return GetRuleContext<RuleModifierContext>(i);
		}
		public RuleModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifiersContext ruleModifiers() {
		RuleModifiersContext _localctx = new RuleModifiersContext(Context, State);
		EnterRule(_localctx, 56, RULE_ruleModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 409; ruleModifier();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(Antlr4RoslynParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(Antlr4RoslynParser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(Antlr4RoslynParser.PROTECTED, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(Antlr4RoslynParser.FRAGMENT, 0); }
		public RuleModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifierContext ruleModifier() {
		RuleModifierContext _localctx = new RuleModifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_ruleModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleBlockContext : ParserRuleContext {
		public RuleAltListContext ruleAltList() {
			return GetRuleContext<RuleAltListContext>(0);
		}
		public RuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleBlockContext ruleBlock() {
		RuleBlockContext _localctx = new RuleBlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_ruleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; ruleAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleAltListContext : ParserRuleContext {
		public LabeledAltContext[] labeledAlt() {
			return GetRuleContexts<LabeledAltContext>();
		}
		public LabeledAltContext labeledAlt(int i) {
			return GetRuleContext<LabeledAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(Antlr4RoslynParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(Antlr4RoslynParser.OR, i);
		}
		public RuleAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleAltListContext ruleAltList() {
		RuleAltListContext _localctx = new RuleAltListContext(Context, State);
		EnterRule(_localctx, 62, RULE_ruleAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; labeledAlt();
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 419; Match(OR);
				State = 420; labeledAlt();
				}
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledAltContext : ParserRuleContext {
		public AlternativeContext alternative() {
			return GetRuleContext<AlternativeContext>(0);
		}
		public ITerminalNode POUND() { return GetToken(Antlr4RoslynParser.POUND, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PropertiesBlockContext propertiesBlock() {
			return GetRuleContext<PropertiesBlockContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LabeledAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLabeledAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLabeledAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledAltContext labeledAlt() {
		LabeledAltContext _localctx = new LabeledAltContext(Context, State);
		EnterRule(_localctx, 64, RULE_labeledAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; alternative();
			State = 435;
			_la = TokenStream.La(1);
			if (_la==POUND) {
				{
				State = 427; Match(POUND);
				State = 428; identifier();
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 429; annotation();
					}
					}
					State = 434;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 438;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 437; propertiesBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesBlockContext : ParserRuleContext {
		public ITerminalNode RARROW() { return GetToken(Antlr4RoslynParser.RARROW, 0); }
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public PropertiesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertiesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterPropertiesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitPropertiesBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertiesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesBlockContext propertiesBlock() {
		PropertiesBlockContext _localctx = new PropertiesBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_propertiesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(RARROW);
			State = 441; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleSpecContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(Antlr4RoslynParser.TOKEN_REF, 0); }
		public ITerminalNode COLON() { return GetToken(Antlr4RoslynParser.COLON, 0); }
		public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Antlr4RoslynParser.SEMI, 0); }
		public ITerminalNode[] DOC_COMMENT() { return GetTokens(Antlr4RoslynParser.DOC_COMMENT); }
		public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(Antlr4RoslynParser.DOC_COMMENT, i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode FRAGMENT() { return GetToken(Antlr4RoslynParser.FRAGMENT, 0); }
		public LexerRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleSpecContext lexerRuleSpec() {
		LexerRuleSpecContext _localctx = new LexerRuleSpecContext(Context, State);
		EnterRule(_localctx, 68, RULE_lexerRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 443; Match(DOC_COMMENT);
				}
				}
				State = 448;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 449; annotation();
				}
				}
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 456;
			_la = TokenStream.La(1);
			if (_la==FRAGMENT) {
				{
				State = 455; Match(FRAGMENT);
				}
			}

			State = 458; Match(TOKEN_REF);
			State = 459; Match(COLON);
			State = 460; lexerRuleBlock();
			State = 461; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockContext lexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
		EnterRule(_localctx, 70, RULE_lexerRuleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; lexerAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltListContext : ParserRuleContext {
		public LexerAltContext[] lexerAlt() {
			return GetRuleContexts<LexerAltContext>();
		}
		public LexerAltContext lexerAlt(int i) {
			return GetRuleContext<LexerAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(Antlr4RoslynParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(Antlr4RoslynParser.OR, i);
		}
		public LexerAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltListContext lexerAltList() {
		LexerAltListContext _localctx = new LexerAltListContext(Context, State);
		EnterRule(_localctx, 72, RULE_lexerAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; lexerAlt();
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 466; Match(OR);
				State = 467; lexerAlt();
				}
				}
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltContext : ParserRuleContext {
		public LexerElementsContext lexerElements() {
			return GetRuleContext<LexerElementsContext>(0);
		}
		public LexerCommandsContext lexerCommands() {
			return GetRuleContext<LexerCommandsContext>(0);
		}
		public LexerAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltContext lexerAlt() {
		LexerAltContext _localctx = new LexerAltContext(Context, State);
		EnterRule(_localctx, 74, RULE_lexerAlt);
		int _la;
		try {
			State = 478;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case LPAREN:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473; lexerElements();
				State = 475;
				_la = TokenStream.La(1);
				if (_la==RARROW) {
					{
					State = 474; lexerCommands();
					}
				}

				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementsContext : ParserRuleContext {
		public LexerElementContext[] lexerElement() {
			return GetRuleContexts<LexerElementContext>();
		}
		public LexerElementContext lexerElement(int i) {
			return GetRuleContext<LexerElementContext>(i);
		}
		public LexerElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementsContext lexerElements() {
		LexerElementsContext _localctx = new LexerElementsContext(Context, State);
		EnterRule(_localctx, 76, RULE_lexerElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 480; lexerElement();
				}
				}
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LEXER_CHAR_SET) | (1L << STRING_LITERAL) | (1L << BEGIN_ACTION) | (1L << LPAREN) | (1L << DOT) | (1L << NOT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementContext : ParserRuleContext {
		public LabeledLexerElementContext labeledLexerElement() {
			return GetRuleContext<LabeledLexerElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ITerminalNode QUESTION() { return GetToken(Antlr4RoslynParser.QUESTION, 0); }
		public LexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementContext lexerElement() {
		LexerElementContext _localctx = new LexerElementContext(Context, State);
		EnterRule(_localctx, 78, RULE_lexerElement);
		int _la;
		try {
			State = 501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485; labeledLexerElement();
				State = 487;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 486; ebnfSuffix();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 489; lexerAtom();
				State = 491;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 490; ebnfSuffix();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 493; lexerBlock();
				State = 495;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 494; ebnfSuffix();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 497; actionBlock();
				State = 499;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 498; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledLexerElementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(Antlr4RoslynParser.PLUS_ASSIGN, 0); }
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledLexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledLexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLabeledLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLabeledLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledLexerElementContext labeledLexerElement() {
		LabeledLexerElementContext _localctx = new LabeledLexerElementContext(Context, State);
		EnterRule(_localctx, 80, RULE_labeledLexerElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; identifier();
			State = 504;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 507;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case DOT:
			case NOT:
				{
				State = 505; lexerAtom();
				}
				break;
			case LPAREN:
				{
				State = 506; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerBlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public LexerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerBlockContext lexerBlock() {
		LexerBlockContext _localctx = new LexerBlockContext(Context, State);
		EnterRule(_localctx, 82, RULE_lexerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509; Match(LPAREN);
			State = 510; lexerAltList();
			State = 511; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandsContext : ParserRuleContext {
		public ITerminalNode RARROW() { return GetToken(Antlr4RoslynParser.RARROW, 0); }
		public LexerCommandContext[] lexerCommand() {
			return GetRuleContexts<LexerCommandContext>();
		}
		public LexerCommandContext lexerCommand(int i) {
			return GetRuleContext<LexerCommandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public LexerCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandsContext lexerCommands() {
		LexerCommandsContext _localctx = new LexerCommandsContext(Context, State);
		EnterRule(_localctx, 84, RULE_lexerCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(RARROW);
			State = 514; lexerCommand();
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 515; Match(COMMA);
				State = 516; lexerCommand();
				}
				}
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandContext : ParserRuleContext {
		public LexerCommandNameContext lexerCommandName() {
			return GetRuleContext<LexerCommandNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public LexerCommandExprContext lexerCommandExpr() {
			return GetRuleContext<LexerCommandExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public LexerCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandContext lexerCommand() {
		LexerCommandContext _localctx = new LexerCommandContext(Context, State);
		EnterRule(_localctx, 86, RULE_lexerCommand);
		try {
			State = 528;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 522; lexerCommandName();
				State = 523; Match(LPAREN);
				State = 524; lexerCommandExpr();
				State = 525; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527; lexerCommandName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(Antlr4RoslynParser.MODE, 0); }
		public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandNameContext lexerCommandName() {
		LexerCommandNameContext _localctx = new LexerCommandNameContext(Context, State);
		EnterRule(_localctx, 88, RULE_lexerCommandName);
		try {
			State = 532;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 530; identifier();
				}
				break;
			case MODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 531; Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandExprContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode INT() { return GetToken(Antlr4RoslynParser.INT, 0); }
		public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandExprContext lexerCommandExpr() {
		LexerCommandExprContext _localctx = new LexerCommandExprContext(Context, State);
		EnterRule(_localctx, 90, RULE_lexerCommandExpr);
		try {
			State = 536;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 534; identifier();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(Antlr4RoslynParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(Antlr4RoslynParser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 92, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; alternative();
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 539; Match(OR);
				State = 540; alternative();
				}
				}
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 94, RULE_alternative);
		int _la;
		try {
			State = 555;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case LPAREN:
			case LT:
			case DOLLAR:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 547;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 546; elementOptions();
					}
				}

				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 549; element();
					}
					}
					State = 552;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << STRING_LITERAL) | (1L << BEGIN_ACTION) | (1L << LPAREN) | (1L << DOLLAR) | (1L << DOT) | (1L << NOT))) != 0) );
				}
				break;
			case SEMI:
			case RPAREN:
			case RARROW:
			case OR:
			case POUND:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public LabeledElementContext labeledElement() {
			return GetRuleContext<LabeledElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ITerminalNode QUESTION() { return GetToken(Antlr4RoslynParser.QUESTION, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 96, RULE_element);
		int _la;
		try {
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 557; annotation();
					}
					}
					State = 562;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 563; labeledElement();
				State = 566;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 564; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case RARROW:
				case OR:
				case DOLLAR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 568; annotation();
					}
					}
					State = 573;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 574; atom();
				State = 577;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 575; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case RARROW:
				case OR:
				case DOLLAR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 579; ebnf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 580; actionBlock();
				State = 582;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 581; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledElementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(Antlr4RoslynParser.PLUS_ASSIGN, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLabeledElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLabeledElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledElementContext labeledElement() {
		LabeledElementContext _localctx = new LabeledElementContext(Context, State);
		EnterRule(_localctx, 98, RULE_labeledElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586; identifier();
			State = 587;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 590;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case STRING_LITERAL:
			case DOT:
			case NOT:
				{
				State = 588; atom();
				}
				break;
			case LPAREN:
				{
				State = 589; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockSuffixContext blockSuffix() {
			return GetRuleContext<BlockSuffixContext>(0);
		}
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 100, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592; block();
			State = 594;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
				{
				State = 593; blockSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSuffixContext : ParserRuleContext {
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public BlockSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterBlockSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitBlockSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSuffixContext blockSuffix() {
		BlockSuffixContext _localctx = new BlockSuffixContext(Context, State);
		EnterRule(_localctx, 102, RULE_blockSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		public ITerminalNode[] QUESTION() { return GetTokens(Antlr4RoslynParser.QUESTION); }
		public ITerminalNode QUESTION(int i) {
			return GetToken(Antlr4RoslynParser.QUESTION, i);
		}
		public ITerminalNode STAR() { return GetToken(Antlr4RoslynParser.STAR, 0); }
		public ITerminalNode PLUS() { return GetToken(Antlr4RoslynParser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnfSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 104, RULE_ebnfSuffix);
		int _la;
		try {
			State = 610;
			switch (TokenStream.La(1)) {
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 598; Match(QUESTION);
				State = 600;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 599; Match(QUESTION);
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 602; Match(STAR);
				State = 604;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 603; Match(QUESTION);
					}
				}

				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 606; Match(PLUS);
				State = 608;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 607; Match(QUESTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAtomContext : ParserRuleContext {
		public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(Antlr4RoslynParser.LEXER_CHAR_SET, 0); }
		public ITerminalNode DOT() { return GetToken(Antlr4RoslynParser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public LexerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLexerAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLexerAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAtomContext lexerAtom() {
		LexerAtomContext _localctx = new LexerAtomContext(Context, State);
		EnterRule(_localctx, 106, RULE_lexerAtom);
		int _la;
		try {
			State = 620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 612; characterRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 613; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 614; notSet();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 615; Match(LEXER_CHAR_SET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 616; Match(DOT);
				State = 618;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 617; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public RulerefContext ruleref() {
			return GetRuleContext<RulerefContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Antlr4RoslynParser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 108, RULE_atom);
		int _la;
		try {
			State = 630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 622; characterRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 623; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 624; ruleref();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 625; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 626; Match(DOT);
				State = 628;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 627; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(Antlr4RoslynParser.NOT, 0); }
		public SetElementContext setElement() {
			return GetRuleContext<SetElementContext>(0);
		}
		public BlockSetContext blockSet() {
			return GetRuleContext<BlockSetContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 110, RULE_notSet);
		try {
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 632; Match(NOT);
				State = 633; setElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 634; Match(NOT);
				State = 635; blockSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSetContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public SetElementContext[] setElement() {
			return GetRuleContexts<SetElementContext>();
		}
		public SetElementContext setElement(int i) {
			return GetRuleContext<SetElementContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public ITerminalNode[] OR() { return GetTokens(Antlr4RoslynParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(Antlr4RoslynParser.OR, i);
		}
		public BlockSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterBlockSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitBlockSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSetContext blockSet() {
		BlockSetContext _localctx = new BlockSetContext(Context, State);
		EnterRule(_localctx, 112, RULE_blockSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; Match(LPAREN);
			State = 639; setElement();
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 640; Match(OR);
				State = 641; setElement();
				}
				}
				State = 646;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 647; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetElementContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(Antlr4RoslynParser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(Antlr4RoslynParser.STRING_LITERAL, 0); }
		public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(Antlr4RoslynParser.LEXER_CHAR_SET, 0); }
		public SetElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterSetElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitSetElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetElementContext setElement() {
		SetElementContext _localctx = new SetElementContext(Context, State);
		EnterRule(_localctx, 114, RULE_setElement);
		int _la;
		try {
			State = 659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 649; Match(TOKEN_REF);
				State = 651;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 650; elementOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 653; Match(STRING_LITERAL);
				State = 655;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 654; elementOptions();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 657; characterRange();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 658; Match(LEXER_CHAR_SET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(Antlr4RoslynParser.COLON, 0); }
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 116, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661; Match(LPAREN);
			State = 672;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << COLON) | (1L << AT))) != 0)) {
				{
				State = 663;
				_la = TokenStream.La(1);
				if (_la==OPTIONS) {
					{
					State = 662; optionsSpec();
					}
				}

				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AT) {
					{
					{
					State = 665; ruleAction();
					}
					}
					State = 670;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 671; Match(COLON);
				}
			}

			State = 674; altList();
			State = 675; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulerefContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(Antlr4RoslynParser.RULE_REF, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public RulerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterRuleref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitRuleref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulerefContext ruleref() {
		RulerefContext _localctx = new RulerefContext(Context, State);
		EnterRule(_localctx, 118, RULE_ruleref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677; Match(RULE_REF);
			State = 679;
			_la = TokenStream.La(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 678; argActionBlock();
				}
			}

			State = 682;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 681; elementOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterRangeContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(Antlr4RoslynParser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(Antlr4RoslynParser.STRING_LITERAL, i);
		}
		public ITerminalNode RANGE() { return GetToken(Antlr4RoslynParser.RANGE, 0); }
		public CharacterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterCharacterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitCharacterRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterRangeContext characterRange() {
		CharacterRangeContext _localctx = new CharacterRangeContext(Context, State);
		EnterRule(_localctx, 120, RULE_characterRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684; Match(STRING_LITERAL);
			State = 685; Match(RANGE);
			State = 686; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(Antlr4RoslynParser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(Antlr4RoslynParser.STRING_LITERAL, 0); }
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 122, RULE_terminal);
		int _la;
		try {
			State = 696;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 688; Match(TOKEN_REF);
				State = 690;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 689; elementOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 692; Match(STRING_LITERAL);
				State = 694;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 693; elementOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(Antlr4RoslynParser.LT, 0); }
		public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		public ITerminalNode GT() { return GetToken(Antlr4RoslynParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 124, RULE_elementOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698; Match(LT);
			State = 699; elementOption();
			State = 704;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 700; Match(COMMA);
				State = 701; elementOption();
				}
				}
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 707; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(Antlr4RoslynParser.STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 126, RULE_elementOption);
		try {
			State = 716;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 709; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 710; identifier();
				State = 711; Match(ASSIGN);
				State = 714;
				switch (TokenStream.La(1)) {
				case TOKEN_REF:
				case RULE_REF:
					{
					State = 712; identifier();
					}
					break;
				case STRING_LITERAL:
					{
					State = 713; Match(STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(Antlr4RoslynParser.RULE_REF, 0); }
		public ITerminalNode TOKEN_REF() { return GetToken(Antlr4RoslynParser.TOKEN_REF, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 128, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			_la = TokenStream.La(1);
			if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(Antlr4RoslynParser.DOLLAR, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 130, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720; Match(DOLLAR);
			State = 721; qualifiedName();
			State = 723;
			_la = TokenStream.La(1);
			if (_la==LPAREN) {
				{
				State = 722; annotationBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationBodyContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AnnotationAttributeListContext annotationAttributeList() {
			return GetRuleContext<AnnotationAttributeListContext>(0);
		}
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(Context, State);
		EnterRule(_localctx, 132, RULE_annotationBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725; Match(LPAREN);
			State = 729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 726; expression();
				}
				break;
			case 2:
				{
				State = 727; expressionList();
				}
				break;
			case 3:
				{
				State = 728; annotationAttributeList();
				}
				break;
			}
			State = 731; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeListContext : ParserRuleContext {
		public AnnotationAttributeContext[] annotationAttribute() {
			return GetRuleContexts<AnnotationAttributeContext>();
		}
		public AnnotationAttributeContext annotationAttribute(int i) {
			return GetRuleContext<AnnotationAttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public AnnotationAttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttributeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttributeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeListContext annotationAttributeList() {
		AnnotationAttributeListContext _localctx = new AnnotationAttributeListContext(Context, State);
		EnterRule(_localctx, 134, RULE_annotationAttributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733; annotationAttribute();
			State = 738;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 734; Match(COMMA);
				State = 735; annotationAttribute();
				}
				}
				State = 740;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeContext : ParserRuleContext {
		public AnnotationIdentifierContext annotationIdentifier() {
			return GetRuleContext<AnnotationIdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(Antlr4RoslynParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AnnotationAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeContext annotationAttribute() {
		AnnotationAttributeContext _localctx = new AnnotationAttributeContext(Context, State);
		EnterRule(_localctx, 136, RULE_annotationAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741; annotationIdentifier();
			State = 742; Match(ASSIGN);
			State = 745;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case INT:
			case STRING_LITERAL:
			case TRUE:
			case FALSE:
			case NULL:
			case ID:
				{
				State = 743; expression();
				}
				break;
			case LPAREN:
				{
				State = 744; expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Antlr4RoslynParser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(Antlr4RoslynParser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Antlr4RoslynParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Antlr4RoslynParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 138, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747; Match(LPAREN);
			State = 748; expression();
			State = 753;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 749; Match(COMMA);
				State = 750; expression();
				}
				}
				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 756; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public AnnotationIdentifierContext[] annotationIdentifier() {
			return GetRuleContexts<AnnotationIdentifierContext>();
		}
		public AnnotationIdentifierContext annotationIdentifier(int i) {
			return GetRuleContext<AnnotationIdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(Antlr4RoslynParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Antlr4RoslynParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 140, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; annotationIdentifier();
			State = 763;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 759; Match(DOT);
					State = 760; annotationIdentifier();
					}
					} 
				}
				State = 765;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 142, RULE_expression);
		try {
			State = 768;
			switch (TokenStream.La(1)) {
			case INT:
			case STRING_LITERAL:
			case TRUE:
			case FALSE:
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 766; literal();
				}
				break;
			case TOKEN_REF:
			case RULE_REF:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 767; qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public ITerminalNode INT() { return GetToken(Antlr4RoslynParser.INT, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(Antlr4RoslynParser.STRING_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 144, RULE_literal);
		try {
			State = 774;
			switch (TokenStream.La(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 770; nullLiteral();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 771; boolLiteral();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 772; Match(INT);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 773; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationIdentifierContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(Antlr4RoslynParser.TOKEN_REF, 0); }
		public ITerminalNode RULE_REF() { return GetToken(Antlr4RoslynParser.RULE_REF, 0); }
		public ITerminalNode ID() { return GetToken(Antlr4RoslynParser.ID, 0); }
		public AnnotationIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterAnnotationIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitAnnotationIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationIdentifierContext annotationIdentifier() {
		AnnotationIdentifierContext _localctx = new AnnotationIdentifierContext(Context, State);
		EnterRule(_localctx, 146, RULE_annotationIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(Antlr4RoslynParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(Antlr4RoslynParser.FALSE, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 148, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			_la = TokenStream.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(Antlr4RoslynParser.NULL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAntlr4RoslynParserListener typedListener = listener as IAntlr4RoslynParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlr4RoslynParserVisitor<TResult> typedVisitor = visitor as IAntlr4RoslynParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 150, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x43");
		sb.Append("\x311\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x3\x2");
		sb.Append("\a\x2\x9C\n\x2\f\x2\xE\x2\x9F\v\x2\x3\x2\a\x2\xA2\n\x2\f\x2");
		sb.Append("\xE\x2\xA5\v\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\xAB\n\x2\f\x2\xE");
		sb.Append("\x2\xAE\v\x2\x3\x2\x3\x2\a\x2\xB2\n\x2\f\x2\xE\x2\xB5\v\x2\x3");
		sb.Append("\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xBE\n\x3\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\xC5\n\x4\x3\x5\x3\x5\x3\x5\a");
		sb.Append("\x5\xCA\n\x5\f\x5\xE\x5\xCD\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\xD9\n\a\f\a\xE\a\xDC\v\a");
		sb.Append("\x3\a\x3\a\x5\a\xE0\n\a\x3\b\x3\b\x3\b\x3\b\a\b\xE6\n\b\f\b");
		sb.Append("\xE\b\xE9\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xF2\n");
		sb.Append("\t\x3\n\x3\n\x3\n\x5\n\xF7\n\n\x3\n\x3\n\x3\v\x3\v\x3\v\x5\v");
		sb.Append("\xFE\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\a\f\x105\n\f\f\f\xE\f\x108");
		sb.Append("\v\f\x3\f\x5\f\x10B\n\f\x3\r\a\r\x10E\n\r\f\r\xE\r\x111\v\r");
		sb.Append("\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x119\n\xE\x3\xE\x3");
		sb.Append("\xE\x3\xE\x3\xF\x3\xF\x3\xF\x5\xF\x121\n\xF\x3\x10\x3\x10\a");
		sb.Append("\x10\x125\n\x10\f\x10\xE\x10\x128\v\x10\x3\x10\x3\x10\x3\x11");
		sb.Append("\x3\x11\a\x11\x12E\n\x11\f\x11\xE\x11\x131\v\x11\x3\x11\x3\x11");
		sb.Append("\x3\x12\a\x12\x136\n\x12\f\x12\xE\x12\x139\v\x12\x3\x12\x3\x12");
		sb.Append("\x3\x12\x3\x12\a\x12\x13F\n\x12\f\x12\xE\x12\x142\v\x12\x3\x13");
		sb.Append("\a\x13\x145\n\x13\f\x13\xE\x13\x148\v\x13\x3\x14\x3\x14\x5\x14");
		sb.Append("\x14C\n\x14\x3\x15\a\x15\x14F\n\x15\f\x15\xE\x15\x152\v\x15");
		sb.Append("\x3\x15\a\x15\x155\n\x15\f\x15\xE\x15\x158\v\x15\x3\x15\x5\x15");
		sb.Append("\x15B\n\x15\x3\x15\x3\x15\x5\x15\x15F\n\x15\x3\x15\x5\x15\x162");
		sb.Append("\n\x15\x3\x15\x5\x15\x165\n\x15\x3\x15\x5\x15\x168\n\x15\x3");
		sb.Append("\x15\a\x15\x16B\n\x15\f\x15\xE\x15\x16E\v\x15\x3\x15\x3\x15");
		sb.Append("\x3\x15\x3\x15\x3\x15\x3\x16\a\x16\x176\n\x16\f\x16\xE\x16\x179");
		sb.Append("\v\x16\x3\x16\x5\x16\x17C\n\x16\x3\x17\x3\x17\x3\x17\x3\x17");
		sb.Append("\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x5\x19\x187\n\x19\x3\x1A");
		sb.Append("\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x190\n\x1B");
		sb.Append("\f\x1B\xE\x1B\x193\v\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D");
		sb.Append("\x3\x1D\x3\x1D\x3\x1E\x6\x1E\x19D\n\x1E\r\x1E\xE\x1E\x19E\x3");
		sb.Append("\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3!\a!\x1A8\n!\f!\xE!\x1AB\v!\x3");
		sb.Append("\"\x3\"\x3\"\x3\"\a\"\x1B1\n\"\f\"\xE\"\x1B4\v\"\x5\"\x1B6\n");
		sb.Append("\"\x3\"\x5\"\x1B9\n\"\x3#\x3#\x3#\x3$\a$\x1BF\n$\f$\xE$\x1C2");
		sb.Append("\v$\x3$\a$\x1C5\n$\f$\xE$\x1C8\v$\x3$\x5$\x1CB\n$\x3$\x3$\x3");
		sb.Append("$\x3$\x3$\x3%\x3%\x3&\x3&\x3&\a&\x1D7\n&\f&\xE&\x1DA\v&\x3\'");
		sb.Append("\x3\'\x5\'\x1DE\n\'\x3\'\x5\'\x1E1\n\'\x3(\x6(\x1E4\n(\r(\xE");
		sb.Append("(\x1E5\x3)\x3)\x5)\x1EA\n)\x3)\x3)\x5)\x1EE\n)\x3)\x3)\x5)\x1F2");
		sb.Append("\n)\x3)\x3)\x5)\x1F6\n)\x5)\x1F8\n)\x3*\x3*\x3*\x3*\x5*\x1FE");
		sb.Append("\n*\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x3,\a,\x208\n,\f,\xE,\x20B\v");
		sb.Append(",\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x213\n-\x3.\x3.\x5.\x217\n.\x3");
		sb.Append("/\x3/\x5/\x21B\n/\x3\x30\x3\x30\x3\x30\a\x30\x220\n\x30\f\x30");
		sb.Append("\xE\x30\x223\v\x30\x3\x31\x5\x31\x226\n\x31\x3\x31\x6\x31\x229");
		sb.Append("\n\x31\r\x31\xE\x31\x22A\x3\x31\x5\x31\x22E\n\x31\x3\x32\a\x32");
		sb.Append("\x231\n\x32\f\x32\xE\x32\x234\v\x32\x3\x32\x3\x32\x3\x32\x5");
		sb.Append("\x32\x239\n\x32\x3\x32\a\x32\x23C\n\x32\f\x32\xE\x32\x23F\v");
		sb.Append("\x32\x3\x32\x3\x32\x3\x32\x5\x32\x244\n\x32\x3\x32\x3\x32\x3");
		sb.Append("\x32\x5\x32\x249\n\x32\x5\x32\x24B\n\x32\x3\x33\x3\x33\x3\x33");
		sb.Append("\x3\x33\x5\x33\x251\n\x33\x3\x34\x3\x34\x5\x34\x255\n\x34\x3");
		sb.Append("\x35\x3\x35\x3\x36\x3\x36\x5\x36\x25B\n\x36\x3\x36\x3\x36\x5");
		sb.Append("\x36\x25F\n\x36\x3\x36\x3\x36\x5\x36\x263\n\x36\x5\x36\x265");
		sb.Append("\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x26D");
		sb.Append("\n\x37\x5\x37\x26F\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38");
		sb.Append("\x3\x38\x5\x38\x277\n\x38\x5\x38\x279\n\x38\x3\x39\x3\x39\x3");
		sb.Append("\x39\x3\x39\x5\x39\x27F\n\x39\x3:\x3:\x3:\x3:\a:\x285\n:\f:");
		sb.Append("\xE:\x288\v:\x3:\x3:\x3;\x3;\x5;\x28E\n;\x3;\x3;\x5;\x292\n");
		sb.Append(";\x3;\x3;\x5;\x296\n;\x3<\x3<\x5<\x29A\n<\x3<\a<\x29D\n<\f<");
		sb.Append("\xE<\x2A0\v<\x3<\x5<\x2A3\n<\x3<\x3<\x3<\x3=\x3=\x5=\x2AA\n");
		sb.Append("=\x3=\x5=\x2AD\n=\x3>\x3>\x3>\x3>\x3?\x3?\x5?\x2B5\n?\x3?\x3");
		sb.Append("?\x5?\x2B9\n?\x5?\x2BB\n?\x3@\x3@\x3@\x3@\a@\x2C1\n@\f@\xE@");
		sb.Append("\x2C4\v@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2CD");
		sb.Append("\n\x41\x5\x41\x2CF\n\x41\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43");
		sb.Append("\x5\x43\x2D6\n\x43\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x2DC\n");
		sb.Append("\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\a\x45\x2E3\n\x45\f\x45");
		sb.Append("\xE\x45\x2E6\v\x45\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x2EC\n");
		sb.Append("\x46\x3G\x3G\x3G\x3G\aG\x2F2\nG\fG\xEG\x2F5\vG\x3G\x3G\x3H\x3");
		sb.Append("H\x3H\aH\x2FC\nH\fH\xEH\x2FF\vH\x3I\x3I\x5I\x303\nI\x3J\x3J");
		sb.Append("\x3J\x3J\x5J\x309\nJ\x3K\x3K\x3L\x3L\x3M\x3M\x3M\x2\x2N\x2\x4");
		sb.Append("\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32");
		sb.Append("\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnp");
		sb.Append("rtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98");
		sb.Append("\x2\a\x4\x2\x10\x10\x14\x16\x4\x2++..\x3\x2\x3\x4\x4\x2\x3\x4");
		sb.Append("\x37\x37\x3\x2\x1D\x1E\x340\x2\x9D\x3\x2\x2\x2\x4\xBD\x3\x2");
		sb.Append("\x2\x2\x6\xC4\x3\x2\x2\x2\b\xC6\x3\x2\x2\x2\n\xD0\x3\x2\x2\x2");
		sb.Append("\f\xDF\x3\x2\x2\x2\xE\xE1\x3\x2\x2\x2\x10\xF1\x3\x2\x2\x2\x12");
		sb.Append("\xF3\x3\x2\x2\x2\x14\xFA\x3\x2\x2\x2\x16\x101\x3\x2\x2\x2\x18");
		sb.Append("\x10F\x3\x2\x2\x2\x1A\x114\x3\x2\x2\x2\x1C\x120\x3\x2\x2\x2");
		sb.Append("\x1E\x122\x3\x2\x2\x2 \x12B\x3\x2\x2\x2\"\x137\x3\x2\x2\x2$");
		sb.Append("\x146\x3\x2\x2\x2&\x14B\x3\x2\x2\x2(\x150\x3\x2\x2\x2*\x177");
		sb.Append("\x3\x2\x2\x2,\x17D\x3\x2\x2\x2.\x181\x3\x2\x2\x2\x30\x186\x3");
		sb.Append("\x2\x2\x2\x32\x188\x3\x2\x2\x2\x34\x18B\x3\x2\x2\x2\x36\x194");
		sb.Append("\x3\x2\x2\x2\x38\x197\x3\x2\x2\x2:\x19C\x3\x2\x2\x2<\x1A0\x3");
		sb.Append("\x2\x2\x2>\x1A2\x3\x2\x2\x2@\x1A4\x3\x2\x2\x2\x42\x1AC\x3\x2");
		sb.Append("\x2\x2\x44\x1BA\x3\x2\x2\x2\x46\x1C0\x3\x2\x2\x2H\x1D1\x3\x2");
		sb.Append("\x2\x2J\x1D3\x3\x2\x2\x2L\x1E0\x3\x2\x2\x2N\x1E3\x3\x2\x2\x2");
		sb.Append("P\x1F7\x3\x2\x2\x2R\x1F9\x3\x2\x2\x2T\x1FF\x3\x2\x2\x2V\x203");
		sb.Append("\x3\x2\x2\x2X\x212\x3\x2\x2\x2Z\x216\x3\x2\x2\x2\\\x21A\x3\x2");
		sb.Append("\x2\x2^\x21C\x3\x2\x2\x2`\x22D\x3\x2\x2\x2\x62\x24A\x3\x2\x2");
		sb.Append("\x2\x64\x24C\x3\x2\x2\x2\x66\x252\x3\x2\x2\x2h\x256\x3\x2\x2");
		sb.Append("\x2j\x264\x3\x2\x2\x2l\x26E\x3\x2\x2\x2n\x278\x3\x2\x2\x2p\x27E");
		sb.Append("\x3\x2\x2\x2r\x280\x3\x2\x2\x2t\x295\x3\x2\x2\x2v\x297\x3\x2");
		sb.Append("\x2\x2x\x2A7\x3\x2\x2\x2z\x2AE\x3\x2\x2\x2|\x2BA\x3\x2\x2\x2");
		sb.Append("~\x2BC\x3\x2\x2\x2\x80\x2CE\x3\x2\x2\x2\x82\x2D0\x3\x2\x2\x2");
		sb.Append("\x84\x2D2\x3\x2\x2\x2\x86\x2D7\x3\x2\x2\x2\x88\x2DF\x3\x2\x2");
		sb.Append("\x2\x8A\x2E7\x3\x2\x2\x2\x8C\x2ED\x3\x2\x2\x2\x8E\x2F8\x3\x2");
		sb.Append("\x2\x2\x90\x302\x3\x2\x2\x2\x92\x308\x3\x2\x2\x2\x94\x30A\x3");
		sb.Append("\x2\x2\x2\x96\x30C\x3\x2\x2\x2\x98\x30E\x3\x2\x2\x2\x9A\x9C");
		sb.Append("\a\x41\x2\x2\x9B\x9A\x3\x2\x2\x2\x9C\x9F\x3\x2\x2\x2\x9D\x9B");
		sb.Append("\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\xA3\x3\x2\x2\x2\x9F\x9D");
		sb.Append("\x3\x2\x2\x2\xA0\xA2\x5\x84\x43\x2\xA1\xA0\x3\x2\x2\x2\xA2\xA5");
		sb.Append("\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA6");
		sb.Append("\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA6\xA7\x5\x4\x3\x2\xA7\xA8");
		sb.Append("\x5\x82\x42\x2\xA8\xAC\a#\x2\x2\xA9\xAB\x5\x6\x4\x2\xAA\xA9");
		sb.Append("\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD");
		sb.Append("\x3\x2\x2\x2\xAD\xAF\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAF\xB3");
		sb.Append("\x5$\x13\x2\xB0\xB2\x5\"\x12\x2\xB1\xB0\x3\x2\x2\x2\xB2\xB5");
		sb.Append("\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB6");
		sb.Append("\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB6\xB7\a\x2\x2\x3\xB7\x3\x3");
		sb.Append("\x2\x2\x2\xB8\xB9\a\x11\x2\x2\xB9\xBE\a\x13\x2\x2\xBA\xBB\a");
		sb.Append("\x12\x2\x2\xBB\xBE\a\x13\x2\x2\xBC\xBE\a\x13\x2\x2\xBD\xB8\x3");
		sb.Append("\x2\x2\x2\xBD\xBA\x3\x2\x2\x2\xBD\xBC\x3\x2\x2\x2\xBE\x5\x3");
		sb.Append("\x2\x2\x2\xBF\xC5\x5\b\x5\x2\xC0\xC5\x5\xE\b\x2\xC1\xC5\x5\x12");
		sb.Append("\n\x2\xC2\xC5\x5\x14\v\x2\xC3\xC5\x5\x1A\xE\x2\xC4\xBF\x3\x2");
		sb.Append("\x2\x2\xC4\xC0\x3\x2\x2\x2\xC4\xC1\x3\x2\x2\x2\xC4\xC2\x3\x2");
		sb.Append("\x2\x2\xC4\xC3\x3\x2\x2\x2\xC5\a\x3\x2\x2\x2\xC6\xC7\a\f\x2");
		sb.Append("\x2\xC7\xCB\a&\x2\x2\xC8\xCA\x5\n\x6\x2\xC9\xC8\x3\x2\x2\x2");
		sb.Append("\xCA\xCD\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2");
		sb.Append("\xCC\xCE\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCE\xCF\a\'\x2\x2\xCF");
		sb.Append("\t\x3\x2\x2\x2\xD0\xD1\x5\x82\x42\x2\xD1\xD2\a+\x2\x2\xD2\xD3");
		sb.Append("\x5\f\a\x2\xD3\xD4\a#\x2\x2\xD4\v\x3\x2\x2\x2\xD5\xDA\x5\x82");
		sb.Append("\x42\x2\xD6\xD7\a\x33\x2\x2\xD7\xD9\x5\x82\x42\x2\xD8\xD6\x3");
		sb.Append("\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3");
		sb.Append("\x2\x2\x2\xDB\xE0\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xE0\x5");
		sb.Append("\x92J\x2\xDE\xE0\x5\x1E\x10\x2\xDF\xD5\x3\x2\x2\x2\xDF\xDD\x3");
		sb.Append("\x2\x2\x2\xDF\xDE\x3\x2\x2\x2\xE0\r\x3\x2\x2\x2\xE1\xE2\a\xF");
		sb.Append("\x2\x2\xE2\xE7\x5\x10\t\x2\xE3\xE4\a\"\x2\x2\xE4\xE6\x5\x10");
		sb.Append("\t\x2\xE5\xE3\x3\x2\x2\x2\xE6\xE9\x3\x2\x2\x2\xE7\xE5\x3\x2");
		sb.Append("\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xEA\x3\x2\x2\x2\xE9\xE7\x3\x2");
		sb.Append("\x2\x2\xEA\xEB\a#\x2\x2\xEB\xF\x3\x2\x2\x2\xEC\xED\x5\x82\x42");
		sb.Append("\x2\xED\xEE\a+\x2\x2\xEE\xEF\x5\x82\x42\x2\xEF\xF2\x3\x2\x2");
		sb.Append("\x2\xF0\xF2\x5\x82\x42\x2\xF1\xEC\x3\x2\x2\x2\xF1\xF0\x3\x2");
		sb.Append("\x2\x2\xF2\x11\x3\x2\x2\x2\xF3\xF4\a\r\x2\x2\xF4\xF6\a&\x2\x2");
		sb.Append("\xF5\xF7\x5\x16\f\x2\xF6\xF5\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2");
		sb.Append("\xF7\xF8\x3\x2\x2\x2\xF8\xF9\a\'\x2\x2\xF9\x13\x3\x2\x2\x2\xFA");
		sb.Append("\xFB\a\xE\x2\x2\xFB\xFD\a&\x2\x2\xFC\xFE\x5\x16\f\x2\xFD\xFC");
		sb.Append("\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x100");
		sb.Append("\a\'\x2\x2\x100\x15\x3\x2\x2\x2\x101\x106\x5\x18\r\x2\x102\x103");
		sb.Append("\a\"\x2\x2\x103\x105\x5\x18\r\x2\x104\x102\x3\x2\x2\x2\x105");
		sb.Append("\x108\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2");
		sb.Append("\x107\x10A\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x109\x10B\a\"\x2");
		sb.Append("\x2\x10A\x109\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x17\x3");
		sb.Append("\x2\x2\x2\x10C\x10E\x5\x84\x43\x2\x10D\x10C\x3\x2\x2\x2\x10E");
		sb.Append("\x111\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2");
		sb.Append("\x110\x112\x3\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x112\x113\x5\x82");
		sb.Append("\x42\x2\x113\x19\x3\x2\x2\x2\x114\x118\a\x34\x2\x2\x115\x116");
		sb.Append("\x5\x1C\xF\x2\x116\x117\a!\x2\x2\x117\x119\x3\x2\x2\x2\x118");
		sb.Append("\x115\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2");
		sb.Append("\x11A\x11B\x5\x82\x42\x2\x11B\x11C\x5\x1E\x10\x2\x11C\x1B\x3");
		sb.Append("\x2\x2\x2\x11D\x121\x5\x82\x42\x2\x11E\x121\a\x11\x2\x2\x11F");
		sb.Append("\x121\a\x12\x2\x2\x120\x11D\x3\x2\x2\x2\x120\x11E\x3\x2\x2\x2");
		sb.Append("\x120\x11F\x3\x2\x2\x2\x121\x1D\x3\x2\x2\x2\x122\x126\a\v\x2");
		sb.Append("\x2\x123\x125\a?\x2\x2\x124\x123\x3\x2\x2\x2\x125\x128\x3\x2");
		sb.Append("\x2\x2\x126\x124\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x129");
		sb.Append("\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x129\x12A\a=\x2\x2\x12A\x1F");
		sb.Append("\x3\x2\x2\x2\x12B\x12F\a\n\x2\x2\x12C\x12E\a<\x2\x2\x12D\x12C");
		sb.Append("\x3\x2\x2\x2\x12E\x131\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2\x12F");
		sb.Append("\x130\x3\x2\x2\x2\x130\x132\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2");
		sb.Append("\x132\x133\a:\x2\x2\x133!\x3\x2\x2\x2\x134\x136\x5\x84\x43\x2");
		sb.Append("\x135\x134\x3\x2\x2\x2\x136\x139\x3\x2\x2\x2\x137\x135\x3\x2");
		sb.Append("\x2\x2\x137\x138\x3\x2\x2\x2\x138\x13A\x3\x2\x2\x2\x139\x137");
		sb.Append("\x3\x2\x2\x2\x13A\x13B\a\x1C\x2\x2\x13B\x13C\x5\x82\x42\x2\x13C");
		sb.Append("\x140\a#\x2\x2\x13D\x13F\x5\x46$\x2\x13E\x13D\x3\x2\x2\x2\x13F");
		sb.Append("\x142\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2");
		sb.Append("\x141#\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2\x143\x145\x5&\x14\x2");
		sb.Append("\x144\x143\x3\x2\x2\x2\x145\x148\x3\x2\x2\x2\x146\x144\x3\x2");
		sb.Append("\x2\x2\x146\x147\x3\x2\x2\x2\x147%\x3\x2\x2\x2\x148\x146\x3");
		sb.Append("\x2\x2\x2\x149\x14C\x5(\x15\x2\x14A\x14C\x5\x46$\x2\x14B\x149");
		sb.Append("\x3\x2\x2\x2\x14B\x14A\x3\x2\x2\x2\x14C\'\x3\x2\x2\x2\x14D\x14F");
		sb.Append("\a\x41\x2\x2\x14E\x14D\x3\x2\x2\x2\x14F\x152\x3\x2\x2\x2\x150");
		sb.Append("\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x156\x3\x2\x2\x2");
		sb.Append("\x152\x150\x3\x2\x2\x2\x153\x155\x5\x84\x43\x2\x154\x153\x3");
		sb.Append("\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2\x156\x157");
		sb.Append("\x3\x2\x2\x2\x157\x15A\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2\x159");
		sb.Append("\x15B\x5:\x1E\x2\x15A\x159\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2");
		sb.Append("\x15B\x15C\x3\x2\x2\x2\x15C\x15E\a\x4\x2\x2\x15D\x15F\x5 \x11");
		sb.Append("\x2\x15E\x15D\x3\x2\x2\x2\x15E\x15F\x3\x2\x2\x2\x15F\x161\x3");
		sb.Append("\x2\x2\x2\x160\x162\x5\x32\x1A\x2\x161\x160\x3\x2\x2\x2\x161");
		sb.Append("\x162\x3\x2\x2\x2\x162\x164\x3\x2\x2\x2\x163\x165\x5\x34\x1B");
		sb.Append("\x2\x164\x163\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165\x167\x3");
		sb.Append("\x2\x2\x2\x166\x168\x5\x36\x1C\x2\x167\x166\x3\x2\x2\x2\x167");
		sb.Append("\x168\x3\x2\x2\x2\x168\x16C\x3\x2\x2\x2\x169\x16B\x5\x30\x19");
		sb.Append("\x2\x16A\x169\x3\x2\x2\x2\x16B\x16E\x3\x2\x2\x2\x16C\x16A\x3");
		sb.Append("\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16F\x3\x2\x2\x2\x16E\x16C");
		sb.Append("\x3\x2\x2\x2\x16F\x170\a \x2\x2\x170\x171\x5> \x2\x171\x172");
		sb.Append("\a#\x2\x2\x172\x173\x5*\x16\x2\x173)\x3\x2\x2\x2\x174\x176\x5");
		sb.Append(",\x17\x2\x175\x174\x3\x2\x2\x2\x176\x179\x3\x2\x2\x2\x177\x175");
		sb.Append("\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x17B\x3\x2\x2\x2\x179");
		sb.Append("\x177\x3\x2\x2\x2\x17A\x17C\x5.\x18\x2\x17B\x17A\x3\x2\x2\x2");
		sb.Append("\x17B\x17C\x3\x2\x2\x2\x17C+\x3\x2\x2\x2\x17D\x17E\a\x1A\x2");
		sb.Append("\x2\x17E\x17F\x5 \x11\x2\x17F\x180\x5\x1E\x10\x2\x180-\x3\x2");
		sb.Append("\x2\x2\x181\x182\a\x1B\x2\x2\x182\x183\x5\x1E\x10\x2\x183/\x3");
		sb.Append("\x2\x2\x2\x184\x187\x5\b\x5\x2\x185\x187\x5\x38\x1D\x2\x186");
		sb.Append("\x184\x3\x2\x2\x2\x186\x185\x3\x2\x2\x2\x187\x31\x3\x2\x2\x2");
		sb.Append("\x188\x189\a\x17\x2\x2\x189\x18A\x5 \x11\x2\x18A\x33\x3\x2\x2");
		sb.Append("\x2\x18B\x18C\a\x19\x2\x2\x18C\x191\x5\x82\x42\x2\x18D\x18E");
		sb.Append("\a\"\x2\x2\x18E\x190\x5\x82\x42\x2\x18F\x18D\x3\x2\x2\x2\x190");
		sb.Append("\x193\x3\x2\x2\x2\x191\x18F\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2");
		sb.Append("\x192\x35\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2\x194\x195\a\x18");
		sb.Append("\x2\x2\x195\x196\x5 \x11\x2\x196\x37\x3\x2\x2\x2\x197\x198\a");
		sb.Append("\x34\x2\x2\x198\x199\x5\x82\x42\x2\x199\x19A\x5\x1E\x10\x2\x19A");
		sb.Append("\x39\x3\x2\x2\x2\x19B\x19D\x5<\x1F\x2\x19C\x19B\x3\x2\x2\x2");
		sb.Append("\x19D\x19E\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19E\x19F\x3\x2");
		sb.Append("\x2\x2\x19F;\x3\x2\x2\x2\x1A0\x1A1\t\x2\x2\x2\x1A1=\x3\x2\x2");
		sb.Append("\x2\x1A2\x1A3\x5@!\x2\x1A3?\x3\x2\x2\x2\x1A4\x1A9\x5\x42\"\x2");
		sb.Append("\x1A5\x1A6\a\x30\x2\x2\x1A6\x1A8\x5\x42\"\x2\x1A7\x1A5\x3\x2");
		sb.Append("\x2\x2\x1A8\x1AB\x3\x2\x2\x2\x1A9\x1A7\x3\x2\x2\x2\x1A9\x1AA");
		sb.Append("\x3\x2\x2\x2\x1AA\x41\x3\x2\x2\x2\x1AB\x1A9\x3\x2\x2\x2\x1AC");
		sb.Append("\x1B5\x5`\x31\x2\x1AD\x1AE\a\x35\x2\x2\x1AE\x1B2\x5\x82\x42");
		sb.Append("\x2\x1AF\x1B1\x5\x84\x43\x2\x1B0\x1AF\x3\x2\x2\x2\x1B1\x1B4");
		sb.Append("\x3\x2\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3");
		sb.Append("\x1B6\x3\x2\x2\x2\x1B4\x1B2\x3\x2\x2\x2\x1B5\x1AD\x3\x2\x2\x2");
		sb.Append("\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B8\x3\x2\x2\x2\x1B7\x1B9\x5\x44");
		sb.Append("#\x2\x1B8\x1B7\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x43\x3");
		sb.Append("\x2\x2\x2\x1BA\x1BB\a(\x2\x2\x1BB\x1BC\x5\x1E\x10\x2\x1BC\x45");
		sb.Append("\x3\x2\x2\x2\x1BD\x1BF\a\x41\x2\x2\x1BE\x1BD\x3\x2\x2\x2\x1BF");
		sb.Append("\x1C2\x3\x2\x2\x2\x1C0\x1BE\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2");
		sb.Append("\x1C1\x1C6\x3\x2\x2\x2\x1C2\x1C0\x3\x2\x2\x2\x1C3\x1C5\x5\x84");
		sb.Append("\x43\x2\x1C4\x1C3\x3\x2\x2\x2\x1C5\x1C8\x3\x2\x2\x2\x1C6\x1C4");
		sb.Append("\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2\x2\x1C7\x1CA\x3\x2\x2\x2\x1C8");
		sb.Append("\x1C6\x3\x2\x2\x2\x1C9\x1CB\a\x10\x2\x2\x1CA\x1C9\x3\x2\x2\x2");
		sb.Append("\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC\x1CD\a\x3");
		sb.Append("\x2\x2\x1CD\x1CE\a \x2\x2\x1CE\x1CF\x5H%\x2\x1CF\x1D0\a#\x2");
		sb.Append("\x2\x1D0G\x3\x2\x2\x2\x1D1\x1D2\x5J&\x2\x1D2I\x3\x2\x2\x2\x1D3");
		sb.Append("\x1D8\x5L\'\x2\x1D4\x1D5\a\x30\x2\x2\x1D5\x1D7\x5L\'\x2\x1D6");
		sb.Append("\x1D4\x3\x2\x2\x2\x1D7\x1DA\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2");
		sb.Append("\x1D8\x1D9\x3\x2\x2\x2\x1D9K\x3\x2\x2\x2\x1DA\x1D8\x3\x2\x2");
		sb.Append("\x2\x1DB\x1DD\x5N(\x2\x1DC\x1DE\x5V,\x2\x1DD\x1DC\x3\x2\x2\x2");
		sb.Append("\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1E1\x3\x2\x2\x2\x1DF\x1E1\x3\x2");
		sb.Append("\x2\x2\x1E0\x1DB\x3\x2\x2\x2\x1E0\x1DF\x3\x2\x2\x2\x1E1M\x3");
		sb.Append("\x2\x2\x2\x1E2\x1E4\x5P)\x2\x1E3\x1E2\x3\x2\x2\x2\x1E4\x1E5");
		sb.Append("\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6");
		sb.Append("O\x3\x2\x2\x2\x1E7\x1E9\x5R*\x2\x1E8\x1EA\x5j\x36\x2\x1E9\x1E8");
		sb.Append("\x3\x2\x2\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA\x1F8\x3\x2\x2\x2\x1EB");
		sb.Append("\x1ED\x5l\x37\x2\x1EC\x1EE\x5j\x36\x2\x1ED\x1EC\x3\x2\x2\x2");
		sb.Append("\x1ED\x1EE\x3\x2\x2\x2\x1EE\x1F8\x3\x2\x2\x2\x1EF\x1F1\x5T+");
		sb.Append("\x2\x1F0\x1F2\x5j\x36\x2\x1F1\x1F0\x3\x2\x2\x2\x1F1\x1F2\x3");
		sb.Append("\x2\x2\x2\x1F2\x1F8\x3\x2\x2\x2\x1F3\x1F5\x5\x1E\x10\x2\x1F4");
		sb.Append("\x1F6\a,\x2\x2\x1F5\x1F4\x3\x2\x2\x2\x1F5\x1F6\x3\x2\x2\x2\x1F6");
		sb.Append("\x1F8\x3\x2\x2\x2\x1F7\x1E7\x3\x2\x2\x2\x1F7\x1EB\x3\x2\x2\x2");
		sb.Append("\x1F7\x1EF\x3\x2\x2\x2\x1F7\x1F3\x3\x2\x2\x2\x1F8Q\x3\x2\x2");
		sb.Append("\x2\x1F9\x1FA\x5\x82\x42\x2\x1FA\x1FD\t\x3\x2\x2\x1FB\x1FE\x5");
		sb.Append("l\x37\x2\x1FC\x1FE\x5v<\x2\x1FD\x1FB\x3\x2\x2\x2\x1FD\x1FC\x3");
		sb.Append("\x2\x2\x2\x1FES\x3\x2\x2\x2\x1FF\x200\a$\x2\x2\x200\x201\x5");
		sb.Append("J&\x2\x201\x202\a%\x2\x2\x202U\x3\x2\x2\x2\x203\x204\a(\x2\x2");
		sb.Append("\x204\x209\x5X-\x2\x205\x206\a\"\x2\x2\x206\x208\x5X-\x2\x207");
		sb.Append("\x205\x3\x2\x2\x2\x208\x20B\x3\x2\x2\x2\x209\x207\x3\x2\x2\x2");
		sb.Append("\x209\x20A\x3\x2\x2\x2\x20AW\x3\x2\x2\x2\x20B\x209\x3\x2\x2");
		sb.Append("\x2\x20C\x20D\x5Z.\x2\x20D\x20E\a$\x2\x2\x20E\x20F\x5\\/\x2");
		sb.Append("\x20F\x210\a%\x2\x2\x210\x213\x3\x2\x2\x2\x211\x213\x5Z.\x2");
		sb.Append("\x212\x20C\x3\x2\x2\x2\x212\x211\x3\x2\x2\x2\x213Y\x3\x2\x2");
		sb.Append("\x2\x214\x217\x5\x82\x42\x2\x215\x217\a\x1C\x2\x2\x216\x214");
		sb.Append("\x3\x2\x2\x2\x216\x215\x3\x2\x2\x2\x217[\x3\x2\x2\x2\x218\x21B");
		sb.Append("\x5\x82\x42\x2\x219\x21B\a\a\x2\x2\x21A\x218\x3\x2\x2\x2\x21A");
		sb.Append("\x219\x3\x2\x2\x2\x21B]\x3\x2\x2\x2\x21C\x221\x5`\x31\x2\x21D");
		sb.Append("\x21E\a\x30\x2\x2\x21E\x220\x5`\x31\x2\x21F\x21D\x3\x2\x2\x2");
		sb.Append("\x220\x223\x3\x2\x2\x2\x221\x21F\x3\x2\x2\x2\x221\x222\x3\x2");
		sb.Append("\x2\x2\x222_\x3\x2\x2\x2\x223\x221\x3\x2\x2\x2\x224\x226\x5");
		sb.Append("~@\x2\x225\x224\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x228");
		sb.Append("\x3\x2\x2\x2\x227\x229\x5\x62\x32\x2\x228\x227\x3\x2\x2\x2\x229");
		sb.Append("\x22A\x3\x2\x2\x2\x22A\x228\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2");
		sb.Append("\x22B\x22E\x3\x2\x2\x2\x22C\x22E\x3\x2\x2\x2\x22D\x225\x3\x2");
		sb.Append("\x2\x2\x22D\x22C\x3\x2\x2\x2\x22E\x61\x3\x2\x2\x2\x22F\x231");
		sb.Append("\x5\x84\x43\x2\x230\x22F\x3\x2\x2\x2\x231\x234\x3\x2\x2\x2\x232");
		sb.Append("\x230\x3\x2\x2\x2\x232\x233\x3\x2\x2\x2\x233\x235\x3\x2\x2\x2");
		sb.Append("\x234\x232\x3\x2\x2\x2\x235\x238\x5\x64\x33\x2\x236\x239\x5");
		sb.Append("j\x36\x2\x237\x239\x3\x2\x2\x2\x238\x236\x3\x2\x2\x2\x238\x237");
		sb.Append("\x3\x2\x2\x2\x239\x24B\x3\x2\x2\x2\x23A\x23C\x5\x84\x43\x2\x23B");
		sb.Append("\x23A\x3\x2\x2\x2\x23C\x23F\x3\x2\x2\x2\x23D\x23B\x3\x2\x2\x2");
		sb.Append("\x23D\x23E\x3\x2\x2\x2\x23E\x240\x3\x2\x2\x2\x23F\x23D\x3\x2");
		sb.Append("\x2\x2\x240\x243\x5n\x38\x2\x241\x244\x5j\x36\x2\x242\x244\x3");
		sb.Append("\x2\x2\x2\x243\x241\x3\x2\x2\x2\x243\x242\x3\x2\x2\x2\x244\x24B");
		sb.Append("\x3\x2\x2\x2\x245\x24B\x5\x66\x34\x2\x246\x248\x5\x1E\x10\x2");
		sb.Append("\x247\x249\a,\x2\x2\x248\x247\x3\x2\x2\x2\x248\x249\x3\x2\x2");
		sb.Append("\x2\x249\x24B\x3\x2\x2\x2\x24A\x232\x3\x2\x2\x2\x24A\x23D\x3");
		sb.Append("\x2\x2\x2\x24A\x245\x3\x2\x2\x2\x24A\x246\x3\x2\x2\x2\x24B\x63");
		sb.Append("\x3\x2\x2\x2\x24C\x24D\x5\x82\x42\x2\x24D\x250\t\x3\x2\x2\x24E");
		sb.Append("\x251\x5n\x38\x2\x24F\x251\x5v<\x2\x250\x24E\x3\x2\x2\x2\x250");
		sb.Append("\x24F\x3\x2\x2\x2\x251\x65\x3\x2\x2\x2\x252\x254\x5v<\x2\x253");
		sb.Append("\x255\x5h\x35\x2\x254\x253\x3\x2\x2\x2\x254\x255\x3\x2\x2\x2");
		sb.Append("\x255g\x3\x2\x2\x2\x256\x257\x5j\x36\x2\x257i\x3\x2\x2\x2\x258");
		sb.Append("\x25A\a,\x2\x2\x259\x25B\a,\x2\x2\x25A\x259\x3\x2\x2\x2\x25A");
		sb.Append("\x25B\x3\x2\x2\x2\x25B\x265\x3\x2\x2\x2\x25C\x25E\a-\x2\x2\x25D");
		sb.Append("\x25F\a,\x2\x2\x25E\x25D\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F");
		sb.Append("\x265\x3\x2\x2\x2\x260\x262\a/\x2\x2\x261\x263\a,\x2\x2\x262");
		sb.Append("\x261\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x265\x3\x2\x2\x2");
		sb.Append("\x264\x258\x3\x2\x2\x2\x264\x25C\x3\x2\x2\x2\x264\x260\x3\x2");
		sb.Append("\x2\x2\x265k\x3\x2\x2\x2\x266\x26F\x5z>\x2\x267\x26F\x5|?\x2");
		sb.Append("\x268\x26F\x5p\x39\x2\x269\x26F\a\x5\x2\x2\x26A\x26C\a\x33\x2");
		sb.Append("\x2\x26B\x26D\x5~@\x2\x26C\x26B\x3\x2\x2\x2\x26C\x26D\x3\x2");
		sb.Append("\x2\x2\x26D\x26F\x3\x2\x2\x2\x26E\x266\x3\x2\x2\x2\x26E\x267");
		sb.Append("\x3\x2\x2\x2\x26E\x268\x3\x2\x2\x2\x26E\x269\x3\x2\x2\x2\x26E");
		sb.Append("\x26A\x3\x2\x2\x2\x26Fm\x3\x2\x2\x2\x270\x279\x5z>\x2\x271\x279");
		sb.Append("\x5|?\x2\x272\x279\x5x=\x2\x273\x279\x5p\x39\x2\x274\x276\a");
		sb.Append("\x33\x2\x2\x275\x277\x5~@\x2\x276\x275\x3\x2\x2\x2\x276\x277");
		sb.Append("\x3\x2\x2\x2\x277\x279\x3\x2\x2\x2\x278\x270\x3\x2\x2\x2\x278");
		sb.Append("\x271\x3\x2\x2\x2\x278\x272\x3\x2\x2\x2\x278\x273\x3\x2\x2\x2");
		sb.Append("\x278\x274\x3\x2\x2\x2\x279o\x3\x2\x2\x2\x27A\x27B\a\x36\x2");
		sb.Append("\x2\x27B\x27F\x5t;\x2\x27C\x27D\a\x36\x2\x2\x27D\x27F\x5r:\x2");
		sb.Append("\x27E\x27A\x3\x2\x2\x2\x27E\x27C\x3\x2\x2\x2\x27Fq\x3\x2\x2");
		sb.Append("\x2\x280\x281\a$\x2\x2\x281\x286\x5t;\x2\x282\x283\a\x30\x2");
		sb.Append("\x2\x283\x285\x5t;\x2\x284\x282\x3\x2\x2\x2\x285\x288\x3\x2");
		sb.Append("\x2\x2\x286\x284\x3\x2\x2\x2\x286\x287\x3\x2\x2\x2\x287\x289");
		sb.Append("\x3\x2\x2\x2\x288\x286\x3\x2\x2\x2\x289\x28A\a%\x2\x2\x28As");
		sb.Append("\x3\x2\x2\x2\x28B\x28D\a\x3\x2\x2\x28C\x28E\x5~@\x2\x28D\x28C");
		sb.Append("\x3\x2\x2\x2\x28D\x28E\x3\x2\x2\x2\x28E\x296\x3\x2\x2\x2\x28F");
		sb.Append("\x291\a\b\x2\x2\x290\x292\x5~@\x2\x291\x290\x3\x2\x2\x2\x291");
		sb.Append("\x292\x3\x2\x2\x2\x292\x296\x3\x2\x2\x2\x293\x296\x5z>\x2\x294");
		sb.Append("\x296\a\x5\x2\x2\x295\x28B\x3\x2\x2\x2\x295\x28F\x3\x2\x2\x2");
		sb.Append("\x295\x293\x3\x2\x2\x2\x295\x294\x3\x2\x2\x2\x296u\x3\x2\x2");
		sb.Append("\x2\x297\x2A2\a$\x2\x2\x298\x29A\x5\b\x5\x2\x299\x298\x3\x2");
		sb.Append("\x2\x2\x299\x29A\x3\x2\x2\x2\x29A\x29E\x3\x2\x2\x2\x29B\x29D");
		sb.Append("\x5\x38\x1D\x2\x29C\x29B\x3\x2\x2\x2\x29D\x2A0\x3\x2\x2\x2\x29E");
		sb.Append("\x29C\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A1\x3\x2\x2\x2");
		sb.Append("\x2A0\x29E\x3\x2\x2\x2\x2A1\x2A3\a \x2\x2\x2A2\x299\x3\x2\x2");
		sb.Append("\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2A5\x5");
		sb.Append("^\x30\x2\x2A5\x2A6\a%\x2\x2\x2A6w\x3\x2\x2\x2\x2A7\x2A9\a\x4");
		sb.Append("\x2\x2\x2A8\x2AA\x5 \x11\x2\x2A9\x2A8\x3\x2\x2\x2\x2A9\x2AA");
		sb.Append("\x3\x2\x2\x2\x2AA\x2AC\x3\x2\x2\x2\x2AB\x2AD\x5~@\x2\x2AC\x2AB");
		sb.Append("\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2\x2\x2ADy\x3\x2\x2\x2\x2AE\x2AF");
		sb.Append("\a\b\x2\x2\x2AF\x2B0\a\x32\x2\x2\x2B0\x2B1\a\b\x2\x2\x2B1{\x3");
		sb.Append("\x2\x2\x2\x2B2\x2B4\a\x3\x2\x2\x2B3\x2B5\x5~@\x2\x2B4\x2B3\x3");
		sb.Append("\x2\x2\x2\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2BB\x3\x2\x2\x2\x2B6\x2B8");
		sb.Append("\a\b\x2\x2\x2B7\x2B9\x5~@\x2\x2B8\x2B7\x3\x2\x2\x2\x2B8\x2B9");
		sb.Append("\x3\x2\x2\x2\x2B9\x2BB\x3\x2\x2\x2\x2BA\x2B2\x3\x2\x2\x2\x2BA");
		sb.Append("\x2B6\x3\x2\x2\x2\x2BB}\x3\x2\x2\x2\x2BC\x2BD\a)\x2\x2\x2BD");
		sb.Append("\x2C2\x5\x80\x41\x2\x2BE\x2BF\a\"\x2\x2\x2BF\x2C1\x5\x80\x41");
		sb.Append("\x2\x2C0\x2BE\x3\x2\x2\x2\x2C1\x2C4\x3\x2\x2\x2\x2C2\x2C0\x3");
		sb.Append("\x2\x2\x2\x2C2\x2C3\x3\x2\x2\x2\x2C3\x2C5\x3\x2\x2\x2\x2C4\x2C2");
		sb.Append("\x3\x2\x2\x2\x2C5\x2C6\a*\x2\x2\x2C6\x7F\x3\x2\x2\x2\x2C7\x2CF");
		sb.Append("\x5\x82\x42\x2\x2C8\x2C9\x5\x82\x42\x2\x2C9\x2CC\a+\x2\x2\x2CA");
		sb.Append("\x2CD\x5\x82\x42\x2\x2CB\x2CD\a\b\x2\x2\x2CC\x2CA\x3\x2\x2\x2");
		sb.Append("\x2CC\x2CB\x3\x2\x2\x2\x2CD\x2CF\x3\x2\x2\x2\x2CE\x2C7\x3\x2");
		sb.Append("\x2\x2\x2CE\x2C8\x3\x2\x2\x2\x2CF\x81\x3\x2\x2\x2\x2D0\x2D1");
		sb.Append("\t\x4\x2\x2\x2D1\x83\x3\x2\x2\x2\x2D2\x2D3\a\x31\x2\x2\x2D3");
		sb.Append("\x2D5\x5\x8EH\x2\x2D4\x2D6\x5\x86\x44\x2\x2D5\x2D4\x3\x2\x2");
		sb.Append("\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x85\x3\x2\x2\x2\x2D7\x2DB\a$");
		sb.Append("\x2\x2\x2D8\x2DC\x5\x90I\x2\x2D9\x2DC\x5\x8CG\x2\x2DA\x2DC\x5");
		sb.Append("\x88\x45\x2\x2DB\x2D8\x3\x2\x2\x2\x2DB\x2D9\x3\x2\x2\x2\x2DB");
		sb.Append("\x2DA\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD\x2DE\a%\x2\x2\x2DE");
		sb.Append("\x87\x3\x2\x2\x2\x2DF\x2E4\x5\x8A\x46\x2\x2E0\x2E1\a\"\x2\x2");
		sb.Append("\x2E1\x2E3\x5\x8A\x46\x2\x2E2\x2E0\x3\x2\x2\x2\x2E3\x2E6\x3");
		sb.Append("\x2\x2\x2\x2E4\x2E2\x3\x2\x2\x2\x2E4\x2E5\x3\x2\x2\x2\x2E5\x89");
		sb.Append("\x3\x2\x2\x2\x2E6\x2E4\x3\x2\x2\x2\x2E7\x2E8\x5\x94K\x2\x2E8");
		sb.Append("\x2EB\a+\x2\x2\x2E9\x2EC\x5\x90I\x2\x2EA\x2EC\x5\x8CG\x2\x2EB");
		sb.Append("\x2E9\x3\x2\x2\x2\x2EB\x2EA\x3\x2\x2\x2\x2EC\x8B\x3\x2\x2\x2");
		sb.Append("\x2ED\x2EE\a$\x2\x2\x2EE\x2F3\x5\x90I\x2\x2EF\x2F0\a\"\x2\x2");
		sb.Append("\x2F0\x2F2\x5\x90I\x2\x2F1\x2EF\x3\x2\x2\x2\x2F2\x2F5\x3\x2");
		sb.Append("\x2\x2\x2F3\x2F1\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2\x2\x2F4\x2F6");
		sb.Append("\x3\x2\x2\x2\x2F5\x2F3\x3\x2\x2\x2\x2F6\x2F7\a%\x2\x2\x2F7\x8D");
		sb.Append("\x3\x2\x2\x2\x2F8\x2FD\x5\x94K\x2\x2F9\x2FA\a\x33\x2\x2\x2FA");
		sb.Append("\x2FC\x5\x94K\x2\x2FB\x2F9\x3\x2\x2\x2\x2FC\x2FF\x3\x2\x2\x2");
		sb.Append("\x2FD\x2FB\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\x8F\x3\x2");
		sb.Append("\x2\x2\x2FF\x2FD\x3\x2\x2\x2\x300\x303\x5\x92J\x2\x301\x303");
		sb.Append("\x5\x8EH\x2\x302\x300\x3\x2\x2\x2\x302\x301\x3\x2\x2\x2\x303");
		sb.Append("\x91\x3\x2\x2\x2\x304\x309\x5\x98M\x2\x305\x309\x5\x96L\x2\x306");
		sb.Append("\x309\a\a\x2\x2\x307\x309\a\b\x2\x2\x308\x304\x3\x2\x2\x2\x308");
		sb.Append("\x305\x3\x2\x2\x2\x308\x306\x3\x2\x2\x2\x308\x307\x3\x2\x2\x2");
		sb.Append("\x309\x93\x3\x2\x2\x2\x30A\x30B\t\x5\x2\x2\x30B\x95\x3\x2\x2");
		sb.Append("\x2\x30C\x30D\t\x6\x2\x2\x30D\x97\x3\x2\x2\x2\x30E\x30F\a\x1F");
		sb.Append("\x2\x2\x30F\x99\x3\x2\x2\x2h\x9D\xA3\xAC\xB3\xBD\xC4\xCB\xDA");
		sb.Append("\xDF\xE7\xF1\xF6\xFD\x106\x10A\x10F\x118\x120\x126\x12F\x137");
		sb.Append("\x140\x146\x14B\x150\x156\x15A\x15E\x161\x164\x167\x16C\x177");
		sb.Append("\x17B\x186\x191\x19E\x1A9\x1B2\x1B5\x1B8\x1C0\x1C6\x1CA\x1D8");
		sb.Append("\x1DD\x1E0\x1E5\x1E9\x1ED\x1F1\x1F5\x1F7\x1FD\x209\x212\x216");
		sb.Append("\x21A\x221\x225\x22A\x22D\x232\x238\x23D\x243\x248\x24A\x250");
		sb.Append("\x254\x25A\x25E\x262\x264\x26C\x26E\x276\x278\x27E\x286\x28D");
		sb.Append("\x291\x295\x299\x29E\x2A2\x2A9\x2AC\x2B4\x2B8\x2BA\x2C2\x2CC");
		sb.Append("\x2CE\x2D5\x2DB\x2E4\x2EB\x2F3\x2FD\x302\x308");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Compiler.Antlr4Roslyn
