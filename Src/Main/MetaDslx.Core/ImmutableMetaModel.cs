using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using MetaDslx.Core;
using System.Diagnostics;

namespace MetaDslx.Core.Immutable
{
    public static class MetaDescriptor
    {
    	private static global::System.Collections.Generic.List<global::MetaDslx.Core.Immutable.ModelProperty> properties = new global::System.Collections.Generic.List<global::MetaDslx.Core.Immutable.ModelProperty>();
    
        static MetaDescriptor()
        {
            properties.Add(MetaAnnotatedElement.AnnotationsProperty);
            properties.Add(MetaDocumentedElement.DocumentationProperty);
            properties.Add(MetaNamedElement.NameProperty);
            properties.Add(MetaTypedElement.TypeProperty);
            properties.Add(MetaAnnotation.PropertiesProperty);
            properties.Add(MetaAnnotationProperty.ValueProperty);
            properties.Add(MetaNamespace.ParentProperty);
            properties.Add(MetaNamespace.UsingsProperty);
            properties.Add(MetaNamespace.MetaModelProperty);
            properties.Add(MetaNamespace.NamespacesProperty);
            properties.Add(MetaNamespace.DeclarationsProperty);
            properties.Add(MetaDeclaration.NamespaceProperty);
            properties.Add(MetaDeclaration.ModelProperty);
            properties.Add(MetaModel.UriProperty);
            properties.Add(MetaModel.NamespaceProperty);
            properties.Add(MetaCollectionType.KindProperty);
            properties.Add(MetaCollectionType.InnerTypeProperty);
            properties.Add(MetaNullableType.InnerTypeProperty);
            properties.Add(MetaEnum.EnumLiteralsProperty);
            properties.Add(MetaEnum.OperationsProperty);
            properties.Add(MetaEnumLiteral.EnumProperty);
            properties.Add(MetaClass.IsAbstractProperty);
            properties.Add(MetaClass.SuperClassesProperty);
            properties.Add(MetaClass.PropertiesProperty);
            properties.Add(MetaClass.OperationsProperty);
            properties.Add(MetaClass.ConstructorProperty);
            properties.Add(MetaFunctionType.ParameterTypesProperty);
            properties.Add(MetaFunctionType.ReturnTypeProperty);
            properties.Add(MetaFunction.TypeProperty);
            properties.Add(MetaFunction.ParametersProperty);
            properties.Add(MetaFunction.ReturnTypeProperty);
            properties.Add(MetaOperation.ParentProperty);
            properties.Add(MetaConstant.ValueProperty);
            properties.Add(MetaConstructor.ParentProperty);
            properties.Add(MetaConstructor.InitializersProperty);
            properties.Add(MetaParameter.FunctionProperty);
            properties.Add(MetaProperty.KindProperty);
            properties.Add(MetaProperty.ClassProperty);
            properties.Add(MetaProperty.OppositePropertiesProperty);
            properties.Add(MetaProperty.SubsettedPropertiesProperty);
            properties.Add(MetaProperty.SubsettingPropertiesProperty);
            properties.Add(MetaProperty.RedefinedPropertiesProperty);
            properties.Add(MetaProperty.RedefiningPropertiesProperty);
            properties.Add(MetaPropertyInitializer.ConstructorProperty);
            properties.Add(MetaPropertyInitializer.PropertyNameProperty);
            properties.Add(MetaPropertyInitializer.PropertyContextProperty);
            properties.Add(MetaPropertyInitializer.PropertyProperty);
            properties.Add(MetaPropertyInitializer.ValueProperty);
            properties.Add(MetaInheritedPropertyInitializer.ObjectNameProperty);
            properties.Add(MetaInheritedPropertyInitializer.ObjectProperty);
            properties.Add(MetaExpression.NoTypeErrorProperty);
            properties.Add(MetaExpression.ExpectedTypeProperty);
            properties.Add(MetaBracketExpression.ExpressionProperty);
            properties.Add(MetaBoundExpression.UniqueDefinitionProperty);
            properties.Add(MetaBoundExpression.ArgumentsProperty);
            properties.Add(MetaBoundExpression.DefinitionsProperty);
            properties.Add(MetaBoundExpression.DefinitionProperty);
            properties.Add(MetaTypeConversionExpression.TypeReferenceProperty);
            properties.Add(MetaTypeConversionExpression.ExpressionProperty);
            properties.Add(MetaTypeCheckExpression.TypeReferenceProperty);
            properties.Add(MetaTypeCheckExpression.ExpressionProperty);
            properties.Add(MetaTypeOfExpression.TypeReferenceProperty);
            properties.Add(MetaConditionalExpression.ConditionProperty);
            properties.Add(MetaConditionalExpression.BalancedTypeProperty);
            properties.Add(MetaConditionalExpression.ThenProperty);
            properties.Add(MetaConditionalExpression.ElseProperty);
            properties.Add(MetaConstantExpression.ValueProperty);
            properties.Add(MetaIdentifierExpression.NameProperty);
            properties.Add(MetaMemberAccessExpression.ExpressionProperty);
            properties.Add(MetaMemberAccessExpression.NameProperty);
            properties.Add(MetaFunctionCallExpression.ExpressionProperty);
            properties.Add(MetaIndexerExpression.ExpressionProperty);
            properties.Add(MetaNewExpression.TypeReferenceProperty);
            properties.Add(MetaNewExpression.PropertyInitializersProperty);
            properties.Add(MetaNewPropertyInitializer.ParentProperty);
            properties.Add(MetaNewPropertyInitializer.PropertyNameProperty);
            properties.Add(MetaNewPropertyInitializer.ValueProperty);
            properties.Add(MetaNewPropertyInitializer.PropertyProperty);
            properties.Add(MetaNewCollectionExpression.TypeReferenceProperty);
            properties.Add(MetaNewCollectionExpression.ValuesProperty);
            properties.Add(MetaOperatorExpression.NameProperty);
            properties.Add(MetaUnaryExpression.ExpressionProperty);
            properties.Add(MetaBinaryExpression.LeftProperty);
            properties.Add(MetaBinaryExpression.RightProperty);
    
            foreach (var property in properties)
            {
                property.Init();
            }
        }
    
        public static void Init()
        {
        }
    
    	public const string Uri = "http://metadslx.core/1.0";
    
        
        public static class MetaAnnotatedElement
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAnnotatedElement;*/ }
            }
        
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty AnnotationsProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Annotations", typeof(MetaDescriptor.MetaAnnotatedElement),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaAnnotation), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation>), typeof(global::MetaDslx.Core.Immutable.MetaAnnotatedElement)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaAnnotationBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)));
            
        }
        
        public static class MetaDocumentedElement
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaDocumentedElement;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty DocumentationProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Documentation", typeof(MetaDescriptor.MetaDocumentedElement),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaDocumentedElement)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)));
            
        }
        
        public static class MetaNamedElement
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNamedElement;*/ }
            }
        
            [Name]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty NameProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Name", typeof(MetaDescriptor.MetaNamedElement),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaNamedElement)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)));
            
        }
        
        public static class MetaTypedElement
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypedElement;*/ }
            }
        
            [Type]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty TypeProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Type", typeof(MetaDescriptor.MetaTypedElement),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), null, typeof(global::MetaDslx.Core.Immutable.MetaTypedElement)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)));
            
        }
        
        public static class MetaType
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaType;*/ }
            }
        
        }
        
        public static class MetaAnnotation
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAnnotation;*/ }
            }
        
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty PropertiesProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Properties", typeof(MetaDescriptor.MetaAnnotation),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaAnnotationProperty), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationProperty>), typeof(global::MetaDslx.Core.Immutable.MetaAnnotation)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaAnnotationBuilder)));
            
        }
        
        public static class MetaAnnotationProperty
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAnnotationProperty;*/ }
            }
        
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ValueProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Value", typeof(MetaDescriptor.MetaAnnotationProperty),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaAnnotationProperty)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder)));
            
        }
        
        public static class MetaNamespace
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNamespace;*/ }
            }
        
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaNamespace), "Namespaces")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ParentProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Parent", typeof(MetaDescriptor.MetaNamespace),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNamespace), null, typeof(global::MetaDslx.Core.Immutable.MetaNamespace)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNamespaceBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaNamespaceBuilder)));
            
            [ImportedScope]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty UsingsProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Usings", typeof(MetaDescriptor.MetaNamespace),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNamespace), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNamespace>), typeof(global::MetaDslx.Core.Immutable.MetaNamespace)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNamespaceBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaNamespaceBuilder)));
            
            [ContainmentAttribute]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaModel), "Namespace")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty MetaModelProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("MetaModel", typeof(MetaDescriptor.MetaNamespace),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaModel), null, typeof(global::MetaDslx.Core.Immutable.MetaNamespace)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaModelBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaNamespaceBuilder)));
            
            [ScopeEntry]
            [ContainmentAttribute]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaNamespace), "Parent")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty NamespacesProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Namespaces", typeof(MetaDescriptor.MetaNamespace),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNamespace), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNamespace>), typeof(global::MetaDslx.Core.Immutable.MetaNamespace)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNamespaceBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaNamespaceBuilder)));
            
            [ScopeEntry]
            [ContainmentAttribute]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaDeclaration), "Namespace")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty DeclarationsProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Declarations", typeof(MetaDescriptor.MetaNamespace),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaDeclaration), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaDeclaration>), typeof(global::MetaDslx.Core.Immutable.MetaNamespace)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaDeclarationBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaDeclarationBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaNamespaceBuilder)));
            
        }
        
        public static class MetaDeclaration
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaDeclaration;*/ }
            }
        
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaNamespace), "Declarations")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty NamespaceProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Namespace", typeof(MetaDescriptor.MetaDeclaration),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNamespace), null, typeof(global::MetaDslx.Core.Immutable.MetaDeclaration)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNamespaceBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaDeclarationBuilder)));
            
            [ReadonlyAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ModelProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Model", typeof(MetaDescriptor.MetaDeclaration),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaModel), null, typeof(global::MetaDslx.Core.Immutable.MetaDeclaration)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaModelBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaDeclarationBuilder)));
            
        }
        
        public static class MetaModel
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaModel;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty UriProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Uri", typeof(MetaDescriptor.MetaModel),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaModel)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaModelBuilder)));
            
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaNamespace), "MetaModel")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty NamespaceProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Namespace", typeof(MetaDescriptor.MetaModel),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNamespace), null, typeof(global::MetaDslx.Core.Immutable.MetaModel)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNamespaceBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaModelBuilder)));
            
        }
        
        public static class MetaCollectionType
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaCollectionType;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty KindProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Kind", typeof(MetaDescriptor.MetaCollectionType),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaCollectionKind), null, typeof(global::MetaDslx.Core.Immutable.MetaCollectionType)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaCollectionKind), null, typeof(global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder)));
            
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty InnerTypeProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("InnerType", typeof(MetaDescriptor.MetaCollectionType),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), null, typeof(global::MetaDslx.Core.Immutable.MetaCollectionType)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder)));
            
        }
        
        public static class MetaNullableType
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNullableType;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty InnerTypeProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("InnerType", typeof(MetaDescriptor.MetaNullableType),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), null, typeof(global::MetaDslx.Core.Immutable.MetaNullableType)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaNullableTypeBuilder)));
            
        }
        
        public static class MetaPrimitiveType
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPrimitiveType;*/ }
            }
        
        }
        
        public static class MetaEnum
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaEnum;*/ }
            }
        
            [ScopeEntry]
            [ContainmentAttribute]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaEnumLiteral), "Enum")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty EnumLiteralsProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("EnumLiterals", typeof(MetaDescriptor.MetaEnum),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaEnumLiteral), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaEnumLiteral>), typeof(global::MetaDslx.Core.Immutable.MetaEnum)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaEnumBuilder)));
            
            [ScopeEntry]
            [ContainmentAttribute]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaOperation), "Parent")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty OperationsProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Operations", typeof(MetaDescriptor.MetaEnum),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaOperation), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation>), typeof(global::MetaDslx.Core.Immutable.MetaEnum)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaOperationBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaOperationBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaEnumBuilder)));
            
        }
        
        public static class MetaEnumLiteral
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaEnumLiteral;*/ }
            }
        
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaEnum), "EnumLiterals")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty EnumProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Enum", typeof(MetaDescriptor.MetaEnumLiteral),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaEnum), null, typeof(global::MetaDslx.Core.Immutable.MetaEnumLiteral)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaEnumBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder)));
            
        }
        
        public static class MetaClass
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass _MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaClass;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty IsAbstractProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("IsAbstract", typeof(MetaDescriptor.MetaClass),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(bool), null, typeof(global::MetaDslx.Core.Immutable.MetaClass)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(bool), null, typeof(global::MetaDslx.Core.Immutable.MetaClassBuilder)));
            
            [InheritedScope]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty SuperClassesProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("SuperClasses", typeof(MetaDescriptor.MetaClass),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaClass), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaClass>), typeof(global::MetaDslx.Core.Immutable.MetaClass)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaClassBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaClassBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaClassBuilder)));
            
            [ScopeEntry]
            [ContainmentAttribute]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaProperty), "Class")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty PropertiesProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Properties", typeof(MetaDescriptor.MetaClass),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaProperty), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty>), typeof(global::MetaDslx.Core.Immutable.MetaClass)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaClassBuilder)));
            
            [ScopeEntry]
            [ContainmentAttribute]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaOperation), "Parent")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty OperationsProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Operations", typeof(MetaDescriptor.MetaClass),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaOperation), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation>), typeof(global::MetaDslx.Core.Immutable.MetaClass)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaOperationBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaOperationBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaClassBuilder)));
            
            [ContainmentAttribute]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaConstructor), "Parent")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ConstructorProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Constructor", typeof(MetaDescriptor.MetaClass),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaConstructor), null, typeof(global::MetaDslx.Core.Immutable.MetaClass)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaConstructorBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaClassBuilder)));
            
        }
        
        public static class MetaFunctionType
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaFunctionType;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ParameterTypesProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("ParameterTypes", typeof(MetaDescriptor.MetaFunctionType),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaType>), typeof(global::MetaDslx.Core.Immutable.MetaFunctionType)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaTypeBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder)));
            
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ReturnTypeProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("ReturnType", typeof(MetaDescriptor.MetaFunctionType),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), null, typeof(global::MetaDslx.Core.Immutable.MetaFunctionType)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder)));
            
        }
        
        public static class MetaFunction
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaFunction;*/ }
            }
        
            [Type]
            [ReadonlyAttribute]
            [RedefinesAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaTypedElement), "Type")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty TypeProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Type", typeof(MetaDescriptor.MetaFunction),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaFunctionType), null, typeof(global::MetaDslx.Core.Immutable.MetaFunction)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaFunctionBuilder)));
            
            [ContainmentAttribute]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaParameter), "Function")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ParametersProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Parameters", typeof(MetaDescriptor.MetaFunction),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaParameter), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaParameter>), typeof(global::MetaDslx.Core.Immutable.MetaFunction)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaParameterBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaParameterBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaFunctionBuilder)));
            
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ReturnTypeProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("ReturnType", typeof(MetaDescriptor.MetaFunction),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), null, typeof(global::MetaDslx.Core.Immutable.MetaFunction)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaFunctionBuilder)));
            
        }
        
        public static class MetaGlobalFunction
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaGlobalFunction;*/ }
            }
        
        }
        
        public static class MetaOperation
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOperation;*/ }
            }
        
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaClass), "Operations")]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaEnum), "Operations")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ParentProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Parent", typeof(MetaDescriptor.MetaOperation),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), null, typeof(global::MetaDslx.Core.Immutable.MetaOperation)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaOperationBuilder)));
            
        }
        
        public static class MetaConstant
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaConstant;*/ }
            }
        
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ValueProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Value", typeof(MetaDescriptor.MetaConstant),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaConstant)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaConstantBuilder)));
            
        }
        
        public static class MetaConstructor
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaConstructor;*/ }
            }
        
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaClass), "Constructor")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ParentProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Parent", typeof(MetaDescriptor.MetaConstructor),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaClass), null, typeof(global::MetaDslx.Core.Immutable.MetaConstructor)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaClassBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaConstructorBuilder)));
            
            [ContainmentAttribute]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaPropertyInitializer), "Constructor")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty InitializersProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Initializers", typeof(MetaDescriptor.MetaConstructor),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializer), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyInitializer>), typeof(global::MetaDslx.Core.Immutable.MetaConstructor)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaConstructorBuilder)));
            
        }
        
        public static class MetaParameter
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaParameter;*/ }
            }
        
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaFunction), "Parameters")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty FunctionProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Function", typeof(MetaDescriptor.MetaParameter),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaFunction), null, typeof(global::MetaDslx.Core.Immutable.MetaParameter)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaFunctionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaParameterBuilder)));
            
        }
        
        public static class MetaProperty
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaProperty;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty KindProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Kind", typeof(MetaDescriptor.MetaProperty),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyKind), null, typeof(global::MetaDslx.Core.Immutable.MetaProperty)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyKind), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder)));
            
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaClass), "Properties")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ClassProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Class", typeof(MetaDescriptor.MetaProperty),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaClass), null, typeof(global::MetaDslx.Core.Immutable.MetaProperty)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaClassBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder)));
            
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaProperty), "OppositeProperties")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty OppositePropertiesProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("OppositeProperties", typeof(MetaDescriptor.MetaProperty),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaProperty), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty>), typeof(global::MetaDslx.Core.Immutable.MetaProperty)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder)));
            
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaProperty), "SubsettingProperties")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty SubsettedPropertiesProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("SubsettedProperties", typeof(MetaDescriptor.MetaProperty),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaProperty), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty>), typeof(global::MetaDslx.Core.Immutable.MetaProperty)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder)));
            
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaProperty), "SubsettedProperties")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty SubsettingPropertiesProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("SubsettingProperties", typeof(MetaDescriptor.MetaProperty),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaProperty), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty>), typeof(global::MetaDslx.Core.Immutable.MetaProperty)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder)));
            
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaProperty), "RedefiningProperties")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty RedefinedPropertiesProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("RedefinedProperties", typeof(MetaDescriptor.MetaProperty),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaProperty), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty>), typeof(global::MetaDslx.Core.Immutable.MetaProperty)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder)));
            
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaProperty), "RedefinedProperties")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty RedefiningPropertiesProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("RedefiningProperties", typeof(MetaDescriptor.MetaProperty),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaProperty), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty>), typeof(global::MetaDslx.Core.Immutable.MetaProperty)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder)));
            
        }
        
        public static class MetaPropertyInitializer
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPropertyInitializer;*/ }
            }
        
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaConstructor), "Initializers")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ConstructorProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Constructor", typeof(MetaDescriptor.MetaPropertyInitializer),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaConstructor), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializer)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaConstructorBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder)));
            
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty PropertyNameProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("PropertyName", typeof(MetaDescriptor.MetaPropertyInitializer),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializer)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder)));
            
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty PropertyContextProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("PropertyContext", typeof(MetaDescriptor.MetaPropertyInitializer),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaClass), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializer)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaClassBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder)));
            
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty PropertyProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Property", typeof(MetaDescriptor.MetaPropertyInitializer),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaProperty), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializer)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder)));
            
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ValueProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Value", typeof(MetaDescriptor.MetaPropertyInitializer),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializer)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder)));
            
        }
        
        public static class MetaSynthetizedPropertyInitializer
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaSynthetizedPropertyInitializer;*/ }
            }
        
        }
        
        public static class MetaInheritedPropertyInitializer
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaInheritedPropertyInitializer;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ObjectNameProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("ObjectName", typeof(MetaDescriptor.MetaInheritedPropertyInitializer),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializer)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder)));
            
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ObjectProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Object", typeof(MetaDescriptor.MetaInheritedPropertyInitializer),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaProperty), null, typeof(global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializer)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder)));
            
        }
        
        public static class MetaExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaExpression;*/ }
            }
        
            [ReadonlyAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty NoTypeErrorProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("NoTypeError", typeof(MetaDescriptor.MetaExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(bool), null, typeof(global::MetaDslx.Core.Immutable.MetaExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(bool), null, typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder)));
            
            [ReadonlyAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ExpectedTypeProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("ExpectedType", typeof(MetaDescriptor.MetaExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), null, typeof(global::MetaDslx.Core.Immutable.MetaExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder)));
            
        }
        
        public static class MetaBracketExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBracketExpression;*/ }
            }
        
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ExpressionProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Expression", typeof(MetaDescriptor.MetaBracketExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaBracketExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaBracketExpressionBuilder)));
            
        }
        
        public static class MetaBoundExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBoundExpression;*/ }
            }
        
            [ReadonlyAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty UniqueDefinitionProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("UniqueDefinition", typeof(MetaDescriptor.MetaBoundExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(bool), null, typeof(global::MetaDslx.Core.Immutable.MetaBoundExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(bool), null, typeof(global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)));
            
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ArgumentsProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Arguments", typeof(MetaDescriptor.MetaBoundExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression>), typeof(global::MetaDslx.Core.Immutable.MetaBoundExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)));
            
            [ReadonlyAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty DefinitionsProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Definitions", typeof(MetaDescriptor.MetaBoundExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.BindingInfo), null, typeof(global::MetaDslx.Core.Immutable.MetaBoundExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.BindingInfo), null, typeof(global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)));
            
            [ReadonlyAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty DefinitionProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Definition", typeof(MetaDescriptor.MetaBoundExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.ISymbol), null, typeof(global::MetaDslx.Core.Immutable.MetaBoundExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.ISymbol), null, typeof(global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)));
            
        }
        
        public static class MetaThisExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaThisExpression;*/ }
            }
        
        }
        
        public static class MetaNullExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNullExpression;*/ }
            }
        
        }
        
        public static class MetaTypeConversionExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypeConversionExpression;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty TypeReferenceProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("TypeReference", typeof(MetaDescriptor.MetaTypeConversionExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), null, typeof(global::MetaDslx.Core.Immutable.MetaTypeConversionExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder)));
            
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ExpressionProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Expression", typeof(MetaDescriptor.MetaTypeConversionExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaTypeConversionExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder)));
            
        }
        
        public static class MetaTypeAsExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypeAsExpression;*/ }
            }
        
        }
        
        public static class MetaTypeCastExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypeCastExpression;*/ }
            }
        
        }
        
        public static class MetaTypeCheckExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypeCheckExpression;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty TypeReferenceProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("TypeReference", typeof(MetaDescriptor.MetaTypeCheckExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), null, typeof(global::MetaDslx.Core.Immutable.MetaTypeCheckExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaTypeCheckExpressionBuilder)));
            
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ExpressionProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Expression", typeof(MetaDescriptor.MetaTypeCheckExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaTypeCheckExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaTypeCheckExpressionBuilder)));
            
        }
        
        public static class MetaTypeOfExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypeOfExpression;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty TypeReferenceProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("TypeReference", typeof(MetaDescriptor.MetaTypeOfExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), null, typeof(global::MetaDslx.Core.Immutable.MetaTypeOfExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder)));
            
        }
        
        public static class MetaConditionalExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaConditionalExpression;*/ }
            }
        
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ConditionProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Condition", typeof(MetaDescriptor.MetaConditionalExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaConditionalExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaConditionalExpressionBuilder)));
            
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty BalancedTypeProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("BalancedType", typeof(MetaDescriptor.MetaConditionalExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaType), null, typeof(global::MetaDslx.Core.Immutable.MetaConditionalExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaConditionalExpressionBuilder)));
            
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ThenProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Then", typeof(MetaDescriptor.MetaConditionalExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaConditionalExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaConditionalExpressionBuilder)));
            
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ElseProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Else", typeof(MetaDescriptor.MetaConditionalExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaConditionalExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaConditionalExpressionBuilder)));
            
        }
        
        public static class MetaConstantExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaConstantExpression;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ValueProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Value", typeof(MetaDescriptor.MetaConstantExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(object), null, typeof(global::MetaDslx.Core.Immutable.MetaConstantExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(object), null, typeof(global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder)));
            
        }
        
        public static class MetaIdentifierExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaIdentifierExpression;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty NameProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Name", typeof(MetaDescriptor.MetaIdentifierExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaIdentifierExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder)));
            
        }
        
        public static class MetaMemberAccessExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaMemberAccessExpression;*/ }
            }
        
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ExpressionProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Expression", typeof(MetaDescriptor.MetaMemberAccessExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaMemberAccessExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder)));
            
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty NameProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Name", typeof(MetaDescriptor.MetaMemberAccessExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaMemberAccessExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder)));
            
        }
        
        public static class MetaFunctionCallExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaFunctionCallExpression;*/ }
            }
        
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ExpressionProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Expression", typeof(MetaDescriptor.MetaFunctionCallExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaFunctionCallExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder)));
            
        }
        
        public static class MetaIndexerExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaIndexerExpression;*/ }
            }
        
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ExpressionProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Expression", typeof(MetaDescriptor.MetaIndexerExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaIndexerExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaIndexerExpressionBuilder)));
            
        }
        
        public static class MetaNewExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNewExpression;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty TypeReferenceProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("TypeReference", typeof(MetaDescriptor.MetaNewExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaClass), null, typeof(global::MetaDslx.Core.Immutable.MetaNewExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaClassBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder)));
            
            [ContainmentAttribute]
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaNewPropertyInitializer), "Parent")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty PropertyInitializersProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("PropertyInitializers", typeof(MetaDescriptor.MetaNewExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer>), typeof(global::MetaDslx.Core.Immutable.MetaNewExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder)));
            
        }
        
        public static class MetaNewPropertyInitializer
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNewPropertyInitializer;*/ }
            }
        
            [OppositeAttribute(typeof(global::MetaDslx.Core.MetaDescriptor.MetaNewExpression), "PropertyInitializers")]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ParentProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Parent", typeof(MetaDescriptor.MetaNewPropertyInitializer),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNewExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder)));
            
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty PropertyNameProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("PropertyName", typeof(MetaDescriptor.MetaNewPropertyInitializer),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder)));
            
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ValueProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Value", typeof(MetaDescriptor.MetaNewPropertyInitializer),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder)));
            
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty PropertyProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Property", typeof(MetaDescriptor.MetaNewPropertyInitializer),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaProperty), null, typeof(global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaPropertyBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder)));
            
        }
        
        public static class MetaNewCollectionExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNewCollectionExpression;*/ }
            }
        
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty TypeReferenceProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("TypeReference", typeof(MetaDescriptor.MetaNewCollectionExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaCollectionType), null, typeof(global::MetaDslx.Core.Immutable.MetaNewCollectionExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaNewCollectionExpressionBuilder)));
            
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ValuesProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Values", typeof(MetaDescriptor.MetaNewCollectionExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), typeof(global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression>), typeof(global::MetaDslx.Core.Immutable.MetaNewCollectionExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), typeof(global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>), typeof(global::MetaDslx.Core.Immutable.MetaNewCollectionExpressionBuilder)));
            
        }
        
        public static class MetaOperatorExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOperatorExpression;*/ }
            }
        
            [ReadonlyAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty NameProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Name", typeof(MetaDescriptor.MetaOperatorExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaOperatorExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(string), null, typeof(global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)));
            
        }
        
        public static class MetaUnaryExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaUnaryExpression;*/ }
            }
        
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty ExpressionProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Expression", typeof(MetaDescriptor.MetaUnaryExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaUnaryExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder)));
            
        }
        
        public static class MetaUnaryPlusExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaUnaryPlusExpression;*/ }
            }
        
        }
        
        public static class MetaNegateExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNegateExpression;*/ }
            }
        
        }
        
        public static class MetaOnesComplementExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOnesComplementExpression;*/ }
            }
        
        }
        
        public static class MetaNotExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNotExpression;*/ }
            }
        
        }
        
        public static class MetaUnaryAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaUnaryAssignExpression;*/ }
            }
        
        }
        
        public static class MetaPostIncrementAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPostIncrementAssignExpression;*/ }
            }
        
        }
        
        public static class MetaPostDecrementAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPostDecrementAssignExpression;*/ }
            }
        
        }
        
        public static class MetaPreIncrementAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPreIncrementAssignExpression;*/ }
            }
        
        }
        
        public static class MetaPreDecrementAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPreDecrementAssignExpression;*/ }
            }
        
        }
        
        public static class MetaBinaryExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBinaryExpression;*/ }
            }
        
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty LeftProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Left", typeof(MetaDescriptor.MetaBinaryExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaBinaryExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)));
            
            [ContainmentAttribute]
            public static readonly global::MetaDslx.Core.Immutable.ModelProperty RightProperty =
                global::MetaDslx.Core.Immutable.ModelProperty.Register("Right", typeof(MetaDescriptor.MetaBinaryExpression),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpression), null, typeof(global::MetaDslx.Core.Immutable.MetaBinaryExpression)),
                    new global::MetaDslx.Core.Immutable.ModelPropertyTypeInfo(typeof(global::MetaDslx.Core.Immutable.MetaExpressionBuilder), null, typeof(global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)));
            
        }
        
        public static class MetaBinaryArithmeticExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBinaryArithmeticExpression;*/ }
            }
        
        }
        
        public static class MetaMultiplyExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaMultiplyExpression;*/ }
            }
        
        }
        
        public static class MetaDivideExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaDivideExpression;*/ }
            }
        
        }
        
        public static class MetaModuloExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaModuloExpression;*/ }
            }
        
        }
        
        public static class MetaAddExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAddExpression;*/ }
            }
        
        }
        
        public static class MetaSubtractExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaSubtractExpression;*/ }
            }
        
        }
        
        public static class MetaLeftShiftExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaLeftShiftExpression;*/ }
            }
        
        }
        
        public static class MetaRightShiftExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaRightShiftExpression;*/ }
            }
        
        }
        
        public static class MetaBinaryComparisonExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBinaryComparisonExpression;*/ }
            }
        
        }
        
        public static class MetaLessThanExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaLessThanExpression;*/ }
            }
        
        }
        
        public static class MetaLessThanOrEqualExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaLessThanOrEqualExpression;*/ }
            }
        
        }
        
        public static class MetaGreaterThanExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaGreaterThanExpression;*/ }
            }
        
        }
        
        public static class MetaGreaterThanOrEqualExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaGreaterThanOrEqualExpression;*/ }
            }
        
        }
        
        public static class MetaEqualExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaEqualExpression;*/ }
            }
        
        }
        
        public static class MetaNotEqualExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNotEqualExpression;*/ }
            }
        
        }
        
        public static class MetaBinaryLogicalExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBinaryLogicalExpression;*/ }
            }
        
        }
        
        public static class MetaAndExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAndExpression;*/ }
            }
        
        }
        
        public static class MetaOrExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOrExpression;*/ }
            }
        
        }
        
        public static class MetaExclusiveOrExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaExclusiveOrExpression;*/ }
            }
        
        }
        
        public static class MetaAndAlsoExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAndAlsoExpression;*/ }
            }
        
        }
        
        public static class MetaOrElseExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOrElseExpression;*/ }
            }
        
        }
        
        public static class MetaNullCoalescingExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNullCoalescingExpression;*/ }
            }
        
        }
        
        public static class MetaAssignmentExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAssignmentExpression;*/ }
            }
        
        }
        
        public static class MetaAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAssignExpression;*/ }
            }
        
        }
        
        public static class MetaArithmeticAssignmentExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaArithmeticAssignmentExpression;*/ }
            }
        
        }
        
        public static class MetaMultiplyAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaMultiplyAssignExpression;*/ }
            }
        
        }
        
        public static class MetaDivideAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaDivideAssignExpression;*/ }
            }
        
        }
        
        public static class MetaModuloAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaModuloAssignExpression;*/ }
            }
        
        }
        
        public static class MetaAddAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAddAssignExpression;*/ }
            }
        
        }
        
        public static class MetaSubtractAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaSubtractAssignExpression;*/ }
            }
        
        }
        
        public static class MetaLeftShiftAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaLeftShiftAssignExpression;*/ }
            }
        
        }
        
        public static class MetaRightShiftAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaRightShiftAssignExpression;*/ }
            }
        
        }
        
        public static class MetaLogicalAssignmentExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaLogicalAssignmentExpression;*/ }
            }
        
        }
        
        public static class MetaAndAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAndAssignExpression;*/ }
            }
        
        }
        
        public static class MetaExclusiveOrAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaExclusiveOrAssignExpression;*/ }
            }
        
        }
        
        public static class MetaOrAssignExpression
        {
        
            public static global::MetaDslx.Core.Immutable.MetaClass MetaClass
            {
                get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOrAssignExpression;*/ }
            }
        
        }
    }
    
    public enum MetaCollectionKind
    {
        List,
        Set,
        MultiList,
        MultiSet,
    }
    
    public enum MetaPropertyKind
    {
        Normal,
        Readonly,
        Lazy,
        Derived,
        Containment,
        Synthetized,
        Inherited,
    }
    
    internal class MetaAnnotatedElementId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaAnnotatedElement); } }
        public override Type MutableType { get { return typeof(MetaAnnotatedElementBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaAnnotatedElementImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaAnnotatedElementBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaAnnotatedElement : global::MetaDslx.Core.Immutable.ISymbol
    {
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations { get; }
    
    
    	MetaAnnotatedElementBuilder ToMutable();
    }
    
    internal class MetaDocumentedElementId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaDocumentedElement); } }
        public override Type MutableType { get { return typeof(MetaDocumentedElementBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaDocumentedElementImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaDocumentedElementBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaDocumentedElement : global::MetaDslx.Core.Immutable.ISymbol
    {
        string Documentation { get; }
    
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> GetDocumentationLines();
    
    	MetaDocumentedElementBuilder ToMutable();
    }
    
    internal class MetaNamedElementId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaNamedElement); } }
        public override Type MutableType { get { return typeof(MetaNamedElementBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaNamedElementImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaNamedElementBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaNamedElement : global::MetaDslx.Core.Immutable.MetaDocumentedElement
    {
        string Name { get; }
    
    
    	new MetaNamedElementBuilder ToMutable();
    }
    
    internal class MetaTypedElementId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaTypedElement); } }
        public override Type MutableType { get { return typeof(MetaTypedElementBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaTypedElementImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaTypedElementBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaTypedElement : global::MetaDslx.Core.Immutable.ISymbol
    {
        global::MetaDslx.Core.Immutable.MetaType Type { get; }
    
    
    	MetaTypedElementBuilder ToMutable();
    }
    
    internal class MetaTypeId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaType); } }
        public override Type MutableType { get { return typeof(MetaTypeBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaTypeImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaTypeBuilderImpl(this, model, created);
        }
    }
    
    [Type]
    public interface MetaType : global::MetaDslx.Core.Immutable.ISymbol
    {
    
    
    	MetaTypeBuilder ToMutable();
    }
    
    internal class MetaAnnotationId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaAnnotation); } }
        public override Type MutableType { get { return typeof(MetaAnnotationBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaAnnotationImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaAnnotationBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaAnnotation : global::MetaDslx.Core.Immutable.MetaNamedElement
    {
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationProperty> Properties { get; }
    
    
    	new MetaAnnotationBuilder ToMutable();
    }
    
    internal class MetaAnnotationPropertyId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaAnnotationProperty); } }
        public override Type MutableType { get { return typeof(MetaAnnotationPropertyBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaAnnotationPropertyImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaAnnotationPropertyBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaAnnotationProperty : global::MetaDslx.Core.Immutable.MetaNamedElement
    {
        global::MetaDslx.Core.Immutable.MetaExpression Value { get; }
    
    
    	new MetaAnnotationPropertyBuilder ToMutable();
    }
    
    internal class MetaNamespaceId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaNamespace); } }
        public override Type MutableType { get { return typeof(MetaNamespaceBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaNamespaceImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaNamespaceBuilderImpl(this, model, created);
        }
    }
    
    [Scope]
    public interface MetaNamespace : global::MetaDslx.Core.Immutable.MetaNamedElement, global::MetaDslx.Core.Immutable.MetaAnnotatedElement
    {
        global::MetaDslx.Core.Immutable.MetaNamespace Parent { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNamespace> Usings { get; }
        global::MetaDslx.Core.Immutable.MetaModel MetaModel { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNamespace> Namespaces { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaDeclaration> Declarations { get; }
    
    
    	new MetaNamespaceBuilder ToMutable();
    }
    
    internal class MetaDeclarationId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaDeclaration); } }
        public override Type MutableType { get { return typeof(MetaDeclarationBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaDeclarationImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaDeclarationBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaDeclaration : global::MetaDslx.Core.Immutable.MetaNamedElement, global::MetaDslx.Core.Immutable.MetaAnnotatedElement
    {
        global::MetaDslx.Core.Immutable.MetaNamespace Namespace { get; }
        global::MetaDslx.Core.Immutable.MetaModel Model { get; }
    
    
    	new MetaDeclarationBuilder ToMutable();
    }
    
    internal class MetaModelId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaModel); } }
        public override Type MutableType { get { return typeof(MetaModelBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaModelImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaModelBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaModel : global::MetaDslx.Core.Immutable.MetaNamedElement, global::MetaDslx.Core.Immutable.MetaAnnotatedElement
    {
        string Uri { get; }
        global::MetaDslx.Core.Immutable.MetaNamespace Namespace { get; }
    
    
    	new MetaModelBuilder ToMutable();
    }
    
    internal class MetaCollectionTypeId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaCollectionType); } }
        public override Type MutableType { get { return typeof(MetaCollectionTypeBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaCollectionTypeImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaCollectionTypeBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaCollectionType : global::MetaDslx.Core.Immutable.MetaType
    {
        global::MetaDslx.Core.Immutable.MetaCollectionKind Kind { get; }
        global::MetaDslx.Core.Immutable.MetaType InnerType { get; }
    
    
    	new MetaCollectionTypeBuilder ToMutable();
    }
    
    internal class MetaNullableTypeId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaNullableType); } }
        public override Type MutableType { get { return typeof(MetaNullableTypeBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaNullableTypeImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaNullableTypeBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaNullableType : global::MetaDslx.Core.Immutable.MetaType
    {
        global::MetaDslx.Core.Immutable.MetaType InnerType { get; }
    
    
    	new MetaNullableTypeBuilder ToMutable();
    }
    
    internal class MetaPrimitiveTypeId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaPrimitiveType); } }
        public override Type MutableType { get { return typeof(MetaPrimitiveTypeBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaPrimitiveTypeImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaPrimitiveTypeBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaPrimitiveType : global::MetaDslx.Core.Immutable.MetaType, global::MetaDslx.Core.Immutable.MetaNamedElement
    {
    
    
    	new MetaPrimitiveTypeBuilder ToMutable();
    }
    
    internal class MetaEnumId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaEnum); } }
        public override Type MutableType { get { return typeof(MetaEnumBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaEnumImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaEnumBuilderImpl(this, model, created);
        }
    }
    
    [Scope]
    public interface MetaEnum : global::MetaDslx.Core.Immutable.MetaType, global::MetaDslx.Core.Immutable.MetaDeclaration
    {
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaEnumLiteral> EnumLiterals { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> Operations { get; }
    
    
    	new MetaEnumBuilder ToMutable();
    }
    
    internal class MetaEnumLiteralId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaEnumLiteral); } }
        public override Type MutableType { get { return typeof(MetaEnumLiteralBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaEnumLiteralImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaEnumLiteralBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaEnumLiteral : global::MetaDslx.Core.Immutable.MetaNamedElement, global::MetaDslx.Core.Immutable.MetaTypedElement
    {
        global::MetaDslx.Core.Immutable.MetaEnum Enum { get; }
    
    
    	new MetaEnumLiteralBuilder ToMutable();
    }
    
    internal class MetaClassId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaClass); } }
        public override Type MutableType { get { return typeof(MetaClassBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaClassImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaClassBuilderImpl(this, model, created);
        }
    }
    
    [Scope]
    public interface MetaClass : global::MetaDslx.Core.Immutable.MetaType, global::MetaDslx.Core.Immutable.MetaDeclaration
    {
        bool IsAbstract { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaClass> SuperClasses { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> Properties { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> Operations { get; }
        global::MetaDslx.Core.Immutable.MetaConstructor Constructor { get; }
    
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaClass> GetAllSuperClasses();
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> GetAllProperties();
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> GetAllOperations();
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> GetAllImplementedProperties();
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> GetAllImplementedOperations();
    
    	new MetaClassBuilder ToMutable();
    }
    
    internal class MetaFunctionTypeId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaFunctionType); } }
        public override Type MutableType { get { return typeof(MetaFunctionTypeBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaFunctionTypeImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaFunctionTypeBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaFunctionType : global::MetaDslx.Core.Immutable.MetaType
    {
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaType> ParameterTypes { get; }
        global::MetaDslx.Core.Immutable.MetaType ReturnType { get; }
    
    
    	new MetaFunctionTypeBuilder ToMutable();
    }
    
    internal class MetaFunctionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaFunction); } }
        public override Type MutableType { get { return typeof(MetaFunctionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaFunctionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaFunctionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaFunction : global::MetaDslx.Core.Immutable.MetaTypedElement, global::MetaDslx.Core.Immutable.MetaNamedElement, global::MetaDslx.Core.Immutable.MetaAnnotatedElement
    {
        new global::MetaDslx.Core.Immutable.MetaFunctionType Type { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaParameter> Parameters { get; }
        global::MetaDslx.Core.Immutable.MetaType ReturnType { get; }
    
    
    	new MetaFunctionBuilder ToMutable();
    }
    
    internal class MetaGlobalFunctionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaGlobalFunction); } }
        public override Type MutableType { get { return typeof(MetaGlobalFunctionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaGlobalFunctionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaGlobalFunctionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaGlobalFunction : global::MetaDslx.Core.Immutable.MetaFunction, global::MetaDslx.Core.Immutable.MetaDeclaration
    {
    
    
    	new MetaGlobalFunctionBuilder ToMutable();
    }
    
    internal class MetaOperationId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaOperation); } }
        public override Type MutableType { get { return typeof(MetaOperationBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaOperationImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaOperationBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaOperation : global::MetaDslx.Core.Immutable.MetaFunction
    {
        global::MetaDslx.Core.Immutable.MetaType Parent { get; }
    
    
    	new MetaOperationBuilder ToMutable();
    }
    
    internal class MetaConstantId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaConstant); } }
        public override Type MutableType { get { return typeof(MetaConstantBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaConstantImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaConstantBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaConstant : global::MetaDslx.Core.Immutable.MetaTypedElement, global::MetaDslx.Core.Immutable.MetaDeclaration
    {
        global::MetaDslx.Core.Immutable.MetaExpression Value { get; }
    
    
    	new MetaConstantBuilder ToMutable();
    }
    
    internal class MetaConstructorId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaConstructor); } }
        public override Type MutableType { get { return typeof(MetaConstructorBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaConstructorImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaConstructorBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaConstructor : global::MetaDslx.Core.Immutable.MetaNamedElement, global::MetaDslx.Core.Immutable.MetaAnnotatedElement
    {
        global::MetaDslx.Core.Immutable.MetaClass Parent { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyInitializer> Initializers { get; }
    
    
    	new MetaConstructorBuilder ToMutable();
    }
    
    internal class MetaParameterId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaParameter); } }
        public override Type MutableType { get { return typeof(MetaParameterBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaParameterImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaParameterBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaParameter : global::MetaDslx.Core.Immutable.MetaNamedElement, global::MetaDslx.Core.Immutable.MetaTypedElement, global::MetaDslx.Core.Immutable.MetaAnnotatedElement
    {
        global::MetaDslx.Core.Immutable.MetaFunction Function { get; }
    
    
    	new MetaParameterBuilder ToMutable();
    }
    
    internal class MetaPropertyId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaProperty); } }
        public override Type MutableType { get { return typeof(MetaPropertyBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaPropertyImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaPropertyBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaProperty : global::MetaDslx.Core.Immutable.MetaNamedElement, global::MetaDslx.Core.Immutable.MetaTypedElement, global::MetaDslx.Core.Immutable.MetaAnnotatedElement
    {
        global::MetaDslx.Core.Immutable.MetaPropertyKind Kind { get; }
        global::MetaDslx.Core.Immutable.MetaClass Class { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> OppositeProperties { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> SubsettedProperties { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> SubsettingProperties { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> RedefinedProperties { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> RedefiningProperties { get; }
    
    
    	new MetaPropertyBuilder ToMutable();
    }
    
    internal class MetaPropertyInitializerId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaPropertyInitializer); } }
        public override Type MutableType { get { return typeof(MetaPropertyInitializerBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaPropertyInitializerImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaPropertyInitializerBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaPropertyInitializer : global::MetaDslx.Core.Immutable.ISymbol
    {
        global::MetaDslx.Core.Immutable.MetaConstructor Constructor { get; }
        string PropertyName { get; }
        global::MetaDslx.Core.Immutable.MetaClass PropertyContext { get; }
        global::MetaDslx.Core.Immutable.MetaProperty Property { get; }
        global::MetaDslx.Core.Immutable.MetaExpression Value { get; }
    
    
    	MetaPropertyInitializerBuilder ToMutable();
    }
    
    internal class MetaSynthetizedPropertyInitializerId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaSynthetizedPropertyInitializer); } }
        public override Type MutableType { get { return typeof(MetaSynthetizedPropertyInitializerBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaSynthetizedPropertyInitializerImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaSynthetizedPropertyInitializerBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaSynthetizedPropertyInitializer : global::MetaDslx.Core.Immutable.MetaPropertyInitializer
    {
    
    
    	new MetaSynthetizedPropertyInitializerBuilder ToMutable();
    }
    
    internal class MetaInheritedPropertyInitializerId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaInheritedPropertyInitializer); } }
        public override Type MutableType { get { return typeof(MetaInheritedPropertyInitializerBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaInheritedPropertyInitializerImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaInheritedPropertyInitializerBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaInheritedPropertyInitializer : global::MetaDslx.Core.Immutable.MetaPropertyInitializer
    {
        string ObjectName { get; }
        global::MetaDslx.Core.Immutable.MetaProperty Object { get; }
    
    
    	new MetaInheritedPropertyInitializerBuilder ToMutable();
    }
    
    internal class MetaExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaExpression); } }
        public override Type MutableType { get { return typeof(MetaExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaExpression : global::MetaDslx.Core.Immutable.MetaTypedElement
    {
        bool NoTypeError { get; }
        global::MetaDslx.Core.Immutable.MetaType ExpectedType { get; }
    
    
    	new MetaExpressionBuilder ToMutable();
    }
    
    internal class MetaBracketExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaBracketExpression); } }
        public override Type MutableType { get { return typeof(MetaBracketExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaBracketExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaBracketExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaBracketExpression : global::MetaDslx.Core.Immutable.MetaExpression
    {
        global::MetaDslx.Core.Immutable.MetaExpression Expression { get; }
    
    
    	new MetaBracketExpressionBuilder ToMutable();
    }
    
    internal class MetaBoundExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaBoundExpression); } }
        public override Type MutableType { get { return typeof(MetaBoundExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaBoundExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaBoundExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaBoundExpression : global::MetaDslx.Core.Immutable.MetaExpression
    {
        bool UniqueDefinition { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments { get; }
        global::MetaDslx.Core.BindingInfo Definitions { get; }
        global::MetaDslx.Core.Immutable.ISymbol Definition { get; }
    
    
    	new MetaBoundExpressionBuilder ToMutable();
    }
    
    internal class MetaThisExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaThisExpression); } }
        public override Type MutableType { get { return typeof(MetaThisExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaThisExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaThisExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaThisExpression : global::MetaDslx.Core.Immutable.MetaBoundExpression
    {
    
    
    	new MetaThisExpressionBuilder ToMutable();
    }
    
    internal class MetaNullExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaNullExpression); } }
        public override Type MutableType { get { return typeof(MetaNullExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaNullExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaNullExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaNullExpression : global::MetaDslx.Core.Immutable.MetaExpression
    {
    
    
    	new MetaNullExpressionBuilder ToMutable();
    }
    
    internal class MetaTypeConversionExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaTypeConversionExpression); } }
        public override Type MutableType { get { return typeof(MetaTypeConversionExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaTypeConversionExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaTypeConversionExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaTypeConversionExpression : global::MetaDslx.Core.Immutable.MetaExpression
    {
        global::MetaDslx.Core.Immutable.MetaType TypeReference { get; }
        global::MetaDslx.Core.Immutable.MetaExpression Expression { get; }
    
    
    	new MetaTypeConversionExpressionBuilder ToMutable();
    }
    
    internal class MetaTypeAsExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaTypeAsExpression); } }
        public override Type MutableType { get { return typeof(MetaTypeAsExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaTypeAsExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaTypeAsExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaTypeAsExpression : global::MetaDslx.Core.Immutable.MetaTypeConversionExpression
    {
    
    
    	new MetaTypeAsExpressionBuilder ToMutable();
    }
    
    internal class MetaTypeCastExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaTypeCastExpression); } }
        public override Type MutableType { get { return typeof(MetaTypeCastExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaTypeCastExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaTypeCastExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaTypeCastExpression : global::MetaDslx.Core.Immutable.MetaTypeConversionExpression
    {
    
    
    	new MetaTypeCastExpressionBuilder ToMutable();
    }
    
    internal class MetaTypeCheckExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaTypeCheckExpression); } }
        public override Type MutableType { get { return typeof(MetaTypeCheckExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaTypeCheckExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaTypeCheckExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaTypeCheckExpression : global::MetaDslx.Core.Immutable.MetaExpression
    {
        global::MetaDslx.Core.Immutable.MetaType TypeReference { get; }
        global::MetaDslx.Core.Immutable.MetaExpression Expression { get; }
    
    
    	new MetaTypeCheckExpressionBuilder ToMutable();
    }
    
    internal class MetaTypeOfExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaTypeOfExpression); } }
        public override Type MutableType { get { return typeof(MetaTypeOfExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaTypeOfExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaTypeOfExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaTypeOfExpression : global::MetaDslx.Core.Immutable.MetaExpression
    {
        global::MetaDslx.Core.Immutable.MetaType TypeReference { get; }
    
    
    	new MetaTypeOfExpressionBuilder ToMutable();
    }
    
    internal class MetaConditionalExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaConditionalExpression); } }
        public override Type MutableType { get { return typeof(MetaConditionalExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaConditionalExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaConditionalExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaConditionalExpression : global::MetaDslx.Core.Immutable.MetaExpression
    {
        global::MetaDslx.Core.Immutable.MetaExpression Condition { get; }
        global::MetaDslx.Core.Immutable.MetaType BalancedType { get; }
        global::MetaDslx.Core.Immutable.MetaExpression Then { get; }
        global::MetaDslx.Core.Immutable.MetaExpression Else { get; }
    
    
    	new MetaConditionalExpressionBuilder ToMutable();
    }
    
    internal class MetaConstantExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaConstantExpression); } }
        public override Type MutableType { get { return typeof(MetaConstantExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaConstantExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaConstantExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaConstantExpression : global::MetaDslx.Core.Immutable.MetaExpression
    {
        object Value { get; }
    
    
    	new MetaConstantExpressionBuilder ToMutable();
    }
    
    internal class MetaIdentifierExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaIdentifierExpression); } }
        public override Type MutableType { get { return typeof(MetaIdentifierExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaIdentifierExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaIdentifierExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaIdentifierExpression : global::MetaDslx.Core.Immutable.MetaBoundExpression
    {
        string Name { get; }
    
    
    	new MetaIdentifierExpressionBuilder ToMutable();
    }
    
    internal class MetaMemberAccessExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaMemberAccessExpression); } }
        public override Type MutableType { get { return typeof(MetaMemberAccessExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaMemberAccessExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaMemberAccessExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaMemberAccessExpression : global::MetaDslx.Core.Immutable.MetaBoundExpression
    {
        global::MetaDslx.Core.Immutable.MetaExpression Expression { get; }
        string Name { get; }
    
    
    	new MetaMemberAccessExpressionBuilder ToMutable();
    }
    
    internal class MetaFunctionCallExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaFunctionCallExpression); } }
        public override Type MutableType { get { return typeof(MetaFunctionCallExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaFunctionCallExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaFunctionCallExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaFunctionCallExpression : global::MetaDslx.Core.Immutable.MetaBoundExpression
    {
        global::MetaDslx.Core.Immutable.MetaExpression Expression { get; }
    
    
    	new MetaFunctionCallExpressionBuilder ToMutable();
    }
    
    internal class MetaIndexerExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaIndexerExpression); } }
        public override Type MutableType { get { return typeof(MetaIndexerExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaIndexerExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaIndexerExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaIndexerExpression : global::MetaDslx.Core.Immutable.MetaBoundExpression
    {
        global::MetaDslx.Core.Immutable.MetaExpression Expression { get; }
    
    
    	new MetaIndexerExpressionBuilder ToMutable();
    }
    
    internal class MetaNewExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaNewExpression); } }
        public override Type MutableType { get { return typeof(MetaNewExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaNewExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaNewExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaNewExpression : global::MetaDslx.Core.Immutable.MetaExpression
    {
        global::MetaDslx.Core.Immutable.MetaClass TypeReference { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer> PropertyInitializers { get; }
    
    
    	new MetaNewExpressionBuilder ToMutable();
    }
    
    internal class MetaNewPropertyInitializerId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaNewPropertyInitializer); } }
        public override Type MutableType { get { return typeof(MetaNewPropertyInitializerBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaNewPropertyInitializerImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaNewPropertyInitializerBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaNewPropertyInitializer : global::MetaDslx.Core.Immutable.ISymbol
    {
        global::MetaDslx.Core.Immutable.MetaNewExpression Parent { get; }
        string PropertyName { get; }
        global::MetaDslx.Core.Immutable.MetaExpression Value { get; }
        global::MetaDslx.Core.Immutable.MetaProperty Property { get; }
    
    
    	MetaNewPropertyInitializerBuilder ToMutable();
    }
    
    internal class MetaNewCollectionExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaNewCollectionExpression); } }
        public override Type MutableType { get { return typeof(MetaNewCollectionExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaNewCollectionExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaNewCollectionExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaNewCollectionExpression : global::MetaDslx.Core.Immutable.MetaExpression
    {
        global::MetaDslx.Core.Immutable.MetaCollectionType TypeReference { get; }
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Values { get; }
    
    
    	new MetaNewCollectionExpressionBuilder ToMutable();
    }
    
    internal class MetaOperatorExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaOperatorExpression); } }
        public override Type MutableType { get { return typeof(MetaOperatorExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaOperatorExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaOperatorExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaOperatorExpression : global::MetaDslx.Core.Immutable.MetaBoundExpression
    {
        string Name { get; }
    
    
    	new MetaOperatorExpressionBuilder ToMutable();
    }
    
    internal class MetaUnaryExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaUnaryExpression); } }
        public override Type MutableType { get { return typeof(MetaUnaryExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaUnaryExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaUnaryExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaUnaryExpression : global::MetaDslx.Core.Immutable.MetaOperatorExpression
    {
        global::MetaDslx.Core.Immutable.MetaExpression Expression { get; }
    
    
    	new MetaUnaryExpressionBuilder ToMutable();
    }
    
    internal class MetaUnaryPlusExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaUnaryPlusExpression); } }
        public override Type MutableType { get { return typeof(MetaUnaryPlusExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaUnaryPlusExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaUnaryPlusExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaUnaryPlusExpression : global::MetaDslx.Core.Immutable.MetaUnaryExpression
    {
    
    
    	new MetaUnaryPlusExpressionBuilder ToMutable();
    }
    
    internal class MetaNegateExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaNegateExpression); } }
        public override Type MutableType { get { return typeof(MetaNegateExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaNegateExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaNegateExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaNegateExpression : global::MetaDslx.Core.Immutable.MetaUnaryExpression
    {
    
    
    	new MetaNegateExpressionBuilder ToMutable();
    }
    
    internal class MetaOnesComplementExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaOnesComplementExpression); } }
        public override Type MutableType { get { return typeof(MetaOnesComplementExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaOnesComplementExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaOnesComplementExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaOnesComplementExpression : global::MetaDslx.Core.Immutable.MetaUnaryExpression
    {
    
    
    	new MetaOnesComplementExpressionBuilder ToMutable();
    }
    
    internal class MetaNotExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaNotExpression); } }
        public override Type MutableType { get { return typeof(MetaNotExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaNotExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaNotExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaNotExpression : global::MetaDslx.Core.Immutable.MetaUnaryExpression
    {
    
    
    	new MetaNotExpressionBuilder ToMutable();
    }
    
    internal class MetaUnaryAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaUnaryAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaUnaryAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaUnaryAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaUnaryAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaUnaryAssignExpression : global::MetaDslx.Core.Immutable.MetaUnaryExpression
    {
    
    
    	new MetaUnaryAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaPostIncrementAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaPostIncrementAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaPostIncrementAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaPostIncrementAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaPostIncrementAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaPostIncrementAssignExpression : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression
    {
    
    
    	new MetaPostIncrementAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaPostDecrementAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaPostDecrementAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaPostDecrementAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaPostDecrementAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaPostDecrementAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaPostDecrementAssignExpression : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression
    {
    
    
    	new MetaPostDecrementAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaPreIncrementAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaPreIncrementAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaPreIncrementAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaPreIncrementAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaPreIncrementAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaPreIncrementAssignExpression : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression
    {
    
    
    	new MetaPreIncrementAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaPreDecrementAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaPreDecrementAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaPreDecrementAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaPreDecrementAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaPreDecrementAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaPreDecrementAssignExpression : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression
    {
    
    
    	new MetaPreDecrementAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaBinaryExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaBinaryExpression); } }
        public override Type MutableType { get { return typeof(MetaBinaryExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaBinaryExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaBinaryExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaBinaryExpression : global::MetaDslx.Core.Immutable.MetaOperatorExpression
    {
        global::MetaDslx.Core.Immutable.MetaExpression Left { get; }
        global::MetaDslx.Core.Immutable.MetaExpression Right { get; }
    
    
    	new MetaBinaryExpressionBuilder ToMutable();
    }
    
    internal class MetaBinaryArithmeticExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaBinaryArithmeticExpression); } }
        public override Type MutableType { get { return typeof(MetaBinaryArithmeticExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaBinaryArithmeticExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaBinaryArithmeticExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaBinaryArithmeticExpression : global::MetaDslx.Core.Immutable.MetaBinaryExpression
    {
    
    
    	new MetaBinaryArithmeticExpressionBuilder ToMutable();
    }
    
    internal class MetaMultiplyExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaMultiplyExpression); } }
        public override Type MutableType { get { return typeof(MetaMultiplyExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaMultiplyExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaMultiplyExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaMultiplyExpression : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression
    {
    
    
    	new MetaMultiplyExpressionBuilder ToMutable();
    }
    
    internal class MetaDivideExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaDivideExpression); } }
        public override Type MutableType { get { return typeof(MetaDivideExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaDivideExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaDivideExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaDivideExpression : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression
    {
    
    
    	new MetaDivideExpressionBuilder ToMutable();
    }
    
    internal class MetaModuloExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaModuloExpression); } }
        public override Type MutableType { get { return typeof(MetaModuloExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaModuloExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaModuloExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaModuloExpression : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression
    {
    
    
    	new MetaModuloExpressionBuilder ToMutable();
    }
    
    internal class MetaAddExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaAddExpression); } }
        public override Type MutableType { get { return typeof(MetaAddExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaAddExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaAddExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaAddExpression : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression
    {
    
    
    	new MetaAddExpressionBuilder ToMutable();
    }
    
    internal class MetaSubtractExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaSubtractExpression); } }
        public override Type MutableType { get { return typeof(MetaSubtractExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaSubtractExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaSubtractExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaSubtractExpression : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression
    {
    
    
    	new MetaSubtractExpressionBuilder ToMutable();
    }
    
    internal class MetaLeftShiftExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaLeftShiftExpression); } }
        public override Type MutableType { get { return typeof(MetaLeftShiftExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaLeftShiftExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaLeftShiftExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaLeftShiftExpression : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression
    {
    
    
    	new MetaLeftShiftExpressionBuilder ToMutable();
    }
    
    internal class MetaRightShiftExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaRightShiftExpression); } }
        public override Type MutableType { get { return typeof(MetaRightShiftExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaRightShiftExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaRightShiftExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaRightShiftExpression : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression
    {
    
    
    	new MetaRightShiftExpressionBuilder ToMutable();
    }
    
    internal class MetaBinaryComparisonExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaBinaryComparisonExpression); } }
        public override Type MutableType { get { return typeof(MetaBinaryComparisonExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaBinaryComparisonExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaBinaryComparisonExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaBinaryComparisonExpression : global::MetaDslx.Core.Immutable.MetaBinaryExpression
    {
    
    
    	new MetaBinaryComparisonExpressionBuilder ToMutable();
    }
    
    internal class MetaLessThanExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaLessThanExpression); } }
        public override Type MutableType { get { return typeof(MetaLessThanExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaLessThanExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaLessThanExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaLessThanExpression : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression
    {
    
    
    	new MetaLessThanExpressionBuilder ToMutable();
    }
    
    internal class MetaLessThanOrEqualExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaLessThanOrEqualExpression); } }
        public override Type MutableType { get { return typeof(MetaLessThanOrEqualExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaLessThanOrEqualExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaLessThanOrEqualExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaLessThanOrEqualExpression : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression
    {
    
    
    	new MetaLessThanOrEqualExpressionBuilder ToMutable();
    }
    
    internal class MetaGreaterThanExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaGreaterThanExpression); } }
        public override Type MutableType { get { return typeof(MetaGreaterThanExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaGreaterThanExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaGreaterThanExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaGreaterThanExpression : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression
    {
    
    
    	new MetaGreaterThanExpressionBuilder ToMutable();
    }
    
    internal class MetaGreaterThanOrEqualExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaGreaterThanOrEqualExpression); } }
        public override Type MutableType { get { return typeof(MetaGreaterThanOrEqualExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaGreaterThanOrEqualExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaGreaterThanOrEqualExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaGreaterThanOrEqualExpression : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression
    {
    
    
    	new MetaGreaterThanOrEqualExpressionBuilder ToMutable();
    }
    
    internal class MetaEqualExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaEqualExpression); } }
        public override Type MutableType { get { return typeof(MetaEqualExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaEqualExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaEqualExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaEqualExpression : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression
    {
    
    
    	new MetaEqualExpressionBuilder ToMutable();
    }
    
    internal class MetaNotEqualExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaNotEqualExpression); } }
        public override Type MutableType { get { return typeof(MetaNotEqualExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaNotEqualExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaNotEqualExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaNotEqualExpression : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression
    {
    
    
    	new MetaNotEqualExpressionBuilder ToMutable();
    }
    
    internal class MetaBinaryLogicalExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaBinaryLogicalExpression); } }
        public override Type MutableType { get { return typeof(MetaBinaryLogicalExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaBinaryLogicalExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaBinaryLogicalExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaBinaryLogicalExpression : global::MetaDslx.Core.Immutable.MetaBinaryExpression
    {
    
    
    	new MetaBinaryLogicalExpressionBuilder ToMutable();
    }
    
    internal class MetaAndExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaAndExpression); } }
        public override Type MutableType { get { return typeof(MetaAndExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaAndExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaAndExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaAndExpression : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression
    {
    
    
    	new MetaAndExpressionBuilder ToMutable();
    }
    
    internal class MetaOrExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaOrExpression); } }
        public override Type MutableType { get { return typeof(MetaOrExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaOrExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaOrExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaOrExpression : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression
    {
    
    
    	new MetaOrExpressionBuilder ToMutable();
    }
    
    internal class MetaExclusiveOrExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaExclusiveOrExpression); } }
        public override Type MutableType { get { return typeof(MetaExclusiveOrExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaExclusiveOrExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaExclusiveOrExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaExclusiveOrExpression : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression
    {
    
    
    	new MetaExclusiveOrExpressionBuilder ToMutable();
    }
    
    internal class MetaAndAlsoExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaAndAlsoExpression); } }
        public override Type MutableType { get { return typeof(MetaAndAlsoExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaAndAlsoExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaAndAlsoExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaAndAlsoExpression : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression
    {
    
    
    	new MetaAndAlsoExpressionBuilder ToMutable();
    }
    
    internal class MetaOrElseExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaOrElseExpression); } }
        public override Type MutableType { get { return typeof(MetaOrElseExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaOrElseExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaOrElseExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaOrElseExpression : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression
    {
    
    
    	new MetaOrElseExpressionBuilder ToMutable();
    }
    
    internal class MetaNullCoalescingExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaNullCoalescingExpression); } }
        public override Type MutableType { get { return typeof(MetaNullCoalescingExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaNullCoalescingExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaNullCoalescingExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaNullCoalescingExpression : global::MetaDslx.Core.Immutable.MetaBinaryExpression
    {
    
    
    	new MetaNullCoalescingExpressionBuilder ToMutable();
    }
    
    internal class MetaAssignmentExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaAssignmentExpression); } }
        public override Type MutableType { get { return typeof(MetaAssignmentExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaAssignmentExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaAssignmentExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaAssignmentExpression : global::MetaDslx.Core.Immutable.MetaBinaryExpression
    {
    
    
    	new MetaAssignmentExpressionBuilder ToMutable();
    }
    
    internal class MetaAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaAssignExpression : global::MetaDslx.Core.Immutable.MetaAssignmentExpression
    {
    
    
    	new MetaAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaArithmeticAssignmentExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaArithmeticAssignmentExpression); } }
        public override Type MutableType { get { return typeof(MetaArithmeticAssignmentExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaArithmeticAssignmentExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaArithmeticAssignmentExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaArithmeticAssignmentExpression : global::MetaDslx.Core.Immutable.MetaAssignmentExpression
    {
    
    
    	new MetaArithmeticAssignmentExpressionBuilder ToMutable();
    }
    
    internal class MetaMultiplyAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaMultiplyAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaMultiplyAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaMultiplyAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaMultiplyAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaMultiplyAssignExpression : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression
    {
    
    
    	new MetaMultiplyAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaDivideAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaDivideAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaDivideAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaDivideAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaDivideAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaDivideAssignExpression : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression
    {
    
    
    	new MetaDivideAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaModuloAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaModuloAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaModuloAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaModuloAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaModuloAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaModuloAssignExpression : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression
    {
    
    
    	new MetaModuloAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaAddAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaAddAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaAddAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaAddAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaAddAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaAddAssignExpression : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression
    {
    
    
    	new MetaAddAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaSubtractAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaSubtractAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaSubtractAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaSubtractAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaSubtractAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaSubtractAssignExpression : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression
    {
    
    
    	new MetaSubtractAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaLeftShiftAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaLeftShiftAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaLeftShiftAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaLeftShiftAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaLeftShiftAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaLeftShiftAssignExpression : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression
    {
    
    
    	new MetaLeftShiftAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaRightShiftAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaRightShiftAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaRightShiftAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaRightShiftAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaRightShiftAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaRightShiftAssignExpression : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression
    {
    
    
    	new MetaRightShiftAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaLogicalAssignmentExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaLogicalAssignmentExpression); } }
        public override Type MutableType { get { return typeof(MetaLogicalAssignmentExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaLogicalAssignmentExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaLogicalAssignmentExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaLogicalAssignmentExpression : global::MetaDslx.Core.Immutable.MetaAssignmentExpression
    {
    
    
    	new MetaLogicalAssignmentExpressionBuilder ToMutable();
    }
    
    internal class MetaAndAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaAndAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaAndAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaAndAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaAndAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaAndAssignExpression : global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression
    {
    
    
    	new MetaAndAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaExclusiveOrAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaExclusiveOrAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaExclusiveOrAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaExclusiveOrAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaExclusiveOrAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaExclusiveOrAssignExpression : global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression
    {
    
    
    	new MetaExclusiveOrAssignExpressionBuilder ToMutable();
    }
    
    internal class MetaOrAssignExpressionId : SymbolId
    {
        public override Type ImmutableType { get { return typeof(MetaOrAssignExpression); } }
        public override Type MutableType { get { return typeof(MetaOrAssignExpressionBuilder); } }
    
        public override IImmutableSymbol CreateImmutable(ImmutableModel model)
        {
            return new MetaOrAssignExpressionImpl(this, model);
        }
    
        public override IMutableSymbol CreateMutable(MutableModel model, bool created)
        {
            return new MetaOrAssignExpressionBuilderImpl(this, model, created);
        }
    }
    
    public interface MetaOrAssignExpression : global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression
    {
    
    
    	new MetaOrAssignExpressionBuilder ToMutable();
    }
    
    public interface MetaAnnotatedElementBuilder : global::MetaDslx.Core.Immutable.ISymbol
    {
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations { get; }
        global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild { get; }
    
    	MetaAnnotatedElement ToImmutable();
    }
    
    public interface MetaAnnotatedElementLazyChildBuilder
    {
        
    }
    
    public interface MetaDocumentedElementBuilder : global::MetaDslx.Core.Immutable.ISymbol
    {
        string Documentation { get; set; }
        Func<string> DocumentationLazy { get; set; }
    
    	MetaDocumentedElement ToImmutable();
    }
    
    public interface MetaDocumentedElementLazyChildBuilder
    {
        Func<string> Documentation { set; }
    }
    
    public interface MetaNamedElementBuilder : global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder
    {
        string Name { get; set; }
        Func<string> NameLazy { get; set; }
    
    	new MetaNamedElement ToImmutable();
    }
    
    public interface MetaNamedElementLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaDocumentedElementLazyChildBuilder
    {
        Func<string> Name { set; }
    }
    
    public interface MetaTypedElementBuilder : global::MetaDslx.Core.Immutable.ISymbol
    {
        global::MetaDslx.Core.Immutable.MetaTypeBuilder Type { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy { get; set; }
    
    	MetaTypedElement ToImmutable();
    }
    
    public interface MetaTypedElementLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type { set; }
    }
    
    public interface MetaTypeBuilder : global::MetaDslx.Core.Immutable.ISymbol
    {
    
    	MetaType ToImmutable();
    }
    
    public interface MetaTypeLazyChildBuilder
    {
    }
    
    public interface MetaAnnotationBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementBuilder
    {
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder> Properties { get; }
        global::MetaDslx.Core.Immutable.MetaAnnotationPropertyLazyChildBuilder PropertiesLazyChild { get; }
    
    	new MetaAnnotation ToImmutable();
    }
    
    public interface MetaAnnotationLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder
    {
        
    }
    
    public interface MetaAnnotationPropertyBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementBuilder
    {
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Value { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ValueLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValueLazyChild { get; }
    
    	new MetaAnnotationProperty ToImmutable();
    }
    
    public interface MetaAnnotationPropertyLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Value { set; }
    }
    
    public interface MetaNamespaceBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder
    {
        global::MetaDslx.Core.Immutable.MetaNamespaceBuilder Parent { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> ParentLazy { get; set; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Usings { get; }
        global::MetaDslx.Core.Immutable.MetaModelBuilder MetaModel { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> MetaModelLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaModelLazyChildBuilder MetaModelLazyChild { get; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Namespaces { get; }
        global::MetaDslx.Core.Immutable.MetaNamespaceLazyChildBuilder NamespacesLazyChild { get; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaDeclarationBuilder> Declarations { get; }
        global::MetaDslx.Core.Immutable.MetaDeclarationLazyChildBuilder DeclarationsLazyChild { get; }
    
    	new MetaNamespace ToImmutable();
    }
    
    public interface MetaNamespaceLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Parent { set; }
        
        Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> MetaModel { set; }
        
        
    }
    
    public interface MetaDeclarationBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder
    {
        global::MetaDslx.Core.Immutable.MetaNamespaceBuilder Namespace { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> NamespaceLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaModelBuilder Model { get; }
        Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> ModelLazy { get; set; }
    
    	new MetaDeclaration ToImmutable();
    }
    
    public interface MetaDeclarationLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Namespace { set; }
        Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> Model { set; }
    }
    
    public interface MetaModelBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder
    {
        string Uri { get; set; }
        Func<string> UriLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaNamespaceBuilder Namespace { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> NamespaceLazy { get; set; }
    
    	new MetaModel ToImmutable();
    }
    
    public interface MetaModelLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementLazyChildBuilder
    {
        Func<string> Uri { set; }
        Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Namespace { set; }
    }
    
    public interface MetaCollectionTypeBuilder : global::MetaDslx.Core.Immutable.MetaTypeBuilder
    {
        global::MetaDslx.Core.Immutable.MetaCollectionKind Kind { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaCollectionKind> KindLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaTypeBuilder InnerType { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> InnerTypeLazy { get; set; }
    
    	new MetaCollectionType ToImmutable();
    }
    
    public interface MetaCollectionTypeLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaTypeLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaCollectionKind> Kind { set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> InnerType { set; }
    }
    
    public interface MetaNullableTypeBuilder : global::MetaDslx.Core.Immutable.MetaTypeBuilder
    {
        global::MetaDslx.Core.Immutable.MetaTypeBuilder InnerType { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> InnerTypeLazy { get; set; }
    
    	new MetaNullableType ToImmutable();
    }
    
    public interface MetaNullableTypeLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaTypeLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> InnerType { set; }
    }
    
    public interface MetaPrimitiveTypeBuilder : global::MetaDslx.Core.Immutable.MetaTypeBuilder, global::MetaDslx.Core.Immutable.MetaNamedElementBuilder
    {
    
    	new MetaPrimitiveType ToImmutable();
    }
    
    public interface MetaPrimitiveTypeLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaTypeLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder
    {
    }
    
    public interface MetaEnumBuilder : global::MetaDslx.Core.Immutable.MetaTypeBuilder, global::MetaDslx.Core.Immutable.MetaDeclarationBuilder
    {
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder> EnumLiterals { get; }
        global::MetaDslx.Core.Immutable.MetaEnumLiteralLazyChildBuilder EnumLiteralsLazyChild { get; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaOperationBuilder> Operations { get; }
        global::MetaDslx.Core.Immutable.MetaOperationLazyChildBuilder OperationsLazyChild { get; }
    
    	new MetaEnum ToImmutable();
    }
    
    public interface MetaEnumLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaTypeLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaDeclarationLazyChildBuilder
    {
        
        
    }
    
    public interface MetaEnumLiteralBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementBuilder, global::MetaDslx.Core.Immutable.MetaTypedElementBuilder
    {
        global::MetaDslx.Core.Immutable.MetaEnumBuilder Enum { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaEnumBuilder> EnumLazy { get; set; }
    
    	new MetaEnumLiteral ToImmutable();
    }
    
    public interface MetaEnumLiteralLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaTypedElementLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaEnumBuilder> Enum { set; }
    }
    
    public interface MetaClassBuilder : global::MetaDslx.Core.Immutable.MetaTypeBuilder, global::MetaDslx.Core.Immutable.MetaDeclarationBuilder
    {
        bool IsAbstract { get; set; }
        Func<bool> IsAbstractLazy { get; set; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaClassBuilder> SuperClasses { get; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> Properties { get; }
        global::MetaDslx.Core.Immutable.MetaPropertyLazyChildBuilder PropertiesLazyChild { get; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaOperationBuilder> Operations { get; }
        global::MetaDslx.Core.Immutable.MetaOperationLazyChildBuilder OperationsLazyChild { get; }
        global::MetaDslx.Core.Immutable.MetaConstructorBuilder Constructor { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> ConstructorLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaConstructorLazyChildBuilder ConstructorLazyChild { get; }
    
    	new MetaClass ToImmutable();
    }
    
    public interface MetaClassLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaTypeLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaDeclarationLazyChildBuilder
    {
        Func<bool> IsAbstract { set; }
        
        
        
        Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> Constructor { set; }
    }
    
    public interface MetaFunctionTypeBuilder : global::MetaDslx.Core.Immutable.MetaTypeBuilder
    {
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ParameterTypes { get; }
        global::MetaDslx.Core.Immutable.MetaTypeBuilder ReturnType { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnTypeLazy { get; set; }
    
    	new MetaFunctionType ToImmutable();
    }
    
    public interface MetaFunctionTypeLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaTypeLazyChildBuilder
    {
        
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnType { set; }
    }
    
    public interface MetaFunctionBuilder : global::MetaDslx.Core.Immutable.MetaTypedElementBuilder, global::MetaDslx.Core.Immutable.MetaNamedElementBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder
    {
        new global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder Type { get; }
        new Func<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder> TypeLazy { get; set; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaParameterBuilder> Parameters { get; }
        global::MetaDslx.Core.Immutable.MetaParameterLazyChildBuilder ParametersLazyChild { get; }
        global::MetaDslx.Core.Immutable.MetaTypeBuilder ReturnType { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnTypeLazy { get; set; }
    
    	new MetaFunction ToImmutable();
    }
    
    public interface MetaFunctionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaTypedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementLazyChildBuilder
    {
        new Func<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder> Type { set; }
        
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnType { set; }
    }
    
    public interface MetaGlobalFunctionBuilder : global::MetaDslx.Core.Immutable.MetaFunctionBuilder, global::MetaDslx.Core.Immutable.MetaDeclarationBuilder
    {
    
    	new MetaGlobalFunction ToImmutable();
    }
    
    public interface MetaGlobalFunctionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaFunctionLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaDeclarationLazyChildBuilder
    {
    }
    
    public interface MetaOperationBuilder : global::MetaDslx.Core.Immutable.MetaFunctionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaTypeBuilder Parent { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ParentLazy { get; set; }
    
    	new MetaOperation ToImmutable();
    }
    
    public interface MetaOperationLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaFunctionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Parent { set; }
    }
    
    public interface MetaConstantBuilder : global::MetaDslx.Core.Immutable.MetaTypedElementBuilder, global::MetaDslx.Core.Immutable.MetaDeclarationBuilder
    {
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Value { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ValueLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValueLazyChild { get; }
    
    	new MetaConstant ToImmutable();
    }
    
    public interface MetaConstantLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaTypedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaDeclarationLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Value { set; }
    }
    
    public interface MetaConstructorBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder
    {
        global::MetaDslx.Core.Immutable.MetaClassBuilder Parent { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> ParentLazy { get; set; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder> Initializers { get; }
        global::MetaDslx.Core.Immutable.MetaPropertyInitializerLazyChildBuilder InitializersLazyChild { get; }
    
    	new MetaConstructor ToImmutable();
    }
    
    public interface MetaConstructorLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> Parent { set; }
        
    }
    
    public interface MetaParameterBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementBuilder, global::MetaDslx.Core.Immutable.MetaTypedElementBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder
    {
        global::MetaDslx.Core.Immutable.MetaFunctionBuilder Function { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaFunctionBuilder> FunctionLazy { get; set; }
    
    	new MetaParameter ToImmutable();
    }
    
    public interface MetaParameterLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaTypedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaFunctionBuilder> Function { set; }
    }
    
    public interface MetaPropertyBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementBuilder, global::MetaDslx.Core.Immutable.MetaTypedElementBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder
    {
        global::MetaDslx.Core.Immutable.MetaPropertyKind Kind { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaPropertyKind> KindLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaClassBuilder Class { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> ClassLazy { get; set; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> OppositeProperties { get; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> SubsettedProperties { get; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> SubsettingProperties { get; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> RedefinedProperties { get; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> RedefiningProperties { get; }
    
    	new MetaProperty ToImmutable();
    }
    
    public interface MetaPropertyLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaTypedElementLazyChildBuilder, global::MetaDslx.Core.Immutable.MetaAnnotatedElementLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaPropertyKind> Kind { set; }
        Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> Class { set; }
        
        
        
        
        
    }
    
    public interface MetaPropertyInitializerBuilder : global::MetaDslx.Core.Immutable.ISymbol
    {
        global::MetaDslx.Core.Immutable.MetaConstructorBuilder Constructor { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> ConstructorLazy { get; set; }
        string PropertyName { get; set; }
        Func<string> PropertyNameLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaClassBuilder PropertyContext { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> PropertyContextLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaPropertyBuilder Property { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> PropertyLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Value { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ValueLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValueLazyChild { get; }
    
    	MetaPropertyInitializer ToImmutable();
    }
    
    public interface MetaPropertyInitializerLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> Constructor { set; }
        Func<string> PropertyName { set; }
        Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> PropertyContext { set; }
        Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> Property { set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Value { set; }
    }
    
    public interface MetaSynthetizedPropertyInitializerBuilder : global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder
    {
    
    	new MetaSynthetizedPropertyInitializer ToImmutable();
    }
    
    public interface MetaSynthetizedPropertyInitializerLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaPropertyInitializerLazyChildBuilder
    {
    }
    
    public interface MetaInheritedPropertyInitializerBuilder : global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder
    {
        string ObjectName { get; set; }
        Func<string> ObjectNameLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaPropertyBuilder Object { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> ObjectLazy { get; set; }
    
    	new MetaInheritedPropertyInitializer ToImmutable();
    }
    
    public interface MetaInheritedPropertyInitializerLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaPropertyInitializerLazyChildBuilder
    {
        Func<string> ObjectName { set; }
        Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> Object { set; }
    }
    
    public interface MetaExpressionBuilder : global::MetaDslx.Core.Immutable.MetaTypedElementBuilder
    {
        bool NoTypeError { get; }
        Func<bool> NoTypeErrorLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType { get; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy { get; set; }
    
    	new MetaExpression ToImmutable();
    }
    
    public interface MetaExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaTypedElementLazyChildBuilder
    {
        Func<bool> NoTypeError { set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType { set; }
    }
    
    public interface MetaBracketExpressionBuilder : global::MetaDslx.Core.Immutable.MetaExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild { get; }
    
    	new MetaBracketExpression ToImmutable();
    }
    
    public interface MetaBracketExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression { set; }
    }
    
    public interface MetaBoundExpressionBuilder : global::MetaDslx.Core.Immutable.MetaExpressionBuilder
    {
        bool UniqueDefinition { get; }
        Func<bool> UniqueDefinitionLazy { get; set; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments { get; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild { get; }
        global::MetaDslx.Core.BindingInfo Definitions { get; }
        Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy { get; set; }
        global::MetaDslx.Core.Immutable.ISymbol Definition { get; }
        Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy { get; set; }
    
    	new MetaBoundExpression ToImmutable();
    }
    
    public interface MetaBoundExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder
    {
        Func<bool> UniqueDefinition { set; }
        
        Func<global::MetaDslx.Core.BindingInfo> Definitions { set; }
        Func<global::MetaDslx.Core.Immutable.ISymbol> Definition { set; }
    }
    
    public interface MetaThisExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder
    {
    
    	new MetaThisExpression ToImmutable();
    }
    
    public interface MetaThisExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionLazyChildBuilder
    {
    }
    
    public interface MetaNullExpressionBuilder : global::MetaDslx.Core.Immutable.MetaExpressionBuilder
    {
    
    	new MetaNullExpression ToImmutable();
    }
    
    public interface MetaNullExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder
    {
    }
    
    public interface MetaTypeConversionExpressionBuilder : global::MetaDslx.Core.Immutable.MetaExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaTypeBuilder TypeReference { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReferenceLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild { get; }
    
    	new MetaTypeConversionExpression ToImmutable();
    }
    
    public interface MetaTypeConversionExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReference { set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression { set; }
    }
    
    public interface MetaTypeAsExpressionBuilder : global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder
    {
    
    	new MetaTypeAsExpression ToImmutable();
    }
    
    public interface MetaTypeAsExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionLazyChildBuilder
    {
    }
    
    public interface MetaTypeCastExpressionBuilder : global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder
    {
    
    	new MetaTypeCastExpression ToImmutable();
    }
    
    public interface MetaTypeCastExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionLazyChildBuilder
    {
    }
    
    public interface MetaTypeCheckExpressionBuilder : global::MetaDslx.Core.Immutable.MetaExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaTypeBuilder TypeReference { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReferenceLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild { get; }
    
    	new MetaTypeCheckExpression ToImmutable();
    }
    
    public interface MetaTypeCheckExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReference { set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression { set; }
    }
    
    public interface MetaTypeOfExpressionBuilder : global::MetaDslx.Core.Immutable.MetaExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaTypeBuilder TypeReference { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReferenceLazy { get; set; }
    
    	new MetaTypeOfExpression ToImmutable();
    }
    
    public interface MetaTypeOfExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReference { set; }
    }
    
    public interface MetaConditionalExpressionBuilder : global::MetaDslx.Core.Immutable.MetaExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Condition { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ConditionLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ConditionLazyChild { get; }
        global::MetaDslx.Core.Immutable.MetaTypeBuilder BalancedType { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> BalancedTypeLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Then { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ThenLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ThenLazyChild { get; }
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Else { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ElseLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ElseLazyChild { get; }
    
    	new MetaConditionalExpression ToImmutable();
    }
    
    public interface MetaConditionalExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Condition { set; }
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> BalancedType { set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Then { set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Else { set; }
    }
    
    public interface MetaConstantExpressionBuilder : global::MetaDslx.Core.Immutable.MetaExpressionBuilder
    {
        object Value { get; set; }
        Func<object> ValueLazy { get; set; }
    
    	new MetaConstantExpression ToImmutable();
    }
    
    public interface MetaConstantExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder
    {
        Func<object> Value { set; }
    }
    
    public interface MetaIdentifierExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder
    {
        string Name { get; set; }
        Func<string> NameLazy { get; set; }
    
    	new MetaIdentifierExpression ToImmutable();
    }
    
    public interface MetaIdentifierExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionLazyChildBuilder
    {
        Func<string> Name { set; }
    }
    
    public interface MetaMemberAccessExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild { get; }
        string Name { get; set; }
        Func<string> NameLazy { get; set; }
    
    	new MetaMemberAccessExpression ToImmutable();
    }
    
    public interface MetaMemberAccessExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression { set; }
        Func<string> Name { set; }
    }
    
    public interface MetaFunctionCallExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild { get; }
    
    	new MetaFunctionCallExpression ToImmutable();
    }
    
    public interface MetaFunctionCallExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression { set; }
    }
    
    public interface MetaIndexerExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild { get; }
    
    	new MetaIndexerExpression ToImmutable();
    }
    
    public interface MetaIndexerExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression { set; }
    }
    
    public interface MetaNewExpressionBuilder : global::MetaDslx.Core.Immutable.MetaExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaClassBuilder TypeReference { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> TypeReferenceLazy { get; set; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder> PropertyInitializers { get; }
        global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerLazyChildBuilder PropertyInitializersLazyChild { get; }
    
    	new MetaNewExpression ToImmutable();
    }
    
    public interface MetaNewExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> TypeReference { set; }
        
    }
    
    public interface MetaNewPropertyInitializerBuilder : global::MetaDslx.Core.Immutable.ISymbol
    {
        global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder Parent { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder> ParentLazy { get; set; }
        string PropertyName { get; set; }
        Func<string> PropertyNameLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Value { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ValueLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValueLazyChild { get; }
        global::MetaDslx.Core.Immutable.MetaPropertyBuilder Property { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> PropertyLazy { get; set; }
    
    	MetaNewPropertyInitializer ToImmutable();
    }
    
    public interface MetaNewPropertyInitializerLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder> Parent { set; }
        Func<string> PropertyName { set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Value { set; }
        Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> Property { set; }
    }
    
    public interface MetaNewCollectionExpressionBuilder : global::MetaDslx.Core.Immutable.MetaExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder TypeReference { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder> TypeReferenceLazy { get; set; }
        global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Values { get; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValuesLazyChild { get; }
    
    	new MetaNewCollectionExpression ToImmutable();
    }
    
    public interface MetaNewCollectionExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder> TypeReference { set; }
        
    }
    
    public interface MetaOperatorExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder
    {
        string Name { get; }
        Func<string> NameLazy { get; set; }
    
    	new MetaOperatorExpression ToImmutable();
    }
    
    public interface MetaOperatorExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBoundExpressionLazyChildBuilder
    {
        Func<string> Name { set; }
    }
    
    public interface MetaUnaryExpressionBuilder : global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild { get; }
    
    	new MetaUnaryExpression ToImmutable();
    }
    
    public interface MetaUnaryExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaOperatorExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression { set; }
    }
    
    public interface MetaUnaryPlusExpressionBuilder : global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder
    {
    
    	new MetaUnaryPlusExpression ToImmutable();
    }
    
    public interface MetaUnaryPlusExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaUnaryExpressionLazyChildBuilder
    {
    }
    
    public interface MetaNegateExpressionBuilder : global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder
    {
    
    	new MetaNegateExpression ToImmutable();
    }
    
    public interface MetaNegateExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaUnaryExpressionLazyChildBuilder
    {
    }
    
    public interface MetaOnesComplementExpressionBuilder : global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder
    {
    
    	new MetaOnesComplementExpression ToImmutable();
    }
    
    public interface MetaOnesComplementExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaUnaryExpressionLazyChildBuilder
    {
    }
    
    public interface MetaNotExpressionBuilder : global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder
    {
    
    	new MetaNotExpression ToImmutable();
    }
    
    public interface MetaNotExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaUnaryExpressionLazyChildBuilder
    {
    }
    
    public interface MetaUnaryAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder
    {
    
    	new MetaUnaryAssignExpression ToImmutable();
    }
    
    public interface MetaUnaryAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaUnaryExpressionLazyChildBuilder
    {
    }
    
    public interface MetaPostIncrementAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder
    {
    
    	new MetaPostIncrementAssignExpression ToImmutable();
    }
    
    public interface MetaPostIncrementAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionLazyChildBuilder
    {
    }
    
    public interface MetaPostDecrementAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder
    {
    
    	new MetaPostDecrementAssignExpression ToImmutable();
    }
    
    public interface MetaPostDecrementAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionLazyChildBuilder
    {
    }
    
    public interface MetaPreIncrementAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder
    {
    
    	new MetaPreIncrementAssignExpression ToImmutable();
    }
    
    public interface MetaPreIncrementAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionLazyChildBuilder
    {
    }
    
    public interface MetaPreDecrementAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder
    {
    
    	new MetaPreDecrementAssignExpression ToImmutable();
    }
    
    public interface MetaPreDecrementAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionLazyChildBuilder
    {
    }
    
    public interface MetaBinaryExpressionBuilder : global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder
    {
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild { get; }
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right { get; set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy { get; set; }
        global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild { get; }
    
    	new MetaBinaryExpression ToImmutable();
    }
    
    public interface MetaBinaryExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaOperatorExpressionLazyChildBuilder
    {
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left { set; }
        Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right { set; }
    }
    
    public interface MetaBinaryArithmeticExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder
    {
    
    	new MetaBinaryArithmeticExpression ToImmutable();
    }
    
    public interface MetaBinaryArithmeticExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryExpressionLazyChildBuilder
    {
    }
    
    public interface MetaMultiplyExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder
    {
    
    	new MetaMultiplyExpression ToImmutable();
    }
    
    public interface MetaMultiplyExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionLazyChildBuilder
    {
    }
    
    public interface MetaDivideExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder
    {
    
    	new MetaDivideExpression ToImmutable();
    }
    
    public interface MetaDivideExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionLazyChildBuilder
    {
    }
    
    public interface MetaModuloExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder
    {
    
    	new MetaModuloExpression ToImmutable();
    }
    
    public interface MetaModuloExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionLazyChildBuilder
    {
    }
    
    public interface MetaAddExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder
    {
    
    	new MetaAddExpression ToImmutable();
    }
    
    public interface MetaAddExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionLazyChildBuilder
    {
    }
    
    public interface MetaSubtractExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder
    {
    
    	new MetaSubtractExpression ToImmutable();
    }
    
    public interface MetaSubtractExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionLazyChildBuilder
    {
    }
    
    public interface MetaLeftShiftExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder
    {
    
    	new MetaLeftShiftExpression ToImmutable();
    }
    
    public interface MetaLeftShiftExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionLazyChildBuilder
    {
    }
    
    public interface MetaRightShiftExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder
    {
    
    	new MetaRightShiftExpression ToImmutable();
    }
    
    public interface MetaRightShiftExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionLazyChildBuilder
    {
    }
    
    public interface MetaBinaryComparisonExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder
    {
    
    	new MetaBinaryComparisonExpression ToImmutable();
    }
    
    public interface MetaBinaryComparisonExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryExpressionLazyChildBuilder
    {
    }
    
    public interface MetaLessThanExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder
    {
    
    	new MetaLessThanExpression ToImmutable();
    }
    
    public interface MetaLessThanExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionLazyChildBuilder
    {
    }
    
    public interface MetaLessThanOrEqualExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder
    {
    
    	new MetaLessThanOrEqualExpression ToImmutable();
    }
    
    public interface MetaLessThanOrEqualExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionLazyChildBuilder
    {
    }
    
    public interface MetaGreaterThanExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder
    {
    
    	new MetaGreaterThanExpression ToImmutable();
    }
    
    public interface MetaGreaterThanExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionLazyChildBuilder
    {
    }
    
    public interface MetaGreaterThanOrEqualExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder
    {
    
    	new MetaGreaterThanOrEqualExpression ToImmutable();
    }
    
    public interface MetaGreaterThanOrEqualExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionLazyChildBuilder
    {
    }
    
    public interface MetaEqualExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder
    {
    
    	new MetaEqualExpression ToImmutable();
    }
    
    public interface MetaEqualExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionLazyChildBuilder
    {
    }
    
    public interface MetaNotEqualExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder
    {
    
    	new MetaNotEqualExpression ToImmutable();
    }
    
    public interface MetaNotEqualExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionLazyChildBuilder
    {
    }
    
    public interface MetaBinaryLogicalExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder
    {
    
    	new MetaBinaryLogicalExpression ToImmutable();
    }
    
    public interface MetaBinaryLogicalExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryExpressionLazyChildBuilder
    {
    }
    
    public interface MetaAndExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder
    {
    
    	new MetaAndExpression ToImmutable();
    }
    
    public interface MetaAndExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionLazyChildBuilder
    {
    }
    
    public interface MetaOrExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder
    {
    
    	new MetaOrExpression ToImmutable();
    }
    
    public interface MetaOrExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionLazyChildBuilder
    {
    }
    
    public interface MetaExclusiveOrExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder
    {
    
    	new MetaExclusiveOrExpression ToImmutable();
    }
    
    public interface MetaExclusiveOrExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionLazyChildBuilder
    {
    }
    
    public interface MetaAndAlsoExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder
    {
    
    	new MetaAndAlsoExpression ToImmutable();
    }
    
    public interface MetaAndAlsoExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionLazyChildBuilder
    {
    }
    
    public interface MetaOrElseExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder
    {
    
    	new MetaOrElseExpression ToImmutable();
    }
    
    public interface MetaOrElseExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionLazyChildBuilder
    {
    }
    
    public interface MetaNullCoalescingExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder
    {
    
    	new MetaNullCoalescingExpression ToImmutable();
    }
    
    public interface MetaNullCoalescingExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryExpressionLazyChildBuilder
    {
    }
    
    public interface MetaAssignmentExpressionBuilder : global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder
    {
    
    	new MetaAssignmentExpression ToImmutable();
    }
    
    public interface MetaAssignmentExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaBinaryExpressionLazyChildBuilder
    {
    }
    
    public interface MetaAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder
    {
    
    	new MetaAssignExpression ToImmutable();
    }
    
    public interface MetaAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaArithmeticAssignmentExpressionBuilder : global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder
    {
    
    	new MetaArithmeticAssignmentExpression ToImmutable();
    }
    
    public interface MetaArithmeticAssignmentExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaMultiplyAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder
    {
    
    	new MetaMultiplyAssignExpression ToImmutable();
    }
    
    public interface MetaMultiplyAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaDivideAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder
    {
    
    	new MetaDivideAssignExpression ToImmutable();
    }
    
    public interface MetaDivideAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaModuloAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder
    {
    
    	new MetaModuloAssignExpression ToImmutable();
    }
    
    public interface MetaModuloAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaAddAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder
    {
    
    	new MetaAddAssignExpression ToImmutable();
    }
    
    public interface MetaAddAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaSubtractAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder
    {
    
    	new MetaSubtractAssignExpression ToImmutable();
    }
    
    public interface MetaSubtractAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaLeftShiftAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder
    {
    
    	new MetaLeftShiftAssignExpression ToImmutable();
    }
    
    public interface MetaLeftShiftAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaRightShiftAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder
    {
    
    	new MetaRightShiftAssignExpression ToImmutable();
    }
    
    public interface MetaRightShiftAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaLogicalAssignmentExpressionBuilder : global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder
    {
    
    	new MetaLogicalAssignmentExpression ToImmutable();
    }
    
    public interface MetaLogicalAssignmentExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaAndAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder
    {
    
    	new MetaAndAssignExpression ToImmutable();
    }
    
    public interface MetaAndAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaExclusiveOrAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder
    {
    
    	new MetaExclusiveOrAssignExpression ToImmutable();
    }
    
    public interface MetaExclusiveOrAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionLazyChildBuilder
    {
    }
    
    public interface MetaOrAssignExpressionBuilder : global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder
    {
    
    	new MetaOrAssignExpression ToImmutable();
    }
    
    public interface MetaOrAssignExpressionLazyChildBuilder : global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionLazyChildBuilder
    {
    }
    
    internal class MetaAnnotatedElementImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAnnotatedElement
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaAnnotatedElementImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaAnnotatedElement;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    }
    
    internal class MetaDocumentedElementImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaDocumentedElement
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
    
        internal MetaDocumentedElementImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaDocumentedElement;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaNamedElementImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNamedElement
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
    
        internal MetaNamedElementImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaNamedElement;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNamedElementBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaTypedElementImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypedElement
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaTypedElementImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaTypedElement;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypedElementBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaTypeImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaType
    {
    
        internal MetaTypeImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaType;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypeBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeBuilder)base.ToMutable();
    	}
    }
    
    internal class MetaAnnotationImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAnnotation
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationProperty> properties0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
    
        internal MetaAnnotationImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaAnnotation;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAnnotationBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotationBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationProperty> Properties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotation.PropertiesProperty, ref properties0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaAnnotationPropertyImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAnnotationProperty
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression value0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
    
        internal MetaAnnotationPropertyImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaAnnotationProperty;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotationProperty.ValueProperty, ref value0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaNamespaceImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNamespace
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaNamespace parent0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNamespace> usings0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaModel metaModel0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNamespace> namespaces0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaDeclaration> declarations0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaNamespaceImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaNamespace;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNamespaceBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamespaceBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespace Parent
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespace>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.ParentProperty, ref parent0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNamespace> Usings
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaNamespace>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.UsingsProperty, ref usings0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModel MetaModel
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModel>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.MetaModelProperty, ref metaModel0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNamespace> Namespaces
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaNamespace>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.NamespacesProperty, ref namespaces0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaDeclaration> Declarations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaDeclaration>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.DeclarationsProperty, ref declarations0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaDeclarationImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaDeclaration
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaNamespace namespace0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaModel model0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaDeclarationImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaDeclaration;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaDeclarationBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDeclarationBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespace Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespace>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, ref namespace0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModel Model
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModel>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, ref model0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaModelImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaModel
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string uri0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaNamespace namespace0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaModelImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaModel;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaModelBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaModelBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public string Uri
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.UriProperty, ref uri0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespace Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespace>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.NamespaceProperty, ref namespace0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaCollectionTypeImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaCollectionType
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaCollectionKind kind0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType innerType0;
    
        internal MetaCollectionTypeImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaCollectionType;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypeBuilder global::MetaDslx.Core.Immutable.MetaType.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaCollectionKind Kind
        {
            get { return this.GetValue<global::MetaDslx.Core.Immutable.MetaCollectionKind>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.KindProperty, ref kind0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType InnerType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.InnerTypeProperty, ref innerType0); }
        }
    }
    
    internal class MetaNullableTypeImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNullableType
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType innerType0;
    
        internal MetaNullableTypeImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaNullableType;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNullableTypeBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNullableTypeBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypeBuilder global::MetaDslx.Core.Immutable.MetaType.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaType InnerType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNullableType.InnerTypeProperty, ref innerType0); }
        }
    }
    
    internal class MetaPrimitiveTypeImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPrimitiveType
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
    
        internal MetaPrimitiveTypeImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaPrimitiveType;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypeBuilder global::MetaDslx.Core.Immutable.MetaType.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaEnumImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaEnum
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaEnumLiteral> enumLiterals0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> operations0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaNamespace namespace0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaModel model0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaEnumImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaEnum;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaEnumBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaEnumBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypeBuilder global::MetaDslx.Core.Immutable.MetaType.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDeclarationBuilder global::MetaDslx.Core.Immutable.MetaDeclaration.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDeclarationBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaEnumLiteral> EnumLiterals
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaEnumLiteral>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnum.EnumLiteralsProperty, ref enumLiterals0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> Operations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaOperation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnum.OperationsProperty, ref operations0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespace Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespace>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, ref namespace0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModel Model
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModel>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, ref model0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaEnumLiteralImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaEnumLiteral
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaEnum enum0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaEnumLiteralImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaEnumLiteral;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaEnum Enum
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaEnum>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnumLiteral.EnumProperty, ref enum0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaClassImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaClass
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool isAbstract0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaClass> superClasses0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> properties0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> operations0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaConstructor constructor0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaNamespace namespace0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaModel model0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaClassImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaClass;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaClassBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaClassBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypeBuilder global::MetaDslx.Core.Immutable.MetaType.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDeclarationBuilder global::MetaDslx.Core.Immutable.MetaDeclaration.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDeclarationBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public bool IsAbstract
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.IsAbstractProperty, ref isAbstract0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaClass> SuperClasses
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaClass>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.SuperClassesProperty, ref superClasses0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> Properties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.PropertiesProperty, ref properties0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> Operations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaOperation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.OperationsProperty, ref operations0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaConstructor Constructor
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaConstructor>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.ConstructorProperty, ref constructor0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespace Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespace>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, ref namespace0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModel Model
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModel>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, ref model0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaClass> global::MetaDslx.Core.Immutable.MetaClass.GetAllSuperClasses()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaClass_GetAllSuperClasses(this);
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> global::MetaDslx.Core.Immutable.MetaClass.GetAllProperties()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaClass_GetAllProperties(this);
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> global::MetaDslx.Core.Immutable.MetaClass.GetAllOperations()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaClass_GetAllOperations(this);
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> global::MetaDslx.Core.Immutable.MetaClass.GetAllImplementedProperties()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaClass_GetAllImplementedProperties(this);
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> global::MetaDslx.Core.Immutable.MetaClass.GetAllImplementedOperations()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaClass_GetAllImplementedOperations(this);
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaFunctionTypeImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaFunctionType
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaType> parameterTypes0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType returnType0;
    
        internal MetaFunctionTypeImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaFunctionType;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypeBuilder global::MetaDslx.Core.Immutable.MetaType.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaType> ParameterTypes
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionType.ParameterTypesProperty, ref parameterTypes0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ReturnType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionType.ReturnTypeProperty, ref returnType0); }
        }
    }
    
    internal class MetaFunctionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaFunction
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaFunctionType type0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaParameter> parameters0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType returnType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type1;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaFunctionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaFunction;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaFunctionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaFunctionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaFunctionType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaFunctionType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty, ref type0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaParameter> Parameters
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaParameter>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty, ref parameters0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ReturnType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, ref returnType0); }
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        global::MetaDslx.Core.Immutable.MetaType global::MetaDslx.Core.Immutable.MetaTypedElement.Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type1); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaGlobalFunctionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaGlobalFunction
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaFunctionType type0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaParameter> parameters0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType returnType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type1;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaNamespace namespace0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaModel model0;
    
        internal MetaGlobalFunctionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaGlobalFunction;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaFunctionBuilder global::MetaDslx.Core.Immutable.MetaFunction.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaFunctionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDeclarationBuilder global::MetaDslx.Core.Immutable.MetaDeclaration.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDeclarationBuilder)base.ToMutable();
    	}
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        global::MetaDslx.Core.Immutable.MetaFunctionType global::MetaDslx.Core.Immutable.MetaFunction.Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaFunctionType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty, ref type0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaParameter> Parameters
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaParameter>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty, ref parameters0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ReturnType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, ref returnType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type1); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespace Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespace>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, ref namespace0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModel Model
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModel>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, ref model0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaOperationImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOperation
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType parent0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaFunctionType type0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaParameter> parameters0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType returnType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type1;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaOperationImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaOperation;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOperationBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperationBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaFunctionBuilder global::MetaDslx.Core.Immutable.MetaFunction.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaFunctionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaType Parent
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperation.ParentProperty, ref parent0); }
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        global::MetaDslx.Core.Immutable.MetaFunctionType global::MetaDslx.Core.Immutable.MetaFunction.Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaFunctionType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty, ref type0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaParameter> Parameters
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaParameter>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty, ref parameters0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ReturnType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, ref returnType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type1); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaConstantImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaConstant
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression value0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaNamespace namespace0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaModel model0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaConstantImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaConstant;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaConstantBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaConstantBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDeclarationBuilder global::MetaDslx.Core.Immutable.MetaDeclaration.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDeclarationBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstant.ValueProperty, ref value0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespace Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespace>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, ref namespace0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModel Model
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModel>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, ref model0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaConstructorImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaConstructor
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaClass parent0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyInitializer> initializers0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaConstructorImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaConstructor;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaConstructorBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaConstructorBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaClass Parent
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClass>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstructor.ParentProperty, ref parent0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyInitializer> Initializers
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaPropertyInitializer>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstructor.InitializersProperty, ref initializers0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaParameterImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaParameter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaFunction function0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaParameterImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaParameter;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaParameterBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaParameterBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaFunction Function
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaFunction>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaParameter.FunctionProperty, ref function0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaPropertyImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaProperty
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaPropertyKind kind0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaClass class0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> oppositeProperties0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> subsettedProperties0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> subsettingProperties0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> redefinedProperties0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> redefiningProperties0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string documentation0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> annotations0;
    
        internal MetaPropertyImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaProperty;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPropertyBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPropertyBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElementBuilder global::MetaDslx.Core.Immutable.MetaNamedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder global::MetaDslx.Core.Immutable.MetaDocumentedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder global::MetaDslx.Core.Immutable.MetaAnnotatedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaPropertyKind Kind
        {
            get { return this.GetValue<global::MetaDslx.Core.Immutable.MetaPropertyKind>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.KindProperty, ref kind0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaClass Class
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClass>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.ClassProperty, ref class0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> OppositeProperties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.OppositePropertiesProperty, ref oppositeProperties0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> SubsettedProperties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.SubsettedPropertiesProperty, ref subsettedProperties0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> SubsettingProperties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.SubsettingPropertiesProperty, ref subsettingProperties0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> RedefinedProperties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.RedefinedPropertiesProperty, ref redefinedProperties0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> RedefiningProperties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.RedefiningPropertiesProperty, ref redefiningProperties0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, ref name0); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, ref documentation0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotation> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotation>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
    
        
        global::MetaDslx.Core.Immutable.IImmutableModelList<string> global::MetaDslx.Core.Immutable.MetaDocumentedElement.GetDocumentationLines()
        {
            return global::MetaDslx.Core.Immutable.MetaImplementationProvider.Implementation.MetaDocumentedElement_GetDocumentationLines(this);
        }
    }
    
    internal class MetaPropertyInitializerImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPropertyInitializer
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaConstructor constructor0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string propertyName0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaClass propertyContext0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaProperty property0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression value0;
    
        internal MetaPropertyInitializerImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaPropertyInitializer;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaConstructor Constructor
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaConstructor>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, ref constructor0); }
        }
    
        
        public string PropertyName
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, ref propertyName0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaClass PropertyContext
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClass>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, ref propertyContext0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaProperty Property
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, ref property0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, ref value0); }
        }
    }
    
    internal class MetaSynthetizedPropertyInitializerImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializer
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaConstructor constructor0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string propertyName0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaClass propertyContext0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaProperty property0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression value0;
    
        internal MetaSynthetizedPropertyInitializerImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaSynthetizedPropertyInitializer;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder global::MetaDslx.Core.Immutable.MetaPropertyInitializer.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaConstructor Constructor
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaConstructor>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, ref constructor0); }
        }
    
        
        public string PropertyName
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, ref propertyName0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaClass PropertyContext
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClass>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, ref propertyContext0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaProperty Property
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, ref property0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, ref value0); }
        }
    }
    
    internal class MetaInheritedPropertyInitializerImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializer
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string objectName0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaProperty object0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaConstructor constructor0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string propertyName0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaClass propertyContext0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaProperty property0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression value0;
    
        internal MetaInheritedPropertyInitializerImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaInheritedPropertyInitializer;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder global::MetaDslx.Core.Immutable.MetaPropertyInitializer.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder)base.ToMutable();
    	}
    
        
        public string ObjectName
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectNameProperty, ref objectName0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaProperty Object
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectProperty, ref object0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaConstructor Constructor
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaConstructor>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, ref constructor0); }
        }
    
        
        public string PropertyName
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, ref propertyName0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaClass PropertyContext
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClass>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, ref propertyContext0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaProperty Property
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, ref property0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, ref value0); }
        }
    }
    
    internal class MetaExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaBracketExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBracketExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaBracketExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaBracketExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBracketExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBracketExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBracketExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaBoundExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBoundExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaBoundExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaBoundExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaThisExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaThisExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaThisExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaThisExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaThisExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaThisExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaNullExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNullExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaNullExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaNullExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNullExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNullExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaTypeConversionExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypeConversionExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType typeReference0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaTypeConversionExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaTypeConversionExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaType TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, ref typeReference0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaTypeAsExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypeAsExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType typeReference0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaTypeAsExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaTypeAsExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypeAsExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeAsExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder global::MetaDslx.Core.Immutable.MetaTypeConversionExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaType TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, ref typeReference0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaTypeCastExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypeCastExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType typeReference0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaTypeCastExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaTypeCastExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypeCastExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeCastExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder global::MetaDslx.Core.Immutable.MetaTypeConversionExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaType TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, ref typeReference0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaTypeCheckExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypeCheckExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType typeReference0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaTypeCheckExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaTypeCheckExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypeCheckExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeCheckExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaType TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.TypeReferenceProperty, ref typeReference0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaTypeOfExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypeOfExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType typeReference0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaTypeOfExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaTypeOfExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaType TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeOfExpression.TypeReferenceProperty, ref typeReference0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaConditionalExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaConditionalExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression condition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType balancedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression then0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression else0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaConditionalExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaConditionalExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaConditionalExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaConditionalExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Condition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ConditionProperty, ref condition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType BalancedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.BalancedTypeProperty, ref balancedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Then
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ThenProperty, ref then0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Else
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ElseProperty, ref else0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaConstantExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaConstantExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private object value0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaConstantExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaConstantExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public object Value
        {
            get { return this.GetReference<object>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstantExpression.ValueProperty, ref value0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaIdentifierExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaIdentifierExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaIdentifierExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaIdentifierExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIdentifierExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaMemberAccessExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaMemberAccessExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaMemberAccessExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaMemberAccessExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaFunctionCallExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaFunctionCallExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaFunctionCallExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaFunctionCallExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionCallExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaIndexerExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaIndexerExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaIndexerExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaIndexerExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaIndexerExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaIndexerExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIndexerExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaNewExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNewExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaClass typeReference0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer> propertyInitializers0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaNewExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaNewExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaClass TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClass>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewExpression.TypeReferenceProperty, ref typeReference0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer> PropertyInitializers
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewExpression.PropertyInitializersProperty, ref propertyInitializers0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaNewPropertyInitializerImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaNewExpression parent0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string propertyName0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression value0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaProperty property0;
    
        internal MetaNewPropertyInitializerImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaNewPropertyInitializer;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaNewExpression Parent
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNewExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ParentProperty, ref parent0); }
        }
    
        
        public string PropertyName
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyNameProperty, ref propertyName0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ValueProperty, ref value0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaProperty Property
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaProperty>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyProperty, ref property0); }
        }
    }
    
    internal class MetaNewCollectionExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNewCollectionExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaCollectionType typeReference0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> values0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaNewCollectionExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaNewCollectionExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNewCollectionExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNewCollectionExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaCollectionType TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaCollectionType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewCollectionExpression.TypeReferenceProperty, ref typeReference0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Values
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewCollectionExpression.ValuesProperty, ref values0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaOperatorExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOperatorExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaOperatorExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaOperatorExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaUnaryExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaUnaryExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaUnaryExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaUnaryExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaUnaryPlusExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaUnaryPlusExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaUnaryPlusExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaUnaryPlusExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaUnaryPlusExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryPlusExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaNegateExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNegateExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaNegateExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaNegateExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNegateExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNegateExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaOnesComplementExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOnesComplementExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaOnesComplementExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaOnesComplementExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOnesComplementExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOnesComplementExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaNotExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNotExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaNotExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaNotExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNotExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNotExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaUnaryAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaUnaryAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaUnaryAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaPostIncrementAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPostIncrementAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaPostIncrementAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaPostIncrementAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPostIncrementAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPostIncrementAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaPostDecrementAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPostDecrementAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaPostDecrementAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaPostDecrementAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPostDecrementAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPostDecrementAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaPreIncrementAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPreIncrementAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaPreIncrementAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaPreIncrementAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPreIncrementAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPreIncrementAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaPreDecrementAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPreDecrementAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression expression0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaPreDecrementAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaPreDecrementAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPreDecrementAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPreDecrementAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaUnaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, ref expression0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaBinaryExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBinaryExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaBinaryExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaBinaryExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaBinaryArithmeticExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaBinaryArithmeticExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaBinaryArithmeticExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaMultiplyExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaMultiplyExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaMultiplyExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaMultiplyExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaMultiplyExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaMultiplyExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaDivideExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaDivideExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaDivideExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaDivideExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaDivideExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDivideExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaModuloExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaModuloExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaModuloExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaModuloExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaModuloExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaModuloExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaAddExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAddExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaAddExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaAddExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAddExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAddExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaSubtractExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaSubtractExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaSubtractExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaSubtractExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaSubtractExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaSubtractExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaLeftShiftExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaLeftShiftExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaLeftShiftExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaLeftShiftExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaLeftShiftExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLeftShiftExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaRightShiftExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaRightShiftExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaRightShiftExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaRightShiftExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaRightShiftExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaRightShiftExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaBinaryComparisonExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaBinaryComparisonExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaBinaryComparisonExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaLessThanExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaLessThanExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaLessThanExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaLessThanExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaLessThanExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLessThanExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaLessThanOrEqualExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaLessThanOrEqualExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaLessThanOrEqualExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaLessThanOrEqualExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaLessThanOrEqualExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLessThanOrEqualExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaGreaterThanExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaGreaterThanExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaGreaterThanExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaGreaterThanExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaGreaterThanExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaGreaterThanExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaGreaterThanOrEqualExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaGreaterThanOrEqualExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaGreaterThanOrEqualExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaGreaterThanOrEqualExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaGreaterThanOrEqualExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaGreaterThanOrEqualExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaEqualExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaEqualExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaEqualExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaEqualExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaEqualExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaEqualExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaNotEqualExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNotEqualExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaNotEqualExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaNotEqualExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNotEqualExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNotEqualExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaBinaryLogicalExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaBinaryLogicalExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaBinaryLogicalExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaAndExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAndExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaAndExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaAndExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAndExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAndExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaOrExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOrExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaOrExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaOrExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOrExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOrExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaExclusiveOrExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaExclusiveOrExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaExclusiveOrExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaExclusiveOrExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaExclusiveOrExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExclusiveOrExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaAndAlsoExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAndAlsoExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaAndAlsoExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaAndAlsoExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAndAlsoExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAndAlsoExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaOrElseExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOrElseExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaOrElseExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaOrElseExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOrElseExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOrElseExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaNullCoalescingExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNullCoalescingExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaNullCoalescingExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaNullCoalescingExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNullCoalescingExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNullCoalescingExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaAssignmentExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAssignmentExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaAssignmentExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaAssignmentExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaArithmeticAssignmentExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaArithmeticAssignmentExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaArithmeticAssignmentExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaMultiplyAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaMultiplyAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaMultiplyAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaMultiplyAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaMultiplyAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaMultiplyAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaDivideAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaDivideAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaDivideAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaDivideAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaDivideAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDivideAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaModuloAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaModuloAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaModuloAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaModuloAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaModuloAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaModuloAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaAddAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAddAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaAddAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaAddAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAddAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAddAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaSubtractAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaSubtractAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaSubtractAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaSubtractAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaSubtractAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaSubtractAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaLeftShiftAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaLeftShiftAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaLeftShiftAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaLeftShiftAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaLeftShiftAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLeftShiftAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaRightShiftAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaRightShiftAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaRightShiftAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaRightShiftAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaRightShiftAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaRightShiftAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaLogicalAssignmentExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaLogicalAssignmentExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaLogicalAssignmentExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaAndAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAndAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaAndAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaAndAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAndAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAndAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaExclusiveOrAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaExclusiveOrAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaExclusiveOrAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaExclusiveOrAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaExclusiveOrAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExclusiveOrAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaOrAssignExpressionImpl : global::MetaDslx.Core.Immutable.ImmutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOrAssignExpression
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression left0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaExpression right0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private string name0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool uniqueDefinition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> arguments0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.BindingInfo definitions0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.ISymbol definition0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool noTypeError0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType expectedType0;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private global::MetaDslx.Core.Immutable.MetaType type0;
    
        internal MetaOrAssignExpressionImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.ImmutableModel model)
    		: base(id, model)
        {
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null; /*global::MetaDslx.Core.MetaInstance.MetaOrAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOrAssignExpressionBuilder ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOrAssignExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder global::MetaDslx.Core.Immutable.MetaAssignmentExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder global::MetaDslx.Core.Immutable.MetaBinaryExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder global::MetaDslx.Core.Immutable.MetaOperatorExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder global::MetaDslx.Core.Immutable.MetaBoundExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpressionBuilder global::MetaDslx.Core.Immutable.MetaExpression.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpressionBuilder)base.ToMutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElementBuilder global::MetaDslx.Core.Immutable.MetaTypedElement.ToMutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElementBuilder)base.ToMutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, ref left0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpression Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, ref right0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, ref name0); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, ref uniqueDefinition0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaExpression> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpression>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, ref definitions0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, ref definition0); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, ref noTypeError0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, ref expectedType0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaType Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaType>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, ref type0); }
        }
    }
    
    internal class MetaAnnotatedElementBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaAnnotatedElementBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaAnnotatedElement(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAnnotatedElement;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAnnotatedElement ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaAnnotatedElementLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaAnnotatedElementLazyChildBuilder
    {
        internal MetaAnnotatedElementLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
    }
    
    internal class MetaDocumentedElementBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder
    {
    
        internal MetaDocumentedElementBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaDocumentedElement(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaDocumentedElement;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaDocumentedElement ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    }
    
    public class MetaDocumentedElementLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaDocumentedElementLazyChildBuilder
    {
        internal MetaDocumentedElementLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    }
    
    internal class MetaNamedElementBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNamedElementBuilder
    {
    
        internal MetaNamedElementBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaNamedElement(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNamedElement;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNamedElement ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    }
    
    public class MetaNamedElementLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaNamedElementLazyChildBuilder
    {
        internal MetaNamedElementLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    }
    
    internal class MetaTypedElementBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypedElementBuilder
    {
    
        internal MetaTypedElementBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaTypedElement(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypedElement;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypedElement ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaTypedElementLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaTypedElementLazyChildBuilder
    {
        internal MetaTypedElementLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaTypeBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypeBuilder
    {
    
        internal MetaTypeBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaType(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaType;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaType ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaType)base.ToImmutable();
    	}
    }
    
    public class MetaTypeLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaTypeLazyChildBuilder
    {
        internal MetaTypeLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
    }
    
    internal class MetaAnnotationBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAnnotationBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder> properties0;
    
        internal MetaAnnotationBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotation.PropertiesProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaAnnotation(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAnnotation;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAnnotation ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotation)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder> Properties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotation.PropertiesProperty, ref properties0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationPropertyLazyChildBuilder PropertiesLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationPropertyLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotation.PropertiesProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    }
    
    public class MetaAnnotationLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder
    {
        internal MetaAnnotationLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    }
    
    internal class MetaAnnotationPropertyBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder
    {
    
        internal MetaAnnotationPropertyBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotationProperty.ValueProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaAnnotationProperty(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAnnotationProperty;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAnnotationProperty ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotationProperty)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotationProperty.ValueProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotationProperty.ValueProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ValueLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotationProperty.ValueProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotationProperty.ValueProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValueLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotationProperty.ValueProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    }
    
    public class MetaAnnotationPropertyLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaAnnotationPropertyLazyChildBuilder
    {
        internal MetaAnnotationPropertyLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Value
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotationProperty.ValueProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    }
    
    internal class MetaNamespaceBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNamespaceBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> usings0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> namespaces0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaDeclarationBuilder> declarations0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaNamespaceBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.ParentProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.UsingsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.MetaModelProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.NamespacesProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.DeclarationsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaNamespace(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNamespace;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNamespace ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamespace)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespaceBuilder Parent
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.ParentProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.ParentProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> ParentLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.ParentProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.ParentProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Usings
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.UsingsProperty, ref usings0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModelBuilder MetaModel
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.MetaModelProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.MetaModelProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> MetaModelLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.MetaModelProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.MetaModelProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaModelLazyChildBuilder MetaModelLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaModelLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.MetaModelProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Namespaces
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.NamespacesProperty, ref namespaces0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaNamespaceLazyChildBuilder NamespacesLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaNamespaceLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.NamespacesProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaDeclarationBuilder> Declarations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaDeclarationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.DeclarationsProperty, ref declarations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaDeclarationLazyChildBuilder DeclarationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaDeclarationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.DeclarationsProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaNamespaceLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaNamespaceLazyChildBuilder
    {
        internal MetaNamespaceLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Parent
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.ParentProperty, value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> MetaModel
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamespace.MetaModelProperty, value); }
        }
        
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
    }
    
    internal class MetaDeclarationBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaDeclarationBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaDeclarationBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaDeclaration(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaDeclaration;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaDeclaration ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDeclaration)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespaceBuilder Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> NamespaceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModelBuilder Model
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> ModelLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, value); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaDeclarationLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaDeclarationLazyChildBuilder
    {
        internal MetaDeclarationLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Namespace
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> Model
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
    }
    
    internal class MetaModelBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaModelBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaModelBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.UriProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.NamespaceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaModel(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaModel;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaModel ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaModel)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public string Uri
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.UriProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.UriProperty, value); }
        }
        
        public Func<string> UriLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.UriProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.UriProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespaceBuilder Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.NamespaceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.NamespaceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> NamespaceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.NamespaceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.NamespaceProperty, value); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaModelLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaModelLazyChildBuilder
    {
        internal MetaModelLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Uri
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.UriProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Namespace
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaModel.NamespaceProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
    }
    
    internal class MetaCollectionTypeBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder
    {
    
        internal MetaCollectionTypeBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.KindProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.InnerTypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaCollectionType(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaCollectionType;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaCollectionType ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaCollectionType)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaType global::MetaDslx.Core.Immutable.MetaTypeBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaType)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaCollectionKind Kind
        {
            get { return this.GetValue<global::MetaDslx.Core.Immutable.MetaCollectionKind>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.KindProperty); }
            set { this.SetValue<global::MetaDslx.Core.Immutable.MetaCollectionKind>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.KindProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaCollectionKind> KindLazy
        {
            get { return this.GetLazyValue<global::MetaDslx.Core.Immutable.MetaCollectionKind>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.KindProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.KindProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder InnerType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.InnerTypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.InnerTypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> InnerTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.InnerTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.InnerTypeProperty, value); }
        }
    }
    
    public class MetaCollectionTypeLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaCollectionTypeLazyChildBuilder
    {
        internal MetaCollectionTypeLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaCollectionKind> Kind
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.KindProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> InnerType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaCollectionType.InnerTypeProperty, value); }
        }
    }
    
    internal class MetaNullableTypeBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNullableTypeBuilder
    {
    
        internal MetaNullableTypeBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNullableType.InnerTypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaNullableType(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNullableType;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNullableType ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNullableType)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaType global::MetaDslx.Core.Immutable.MetaTypeBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaType)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder InnerType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNullableType.InnerTypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNullableType.InnerTypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> InnerTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNullableType.InnerTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNullableType.InnerTypeProperty, value); }
        }
    }
    
    public class MetaNullableTypeLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaNullableTypeLazyChildBuilder
    {
        internal MetaNullableTypeLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> InnerType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNullableType.InnerTypeProperty, value); }
        }
    }
    
    internal class MetaPrimitiveTypeBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder
    {
    
        internal MetaPrimitiveTypeBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaPrimitiveType(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPrimitiveType;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPrimitiveType ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPrimitiveType)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaType global::MetaDslx.Core.Immutable.MetaTypeBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaType)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    }
    
    public class MetaPrimitiveTypeLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaPrimitiveTypeLazyChildBuilder
    {
        internal MetaPrimitiveTypeLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    }
    
    internal class MetaEnumBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaEnumBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder> enumLiterals0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaOperationBuilder> operations0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaEnumBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnum.EnumLiteralsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnum.OperationsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaEnum(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaEnum;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaEnum ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaEnum)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaType global::MetaDslx.Core.Immutable.MetaTypeBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaType)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDeclaration global::MetaDslx.Core.Immutable.MetaDeclarationBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDeclaration)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder> EnumLiterals
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnum.EnumLiteralsProperty, ref enumLiterals0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaEnumLiteralLazyChildBuilder EnumLiteralsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaEnumLiteralLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnum.EnumLiteralsProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaOperationBuilder> Operations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaOperationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnum.OperationsProperty, ref operations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaOperationLazyChildBuilder OperationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaOperationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnum.OperationsProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespaceBuilder Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> NamespaceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModelBuilder Model
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> ModelLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, value); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaEnumLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaEnumLazyChildBuilder
    {
        internal MetaEnumLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Namespace
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> Model
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
    }
    
    internal class MetaEnumLiteralBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder
    {
    
        internal MetaEnumLiteralBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnumLiteral.EnumProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaEnumLiteral(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaEnumLiteral;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaEnumLiteral ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaEnumLiteral)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaEnumBuilder Enum
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaEnumBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnumLiteral.EnumProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaEnumBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnumLiteral.EnumProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaEnumBuilder> EnumLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaEnumBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnumLiteral.EnumProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnumLiteral.EnumProperty, value); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaEnumLiteralLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaEnumLiteralLazyChildBuilder
    {
        internal MetaEnumLiteralLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaEnumBuilder> Enum
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaEnumLiteral.EnumProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaClassBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaClassBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaClassBuilder> superClasses0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> properties0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaOperationBuilder> operations0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaClassBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.IsAbstractProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.SuperClassesProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.PropertiesProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.OperationsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.ConstructorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaClass(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaClass;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaClass ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaClass)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaType global::MetaDslx.Core.Immutable.MetaTypeBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaType)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDeclaration global::MetaDslx.Core.Immutable.MetaDeclarationBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDeclaration)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public bool IsAbstract
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.IsAbstractProperty); }
            set { this.SetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.IsAbstractProperty, value); }
        }
        
        public Func<bool> IsAbstractLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.IsAbstractProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.IsAbstractProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaClassBuilder> SuperClasses
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.SuperClassesProperty, ref superClasses0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> Properties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.PropertiesProperty, ref properties0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaPropertyLazyChildBuilder PropertiesLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaPropertyLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.PropertiesProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaOperationBuilder> Operations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaOperationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.OperationsProperty, ref operations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaOperationLazyChildBuilder OperationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaOperationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.OperationsProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaConstructorBuilder Constructor
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.ConstructorProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.ConstructorProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> ConstructorLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.ConstructorProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.ConstructorProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaConstructorLazyChildBuilder ConstructorLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaConstructorLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.ConstructorProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespaceBuilder Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> NamespaceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModelBuilder Model
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> ModelLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, value); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaClassLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaClassLazyChildBuilder
    {
        internal MetaClassLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> IsAbstract
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.IsAbstractProperty, () => value); }
        }
        
        
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> Constructor
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaClass.ConstructorProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Namespace
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> Model
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
    }
    
    internal class MetaFunctionTypeBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaTypeBuilder> parameterTypes0;
    
        internal MetaFunctionTypeBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionType.ParameterTypesProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionType.ReturnTypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaFunctionType(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaFunctionType;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaFunctionType ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaFunctionType)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaType global::MetaDslx.Core.Immutable.MetaTypeBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaType)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ParameterTypes
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionType.ParameterTypesProperty, ref parameterTypes0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ReturnType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionType.ReturnTypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionType.ReturnTypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionType.ReturnTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionType.ReturnTypeProperty, value); }
        }
    }
    
    public class MetaFunctionTypeLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaFunctionTypeLazyChildBuilder
    {
        internal MetaFunctionTypeLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionType.ReturnTypeProperty, value); }
        }
    }
    
    internal class MetaFunctionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaFunctionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaParameterBuilder> parameters0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaFunctionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaFunction(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaFunction;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaFunction ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaFunction)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaParameterBuilder> Parameters
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaParameterBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty, ref parameters0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaParameterLazyChildBuilder ParametersLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaParameterLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ReturnType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, value); }
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        global::MetaDslx.Core.Immutable.MetaTypeBuilder global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaFunctionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaFunctionLazyChildBuilder
    {
        internal MetaFunctionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty, value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> global::MetaDslx.Core.Immutable.MetaTypedElementLazyChildBuilder.Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
    }
    
    internal class MetaGlobalFunctionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaParameterBuilder> parameters0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaGlobalFunctionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaGlobalFunction(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaGlobalFunction;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaGlobalFunction ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaGlobalFunction)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaFunction global::MetaDslx.Core.Immutable.MetaFunctionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaFunction)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDeclaration global::MetaDslx.Core.Immutable.MetaDeclarationBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDeclaration)base.ToImmutable();
    	}
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder global::MetaDslx.Core.Immutable.MetaFunctionBuilder.Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Func<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder> global::MetaDslx.Core.Immutable.MetaFunctionBuilder.TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaParameterBuilder> Parameters
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaParameterBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty, ref parameters0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaParameterLazyChildBuilder ParametersLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaParameterLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ReturnType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespaceBuilder Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> NamespaceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModelBuilder Model
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> ModelLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, value); }
        }
    }
    
    public class MetaGlobalFunctionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaGlobalFunctionLazyChildBuilder
    {
        internal MetaGlobalFunctionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Func<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder> global::MetaDslx.Core.Immutable.MetaFunctionLazyChildBuilder.Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty, value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Namespace
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> Model
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, value); }
        }
    }
    
    internal class MetaOperationBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOperationBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaParameterBuilder> parameters0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaOperationBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperation.ParentProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaOperation(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOperation;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOperation ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperation)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaFunction global::MetaDslx.Core.Immutable.MetaFunctionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaFunction)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Parent
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperation.ParentProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperation.ParentProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ParentLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperation.ParentProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperation.ParentProperty, value); }
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder global::MetaDslx.Core.Immutable.MetaFunctionBuilder.Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Func<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder> global::MetaDslx.Core.Immutable.MetaFunctionBuilder.TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaParameterBuilder> Parameters
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaParameterBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty, ref parameters0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaParameterLazyChildBuilder ParametersLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaParameterLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ParametersProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ReturnType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaOperationLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaOperationLazyChildBuilder
    {
        internal MetaOperationLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Parent
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperation.ParentProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Func<global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder> global::MetaDslx.Core.Immutable.MetaFunctionLazyChildBuilder.Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.TypeProperty, value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ReturnType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunction.ReturnTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
    }
    
    internal class MetaConstantBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaConstantBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaConstantBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstant.ValueProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaConstant(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaConstant;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaConstant ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaConstant)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDeclaration global::MetaDslx.Core.Immutable.MetaDeclarationBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDeclaration)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstant.ValueProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstant.ValueProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ValueLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstant.ValueProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstant.ValueProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValueLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstant.ValueProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaNamespaceBuilder Namespace
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> NamespaceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaModelBuilder Model
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> ModelLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaModelBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, value); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaConstantLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaConstantLazyChildBuilder
    {
        internal MetaConstantLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Value
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstant.ValueProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaNamespaceBuilder> Namespace
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.NamespaceProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaModelBuilder> Model
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDeclaration.ModelProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
    }
    
    internal class MetaConstructorBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaConstructorBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder> initializers0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaConstructorBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstructor.ParentProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstructor.InitializersProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaConstructor(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaConstructor;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaConstructor ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaConstructor)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaClassBuilder Parent
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstructor.ParentProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstructor.ParentProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> ParentLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstructor.ParentProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstructor.ParentProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder> Initializers
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstructor.InitializersProperty, ref initializers0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaPropertyInitializerLazyChildBuilder InitializersLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaPropertyInitializerLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstructor.InitializersProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaConstructorLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaConstructorLazyChildBuilder
    {
        internal MetaConstructorLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> Parent
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstructor.ParentProperty, value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
    }
    
    internal class MetaParameterBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaParameterBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaParameterBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaParameter.FunctionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaParameter(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaParameter;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaParameter ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaParameter)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaFunctionBuilder Function
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaFunctionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaParameter.FunctionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaFunctionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaParameter.FunctionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaFunctionBuilder> FunctionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaFunctionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaParameter.FunctionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaParameter.FunctionProperty, value); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaParameterLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaParameterLazyChildBuilder
    {
        internal MetaParameterLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaFunctionBuilder> Function
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaParameter.FunctionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
    }
    
    internal class MetaPropertyBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPropertyBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> oppositeProperties0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> subsettedProperties0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> subsettingProperties0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> redefinedProperties0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> redefiningProperties0;
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> annotations0;
    
        internal MetaPropertyBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.KindProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.ClassProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.OppositePropertiesProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.SubsettedPropertiesProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.SubsettingPropertiesProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.RedefinedPropertiesProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.RedefiningPropertiesProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaProperty(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaProperty;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaProperty ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaProperty)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaNamedElement global::MetaDslx.Core.Immutable.MetaNamedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNamedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaDocumentedElement global::MetaDslx.Core.Immutable.MetaDocumentedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDocumentedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAnnotatedElement global::MetaDslx.Core.Immutable.MetaAnnotatedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAnnotatedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaPropertyKind Kind
        {
            get { return this.GetValue<global::MetaDslx.Core.Immutable.MetaPropertyKind>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.KindProperty); }
            set { this.SetValue<global::MetaDslx.Core.Immutable.MetaPropertyKind>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.KindProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyKind> KindLazy
        {
            get { return this.GetLazyValue<global::MetaDslx.Core.Immutable.MetaPropertyKind>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.KindProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.KindProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaClassBuilder Class
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.ClassProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.ClassProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> ClassLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.ClassProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.ClassProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> OppositeProperties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.OppositePropertiesProperty, ref oppositeProperties0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> SubsettedProperties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.SubsettedPropertiesProperty, ref subsettedProperties0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> SubsettingProperties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.SubsettingPropertiesProperty, ref subsettingProperties0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> RedefinedProperties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.RedefinedPropertiesProperty, ref redefinedProperties0); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> RedefiningProperties
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.RedefiningPropertiesProperty, ref redefiningProperties0); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
    
        
        public string Documentation
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        public Func<string> DocumentationLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder> Annotations
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaAnnotationBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty, ref annotations0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilder AnnotationsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaAnnotationLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaAnnotatedElement.AnnotationsProperty); }
        }
    }
    
    public class MetaPropertyLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaPropertyLazyChildBuilder
    {
        internal MetaPropertyLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyKind> Kind
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.KindProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> Class
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaProperty.ClassProperty, value); }
        }
        
        
        
        
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNamedElement.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Documentation
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaDocumentedElement.DocumentationProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
    }
    
    internal class MetaPropertyInitializerBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder
    {
    
        internal MetaPropertyInitializerBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaPropertyInitializer(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPropertyInitializer;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPropertyInitializer ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPropertyInitializer)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaConstructorBuilder Constructor
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> ConstructorLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, value); }
        }
    
        
        public string PropertyName
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, value); }
        }
        
        public Func<string> PropertyNameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaClassBuilder PropertyContext
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> PropertyContextLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaPropertyBuilder Property
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> PropertyLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ValueLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValueLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty); }
        }
    }
    
    public class MetaPropertyInitializerLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaPropertyInitializerLazyChildBuilder
    {
        internal MetaPropertyInitializerLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> Constructor
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> PropertyName
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> PropertyContext
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> Property
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Value
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, value); }
        }
    }
    
    internal class MetaSynthetizedPropertyInitializerBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder
    {
    
        internal MetaSynthetizedPropertyInitializerBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaSynthetizedPropertyInitializer(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaSynthetizedPropertyInitializer;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializer ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializer)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaPropertyInitializer global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPropertyInitializer)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaConstructorBuilder Constructor
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> ConstructorLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, value); }
        }
    
        
        public string PropertyName
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, value); }
        }
        
        public Func<string> PropertyNameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaClassBuilder PropertyContext
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> PropertyContextLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaPropertyBuilder Property
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> PropertyLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ValueLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValueLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty); }
        }
    }
    
    public class MetaSynthetizedPropertyInitializerLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerLazyChildBuilder
    {
        internal MetaSynthetizedPropertyInitializerLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> Constructor
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> PropertyName
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> PropertyContext
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> Property
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Value
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, value); }
        }
    }
    
    internal class MetaInheritedPropertyInitializerBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder
    {
    
        internal MetaInheritedPropertyInitializerBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectNameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaInheritedPropertyInitializer(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaInheritedPropertyInitializer;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializer ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializer)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaPropertyInitializer global::MetaDslx.Core.Immutable.MetaPropertyInitializerBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPropertyInitializer)base.ToImmutable();
    	}
    
        
        public string ObjectName
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectNameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectNameProperty, value); }
        }
        
        public Func<string> ObjectNameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectNameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectNameProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaPropertyBuilder Object
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> ObjectLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaConstructorBuilder Constructor
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> ConstructorLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaConstructorBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, value); }
        }
    
        
        public string PropertyName
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, value); }
        }
        
        public Func<string> PropertyNameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaClassBuilder PropertyContext
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> PropertyContextLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaPropertyBuilder Property
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> PropertyLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ValueLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValueLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty); }
        }
    }
    
    public class MetaInheritedPropertyInitializerLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerLazyChildBuilder
    {
        internal MetaInheritedPropertyInitializerLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> ObjectName
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectNameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> Object
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaInheritedPropertyInitializer.ObjectProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaConstructorBuilder> Constructor
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ConstructorProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> PropertyName
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyNameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> PropertyContext
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyContextProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> Property
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.PropertyProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Value
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaPropertyInitializer.ValueProperty, value); }
        }
    }
    
    internal class MetaExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaExpressionBuilder
    {
    
        internal MetaExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder
    {
        internal MetaExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaBracketExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBracketExpressionBuilder
    {
    
        internal MetaBracketExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBracketExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaBracketExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBracketExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBracketExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBracketExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBracketExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBracketExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBracketExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBracketExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBracketExpression.ExpressionProperty); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaBracketExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaBracketExpressionLazyChildBuilder
    {
        internal MetaBracketExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBracketExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaBoundExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaBoundExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaBoundExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBoundExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBoundExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaBoundExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaBoundExpressionLazyChildBuilder
    {
        internal MetaBoundExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaThisExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaThisExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaThisExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaThisExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaThisExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaThisExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaThisExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaThisExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaThisExpressionLazyChildBuilder
    {
        internal MetaThisExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaNullExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNullExpressionBuilder
    {
    
        internal MetaNullExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaNullExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNullExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNullExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNullExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaNullExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaNullExpressionLazyChildBuilder
    {
        internal MetaNullExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaTypeConversionExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder
    {
    
        internal MetaTypeConversionExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaTypeConversionExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypeConversionExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypeConversionExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeConversionExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReferenceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaTypeConversionExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionLazyChildBuilder
    {
        internal MetaTypeConversionExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReference
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaTypeAsExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypeAsExpressionBuilder
    {
    
        internal MetaTypeAsExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaTypeAsExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypeAsExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypeAsExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeAsExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypeConversionExpression global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeConversionExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReferenceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaTypeAsExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaTypeAsExpressionLazyChildBuilder
    {
        internal MetaTypeAsExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReference
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaTypeCastExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypeCastExpressionBuilder
    {
    
        internal MetaTypeCastExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaTypeCastExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypeCastExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypeCastExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeCastExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypeConversionExpression global::MetaDslx.Core.Immutable.MetaTypeConversionExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeConversionExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReferenceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaTypeCastExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaTypeCastExpressionLazyChildBuilder
    {
        internal MetaTypeCastExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReference
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.TypeReferenceProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeConversionExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaTypeCheckExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypeCheckExpressionBuilder
    {
    
        internal MetaTypeCheckExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.TypeReferenceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaTypeCheckExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypeCheckExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypeCheckExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeCheckExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.TypeReferenceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.TypeReferenceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReferenceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.TypeReferenceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.TypeReferenceProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.ExpressionProperty); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaTypeCheckExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaTypeCheckExpressionLazyChildBuilder
    {
        internal MetaTypeCheckExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReference
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.TypeReferenceProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeCheckExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaTypeOfExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder
    {
    
        internal MetaTypeOfExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeOfExpression.TypeReferenceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaTypeOfExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaTypeOfExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaTypeOfExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypeOfExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeOfExpression.TypeReferenceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeOfExpression.TypeReferenceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReferenceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeOfExpression.TypeReferenceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeOfExpression.TypeReferenceProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaTypeOfExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaTypeOfExpressionLazyChildBuilder
    {
        internal MetaTypeOfExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeReference
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypeOfExpression.TypeReferenceProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaConditionalExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaConditionalExpressionBuilder
    {
    
        internal MetaConditionalExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ConditionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.BalancedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ThenProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ElseProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaConditionalExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaConditionalExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaConditionalExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaConditionalExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Condition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ConditionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ConditionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ConditionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ConditionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ConditionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ConditionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ConditionProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder BalancedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.BalancedTypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.BalancedTypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> BalancedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.BalancedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.BalancedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Then
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ThenProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ThenProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ThenLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ThenProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ThenProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ThenLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ThenProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Else
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ElseProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ElseProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ElseLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ElseProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ElseProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ElseLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ElseProperty); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaConditionalExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaConditionalExpressionLazyChildBuilder
    {
        internal MetaConditionalExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Condition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ConditionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> BalancedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.BalancedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Then
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ThenProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Else
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConditionalExpression.ElseProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaConstantExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder
    {
    
        internal MetaConstantExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstantExpression.ValueProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaConstantExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaConstantExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaConstantExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaConstantExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public object Value
        {
            get { return this.GetReference<object>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstantExpression.ValueProperty); }
            set { this.SetReference<object>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstantExpression.ValueProperty, value); }
        }
        
        public Func<object> ValueLazy
        {
            get { return this.GetLazyReference<object>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstantExpression.ValueProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstantExpression.ValueProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaConstantExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaConstantExpressionLazyChildBuilder
    {
        internal MetaConstantExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<object> Value
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaConstantExpression.ValueProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaIdentifierExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaIdentifierExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIdentifierExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaIdentifierExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaIdentifierExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaIdentifierExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaIdentifierExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIdentifierExpression.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIdentifierExpression.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIdentifierExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIdentifierExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaIdentifierExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaIdentifierExpressionLazyChildBuilder
    {
        internal MetaIdentifierExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIdentifierExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaMemberAccessExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaMemberAccessExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaMemberAccessExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaMemberAccessExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaMemberAccessExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaMemberAccessExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.ExpressionProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.NameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.NameProperty, value); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaMemberAccessExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionLazyChildBuilder
    {
        internal MetaMemberAccessExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaMemberAccessExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaFunctionCallExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaFunctionCallExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionCallExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaFunctionCallExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaFunctionCallExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaFunctionCallExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaFunctionCallExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionCallExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionCallExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionCallExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionCallExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionCallExpression.ExpressionProperty); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaFunctionCallExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionLazyChildBuilder
    {
        internal MetaFunctionCallExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionCallExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaIndexerExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaIndexerExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaIndexerExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIndexerExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaIndexerExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaIndexerExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaIndexerExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaIndexerExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIndexerExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIndexerExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIndexerExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIndexerExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIndexerExpression.ExpressionProperty); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaIndexerExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaIndexerExpressionLazyChildBuilder
    {
        internal MetaIndexerExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIndexerExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaNewExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder> propertyInitializers0;
    
        internal MetaNewExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewExpression.TypeReferenceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewExpression.PropertyInitializersProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaNewExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNewExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNewExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNewExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaClassBuilder TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewExpression.TypeReferenceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewExpression.TypeReferenceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> TypeReferenceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaClassBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewExpression.TypeReferenceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewExpression.TypeReferenceProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder> PropertyInitializers
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewExpression.PropertyInitializersProperty, ref propertyInitializers0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerLazyChildBuilder PropertyInitializersLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewExpression.PropertyInitializersProperty); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaNewExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaNewExpressionLazyChildBuilder
    {
        internal MetaNewExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaClassBuilder> TypeReference
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewExpression.TypeReferenceProperty, value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaNewPropertyInitializerBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder
    {
    
        internal MetaNewPropertyInitializerBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ParentProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyNameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ValueProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaNewPropertyInitializer(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNewPropertyInitializer;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNewPropertyInitializer)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder Parent
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ParentProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ParentProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder> ParentLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ParentProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ParentProperty, value); }
        }
    
        
        public string PropertyName
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyNameProperty); }
            set { this.SetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyNameProperty, value); }
        }
        
        public Func<string> PropertyNameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyNameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyNameProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Value
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ValueProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ValueProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ValueLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ValueProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ValueProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValueLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ValueProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaPropertyBuilder Property
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> PropertyLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaPropertyBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyProperty, value); }
        }
    }
    
    public class MetaNewPropertyInitializerLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerLazyChildBuilder
    {
        internal MetaNewPropertyInitializerLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder> Parent
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ParentProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> PropertyName
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyNameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Value
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.ValueProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaPropertyBuilder> Property
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewPropertyInitializer.PropertyProperty, value); }
        }
    }
    
    internal class MetaNewCollectionExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNewCollectionExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> values0;
    
        internal MetaNewCollectionExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewCollectionExpression.TypeReferenceProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewCollectionExpression.ValuesProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaNewCollectionExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNewCollectionExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNewCollectionExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNewCollectionExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder TypeReference
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewCollectionExpression.TypeReferenceProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewCollectionExpression.TypeReferenceProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder> TypeReferenceLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewCollectionExpression.TypeReferenceProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewCollectionExpression.TypeReferenceProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Values
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewCollectionExpression.ValuesProperty, ref values0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ValuesLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewCollectionExpression.ValuesProperty); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaNewCollectionExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaNewCollectionExpressionLazyChildBuilder
    {
        internal MetaNewCollectionExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder> TypeReference
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaNewCollectionExpression.TypeReferenceProperty, value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaOperatorExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaOperatorExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaOperatorExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOperatorExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOperatorExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaOperatorExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaOperatorExpressionLazyChildBuilder
    {
        internal MetaOperatorExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaUnaryExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaUnaryExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaUnaryExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaUnaryExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaUnaryExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaUnaryExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaUnaryExpressionLazyChildBuilder
    {
        internal MetaUnaryExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaUnaryPlusExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaUnaryPlusExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaUnaryPlusExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaUnaryPlusExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaUnaryPlusExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaUnaryPlusExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryPlusExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpression global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaUnaryPlusExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaUnaryPlusExpressionLazyChildBuilder
    {
        internal MetaUnaryPlusExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaNegateExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNegateExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaNegateExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaNegateExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNegateExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNegateExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNegateExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpression global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaNegateExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaNegateExpressionLazyChildBuilder
    {
        internal MetaNegateExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaOnesComplementExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOnesComplementExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaOnesComplementExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaOnesComplementExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOnesComplementExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOnesComplementExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOnesComplementExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpression global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaOnesComplementExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaOnesComplementExpressionLazyChildBuilder
    {
        internal MetaOnesComplementExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaNotExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNotExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaNotExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaNotExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNotExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNotExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNotExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpression global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaNotExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaNotExpressionLazyChildBuilder
    {
        internal MetaNotExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaUnaryAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaUnaryAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaUnaryAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaUnaryAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpression global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaUnaryAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionLazyChildBuilder
    {
        internal MetaUnaryAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaPostIncrementAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPostIncrementAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaPostIncrementAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaPostIncrementAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPostIncrementAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPostIncrementAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPostIncrementAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpression global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaPostIncrementAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaPostIncrementAssignExpressionLazyChildBuilder
    {
        internal MetaPostIncrementAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaPostDecrementAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPostDecrementAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaPostDecrementAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaPostDecrementAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPostDecrementAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPostDecrementAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPostDecrementAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpression global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaPostDecrementAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaPostDecrementAssignExpressionLazyChildBuilder
    {
        internal MetaPostDecrementAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaPreIncrementAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPreIncrementAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaPreIncrementAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaPreIncrementAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPreIncrementAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPreIncrementAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPreIncrementAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpression global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaPreIncrementAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaPreIncrementAssignExpressionLazyChildBuilder
    {
        internal MetaPreIncrementAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaPreDecrementAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaPreDecrementAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaPreDecrementAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaPreDecrementAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaPreDecrementAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaPreDecrementAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaPreDecrementAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression global::MetaDslx.Core.Immutable.MetaUnaryAssignExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaUnaryExpression global::MetaDslx.Core.Immutable.MetaUnaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaUnaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Expression
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> ExpressionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ExpressionLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaPreDecrementAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaPreDecrementAssignExpressionLazyChildBuilder
    {
        internal MetaPreDecrementAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Expression
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaUnaryExpression.ExpressionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaBinaryExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaBinaryExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaBinaryExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBinaryExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBinaryExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaBinaryExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaBinaryExpressionLazyChildBuilder
    {
        internal MetaBinaryExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaBinaryArithmeticExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaBinaryArithmeticExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaBinaryArithmeticExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBinaryArithmeticExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaBinaryArithmeticExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionLazyChildBuilder
    {
        internal MetaBinaryArithmeticExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaMultiplyExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaMultiplyExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaMultiplyExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaMultiplyExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaMultiplyExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaMultiplyExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaMultiplyExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaMultiplyExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaMultiplyExpressionLazyChildBuilder
    {
        internal MetaMultiplyExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaDivideExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaDivideExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaDivideExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaDivideExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaDivideExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaDivideExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDivideExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaDivideExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaDivideExpressionLazyChildBuilder
    {
        internal MetaDivideExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaModuloExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaModuloExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaModuloExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaModuloExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaModuloExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaModuloExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaModuloExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaModuloExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaModuloExpressionLazyChildBuilder
    {
        internal MetaModuloExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaAddExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAddExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaAddExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaAddExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAddExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAddExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAddExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaAddExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaAddExpressionLazyChildBuilder
    {
        internal MetaAddExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaSubtractExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaSubtractExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaSubtractExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaSubtractExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaSubtractExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaSubtractExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaSubtractExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaSubtractExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaSubtractExpressionLazyChildBuilder
    {
        internal MetaSubtractExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaLeftShiftExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaLeftShiftExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaLeftShiftExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaLeftShiftExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaLeftShiftExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaLeftShiftExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLeftShiftExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaLeftShiftExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaLeftShiftExpressionLazyChildBuilder
    {
        internal MetaLeftShiftExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaRightShiftExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaRightShiftExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaRightShiftExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaRightShiftExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaRightShiftExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaRightShiftExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaRightShiftExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryArithmeticExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaRightShiftExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaRightShiftExpressionLazyChildBuilder
    {
        internal MetaRightShiftExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaBinaryComparisonExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaBinaryComparisonExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaBinaryComparisonExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBinaryComparisonExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaBinaryComparisonExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionLazyChildBuilder
    {
        internal MetaBinaryComparisonExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaLessThanExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaLessThanExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaLessThanExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaLessThanExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaLessThanExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaLessThanExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLessThanExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaLessThanExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaLessThanExpressionLazyChildBuilder
    {
        internal MetaLessThanExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaLessThanOrEqualExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaLessThanOrEqualExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaLessThanOrEqualExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaLessThanOrEqualExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaLessThanOrEqualExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaLessThanOrEqualExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLessThanOrEqualExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaLessThanOrEqualExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaLessThanOrEqualExpressionLazyChildBuilder
    {
        internal MetaLessThanOrEqualExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaGreaterThanExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaGreaterThanExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaGreaterThanExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaGreaterThanExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaGreaterThanExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaGreaterThanExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaGreaterThanExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaGreaterThanExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaGreaterThanExpressionLazyChildBuilder
    {
        internal MetaGreaterThanExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaGreaterThanOrEqualExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaGreaterThanOrEqualExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaGreaterThanOrEqualExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaGreaterThanOrEqualExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaGreaterThanOrEqualExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaGreaterThanOrEqualExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaGreaterThanOrEqualExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaGreaterThanOrEqualExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaGreaterThanOrEqualExpressionLazyChildBuilder
    {
        internal MetaGreaterThanOrEqualExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaEqualExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaEqualExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaEqualExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaEqualExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaEqualExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaEqualExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaEqualExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaEqualExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaEqualExpressionLazyChildBuilder
    {
        internal MetaEqualExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaNotEqualExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNotEqualExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaNotEqualExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaNotEqualExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNotEqualExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNotEqualExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNotEqualExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryComparisonExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaNotEqualExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaNotEqualExpressionLazyChildBuilder
    {
        internal MetaNotEqualExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaBinaryLogicalExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaBinaryLogicalExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaBinaryLogicalExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaBinaryLogicalExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaBinaryLogicalExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionLazyChildBuilder
    {
        internal MetaBinaryLogicalExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaAndExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAndExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaAndExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaAndExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAndExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAndExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAndExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaAndExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaAndExpressionLazyChildBuilder
    {
        internal MetaAndExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaOrExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOrExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaOrExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaOrExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOrExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOrExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOrExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaOrExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaOrExpressionLazyChildBuilder
    {
        internal MetaOrExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaExclusiveOrExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaExclusiveOrExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaExclusiveOrExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaExclusiveOrExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaExclusiveOrExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaExclusiveOrExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExclusiveOrExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaExclusiveOrExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaExclusiveOrExpressionLazyChildBuilder
    {
        internal MetaExclusiveOrExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaAndAlsoExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAndAlsoExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaAndAlsoExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaAndAlsoExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAndAlsoExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAndAlsoExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAndAlsoExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaAndAlsoExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaAndAlsoExpressionLazyChildBuilder
    {
        internal MetaAndAlsoExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaOrElseExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOrElseExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaOrElseExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaOrElseExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOrElseExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOrElseExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOrElseExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryLogicalExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaOrElseExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaOrElseExpressionLazyChildBuilder
    {
        internal MetaOrElseExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaNullCoalescingExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaNullCoalescingExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaNullCoalescingExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaNullCoalescingExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaNullCoalescingExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaNullCoalescingExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaNullCoalescingExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaNullCoalescingExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaNullCoalescingExpressionLazyChildBuilder
    {
        internal MetaNullCoalescingExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaAssignmentExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaAssignmentExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaAssignmentExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAssignmentExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAssignmentExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaAssignmentExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaAssignmentExpressionLazyChildBuilder
    {
        internal MetaAssignmentExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaAssignExpressionLazyChildBuilder
    {
        internal MetaAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaArithmeticAssignmentExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaArithmeticAssignmentExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaArithmeticAssignmentExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaArithmeticAssignmentExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaArithmeticAssignmentExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionLazyChildBuilder
    {
        internal MetaArithmeticAssignmentExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaMultiplyAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaMultiplyAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaMultiplyAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaMultiplyAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaMultiplyAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaMultiplyAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaMultiplyAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaMultiplyAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaMultiplyAssignExpressionLazyChildBuilder
    {
        internal MetaMultiplyAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaDivideAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaDivideAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaDivideAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaDivideAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaDivideAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaDivideAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaDivideAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaDivideAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaDivideAssignExpressionLazyChildBuilder
    {
        internal MetaDivideAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaModuloAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaModuloAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaModuloAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaModuloAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaModuloAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaModuloAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaModuloAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaModuloAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaModuloAssignExpressionLazyChildBuilder
    {
        internal MetaModuloAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaAddAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAddAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaAddAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaAddAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAddAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAddAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAddAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaAddAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaAddAssignExpressionLazyChildBuilder
    {
        internal MetaAddAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaSubtractAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaSubtractAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaSubtractAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaSubtractAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaSubtractAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaSubtractAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaSubtractAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaSubtractAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaSubtractAssignExpressionLazyChildBuilder
    {
        internal MetaSubtractAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaLeftShiftAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaLeftShiftAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaLeftShiftAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaLeftShiftAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaLeftShiftAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaLeftShiftAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLeftShiftAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaLeftShiftAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaLeftShiftAssignExpressionLazyChildBuilder
    {
        internal MetaLeftShiftAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaRightShiftAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaRightShiftAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaRightShiftAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaRightShiftAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaRightShiftAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaRightShiftAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaRightShiftAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaArithmeticAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaRightShiftAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaRightShiftAssignExpressionLazyChildBuilder
    {
        internal MetaRightShiftAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaLogicalAssignmentExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaLogicalAssignmentExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaLogicalAssignmentExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaLogicalAssignmentExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaLogicalAssignmentExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionLazyChildBuilder
    {
        internal MetaLogicalAssignmentExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaAndAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaAndAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaAndAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaAndAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaAndAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaAndAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAndAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaAndAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaAndAssignExpressionLazyChildBuilder
    {
        internal MetaAndAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaExclusiveOrAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaExclusiveOrAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaExclusiveOrAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaExclusiveOrAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaExclusiveOrAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaExclusiveOrAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExclusiveOrAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaExclusiveOrAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaExclusiveOrAssignExpressionLazyChildBuilder
    {
        internal MetaExclusiveOrAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    internal class MetaOrAssignExpressionBuilderImpl : global::MetaDslx.Core.Immutable.MutableSymbolBase, global::MetaDslx.Core.Immutable.MetaOrAssignExpressionBuilder
    {
        private global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> arguments0;
    
        internal MetaOrAssignExpressionBuilderImpl(global::MetaDslx.Core.Immutable.SymbolId id, global::MetaDslx.Core.Immutable.MutableModel model, bool created)
    		: base(id, model, created)
        {
    		if (!created)
    		{
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty);
    			this.MAttachProperty(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty);
    			this.MInit();
    		}
        }
    
        protected override void MDoInit()
        {
    		MetaImplementationProvider.Implementation.MetaOrAssignExpression(this);
        }
    
        public override object MMetaModel
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.Meta;*/ }
        }
    
        public override object MMetaClass
        {
            get { return null;/*global::MetaDslx.Core.MetaInstance.MetaOrAssignExpression;*/ }
        }
    
        public new global::MetaDslx.Core.Immutable.MetaOrAssignExpression ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOrAssignExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaLogicalAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaAssignmentExpression global::MetaDslx.Core.Immutable.MetaAssignmentExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaAssignmentExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBinaryExpression global::MetaDslx.Core.Immutable.MetaBinaryExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBinaryExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaOperatorExpression global::MetaDslx.Core.Immutable.MetaOperatorExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaOperatorExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaBoundExpression global::MetaDslx.Core.Immutable.MetaBoundExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaBoundExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaExpression global::MetaDslx.Core.Immutable.MetaExpressionBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaExpression)base.ToImmutable();
    	}
    
        global::MetaDslx.Core.Immutable.MetaTypedElement global::MetaDslx.Core.Immutable.MetaTypedElementBuilder.ToImmutable()
    	{
    		return (global::MetaDslx.Core.Immutable.MetaTypedElement)base.ToImmutable();
    	}
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Left
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> LeftLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder LeftLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaExpressionBuilder Right
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> RightLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder RightLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty); }
        }
    
        
        public string Name
        {
            get { return this.GetReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
        }
        
        public Func<string> NameLazy
        {
            get { return this.GetLazyReference<string>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
    
        
        public bool UniqueDefinition
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
        }
        
        public Func<bool> UniqueDefinitionLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.IMutableModelList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Arguments
        {
            get { return this.GetList<global::MetaDslx.Core.Immutable.MetaExpressionBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty, ref arguments0); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilder ArgumentsLazyChild
        {
            get { return new global::MetaDslx.Core.Immutable.MetaExpressionLazyChildBuilderImpl(this, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.ArgumentsProperty); }
        }
    
        
        public global::MetaDslx.Core.BindingInfo Definitions
        {
            get { return this.GetReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
        }
        
        public Func<global::MetaDslx.Core.BindingInfo> DefinitionsLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.BindingInfo>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.ISymbol Definition
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.ISymbol> DefinitionLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.ISymbol>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
    
        
        public bool NoTypeError
        {
            get { return this.GetValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
        }
        
        public Func<bool> NoTypeErrorLazy
        {
            get { return this.GetLazyValue<bool>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty); }
            set { this.SetLazyValue(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder ExpectedType
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedTypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
    
        
        public global::MetaDslx.Core.Immutable.MetaTypeBuilder Type
        {
            get { return this.GetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
        
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> TypeLazy
        {
            get { return this.GetLazyReference<global::MetaDslx.Core.Immutable.MetaTypeBuilder>(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty); }
            set { this.SetLazyReference(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
    public class MetaOrAssignExpressionLazyChildBuilderImpl : global::MetaDslx.Core.Immutable.LazyChildBuilderBase, global::MetaDslx.Core.Immutable.MetaOrAssignExpressionLazyChildBuilder
    {
        internal MetaOrAssignExpressionLazyChildBuilderImpl(global::MetaDslx.Core.Immutable.MutableSymbolBase parent, global::MetaDslx.Core.Immutable.ModelProperty property)
    		: base(parent, property)
        {
        }
    
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Left
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.LeftProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaExpressionBuilder> Right
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBinaryExpression.RightProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<string> Name
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaOperatorExpression.NameProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> UniqueDefinition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => value); }
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.BindingInfo> Definitions
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionsProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.ISymbol> Definition
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.DefinitionProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<bool> NoTypeError
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.NoTypeErrorProperty, () => value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> ExpectedType
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaExpression.ExpectedTypeProperty, value); }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Func<global::MetaDslx.Core.Immutable.MetaTypeBuilder> Type
        {
            set { this.MParent.MChildAddLazy(this.MProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaTypedElement.TypeProperty, value); }
        }
    }
    
	public static class MetaInstance
	{
	    private static global::MetaDslx.Core.Immutable.ImmutableModel model;
	
	    public static global::MetaDslx.Core.Immutable.ImmutableModel Model
	    {
	        get { return MetaInstance.model; }
	    }
	
	    public static readonly global::MetaDslx.Core.Immutable.MetaModel Meta;
	
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder Object;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder String;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder Int;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder Long;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder Float;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder Double;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder Byte;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder Bool;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder Void;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder None;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder Any;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder Error;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder ModelObject;
	    public static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder DefinitionList;
	    public static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder ModelObjectList;
	
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp1;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp2;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp3;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp4;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp5;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp6;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp7;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp8;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp9;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp10;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp11;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp12;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp13;
		private static readonly global::MetaDslx.Core.Immutable.MetaPrimitiveTypeBuilder __tmp14;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp15;
		private static readonly global::MetaDslx.Core.Immutable.MetaNamespaceBuilder __tmp16;
		private static readonly global::MetaDslx.Core.Immutable.MetaNamespaceBuilder __tmp17;
		private static readonly global::MetaDslx.Core.Immutable.MetaModelBuilder __tmp18;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp19;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp20;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp21;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp22;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp23;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp24;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp25;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp26;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp27;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp28;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp29;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp30;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp31;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp32;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp33;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp34;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp35;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp36;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp37;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp38;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp39;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp40;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp41;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp42;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp43;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp44;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp45;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp46;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp47;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp48;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp49;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp50;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp51;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp52;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp53;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp54;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp55;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp56;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp57;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp58;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp59;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp60;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp61;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp62;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp63;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp64;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp65;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp66;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp67;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp68;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp69;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp70;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp71;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp72;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp73;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp74;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantBuilder __tmp75;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewExpressionBuilder __tmp76;
		private static readonly global::MetaDslx.Core.Immutable.MetaNewPropertyInitializerBuilder __tmp77;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder __tmp78;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp79;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp80;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp81;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder TypeOf;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp82;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp83;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp84;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp85;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp86;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp87;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder GetValueType;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp88;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp89;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp90;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp91;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp92;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp93;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder GetReturnType;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp94;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp95;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp96;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp97;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp98;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp99;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder CurrentType;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp100;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp101;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp102;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp103;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp104;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp105;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder TypeCheck;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp106;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp107;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp108;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp109;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp110;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp111;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder Balance;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp112;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp113;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp114;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp115;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp116;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp117;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp118;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder Resolve1;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp119;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp120;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp121;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp122;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp123;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp124;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder Resolve2;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp125;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp126;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp127;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp128;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp129;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp130;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp131;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder ResolveType1;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp132;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp133;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp134;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp135;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp136;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp137;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder ResolveType2;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp138;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp139;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp140;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp141;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp142;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp143;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp144;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder ResolveName1;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp145;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp146;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp147;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp148;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp149;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp150;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder ResolveName2;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp151;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp152;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp153;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp154;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp155;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp156;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp157;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder ToDefinitionList;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp158;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp159;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp160;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp161;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp162;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp163;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder Bind1;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp164;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp165;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp166;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp167;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationPropertyBuilder __tmp168;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp169;
		public static readonly global::MetaDslx.Core.Immutable.MetaGlobalFunctionBuilder Bind2;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp170;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp171;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp172;
		private static readonly global::MetaDslx.Core.Immutable.MetaParameterBuilder __tmp173;
		/**
		 * <summary>
		 * Represents an annotated element.
		 * </summary>
		 */
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaAnnotatedElement;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp174;
		/**
		 * <summary>
		 * List of annotations
		 * </summary>
		 */
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaAnnotatedElement_AnnotationsProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaDocumentedElement;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaDocumentedElement_DocumentationProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp175;
		private static readonly global::MetaDslx.Core.Immutable.MetaOperationBuilder __tmp176;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp177;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp178;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaNamedElement;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp179;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNamedElement_NameProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaTypedElement;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp180;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaTypedElement_TypeProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp181;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaType;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaAnnotation;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp182;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaAnnotation_PropertiesProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaAnnotationProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaAnnotationProperty_ValueProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp183;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp184;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder __tmp185;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp186;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaNamespace;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNamespace_ParentProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp187;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp188;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNamespace_UsingsProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNamespace_MetaModelProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp189;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp190;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNamespace_NamespacesProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp191;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp192;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNamespace_DeclarationsProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaDeclaration;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp193;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp194;
		private static readonly global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder __tmp195;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp196;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaDeclaration_NamespaceProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaDeclaration_ModelProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaModel;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaModel_UriProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaModel_NamespaceProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaEnumBuilder MetaCollectionKind;
		private static readonly global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder __tmp197;
		private static readonly global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder __tmp198;
		private static readonly global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder __tmp199;
		private static readonly global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder __tmp200;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaCollectionType;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaCollectionType_KindProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaCollectionType_InnerTypeProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaNullableType;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNullableType_InnerTypeProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaPrimitiveType;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp201;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaEnum;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp202;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp203;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaEnum_EnumLiteralsProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp204;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp205;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaEnum_OperationsProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaEnumLiteral;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp206;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp207;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp208;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaEnumLiteral_EnumProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp209;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaClass;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaClass_IsAbstractProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp210;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp211;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaClass_SuperClassesProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp212;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp213;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaClass_PropertiesProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp214;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp215;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaClass_OperationsProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaClass_ConstructorProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp216;
		private static readonly global::MetaDslx.Core.Immutable.MetaOperationBuilder __tmp217;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp218;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp219;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp220;
		private static readonly global::MetaDslx.Core.Immutable.MetaOperationBuilder __tmp221;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp222;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp223;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp224;
		private static readonly global::MetaDslx.Core.Immutable.MetaOperationBuilder __tmp225;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp226;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp227;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp228;
		private static readonly global::MetaDslx.Core.Immutable.MetaOperationBuilder __tmp229;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp230;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp231;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp232;
		private static readonly global::MetaDslx.Core.Immutable.MetaOperationBuilder __tmp233;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp234;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionTypeBuilder __tmp235;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaFunctionType;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp236;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaFunctionType_ParameterTypesProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaFunctionType_ReturnTypeProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaFunction;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp237;
		private static readonly global::MetaDslx.Core.Immutable.MetaAnnotationBuilder __tmp238;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaFunction_TypeProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp239;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaFunction_ParametersProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaFunction_ReturnTypeProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaGlobalFunction;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaOperation;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaOperation_ParentProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaConstant;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp240;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp241;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp242;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaConstant_ValueProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaConstructor;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaConstructor_ParentProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp243;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaConstructor_InitializersProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaParameter;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaParameter_FunctionProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaEnumBuilder MetaPropertyKind;
		private static readonly global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder __tmp244;
		private static readonly global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder __tmp245;
		private static readonly global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder __tmp246;
		private static readonly global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder __tmp247;
		private static readonly global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder __tmp248;
		private static readonly global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder __tmp249;
		private static readonly global::MetaDslx.Core.Immutable.MetaEnumLiteralBuilder __tmp250;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaProperty_KindProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaProperty_ClassProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp251;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaProperty_OppositePropertiesProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp252;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaProperty_SubsettedPropertiesProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp253;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaProperty_SubsettingPropertiesProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp254;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaProperty_RedefinedPropertiesProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp255;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaProperty_RedefiningPropertiesProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaPropertyInitializer;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaPropertyInitializer_ConstructorProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaPropertyInitializer_PropertyNameProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaPropertyInitializer_PropertyContextProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaPropertyInitializer_PropertyProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaPropertyInitializer_ValueProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp256;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp257;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeAsExpressionBuilder __tmp258;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp259;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp260;
		private static readonly global::MetaDslx.Core.Immutable.MetaThisExpressionBuilder __tmp261;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp262;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp263;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp264;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp265;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp266;
		private static readonly global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder __tmp267;
		private static readonly global::MetaDslx.Core.Immutable.MetaThisExpressionBuilder __tmp268;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp269;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp270;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp271;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp272;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp273;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaSynthetizedPropertyInitializer;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaInheritedPropertyInitializer;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaInheritedPropertyInitializer_ObjectNameProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaInheritedPropertyInitializer_ObjectProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp274;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp275;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp276;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp277;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp278;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp279;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp280;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp281;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeAsExpressionBuilder __tmp282;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp283;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp284;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp285;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp286;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp287;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp288;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp289;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp290;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp291;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp292;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp293;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp294;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp295;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp296;
		private static readonly global::MetaDslx.Core.Immutable.MetaThisExpressionBuilder __tmp297;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaExpression_NoTypeErrorProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaExpression_ExpectedTypeProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaBracketExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp298;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp299;
		private static readonly global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder __tmp300;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp301;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp302;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp303;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaBracketExpression_ExpressionProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaBoundExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp304;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp305;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp306;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp307;
		private static readonly global::MetaDslx.Core.Immutable.MetaConditionalExpressionBuilder __tmp308;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp309;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp310;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp311;
		private static readonly global::MetaDslx.Core.Immutable.MetaThisExpressionBuilder __tmp312;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp313;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp314;
		private static readonly global::MetaDslx.Core.Immutable.MetaNullExpressionBuilder __tmp315;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp316;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp317;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp318;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp319;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaBoundExpression_UniqueDefinitionProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp320;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaBoundExpression_ArgumentsProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaBoundExpression_DefinitionsProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaBoundExpression_DefinitionProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaThisExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp321;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp322;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp323;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp324;
		private static readonly global::MetaDslx.Core.Immutable.MetaThisExpressionBuilder __tmp325;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaNullExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp326;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp327;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder __tmp328;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaTypeConversionExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaTypeConversionExpression_TypeReferenceProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaTypeConversionExpression_ExpressionProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp329;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp330;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp331;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp332;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder __tmp333;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaTypeAsExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaTypeCastExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaTypeCheckExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaTypeCheckExpression_TypeReferenceProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaTypeCheckExpression_ExpressionProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp334;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp335;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder __tmp336;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp337;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder __tmp338;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaTypeOfExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaTypeOfExpression_TypeReferenceProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp339;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp340;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder __tmp341;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaConditionalExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaConditionalExpression_ConditionProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaConditionalExpression_BalancedTypeProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaConditionalExpression_ThenProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaConditionalExpression_ElseProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp342;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp343;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder __tmp344;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp345;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp346;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp347;
		private static readonly global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder __tmp348;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp349;
		private static readonly global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder __tmp350;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp351;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp352;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp353;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp354;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp355;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaConstantExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaConstantExpression_ValueProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp356;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp357;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp358;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp359;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp360;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaIdentifierExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaIdentifierExpression_NameProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp361;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp362;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp363;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp364;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp365;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaMemberAccessExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaMemberAccessExpression_ExpressionProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaMemberAccessExpression_NameProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp366;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp367;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder __tmp368;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp369;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp370;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp371;
		private static readonly global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder __tmp372;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp373;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp374;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaFunctionCallExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaFunctionCallExpression_ExpressionProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp375;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp376;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp377;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp378;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder __tmp379;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp380;
		private static readonly global::MetaDslx.Core.Immutable.MetaConditionalExpressionBuilder __tmp381;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeCheckExpressionBuilder __tmp382;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp383;
		private static readonly global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder __tmp384;
		private static readonly global::MetaDslx.Core.Immutable.MetaBracketExpressionBuilder __tmp385;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeCastExpressionBuilder __tmp386;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp387;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp388;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp389;
		private static readonly global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder __tmp390;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp391;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp392;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp393;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp394;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp395;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaIndexerExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaIndexerExpression_ExpressionProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp396;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp397;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp398;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp399;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeOfExpressionBuilder __tmp400;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp401;
		private static readonly global::MetaDslx.Core.Immutable.MetaConditionalExpressionBuilder __tmp402;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeCheckExpressionBuilder __tmp403;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp404;
		private static readonly global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder __tmp405;
		private static readonly global::MetaDslx.Core.Immutable.MetaBracketExpressionBuilder __tmp406;
		private static readonly global::MetaDslx.Core.Immutable.MetaTypeCastExpressionBuilder __tmp407;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp408;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp409;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp410;
		private static readonly global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder __tmp411;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp412;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaNewExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNewExpression_TypeReferenceProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp413;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNewExpression_PropertyInitializersProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp414;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp415;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp416;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaNewPropertyInitializer;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNewPropertyInitializer_ParentProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNewPropertyInitializer_PropertyNameProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNewPropertyInitializer_ValueProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNewPropertyInitializer_PropertyProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp417;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp418;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp419;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp420;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp421;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp422;
		private static readonly global::MetaDslx.Core.Immutable.MetaMemberAccessExpressionBuilder __tmp423;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp424;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp425;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp426;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp427;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp428;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp429;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaNewCollectionExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNewCollectionExpression_TypeReferenceProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaCollectionTypeBuilder __tmp430;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaNewCollectionExpression_ValuesProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp431;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp432;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp433;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaOperatorExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaOperatorExpression_NameProperty;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp434;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp435;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp436;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp437;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp438;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaUnaryExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp439;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaUnaryExpression_ExpressionProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaUnaryPlusExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp440;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp441;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp442;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaNegateExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp443;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp444;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp445;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaOnesComplementExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp446;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp447;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp448;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaNotExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp449;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp450;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp451;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaUnaryAssignExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaPostIncrementAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp452;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp453;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp454;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaPostDecrementAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp455;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp456;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp457;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaPreIncrementAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp458;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp459;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp460;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaPreDecrementAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp461;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp462;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp463;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaBinaryExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp464;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaBinaryExpression_LeftProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaPropertyBuilder MetaBinaryExpression_RightProperty;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaBinaryArithmeticExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaMultiplyExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp465;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp466;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp467;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaDivideExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp468;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp469;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp470;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaModuloExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp471;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp472;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp473;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaAddExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp474;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp475;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp476;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaSubtractExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp477;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp478;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp479;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaLeftShiftExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp480;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp481;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp482;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaRightShiftExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp483;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp484;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp485;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaBinaryComparisonExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaLessThanExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp486;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp487;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp488;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaLessThanOrEqualExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp489;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp490;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp491;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaGreaterThanExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp492;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp493;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp494;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaGreaterThanOrEqualExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp495;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp496;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp497;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaEqualExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp498;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp499;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp500;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaNotEqualExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp501;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp502;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp503;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaBinaryLogicalExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaAndExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp504;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp505;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp506;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaOrExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp507;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp508;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp509;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaExclusiveOrExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp510;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp511;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp512;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaAndAlsoExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp513;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp514;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp515;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaOrElseExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp516;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp517;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp518;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaNullCoalescingExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp519;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp520;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp521;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaAssignmentExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp522;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp523;
		private static readonly global::MetaDslx.Core.Immutable.MetaFunctionCallExpressionBuilder __tmp524;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp525;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp526;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp527;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp528;
		private static readonly global::MetaDslx.Core.Immutable.MetaInheritedPropertyInitializerBuilder __tmp529;
		private static readonly global::MetaDslx.Core.Immutable.MetaIdentifierExpressionBuilder __tmp530;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp531;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp532;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp533;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaArithmeticAssignmentExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaMultiplyAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp534;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp535;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp536;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaDivideAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp537;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp538;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp539;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaModuloAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp540;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp541;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp542;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaAddAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp543;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp544;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp545;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaSubtractAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp546;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp547;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp548;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaLeftShiftAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp549;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp550;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp551;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaRightShiftAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp552;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp553;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp554;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaLogicalAssignmentExpression;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaAndAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp555;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp556;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp557;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaExclusiveOrAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp558;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp559;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp560;
		public static readonly global::MetaDslx.Core.Immutable.MetaClassBuilder MetaOrAssignExpression;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstructorBuilder __tmp561;
		private static readonly global::MetaDslx.Core.Immutable.MetaSynthetizedPropertyInitializerBuilder __tmp562;
		private static readonly global::MetaDslx.Core.Immutable.MetaConstantExpressionBuilder __tmp563;
		
	
	    static MetaInstance()
	    {
	    }
	}
    /// <summary>
    /// Factory class for creating instances of model elements.
    /// </summary>
    public class MetaFactory : global::MetaDslx.Core.Immutable.ModelFactory
    {
        public MetaFactory()
            : base()
        {
    		MetaDescriptor.Init();
        }
    
        public MetaFactory(global::MetaDslx.Core.Immutable.MutableModel model)
            : base(model)
        {
    		MetaDescriptor.Init();
        }
    
        public override global::MetaDslx.Core.Immutable.IMutableSymbol Create(string type)
        {
            switch (type)
            {
                case "MetaAnnotation": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaAnnotation();
                case "MetaAnnotationProperty": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaAnnotationProperty();
                case "MetaNamespace": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaNamespace();
                case "MetaModel": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaModel();
                case "MetaCollectionType": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaCollectionType();
                case "MetaNullableType": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaNullableType();
                case "MetaPrimitiveType": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaPrimitiveType();
                case "MetaEnum": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaEnum();
                case "MetaEnumLiteral": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaEnumLiteral();
                case "MetaClass": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaClass();
                case "MetaFunctionType": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaFunctionType();
                case "MetaGlobalFunction": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaGlobalFunction();
                case "MetaOperation": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaOperation();
                case "MetaConstant": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaConstant();
                case "MetaConstructor": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaConstructor();
                case "MetaParameter": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaParameter();
                case "MetaProperty": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaProperty();
                case "MetaSynthetizedPropertyInitializer": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaSynthetizedPropertyInitializer();
                case "MetaInheritedPropertyInitializer": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaInheritedPropertyInitializer();
                case "MetaBracketExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaBracketExpression();
                case "MetaThisExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaThisExpression();
                case "MetaNullExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaNullExpression();
                case "MetaTypeAsExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaTypeAsExpression();
                case "MetaTypeCastExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaTypeCastExpression();
                case "MetaTypeCheckExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaTypeCheckExpression();
                case "MetaTypeOfExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaTypeOfExpression();
                case "MetaConditionalExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaConditionalExpression();
                case "MetaConstantExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaConstantExpression();
                case "MetaIdentifierExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaIdentifierExpression();
                case "MetaMemberAccessExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaMemberAccessExpression();
                case "MetaFunctionCallExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaFunctionCallExpression();
                case "MetaIndexerExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaIndexerExpression();
                case "MetaNewExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaNewExpression();
                case "MetaNewPropertyInitializer": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaNewPropertyInitializer();
                case "MetaNewCollectionExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaNewCollectionExpression();
                case "MetaUnaryPlusExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaUnaryPlusExpression();
                case "MetaNegateExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaNegateExpression();
                case "MetaOnesComplementExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaOnesComplementExpression();
                case "MetaNotExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaNotExpression();
                case "MetaPostIncrementAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaPostIncrementAssignExpression();
                case "MetaPostDecrementAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaPostDecrementAssignExpression();
                case "MetaPreIncrementAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaPreIncrementAssignExpression();
                case "MetaPreDecrementAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaPreDecrementAssignExpression();
                case "MetaMultiplyExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaMultiplyExpression();
                case "MetaDivideExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaDivideExpression();
                case "MetaModuloExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaModuloExpression();
                case "MetaAddExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaAddExpression();
                case "MetaSubtractExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaSubtractExpression();
                case "MetaLeftShiftExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaLeftShiftExpression();
                case "MetaRightShiftExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaRightShiftExpression();
                case "MetaLessThanExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaLessThanExpression();
                case "MetaLessThanOrEqualExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaLessThanOrEqualExpression();
                case "MetaGreaterThanExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaGreaterThanExpression();
                case "MetaGreaterThanOrEqualExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaGreaterThanOrEqualExpression();
                case "MetaEqualExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaEqualExpression();
                case "MetaNotEqualExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaNotEqualExpression();
                case "MetaAndExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaAndExpression();
                case "MetaOrExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaOrExpression();
                case "MetaExclusiveOrExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaExclusiveOrExpression();
                case "MetaAndAlsoExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaAndAlsoExpression();
                case "MetaOrElseExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaOrElseExpression();
                case "MetaNullCoalescingExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaNullCoalescingExpression();
                case "MetaAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaAssignExpression();
                case "MetaMultiplyAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaMultiplyAssignExpression();
                case "MetaDivideAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaDivideAssignExpression();
                case "MetaModuloAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaModuloAssignExpression();
                case "MetaAddAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaAddAssignExpression();
                case "MetaSubtractAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaSubtractAssignExpression();
                case "MetaLeftShiftAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaLeftShiftAssignExpression();
                case "MetaRightShiftAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaRightShiftAssignExpression();
                case "MetaAndAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaAndAssignExpression();
                case "MetaExclusiveOrAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaExclusiveOrAssignExpression();
                case "MetaOrAssignExpression": return (global::MetaDslx.Core.Immutable.IMutableSymbol)this.MetaOrAssignExpression();
                default:
                    throw new ModelException("Unknown type name: " + type);
            }
        }
    
        /// <summary>
        /// Creates a new instance of MetaAnnotation.
        /// </summary>
        public MetaAnnotationBuilder MetaAnnotation(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaAnnotationId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaAnnotationBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaAnnotationProperty.
        /// </summary>
        public MetaAnnotationPropertyBuilder MetaAnnotationProperty(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaAnnotationPropertyId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaAnnotationPropertyBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaNamespace.
        /// </summary>
        public MetaNamespaceBuilder MetaNamespace(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaNamespaceId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaNamespaceBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaModel.
        /// </summary>
        public MetaModelBuilder MetaModel(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaModelId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaModelBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaCollectionType.
        /// </summary>
        public MetaCollectionTypeBuilder MetaCollectionType(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaCollectionTypeId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaCollectionTypeBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaNullableType.
        /// </summary>
        public MetaNullableTypeBuilder MetaNullableType(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaNullableTypeId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaNullableTypeBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaPrimitiveType.
        /// </summary>
        public MetaPrimitiveTypeBuilder MetaPrimitiveType(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaPrimitiveTypeId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaPrimitiveTypeBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaEnum.
        /// </summary>
        public MetaEnumBuilder MetaEnum(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaEnumId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaEnumBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaEnumLiteral.
        /// </summary>
        public MetaEnumLiteralBuilder MetaEnumLiteral(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaEnumLiteralId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaEnumLiteralBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaClass.
        /// </summary>
        public MetaClassBuilder MetaClass(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaClassId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaClassBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaFunctionType.
        /// </summary>
        public MetaFunctionTypeBuilder MetaFunctionType(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaFunctionTypeId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaFunctionTypeBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaGlobalFunction.
        /// </summary>
        public MetaGlobalFunctionBuilder MetaGlobalFunction(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaGlobalFunctionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaGlobalFunctionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaOperation.
        /// </summary>
        public MetaOperationBuilder MetaOperation(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaOperationId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaOperationBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaConstant.
        /// </summary>
        public MetaConstantBuilder MetaConstant(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaConstantId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaConstantBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaConstructor.
        /// </summary>
        public MetaConstructorBuilder MetaConstructor(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaConstructorId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaConstructorBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaParameter.
        /// </summary>
        public MetaParameterBuilder MetaParameter(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaParameterId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaParameterBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaProperty.
        /// </summary>
        public MetaPropertyBuilder MetaProperty(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaPropertyId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaPropertyBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaSynthetizedPropertyInitializer.
        /// </summary>
        public MetaSynthetizedPropertyInitializerBuilder MetaSynthetizedPropertyInitializer(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaSynthetizedPropertyInitializerId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaSynthetizedPropertyInitializerBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaInheritedPropertyInitializer.
        /// </summary>
        public MetaInheritedPropertyInitializerBuilder MetaInheritedPropertyInitializer(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaInheritedPropertyInitializerId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaInheritedPropertyInitializerBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaBracketExpression.
        /// </summary>
        public MetaBracketExpressionBuilder MetaBracketExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaBracketExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaBracketExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaThisExpression.
        /// </summary>
        public MetaThisExpressionBuilder MetaThisExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaThisExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaThisExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaNullExpression.
        /// </summary>
        public MetaNullExpressionBuilder MetaNullExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaNullExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaNullExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaTypeAsExpression.
        /// </summary>
        public MetaTypeAsExpressionBuilder MetaTypeAsExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaTypeAsExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaTypeAsExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaTypeCastExpression.
        /// </summary>
        public MetaTypeCastExpressionBuilder MetaTypeCastExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaTypeCastExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaTypeCastExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaTypeCheckExpression.
        /// </summary>
        public MetaTypeCheckExpressionBuilder MetaTypeCheckExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaTypeCheckExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaTypeCheckExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaTypeOfExpression.
        /// </summary>
        public MetaTypeOfExpressionBuilder MetaTypeOfExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaTypeOfExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaTypeOfExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaConditionalExpression.
        /// </summary>
        public MetaConditionalExpressionBuilder MetaConditionalExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaConditionalExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaConditionalExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaConstantExpression.
        /// </summary>
        public MetaConstantExpressionBuilder MetaConstantExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaConstantExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaConstantExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaIdentifierExpression.
        /// </summary>
        public MetaIdentifierExpressionBuilder MetaIdentifierExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaIdentifierExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaIdentifierExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaMemberAccessExpression.
        /// </summary>
        public MetaMemberAccessExpressionBuilder MetaMemberAccessExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaMemberAccessExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaMemberAccessExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaFunctionCallExpression.
        /// </summary>
        public MetaFunctionCallExpressionBuilder MetaFunctionCallExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaFunctionCallExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaFunctionCallExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaIndexerExpression.
        /// </summary>
        public MetaIndexerExpressionBuilder MetaIndexerExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaIndexerExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaIndexerExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaNewExpression.
        /// </summary>
        public MetaNewExpressionBuilder MetaNewExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaNewExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaNewExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaNewPropertyInitializer.
        /// </summary>
        public MetaNewPropertyInitializerBuilder MetaNewPropertyInitializer(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaNewPropertyInitializerId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaNewPropertyInitializerBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaNewCollectionExpression.
        /// </summary>
        public MetaNewCollectionExpressionBuilder MetaNewCollectionExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaNewCollectionExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaNewCollectionExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaUnaryPlusExpression.
        /// </summary>
        public MetaUnaryPlusExpressionBuilder MetaUnaryPlusExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaUnaryPlusExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaUnaryPlusExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaNegateExpression.
        /// </summary>
        public MetaNegateExpressionBuilder MetaNegateExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaNegateExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaNegateExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaOnesComplementExpression.
        /// </summary>
        public MetaOnesComplementExpressionBuilder MetaOnesComplementExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaOnesComplementExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaOnesComplementExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaNotExpression.
        /// </summary>
        public MetaNotExpressionBuilder MetaNotExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaNotExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaNotExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaPostIncrementAssignExpression.
        /// </summary>
        public MetaPostIncrementAssignExpressionBuilder MetaPostIncrementAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaPostIncrementAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaPostIncrementAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaPostDecrementAssignExpression.
        /// </summary>
        public MetaPostDecrementAssignExpressionBuilder MetaPostDecrementAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaPostDecrementAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaPostDecrementAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaPreIncrementAssignExpression.
        /// </summary>
        public MetaPreIncrementAssignExpressionBuilder MetaPreIncrementAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaPreIncrementAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaPreIncrementAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaPreDecrementAssignExpression.
        /// </summary>
        public MetaPreDecrementAssignExpressionBuilder MetaPreDecrementAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaPreDecrementAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaPreDecrementAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaMultiplyExpression.
        /// </summary>
        public MetaMultiplyExpressionBuilder MetaMultiplyExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaMultiplyExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaMultiplyExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaDivideExpression.
        /// </summary>
        public MetaDivideExpressionBuilder MetaDivideExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaDivideExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaDivideExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaModuloExpression.
        /// </summary>
        public MetaModuloExpressionBuilder MetaModuloExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaModuloExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaModuloExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaAddExpression.
        /// </summary>
        public MetaAddExpressionBuilder MetaAddExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaAddExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaAddExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaSubtractExpression.
        /// </summary>
        public MetaSubtractExpressionBuilder MetaSubtractExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaSubtractExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaSubtractExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaLeftShiftExpression.
        /// </summary>
        public MetaLeftShiftExpressionBuilder MetaLeftShiftExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaLeftShiftExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaLeftShiftExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaRightShiftExpression.
        /// </summary>
        public MetaRightShiftExpressionBuilder MetaRightShiftExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaRightShiftExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaRightShiftExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaLessThanExpression.
        /// </summary>
        public MetaLessThanExpressionBuilder MetaLessThanExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaLessThanExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaLessThanExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaLessThanOrEqualExpression.
        /// </summary>
        public MetaLessThanOrEqualExpressionBuilder MetaLessThanOrEqualExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaLessThanOrEqualExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaLessThanOrEqualExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaGreaterThanExpression.
        /// </summary>
        public MetaGreaterThanExpressionBuilder MetaGreaterThanExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaGreaterThanExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaGreaterThanExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaGreaterThanOrEqualExpression.
        /// </summary>
        public MetaGreaterThanOrEqualExpressionBuilder MetaGreaterThanOrEqualExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaGreaterThanOrEqualExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaGreaterThanOrEqualExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaEqualExpression.
        /// </summary>
        public MetaEqualExpressionBuilder MetaEqualExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaEqualExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaEqualExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaNotEqualExpression.
        /// </summary>
        public MetaNotEqualExpressionBuilder MetaNotEqualExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaNotEqualExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaNotEqualExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaAndExpression.
        /// </summary>
        public MetaAndExpressionBuilder MetaAndExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaAndExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaAndExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaOrExpression.
        /// </summary>
        public MetaOrExpressionBuilder MetaOrExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaOrExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaOrExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaExclusiveOrExpression.
        /// </summary>
        public MetaExclusiveOrExpressionBuilder MetaExclusiveOrExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaExclusiveOrExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaExclusiveOrExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaAndAlsoExpression.
        /// </summary>
        public MetaAndAlsoExpressionBuilder MetaAndAlsoExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaAndAlsoExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaAndAlsoExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaOrElseExpression.
        /// </summary>
        public MetaOrElseExpressionBuilder MetaOrElseExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaOrElseExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaOrElseExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaNullCoalescingExpression.
        /// </summary>
        public MetaNullCoalescingExpressionBuilder MetaNullCoalescingExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaNullCoalescingExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaNullCoalescingExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaAssignExpression.
        /// </summary>
        public MetaAssignExpressionBuilder MetaAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaMultiplyAssignExpression.
        /// </summary>
        public MetaMultiplyAssignExpressionBuilder MetaMultiplyAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaMultiplyAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaMultiplyAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaDivideAssignExpression.
        /// </summary>
        public MetaDivideAssignExpressionBuilder MetaDivideAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaDivideAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaDivideAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaModuloAssignExpression.
        /// </summary>
        public MetaModuloAssignExpressionBuilder MetaModuloAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaModuloAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaModuloAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaAddAssignExpression.
        /// </summary>
        public MetaAddAssignExpressionBuilder MetaAddAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaAddAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaAddAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaSubtractAssignExpression.
        /// </summary>
        public MetaSubtractAssignExpressionBuilder MetaSubtractAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaSubtractAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaSubtractAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaLeftShiftAssignExpression.
        /// </summary>
        public MetaLeftShiftAssignExpressionBuilder MetaLeftShiftAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaLeftShiftAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaLeftShiftAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaRightShiftAssignExpression.
        /// </summary>
        public MetaRightShiftAssignExpressionBuilder MetaRightShiftAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaRightShiftAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaRightShiftAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaAndAssignExpression.
        /// </summary>
        public MetaAndAssignExpressionBuilder MetaAndAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaAndAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaAndAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaExclusiveOrAssignExpression.
        /// </summary>
        public MetaExclusiveOrAssignExpressionBuilder MetaExclusiveOrAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaExclusiveOrAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaExclusiveOrAssignExpressionBuilder)symbol;
    	}
    
        /// <summary>
        /// Creates a new instance of MetaOrAssignExpression.
        /// </summary>
        public MetaOrAssignExpressionBuilder MetaOrAssignExpression(params global::MetaDslx.Core.Immutable.PropertyInit[] propertyInitializers)
    	{
    		global::MetaDslx.Core.Immutable.MutableSymbolBase symbol = (global::MetaDslx.Core.Immutable.MutableSymbolBase)this.AddSymbol(new MetaOrAssignExpressionId());
    		symbol.MInitProperties(propertyInitializers);
    		symbol.MMakeCreated();
    		return (MetaOrAssignExpressionBuilder)symbol;
    	}
    }
    
    internal static class MetaImplementationProvider
    {
        // If there is a compile error at this line, create a new class called MetaImplementation
    	// which is a subclass of MetaImplementationBase:
        private static MetaImplementation implementation = new MetaImplementation();
    
        public static MetaImplementation Implementation
        {
            get { return MetaImplementationProvider.implementation; }
        }
    }
    
    public static class MetaCollectionKindExtensions
    {
    }
    
    public static class MetaPropertyKindExtensions
    {
    }
    
    /// <summary>
    /// Base class for implementing the behavior of the model elements.
    /// This class has to be be overriden in MetaImplementation to provide custom
    /// implementation for the constructors, operations and property values.
    /// </summary>
    internal abstract class MetaImplementationBase
    {
        /// <summary>
    	/// Implements the constructor: MetaAnnotatedElement()
        /// </summary>
        public virtual void MetaAnnotatedElement(MetaAnnotatedElementBuilder @this)
        {
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaDocumentedElement()
        /// </summary>
        public virtual void MetaDocumentedElement(MetaDocumentedElementBuilder @this)
        {
    		
        }
    
        /// <summary>
        /// Implements the operation: MetaDocumentedElement.GetDocumentationLines()
        /// </summary>
        public virtual global::MetaDslx.Core.Immutable.IImmutableModelList<string> MetaDocumentedElement_GetDocumentationLines(global::MetaDslx.Core.Immutable.MetaDocumentedElement @this)
        {
            throw new NotImplementedException();
        }
    
        /// <summary>
    	/// Implements the constructor: MetaNamedElement()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaDocumentedElement
    	/// All superclasses: global::MetaDslx.Core.MetaDocumentedElement
        public virtual void MetaNamedElement(MetaNamedElementBuilder @this)
        {
            this.MetaDocumentedElement(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaTypedElement()
        /// </summary>
        public virtual void MetaTypedElement(MetaTypedElementBuilder @this)
        {
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaType()
        /// </summary>
        public virtual void MetaType(MetaTypeBuilder @this)
        {
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaAnnotation()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaNamedElement
    	/// All superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement
        public virtual void MetaAnnotation(MetaAnnotationBuilder @this)
        {
            this.MetaNamedElement(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaAnnotationProperty()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaNamedElement
    	/// All superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement
        public virtual void MetaAnnotationProperty(MetaAnnotationPropertyBuilder @this)
        {
            this.MetaNamedElement(@this);
    		@this.ValueLazyChild.ExpectedType = () => global::MetaDslx.Core.Immutable.MetaInstance.Any;
        }
    
        /// <summary>
    	/// Implements the constructor: MetaNamespace()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaAnnotatedElement
    	/// All superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaAnnotatedElement
        public virtual void MetaNamespace(MetaNamespaceBuilder @this)
        {
            this.MetaNamedElement(@this);
            this.MetaAnnotatedElement(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaDeclaration()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaAnnotatedElement
    	/// All superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaAnnotatedElement
        /// Initializes the following derived properties:
    	/// <ul>
        ///     <li>Model</li>
    	/// </ul>
        public virtual void MetaDeclaration(MetaDeclarationBuilder @this)
        {
            this.MetaNamedElement(@this);
            this.MetaAnnotatedElement(@this);
    		@this.ModelLazy = () => (global::MetaDslx.Core.Immutable.MetaModelBuilder)(@this.Namespace.MetaModel);
        }
    
        /// <summary>
    	/// Implements the constructor: MetaModel()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaAnnotatedElement
    	/// All superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaAnnotatedElement
        public virtual void MetaModel(MetaModelBuilder @this)
        {
            this.MetaNamedElement(@this);
            this.MetaAnnotatedElement(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaCollectionType()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaType
    	/// All superclasses: global::MetaDslx.Core.MetaType
        public virtual void MetaCollectionType(MetaCollectionTypeBuilder @this)
        {
            this.MetaType(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaNullableType()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaType
    	/// All superclasses: global::MetaDslx.Core.MetaType
        public virtual void MetaNullableType(MetaNullableTypeBuilder @this)
        {
            this.MetaType(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaPrimitiveType()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaType, global::MetaDslx.Core.MetaNamedElement
    	/// All superclasses: global::MetaDslx.Core.MetaType, global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement
        public virtual void MetaPrimitiveType(MetaPrimitiveTypeBuilder @this)
        {
            this.MetaType(@this);
            this.MetaNamedElement(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaEnum()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaType, global::MetaDslx.Core.MetaDeclaration
    	/// All superclasses: global::MetaDslx.Core.MetaType, global::MetaDslx.Core.MetaDeclaration, global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaAnnotatedElement
        public virtual void MetaEnum(MetaEnumBuilder @this)
        {
            this.MetaType(@this);
            this.MetaDeclaration(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaEnumLiteral()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaTypedElement
    	/// All superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaEnumLiteral(MetaEnumLiteralBuilder @this)
        {
            this.MetaNamedElement(@this);
            this.MetaTypedElement(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaClass()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaType, global::MetaDslx.Core.MetaDeclaration
    	/// All superclasses: global::MetaDslx.Core.MetaType, global::MetaDslx.Core.MetaDeclaration, global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaAnnotatedElement
        public virtual void MetaClass(MetaClassBuilder @this)
        {
            this.MetaType(@this);
            this.MetaDeclaration(@this);
    		
        }
    
        /// <summary>
        /// Implements the operation: MetaClass.GetAllSuperClasses()
        /// </summary>
        public virtual global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaClass> MetaClass_GetAllSuperClasses(global::MetaDslx.Core.Immutable.MetaClass @this)
        {
            throw new NotImplementedException();
        }
    
        /// <summary>
        /// Implements the operation: MetaClass.GetAllProperties()
        /// </summary>
        public virtual global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> MetaClass_GetAllProperties(global::MetaDslx.Core.Immutable.MetaClass @this)
        {
            throw new NotImplementedException();
        }
    
        /// <summary>
        /// Implements the operation: MetaClass.GetAllOperations()
        /// </summary>
        public virtual global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> MetaClass_GetAllOperations(global::MetaDslx.Core.Immutable.MetaClass @this)
        {
            throw new NotImplementedException();
        }
    
        /// <summary>
        /// Implements the operation: MetaClass.GetAllImplementedProperties()
        /// </summary>
        public virtual global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaProperty> MetaClass_GetAllImplementedProperties(global::MetaDslx.Core.Immutable.MetaClass @this)
        {
            throw new NotImplementedException();
        }
    
        /// <summary>
        /// Implements the operation: MetaClass.GetAllImplementedOperations()
        /// </summary>
        public virtual global::MetaDslx.Core.Immutable.IImmutableModelList<global::MetaDslx.Core.Immutable.MetaOperation> MetaClass_GetAllImplementedOperations(global::MetaDslx.Core.Immutable.MetaClass @this)
        {
            throw new NotImplementedException();
        }
    
        /// <summary>
    	/// Implements the constructor: MetaFunctionType()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaType
    	/// All superclasses: global::MetaDslx.Core.MetaType
        public virtual void MetaFunctionType(MetaFunctionTypeBuilder @this)
        {
            this.MetaType(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaFunction()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaTypedElement, global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaAnnotatedElement
    	/// All superclasses: global::MetaDslx.Core.MetaTypedElement, global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaAnnotatedElement
        /// Initializes the following readonly properties:
    	/// <ul>
        ///     <li>Type</li>
    	/// </ul>
        public virtual void MetaFunction(MetaFunctionBuilder @this)
        {
            this.MetaTypedElement(@this);
            this.MetaNamedElement(@this);
            this.MetaAnnotatedElement(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaGlobalFunction()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaFunction, global::MetaDslx.Core.MetaDeclaration
    	/// All superclasses: global::MetaDslx.Core.MetaFunction, global::MetaDslx.Core.MetaTypedElement, global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaAnnotatedElement, global::MetaDslx.Core.MetaDeclaration
        public virtual void MetaGlobalFunction(MetaGlobalFunctionBuilder @this)
        {
            this.MetaFunction(@this);
            this.MetaDeclaration(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaOperation()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaFunction
    	/// All superclasses: global::MetaDslx.Core.MetaFunction, global::MetaDslx.Core.MetaTypedElement, global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaAnnotatedElement
        public virtual void MetaOperation(MetaOperationBuilder @this)
        {
            this.MetaFunction(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaConstant()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaTypedElement, global::MetaDslx.Core.MetaDeclaration
    	/// All superclasses: global::MetaDslx.Core.MetaTypedElement, global::MetaDslx.Core.MetaDeclaration, global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaAnnotatedElement
        public virtual void MetaConstant(MetaConstantBuilder @this)
        {
            this.MetaTypedElement(@this);
            this.MetaDeclaration(@this);
    		@this.ValueLazyChild.ExpectedType = () => @this.Type;
        }
    
        /// <summary>
    	/// Implements the constructor: MetaConstructor()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaAnnotatedElement
    	/// All superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaAnnotatedElement
        public virtual void MetaConstructor(MetaConstructorBuilder @this)
        {
            this.MetaNamedElement(@this);
            this.MetaAnnotatedElement(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaParameter()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaTypedElement, global::MetaDslx.Core.MetaAnnotatedElement
    	/// All superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaTypedElement, global::MetaDslx.Core.MetaAnnotatedElement
        public virtual void MetaParameter(MetaParameterBuilder @this)
        {
            this.MetaNamedElement(@this);
            this.MetaTypedElement(@this);
            this.MetaAnnotatedElement(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaProperty()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaTypedElement, global::MetaDslx.Core.MetaAnnotatedElement
    	/// All superclasses: global::MetaDslx.Core.MetaNamedElement, global::MetaDslx.Core.MetaDocumentedElement, global::MetaDslx.Core.MetaTypedElement, global::MetaDslx.Core.MetaAnnotatedElement
        public virtual void MetaProperty(MetaPropertyBuilder @this)
        {
            this.MetaNamedElement(@this);
            this.MetaTypedElement(@this);
            this.MetaAnnotatedElement(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaPropertyInitializer()
        /// </summary>
        public virtual void MetaPropertyInitializer(MetaPropertyInitializerBuilder @this)
        {
    		@this.PropertyContextLazy = () => (global::MetaDslx.Core.Immutable.MetaClassBuilder)(this.current_type(@this) as MetaClassBuilder);
    		@this.PropertyLazy = () => (global::MetaDslx.Core.Immutable.MetaPropertyBuilder)(this.bind(this.resolve_name(@this.PropertyContext, @this.PropertyName)));
    		@this.ValueLazyChild.ExpectedType = () => this.get_type(@this.Property);
        }
    
        /// <summary>
    	/// Implements the constructor: MetaSynthetizedPropertyInitializer()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaPropertyInitializer
    	/// All superclasses: global::MetaDslx.Core.MetaPropertyInitializer
        public virtual void MetaSynthetizedPropertyInitializer(MetaSynthetizedPropertyInitializerBuilder @this)
        {
            this.MetaPropertyInitializer(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaInheritedPropertyInitializer()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaPropertyInitializer
    	/// All superclasses: global::MetaDslx.Core.MetaPropertyInitializer
        public virtual void MetaInheritedPropertyInitializer(MetaInheritedPropertyInitializerBuilder @this)
        {
            this.MetaPropertyInitializer(@this);
    		@this.ObjectLazy = () => (global::MetaDslx.Core.Immutable.MetaPropertyBuilder)(this.bind(this.resolve_name(@this.ObjectName)));
        }
    
        /// <summary>
    	/// Implements the constructor: MetaExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaTypedElement
    	/// All superclasses: global::MetaDslx.Core.MetaTypedElement
        /// Initializes the following readonly properties:
    	/// <ul>
        ///     <li>NoTypeError</li>
    	/// </ul>
        public virtual void MetaExpression(MetaExpressionBuilder @this)
        {
            this.MetaTypedElement(@this);
    		@this.NoTypeErrorLazy = () => (bool)(this.type_check(@this));
        }
    
        /// <summary>
    	/// Implements the constructor: MetaBracketExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaExpression
    	/// All superclasses: global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaBracketExpression(MetaBracketExpressionBuilder @this)
        {
            this.MetaExpression(@this);
    		@this.ExpressionLazyChild.ExpectedType = () => @this.ExpectedType;
        }
    
        /// <summary>
    	/// Implements the constructor: MetaBoundExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaExpression
    	/// All superclasses: global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaBoundExpression(MetaBoundExpressionBuilder @this)
        {
            this.MetaExpression(@this);
    		@this.UniqueDefinitionLazy = () => (bool)(true);
    		@this.DefinitionLazy = () => (global::MetaDslx.Core.Immutable.ISymbol)(@this.UniqueDefinition ? this.bind(@this, @this.Definitions) : null);
        }
    
        /// <summary>
    	/// Implements the constructor: MetaThisExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBoundExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaThisExpression(MetaThisExpressionBuilder @this)
        {
            this.MetaBoundExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaNullExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaExpression
    	/// All superclasses: global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaNullExpression(MetaNullExpressionBuilder @this)
        {
            this.MetaExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaTypeConversionExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaExpression
    	/// All superclasses: global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaTypeConversionExpression(MetaTypeConversionExpressionBuilder @this)
        {
            this.MetaExpression(@this);
    		@this.ExpressionLazyChild.ExpectedType = () => global::MetaDslx.Core.Immutable.MetaInstance.Any;
        }
    
        /// <summary>
    	/// Implements the constructor: MetaTypeAsExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaTypeConversionExpression
    	/// All superclasses: global::MetaDslx.Core.MetaTypeConversionExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaTypeAsExpression(MetaTypeAsExpressionBuilder @this)
        {
            this.MetaTypeConversionExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaTypeCastExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaTypeConversionExpression
    	/// All superclasses: global::MetaDslx.Core.MetaTypeConversionExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaTypeCastExpression(MetaTypeCastExpressionBuilder @this)
        {
            this.MetaTypeConversionExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaTypeCheckExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaExpression
    	/// All superclasses: global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaTypeCheckExpression(MetaTypeCheckExpressionBuilder @this)
        {
            this.MetaExpression(@this);
    		@this.ExpressionLazyChild.ExpectedType = () => global::MetaDslx.Core.Immutable.MetaInstance.Any;
        }
    
        /// <summary>
    	/// Implements the constructor: MetaTypeOfExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaExpression
    	/// All superclasses: global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaTypeOfExpression(MetaTypeOfExpressionBuilder @this)
        {
            this.MetaExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaConditionalExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaExpression
    	/// All superclasses: global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaConditionalExpression(MetaConditionalExpressionBuilder @this)
        {
            this.MetaExpression(@this);
    		@this.ConditionLazyChild.ExpectedType = () => global::MetaDslx.Core.Immutable.MetaInstance.Bool;
    		@this.ThenLazyChild.ExpectedType = () => @this.ExpectedType;
    		@this.ElseLazyChild.ExpectedType = () => @this.ExpectedType;
        }
    
        /// <summary>
    	/// Implements the constructor: MetaConstantExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaExpression
    	/// All superclasses: global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaConstantExpression(MetaConstantExpressionBuilder @this)
        {
            this.MetaExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaIdentifierExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBoundExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaIdentifierExpression(MetaIdentifierExpressionBuilder @this)
        {
            this.MetaBoundExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaMemberAccessExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBoundExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaMemberAccessExpression(MetaMemberAccessExpressionBuilder @this)
        {
            this.MetaBoundExpression(@this);
    		@this.ExpressionLazyChild.ExpectedType = () => global::MetaDslx.Core.Immutable.MetaInstance.None;
        }
    
        /// <summary>
    	/// Implements the constructor: MetaFunctionCallExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBoundExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaFunctionCallExpression(MetaFunctionCallExpressionBuilder @this)
        {
            this.MetaBoundExpression(@this);
    		((MutableSymbolBase)@this).MChildAddLazy(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaFunctionCallExpression.ExpressionProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => false);
    		@this.ExpressionLazyChild.ExpectedType = () => global::MetaDslx.Core.Immutable.MetaInstance.None;
        }
    
        /// <summary>
    	/// Implements the constructor: MetaIndexerExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBoundExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaIndexerExpression(MetaIndexerExpressionBuilder @this)
        {
            this.MetaBoundExpression(@this);
    		((MutableSymbolBase)@this).MChildAddLazy(global::MetaDslx.Core.Immutable.MetaDescriptor.MetaIndexerExpression.ExpressionProperty, global::MetaDslx.Core.Immutable.MetaDescriptor.MetaBoundExpression.UniqueDefinitionProperty, () => false);
    		@this.ExpressionLazyChild.ExpectedType = () => global::MetaDslx.Core.Immutable.MetaInstance.None;
        }
    
        /// <summary>
    	/// Implements the constructor: MetaNewExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaExpression
    	/// All superclasses: global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaNewExpression(MetaNewExpressionBuilder @this)
        {
            this.MetaExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaNewPropertyInitializer()
        /// </summary>
        public virtual void MetaNewPropertyInitializer(MetaNewPropertyInitializerBuilder @this)
        {
    		@this.PropertyLazy = () => (global::MetaDslx.Core.Immutable.MetaPropertyBuilder)(this.bind(this.resolve_name(@this.Parent.Type, @this.PropertyName)));
    		@this.ValueLazyChild.ExpectedType = () => this.get_type(@this.Property);
        }
    
        /// <summary>
    	/// Implements the constructor: MetaNewCollectionExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaExpression
    	/// All superclasses: global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaNewCollectionExpression(MetaNewCollectionExpressionBuilder @this)
        {
            this.MetaExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaOperatorExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBoundExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        /// Initializes the following readonly properties:
    	/// <ul>
        ///     <li>Name</li>
    	/// </ul>
        public virtual void MetaOperatorExpression(MetaOperatorExpressionBuilder @this)
        {
            this.MetaBoundExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaUnaryExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaOperatorExpression
    	/// All superclasses: global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaUnaryExpression(MetaUnaryExpressionBuilder @this)
        {
            this.MetaOperatorExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaUnaryPlusExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaUnaryExpression
    	/// All superclasses: global::MetaDslx.Core.MetaUnaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaUnaryPlusExpression(MetaUnaryPlusExpressionBuilder @this)
        {
            this.MetaUnaryExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaNegateExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaUnaryExpression
    	/// All superclasses: global::MetaDslx.Core.MetaUnaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaNegateExpression(MetaNegateExpressionBuilder @this)
        {
            this.MetaUnaryExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaOnesComplementExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaUnaryExpression
    	/// All superclasses: global::MetaDslx.Core.MetaUnaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaOnesComplementExpression(MetaOnesComplementExpressionBuilder @this)
        {
            this.MetaUnaryExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaNotExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaUnaryExpression
    	/// All superclasses: global::MetaDslx.Core.MetaUnaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaNotExpression(MetaNotExpressionBuilder @this)
        {
            this.MetaUnaryExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaUnaryAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaUnaryExpression
    	/// All superclasses: global::MetaDslx.Core.MetaUnaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaUnaryAssignExpression(MetaUnaryAssignExpressionBuilder @this)
        {
            this.MetaUnaryExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaPostIncrementAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaUnaryAssignExpression
    	/// All superclasses: global::MetaDslx.Core.MetaUnaryAssignExpression, global::MetaDslx.Core.MetaUnaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaPostIncrementAssignExpression(MetaPostIncrementAssignExpressionBuilder @this)
        {
            this.MetaUnaryAssignExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaPostDecrementAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaUnaryAssignExpression
    	/// All superclasses: global::MetaDslx.Core.MetaUnaryAssignExpression, global::MetaDslx.Core.MetaUnaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaPostDecrementAssignExpression(MetaPostDecrementAssignExpressionBuilder @this)
        {
            this.MetaUnaryAssignExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaPreIncrementAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaUnaryAssignExpression
    	/// All superclasses: global::MetaDslx.Core.MetaUnaryAssignExpression, global::MetaDslx.Core.MetaUnaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaPreIncrementAssignExpression(MetaPreIncrementAssignExpressionBuilder @this)
        {
            this.MetaUnaryAssignExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaPreDecrementAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaUnaryAssignExpression
    	/// All superclasses: global::MetaDslx.Core.MetaUnaryAssignExpression, global::MetaDslx.Core.MetaUnaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaPreDecrementAssignExpression(MetaPreDecrementAssignExpressionBuilder @this)
        {
            this.MetaUnaryAssignExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaBinaryExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaOperatorExpression
    	/// All superclasses: global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaBinaryExpression(MetaBinaryExpressionBuilder @this)
        {
            this.MetaOperatorExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaBinaryArithmeticExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaBinaryArithmeticExpression(MetaBinaryArithmeticExpressionBuilder @this)
        {
            this.MetaBinaryExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaMultiplyExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaMultiplyExpression(MetaMultiplyExpressionBuilder @this)
        {
            this.MetaBinaryArithmeticExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaDivideExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaDivideExpression(MetaDivideExpressionBuilder @this)
        {
            this.MetaBinaryArithmeticExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaModuloExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaModuloExpression(MetaModuloExpressionBuilder @this)
        {
            this.MetaBinaryArithmeticExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaAddExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaAddExpression(MetaAddExpressionBuilder @this)
        {
            this.MetaBinaryArithmeticExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaSubtractExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaSubtractExpression(MetaSubtractExpressionBuilder @this)
        {
            this.MetaBinaryArithmeticExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaLeftShiftExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaLeftShiftExpression(MetaLeftShiftExpressionBuilder @this)
        {
            this.MetaBinaryArithmeticExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaRightShiftExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryArithmeticExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaRightShiftExpression(MetaRightShiftExpressionBuilder @this)
        {
            this.MetaBinaryArithmeticExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaBinaryComparisonExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaBinaryComparisonExpression(MetaBinaryComparisonExpressionBuilder @this)
        {
            this.MetaBinaryExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaLessThanExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaLessThanExpression(MetaLessThanExpressionBuilder @this)
        {
            this.MetaBinaryComparisonExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaLessThanOrEqualExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaLessThanOrEqualExpression(MetaLessThanOrEqualExpressionBuilder @this)
        {
            this.MetaBinaryComparisonExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaGreaterThanExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaGreaterThanExpression(MetaGreaterThanExpressionBuilder @this)
        {
            this.MetaBinaryComparisonExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaGreaterThanOrEqualExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaGreaterThanOrEqualExpression(MetaGreaterThanOrEqualExpressionBuilder @this)
        {
            this.MetaBinaryComparisonExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaEqualExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaEqualExpression(MetaEqualExpressionBuilder @this)
        {
            this.MetaBinaryComparisonExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaNotEqualExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryComparisonExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaNotEqualExpression(MetaNotEqualExpressionBuilder @this)
        {
            this.MetaBinaryComparisonExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaBinaryLogicalExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaBinaryLogicalExpression(MetaBinaryLogicalExpressionBuilder @this)
        {
            this.MetaBinaryExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaAndExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryLogicalExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryLogicalExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaAndExpression(MetaAndExpressionBuilder @this)
        {
            this.MetaBinaryLogicalExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaOrExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryLogicalExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryLogicalExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaOrExpression(MetaOrExpressionBuilder @this)
        {
            this.MetaBinaryLogicalExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaExclusiveOrExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryLogicalExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryLogicalExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaExclusiveOrExpression(MetaExclusiveOrExpressionBuilder @this)
        {
            this.MetaBinaryLogicalExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaAndAlsoExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryLogicalExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryLogicalExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaAndAlsoExpression(MetaAndAlsoExpressionBuilder @this)
        {
            this.MetaBinaryLogicalExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaOrElseExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryLogicalExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryLogicalExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaOrElseExpression(MetaOrElseExpressionBuilder @this)
        {
            this.MetaBinaryLogicalExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaNullCoalescingExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaNullCoalescingExpression(MetaNullCoalescingExpressionBuilder @this)
        {
            this.MetaBinaryExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaAssignmentExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaBinaryExpression
    	/// All superclasses: global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaAssignmentExpression(MetaAssignmentExpressionBuilder @this)
        {
            this.MetaBinaryExpression(@this);
    		@this.LeftLazyChild.ExpectedType = () => @this.ExpectedType;
    		@this.RightLazyChild.ExpectedType = () => @this.Type;
        }
    
        /// <summary>
    	/// Implements the constructor: MetaAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaAssignExpression(MetaAssignExpressionBuilder @this)
        {
            this.MetaAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaArithmeticAssignmentExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaArithmeticAssignmentExpression(MetaArithmeticAssignmentExpressionBuilder @this)
        {
            this.MetaAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaMultiplyAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression, global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaMultiplyAssignExpression(MetaMultiplyAssignExpressionBuilder @this)
        {
            this.MetaArithmeticAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaDivideAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression, global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaDivideAssignExpression(MetaDivideAssignExpressionBuilder @this)
        {
            this.MetaArithmeticAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaModuloAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression, global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaModuloAssignExpression(MetaModuloAssignExpressionBuilder @this)
        {
            this.MetaArithmeticAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaAddAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression, global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaAddAssignExpression(MetaAddAssignExpressionBuilder @this)
        {
            this.MetaArithmeticAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaSubtractAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression, global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaSubtractAssignExpression(MetaSubtractAssignExpressionBuilder @this)
        {
            this.MetaArithmeticAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaLeftShiftAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression, global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaLeftShiftAssignExpression(MetaLeftShiftAssignExpressionBuilder @this)
        {
            this.MetaArithmeticAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaRightShiftAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaArithmeticAssignmentExpression, global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaRightShiftAssignExpression(MetaRightShiftAssignExpressionBuilder @this)
        {
            this.MetaArithmeticAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaLogicalAssignmentExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaLogicalAssignmentExpression(MetaLogicalAssignmentExpressionBuilder @this)
        {
            this.MetaAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaAndAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaLogicalAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaLogicalAssignmentExpression, global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaAndAssignExpression(MetaAndAssignExpressionBuilder @this)
        {
            this.MetaLogicalAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaExclusiveOrAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaLogicalAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaLogicalAssignmentExpression, global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaExclusiveOrAssignExpression(MetaExclusiveOrAssignExpressionBuilder @this)
        {
            this.MetaLogicalAssignmentExpression(@this);
    		
        }
    
        /// <summary>
    	/// Implements the constructor: MetaOrAssignExpression()
        /// </summary>
    	/// Direct superclasses: global::MetaDslx.Core.MetaLogicalAssignmentExpression
    	/// All superclasses: global::MetaDslx.Core.MetaLogicalAssignmentExpression, global::MetaDslx.Core.MetaAssignmentExpression, global::MetaDslx.Core.MetaBinaryExpression, global::MetaDslx.Core.MetaOperatorExpression, global::MetaDslx.Core.MetaBoundExpression, global::MetaDslx.Core.MetaExpression, global::MetaDslx.Core.MetaTypedElement
        public virtual void MetaOrAssignExpression(MetaOrAssignExpressionBuilder @this)
        {
            this.MetaLogicalAssignmentExpression(@this);
    		
        }
    
    
    
    
    	//public abstract global::MetaDslx.Core.Immutable.MetaTypeBuilder typeof(object type);
    	public abstract global::MetaDslx.Core.Immutable.MetaTypeBuilder get_type(object value);
    	public abstract global::MetaDslx.Core.Immutable.MetaTypeBuilder get_return_type(object value);
    	public abstract global::MetaDslx.Core.Immutable.MetaTypeBuilder current_type(global::MetaDslx.Core.Immutable.ISymbol symbol);
    	public abstract bool type_check(global::MetaDslx.Core.Immutable.ISymbol symbol);
    	public abstract global::MetaDslx.Core.Immutable.MetaTypeBuilder balance(global::MetaDslx.Core.Immutable.MetaTypeBuilder left, global::MetaDslx.Core.Immutable.MetaTypeBuilder right);
    	public abstract global::MetaDslx.Core.BindingInfo resolve(string name);
    	public abstract global::MetaDslx.Core.BindingInfo resolve(global::MetaDslx.Core.Immutable.ISymbol context, string name);
    	public abstract global::MetaDslx.Core.BindingInfo resolve_type(string name);
    	public abstract global::MetaDslx.Core.BindingInfo resolve_type(global::MetaDslx.Core.Immutable.ISymbol context, string name);
    	public abstract global::MetaDslx.Core.BindingInfo resolve_name(string name);
    	public abstract global::MetaDslx.Core.BindingInfo resolve_name(global::MetaDslx.Core.Immutable.ISymbol context, string name);
    	public abstract global::MetaDslx.Core.BindingInfo definition_list(global::MetaDslx.Core.Immutable.ISymbol definition);
    	public abstract global::MetaDslx.Core.Immutable.ISymbol bind(global::MetaDslx.Core.BindingInfo definitions);
    	public abstract global::MetaDslx.Core.Immutable.ISymbol bind(global::MetaDslx.Core.Immutable.ISymbol context, global::MetaDslx.Core.BindingInfo definitions);
    }
    
}

