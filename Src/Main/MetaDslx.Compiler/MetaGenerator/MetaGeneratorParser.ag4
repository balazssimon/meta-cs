parser grammar MetaGeneratorParser;

options 
{ 
    tokenVocab = MetaGeneratorLexer;
	generateCompiler = false;
}

main : namespaceDeclaration generatorDeclaration usingDeclaration* configDeclaration? methodDeclaration*;

namespaceDeclaration : KNamespace qualifiedName TSemicolon;

generatorDeclaration : KGenerator identifier (KFor typeReference) TSemicolon;

usingDeclaration
    : KUsing qualifiedName TSemicolon								#usingNamespaceDeclaration
    | KUsing KGenerator qualifiedName identifier? TSemicolon		#usingGeneratorDeclaration
	;

configDeclaration : KProperties identifier? configProperty* KEnd KProperties;
configProperty
    : typeReference identifier (TAssign expression)? TSemicolon #configPropertyDeclaration
    | KProperties identifier configProperty* KEnd KProperties  #configPropertyGroupDeclaration;

methodDeclaration : functionDeclaration | templateDeclaration;

functionDeclaration : functionSignature body KEnd KFunction;
functionSignature : KFunction returnType identifier TOpenParenthesis paramList? TCloseParenthesis;
paramList : parameter (TComma parameter)*;
parameter : typeReference identifier (TAssign expression)?;

body : statement*;
statement 
    : variableDeclarationStatement TSemicolon
    | returnStatement TSemicolon
    | expressionStatement TSemicolon
    | ifStatement
    | loopStatement
	| switchStatement;

variableDeclarationStatement : typeReference identifier (TAssign expression)?;
returnStatement : KReturn expression;
expressionStatement : expression;
ifStatement : ifStatementBegin body (elseIfStatement body)* (ifStatementElse body)? ifStatementEnd;
ifStatementBegin : KIf TOpenParenthesis expression TCloseParenthesis;
elseIfStatement : KElse KIf TOpenParenthesis expression TCloseParenthesis;
ifStatementElse : KElse;
ifStatementEnd : KEnd KIf;
loopStatement : loopStatementBegin body loopStatementEnd;
loopStatementBegin : KLoop TOpenParenthesis loopChain loopWhereExpression? /*loopOrderByExpression?*/ loopRunExpression? TCloseParenthesis;
loopStatementEnd : KEnd KLoop;
loopChain : loopChainItem (TSingleArrow loopChainItem)*;
loopChainItem : (typeReference? identifier TColon)? loopChainExpression;
loopChainExpression 
    : KTypeof TOpenParenthesis typeReference TCloseParenthesis	#loopChainTypeofExpression
    | identifier typeArgumentList?								#loopChainIdentifierExpression
    | loopChainExpression TDot identifier typeArgumentList?		#loopChainMemberAccessExpression
    | loopChainExpression TOpenParenthesis expressionList? TCloseParenthesis #loopChainMethodCallExpression;
loopWhereExpression : KWhere expression;
//loopOrderByExpression : KOrderBy expression KDescending?;
loopRunExpression : (TSemicolon loopRunList)+;
loopRunList : loopRun (TComma loopRun)*;
loopRun : variableDeclarationStatement | expressionStatement;
switchStatement : switchStatementBegin switchBranchStatement* switchDefaultStatement? switchStatementEnd;
switchStatementBegin : KSwitch TOpenParenthesis expression TCloseParenthesis;
switchStatementEnd : KEnd KSwitch;
switchBranchStatement : switchBranchHeadStatement body;
switchBranchHeadStatement : switchCaseOrTypeIsHeadStatement+ | switchTypeAsHeadStatement;
switchCaseOrTypeIsHeadStatement : switchCaseHeadStatement | switchTypeIsHeadStatement;
switchCaseHeadStatement : KCase expressionList TColon;
switchTypeIsHeadStatement : KType KIs typeReferenceList TColon;
switchTypeAsHeadStatement : KType KAs typeReference TColon;
switchDefaultStatement : switchDefaultHeadStatement body;
switchDefaultHeadStatement : KDefault TColon;

templateDeclaration : templateSignature templateBody KEndTemplate;
templateSignature : KTemplate identifier TOpenParenthesis paramList? TCloseParenthesis;
templateBody : templateContentLine*;
templateContentLine : (templateOutput | templateStatementStartEnd)* templateLineEnd;
templateOutput : TemplateOutput;
templateLineEnd : TemplateCrLf | TemplateLineBreak | TemplateLineControl;
templateStatementStartEnd : TemplateStatementStart templateStatement? TemplateStatementEnd;

templateStatement 
    : variableDeclarationStatement
    | expressionStatement
    | ifStatementBegin
    | elseIfStatement
    | ifStatementElse
    | ifStatementEnd
    | loopStatementBegin
    | loopStatementEnd
	| switchStatementBegin
	| switchStatementEnd
	| switchBranchHeadStatement
	| switchDefaultHeadStatement;

//*** Expressions

typeArgumentList : TLessThan typeReferenceList TGreaterThan;

predefinedType 
    : KBool | KByte | KChar | KDecimal | KDouble | KFloat | KInt | KLong 
    | KObject | KSByte | KShort | KString | KUInt | KULong | KUShort;

typeReferenceList : typeReference (TComma typeReference)*;
typeReference : arrayType | nullableType | genericType | simpleType;
arrayType : (nullableType | genericType | simpleType) rankSpecifiers;
nullableType : (genericType | simpleType) TQuestion;
genericType : qualifiedName typeArgumentList;
simpleType : qualifiedName | predefinedType;
voidType : KVoid;
returnType : typeReference | voidType;

expressionList : expression (TComma expression)*;

variableReference : expression;
rankSpecifiers : rankSpecifier+;
rankSpecifier : TOpenBracket TComma* TCloseBracket;
/*
arrayInitializer 
    : TOpenBrace variableInitializerList? TCloseBrace
    | TOpenBrace variableInitializerList TComma TCloseBrace;
variableInitializerList 
    : variableInitializer (TComma variableInitializer)*;
variableInitializer 
    : expression
    | arrayInitializer;*/

/*
objectOrCollectionInitializer
    : objectInitializer
    | collectionInitializer;
objectInitializer
    : TOpenBrace memberInitializerList? TCloseBrace
    | TOpenBrace memberInitializerList TComma TCloseBrace;
memberInitializerList : memberInitializer (TComma memberInitializer)*;
memberInitializer : identifier TAssign initializerValue;
initializerValue : expression | objectOrCollectionInitializer;
collectionInitializer 
    : TOpenBrace elementInitializerList? TCloseBrace
    | TOpenBrace elementInitializerList TComma TCloseBrace;
elementInitializerList : elementInitializer (TComma elementInitializer)*;
elementInitializer 
    : expression 
    | TOpenBrace expressionList TCloseBrace;
arrayCreationExpression
    : KNew typeReference TOpenBracket expressionList TCloseBracket rankSpecifiers? arrayInitializer?
    | KNew typeReference arrayInitializer;
*/
unboundTypeName : identifier genericDimensionSpecifier? (TDot identifier genericDimensionSpecifier?)*;
genericDimensionSpecifier : TLessThan TComma* TGreaterThan;

anonymousFunctionSignature
    : TOpenParenthesis (explicitParameter (TComma explicitParameter)*)? TCloseParenthesis #explicitAnonymousFunctionSignature
    | TOpenParenthesis (implicitParameter (TComma implicitParameter)*)? TCloseParenthesis #implicitAnonymousFunctionSignature
    | implicitParameter #singleParamAnonymousFunctionSignature;
explicitParameter : typeReference identifier;
implicitParameter : identifier;

expression
    : KThis #thisExpression
    | literal #literalExpression
    | KTypeof TOpenParenthesis KVoid TCloseParenthesis #typeofVoidExpression
    | KTypeof TOpenParenthesis unboundTypeName TCloseParenthesis #typeofUnboundTypeExpression
    | KTypeof TOpenParenthesis typeReference TCloseParenthesis #typeofTypeExpression
    | KDefault TOpenParenthesis typeReference TCloseParenthesis #defaultValueExpression
    //| KNew typeReference objectOrCollectionInitializer? #newObjectOrCollectionExpression
    | KNew typeReference TOpenParenthesis expressionList? TCloseParenthesis /*objectOrCollectionInitializer?*/ #newObjectOrCollectionWithConstructorExpression
    | identifier typeArgumentList? #identifierExpression
    | KHasLoop TOpenParenthesis loopChain loopWhereExpression? TCloseParenthesis #hasLoopExpression
    | TOpenParenthesis expression TCloseParenthesis #parenthesizedExpression
    | expression TOpenBracket expressionList TCloseBracket #elementAccessExpression
    | expression TOpenParenthesis expressionList? TCloseParenthesis #functionCallExpression
    | predefinedType TDot identifier typeArgumentList? #predefinedTypeMemberAccessExpression
    | expression TDot identifier typeArgumentList? #memberAccessExpression
    | TOpenParenthesis typeReference TCloseParenthesis expression #typecastExpression
    | (TPlus | TMinus | TExclamation | TTilde | TPlusPlus | TMinusMinus) expression #unaryExpression
    | expression (TPlusPlus | TMinusMinus) #postExpression
    | expression (TAsterisk | TSlash | TPercent) expression #multiplicationExpression
    | expression (TPlus | TMinus) expression #additionExpression
    | expression (TLessThan | TGreaterThan | TLessThanOrEquals | TGreaterThanOrEquals) expression #relationalExpression
    | expression (KIs | KAs) typeReference #typecheckExpression
    | expression (TEquals | TNotEquals) expression #equalityExpression
    | expression TAmp expression #bitwiseAndExpression
    | expression THat expression #bitwiseXorExpression
    | expression TPipe expression #bitwiseOrExpression
    | expression TAnd expression #logicalAndExpression
    | expression TXor expression #logicalXorExpression
    | expression TOr expression #logicalOrExpression
    | expression TQuestion expression TColon expression #conditionalExpression
    | expression (TAssign | TAssignPlus | TAssignMinus | TAssignAsterisk | 
                  TAssignSlash | TAssignPercent | TAssignAmp | TAssignPipe |
                  TAssignHat | TAssignLeftShift | TAssignRightShift) expression #assignmentExpression
    | anonymousFunctionSignature TArrow expression #lambdaExpression;

//*** Common rules:

qualifiedName : identifier (TDot identifier)*;
identifierList : identifier (TComma identifier)*;

//*** Additional rules for lexer:

// Identifiers
identifier : IdentifierNormal;
//identifier : IdentifierNormal | IdentifierGeneral | IdentifierVerbatim;

// Literals
literal 
    : nullLiteral | booleanLiteral | numberLiteral | dateOrTimeLiteral  
    | charLiteral | stringLiteral | guidLiteral;

// Null literal
nullLiteral : KNull;

// Boolean literals
booleanLiteral : KTrue | KFalse;

// Number literals
numberLiteral : integerLiteral | decimalLiteral | scientificLiteral;
integerLiteral : IntegerLiteral;
decimalLiteral : DecimalLiteral;
scientificLiteral : ScientificLiteral;

// Date and time literals  
dateOrTimeLiteral 
    : dateTimeLiteral | dateTimeOffsetLiteral | dateLiteral | timeLiteral;
dateTimeOffsetLiteral : DateTimeOffsetLiteral;
dateTimeLiteral : DateTimeLiteral;
dateLiteral : DateLiteral;
timeLiteral : TimeLiteral;

// Char literals
charLiteral : CharLiteral;

// String literals
stringLiteral : RegularStringLiteral | DoubleQuoteVerbatimStringLiteral;

// Guid literal
guidLiteral : GuidLiteral;


