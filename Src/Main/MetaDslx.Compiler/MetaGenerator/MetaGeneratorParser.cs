//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\vyevl5oe.tbp\MetaGeneratorParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Compiler {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class MetaGeneratorParser : Parser {
	public const int
		KNamespace=1, KGenerator=2, KUsing=3, KConfiguration=4, KProperties=5, 
		KTemplate=6, KFunction=7, KReturn=8, KSwitch=9, KCase=10, KType=11, KVoid=12, 
		KEnd=13, KFor=14, KForEach=15, KIn=16, KIf=17, KElse=18, KLoop=19, KHasLoop=20, 
		KWhere=21, KOrderBy=22, KDescending=23, KSeparator=24, KNull=25, KTrue=26, 
		KFalse=27, KBool=28, KByte=29, KChar=30, KDecimal=31, KDouble=32, KFloat=33, 
		KInt=34, KLong=35, KObject=36, KSByte=37, KShort=38, KString=39, KUInt=40, 
		KULong=41, KUShort=42, KThis=43, KNew=44, KIs=45, KAs=46, KTypeof=47, 
		KDefault=48, TSemicolon=49, TColon=50, TDot=51, TComma=52, TAssign=53, 
		TAssignPlus=54, TAssignMinus=55, TAssignAsterisk=56, TAssignSlash=57, 
		TAssignPercent=58, TAssignAmp=59, TAssignPipe=60, TAssignHat=61, TAssignLeftShift=62, 
		TAssignRightShift=63, TOpenParenthesis=64, TCloseParenthesis=65, TOpenBracket=66, 
		TCloseBracket=67, TOpenBrace=68, TCloseBrace=69, TEquals=70, TNotEquals=71, 
		TArrow=72, TSingleArrow=73, TLessThan=74, TGreaterThan=75, TLessThanOrEquals=76, 
		TGreaterThanOrEquals=77, TQuestion=78, TPlus=79, TMinus=80, TExclamation=81, 
		TTilde=82, TAsterisk=83, TSlash=84, TPercent=85, TPlusPlus=86, TMinusMinus=87, 
		TColonColon=88, TAmp=89, THat=90, TPipe=91, TAnd=92, TXor=93, TOr=94, 
		TQuestionQuestion=95, IdentifierNormal=96, IntegerLiteral=97, DecimalLiteral=98, 
		ScientificLiteral=99, DateTimeOffsetLiteral=100, DateTimeLiteral=101, 
		DateLiteral=102, TimeLiteral=103, CharLiteral=104, RegularStringLiteral=105, 
		GuidLiteral=106, UTF8BOM=107, WHITESPACE=108, CRLF=109, LINEBREAK=110, 
		LINE_COMMENT=111, COMMENT=112, DoubleQuoteVerbatimStringLiteral=113, TH_CRLF=114, 
		TH_LINEBREAK=115, TH_TOpenParenthesis=116, TH_TCloseParenthesis=117, KEndTemplate=118, 
		TemplateLineControl=119, TemplateOutput=120, TemplateCrLf=121, TemplateLineBreak=122, 
		TemplateStatementStart=123, TemplateStatementEnd=124, TS_TOpenBracket=125, 
		TS_TCloseBracket=126, DoubleQuoteVerbatimStringLiteralStart=127;
	public const int
		RULE_main = 0, RULE_namespaceDeclaration = 1, RULE_generatorDeclaration = 2, 
		RULE_usingDeclaration = 3, RULE_configDeclaration = 4, RULE_configProperty = 5, 
		RULE_methodDeclaration = 6, RULE_functionDeclaration = 7, RULE_functionSignature = 8, 
		RULE_paramList = 9, RULE_parameter = 10, RULE_body = 11, RULE_statement = 12, 
		RULE_variableDeclarationStatement = 13, RULE_returnStatement = 14, RULE_expressionStatement = 15, 
		RULE_ifStatement = 16, RULE_ifStatementBegin = 17, RULE_elseIfStatement = 18, 
		RULE_ifStatementElse = 19, RULE_ifStatementEnd = 20, RULE_loopStatement = 21, 
		RULE_loopStatementBegin = 22, RULE_loopStatementEnd = 23, RULE_loopChain = 24, 
		RULE_loopChainItem = 25, RULE_loopChainExpression = 26, RULE_loopWhereExpression = 27, 
		RULE_loopRunExpression = 28, RULE_separatorStatement = 29, RULE_switchStatement = 30, 
		RULE_switchStatementBegin = 31, RULE_switchStatementEnd = 32, RULE_switchBranchStatement = 33, 
		RULE_switchBranchHeadStatement = 34, RULE_switchCaseOrTypeIsHeadStatement = 35, 
		RULE_switchCaseHeadStatement = 36, RULE_switchTypeIsHeadStatement = 37, 
		RULE_switchTypeAsHeadStatement = 38, RULE_switchDefaultStatement = 39, 
		RULE_switchDefaultHeadStatement = 40, RULE_templateDeclaration = 41, RULE_templateSignature = 42, 
		RULE_templateBody = 43, RULE_templateContentLine = 44, RULE_templateOutput = 45, 
		RULE_templateLineEnd = 46, RULE_templateStatementStartEnd = 47, RULE_templateStatement = 48, 
		RULE_typeArgumentList = 49, RULE_predefinedType = 50, RULE_typeReferenceList = 51, 
		RULE_typeReference = 52, RULE_arrayType = 53, RULE_nullableType = 54, 
		RULE_genericType = 55, RULE_simpleType = 56, RULE_voidType = 57, RULE_returnType = 58, 
		RULE_expressionList = 59, RULE_variableReference = 60, RULE_rankSpecifiers = 61, 
		RULE_rankSpecifier = 62, RULE_unboundTypeName = 63, RULE_genericDimensionSpecifier = 64, 
		RULE_anonymousFunctionSignature = 65, RULE_explicitParameter = 66, RULE_implicitParameter = 67, 
		RULE_expression = 68, RULE_qualifiedName = 69, RULE_identifierList = 70, 
		RULE_identifier = 71, RULE_literal = 72, RULE_nullLiteral = 73, RULE_booleanLiteral = 74, 
		RULE_numberLiteral = 75, RULE_integerLiteral = 76, RULE_decimalLiteral = 77, 
		RULE_scientificLiteral = 78, RULE_dateOrTimeLiteral = 79, RULE_dateTimeOffsetLiteral = 80, 
		RULE_dateTimeLiteral = 81, RULE_dateLiteral = 82, RULE_timeLiteral = 83, 
		RULE_charLiteral = 84, RULE_stringLiteral = 85, RULE_guidLiteral = 86;
	public static readonly string[] ruleNames = {
		"main", "namespaceDeclaration", "generatorDeclaration", "usingDeclaration", 
		"configDeclaration", "configProperty", "methodDeclaration", "functionDeclaration", 
		"functionSignature", "paramList", "parameter", "body", "statement", "variableDeclarationStatement", 
		"returnStatement", "expressionStatement", "ifStatement", "ifStatementBegin", 
		"elseIfStatement", "ifStatementElse", "ifStatementEnd", "loopStatement", 
		"loopStatementBegin", "loopStatementEnd", "loopChain", "loopChainItem", 
		"loopChainExpression", "loopWhereExpression", "loopRunExpression", "separatorStatement", 
		"switchStatement", "switchStatementBegin", "switchStatementEnd", "switchBranchStatement", 
		"switchBranchHeadStatement", "switchCaseOrTypeIsHeadStatement", "switchCaseHeadStatement", 
		"switchTypeIsHeadStatement", "switchTypeAsHeadStatement", "switchDefaultStatement", 
		"switchDefaultHeadStatement", "templateDeclaration", "templateSignature", 
		"templateBody", "templateContentLine", "templateOutput", "templateLineEnd", 
		"templateStatementStartEnd", "templateStatement", "typeArgumentList", 
		"predefinedType", "typeReferenceList", "typeReference", "arrayType", "nullableType", 
		"genericType", "simpleType", "voidType", "returnType", "expressionList", 
		"variableReference", "rankSpecifiers", "rankSpecifier", "unboundTypeName", 
		"genericDimensionSpecifier", "anonymousFunctionSignature", "explicitParameter", 
		"implicitParameter", "expression", "qualifiedName", "identifierList", 
		"identifier", "literal", "nullLiteral", "booleanLiteral", "numberLiteral", 
		"integerLiteral", "decimalLiteral", "scientificLiteral", "dateOrTimeLiteral", 
		"dateTimeOffsetLiteral", "dateTimeLiteral", "dateLiteral", "timeLiteral", 
		"charLiteral", "stringLiteral", "guidLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'generator'", "'using'", "'configuration'", "'properties'", 
		"'template'", "'function'", "'return'", "'switch'", "'case'", "'type'", 
		"'void'", "'end'", "'for'", "'foreach'", "'in'", "'if'", "'else'", "'loop'", 
		"'hasloop'", "'where'", "'orderby'", "'descending'", "'separator'", "'null'", 
		"'true'", "'false'", null, "'byte'", "'char'", "'decimal'", "'double'", 
		"'float'", "'int'", "'long'", "'object'", "'sbyte'", "'short'", "'string'", 
		"'uint'", "'ulong'", "'ushort'", "'this'", "'new'", "'is'", "'as'", "'typeof'", 
		"'default'", "';'", "':'", "'.'", "','", "'='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'('", "')'", 
		null, "']'", "'{'", "'}'", "'=='", "'!='", "'=>'", "'->'", "'<'", "'>'", 
		"'<='", "'>='", "'?'", "'+'", "'-'", "'!'", "'~'", null, "'/'", "'%'", 
		"'++'", "'--'", "'::'", "'&'", "'^'", "'|'", "'&&'", "'^^'", "'||'", "'??'", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'\"'", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'@\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KGenerator", "KUsing", "KConfiguration", "KProperties", 
		"KTemplate", "KFunction", "KReturn", "KSwitch", "KCase", "KType", "KVoid", 
		"KEnd", "KFor", "KForEach", "KIn", "KIf", "KElse", "KLoop", "KHasLoop", 
		"KWhere", "KOrderBy", "KDescending", "KSeparator", "KNull", "KTrue", "KFalse", 
		"KBool", "KByte", "KChar", "KDecimal", "KDouble", "KFloat", "KInt", "KLong", 
		"KObject", "KSByte", "KShort", "KString", "KUInt", "KULong", "KUShort", 
		"KThis", "KNew", "KIs", "KAs", "KTypeof", "KDefault", "TSemicolon", "TColon", 
		"TDot", "TComma", "TAssign", "TAssignPlus", "TAssignMinus", "TAssignAsterisk", 
		"TAssignSlash", "TAssignPercent", "TAssignAmp", "TAssignPipe", "TAssignHat", 
		"TAssignLeftShift", "TAssignRightShift", "TOpenParenthesis", "TCloseParenthesis", 
		"TOpenBracket", "TCloseBracket", "TOpenBrace", "TCloseBrace", "TEquals", 
		"TNotEquals", "TArrow", "TSingleArrow", "TLessThan", "TGreaterThan", "TLessThanOrEquals", 
		"TGreaterThanOrEquals", "TQuestion", "TPlus", "TMinus", "TExclamation", 
		"TTilde", "TAsterisk", "TSlash", "TPercent", "TPlusPlus", "TMinusMinus", 
		"TColonColon", "TAmp", "THat", "TPipe", "TAnd", "TXor", "TOr", "TQuestionQuestion", 
		"IdentifierNormal", "IntegerLiteral", "DecimalLiteral", "ScientificLiteral", 
		"DateTimeOffsetLiteral", "DateTimeLiteral", "DateLiteral", "TimeLiteral", 
		"CharLiteral", "RegularStringLiteral", "GuidLiteral", "UTF8BOM", "WHITESPACE", 
		"CRLF", "LINEBREAK", "LINE_COMMENT", "COMMENT", "DoubleQuoteVerbatimStringLiteral", 
		"TH_CRLF", "TH_LINEBREAK", "TH_TOpenParenthesis", "TH_TCloseParenthesis", 
		"KEndTemplate", "TemplateLineControl", "TemplateOutput", "TemplateCrLf", 
		"TemplateLineBreak", "TemplateStatementStart", "TemplateStatementEnd", 
		"TS_TOpenBracket", "TS_TCloseBracket", "DoubleQuoteVerbatimStringLiteralStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaGeneratorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaGeneratorParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public GeneratorDeclarationContext generatorDeclaration() {
			return GetRuleContext<GeneratorDeclarationContext>(0);
		}
		public UsingDeclarationContext[] usingDeclaration() {
			return GetRuleContexts<UsingDeclarationContext>();
		}
		public UsingDeclarationContext usingDeclaration(int i) {
			return GetRuleContext<UsingDeclarationContext>(i);
		}
		public ConfigDeclarationContext configDeclaration() {
			return GetRuleContext<ConfigDeclarationContext>(0);
		}
		public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; namespaceDeclaration();
			State = 175; generatorDeclaration();
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KUsing) {
				{
				{
				State = 176; usingDeclaration();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 183;
			_la = TokenStream.La(1);
			if (_la==KProperties) {
				{
				State = 182; configDeclaration();
				}
			}

			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KTemplate || _la==KFunction) {
				{
				{
				State = 185; methodDeclaration();
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaGeneratorParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(KNamespace);
			State = 192; qualifiedName();
			State = 193; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorDeclarationContext : ParserRuleContext {
		public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode KFor() { return GetToken(MetaGeneratorParser.KFor, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public GeneratorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGeneratorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGeneratorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorDeclarationContext generatorDeclaration() {
		GeneratorDeclarationContext _localctx = new GeneratorDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_generatorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(KGenerator);
			State = 196; identifier();
			{
			State = 197; Match(KFor);
			State = 198; typeReference();
			}
			State = 200; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
	 
		public UsingDeclarationContext() { }
		public virtual void CopyFrom(UsingDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingNamespaceDeclarationContext : UsingDeclarationContext {
		public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public UsingNamespaceDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUsingNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUsingNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingGeneratorDeclarationContext : UsingDeclarationContext {
		public ITerminalNode KUsing() { return GetToken(MetaGeneratorParser.KUsing, 0); }
		public ITerminalNode KGenerator() { return GetToken(MetaGeneratorParser.KGenerator, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UsingGeneratorDeclarationContext(UsingDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUsingGeneratorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUsingGeneratorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingGeneratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_usingDeclaration);
		int _la;
		try {
			State = 214;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new UsingNamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 202; Match(KUsing);
				State = 203; qualifiedName();
				State = 204; Match(TSemicolon);
				}
				break;
			case 2:
				_localctx = new UsingGeneratorDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; Match(KUsing);
				State = 207; Match(KGenerator);
				State = 208; qualifiedName();
				State = 210;
				_la = TokenStream.La(1);
				if (_la==IdentifierNormal) {
					{
					State = 209; identifier();
					}
				}

				State = 212; Match(TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigDeclarationContext : ParserRuleContext {
		public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigDeclarationContext configDeclaration() {
		ConfigDeclarationContext _localctx = new ConfigDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_configDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(KProperties);
			State = 218;
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 217; identifier();
				}
				break;
			}
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				{
				State = 220; configProperty();
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 226; Match(KEnd);
			State = 227; Match(KProperties);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigPropertyContext : ParserRuleContext {
		public ConfigPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configProperty; } }
	 
		public ConfigPropertyContext() { }
		public virtual void CopyFrom(ConfigPropertyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConfigPropertyGroupDeclarationContext : ConfigPropertyContext {
		public ITerminalNode[] KProperties() { return GetTokens(MetaGeneratorParser.KProperties); }
		public ITerminalNode KProperties(int i) {
			return GetToken(MetaGeneratorParser.KProperties, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ConfigPropertyContext[] configProperty() {
			return GetRuleContexts<ConfigPropertyContext>();
		}
		public ConfigPropertyContext configProperty(int i) {
			return GetRuleContext<ConfigPropertyContext>(i);
		}
		public ConfigPropertyGroupDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigPropertyGroupDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigPropertyGroupDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyGroupDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConfigPropertyDeclarationContext : ConfigPropertyContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConfigPropertyDeclarationContext(ConfigPropertyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConfigPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConfigPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigPropertyContext configProperty() {
		ConfigPropertyContext _localctx = new ConfigPropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_configProperty);
		int _la;
		try {
			State = 248;
			switch (TokenStream.La(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				_localctx = new ConfigPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; typeReference();
				State = 230; identifier();
				State = 233;
				_la = TokenStream.La(1);
				if (_la==TAssign) {
					{
					State = 231; Match(TAssign);
					State = 232; expression(0);
					}
				}

				State = 235; Match(TSemicolon);
				}
				break;
			case KProperties:
				_localctx = new ConfigPropertyGroupDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 237; Match(KProperties);
				State = 238; identifier();
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KProperties) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					{
					State = 239; configProperty();
					}
					}
					State = 244;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 245; Match(KEnd);
				State = 246; Match(KProperties);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_methodDeclaration);
		try {
			State = 252;
			switch (TokenStream.La(1)) {
			case KFunction:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; functionDeclaration();
				}
				break;
			case KTemplate:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251; templateDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; functionSignature();
			State = 255; body();
			State = 256; Match(KEnd);
			State = 257; Match(KFunction);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public ITerminalNode KFunction() { return GetToken(MetaGeneratorParser.KFunction, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(KFunction);
			State = 260; returnType();
			State = 261; identifier();
			State = 262; Match(TOpenParenthesis);
			State = 264;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 263; paramList();
				}
			}

			State = 266; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 18, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; parameter();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 269; Match(TComma);
				State = 270; parameter();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 20, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; typeReference();
			State = 277; identifier();
			State = 280;
			_la = TokenStream.La(1);
			if (_la==TAssign) {
				{
				State = 278; Match(TAssign);
				State = 279; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_body);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 282; statement();
					}
					} 
				}
				State = 287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		try {
			State = 300;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; variableDeclarationStatement();
				State = 289; Match(TSemicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291; returnStatement();
				State = 292; Match(TSemicolon);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 294; expressionStatement();
				State = 295; Match(TSemicolon);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 297; ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 298; loopStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 299; switchStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; typeReference();
			State = 303; identifier();
			State = 306;
			_la = TokenStream.La(1);
			if (_la==TAssign) {
				{
				State = 304; Match(TAssign);
				State = 305; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode KReturn() { return GetToken(MetaGeneratorParser.KReturn, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(KReturn);
			State = 309; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		public BodyContext[] body() {
			return GetRuleContexts<BodyContext>();
		}
		public BodyContext body(int i) {
			return GetRuleContext<BodyContext>(i);
		}
		public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; ifStatementBegin();
			State = 314; body();
			State = 320;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 315; elseIfStatement();
					State = 316; body();
					}
					} 
				}
				State = 322;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 326;
			_la = TokenStream.La(1);
			if (_la==KElse) {
				{
				State = 323; ifStatementElse();
				State = 324; body();
				}
			}

			State = 328; ifStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementBeginContext : ParserRuleContext {
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public IfStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementBeginContext ifStatementBegin() {
		IfStatementBeginContext _localctx = new IfStatementBeginContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(KIf);
			State = 331; Match(TOpenParenthesis);
			State = 332; expression(0);
			State = 333; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(KElse);
			State = 336; Match(KIf);
			State = 337; Match(TOpenParenthesis);
			State = 338; expression(0);
			State = 339; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementElseContext : ParserRuleContext {
		public ITerminalNode KElse() { return GetToken(MetaGeneratorParser.KElse, 0); }
		public IfStatementElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementElseContext ifStatementElse() {
		IfStatementElseContext _localctx = new IfStatementElseContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifStatementElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(KElse);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KIf() { return GetToken(MetaGeneratorParser.KIf, 0); }
		public IfStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIfStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIfStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementEndContext ifStatementEnd() {
		IfStatementEndContext _localctx = new IfStatementEndContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(KEnd);
			State = 344; Match(KIf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; loopStatementBegin();
			State = 347; body();
			State = 348; loopStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementBeginContext : ParserRuleContext {
		public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		public LoopRunExpressionContext loopRunExpression() {
			return GetRuleContext<LoopRunExpressionContext>(0);
		}
		public LoopStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementBeginContext loopStatementBegin() {
		LoopStatementBeginContext _localctx = new LoopStatementBeginContext(Context, State);
		EnterRule(_localctx, 44, RULE_loopStatementBegin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(KLoop);
			State = 351; Match(TOpenParenthesis);
			State = 352; loopChain();
			State = 354;
			_la = TokenStream.La(1);
			if (_la==KWhere) {
				{
				State = 353; loopWhereExpression();
				}
			}

			State = 357;
			_la = TokenStream.La(1);
			if (_la==TSemicolon) {
				{
				State = 356; loopRunExpression();
				}
			}

			State = 359; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KLoop() { return GetToken(MetaGeneratorParser.KLoop, 0); }
		public LoopStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementEndContext loopStatementEnd() {
		LoopStatementEndContext _localctx = new LoopStatementEndContext(Context, State);
		EnterRule(_localctx, 46, RULE_loopStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(KEnd);
			State = 362; Match(KLoop);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainContext : ParserRuleContext {
		public LoopChainItemContext[] loopChainItem() {
			return GetRuleContexts<LoopChainItemContext>();
		}
		public LoopChainItemContext loopChainItem(int i) {
			return GetRuleContext<LoopChainItemContext>(i);
		}
		public ITerminalNode[] TSingleArrow() { return GetTokens(MetaGeneratorParser.TSingleArrow); }
		public ITerminalNode TSingleArrow(int i) {
			return GetToken(MetaGeneratorParser.TSingleArrow, i);
		}
		public LoopChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainContext loopChain() {
		LoopChainContext _localctx = new LoopChainContext(Context, State);
		EnterRule(_localctx, 48, RULE_loopChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; loopChainItem();
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TSingleArrow) {
				{
				{
				State = 365; Match(TSingleArrow);
				State = 366; loopChainItem();
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainItemContext : ParserRuleContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public LoopChainItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainItemContext loopChainItem() {
		LoopChainItemContext _localctx = new LoopChainItemContext(Context, State);
		EnterRule(_localctx, 50, RULE_loopChainItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 373;
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 372; typeReference();
					}
					break;
				}
				State = 375; identifier();
				State = 376; Match(TColon);
				}
				break;
			}
			State = 380; loopChainExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopChainExpressionContext : ParserRuleContext {
		public LoopChainExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopChainExpression; } }
	 
		public LoopChainExpressionContext() { }
		public virtual void CopyFrom(LoopChainExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopChainMemberAccessExpressionContext : LoopChainExpressionContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainMemberAccessExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainMethodCallExpressionContext : LoopChainExpressionContext {
		public LoopChainExpressionContext loopChainExpression() {
			return GetRuleContext<LoopChainExpressionContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public LoopChainMethodCallExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainMethodCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainIdentifierExpressionContext : LoopChainExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public LoopChainIdentifierExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopChainTypeofExpressionContext : LoopChainExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopChainTypeofExpressionContext(LoopChainExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopChainTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopChainTypeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopChainTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopChainExpressionContext loopChainExpression() {
		return loopChainExpression(0);
	}

	private LoopChainExpressionContext loopChainExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LoopChainExpressionContext _localctx = new LoopChainExpressionContext(Context, _parentState);
		LoopChainExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_loopChainExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			switch (TokenStream.La(1)) {
			case KTypeof:
				{
				_localctx = new LoopChainTypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 383; Match(KTypeof);
				State = 384; Match(TOpenParenthesis);
				State = 385; typeReference();
				State = 386; Match(TCloseParenthesis);
				}
				break;
			case IdentifierNormal:
				{
				_localctx = new LoopChainIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 388; identifier();
				State = 390;
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 389; typeArgumentList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 408;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 406;
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new LoopChainMemberAccessExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 394;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 395; Match(TDot);
						State = 396; identifier();
						State = 398;
						switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
						case 1:
							{
							State = 397; typeArgumentList();
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new LoopChainMethodCallExpressionContext(new LoopChainExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_loopChainExpression);
						State = 400;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 401; Match(TOpenParenthesis);
						State = 403;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TOpenParenthesis - 64)) | (1L << (TPlus - 64)) | (1L << (TMinus - 64)) | (1L << (TExclamation - 64)) | (1L << (TTilde - 64)) | (1L << (TPlusPlus - 64)) | (1L << (TMinusMinus - 64)) | (1L << (IdentifierNormal - 64)) | (1L << (IntegerLiteral - 64)) | (1L << (DecimalLiteral - 64)) | (1L << (ScientificLiteral - 64)) | (1L << (DateTimeOffsetLiteral - 64)) | (1L << (DateTimeLiteral - 64)) | (1L << (DateLiteral - 64)) | (1L << (TimeLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (RegularStringLiteral - 64)) | (1L << (GuidLiteral - 64)) | (1L << (DoubleQuoteVerbatimStringLiteral - 64)))) != 0)) {
							{
							State = 402; expressionList();
							}
						}

						State = 405; Match(TCloseParenthesis);
						}
						break;
					}
					} 
				}
				State = 410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LoopWhereExpressionContext : ParserRuleContext {
		public ITerminalNode KWhere() { return GetToken(MetaGeneratorParser.KWhere, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopWhereExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopWhereExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopWhereExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopWhereExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopWhereExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopWhereExpressionContext loopWhereExpression() {
		LoopWhereExpressionContext _localctx = new LoopWhereExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_loopWhereExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; Match(KWhere);
			State = 412; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopRunExpressionContext : ParserRuleContext {
		public SeparatorStatementContext separatorStatement() {
			return GetRuleContext<SeparatorStatementContext>(0);
		}
		public LoopRunExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopRunExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLoopRunExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLoopRunExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopRunExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopRunExpressionContext loopRunExpression() {
		LoopRunExpressionContext _localctx = new LoopRunExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_loopRunExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; separatorStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorStatementContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(MetaGeneratorParser.TSemicolon, 0); }
		public ITerminalNode KSeparator() { return GetToken(MetaGeneratorParser.KSeparator, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public SeparatorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSeparatorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSeparatorStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorStatementContext separatorStatement() {
		SeparatorStatementContext _localctx = new SeparatorStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_separatorStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(TSemicolon);
			State = 417; Match(KSeparator);
			State = 418; identifier();
			State = 419; Match(TAssign);
			State = 420; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		public SwitchBranchStatementContext[] switchBranchStatement() {
			return GetRuleContexts<SwitchBranchStatementContext>();
		}
		public SwitchBranchStatementContext switchBranchStatement(int i) {
			return GetRuleContext<SwitchBranchStatementContext>(i);
		}
		public SwitchDefaultStatementContext switchDefaultStatement() {
			return GetRuleContext<SwitchDefaultStatementContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; switchStatementBegin();
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KCase || _la==KType) {
				{
				{
				State = 423; switchBranchStatement();
				}
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 430;
			_la = TokenStream.La(1);
			if (_la==KDefault) {
				{
				State = 429; switchDefaultStatement();
				}
			}

			State = 432; switchStatementEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementBeginContext : ParserRuleContext {
		public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public SwitchStatementBeginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementBegin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatementBegin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatementBegin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementBegin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementBeginContext switchStatementBegin() {
		SwitchStatementBeginContext _localctx = new SwitchStatementBeginContext(Context, State);
		EnterRule(_localctx, 62, RULE_switchStatementBegin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(KSwitch);
			State = 435; Match(TOpenParenthesis);
			State = 436; expression(0);
			State = 437; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementEndContext : ParserRuleContext {
		public ITerminalNode KEnd() { return GetToken(MetaGeneratorParser.KEnd, 0); }
		public ITerminalNode KSwitch() { return GetToken(MetaGeneratorParser.KSwitch, 0); }
		public SwitchStatementEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatementEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatementEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatementEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementEndContext switchStatementEnd() {
		SwitchStatementEndContext _localctx = new SwitchStatementEndContext(Context, State);
		EnterRule(_localctx, 64, RULE_switchStatementEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; Match(KEnd);
			State = 440; Match(KSwitch);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchStatementContext : ParserRuleContext {
		public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchBranchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchBranchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchBranchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchStatementContext switchBranchStatement() {
		SwitchBranchStatementContext _localctx = new SwitchBranchStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_switchBranchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; switchBranchHeadStatement();
			State = 443; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBranchHeadStatementContext : ParserRuleContext {
		public SwitchCaseOrTypeIsHeadStatementContext[] switchCaseOrTypeIsHeadStatement() {
			return GetRuleContexts<SwitchCaseOrTypeIsHeadStatementContext>();
		}
		public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement(int i) {
			return GetRuleContext<SwitchCaseOrTypeIsHeadStatementContext>(i);
		}
		public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
			return GetRuleContext<SwitchTypeAsHeadStatementContext>(0);
		}
		public SwitchBranchHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBranchHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchBranchHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchBranchHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBranchHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
		SwitchBranchHeadStatementContext _localctx = new SwitchBranchHeadStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_switchBranchHeadStatement);
		try {
			int _alt;
			State = 451;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 445; switchCaseOrTypeIsHeadStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 448;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 450; switchTypeAsHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseOrTypeIsHeadStatementContext : ParserRuleContext {
		public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
			return GetRuleContext<SwitchCaseHeadStatementContext>(0);
		}
		public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
			return GetRuleContext<SwitchTypeIsHeadStatementContext>(0);
		}
		public SwitchCaseOrTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseOrTypeIsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseOrTypeIsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseOrTypeIsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseOrTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseOrTypeIsHeadStatementContext switchCaseOrTypeIsHeadStatement() {
		SwitchCaseOrTypeIsHeadStatementContext _localctx = new SwitchCaseOrTypeIsHeadStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_switchCaseOrTypeIsHeadStatement);
		try {
			State = 455;
			switch (TokenStream.La(1)) {
			case KCase:
				EnterOuterAlt(_localctx, 1);
				{
				State = 453; switchCaseHeadStatement();
				}
				break;
			case KType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454; switchTypeIsHeadStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseHeadStatementContext : ParserRuleContext {
		public ITerminalNode KCase() { return GetToken(MetaGeneratorParser.KCase, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchCaseHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseHeadStatementContext switchCaseHeadStatement() {
		SwitchCaseHeadStatementContext _localctx = new SwitchCaseHeadStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_switchCaseHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(KCase);
			State = 458; expressionList();
			State = 459; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeIsHeadStatementContext : ParserRuleContext {
		public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeIsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeIsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchTypeIsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchTypeIsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeIsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeIsHeadStatementContext switchTypeIsHeadStatement() {
		SwitchTypeIsHeadStatementContext _localctx = new SwitchTypeIsHeadStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_switchTypeIsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461; Match(KType);
			State = 462; Match(KIs);
			State = 463; typeReferenceList();
			State = 464; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchTypeAsHeadStatementContext : ParserRuleContext {
		public ITerminalNode KType() { return GetToken(MetaGeneratorParser.KType, 0); }
		public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchTypeAsHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchTypeAsHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchTypeAsHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchTypeAsHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchTypeAsHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchTypeAsHeadStatementContext switchTypeAsHeadStatement() {
		SwitchTypeAsHeadStatementContext _localctx = new SwitchTypeAsHeadStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_switchTypeAsHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; Match(KType);
			State = 467; Match(KAs);
			State = 468; typeReference();
			State = 469; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultStatementContext : ParserRuleContext {
		public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SwitchDefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchDefaultStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchDefaultStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultStatementContext switchDefaultStatement() {
		SwitchDefaultStatementContext _localctx = new SwitchDefaultStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_switchDefaultStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; switchDefaultHeadStatement();
			State = 472; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDefaultHeadStatementContext : ParserRuleContext {
		public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public SwitchDefaultHeadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDefaultHeadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSwitchDefaultHeadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSwitchDefaultHeadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDefaultHeadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
		SwitchDefaultHeadStatementContext _localctx = new SwitchDefaultHeadStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_switchDefaultHeadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; Match(KDefault);
			State = 475; Match(TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDeclarationContext : ParserRuleContext {
		public TemplateSignatureContext templateSignature() {
			return GetRuleContext<TemplateSignatureContext>(0);
		}
		public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		public ITerminalNode KEndTemplate() { return GetToken(MetaGeneratorParser.KEndTemplate, 0); }
		public TemplateDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDeclarationContext templateDeclaration() {
		TemplateDeclarationContext _localctx = new TemplateDeclarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_templateDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; templateSignature();
			State = 478; templateBody();
			State = 479; Match(KEndTemplate);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateSignatureContext : ParserRuleContext {
		public ITerminalNode KTemplate() { return GetToken(MetaGeneratorParser.KTemplate, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public TemplateSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateSignatureContext templateSignature() {
		TemplateSignatureContext _localctx = new TemplateSignatureContext(Context, State);
		EnterRule(_localctx, 84, RULE_templateSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(KTemplate);
			State = 482; identifier();
			State = 483; Match(TOpenParenthesis);
			State = 485;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
				{
				State = 484; paramList();
				}
			}

			State = 487; Match(TCloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBodyContext : ParserRuleContext {
		public TemplateContentLineContext[] templateContentLine() {
			return GetRuleContexts<TemplateContentLineContext>();
		}
		public TemplateContentLineContext templateContentLine(int i) {
			return GetRuleContext<TemplateContentLineContext>(i);
		}
		public TemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBodyContext templateBody() {
		TemplateBodyContext _localctx = new TemplateBodyContext(Context, State);
		EnterRule(_localctx, 86, RULE_templateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (TemplateLineControl - 119)) | (1L << (TemplateOutput - 119)) | (1L << (TemplateCrLf - 119)) | (1L << (TemplateLineBreak - 119)) | (1L << (TemplateStatementStart - 119)))) != 0)) {
				{
				{
				State = 489; templateContentLine();
				}
				}
				State = 494;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContentLineContext : ParserRuleContext {
		public TemplateLineEndContext templateLineEnd() {
			return GetRuleContext<TemplateLineEndContext>(0);
		}
		public TemplateOutputContext[] templateOutput() {
			return GetRuleContexts<TemplateOutputContext>();
		}
		public TemplateOutputContext templateOutput(int i) {
			return GetRuleContext<TemplateOutputContext>(i);
		}
		public TemplateStatementStartEndContext[] templateStatementStartEnd() {
			return GetRuleContexts<TemplateStatementStartEndContext>();
		}
		public TemplateStatementStartEndContext templateStatementStartEnd(int i) {
			return GetRuleContext<TemplateStatementStartEndContext>(i);
		}
		public TemplateContentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateContentLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateContentLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateContentLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateContentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContentLineContext templateContentLine() {
		TemplateContentLineContext _localctx = new TemplateContentLineContext(Context, State);
		EnterRule(_localctx, 88, RULE_templateContentLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TemplateOutput || _la==TemplateStatementStart) {
				{
				State = 497;
				switch (TokenStream.La(1)) {
				case TemplateOutput:
					{
					State = 495; templateOutput();
					}
					break;
				case TemplateStatementStart:
					{
					State = 496; templateStatementStartEnd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 502; templateLineEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateOutputContext : ParserRuleContext {
		public ITerminalNode TemplateOutput() { return GetToken(MetaGeneratorParser.TemplateOutput, 0); }
		public TemplateOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateOutputContext templateOutput() {
		TemplateOutputContext _localctx = new TemplateOutputContext(Context, State);
		EnterRule(_localctx, 90, RULE_templateOutput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504; Match(TemplateOutput);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateLineEndContext : ParserRuleContext {
		public ITerminalNode TemplateCrLf() { return GetToken(MetaGeneratorParser.TemplateCrLf, 0); }
		public ITerminalNode TemplateLineBreak() { return GetToken(MetaGeneratorParser.TemplateLineBreak, 0); }
		public ITerminalNode TemplateLineControl() { return GetToken(MetaGeneratorParser.TemplateLineControl, 0); }
		public TemplateLineEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateLineEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateLineEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateLineEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateLineEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateLineEndContext templateLineEnd() {
		TemplateLineEndContext _localctx = new TemplateLineEndContext(Context, State);
		EnterRule(_localctx, 92, RULE_templateLineEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			_la = TokenStream.La(1);
			if ( !(((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (TemplateLineControl - 119)) | (1L << (TemplateCrLf - 119)) | (1L << (TemplateLineBreak - 119)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementStartEndContext : ParserRuleContext {
		public ITerminalNode TemplateStatementStart() { return GetToken(MetaGeneratorParser.TemplateStatementStart, 0); }
		public ITerminalNode TemplateStatementEnd() { return GetToken(MetaGeneratorParser.TemplateStatementEnd, 0); }
		public TemplateStatementContext templateStatement() {
			return GetRuleContext<TemplateStatementContext>(0);
		}
		public TemplateStatementStartEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatementStartEnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateStatementStartEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateStatementStartEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatementStartEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementStartEndContext templateStatementStartEnd() {
		TemplateStatementStartEndContext _localctx = new TemplateStatementStartEndContext(Context, State);
		EnterRule(_localctx, 94, RULE_templateStatementStartEnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508; Match(TemplateStatementStart);
			State = 510;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KSwitch) | (1L << KCase) | (1L << KType) | (1L << KEnd) | (1L << KIf) | (1L << KElse) | (1L << KLoop) | (1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TOpenParenthesis - 64)) | (1L << (TPlus - 64)) | (1L << (TMinus - 64)) | (1L << (TExclamation - 64)) | (1L << (TTilde - 64)) | (1L << (TPlusPlus - 64)) | (1L << (TMinusMinus - 64)) | (1L << (IdentifierNormal - 64)) | (1L << (IntegerLiteral - 64)) | (1L << (DecimalLiteral - 64)) | (1L << (ScientificLiteral - 64)) | (1L << (DateTimeOffsetLiteral - 64)) | (1L << (DateTimeLiteral - 64)) | (1L << (DateLiteral - 64)) | (1L << (TimeLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (RegularStringLiteral - 64)) | (1L << (GuidLiteral - 64)) | (1L << (DoubleQuoteVerbatimStringLiteral - 64)))) != 0)) {
				{
				State = 509; templateStatement();
				}
			}

			State = 512; Match(TemplateStatementEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatementContext : ParserRuleContext {
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementBeginContext ifStatementBegin() {
			return GetRuleContext<IfStatementBeginContext>(0);
		}
		public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementElseContext ifStatementElse() {
			return GetRuleContext<IfStatementElseContext>(0);
		}
		public IfStatementEndContext ifStatementEnd() {
			return GetRuleContext<IfStatementEndContext>(0);
		}
		public LoopStatementBeginContext loopStatementBegin() {
			return GetRuleContext<LoopStatementBeginContext>(0);
		}
		public LoopStatementEndContext loopStatementEnd() {
			return GetRuleContext<LoopStatementEndContext>(0);
		}
		public SwitchStatementBeginContext switchStatementBegin() {
			return GetRuleContext<SwitchStatementBeginContext>(0);
		}
		public SwitchStatementEndContext switchStatementEnd() {
			return GetRuleContext<SwitchStatementEndContext>(0);
		}
		public SwitchBranchHeadStatementContext switchBranchHeadStatement() {
			return GetRuleContext<SwitchBranchHeadStatementContext>(0);
		}
		public SwitchDefaultHeadStatementContext switchDefaultHeadStatement() {
			return GetRuleContext<SwitchDefaultHeadStatementContext>(0);
		}
		public TemplateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTemplateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTemplateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatementContext templateStatement() {
		TemplateStatementContext _localctx = new TemplateStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_templateStatement);
		try {
			State = 526;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 514; variableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 515; expressionStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 516; ifStatementBegin();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 517; elseIfStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 518; ifStatementElse();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 519; ifStatementEnd();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 520; loopStatementBegin();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 521; loopStatementEnd();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 522; switchStatementBegin();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 523; switchStatementEnd();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 524; switchBranchHeadStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 525; switchDefaultHeadStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public TypeReferenceListContext typeReferenceList() {
			return GetRuleContext<TypeReferenceListContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 98, RULE_typeArgumentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; Match(TLessThan);
			State = 529; typeReferenceList();
			State = 530; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		public ITerminalNode KBool() { return GetToken(MetaGeneratorParser.KBool, 0); }
		public ITerminalNode KByte() { return GetToken(MetaGeneratorParser.KByte, 0); }
		public ITerminalNode KChar() { return GetToken(MetaGeneratorParser.KChar, 0); }
		public ITerminalNode KDecimal() { return GetToken(MetaGeneratorParser.KDecimal, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaGeneratorParser.KDouble, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaGeneratorParser.KFloat, 0); }
		public ITerminalNode KInt() { return GetToken(MetaGeneratorParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaGeneratorParser.KLong, 0); }
		public ITerminalNode KObject() { return GetToken(MetaGeneratorParser.KObject, 0); }
		public ITerminalNode KSByte() { return GetToken(MetaGeneratorParser.KSByte, 0); }
		public ITerminalNode KShort() { return GetToken(MetaGeneratorParser.KShort, 0); }
		public ITerminalNode KString() { return GetToken(MetaGeneratorParser.KString, 0); }
		public ITerminalNode KUInt() { return GetToken(MetaGeneratorParser.KUInt, 0); }
		public ITerminalNode KULong() { return GetToken(MetaGeneratorParser.KULong, 0); }
		public ITerminalNode KUShort() { return GetToken(MetaGeneratorParser.KUShort, 0); }
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 100, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceListContext : ParserRuleContext {
		public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public TypeReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReferenceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeReferenceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeReferenceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceListContext typeReferenceList() {
		TypeReferenceListContext _localctx = new TypeReferenceListContext(Context, State);
		EnterRule(_localctx, 102, RULE_typeReferenceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534; typeReference();
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 535; Match(TComma);
				State = 536; typeReference();
				}
				}
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 104, RULE_typeReference);
		try {
			State = 546;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 542; arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 543; nullableType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 544; genericType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 545; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public RankSpecifiersContext rankSpecifiers() {
			return GetRuleContext<RankSpecifiersContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 106, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 548; nullableType();
				}
				break;
			case 2:
				{
				State = 549; genericType();
				}
				break;
			case 3:
				{
				State = 550; simpleType();
				}
				break;
			}
			State = 553; rankSpecifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 108, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 555; genericType();
				}
				break;
			case 2:
				{
				State = 556; simpleType();
				}
				break;
			}
			State = 559; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 110, RULE_genericType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; qualifiedName();
			State = 562; typeArgumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_simpleType);
		try {
			State = 566;
			switch (TokenStream.La(1)) {
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 564; qualifiedName();
				}
				break;
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
				EnterOuterAlt(_localctx, 2);
				{
				State = 565; predefinedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_returnType);
		try {
			State = 572;
			switch (TokenStream.La(1)) {
			case KBool:
			case KByte:
			case KChar:
			case KDecimal:
			case KDouble:
			case KFloat:
			case KInt:
			case KLong:
			case KObject:
			case KSByte:
			case KShort:
			case KString:
			case KUInt:
			case KULong:
			case KUShort:
			case IdentifierNormal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 118, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; expression(0);
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 575; Match(TComma);
				State = 576; expression(0);
				}
				}
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterVariableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitVariableReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 120, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifiersContext : ParserRuleContext {
		public RankSpecifierContext[] rankSpecifier() {
			return GetRuleContexts<RankSpecifierContext>();
		}
		public RankSpecifierContext rankSpecifier(int i) {
			return GetRuleContext<RankSpecifierContext>(i);
		}
		public RankSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRankSpecifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRankSpecifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifiersContext rankSpecifiers() {
		RankSpecifiersContext _localctx = new RankSpecifiersContext(Context, State);
		EnterRule(_localctx, 122, RULE_rankSpecifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 584; rankSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 587;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifierContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public RankSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRankSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRankSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifierContext rankSpecifier() {
		RankSpecifierContext _localctx = new RankSpecifierContext(Context, State);
		EnterRule(_localctx, 124, RULE_rankSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; Match(TOpenBracket);
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 590; Match(TComma);
				}
				}
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 596; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnboundTypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public GenericDimensionSpecifierContext[] genericDimensionSpecifier() {
			return GetRuleContexts<GenericDimensionSpecifierContext>();
		}
		public GenericDimensionSpecifierContext genericDimensionSpecifier(int i) {
			return GetRuleContext<GenericDimensionSpecifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public UnboundTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unboundTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUnboundTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUnboundTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnboundTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnboundTypeNameContext unboundTypeName() {
		UnboundTypeNameContext _localctx = new UnboundTypeNameContext(Context, State);
		EnterRule(_localctx, 126, RULE_unboundTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598; identifier();
			State = 600;
			_la = TokenStream.La(1);
			if (_la==TLessThan) {
				{
				State = 599; genericDimensionSpecifier();
				}
			}

			State = 609;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TDot) {
				{
				{
				State = 602; Match(TDot);
				State = 603; identifier();
				State = 605;
				_la = TokenStream.La(1);
				if (_la==TLessThan) {
					{
					State = 604; genericDimensionSpecifier();
					}
				}

				}
				}
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDimensionSpecifierContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public GenericDimensionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDimensionSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGenericDimensionSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGenericDimensionSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericDimensionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericDimensionSpecifierContext genericDimensionSpecifier() {
		GenericDimensionSpecifierContext _localctx = new GenericDimensionSpecifierContext(Context, State);
		EnterRule(_localctx, 128, RULE_genericDimensionSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612; Match(TLessThan);
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 613; Match(TComma);
				}
				}
				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 619; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionSignatureContext : ParserRuleContext {
		public AnonymousFunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionSignature; } }
	 
		public AnonymousFunctionSignatureContext() { }
		public virtual void CopyFrom(AnonymousFunctionSignatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleParamAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ImplicitParameterContext implicitParameter() {
			return GetRuleContext<ImplicitParameterContext>(0);
		}
		public SingleParamAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterSingleParamAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitSingleParamAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleParamAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ImplicitParameterContext[] implicitParameter() {
			return GetRuleContexts<ImplicitParameterContext>();
		}
		public ImplicitParameterContext implicitParameter(int i) {
			return GetRuleContext<ImplicitParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ImplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterImplicitAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitImplicitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExplicitAnonymousFunctionSignatureContext : AnonymousFunctionSignatureContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExplicitParameterContext[] explicitParameter() {
			return GetRuleContexts<ExplicitParameterContext>();
		}
		public ExplicitParameterContext explicitParameter(int i) {
			return GetRuleContext<ExplicitParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public ExplicitAnonymousFunctionSignatureContext(AnonymousFunctionSignatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitAnonymousFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
		AnonymousFunctionSignatureContext _localctx = new AnonymousFunctionSignatureContext(Context, State);
		EnterRule(_localctx, 130, RULE_anonymousFunctionSignature);
		int _la;
		try {
			State = 646;
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				_localctx = new ExplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 621; Match(TOpenParenthesis);
				State = 630;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort))) != 0) || _la==IdentifierNormal) {
					{
					State = 622; explicitParameter();
					State = 627;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==TComma) {
						{
						{
						State = 623; Match(TComma);
						State = 624; explicitParameter();
						}
						}
						State = 629;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
				}

				State = 632; Match(TCloseParenthesis);
				}
				break;
			case 2:
				_localctx = new ImplicitAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 633; Match(TOpenParenthesis);
				State = 642;
				_la = TokenStream.La(1);
				if (_la==IdentifierNormal) {
					{
					State = 634; implicitParameter();
					State = 639;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==TComma) {
						{
						{
						State = 635; Match(TComma);
						State = 636; implicitParameter();
						}
						}
						State = 641;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
				}

				State = 644; Match(TCloseParenthesis);
				}
				break;
			case 3:
				_localctx = new SingleParamAnonymousFunctionSignatureContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 645; implicitParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterExplicitParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitExplicitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitParameterContext explicitParameter() {
		ExplicitParameterContext _localctx = new ExplicitParameterContext(Context, State);
		EnterRule(_localctx, 132, RULE_explicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648; typeReference();
			State = 649; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ImplicitParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterImplicitParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitImplicitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitParameterContext implicitParameter() {
		ImplicitParameterContext _localctx = new ImplicitParameterContext(Context, State);
		EnterRule(_localctx, 134, RULE_implicitParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeofUnboundTypeExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public UnboundTypeNameContext unboundTypeName() {
			return GetRuleContext<UnboundTypeNameContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofUnboundTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofUnboundTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofUnboundTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofUnboundTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode KIs() { return GetToken(MetaGeneratorParser.KIs, 0); }
		public ITerminalNode KAs() { return GetToken(MetaGeneratorParser.KAs, 0); }
		public TypecheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypecheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypecheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaGeneratorParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaGeneratorParser.TGreaterThan, 0); }
		public ITerminalNode TLessThanOrEquals() { return GetToken(MetaGeneratorParser.TLessThanOrEquals, 0); }
		public ITerminalNode TGreaterThanOrEquals() { return GetToken(MetaGeneratorParser.TGreaterThanOrEquals, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public PostExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPostExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPostExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofVoidExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode KVoid() { return GetToken(MetaGeneratorParser.KVoid, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofVoidExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofVoidExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofVoidExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofVoidExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseAndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAmp() { return GetToken(MetaGeneratorParser.TAmp, 0); }
		public BitwiseAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAnd() { return GetToken(MetaGeneratorParser.TAnd, 0); }
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TPlus() { return GetToken(MetaGeneratorParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaGeneratorParser.TMinus, 0); }
		public ITerminalNode TExclamation() { return GetToken(MetaGeneratorParser.TExclamation, 0); }
		public ITerminalNode TTilde() { return GetToken(MetaGeneratorParser.TTilde, 0); }
		public ITerminalNode TPlusPlus() { return GetToken(MetaGeneratorParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaGeneratorParser.TMinusMinus, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecastExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypecastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypecastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypecastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalXorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TXor() { return GetToken(MetaGeneratorParser.TXor, 0); }
		public LogicalXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefinedTypeMemberAccessExpressionContext : ExpressionContext {
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaGeneratorParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public PredefinedTypeMemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterPredefinedTypeMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitPredefinedTypeMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedTypeMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseXorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THat() { return GetToken(MetaGeneratorParser.THat, 0); }
		public BitwiseXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
			return GetRuleContext<AnonymousFunctionSignatureContext>(0);
		}
		public ITerminalNode TArrow() { return GetToken(MetaGeneratorParser.TArrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultValueExpressionContext : ExpressionContext {
		public ITerminalNode KDefault() { return GetToken(MetaGeneratorParser.KDefault, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public DefaultValueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaGeneratorParser.TQuestion, 0); }
		public ITerminalNode TColon() { return GetToken(MetaGeneratorParser.TColon, 0); }
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAssign() { return GetToken(MetaGeneratorParser.TAssign, 0); }
		public ITerminalNode TAssignPlus() { return GetToken(MetaGeneratorParser.TAssignPlus, 0); }
		public ITerminalNode TAssignMinus() { return GetToken(MetaGeneratorParser.TAssignMinus, 0); }
		public ITerminalNode TAssignAsterisk() { return GetToken(MetaGeneratorParser.TAssignAsterisk, 0); }
		public ITerminalNode TAssignSlash() { return GetToken(MetaGeneratorParser.TAssignSlash, 0); }
		public ITerminalNode TAssignPercent() { return GetToken(MetaGeneratorParser.TAssignPercent, 0); }
		public ITerminalNode TAssignAmp() { return GetToken(MetaGeneratorParser.TAssignAmp, 0); }
		public ITerminalNode TAssignPipe() { return GetToken(MetaGeneratorParser.TAssignPipe, 0); }
		public ITerminalNode TAssignHat() { return GetToken(MetaGeneratorParser.TAssignHat, 0); }
		public ITerminalNode TAssignLeftShift() { return GetToken(MetaGeneratorParser.TAssignLeftShift, 0); }
		public ITerminalNode TAssignRightShift() { return GetToken(MetaGeneratorParser.TAssignRightShift, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAsterisk() { return GetToken(MetaGeneratorParser.TAsterisk, 0); }
		public ITerminalNode TSlash() { return GetToken(MetaGeneratorParser.TSlash, 0); }
		public ITerminalNode TPercent() { return GetToken(MetaGeneratorParser.TPercent, 0); }
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectOrCollectionWithConstructorExpressionContext : ExpressionContext {
		public ITerminalNode KNew() { return GetToken(MetaGeneratorParser.KNew, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public NewObjectOrCollectionWithConstructorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNewObjectOrCollectionWithConstructorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNewObjectOrCollectionWithConstructorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectOrCollectionWithConstructorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TOr() { return GetToken(MetaGeneratorParser.TOr, 0); }
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TPipe() { return GetToken(MetaGeneratorParser.TPipe, 0); }
		public BitwiseOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBitwiseOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBitwiseOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HasLoopExpressionContext : ExpressionContext {
		public ITerminalNode KHasLoop() { return GetToken(MetaGeneratorParser.KHasLoop, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public LoopChainContext loopChain() {
			return GetRuleContext<LoopChainContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public LoopWhereExpressionContext loopWhereExpression() {
			return GetRuleContext<LoopWhereExpressionContext>(0);
		}
		public HasLoopExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterHasLoopExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitHasLoopExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ITerminalNode KThis() { return GetToken(MetaGeneratorParser.KThis, 0); }
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(MetaGeneratorParser.TOpenBracket, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaGeneratorParser.TCloseBracket, 0); }
		public ElementAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterElementAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitElementAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofTypeExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaGeneratorParser.KTypeof, 0); }
		public ITerminalNode TOpenParenthesis() { return GetToken(MetaGeneratorParser.TOpenParenthesis, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParenthesis() { return GetToken(MetaGeneratorParser.TCloseParenthesis, 0); }
		public TypeofTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTypeofTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTypeofTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TEquals() { return GetToken(MetaGeneratorParser.TEquals, 0); }
		public ITerminalNode TNotEquals() { return GetToken(MetaGeneratorParser.TNotEquals, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 136;
		EnterRecursionRule(_localctx, 136, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				_localctx = new TypecastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 654; Match(TOpenParenthesis);
				State = 655; typeReference();
				State = 656; Match(TCloseParenthesis);
				State = 657; expression(17);
				}
				break;
			case 2:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 659;
				_la = TokenStream.La(1);
				if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (TPlus - 79)) | (1L << (TMinus - 79)) | (1L << (TExclamation - 79)) | (1L << (TTilde - 79)) | (1L << (TPlusPlus - 79)) | (1L << (TMinusMinus - 79)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 660; expression(16);
				}
				break;
			case 3:
				{
				_localctx = new LambdaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 661; anonymousFunctionSignature();
				State = 662; Match(TArrow);
				State = 663; expression(1);
				}
				break;
			case 4:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 665; Match(KThis);
				}
				break;
			case 5:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 666; literal();
				}
				break;
			case 6:
				{
				_localctx = new TypeofVoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 667; Match(KTypeof);
				State = 668; Match(TOpenParenthesis);
				State = 669; Match(KVoid);
				State = 670; Match(TCloseParenthesis);
				}
				break;
			case 7:
				{
				_localctx = new TypeofUnboundTypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 671; Match(KTypeof);
				State = 672; Match(TOpenParenthesis);
				State = 673; unboundTypeName();
				State = 674; Match(TCloseParenthesis);
				}
				break;
			case 8:
				{
				_localctx = new TypeofTypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 676; Match(KTypeof);
				State = 677; Match(TOpenParenthesis);
				State = 678; typeReference();
				State = 679; Match(TCloseParenthesis);
				}
				break;
			case 9:
				{
				_localctx = new DefaultValueExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 681; Match(KDefault);
				State = 682; Match(TOpenParenthesis);
				State = 683; typeReference();
				State = 684; Match(TCloseParenthesis);
				}
				break;
			case 10:
				{
				_localctx = new NewObjectOrCollectionWithConstructorExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 686; Match(KNew);
				State = 687; typeReference();
				State = 688; Match(TOpenParenthesis);
				State = 690;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TOpenParenthesis - 64)) | (1L << (TPlus - 64)) | (1L << (TMinus - 64)) | (1L << (TExclamation - 64)) | (1L << (TTilde - 64)) | (1L << (TPlusPlus - 64)) | (1L << (TMinusMinus - 64)) | (1L << (IdentifierNormal - 64)) | (1L << (IntegerLiteral - 64)) | (1L << (DecimalLiteral - 64)) | (1L << (ScientificLiteral - 64)) | (1L << (DateTimeOffsetLiteral - 64)) | (1L << (DateTimeLiteral - 64)) | (1L << (DateLiteral - 64)) | (1L << (TimeLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (RegularStringLiteral - 64)) | (1L << (GuidLiteral - 64)) | (1L << (DoubleQuoteVerbatimStringLiteral - 64)))) != 0)) {
					{
					State = 689; expressionList();
					}
				}

				State = 692; Match(TCloseParenthesis);
				}
				break;
			case 11:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 694; identifier();
				State = 696;
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 695; typeArgumentList();
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new HasLoopExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 698; Match(KHasLoop);
				State = 699; Match(TOpenParenthesis);
				State = 700; loopChain();
				State = 702;
				_la = TokenStream.La(1);
				if (_la==KWhere) {
					{
					State = 701; loopWhereExpression();
					}
				}

				State = 704; Match(TCloseParenthesis);
				}
				break;
			case 13:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 706; Match(TOpenParenthesis);
				State = 707; expression(0);
				State = 708; Match(TCloseParenthesis);
				}
				break;
			case 14:
				{
				_localctx = new PredefinedTypeMemberAccessExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 710; predefinedType();
				State = 711; Match(TDot);
				State = 712; identifier();
				State = 714;
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 713; typeArgumentList();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 781;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 779;
					switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 718;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 719;
						_la = TokenStream.La(1);
						if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (TAsterisk - 83)) | (1L << (TSlash - 83)) | (1L << (TPercent - 83)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 720; expression(15);
						}
						break;
					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 721;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 722;
						_la = TokenStream.La(1);
						if ( !(_la==TPlus || _la==TMinus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 723; expression(14);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 724;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 725;
						_la = TokenStream.La(1);
						if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (TLessThan - 74)) | (1L << (TGreaterThan - 74)) | (1L << (TLessThanOrEquals - 74)) | (1L << (TGreaterThanOrEquals - 74)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 726; expression(13);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 727;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 728;
						_la = TokenStream.La(1);
						if ( !(_la==TEquals || _la==TNotEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 729; expression(11);
						}
						break;
					case 5:
						{
						_localctx = new BitwiseAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 730;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 731; Match(TAmp);
						State = 732; expression(10);
						}
						break;
					case 6:
						{
						_localctx = new BitwiseXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 733;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 734; Match(THat);
						State = 735; expression(9);
						}
						break;
					case 7:
						{
						_localctx = new BitwiseOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 736;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 737; Match(TPipe);
						State = 738; expression(8);
						}
						break;
					case 8:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 739;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 740; Match(TAnd);
						State = 741; expression(7);
						}
						break;
					case 9:
						{
						_localctx = new LogicalXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 742;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 743; Match(TXor);
						State = 744; expression(6);
						}
						break;
					case 10:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 745;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 746; Match(TOr);
						State = 747; expression(5);
						}
						break;
					case 11:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 748;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 749; Match(TQuestion);
						State = 750; expression(0);
						State = 751; Match(TColon);
						State = 752; expression(4);
						}
						break;
					case 12:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 754;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 755;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAssign) | (1L << TAssignPlus) | (1L << TAssignMinus) | (1L << TAssignAsterisk) | (1L << TAssignSlash) | (1L << TAssignPercent) | (1L << TAssignAmp) | (1L << TAssignPipe) | (1L << TAssignHat) | (1L << TAssignLeftShift) | (1L << TAssignRightShift))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 756; expression(3);
						}
						break;
					case 13:
						{
						_localctx = new ElementAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 757;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 758; Match(TOpenBracket);
						State = 759; expressionList();
						State = 760; Match(TCloseBracket);
						}
						break;
					case 14:
						{
						_localctx = new FunctionCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 762;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 763; Match(TOpenParenthesis);
						State = 765;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KHasLoop) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KBool) | (1L << KByte) | (1L << KChar) | (1L << KDecimal) | (1L << KDouble) | (1L << KFloat) | (1L << KInt) | (1L << KLong) | (1L << KObject) | (1L << KSByte) | (1L << KShort) | (1L << KString) | (1L << KUInt) | (1L << KULong) | (1L << KUShort) | (1L << KThis) | (1L << KNew) | (1L << KTypeof) | (1L << KDefault))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TOpenParenthesis - 64)) | (1L << (TPlus - 64)) | (1L << (TMinus - 64)) | (1L << (TExclamation - 64)) | (1L << (TTilde - 64)) | (1L << (TPlusPlus - 64)) | (1L << (TMinusMinus - 64)) | (1L << (IdentifierNormal - 64)) | (1L << (IntegerLiteral - 64)) | (1L << (DecimalLiteral - 64)) | (1L << (ScientificLiteral - 64)) | (1L << (DateTimeOffsetLiteral - 64)) | (1L << (DateTimeLiteral - 64)) | (1L << (DateLiteral - 64)) | (1L << (TimeLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (RegularStringLiteral - 64)) | (1L << (GuidLiteral - 64)) | (1L << (DoubleQuoteVerbatimStringLiteral - 64)))) != 0)) {
							{
							State = 764; expressionList();
							}
						}

						State = 767; Match(TCloseParenthesis);
						}
						break;
					case 15:
						{
						_localctx = new MemberAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 768;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 769; Match(TDot);
						State = 770; identifier();
						State = 772;
						switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
						case 1:
							{
							State = 771; typeArgumentList();
							}
							break;
						}
						}
						break;
					case 16:
						{
						_localctx = new PostExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 774;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 775;
						_la = TokenStream.La(1);
						if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						}
						break;
					case 17:
						{
						_localctx = new TypecheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 776;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 777;
						_la = TokenStream.La(1);
						if ( !(_la==KIs || _la==KAs) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 778; typeReference();
						}
						break;
					}
					} 
				}
				State = 783;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaGeneratorParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaGeneratorParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 138, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 784; identifier();
			State = 789;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 785; Match(TDot);
					State = 786; identifier();
					}
					} 
				}
				State = 791;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaGeneratorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaGeneratorParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 140, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792; identifier();
			State = 797;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 793; Match(TComma);
				State = 794; identifier();
				}
				}
				State = 799;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaGeneratorParser.IdentifierNormal, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800; Match(IdentifierNormal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public DateOrTimeLiteralContext dateOrTimeLiteral() {
			return GetRuleContext<DateOrTimeLiteralContext>(0);
		}
		public CharLiteralContext charLiteral() {
			return GetRuleContext<CharLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public GuidLiteralContext guidLiteral() {
			return GetRuleContext<GuidLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 144, RULE_literal);
		try {
			State = 809;
			switch (TokenStream.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 802; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 803; booleanLiteral();
				}
				break;
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 804; numberLiteral();
				}
				break;
			case DateTimeOffsetLiteral:
			case DateTimeLiteral:
			case DateLiteral:
			case TimeLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 805; dateOrTimeLiteral();
				}
				break;
			case CharLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 806; charLiteral();
				}
				break;
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 807; stringLiteral();
				}
				break;
			case GuidLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 808; guidLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaGeneratorParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 146, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaGeneratorParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaGeneratorParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 148, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			_la = TokenStream.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 150, RULE_numberLiteral);
		try {
			State = 818;
			switch (TokenStream.La(1)) {
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 815; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 816; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 817; scientificLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(MetaGeneratorParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 152, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(MetaGeneratorParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 154, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(MetaGeneratorParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 156, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateOrTimeLiteralContext : ParserRuleContext {
		public DateTimeLiteralContext dateTimeLiteral() {
			return GetRuleContext<DateTimeLiteralContext>(0);
		}
		public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
			return GetRuleContext<DateTimeOffsetLiteralContext>(0);
		}
		public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		public TimeLiteralContext timeLiteral() {
			return GetRuleContext<TimeLiteralContext>(0);
		}
		public DateOrTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateOrTimeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateOrTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateOrTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateOrTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateOrTimeLiteralContext dateOrTimeLiteral() {
		DateOrTimeLiteralContext _localctx = new DateOrTimeLiteralContext(Context, State);
		EnterRule(_localctx, 158, RULE_dateOrTimeLiteral);
		try {
			State = 830;
			switch (TokenStream.La(1)) {
			case DateTimeLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 826; dateTimeLiteral();
				}
				break;
			case DateTimeOffsetLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 827; dateTimeOffsetLiteral();
				}
				break;
			case DateLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 828; dateLiteral();
				}
				break;
			case TimeLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 829; timeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeOffsetLiteralContext : ParserRuleContext {
		public ITerminalNode DateTimeOffsetLiteral() { return GetToken(MetaGeneratorParser.DateTimeOffsetLiteral, 0); }
		public DateTimeOffsetLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeOffsetLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateTimeOffsetLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateTimeOffsetLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeOffsetLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeOffsetLiteralContext dateTimeOffsetLiteral() {
		DateTimeOffsetLiteralContext _localctx = new DateTimeOffsetLiteralContext(Context, State);
		EnterRule(_localctx, 160, RULE_dateTimeOffsetLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832; Match(DateTimeOffsetLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeLiteralContext : ParserRuleContext {
		public ITerminalNode DateTimeLiteral() { return GetToken(MetaGeneratorParser.DateTimeLiteral, 0); }
		public DateTimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeLiteralContext dateTimeLiteral() {
		DateTimeLiteralContext _localctx = new DateTimeLiteralContext(Context, State);
		EnterRule(_localctx, 162, RULE_dateTimeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834; Match(DateTimeLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		public ITerminalNode DateLiteral() { return GetToken(MetaGeneratorParser.DateLiteral, 0); }
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(Context, State);
		EnterRule(_localctx, 164, RULE_dateLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836; Match(DateLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeLiteralContext : ParserRuleContext {
		public ITerminalNode TimeLiteral() { return GetToken(MetaGeneratorParser.TimeLiteral, 0); }
		public TimeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeLiteralContext timeLiteral() {
		TimeLiteralContext _localctx = new TimeLiteralContext(Context, State);
		EnterRule(_localctx, 166, RULE_timeLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838; Match(TimeLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLiteralContext : ParserRuleContext {
		public ITerminalNode CharLiteral() { return GetToken(MetaGeneratorParser.CharLiteral, 0); }
		public CharLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterCharLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitCharLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLiteralContext charLiteral() {
		CharLiteralContext _localctx = new CharLiteralContext(Context, State);
		EnterRule(_localctx, 168, RULE_charLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840; Match(CharLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(MetaGeneratorParser.RegularStringLiteral, 0); }
		public ITerminalNode DoubleQuoteVerbatimStringLiteral() { return GetToken(MetaGeneratorParser.DoubleQuoteVerbatimStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 170, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			_la = TokenStream.La(1);
			if ( !(_la==RegularStringLiteral || _la==DoubleQuoteVerbatimStringLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidLiteralContext : ParserRuleContext {
		public ITerminalNode GuidLiteral() { return GetToken(MetaGeneratorParser.GuidLiteral, 0); }
		public GuidLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guidLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.EnterGuidLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaGeneratorParserListener typedListener = listener as IMetaGeneratorParserListener;
			if (typedListener != null) typedListener.ExitGuidLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaGeneratorParserVisitor<TResult> typedVisitor = visitor as IMetaGeneratorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuidLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuidLiteralContext guidLiteral() {
		GuidLiteralContext _localctx = new GuidLiteralContext(Context, State);
		EnterRule(_localctx, 172, RULE_guidLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844; Match(GuidLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return loopChainExpression_sempred((LoopChainExpressionContext)_localctx, predIndex);
		case 68: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool loopChainExpression_sempred(LoopChainExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 21);
		case 15: return Precpred(Context, 20);
		case 16: return Precpred(Context, 18);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 11);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x81\x351\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x3\x2\x3\x2\x3\x2\a\x2\xB4\n\x2\f\x2\xE\x2\xB7\v\x2\x3\x2\x5\x2\xBA"+
		"\n\x2\x3\x2\a\x2\xBD\n\x2\f\x2\xE\x2\xC0\v\x2\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x5\x5\xD5\n\x5\x3\x5\x3\x5\x5\x5\xD9\n\x5\x3\x6"+
		"\x3\x6\x5\x6\xDD\n\x6\x3\x6\a\x6\xE0\n\x6\f\x6\xE\x6\xE3\v\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x5\a\xEC\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\a"+
		"\a\xF3\n\a\f\a\xE\a\xF6\v\a\x3\a\x3\a\x3\a\x5\a\xFB\n\a\x3\b\x3\b\x5\b"+
		"\xFF\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x10B\n"+
		"\n\x3\n\x3\n\x3\v\x3\v\x3\v\a\v\x112\n\v\f\v\xE\v\x115\v\v\x3\f\x3\f\x3"+
		"\f\x3\f\x5\f\x11B\n\f\x3\r\a\r\x11E\n\r\f\r\xE\r\x121\v\r\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x12F"+
		"\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x135\n\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x141\n\x12\f\x12"+
		"\xE\x12\x144\v\x12\x3\x12\x3\x12\x3\x12\x5\x12\x149\n\x12\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x165\n\x18\x3\x18\x5\x18\x168\n\x18"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\a\x1A\x172\n"+
		"\x1A\f\x1A\xE\x1A\x175\v\x1A\x3\x1B\x5\x1B\x178\n\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x5\x1B\x17D\n\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x189\n\x1C\x5\x1C\x18B\n\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x5\x1C\x191\n\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x196\n\x1C"+
		"\x3\x1C\a\x1C\x199\n\x1C\f\x1C\xE\x1C\x19C\v\x1C\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \a \x1AB"+
		"\n \f \xE \x1AE\v \x3 \x5 \x1B1\n \x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3\"\x3"+
		"\"\x3\"\x3#\x3#\x3#\x3$\x6$\x1C1\n$\r$\xE$\x1C2\x3$\x5$\x1C6\n$\x3%\x3"+
		"%\x5%\x1CA\n%\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3"+
		"(\x3(\x3)\x3)\x3)\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x3,\x5,\x1E8"+
		"\n,\x3,\x3,\x3-\a-\x1ED\n-\f-\xE-\x1F0\v-\x3.\x3.\a.\x1F4\n.\f.\xE.\x1F7"+
		"\v.\x3.\x3.\x3/\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x5\x31\x201\n\x31\x3\x31"+
		"\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x5\x32\x211\n\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3"+
		"\x34\x3\x34\x3\x35\x3\x35\x3\x35\a\x35\x21C\n\x35\f\x35\xE\x35\x21F\v"+
		"\x35\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x225\n\x36\x3\x37\x3\x37\x3\x37"+
		"\x5\x37\x22A\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x5\x38\x230\n\x38\x3\x38"+
		"\x3\x38\x3\x39\x3\x39\x3\x39\x3:\x3:\x5:\x239\n:\x3;\x3;\x3<\x3<\x5<\x23F"+
		"\n<\x3=\x3=\x3=\a=\x244\n=\f=\xE=\x247\v=\x3>\x3>\x3?\x6?\x24C\n?\r?\xE"+
		"?\x24D\x3@\x3@\a@\x252\n@\f@\xE@\x255\v@\x3@\x3@\x3\x41\x3\x41\x5\x41"+
		"\x25B\n\x41\x3\x41\x3\x41\x3\x41\x5\x41\x260\n\x41\a\x41\x262\n\x41\f"+
		"\x41\xE\x41\x265\v\x41\x3\x42\x3\x42\a\x42\x269\n\x42\f\x42\xE\x42\x26C"+
		"\v\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43\a\x43\x274\n\x43\f\x43"+
		"\xE\x43\x277\v\x43\x5\x43\x279\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43"+
		"\a\x43\x280\n\x43\f\x43\xE\x43\x283\v\x43\x5\x43\x285\n\x43\x3\x43\x3"+
		"\x43\x5\x43\x289\n\x43\x3\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x2B5\n\x46\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x5\x46\x2BB\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x2C1"+
		"\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x5\x46\x2CD\n\x46\x5\x46\x2CF\n\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x5\x46\x300\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x5\x46\x307\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\a\x46\x30E\n"+
		"\x46\f\x46\xE\x46\x311\v\x46\x3G\x3G\x3G\aG\x316\nG\fG\xEG\x319\vG\x3"+
		"H\x3H\x3H\aH\x31E\nH\fH\xEH\x321\vH\x3I\x3I\x3J\x3J\x3J\x3J\x3J\x3J\x3"+
		"J\x5J\x32C\nJ\x3K\x3K\x3L\x3L\x3M\x3M\x3M\x5M\x335\nM\x3N\x3N\x3O\x3O"+
		"\x3P\x3P\x3Q\x3Q\x3Q\x3Q\x5Q\x341\nQ\x3R\x3R\x3S\x3S\x3T\x3T\x3U\x3U\x3"+
		"V\x3V\x3W\x3W\x3X\x3X\x3X\x2\x4\x36\x8AY\x2\x4\x6\b\n\f\xE\x10\x12\x14"+
		"\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLN"+
		"PRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90"+
		"\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\x2\xE\x4"+
		"\x2yy{|\x3\x2\x1E,\x4\x2QTXY\x3\x2UW\x3\x2QR\x3\x2LO\x3\x2HI\x3\x2\x37"+
		"\x41\x3\x2XY\x3\x2/\x30\x3\x2\x1C\x1D\x4\x2kkss\x377\x2\xB0\x3\x2\x2\x2"+
		"\x4\xC1\x3\x2\x2\x2\x6\xC5\x3\x2\x2\x2\b\xD8\x3\x2\x2\x2\n\xDA\x3\x2\x2"+
		"\x2\f\xFA\x3\x2\x2\x2\xE\xFE\x3\x2\x2\x2\x10\x100\x3\x2\x2\x2\x12\x105"+
		"\x3\x2\x2\x2\x14\x10E\x3\x2\x2\x2\x16\x116\x3\x2\x2\x2\x18\x11F\x3\x2"+
		"\x2\x2\x1A\x12E\x3\x2\x2\x2\x1C\x130\x3\x2\x2\x2\x1E\x136\x3\x2\x2\x2"+
		" \x139\x3\x2\x2\x2\"\x13B\x3\x2\x2\x2$\x14C\x3\x2\x2\x2&\x151\x3\x2\x2"+
		"\x2(\x157\x3\x2\x2\x2*\x159\x3\x2\x2\x2,\x15C\x3\x2\x2\x2.\x160\x3\x2"+
		"\x2\x2\x30\x16B\x3\x2\x2\x2\x32\x16E\x3\x2\x2\x2\x34\x17C\x3\x2\x2\x2"+
		"\x36\x18A\x3\x2\x2\x2\x38\x19D\x3\x2\x2\x2:\x1A0\x3\x2\x2\x2<\x1A2\x3"+
		"\x2\x2\x2>\x1A8\x3\x2\x2\x2@\x1B4\x3\x2\x2\x2\x42\x1B9\x3\x2\x2\x2\x44"+
		"\x1BC\x3\x2\x2\x2\x46\x1C5\x3\x2\x2\x2H\x1C9\x3\x2\x2\x2J\x1CB\x3\x2\x2"+
		"\x2L\x1CF\x3\x2\x2\x2N\x1D4\x3\x2\x2\x2P\x1D9\x3\x2\x2\x2R\x1DC\x3\x2"+
		"\x2\x2T\x1DF\x3\x2\x2\x2V\x1E3\x3\x2\x2\x2X\x1EE\x3\x2\x2\x2Z\x1F5\x3"+
		"\x2\x2\x2\\\x1FA\x3\x2\x2\x2^\x1FC\x3\x2\x2\x2`\x1FE\x3\x2\x2\x2\x62\x210"+
		"\x3\x2\x2\x2\x64\x212\x3\x2\x2\x2\x66\x216\x3\x2\x2\x2h\x218\x3\x2\x2"+
		"\x2j\x224\x3\x2\x2\x2l\x229\x3\x2\x2\x2n\x22F\x3\x2\x2\x2p\x233\x3\x2"+
		"\x2\x2r\x238\x3\x2\x2\x2t\x23A\x3\x2\x2\x2v\x23E\x3\x2\x2\x2x\x240\x3"+
		"\x2\x2\x2z\x248\x3\x2\x2\x2|\x24B\x3\x2\x2\x2~\x24F\x3\x2\x2\x2\x80\x258"+
		"\x3\x2\x2\x2\x82\x266\x3\x2\x2\x2\x84\x288\x3\x2\x2\x2\x86\x28A\x3\x2"+
		"\x2\x2\x88\x28D\x3\x2\x2\x2\x8A\x2CE\x3\x2\x2\x2\x8C\x312\x3\x2\x2\x2"+
		"\x8E\x31A\x3\x2\x2\x2\x90\x322\x3\x2\x2\x2\x92\x32B\x3\x2\x2\x2\x94\x32D"+
		"\x3\x2\x2\x2\x96\x32F\x3\x2\x2\x2\x98\x334\x3\x2\x2\x2\x9A\x336\x3\x2"+
		"\x2\x2\x9C\x338\x3\x2\x2\x2\x9E\x33A\x3\x2\x2\x2\xA0\x340\x3\x2\x2\x2"+
		"\xA2\x342\x3\x2\x2\x2\xA4\x344\x3\x2\x2\x2\xA6\x346\x3\x2\x2\x2\xA8\x348"+
		"\x3\x2\x2\x2\xAA\x34A\x3\x2\x2\x2\xAC\x34C\x3\x2\x2\x2\xAE\x34E\x3\x2"+
		"\x2\x2\xB0\xB1\x5\x4\x3\x2\xB1\xB5\x5\x6\x4\x2\xB2\xB4\x5\b\x5\x2\xB3"+
		"\xB2\x3\x2\x2\x2\xB4\xB7\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2"+
		"\x2\x2\xB6\xB9\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\xBA\x5\n\x6\x2\xB9"+
		"\xB8\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBE\x3\x2\x2\x2\xBB\xBD\x5\xE"+
		"\b\x2\xBC\xBB\x3\x2\x2\x2\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE"+
		"\xBF\x3\x2\x2\x2\xBF\x3\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1\xC2\a\x3\x2"+
		"\x2\xC2\xC3\x5\x8CG\x2\xC3\xC4\a\x33\x2\x2\xC4\x5\x3\x2\x2\x2\xC5\xC6"+
		"\a\x4\x2\x2\xC6\xC7\x5\x90I\x2\xC7\xC8\a\x10\x2\x2\xC8\xC9\x5j\x36\x2"+
		"\xC9\xCA\x3\x2\x2\x2\xCA\xCB\a\x33\x2\x2\xCB\a\x3\x2\x2\x2\xCC\xCD\a\x5"+
		"\x2\x2\xCD\xCE\x5\x8CG\x2\xCE\xCF\a\x33\x2\x2\xCF\xD9\x3\x2\x2\x2\xD0"+
		"\xD1\a\x5\x2\x2\xD1\xD2\a\x4\x2\x2\xD2\xD4\x5\x8CG\x2\xD3\xD5\x5\x90I"+
		"\x2\xD4\xD3\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD7"+
		"\a\x33\x2\x2\xD7\xD9\x3\x2\x2\x2\xD8\xCC\x3\x2\x2\x2\xD8\xD0\x3\x2\x2"+
		"\x2\xD9\t\x3\x2\x2\x2\xDA\xDC\a\a\x2\x2\xDB\xDD\x5\x90I\x2\xDC\xDB\x3"+
		"\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xE1\x3\x2\x2\x2\xDE\xE0\x5\f\a\x2\xDF"+
		"\xDE\x3\x2\x2\x2\xE0\xE3\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2"+
		"\x2\x2\xE2\xE4\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE5\a\xF\x2\x2\xE5"+
		"\xE6\a\a\x2\x2\xE6\v\x3\x2\x2\x2\xE7\xE8\x5j\x36\x2\xE8\xEB\x5\x90I\x2"+
		"\xE9\xEA\a\x37\x2\x2\xEA\xEC\x5\x8A\x46\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC"+
		"\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEE\a\x33\x2\x2\xEE\xFB\x3\x2\x2"+
		"\x2\xEF\xF0\a\a\x2\x2\xF0\xF4\x5\x90I\x2\xF1\xF3\x5\f\a\x2\xF2\xF1\x3"+
		"\x2\x2\x2\xF3\xF6\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2"+
		"\xF5\xF7\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF7\xF8\a\xF\x2\x2\xF8\xF9\a"+
		"\a\x2\x2\xF9\xFB\x3\x2\x2\x2\xFA\xE7\x3\x2\x2\x2\xFA\xEF\x3\x2\x2\x2\xFB"+
		"\r\x3\x2\x2\x2\xFC\xFF\x5\x10\t\x2\xFD\xFF\x5T+\x2\xFE\xFC\x3\x2\x2\x2"+
		"\xFE\xFD\x3\x2\x2\x2\xFF\xF\x3\x2\x2\x2\x100\x101\x5\x12\n\x2\x101\x102"+
		"\x5\x18\r\x2\x102\x103\a\xF\x2\x2\x103\x104\a\t\x2\x2\x104\x11\x3\x2\x2"+
		"\x2\x105\x106\a\t\x2\x2\x106\x107\x5v<\x2\x107\x108\x5\x90I\x2\x108\x10A"+
		"\a\x42\x2\x2\x109\x10B\x5\x14\v\x2\x10A\x109\x3\x2\x2\x2\x10A\x10B\x3"+
		"\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10D\a\x43\x2\x2\x10D\x13\x3\x2\x2"+
		"\x2\x10E\x113\x5\x16\f\x2\x10F\x110\a\x36\x2\x2\x110\x112\x5\x16\f\x2"+
		"\x111\x10F\x3\x2\x2\x2\x112\x115\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x113"+
		"\x114\x3\x2\x2\x2\x114\x15\x3\x2\x2\x2\x115\x113\x3\x2\x2\x2\x116\x117"+
		"\x5j\x36\x2\x117\x11A\x5\x90I\x2\x118\x119\a\x37\x2\x2\x119\x11B\x5\x8A"+
		"\x46\x2\x11A\x118\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x17\x3\x2\x2"+
		"\x2\x11C\x11E\x5\x1A\xE\x2\x11D\x11C\x3\x2\x2\x2\x11E\x121\x3\x2\x2\x2"+
		"\x11F\x11D\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x19\x3\x2\x2\x2\x121"+
		"\x11F\x3\x2\x2\x2\x122\x123\x5\x1C\xF\x2\x123\x124\a\x33\x2\x2\x124\x12F"+
		"\x3\x2\x2\x2\x125\x126\x5\x1E\x10\x2\x126\x127\a\x33\x2\x2\x127\x12F\x3"+
		"\x2\x2\x2\x128\x129\x5 \x11\x2\x129\x12A\a\x33\x2\x2\x12A\x12F\x3\x2\x2"+
		"\x2\x12B\x12F\x5\"\x12\x2\x12C\x12F\x5,\x17\x2\x12D\x12F\x5> \x2\x12E"+
		"\x122\x3\x2\x2\x2\x12E\x125\x3\x2\x2\x2\x12E\x128\x3\x2\x2\x2\x12E\x12B"+
		"\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12E\x12D\x3\x2\x2\x2\x12F\x1B\x3\x2"+
		"\x2\x2\x130\x131\x5j\x36\x2\x131\x134\x5\x90I\x2\x132\x133\a\x37\x2\x2"+
		"\x133\x135\x5\x8A\x46\x2\x134\x132\x3\x2\x2\x2\x134\x135\x3\x2\x2\x2\x135"+
		"\x1D\x3\x2\x2\x2\x136\x137\a\n\x2\x2\x137\x138\x5\x8A\x46\x2\x138\x1F"+
		"\x3\x2\x2\x2\x139\x13A\x5\x8A\x46\x2\x13A!\x3\x2\x2\x2\x13B\x13C\x5$\x13"+
		"\x2\x13C\x142\x5\x18\r\x2\x13D\x13E\x5&\x14\x2\x13E\x13F\x5\x18\r\x2\x13F"+
		"\x141\x3\x2\x2\x2\x140\x13D\x3\x2\x2\x2\x141\x144\x3\x2\x2\x2\x142\x140"+
		"\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x148\x3\x2\x2\x2\x144\x142\x3"+
		"\x2\x2\x2\x145\x146\x5(\x15\x2\x146\x147\x5\x18\r\x2\x147\x149\x3\x2\x2"+
		"\x2\x148\x145\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2"+
		"\x14A\x14B\x5*\x16\x2\x14B#\x3\x2\x2\x2\x14C\x14D\a\x13\x2\x2\x14D\x14E"+
		"\a\x42\x2\x2\x14E\x14F\x5\x8A\x46\x2\x14F\x150\a\x43\x2\x2\x150%\x3\x2"+
		"\x2\x2\x151\x152\a\x14\x2\x2\x152\x153\a\x13\x2\x2\x153\x154\a\x42\x2"+
		"\x2\x154\x155\x5\x8A\x46\x2\x155\x156\a\x43\x2\x2\x156\'\x3\x2\x2\x2\x157"+
		"\x158\a\x14\x2\x2\x158)\x3\x2\x2\x2\x159\x15A\a\xF\x2\x2\x15A\x15B\a\x13"+
		"\x2\x2\x15B+\x3\x2\x2\x2\x15C\x15D\x5.\x18\x2\x15D\x15E\x5\x18\r\x2\x15E"+
		"\x15F\x5\x30\x19\x2\x15F-\x3\x2\x2\x2\x160\x161\a\x15\x2\x2\x161\x162"+
		"\a\x42\x2\x2\x162\x164\x5\x32\x1A\x2\x163\x165\x5\x38\x1D\x2\x164\x163"+
		"\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165\x167\x3\x2\x2\x2\x166\x168\x5"+
		":\x1E\x2\x167\x166\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168\x169\x3\x2\x2"+
		"\x2\x169\x16A\a\x43\x2\x2\x16A/\x3\x2\x2\x2\x16B\x16C\a\xF\x2\x2\x16C"+
		"\x16D\a\x15\x2\x2\x16D\x31\x3\x2\x2\x2\x16E\x173\x5\x34\x1B\x2\x16F\x170"+
		"\aK\x2\x2\x170\x172\x5\x34\x1B\x2\x171\x16F\x3\x2\x2\x2\x172\x175\x3\x2"+
		"\x2\x2\x173\x171\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x33\x3\x2\x2\x2"+
		"\x175\x173\x3\x2\x2\x2\x176\x178\x5j\x36\x2\x177\x176\x3\x2\x2\x2\x177"+
		"\x178\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17A\x5\x90I\x2\x17A\x17B"+
		"\a\x34\x2\x2\x17B\x17D\x3\x2\x2\x2\x17C\x177\x3\x2\x2\x2\x17C\x17D\x3"+
		"\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E\x17F\x5\x36\x1C\x2\x17F\x35\x3\x2"+
		"\x2\x2\x180\x181\b\x1C\x1\x2\x181\x182\a\x31\x2\x2\x182\x183\a\x42\x2"+
		"\x2\x183\x184\x5j\x36\x2\x184\x185\a\x43\x2\x2\x185\x18B\x3\x2\x2\x2\x186"+
		"\x188\x5\x90I\x2\x187\x189\x5\x64\x33\x2\x188\x187\x3\x2\x2\x2\x188\x189"+
		"\x3\x2\x2\x2\x189\x18B\x3\x2\x2\x2\x18A\x180\x3\x2\x2\x2\x18A\x186\x3"+
		"\x2\x2\x2\x18B\x19A\x3\x2\x2\x2\x18C\x18D\f\x4\x2\x2\x18D\x18E\a\x35\x2"+
		"\x2\x18E\x190\x5\x90I\x2\x18F\x191\x5\x64\x33\x2\x190\x18F\x3\x2\x2\x2"+
		"\x190\x191\x3\x2\x2\x2\x191\x199\x3\x2\x2\x2\x192\x193\f\x3\x2\x2\x193"+
		"\x195\a\x42\x2\x2\x194\x196\x5x=\x2\x195\x194\x3\x2\x2\x2\x195\x196\x3"+
		"\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x199\a\x43\x2\x2\x198\x18C\x3\x2"+
		"\x2\x2\x198\x192\x3\x2\x2\x2\x199\x19C\x3\x2\x2\x2\x19A\x198\x3\x2\x2"+
		"\x2\x19A\x19B\x3\x2\x2\x2\x19B\x37\x3\x2\x2\x2\x19C\x19A\x3\x2\x2\x2\x19D"+
		"\x19E\a\x17\x2\x2\x19E\x19F\x5\x8A\x46\x2\x19F\x39\x3\x2\x2\x2\x1A0\x1A1"+
		"\x5<\x1F\x2\x1A1;\x3\x2\x2\x2\x1A2\x1A3\a\x33\x2\x2\x1A3\x1A4\a\x1A\x2"+
		"\x2\x1A4\x1A5\x5\x90I\x2\x1A5\x1A6\a\x37\x2\x2\x1A6\x1A7\x5\xACW\x2\x1A7"+
		"=\x3\x2\x2\x2\x1A8\x1AC\x5@!\x2\x1A9\x1AB\x5\x44#\x2\x1AA\x1A9\x3\x2\x2"+
		"\x2\x1AB\x1AE\x3\x2\x2\x2\x1AC\x1AA\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2"+
		"\x1AD\x1B0\x3\x2\x2\x2\x1AE\x1AC\x3\x2\x2\x2\x1AF\x1B1\x5P)\x2\x1B0\x1AF"+
		"\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B2\x3\x2\x2\x2\x1B2\x1B3\x5"+
		"\x42\"\x2\x1B3?\x3\x2\x2\x2\x1B4\x1B5\a\v\x2\x2\x1B5\x1B6\a\x42\x2\x2"+
		"\x1B6\x1B7\x5\x8A\x46\x2\x1B7\x1B8\a\x43\x2\x2\x1B8\x41\x3\x2\x2\x2\x1B9"+
		"\x1BA\a\xF\x2\x2\x1BA\x1BB\a\v\x2\x2\x1BB\x43\x3\x2\x2\x2\x1BC\x1BD\x5"+
		"\x46$\x2\x1BD\x1BE\x5\x18\r\x2\x1BE\x45\x3\x2\x2\x2\x1BF\x1C1\x5H%\x2"+
		"\x1C0\x1BF\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C0\x3\x2\x2\x2\x1C2"+
		"\x1C3\x3\x2\x2\x2\x1C3\x1C6\x3\x2\x2\x2\x1C4\x1C6\x5N(\x2\x1C5\x1C0\x3"+
		"\x2\x2\x2\x1C5\x1C4\x3\x2\x2\x2\x1C6G\x3\x2\x2\x2\x1C7\x1CA\x5J&\x2\x1C8"+
		"\x1CA\x5L\'\x2\x1C9\x1C7\x3\x2\x2\x2\x1C9\x1C8\x3\x2\x2\x2\x1CAI\x3\x2"+
		"\x2\x2\x1CB\x1CC\a\f\x2\x2\x1CC\x1CD\x5x=\x2\x1CD\x1CE\a\x34\x2\x2\x1CE"+
		"K\x3\x2\x2\x2\x1CF\x1D0\a\r\x2\x2\x1D0\x1D1\a/\x2\x2\x1D1\x1D2\x5h\x35"+
		"\x2\x1D2\x1D3\a\x34\x2\x2\x1D3M\x3\x2\x2\x2\x1D4\x1D5\a\r\x2\x2\x1D5\x1D6"+
		"\a\x30\x2\x2\x1D6\x1D7\x5j\x36\x2\x1D7\x1D8\a\x34\x2\x2\x1D8O\x3\x2\x2"+
		"\x2\x1D9\x1DA\x5R*\x2\x1DA\x1DB\x5\x18\r\x2\x1DBQ\x3\x2\x2\x2\x1DC\x1DD"+
		"\a\x32\x2\x2\x1DD\x1DE\a\x34\x2\x2\x1DES\x3\x2\x2\x2\x1DF\x1E0\x5V,\x2"+
		"\x1E0\x1E1\x5X-\x2\x1E1\x1E2\ax\x2\x2\x1E2U\x3\x2\x2\x2\x1E3\x1E4\a\b"+
		"\x2\x2\x1E4\x1E5\x5\x90I\x2\x1E5\x1E7\a\x42\x2\x2\x1E6\x1E8\x5\x14\v\x2"+
		"\x1E7\x1E6\x3\x2\x2\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9"+
		"\x1EA\a\x43\x2\x2\x1EAW\x3\x2\x2\x2\x1EB\x1ED\x5Z.\x2\x1EC\x1EB\x3\x2"+
		"\x2\x2\x1ED\x1F0\x3\x2\x2\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2"+
		"\x2\x1EFY\x3\x2\x2\x2\x1F0\x1EE\x3\x2\x2\x2\x1F1\x1F4\x5\\/\x2\x1F2\x1F4"+
		"\x5`\x31\x2\x1F3\x1F1\x3\x2\x2\x2\x1F3\x1F2\x3\x2\x2\x2\x1F4\x1F7\x3\x2"+
		"\x2\x2\x1F5\x1F3\x3\x2\x2\x2\x1F5\x1F6\x3\x2\x2\x2\x1F6\x1F8\x3\x2\x2"+
		"\x2\x1F7\x1F5\x3\x2\x2\x2\x1F8\x1F9\x5^\x30\x2\x1F9[\x3\x2\x2\x2\x1FA"+
		"\x1FB\az\x2\x2\x1FB]\x3\x2\x2\x2\x1FC\x1FD\t\x2\x2\x2\x1FD_\x3\x2\x2\x2"+
		"\x1FE\x200\a}\x2\x2\x1FF\x201\x5\x62\x32\x2\x200\x1FF\x3\x2\x2\x2\x200"+
		"\x201\x3\x2\x2\x2\x201\x202\x3\x2\x2\x2\x202\x203\a~\x2\x2\x203\x61\x3"+
		"\x2\x2\x2\x204\x211\x5\x1C\xF\x2\x205\x211\x5 \x11\x2\x206\x211\x5$\x13"+
		"\x2\x207\x211\x5&\x14\x2\x208\x211\x5(\x15\x2\x209\x211\x5*\x16\x2\x20A"+
		"\x211\x5.\x18\x2\x20B\x211\x5\x30\x19\x2\x20C\x211\x5@!\x2\x20D\x211\x5"+
		"\x42\"\x2\x20E\x211\x5\x46$\x2\x20F\x211\x5R*\x2\x210\x204\x3\x2\x2\x2"+
		"\x210\x205\x3\x2\x2\x2\x210\x206\x3\x2\x2\x2\x210\x207\x3\x2\x2\x2\x210"+
		"\x208\x3\x2\x2\x2\x210\x209\x3\x2\x2\x2\x210\x20A\x3\x2\x2\x2\x210\x20B"+
		"\x3\x2\x2\x2\x210\x20C\x3\x2\x2\x2\x210\x20D\x3\x2\x2\x2\x210\x20E\x3"+
		"\x2\x2\x2\x210\x20F\x3\x2\x2\x2\x211\x63\x3\x2\x2\x2\x212\x213\aL\x2\x2"+
		"\x213\x214\x5h\x35\x2\x214\x215\aM\x2\x2\x215\x65\x3\x2\x2\x2\x216\x217"+
		"\t\x3\x2\x2\x217g\x3\x2\x2\x2\x218\x21D\x5j\x36\x2\x219\x21A\a\x36\x2"+
		"\x2\x21A\x21C\x5j\x36\x2\x21B\x219\x3\x2\x2\x2\x21C\x21F\x3\x2\x2\x2\x21D"+
		"\x21B\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21Ei\x3\x2\x2\x2\x21F\x21D\x3"+
		"\x2\x2\x2\x220\x225\x5l\x37\x2\x221\x225\x5n\x38\x2\x222\x225\x5p\x39"+
		"\x2\x223\x225\x5r:\x2\x224\x220\x3\x2\x2\x2\x224\x221\x3\x2\x2\x2\x224"+
		"\x222\x3\x2\x2\x2\x224\x223\x3\x2\x2\x2\x225k\x3\x2\x2\x2\x226\x22A\x5"+
		"n\x38\x2\x227\x22A\x5p\x39\x2\x228\x22A\x5r:\x2\x229\x226\x3\x2\x2\x2"+
		"\x229\x227\x3\x2\x2\x2\x229\x228\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B"+
		"\x22C\x5|?\x2\x22Cm\x3\x2\x2\x2\x22D\x230\x5p\x39\x2\x22E\x230\x5r:\x2"+
		"\x22F\x22D\x3\x2\x2\x2\x22F\x22E\x3\x2\x2\x2\x230\x231\x3\x2\x2\x2\x231"+
		"\x232\aP\x2\x2\x232o\x3\x2\x2\x2\x233\x234\x5\x8CG\x2\x234\x235\x5\x64"+
		"\x33\x2\x235q\x3\x2\x2\x2\x236\x239\x5\x8CG\x2\x237\x239\x5\x66\x34\x2"+
		"\x238\x236\x3\x2\x2\x2\x238\x237\x3\x2\x2\x2\x239s\x3\x2\x2\x2\x23A\x23B"+
		"\a\xE\x2\x2\x23Bu\x3\x2\x2\x2\x23C\x23F\x5j\x36\x2\x23D\x23F\x5t;\x2\x23E"+
		"\x23C\x3\x2\x2\x2\x23E\x23D\x3\x2\x2\x2\x23Fw\x3\x2\x2\x2\x240\x245\x5"+
		"\x8A\x46\x2\x241\x242\a\x36\x2\x2\x242\x244\x5\x8A\x46\x2\x243\x241\x3"+
		"\x2\x2\x2\x244\x247\x3\x2\x2\x2\x245\x243\x3\x2\x2\x2\x245\x246\x3\x2"+
		"\x2\x2\x246y\x3\x2\x2\x2\x247\x245\x3\x2\x2\x2\x248\x249\x5\x8A\x46\x2"+
		"\x249{\x3\x2\x2\x2\x24A\x24C\x5~@\x2\x24B\x24A\x3\x2\x2\x2\x24C\x24D\x3"+
		"\x2\x2\x2\x24D\x24B\x3\x2\x2\x2\x24D\x24E\x3\x2\x2\x2\x24E}\x3\x2\x2\x2"+
		"\x24F\x253\a\x44\x2\x2\x250\x252\a\x36\x2\x2\x251\x250\x3\x2\x2\x2\x252"+
		"\x255\x3\x2\x2\x2\x253\x251\x3\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254\x256"+
		"\x3\x2\x2\x2\x255\x253\x3\x2\x2\x2\x256\x257\a\x45\x2\x2\x257\x7F\x3\x2"+
		"\x2\x2\x258\x25A\x5\x90I\x2\x259\x25B\x5\x82\x42\x2\x25A\x259\x3\x2\x2"+
		"\x2\x25A\x25B\x3\x2\x2\x2\x25B\x263\x3\x2\x2\x2\x25C\x25D\a\x35\x2\x2"+
		"\x25D\x25F\x5\x90I\x2\x25E\x260\x5\x82\x42\x2\x25F\x25E\x3\x2\x2\x2\x25F"+
		"\x260\x3\x2\x2\x2\x260\x262\x3\x2\x2\x2\x261\x25C\x3\x2\x2\x2\x262\x265"+
		"\x3\x2\x2\x2\x263\x261\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2\x264\x81\x3\x2"+
		"\x2\x2\x265\x263\x3\x2\x2\x2\x266\x26A\aL\x2\x2\x267\x269\a\x36\x2\x2"+
		"\x268\x267\x3\x2\x2\x2\x269\x26C\x3\x2\x2\x2\x26A\x268\x3\x2\x2\x2\x26A"+
		"\x26B\x3\x2\x2\x2\x26B\x26D\x3\x2\x2\x2\x26C\x26A\x3\x2\x2\x2\x26D\x26E"+
		"\aM\x2\x2\x26E\x83\x3\x2\x2\x2\x26F\x278\a\x42\x2\x2\x270\x275\x5\x86"+
		"\x44\x2\x271\x272\a\x36\x2\x2\x272\x274\x5\x86\x44\x2\x273\x271\x3\x2"+
		"\x2\x2\x274\x277\x3\x2\x2\x2\x275\x273\x3\x2\x2\x2\x275\x276\x3\x2\x2"+
		"\x2\x276\x279\x3\x2\x2\x2\x277\x275\x3\x2\x2\x2\x278\x270\x3\x2\x2\x2"+
		"\x278\x279\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27A\x289\a\x43\x2\x2\x27B"+
		"\x284\a\x42\x2\x2\x27C\x281\x5\x88\x45\x2\x27D\x27E\a\x36\x2\x2\x27E\x280"+
		"\x5\x88\x45\x2\x27F\x27D\x3\x2\x2\x2\x280\x283\x3\x2\x2\x2\x281\x27F\x3"+
		"\x2\x2\x2\x281\x282\x3\x2\x2\x2\x282\x285\x3\x2\x2\x2\x283\x281\x3\x2"+
		"\x2\x2\x284\x27C\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285\x286\x3\x2\x2"+
		"\x2\x286\x289\a\x43\x2\x2\x287\x289\x5\x88\x45\x2\x288\x26F\x3\x2\x2\x2"+
		"\x288\x27B\x3\x2\x2\x2\x288\x287\x3\x2\x2\x2\x289\x85\x3\x2\x2\x2\x28A"+
		"\x28B\x5j\x36\x2\x28B\x28C\x5\x90I\x2\x28C\x87\x3\x2\x2\x2\x28D\x28E\x5"+
		"\x90I\x2\x28E\x89\x3\x2\x2\x2\x28F\x290\b\x46\x1\x2\x290\x291\a\x42\x2"+
		"\x2\x291\x292\x5j\x36\x2\x292\x293\a\x43\x2\x2\x293\x294\x5\x8A\x46\x13"+
		"\x294\x2CF\x3\x2\x2\x2\x295\x296\t\x4\x2\x2\x296\x2CF\x5\x8A\x46\x12\x297"+
		"\x298\x5\x84\x43\x2\x298\x299\aJ\x2\x2\x299\x29A\x5\x8A\x46\x3\x29A\x2CF"+
		"\x3\x2\x2\x2\x29B\x2CF\a-\x2\x2\x29C\x2CF\x5\x92J\x2\x29D\x29E\a\x31\x2"+
		"\x2\x29E\x29F\a\x42\x2\x2\x29F\x2A0\a\xE\x2\x2\x2A0\x2CF\a\x43\x2\x2\x2A1"+
		"\x2A2\a\x31\x2\x2\x2A2\x2A3\a\x42\x2\x2\x2A3\x2A4\x5\x80\x41\x2\x2A4\x2A5"+
		"\a\x43\x2\x2\x2A5\x2CF\x3\x2\x2\x2\x2A6\x2A7\a\x31\x2\x2\x2A7\x2A8\a\x42"+
		"\x2\x2\x2A8\x2A9\x5j\x36\x2\x2A9\x2AA\a\x43\x2\x2\x2AA\x2CF\x3\x2\x2\x2"+
		"\x2AB\x2AC\a\x32\x2\x2\x2AC\x2AD\a\x42\x2\x2\x2AD\x2AE\x5j\x36\x2\x2AE"+
		"\x2AF\a\x43\x2\x2\x2AF\x2CF\x3\x2\x2\x2\x2B0\x2B1\a.\x2\x2\x2B1\x2B2\x5"+
		"j\x36\x2\x2B2\x2B4\a\x42\x2\x2\x2B3\x2B5\x5x=\x2\x2B4\x2B3\x3\x2\x2\x2"+
		"\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x2B7\a\x43\x2\x2\x2B7"+
		"\x2CF\x3\x2\x2\x2\x2B8\x2BA\x5\x90I\x2\x2B9\x2BB\x5\x64\x33\x2\x2BA\x2B9"+
		"\x3\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2CF\x3\x2\x2\x2\x2BC\x2BD\a\x16"+
		"\x2\x2\x2BD\x2BE\a\x42\x2\x2\x2BE\x2C0\x5\x32\x1A\x2\x2BF\x2C1\x5\x38"+
		"\x1D\x2\x2C0\x2BF\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C2\x3\x2\x2"+
		"\x2\x2C2\x2C3\a\x43\x2\x2\x2C3\x2CF\x3\x2\x2\x2\x2C4\x2C5\a\x42\x2\x2"+
		"\x2C5\x2C6\x5\x8A\x46\x2\x2C6\x2C7\a\x43\x2\x2\x2C7\x2CF\x3\x2\x2\x2\x2C8"+
		"\x2C9\x5\x66\x34\x2\x2C9\x2CA\a\x35\x2\x2\x2CA\x2CC\x5\x90I\x2\x2CB\x2CD"+
		"\x5\x64\x33\x2\x2CC\x2CB\x3\x2\x2\x2\x2CC\x2CD\x3\x2\x2\x2\x2CD\x2CF\x3"+
		"\x2\x2\x2\x2CE\x28F\x3\x2\x2\x2\x2CE\x295\x3\x2\x2\x2\x2CE\x297\x3\x2"+
		"\x2\x2\x2CE\x29B\x3\x2\x2\x2\x2CE\x29C\x3\x2\x2\x2\x2CE\x29D\x3\x2\x2"+
		"\x2\x2CE\x2A1\x3\x2\x2\x2\x2CE\x2A6\x3\x2\x2\x2\x2CE\x2AB\x3\x2\x2\x2"+
		"\x2CE\x2B0\x3\x2\x2\x2\x2CE\x2B8\x3\x2\x2\x2\x2CE\x2BC\x3\x2\x2\x2\x2CE"+
		"\x2C4\x3\x2\x2\x2\x2CE\x2C8\x3\x2\x2\x2\x2CF\x30F\x3\x2\x2\x2\x2D0\x2D1"+
		"\f\x10\x2\x2\x2D1\x2D2\t\x5\x2\x2\x2D2\x30E\x5\x8A\x46\x11\x2D3\x2D4\f"+
		"\xF\x2\x2\x2D4\x2D5\t\x6\x2\x2\x2D5\x30E\x5\x8A\x46\x10\x2D6\x2D7\f\xE"+
		"\x2\x2\x2D7\x2D8\t\a\x2\x2\x2D8\x30E\x5\x8A\x46\xF\x2D9\x2DA\f\f\x2\x2"+
		"\x2DA\x2DB\t\b\x2\x2\x2DB\x30E\x5\x8A\x46\r\x2DC\x2DD\f\v\x2\x2\x2DD\x2DE"+
		"\a[\x2\x2\x2DE\x30E\x5\x8A\x46\f\x2DF\x2E0\f\n\x2\x2\x2E0\x2E1\a\\\x2"+
		"\x2\x2E1\x30E\x5\x8A\x46\v\x2E2\x2E3\f\t\x2\x2\x2E3\x2E4\a]\x2\x2\x2E4"+
		"\x30E\x5\x8A\x46\n\x2E5\x2E6\f\b\x2\x2\x2E6\x2E7\a^\x2\x2\x2E7\x30E\x5"+
		"\x8A\x46\t\x2E8\x2E9\f\a\x2\x2\x2E9\x2EA\a_\x2\x2\x2EA\x30E\x5\x8A\x46"+
		"\b\x2EB\x2EC\f\x6\x2\x2\x2EC\x2ED\a`\x2\x2\x2ED\x30E\x5\x8A\x46\a\x2EE"+
		"\x2EF\f\x5\x2\x2\x2EF\x2F0\aP\x2\x2\x2F0\x2F1\x5\x8A\x46\x2\x2F1\x2F2"+
		"\a\x34\x2\x2\x2F2\x2F3\x5\x8A\x46\x6\x2F3\x30E\x3\x2\x2\x2\x2F4\x2F5\f"+
		"\x4\x2\x2\x2F5\x2F6\t\t\x2\x2\x2F6\x30E\x5\x8A\x46\x5\x2F7\x2F8\f\x17"+
		"\x2\x2\x2F8\x2F9\a\x44\x2\x2\x2F9\x2FA\x5x=\x2\x2FA\x2FB\a\x45\x2\x2\x2FB"+
		"\x30E\x3\x2\x2\x2\x2FC\x2FD\f\x16\x2\x2\x2FD\x2FF\a\x42\x2\x2\x2FE\x300"+
		"\x5x=\x2\x2FF\x2FE\x3\x2\x2\x2\x2FF\x300\x3\x2\x2\x2\x300\x301\x3\x2\x2"+
		"\x2\x301\x30E\a\x43\x2\x2\x302\x303\f\x14\x2\x2\x303\x304\a\x35\x2\x2"+
		"\x304\x306\x5\x90I\x2\x305\x307\x5\x64\x33\x2\x306\x305\x3\x2\x2\x2\x306"+
		"\x307\x3\x2\x2\x2\x307\x30E\x3\x2\x2\x2\x308\x309\f\x11\x2\x2\x309\x30E"+
		"\t\n\x2\x2\x30A\x30B\f\r\x2\x2\x30B\x30C\t\v\x2\x2\x30C\x30E\x5j\x36\x2"+
		"\x30D\x2D0\x3\x2\x2\x2\x30D\x2D3\x3\x2\x2\x2\x30D\x2D6\x3\x2\x2\x2\x30D"+
		"\x2D9\x3\x2\x2\x2\x30D\x2DC\x3\x2\x2\x2\x30D\x2DF\x3\x2\x2\x2\x30D\x2E2"+
		"\x3\x2\x2\x2\x30D\x2E5\x3\x2\x2\x2\x30D\x2E8\x3\x2\x2\x2\x30D\x2EB\x3"+
		"\x2\x2\x2\x30D\x2EE\x3\x2\x2\x2\x30D\x2F4\x3\x2\x2\x2\x30D\x2F7\x3\x2"+
		"\x2\x2\x30D\x2FC\x3\x2\x2\x2\x30D\x302\x3\x2\x2\x2\x30D\x308\x3\x2\x2"+
		"\x2\x30D\x30A\x3\x2\x2\x2\x30E\x311\x3\x2\x2\x2\x30F\x30D\x3\x2\x2\x2"+
		"\x30F\x310\x3\x2\x2\x2\x310\x8B\x3\x2\x2\x2\x311\x30F\x3\x2\x2\x2\x312"+
		"\x317\x5\x90I\x2\x313\x314\a\x35\x2\x2\x314\x316\x5\x90I\x2\x315\x313"+
		"\x3\x2\x2\x2\x316\x319\x3\x2\x2\x2\x317\x315\x3\x2\x2\x2\x317\x318\x3"+
		"\x2\x2\x2\x318\x8D\x3\x2\x2\x2\x319\x317\x3\x2\x2\x2\x31A\x31F\x5\x90"+
		"I\x2\x31B\x31C\a\x36\x2\x2\x31C\x31E\x5\x90I\x2\x31D\x31B\x3\x2\x2\x2"+
		"\x31E\x321\x3\x2\x2\x2\x31F\x31D\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320"+
		"\x8F\x3\x2\x2\x2\x321\x31F\x3\x2\x2\x2\x322\x323\a\x62\x2\x2\x323\x91"+
		"\x3\x2\x2\x2\x324\x32C\x5\x94K\x2\x325\x32C\x5\x96L\x2\x326\x32C\x5\x98"+
		"M\x2\x327\x32C\x5\xA0Q\x2\x328\x32C\x5\xAAV\x2\x329\x32C\x5\xACW\x2\x32A"+
		"\x32C\x5\xAEX\x2\x32B\x324\x3\x2\x2\x2\x32B\x325\x3\x2\x2\x2\x32B\x326"+
		"\x3\x2\x2\x2\x32B\x327\x3\x2\x2\x2\x32B\x328\x3\x2\x2\x2\x32B\x329\x3"+
		"\x2\x2\x2\x32B\x32A\x3\x2\x2\x2\x32C\x93\x3\x2\x2\x2\x32D\x32E\a\x1B\x2"+
		"\x2\x32E\x95\x3\x2\x2\x2\x32F\x330\t\f\x2\x2\x330\x97\x3\x2\x2\x2\x331"+
		"\x335\x5\x9AN\x2\x332\x335\x5\x9CO\x2\x333\x335\x5\x9EP\x2\x334\x331\x3"+
		"\x2\x2\x2\x334\x332\x3\x2\x2\x2\x334\x333\x3\x2\x2\x2\x335\x99\x3\x2\x2"+
		"\x2\x336\x337\a\x63\x2\x2\x337\x9B\x3\x2\x2\x2\x338\x339\a\x64\x2\x2\x339"+
		"\x9D\x3\x2\x2\x2\x33A\x33B\a\x65\x2\x2\x33B\x9F\x3\x2\x2\x2\x33C\x341"+
		"\x5\xA4S\x2\x33D\x341\x5\xA2R\x2\x33E\x341\x5\xA6T\x2\x33F\x341\x5\xA8"+
		"U\x2\x340\x33C\x3\x2\x2\x2\x340\x33D\x3\x2\x2\x2\x340\x33E\x3\x2\x2\x2"+
		"\x340\x33F\x3\x2\x2\x2\x341\xA1\x3\x2\x2\x2\x342\x343\a\x66\x2\x2\x343"+
		"\xA3\x3\x2\x2\x2\x344\x345\ag\x2\x2\x345\xA5\x3\x2\x2\x2\x346\x347\ah"+
		"\x2\x2\x347\xA7\x3\x2\x2\x2\x348\x349\ai\x2\x2\x349\xA9\x3\x2\x2\x2\x34A"+
		"\x34B\aj\x2\x2\x34B\xAB\x3\x2\x2\x2\x34C\x34D\t\r\x2\x2\x34D\xAD\x3\x2"+
		"\x2\x2\x34E\x34F\al\x2\x2\x34F\xAF\x3\x2\x2\x2K\xB5\xB9\xBE\xD4\xD8\xDC"+
		"\xE1\xEB\xF4\xFA\xFE\x10A\x113\x11A\x11F\x12E\x134\x142\x148\x164\x167"+
		"\x173\x177\x17C\x188\x18A\x190\x195\x198\x19A\x1AC\x1B0\x1C2\x1C5\x1C9"+
		"\x1E7\x1EE\x1F3\x1F5\x200\x210\x21D\x224\x229\x22F\x238\x23E\x245\x24D"+
		"\x253\x25A\x25F\x263\x26A\x275\x278\x281\x284\x288\x2B4\x2BA\x2C0\x2CC"+
		"\x2CE\x2FF\x306\x30D\x30F\x317\x31F\x32B\x334\x340";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Compiler
