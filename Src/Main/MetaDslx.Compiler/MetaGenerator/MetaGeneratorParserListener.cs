//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\vyevl5oe.tbp\MetaGeneratorParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Compiler {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MetaGeneratorParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public interface IMetaGeneratorParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMain([NotNull] MetaGeneratorParser.MainContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMain([NotNull] MetaGeneratorParser.MainContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.namespaceDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespaceDeclaration([NotNull] MetaGeneratorParser.NamespaceDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.namespaceDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespaceDeclaration([NotNull] MetaGeneratorParser.NamespaceDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.generatorDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGeneratorDeclaration([NotNull] MetaGeneratorParser.GeneratorDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.generatorDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGeneratorDeclaration([NotNull] MetaGeneratorParser.GeneratorDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>usingNamespaceDeclaration</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.usingDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsingNamespaceDeclaration([NotNull] MetaGeneratorParser.UsingNamespaceDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>usingNamespaceDeclaration</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.usingDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsingNamespaceDeclaration([NotNull] MetaGeneratorParser.UsingNamespaceDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>usingGeneratorDeclaration</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.usingDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsingGeneratorDeclaration([NotNull] MetaGeneratorParser.UsingGeneratorDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>usingGeneratorDeclaration</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.usingDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsingGeneratorDeclaration([NotNull] MetaGeneratorParser.UsingGeneratorDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.configDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConfigDeclaration([NotNull] MetaGeneratorParser.ConfigDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.configDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConfigDeclaration([NotNull] MetaGeneratorParser.ConfigDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>configPropertyDeclaration</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.configProperty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConfigPropertyDeclaration([NotNull] MetaGeneratorParser.ConfigPropertyDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>configPropertyDeclaration</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.configProperty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConfigPropertyDeclaration([NotNull] MetaGeneratorParser.ConfigPropertyDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>configPropertyGroupDeclaration</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.configProperty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConfigPropertyGroupDeclaration([NotNull] MetaGeneratorParser.ConfigPropertyGroupDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>configPropertyGroupDeclaration</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.configProperty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConfigPropertyGroupDeclaration([NotNull] MetaGeneratorParser.ConfigPropertyGroupDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.methodDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDeclaration([NotNull] MetaGeneratorParser.MethodDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.methodDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDeclaration([NotNull] MetaGeneratorParser.MethodDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] MetaGeneratorParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] MetaGeneratorParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.functionSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionSignature([NotNull] MetaGeneratorParser.FunctionSignatureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.functionSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionSignature([NotNull] MetaGeneratorParser.FunctionSignatureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParamList([NotNull] MetaGeneratorParser.ParamListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParamList([NotNull] MetaGeneratorParser.ParamListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] MetaGeneratorParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] MetaGeneratorParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBody([NotNull] MetaGeneratorParser.BodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBody([NotNull] MetaGeneratorParser.BodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] MetaGeneratorParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] MetaGeneratorParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.variableDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationStatement([NotNull] MetaGeneratorParser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.variableDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationStatement([NotNull] MetaGeneratorParser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] MetaGeneratorParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] MetaGeneratorParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] MetaGeneratorParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] MetaGeneratorParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] MetaGeneratorParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] MetaGeneratorParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.ifStatementBegin"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatementBegin([NotNull] MetaGeneratorParser.IfStatementBeginContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.ifStatementBegin"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatementBegin([NotNull] MetaGeneratorParser.IfStatementBeginContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.elseIfStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStatement([NotNull] MetaGeneratorParser.ElseIfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.elseIfStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStatement([NotNull] MetaGeneratorParser.ElseIfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.ifStatementElse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatementElse([NotNull] MetaGeneratorParser.IfStatementElseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.ifStatementElse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatementElse([NotNull] MetaGeneratorParser.IfStatementElseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.ifStatementEnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatementEnd([NotNull] MetaGeneratorParser.IfStatementEndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.ifStatementEnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatementEnd([NotNull] MetaGeneratorParser.IfStatementEndContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.loopStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopStatement([NotNull] MetaGeneratorParser.LoopStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.loopStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopStatement([NotNull] MetaGeneratorParser.LoopStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.loopStatementBegin"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopStatementBegin([NotNull] MetaGeneratorParser.LoopStatementBeginContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.loopStatementBegin"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopStatementBegin([NotNull] MetaGeneratorParser.LoopStatementBeginContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.loopStatementEnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopStatementEnd([NotNull] MetaGeneratorParser.LoopStatementEndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.loopStatementEnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopStatementEnd([NotNull] MetaGeneratorParser.LoopStatementEndContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.loopChain"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopChain([NotNull] MetaGeneratorParser.LoopChainContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.loopChain"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopChain([NotNull] MetaGeneratorParser.LoopChainContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.loopChainItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopChainItem([NotNull] MetaGeneratorParser.LoopChainItemContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.loopChainItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopChainItem([NotNull] MetaGeneratorParser.LoopChainItemContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>loopChainMemberAccessExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.loopChainExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopChainMemberAccessExpression([NotNull] MetaGeneratorParser.LoopChainMemberAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>loopChainMemberAccessExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.loopChainExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopChainMemberAccessExpression([NotNull] MetaGeneratorParser.LoopChainMemberAccessExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>loopChainMethodCallExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.loopChainExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopChainMethodCallExpression([NotNull] MetaGeneratorParser.LoopChainMethodCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>loopChainMethodCallExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.loopChainExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopChainMethodCallExpression([NotNull] MetaGeneratorParser.LoopChainMethodCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>loopChainIdentifierExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.loopChainExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopChainIdentifierExpression([NotNull] MetaGeneratorParser.LoopChainIdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>loopChainIdentifierExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.loopChainExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopChainIdentifierExpression([NotNull] MetaGeneratorParser.LoopChainIdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>loopChainTypeofExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.loopChainExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopChainTypeofExpression([NotNull] MetaGeneratorParser.LoopChainTypeofExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>loopChainTypeofExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.loopChainExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopChainTypeofExpression([NotNull] MetaGeneratorParser.LoopChainTypeofExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.loopWhereExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopWhereExpression([NotNull] MetaGeneratorParser.LoopWhereExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.loopWhereExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopWhereExpression([NotNull] MetaGeneratorParser.LoopWhereExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.loopRunExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopRunExpression([NotNull] MetaGeneratorParser.LoopRunExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.loopRunExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopRunExpression([NotNull] MetaGeneratorParser.LoopRunExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.separatorStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSeparatorStatement([NotNull] MetaGeneratorParser.SeparatorStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.separatorStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSeparatorStatement([NotNull] MetaGeneratorParser.SeparatorStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] MetaGeneratorParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] MetaGeneratorParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.switchStatementBegin"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatementBegin([NotNull] MetaGeneratorParser.SwitchStatementBeginContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.switchStatementBegin"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatementBegin([NotNull] MetaGeneratorParser.SwitchStatementBeginContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.switchStatementEnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatementEnd([NotNull] MetaGeneratorParser.SwitchStatementEndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.switchStatementEnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatementEnd([NotNull] MetaGeneratorParser.SwitchStatementEndContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.switchBranchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchBranchStatement([NotNull] MetaGeneratorParser.SwitchBranchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.switchBranchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchBranchStatement([NotNull] MetaGeneratorParser.SwitchBranchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.switchBranchHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchBranchHeadStatement([NotNull] MetaGeneratorParser.SwitchBranchHeadStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.switchBranchHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchBranchHeadStatement([NotNull] MetaGeneratorParser.SwitchBranchHeadStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.switchCaseOrTypeIsHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchCaseOrTypeIsHeadStatement([NotNull] MetaGeneratorParser.SwitchCaseOrTypeIsHeadStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.switchCaseOrTypeIsHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchCaseOrTypeIsHeadStatement([NotNull] MetaGeneratorParser.SwitchCaseOrTypeIsHeadStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.switchCaseHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchCaseHeadStatement([NotNull] MetaGeneratorParser.SwitchCaseHeadStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.switchCaseHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchCaseHeadStatement([NotNull] MetaGeneratorParser.SwitchCaseHeadStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.switchTypeIsHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchTypeIsHeadStatement([NotNull] MetaGeneratorParser.SwitchTypeIsHeadStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.switchTypeIsHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchTypeIsHeadStatement([NotNull] MetaGeneratorParser.SwitchTypeIsHeadStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.switchTypeAsHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchTypeAsHeadStatement([NotNull] MetaGeneratorParser.SwitchTypeAsHeadStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.switchTypeAsHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchTypeAsHeadStatement([NotNull] MetaGeneratorParser.SwitchTypeAsHeadStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.switchDefaultStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchDefaultStatement([NotNull] MetaGeneratorParser.SwitchDefaultStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.switchDefaultStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchDefaultStatement([NotNull] MetaGeneratorParser.SwitchDefaultStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.switchDefaultHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchDefaultHeadStatement([NotNull] MetaGeneratorParser.SwitchDefaultHeadStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.switchDefaultHeadStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchDefaultHeadStatement([NotNull] MetaGeneratorParser.SwitchDefaultHeadStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.templateDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplateDeclaration([NotNull] MetaGeneratorParser.TemplateDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.templateDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplateDeclaration([NotNull] MetaGeneratorParser.TemplateDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.templateSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplateSignature([NotNull] MetaGeneratorParser.TemplateSignatureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.templateSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplateSignature([NotNull] MetaGeneratorParser.TemplateSignatureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.templateBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplateBody([NotNull] MetaGeneratorParser.TemplateBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.templateBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplateBody([NotNull] MetaGeneratorParser.TemplateBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.templateContentLine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplateContentLine([NotNull] MetaGeneratorParser.TemplateContentLineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.templateContentLine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplateContentLine([NotNull] MetaGeneratorParser.TemplateContentLineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.templateOutput"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplateOutput([NotNull] MetaGeneratorParser.TemplateOutputContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.templateOutput"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplateOutput([NotNull] MetaGeneratorParser.TemplateOutputContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.templateLineEnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplateLineEnd([NotNull] MetaGeneratorParser.TemplateLineEndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.templateLineEnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplateLineEnd([NotNull] MetaGeneratorParser.TemplateLineEndContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.templateStatementStartEnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplateStatementStartEnd([NotNull] MetaGeneratorParser.TemplateStatementStartEndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.templateStatementStartEnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplateStatementStartEnd([NotNull] MetaGeneratorParser.TemplateStatementStartEndContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.templateStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplateStatement([NotNull] MetaGeneratorParser.TemplateStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.templateStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplateStatement([NotNull] MetaGeneratorParser.TemplateStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.typeArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeArgumentList([NotNull] MetaGeneratorParser.TypeArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.typeArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeArgumentList([NotNull] MetaGeneratorParser.TypeArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.predefinedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredefinedType([NotNull] MetaGeneratorParser.PredefinedTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.predefinedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredefinedType([NotNull] MetaGeneratorParser.PredefinedTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.typeReferenceList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeReferenceList([NotNull] MetaGeneratorParser.TypeReferenceListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.typeReferenceList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeReferenceList([NotNull] MetaGeneratorParser.TypeReferenceListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.typeReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeReference([NotNull] MetaGeneratorParser.TypeReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.typeReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeReference([NotNull] MetaGeneratorParser.TypeReferenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayType([NotNull] MetaGeneratorParser.ArrayTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayType([NotNull] MetaGeneratorParser.ArrayTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.nullableType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullableType([NotNull] MetaGeneratorParser.NullableTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.nullableType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullableType([NotNull] MetaGeneratorParser.NullableTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.genericType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericType([NotNull] MetaGeneratorParser.GenericTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.genericType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericType([NotNull] MetaGeneratorParser.GenericTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleType([NotNull] MetaGeneratorParser.SimpleTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleType([NotNull] MetaGeneratorParser.SimpleTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.voidType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVoidType([NotNull] MetaGeneratorParser.VoidTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.voidType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVoidType([NotNull] MetaGeneratorParser.VoidTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.returnType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnType([NotNull] MetaGeneratorParser.ReturnTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.returnType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnType([NotNull] MetaGeneratorParser.ReturnTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionList([NotNull] MetaGeneratorParser.ExpressionListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionList([NotNull] MetaGeneratorParser.ExpressionListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.variableReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableReference([NotNull] MetaGeneratorParser.VariableReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.variableReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableReference([NotNull] MetaGeneratorParser.VariableReferenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.rankSpecifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRankSpecifiers([NotNull] MetaGeneratorParser.RankSpecifiersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.rankSpecifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRankSpecifiers([NotNull] MetaGeneratorParser.RankSpecifiersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.rankSpecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRankSpecifier([NotNull] MetaGeneratorParser.RankSpecifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.rankSpecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRankSpecifier([NotNull] MetaGeneratorParser.RankSpecifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.unboundTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnboundTypeName([NotNull] MetaGeneratorParser.UnboundTypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.unboundTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnboundTypeName([NotNull] MetaGeneratorParser.UnboundTypeNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.genericDimensionSpecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericDimensionSpecifier([NotNull] MetaGeneratorParser.GenericDimensionSpecifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.genericDimensionSpecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericDimensionSpecifier([NotNull] MetaGeneratorParser.GenericDimensionSpecifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>explicitAnonymousFunctionSignature</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.anonymousFunctionSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExplicitAnonymousFunctionSignature([NotNull] MetaGeneratorParser.ExplicitAnonymousFunctionSignatureContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>explicitAnonymousFunctionSignature</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.anonymousFunctionSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExplicitAnonymousFunctionSignature([NotNull] MetaGeneratorParser.ExplicitAnonymousFunctionSignatureContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>implicitAnonymousFunctionSignature</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.anonymousFunctionSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImplicitAnonymousFunctionSignature([NotNull] MetaGeneratorParser.ImplicitAnonymousFunctionSignatureContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>implicitAnonymousFunctionSignature</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.anonymousFunctionSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImplicitAnonymousFunctionSignature([NotNull] MetaGeneratorParser.ImplicitAnonymousFunctionSignatureContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>singleParamAnonymousFunctionSignature</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.anonymousFunctionSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleParamAnonymousFunctionSignature([NotNull] MetaGeneratorParser.SingleParamAnonymousFunctionSignatureContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>singleParamAnonymousFunctionSignature</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.anonymousFunctionSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleParamAnonymousFunctionSignature([NotNull] MetaGeneratorParser.SingleParamAnonymousFunctionSignatureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.explicitParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExplicitParameter([NotNull] MetaGeneratorParser.ExplicitParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.explicitParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExplicitParameter([NotNull] MetaGeneratorParser.ExplicitParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.implicitParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImplicitParameter([NotNull] MetaGeneratorParser.ImplicitParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.implicitParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImplicitParameter([NotNull] MetaGeneratorParser.ImplicitParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>typeofUnboundTypeExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeofUnboundTypeExpression([NotNull] MetaGeneratorParser.TypeofUnboundTypeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeofUnboundTypeExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeofUnboundTypeExpression([NotNull] MetaGeneratorParser.TypeofUnboundTypeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>additionExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditionExpression([NotNull] MetaGeneratorParser.AdditionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>additionExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditionExpression([NotNull] MetaGeneratorParser.AdditionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>typecheckExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypecheckExpression([NotNull] MetaGeneratorParser.TypecheckExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typecheckExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypecheckExpression([NotNull] MetaGeneratorParser.TypecheckExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>relationalExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalExpression([NotNull] MetaGeneratorParser.RelationalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>relationalExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalExpression([NotNull] MetaGeneratorParser.RelationalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] MetaGeneratorParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] MetaGeneratorParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>postExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostExpression([NotNull] MetaGeneratorParser.PostExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>postExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostExpression([NotNull] MetaGeneratorParser.PostExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>typeofVoidExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeofVoidExpression([NotNull] MetaGeneratorParser.TypeofVoidExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeofVoidExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeofVoidExpression([NotNull] MetaGeneratorParser.TypeofVoidExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] MetaGeneratorParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] MetaGeneratorParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bitwiseAndExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitwiseAndExpression([NotNull] MetaGeneratorParser.BitwiseAndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bitwiseAndExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitwiseAndExpression([NotNull] MetaGeneratorParser.BitwiseAndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalAndExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAndExpression([NotNull] MetaGeneratorParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalAndExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAndExpression([NotNull] MetaGeneratorParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] MetaGeneratorParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] MetaGeneratorParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>memberAccessExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberAccessExpression([NotNull] MetaGeneratorParser.MemberAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>memberAccessExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberAccessExpression([NotNull] MetaGeneratorParser.MemberAccessExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryExpression([NotNull] MetaGeneratorParser.UnaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryExpression([NotNull] MetaGeneratorParser.UnaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>typecastExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypecastExpression([NotNull] MetaGeneratorParser.TypecastExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typecastExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypecastExpression([NotNull] MetaGeneratorParser.TypecastExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalXorExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalXorExpression([NotNull] MetaGeneratorParser.LogicalXorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalXorExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalXorExpression([NotNull] MetaGeneratorParser.LogicalXorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>predefinedTypeMemberAccessExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredefinedTypeMemberAccessExpression([NotNull] MetaGeneratorParser.PredefinedTypeMemberAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>predefinedTypeMemberAccessExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredefinedTypeMemberAccessExpression([NotNull] MetaGeneratorParser.PredefinedTypeMemberAccessExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bitwiseXorExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitwiseXorExpression([NotNull] MetaGeneratorParser.BitwiseXorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bitwiseXorExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitwiseXorExpression([NotNull] MetaGeneratorParser.BitwiseXorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaExpression([NotNull] MetaGeneratorParser.LambdaExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaExpression([NotNull] MetaGeneratorParser.LambdaExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>defaultValueExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefaultValueExpression([NotNull] MetaGeneratorParser.DefaultValueExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>defaultValueExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefaultValueExpression([NotNull] MetaGeneratorParser.DefaultValueExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>conditionalExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalExpression([NotNull] MetaGeneratorParser.ConditionalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>conditionalExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalExpression([NotNull] MetaGeneratorParser.ConditionalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignmentExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentExpression([NotNull] MetaGeneratorParser.AssignmentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignmentExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentExpression([NotNull] MetaGeneratorParser.AssignmentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicationExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicationExpression([NotNull] MetaGeneratorParser.MultiplicationExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicationExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicationExpression([NotNull] MetaGeneratorParser.MultiplicationExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>newObjectOrCollectionWithConstructorExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewObjectOrCollectionWithConstructorExpression([NotNull] MetaGeneratorParser.NewObjectOrCollectionWithConstructorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>newObjectOrCollectionWithConstructorExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewObjectOrCollectionWithConstructorExpression([NotNull] MetaGeneratorParser.NewObjectOrCollectionWithConstructorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalOrExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOrExpression([NotNull] MetaGeneratorParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalOrExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOrExpression([NotNull] MetaGeneratorParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bitwiseOrExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitwiseOrExpression([NotNull] MetaGeneratorParser.BitwiseOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bitwiseOrExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitwiseOrExpression([NotNull] MetaGeneratorParser.BitwiseOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>hasLoopExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHasLoopExpression([NotNull] MetaGeneratorParser.HasLoopExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>hasLoopExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHasLoopExpression([NotNull] MetaGeneratorParser.HasLoopExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>thisExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisExpression([NotNull] MetaGeneratorParser.ThisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>thisExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisExpression([NotNull] MetaGeneratorParser.ThisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>elementAccessExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementAccessExpression([NotNull] MetaGeneratorParser.ElementAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>elementAccessExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementAccessExpression([NotNull] MetaGeneratorParser.ElementAccessExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>typeofTypeExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeofTypeExpression([NotNull] MetaGeneratorParser.TypeofTypeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeofTypeExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeofTypeExpression([NotNull] MetaGeneratorParser.TypeofTypeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>equalityExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualityExpression([NotNull] MetaGeneratorParser.EqualityExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>equalityExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualityExpression([NotNull] MetaGeneratorParser.EqualityExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] MetaGeneratorParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="MetaGeneratorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] MetaGeneratorParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.qualifiedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifiedName([NotNull] MetaGeneratorParser.QualifiedNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.qualifiedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifiedName([NotNull] MetaGeneratorParser.QualifiedNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.identifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierList([NotNull] MetaGeneratorParser.IdentifierListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.identifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierList([NotNull] MetaGeneratorParser.IdentifierListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] MetaGeneratorParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] MetaGeneratorParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] MetaGeneratorParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] MetaGeneratorParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.nullLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullLiteral([NotNull] MetaGeneratorParser.NullLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.nullLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullLiteral([NotNull] MetaGeneratorParser.NullLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.booleanLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanLiteral([NotNull] MetaGeneratorParser.BooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.booleanLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanLiteral([NotNull] MetaGeneratorParser.BooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.numberLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberLiteral([NotNull] MetaGeneratorParser.NumberLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.numberLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberLiteral([NotNull] MetaGeneratorParser.NumberLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.integerLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerLiteral([NotNull] MetaGeneratorParser.IntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.integerLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerLiteral([NotNull] MetaGeneratorParser.IntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.decimalLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalLiteral([NotNull] MetaGeneratorParser.DecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.decimalLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalLiteral([NotNull] MetaGeneratorParser.DecimalLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.scientificLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScientificLiteral([NotNull] MetaGeneratorParser.ScientificLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.scientificLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScientificLiteral([NotNull] MetaGeneratorParser.ScientificLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.dateOrTimeLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateOrTimeLiteral([NotNull] MetaGeneratorParser.DateOrTimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.dateOrTimeLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateOrTimeLiteral([NotNull] MetaGeneratorParser.DateOrTimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.dateTimeOffsetLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeOffsetLiteral([NotNull] MetaGeneratorParser.DateTimeOffsetLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.dateTimeOffsetLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeOffsetLiteral([NotNull] MetaGeneratorParser.DateTimeOffsetLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.dateTimeLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeLiteral([NotNull] MetaGeneratorParser.DateTimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.dateTimeLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeLiteral([NotNull] MetaGeneratorParser.DateTimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.dateLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateLiteral([NotNull] MetaGeneratorParser.DateLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.dateLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateLiteral([NotNull] MetaGeneratorParser.DateLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.timeLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeLiteral([NotNull] MetaGeneratorParser.TimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.timeLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeLiteral([NotNull] MetaGeneratorParser.TimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.charLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharLiteral([NotNull] MetaGeneratorParser.CharLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.charLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharLiteral([NotNull] MetaGeneratorParser.CharLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.stringLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringLiteral([NotNull] MetaGeneratorParser.StringLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.stringLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringLiteral([NotNull] MetaGeneratorParser.StringLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MetaGeneratorParser.guidLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGuidLiteral([NotNull] MetaGeneratorParser.GuidLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MetaGeneratorParser.guidLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGuidLiteral([NotNull] MetaGeneratorParser.GuidLiteralContext context);
}
} // namespace MetaDslx.Compiler
