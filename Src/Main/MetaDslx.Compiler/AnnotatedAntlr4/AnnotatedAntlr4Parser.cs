//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\ugagafus.dxn\AnnotatedAntlr4Parser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Compiler {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AnnotatedAntlr4Parser : Parser {
	public const int
		TOKEN_REF=1, RULE_REF=2, LEXER_CHAR_SET=3, LINE_COMMENT=4, BEGIN_ARG_ACTION=5, 
		OPTIONS=6, TOKENS=7, IMPORT=8, FRAGMENT=9, LEXER=10, PARSER=11, GRAMMAR=12, 
		PROTECTED=13, PUBLIC=14, PRIVATE=15, RETURNS=16, LOCALS=17, THROWS=18, 
		CATCH=19, FINALLY=20, MODE=21, TRUE=22, FALSE=23, NULL=24, COLON=25, COLONCOLON=26, 
		COMMA=27, SEMI=28, LPAREN=29, RPAREN=30, RARROW=31, DRARROW=32, LT=33, 
		GT=34, ASSIGN=35, QUESTION=36, STAR=37, PLUS=38, PLUS_ASSIGN=39, OR=40, 
		DOLLAR=41, DOT=42, RANGE=43, AT=44, POUND=45, NOT=46, LBRACE=47, RBRACE=48, 
		LBRACKET=49, RBRACKET=50, ID=51, INTEGER_LITERAL=52, DECIMAL_LITERAL=53, 
		SCIENTIFIC_LITERAL=54, STRING_LITERAL=55, UNTERMINATED_STRING_LITERAL=56, 
		WS=57, ACTION=58, ERRCHAR=59, ARG_ACTION=60, UNTERMINATED_ARG_ACTION=61, 
		UNTERMINATED_CHAR_SET=62, DOC_COMMENT=63, BLOCK_COMMENT=64;
	public const int
		RULE_grammarSpec = 0, RULE_grammarType = 1, RULE_prequelConstruct = 2, 
		RULE_optionsSpec = 3, RULE_option = 4, RULE_optionValue = 5, RULE_delegateGrammars = 6, 
		RULE_delegateGrammar = 7, RULE_tokensSpec = 8, RULE_annotatedId = 9, RULE_action = 10, 
		RULE_actionScopeName = 11, RULE_modeSpec = 12, RULE_rules = 13, RULE_ruleSpec = 14, 
		RULE_parserRuleSpec = 15, RULE_exceptionGroup = 16, RULE_exceptionHandler = 17, 
		RULE_finallyClause = 18, RULE_rulePrequel = 19, RULE_ruleReturns = 20, 
		RULE_throwsSpec = 21, RULE_localsSpec = 22, RULE_ruleAction = 23, RULE_ruleModifiers = 24, 
		RULE_ruleModifier = 25, RULE_ruleBlock = 26, RULE_ruleAltList = 27, RULE_labeledAlt = 28, 
		RULE_propertiesBlock = 29, RULE_lexerRule = 30, RULE_lexerRuleBlock = 31, 
		RULE_lexerAltList = 32, RULE_lexerAlt = 33, RULE_lexerElements = 34, RULE_lexerElement = 35, 
		RULE_labeledLexerElement = 36, RULE_lexerBlock = 37, RULE_lexerCommands = 38, 
		RULE_lexerCommand = 39, RULE_lexerCommandName = 40, RULE_lexerCommandExpr = 41, 
		RULE_altList = 42, RULE_alternative = 43, RULE_element = 44, RULE_labeledElement = 45, 
		RULE_ebnf = 46, RULE_blockSuffix = 47, RULE_ebnfSuffix = 48, RULE_lexerAtom = 49, 
		RULE_atom = 50, RULE_notSet = 51, RULE_blockSet = 52, RULE_setElement = 53, 
		RULE_block = 54, RULE_ruleref = 55, RULE_range = 56, RULE_terminal = 57, 
		RULE_elementOptions = 58, RULE_elementOption = 59, RULE_id = 60, RULE_annotation = 61, 
		RULE_annotationBody = 62, RULE_annotationAttributeList = 63, RULE_annotationAttribute = 64, 
		RULE_expressionList = 65, RULE_qualifiedName = 66, RULE_expression = 67, 
		RULE_literal = 68, RULE_identifier = 69, RULE_boolLiteral = 70, RULE_nullLiteral = 71;
	public static readonly string[] ruleNames = {
		"grammarSpec", "grammarType", "prequelConstruct", "optionsSpec", "option", 
		"optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec", "annotatedId", 
		"action", "actionScopeName", "modeSpec", "rules", "ruleSpec", "parserRuleSpec", 
		"exceptionGroup", "exceptionHandler", "finallyClause", "rulePrequel", 
		"ruleReturns", "throwsSpec", "localsSpec", "ruleAction", "ruleModifiers", 
		"ruleModifier", "ruleBlock", "ruleAltList", "labeledAlt", "propertiesBlock", 
		"lexerRule", "lexerRuleBlock", "lexerAltList", "lexerAlt", "lexerElements", 
		"lexerElement", "labeledLexerElement", "lexerBlock", "lexerCommands", 
		"lexerCommand", "lexerCommandName", "lexerCommandExpr", "altList", "alternative", 
		"element", "labeledElement", "ebnf", "blockSuffix", "ebnfSuffix", "lexerAtom", 
		"atom", "notSet", "blockSet", "setElement", "block", "ruleref", "range", 
		"terminal", "elementOptions", "elementOption", "id", "annotation", "annotationBody", 
		"annotationAttributeList", "annotationAttribute", "expressionList", "qualifiedName", 
		"expression", "literal", "identifier", "boolLiteral", "nullLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'import'", "'fragment'", 
		"'lexer'", "'parser'", "'grammar'", "'protected'", "'public'", "'private'", 
		"'returns'", "'locals'", "'throws'", "'catch'", "'finally'", "'mode'", 
		"'true'", "'false'", "'null'", "':'", "'::'", "','", "';'", "'('", "')'", 
		"'->'", "'=>'", "'<'", "'>'", "'='", "'?'", null, "'+'", "'+='", "'|'", 
		"'$'", "'.'", "'..'", "'@'", "'#'", "'~'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "LINE_COMMENT", "BEGIN_ARG_ACTION", 
		"OPTIONS", "TOKENS", "IMPORT", "FRAGMENT", "LEXER", "PARSER", "GRAMMAR", 
		"PROTECTED", "PUBLIC", "PRIVATE", "RETURNS", "LOCALS", "THROWS", "CATCH", 
		"FINALLY", "MODE", "TRUE", "FALSE", "NULL", "COLON", "COLONCOLON", "COMMA", 
		"SEMI", "LPAREN", "RPAREN", "RARROW", "DRARROW", "LT", "GT", "ASSIGN", 
		"QUESTION", "STAR", "PLUS", "PLUS_ASSIGN", "OR", "DOLLAR", "DOT", "RANGE", 
		"AT", "POUND", "NOT", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "ID", 
		"INTEGER_LITERAL", "DECIMAL_LITERAL", "SCIENTIFIC_LITERAL", "STRING_LITERAL", 
		"UNTERMINATED_STRING_LITERAL", "WS", "ACTION", "ERRCHAR", "ARG_ACTION", 
		"UNTERMINATED_ARG_ACTION", "UNTERMINATED_CHAR_SET", "DOC_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnnotatedAntlr4Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AnnotatedAntlr4Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GrammarSpecContext : ParserRuleContext {
		public GrammarTypeContext grammarType() {
			return GetRuleContext<GrammarTypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AnnotatedAntlr4Parser.Eof, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PrequelConstructContext[] prequelConstruct() {
			return GetRuleContexts<PrequelConstructContext>();
		}
		public PrequelConstructContext prequelConstruct(int i) {
			return GetRuleContext<PrequelConstructContext>(i);
		}
		public ModeSpecContext[] modeSpec() {
			return GetRuleContexts<ModeSpecContext>();
		}
		public ModeSpecContext modeSpec(int i) {
			return GetRuleContext<ModeSpecContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarSpecContext grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 144; Match(DOC_COMMENT);
				}
			}

			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 147; annotation();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 153; grammarType();
			State = 154; id();
			State = 155; Match(SEMI);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << TOKENS) | (1L << IMPORT) | (1L << AT))) != 0)) {
				{
				{
				State = 156; prequelConstruct();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 162; rules();
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MODE || _la==DOLLAR) {
				{
				{
				State = 163; modeSpec();
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 169; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarTypeContext : ParserRuleContext {
		public ITerminalNode LEXER() { return GetToken(AnnotatedAntlr4Parser.LEXER, 0); }
		public ITerminalNode GRAMMAR() { return GetToken(AnnotatedAntlr4Parser.GRAMMAR, 0); }
		public ITerminalNode PARSER() { return GetToken(AnnotatedAntlr4Parser.PARSER, 0); }
		public GrammarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarTypeContext grammarType() {
		GrammarTypeContext _localctx = new GrammarTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			switch (TokenStream.La(1)) {
			case LEXER:
				{
				State = 171; Match(LEXER);
				State = 172; Match(GRAMMAR);
				}
				break;
			case PARSER:
				{
				State = 173; Match(PARSER);
				State = 174; Match(GRAMMAR);
				}
				break;
			case GRAMMAR:
				{
				State = 175; Match(GRAMMAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrequelConstructContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public DelegateGrammarsContext delegateGrammars() {
			return GetRuleContext<DelegateGrammarsContext>(0);
		}
		public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public PrequelConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prequelConstruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterPrequelConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitPrequelConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrequelConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrequelConstructContext prequelConstruct() {
		PrequelConstructContext _localctx = new PrequelConstructContext(Context, State);
		EnterRule(_localctx, 4, RULE_prequelConstruct);
		try {
			State = 182;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178; optionsSpec();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179; delegateGrammars();
				}
				break;
			case TOKENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 180; tokensSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 181; action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		public ITerminalNode OPTIONS() { return GetToken(AnnotatedAntlr4Parser.OPTIONS, 0); }
		public ITerminalNode RBRACE() { return GetToken(AnnotatedAntlr4Parser.RBRACE, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(OPTIONS);
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 185; option();
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 191; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; id();
			State = 194; Match(ASSIGN);
			State = 195; optionValue();
			State = 196; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(AnnotatedAntlr4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(AnnotatedAntlr4Parser.DOT, i);
		}
		public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode INTEGER_LITERAL() { return GetToken(AnnotatedAntlr4Parser.INTEGER_LITERAL, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_optionValue);
		int _la;
		try {
			State = 211;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; id();
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOT) {
					{
					{
					State = 199; Match(DOT);
					State = 200; id();
					}
					}
					State = 205;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; boolLiteral();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 207; nullLiteral();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 208; Match(STRING_LITERAL);
				}
				break;
			case ACTION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 209; Match(ACTION);
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 210; Match(INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarsContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(AnnotatedAntlr4Parser.IMPORT, 0); }
		public DelegateGrammarContext[] delegateGrammar() {
			return GetRuleContexts<DelegateGrammarContext>();
		}
		public DelegateGrammarContext delegateGrammar(int i) {
			return GetRuleContext<DelegateGrammarContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarsContext delegateGrammars() {
		DelegateGrammarsContext _localctx = new DelegateGrammarsContext(Context, State);
		EnterRule(_localctx, 12, RULE_delegateGrammars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(IMPORT);
			State = 214; delegateGrammar();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 215; Match(COMMA);
				State = 216; delegateGrammar();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 222; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarContext delegateGrammar() {
		DelegateGrammarContext _localctx = new DelegateGrammarContext(Context, State);
		EnterRule(_localctx, 14, RULE_delegateGrammar);
		try {
			State = 229;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; id();
				State = 225; Match(ASSIGN);
				State = 226; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		public ITerminalNode TOKENS() { return GetToken(AnnotatedAntlr4Parser.TOKENS, 0); }
		public AnnotatedIdContext[] annotatedId() {
			return GetRuleContexts<AnnotatedIdContext>();
		}
		public AnnotatedIdContext annotatedId(int i) {
			return GetRuleContext<AnnotatedIdContext>(i);
		}
		public ITerminalNode RBRACE() { return GetToken(AnnotatedAntlr4Parser.RBRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokensSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 16, RULE_tokensSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(TOKENS);
			State = 232; annotatedId();
			State = 237;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 233; Match(COMMA);
					State = 234; annotatedId();
					}
					} 
				}
				State = 239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 241;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 240; Match(COMMA);
				}
			}

			State = 243; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotatedIdContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotatedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotatedId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotatedId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotatedId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotatedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotatedIdContext annotatedId() {
		AnnotatedIdContext _localctx = new AnnotatedIdContext(Context, State);
		EnterRule(_localctx, 18, RULE_annotatedId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 245; annotation();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 251; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(AnnotatedAntlr4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(AnnotatedAntlr4Parser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 20, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(AT);
			State = 257;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 254; actionScopeName();
				State = 255; Match(COLONCOLON);
				}
				break;
			}
			State = 259; id();
			State = 260; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LEXER() { return GetToken(AnnotatedAntlr4Parser.LEXER, 0); }
		public ITerminalNode PARSER() { return GetToken(AnnotatedAntlr4Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionScopeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_actionScopeName);
		try {
			State = 265;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262; id();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263; Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 264; Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecContext : ParserRuleContext {
		public ITerminalNode MODE() { return GetToken(AnnotatedAntlr4Parser.MODE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LexerRuleContext[] lexerRule() {
			return GetRuleContexts<LexerRuleContext>();
		}
		public LexerRuleContext lexerRule(int i) {
			return GetRuleContext<LexerRuleContext>(i);
		}
		public ModeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterModeSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitModeSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecContext modeSpec() {
		ModeSpecContext _localctx = new ModeSpecContext(Context, State);
		EnterRule(_localctx, 24, RULE_modeSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 267; annotation();
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 273; Match(MODE);
			State = 274; id();
			State = 275; Match(SEMI);
			State = 279;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 276; lexerRule();
					}
					} 
				}
				State = 281;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleSpecContext[] ruleSpec() {
			return GetRuleContexts<RuleSpecContext>();
		}
		public RuleSpecContext ruleSpec(int i) {
			return GetRuleContext<RuleSpecContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 26, RULE_rules);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 282; ruleSpec();
					}
					} 
				}
				State = 287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSpecContext : ParserRuleContext {
		public ParserRuleSpecContext parserRuleSpec() {
			return GetRuleContext<ParserRuleSpecContext>(0);
		}
		public LexerRuleContext lexerRule() {
			return GetRuleContext<LexerRuleContext>(0);
		}
		public RuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSpecContext ruleSpec() {
		RuleSpecContext _localctx = new RuleSpecContext(Context, State);
		EnterRule(_localctx, 28, RULE_ruleSpec);
		try {
			State = 290;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; parserRuleSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; lexerRule();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleSpecContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public RuleBlockContext ruleBlock() {
			return GetRuleContext<RuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public RuleModifiersContext ruleModifiers() {
			return GetRuleContext<RuleModifiersContext>(0);
		}
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public RuleReturnsContext ruleReturns() {
			return GetRuleContext<RuleReturnsContext>(0);
		}
		public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		public LocalsSpecContext localsSpec() {
			return GetRuleContext<LocalsSpecContext>(0);
		}
		public RulePrequelContext[] rulePrequel() {
			return GetRuleContexts<RulePrequelContext>();
		}
		public RulePrequelContext rulePrequel(int i) {
			return GetRuleContext<RulePrequelContext>(i);
		}
		public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterParserRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitParserRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleSpecContext parserRuleSpec() {
		ParserRuleSpecContext _localctx = new ParserRuleSpecContext(Context, State);
		EnterRule(_localctx, 30, RULE_parserRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 292; Match(DOC_COMMENT);
				}
			}

			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 295; annotation();
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 302;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
				{
				State = 301; ruleModifiers();
				}
			}

			State = 304; Match(RULE_REF);
			State = 306;
			_la = TokenStream.La(1);
			if (_la==ARG_ACTION) {
				{
				State = 305; Match(ARG_ACTION);
				}
			}

			State = 309;
			_la = TokenStream.La(1);
			if (_la==RETURNS) {
				{
				State = 308; ruleReturns();
				}
			}

			State = 312;
			_la = TokenStream.La(1);
			if (_la==THROWS) {
				{
				State = 311; throwsSpec();
				}
			}

			State = 315;
			_la = TokenStream.La(1);
			if (_la==LOCALS) {
				{
				State = 314; localsSpec();
				}
			}

			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OPTIONS || _la==AT) {
				{
				{
				State = 317; rulePrequel();
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 323; Match(COLON);
			State = 324; ruleBlock();
			State = 325; Match(SEMI);
			State = 326; exceptionGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 32, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CATCH) {
				{
				{
				State = 328; exceptionHandler();
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 335;
			_la = TokenStream.La(1);
			if (_la==FINALLY) {
				{
				State = 334; finallyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(AnnotatedAntlr4Parser.CATCH, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 34, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(CATCH);
			State = 338; Match(ARG_ACTION);
			State = 339; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(AnnotatedAntlr4Parser.FINALLY, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(FINALLY);
			State = 342; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulePrequelContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext ruleAction() {
			return GetRuleContext<RuleActionContext>(0);
		}
		public RulePrequelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulePrequel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRulePrequel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRulePrequel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulePrequel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulePrequelContext rulePrequel() {
		RulePrequelContext _localctx = new RulePrequelContext(Context, State);
		EnterRule(_localctx, 38, RULE_rulePrequel);
		try {
			State = 346;
			switch (TokenStream.La(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344; optionsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345; ruleAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleReturnsContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(AnnotatedAntlr4Parser.RETURNS, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public RuleReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleReturns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleReturns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleReturns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleReturnsContext ruleReturns() {
		RuleReturnsContext _localctx = new RuleReturnsContext(Context, State);
		EnterRule(_localctx, 40, RULE_ruleReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(RETURNS);
			State = 349; Match(ARG_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		public ITerminalNode THROWS() { return GetToken(AnnotatedAntlr4Parser.THROWS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 42, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(THROWS);
			State = 352; id();
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 353; Match(COMMA);
				State = 354; id();
				}
				}
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalsSpecContext : ParserRuleContext {
		public ITerminalNode LOCALS() { return GetToken(AnnotatedAntlr4Parser.LOCALS, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public LocalsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLocalsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLocalsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalsSpecContext localsSpec() {
		LocalsSpecContext _localctx = new LocalsSpecContext(Context, State);
		EnterRule(_localctx, 44, RULE_localsSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(LOCALS);
			State = 361; Match(ARG_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(AnnotatedAntlr4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 46, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; Match(AT);
			State = 364; id();
			State = 365; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifiersContext : ParserRuleContext {
		public RuleModifierContext[] ruleModifier() {
			return GetRuleContexts<RuleModifierContext>();
		}
		public RuleModifierContext ruleModifier(int i) {
			return GetRuleContext<RuleModifierContext>(i);
		}
		public RuleModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifiersContext ruleModifiers() {
		RuleModifiersContext _localctx = new RuleModifiersContext(Context, State);
		EnterRule(_localctx, 48, RULE_ruleModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 367; ruleModifier();
				}
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(AnnotatedAntlr4Parser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(AnnotatedAntlr4Parser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(AnnotatedAntlr4Parser.PROTECTED, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(AnnotatedAntlr4Parser.FRAGMENT, 0); }
		public RuleModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifierContext ruleModifier() {
		RuleModifierContext _localctx = new RuleModifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_ruleModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleBlockContext : ParserRuleContext {
		public RuleAltListContext ruleAltList() {
			return GetRuleContext<RuleAltListContext>(0);
		}
		public RuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleBlockContext ruleBlock() {
		RuleBlockContext _localctx = new RuleBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_ruleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; ruleAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleAltListContext : ParserRuleContext {
		public LabeledAltContext[] labeledAlt() {
			return GetRuleContexts<LabeledAltContext>();
		}
		public LabeledAltContext labeledAlt(int i) {
			return GetRuleContext<LabeledAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public RuleAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleAltListContext ruleAltList() {
		RuleAltListContext _localctx = new RuleAltListContext(Context, State);
		EnterRule(_localctx, 54, RULE_ruleAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; labeledAlt();
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 377; Match(OR);
				State = 378; labeledAlt();
				}
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledAltContext : ParserRuleContext {
		public AlternativeContext alternative() {
			return GetRuleContext<AlternativeContext>(0);
		}
		public ITerminalNode POUND() { return GetToken(AnnotatedAntlr4Parser.POUND, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public PropertiesBlockContext propertiesBlock() {
			return GetRuleContext<PropertiesBlockContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LabeledAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledAltContext labeledAlt() {
		LabeledAltContext _localctx = new LabeledAltContext(Context, State);
		EnterRule(_localctx, 56, RULE_labeledAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; alternative();
			State = 393;
			_la = TokenStream.La(1);
			if (_la==POUND) {
				{
				State = 385; Match(POUND);
				State = 386; id();
				State = 390;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 387; annotation();
					}
					}
					State = 392;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 396;
			_la = TokenStream.La(1);
			if (_la==RARROW) {
				{
				State = 395; propertiesBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesBlockContext : ParserRuleContext {
		public ITerminalNode RARROW() { return GetToken(AnnotatedAntlr4Parser.RARROW, 0); }
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public PropertiesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertiesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterPropertiesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitPropertiesBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertiesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesBlockContext propertiesBlock() {
		PropertiesBlockContext _localctx = new PropertiesBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_propertiesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(RARROW);
			State = 399; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(AnnotatedAntlr4Parser.SEMI, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(AnnotatedAntlr4Parser.DOC_COMMENT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode FRAGMENT() { return GetToken(AnnotatedAntlr4Parser.FRAGMENT, 0); }
		public LexerRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleContext lexerRule() {
		LexerRuleContext _localctx = new LexerRuleContext(Context, State);
		EnterRule(_localctx, 60, RULE_lexerRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_la = TokenStream.La(1);
			if (_la==DOC_COMMENT) {
				{
				State = 401; Match(DOC_COMMENT);
				}
			}

			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOLLAR) {
				{
				{
				State = 404; annotation();
				}
				}
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 411;
			_la = TokenStream.La(1);
			if (_la==FRAGMENT) {
				{
				State = 410; Match(FRAGMENT);
				}
			}

			State = 413; Match(TOKEN_REF);
			State = 414; Match(COLON);
			State = 415; lexerRuleBlock();
			State = 416; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockContext lexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_lexerRuleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; lexerAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltListContext : ParserRuleContext {
		public LexerAltContext[] lexerAlt() {
			return GetRuleContexts<LexerAltContext>();
		}
		public LexerAltContext lexerAlt(int i) {
			return GetRuleContext<LexerAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public LexerAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltListContext lexerAltList() {
		LexerAltListContext _localctx = new LexerAltListContext(Context, State);
		EnterRule(_localctx, 64, RULE_lexerAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; lexerAlt();
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 421; Match(OR);
				State = 422; lexerAlt();
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltContext : ParserRuleContext {
		public LexerElementsContext lexerElements() {
			return GetRuleContext<LexerElementsContext>(0);
		}
		public LexerCommandsContext lexerCommands() {
			return GetRuleContext<LexerCommandsContext>(0);
		}
		public LexerAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltContext lexerAlt() {
		LexerAltContext _localctx = new LexerAltContext(Context, State);
		EnterRule(_localctx, 66, RULE_lexerAlt);
		int _la;
		try {
			State = 433;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case LPAREN:
			case DOT:
			case NOT:
			case STRING_LITERAL:
			case ACTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428; lexerElements();
				State = 430;
				_la = TokenStream.La(1);
				if (_la==RARROW) {
					{
					State = 429; lexerCommands();
					}
				}

				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementsContext : ParserRuleContext {
		public LexerElementContext[] lexerElement() {
			return GetRuleContexts<LexerElementContext>();
		}
		public LexerElementContext lexerElement(int i) {
			return GetRuleContext<LexerElementContext>(i);
		}
		public LexerElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementsContext lexerElements() {
		LexerElementsContext _localctx = new LexerElementsContext(Context, State);
		EnterRule(_localctx, 68, RULE_lexerElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 435; lexerElement();
				}
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LEXER_CHAR_SET) | (1L << LPAREN) | (1L << DOT) | (1L << NOT) | (1L << STRING_LITERAL) | (1L << ACTION))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementContext : ParserRuleContext {
		public LabeledLexerElementContext labeledLexerElement() {
			return GetRuleContext<LabeledLexerElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode QUESTION() { return GetToken(AnnotatedAntlr4Parser.QUESTION, 0); }
		public LexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementContext lexerElement() {
		LexerElementContext _localctx = new LexerElementContext(Context, State);
		EnterRule(_localctx, 70, RULE_lexerElement);
		int _la;
		try {
			State = 456;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 440; labeledLexerElement();
				State = 442;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 441; ebnfSuffix();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 444; lexerAtom();
				State = 446;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 445; ebnfSuffix();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 448; lexerBlock();
				State = 450;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 449; ebnfSuffix();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 452; Match(ACTION);
				State = 454;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 453; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledLexerElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(AnnotatedAntlr4Parser.PLUS_ASSIGN, 0); }
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledLexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledLexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledLexerElementContext labeledLexerElement() {
		LabeledLexerElementContext _localctx = new LabeledLexerElementContext(Context, State);
		EnterRule(_localctx, 72, RULE_labeledLexerElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; id();
			State = 459;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 462;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case DOT:
			case NOT:
			case STRING_LITERAL:
				{
				State = 460; lexerAtom();
				}
				break;
			case LPAREN:
				{
				State = 461; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerBlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public LexerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerBlockContext lexerBlock() {
		LexerBlockContext _localctx = new LexerBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_lexerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464; Match(LPAREN);
			State = 465; lexerAltList();
			State = 466; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandsContext : ParserRuleContext {
		public ITerminalNode RARROW() { return GetToken(AnnotatedAntlr4Parser.RARROW, 0); }
		public LexerCommandContext[] lexerCommand() {
			return GetRuleContexts<LexerCommandContext>();
		}
		public LexerCommandContext lexerCommand(int i) {
			return GetRuleContext<LexerCommandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public LexerCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandsContext lexerCommands() {
		LexerCommandsContext _localctx = new LexerCommandsContext(Context, State);
		EnterRule(_localctx, 76, RULE_lexerCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; Match(RARROW);
			State = 469; lexerCommand();
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 470; Match(COMMA);
				State = 471; lexerCommand();
				}
				}
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandContext : ParserRuleContext {
		public LexerCommandNameContext lexerCommandName() {
			return GetRuleContext<LexerCommandNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public LexerCommandExprContext lexerCommandExpr() {
			return GetRuleContext<LexerCommandExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public LexerCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandContext lexerCommand() {
		LexerCommandContext _localctx = new LexerCommandContext(Context, State);
		EnterRule(_localctx, 78, RULE_lexerCommand);
		try {
			State = 483;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 477; lexerCommandName();
				State = 478; Match(LPAREN);
				State = 479; lexerCommandExpr();
				State = 480; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 482; lexerCommandName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(AnnotatedAntlr4Parser.MODE, 0); }
		public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandNameContext lexerCommandName() {
		LexerCommandNameContext _localctx = new LexerCommandNameContext(Context, State);
		EnterRule(_localctx, 80, RULE_lexerCommandName);
		try {
			State = 487;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485; id();
				}
				break;
			case MODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486; Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandExprContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(AnnotatedAntlr4Parser.INTEGER_LITERAL, 0); }
		public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandExprContext lexerCommandExpr() {
		LexerCommandExprContext _localctx = new LexerCommandExprContext(Context, State);
		EnterRule(_localctx, 82, RULE_lexerCommandExpr);
		try {
			State = 491;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 489; id();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 490; Match(INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 84, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493; alternative();
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 494; Match(OR);
				State = 495; alternative();
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 86, RULE_alternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 501; elementOptions();
				}
			}

			State = 507;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LPAREN) | (1L << DOLLAR) | (1L << DOT) | (1L << NOT) | (1L << STRING_LITERAL) | (1L << ACTION))) != 0)) {
				{
				{
				State = 504; element();
				}
				}
				State = 509;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public LabeledElementContext labeledElement() {
			return GetRuleContext<LabeledElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(AnnotatedAntlr4Parser.ACTION, 0); }
		public ITerminalNode QUESTION() { return GetToken(AnnotatedAntlr4Parser.QUESTION, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 88, RULE_element);
		int _la;
		try {
			State = 537;
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 510; annotation();
					}
					}
					State = 515;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 516; labeledElement();
				State = 519;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 517; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case RARROW:
				case OR:
				case DOLLAR:
				case DOT:
				case POUND:
				case NOT:
				case STRING_LITERAL:
				case ACTION:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOLLAR) {
					{
					{
					State = 521; annotation();
					}
					}
					State = 526;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 527; atom();
				State = 530;
				switch (TokenStream.La(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 528; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case RARROW:
				case OR:
				case DOLLAR:
				case DOT:
				case POUND:
				case NOT:
				case STRING_LITERAL:
				case ACTION:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 532; ebnf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 533; Match(ACTION);
				State = 535;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 534; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(AnnotatedAntlr4Parser.PLUS_ASSIGN, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledElementContext labeledElement() {
		LabeledElementContext _localctx = new LabeledElementContext(Context, State);
		EnterRule(_localctx, 90, RULE_labeledElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539; id();
			State = 540;
			_la = TokenStream.La(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 543;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case DOT:
			case NOT:
			case STRING_LITERAL:
				{
				State = 541; atom();
				}
				break;
			case LPAREN:
				{
				State = 542; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockSuffixContext blockSuffix() {
			return GetRuleContext<BlockSuffixContext>(0);
		}
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 92, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; block();
			State = 547;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
				{
				State = 546; blockSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSuffixContext : ParserRuleContext {
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public BlockSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSuffixContext blockSuffix() {
		BlockSuffixContext _localctx = new BlockSuffixContext(Context, State);
		EnterRule(_localctx, 94, RULE_blockSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		public ITerminalNode[] QUESTION() { return GetTokens(AnnotatedAntlr4Parser.QUESTION); }
		public ITerminalNode QUESTION(int i) {
			return GetToken(AnnotatedAntlr4Parser.QUESTION, i);
		}
		public ITerminalNode STAR() { return GetToken(AnnotatedAntlr4Parser.STAR, 0); }
		public ITerminalNode PLUS() { return GetToken(AnnotatedAntlr4Parser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnfSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 96, RULE_ebnfSuffix);
		int _la;
		try {
			State = 563;
			switch (TokenStream.La(1)) {
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551; Match(QUESTION);
				State = 553;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 552; Match(QUESTION);
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 555; Match(STAR);
				State = 557;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 556; Match(QUESTION);
					}
				}

				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 559; Match(PLUS);
				State = 561;
				_la = TokenStream.La(1);
				if (_la==QUESTION) {
					{
					State = 560; Match(QUESTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(AnnotatedAntlr4Parser.LEXER_CHAR_SET, 0); }
		public ITerminalNode DOT() { return GetToken(AnnotatedAntlr4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public LexerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAtomContext lexerAtom() {
		LexerAtomContext _localctx = new LexerAtomContext(Context, State);
		EnterRule(_localctx, 98, RULE_lexerAtom);
		int _la;
		try {
			State = 574;
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 565; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 566; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 567; Match(RULE_REF);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 568; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 569; Match(LEXER_CHAR_SET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 570; Match(DOT);
				State = 572;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 571; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public RulerefContext ruleref() {
			return GetRuleContext<RulerefContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(AnnotatedAntlr4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 100, RULE_atom);
		int _la;
		try {
			State = 584;
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 576; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 577; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 578; ruleref();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 579; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 580; Match(DOT);
				State = 582;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 581; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(AnnotatedAntlr4Parser.NOT, 0); }
		public SetElementContext setElement() {
			return GetRuleContext<SetElementContext>(0);
		}
		public BlockSetContext blockSet() {
			return GetRuleContext<BlockSetContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 102, RULE_notSet);
		try {
			State = 590;
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 586; Match(NOT);
				State = 587; setElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588; Match(NOT);
				State = 589; blockSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSetContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public SetElementContext[] setElement() {
			return GetRuleContexts<SetElementContext>();
		}
		public SetElementContext setElement(int i) {
			return GetRuleContext<SetElementContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ITerminalNode[] OR() { return GetTokens(AnnotatedAntlr4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(AnnotatedAntlr4Parser.OR, i);
		}
		public BlockSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSetContext blockSet() {
		BlockSetContext _localctx = new BlockSetContext(Context, State);
		EnterRule(_localctx, 104, RULE_blockSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592; Match(LPAREN);
			State = 593; setElement();
			State = 598;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 594; Match(OR);
				State = 595; setElement();
				}
				}
				State = 600;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 601; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetElementContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(AnnotatedAntlr4Parser.LEXER_CHAR_SET, 0); }
		public SetElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterSetElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitSetElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetElementContext setElement() {
		SetElementContext _localctx = new SetElementContext(Context, State);
		EnterRule(_localctx, 106, RULE_setElement);
		int _la;
		try {
			State = 613;
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 603; Match(TOKEN_REF);
				State = 605;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 604; elementOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 607; Match(STRING_LITERAL);
				State = 609;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 608; elementOptions();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 611; range();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 612; Match(LEXER_CHAR_SET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(AnnotatedAntlr4Parser.COLON, 0); }
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 108, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615; Match(LPAREN);
			State = 626;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << COLON) | (1L << AT))) != 0)) {
				{
				State = 617;
				_la = TokenStream.La(1);
				if (_la==OPTIONS) {
					{
					State = 616; optionsSpec();
					}
				}

				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AT) {
					{
					{
					State = 619; ruleAction();
					}
					}
					State = 624;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 625; Match(COLON);
				}
			}

			State = 628; altList();
			State = 629; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulerefContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(AnnotatedAntlr4Parser.ARG_ACTION, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public RulerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRuleref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRuleref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulerefContext ruleref() {
		RulerefContext _localctx = new RulerefContext(Context, State);
		EnterRule(_localctx, 110, RULE_ruleref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631; Match(RULE_REF);
			State = 633;
			_la = TokenStream.La(1);
			if (_la==ARG_ACTION) {
				{
				State = 632; Match(ARG_ACTION);
				}
			}

			State = 636;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 635; elementOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(AnnotatedAntlr4Parser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, i);
		}
		public ITerminalNode RANGE() { return GetToken(AnnotatedAntlr4Parser.RANGE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 112, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; Match(STRING_LITERAL);
			State = 639; Match(RANGE);
			State = 640; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 114, RULE_terminal);
		int _la;
		try {
			State = 650;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 642; Match(TOKEN_REF);
				State = 644;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 643; elementOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 646; Match(STRING_LITERAL);
				State = 648;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 647; elementOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(AnnotatedAntlr4Parser.LT, 0); }
		public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		public ITerminalNode GT() { return GetToken(AnnotatedAntlr4Parser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 116, RULE_elementOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; Match(LT);
			State = 653; elementOption();
			State = 658;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 654; Match(COMMA);
				State = 655; elementOption();
				}
				}
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 661; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 118, RULE_elementOption);
		try {
			State = 670;
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 663; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 664; id();
				State = 665; Match(ASSIGN);
				State = 668;
				switch (TokenStream.La(1)) {
				case TOKEN_REF:
				case RULE_REF:
					{
					State = 666; id();
					}
					break;
				case STRING_LITERAL:
					{
					State = 667; Match(STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 120, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			_la = TokenStream.La(1);
			if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(AnnotatedAntlr4Parser.DOLLAR, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public AnnotationBodyContext annotationBody() {
			return GetRuleContext<AnnotationBodyContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 122, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674; Match(DOLLAR);
			State = 675; qualifiedName();
			State = 677;
			_la = TokenStream.La(1);
			if (_la==LPAREN) {
				{
				State = 676; annotationBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationBodyContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AnnotationAttributeListContext annotationAttributeList() {
			return GetRuleContext<AnnotationAttributeListContext>(0);
		}
		public AnnotationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationBodyContext annotationBody() {
		AnnotationBodyContext _localctx = new AnnotationBodyContext(Context, State);
		EnterRule(_localctx, 124, RULE_annotationBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679; Match(LPAREN);
			State = 683;
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 680; expression();
				}
				break;
			case 2:
				{
				State = 681; expressionList();
				}
				break;
			case 3:
				{
				State = 682; annotationAttributeList();
				}
				break;
			}
			State = 685; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeListContext : ParserRuleContext {
		public AnnotationAttributeContext[] annotationAttribute() {
			return GetRuleContexts<AnnotationAttributeContext>();
		}
		public AnnotationAttributeContext annotationAttribute(int i) {
			return GetRuleContext<AnnotationAttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public AnnotationAttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttributeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttributeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeListContext annotationAttributeList() {
		AnnotationAttributeListContext _localctx = new AnnotationAttributeListContext(Context, State);
		EnterRule(_localctx, 126, RULE_annotationAttributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; annotationAttribute();
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 688; Match(COMMA);
				State = 689; annotationAttribute();
				}
				}
				State = 694;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationAttributeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(AnnotatedAntlr4Parser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AnnotationAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationAttributeContext annotationAttribute() {
		AnnotationAttributeContext _localctx = new AnnotationAttributeContext(Context, State);
		EnterRule(_localctx, 128, RULE_annotationAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695; identifier();
			State = 696; Match(ASSIGN);
			State = 699;
			switch (TokenStream.La(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case TRUE:
			case FALSE:
			case NULL:
			case ID:
			case INTEGER_LITERAL:
			case SCIENTIFIC_LITERAL:
			case STRING_LITERAL:
				{
				State = 697; expression();
				}
				break;
			case LPAREN:
				{
				State = 698; expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(AnnotatedAntlr4Parser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(AnnotatedAntlr4Parser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(AnnotatedAntlr4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AnnotatedAntlr4Parser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 130, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701; Match(LPAREN);
			State = 702; expression();
			State = 707;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 703; Match(COMMA);
				State = 704; expression();
				}
				}
				State = 709;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 710; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(AnnotatedAntlr4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(AnnotatedAntlr4Parser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 132, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; identifier();
			State = 717;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 713; Match(DOT);
					State = 714; identifier();
					}
					} 
				}
				State = 719;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_expression);
		try {
			State = 722;
			switch (TokenStream.La(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case INTEGER_LITERAL:
			case SCIENTIFIC_LITERAL:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 720; literal();
				}
				break;
			case TOKEN_REF:
			case RULE_REF:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 721; qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(AnnotatedAntlr4Parser.INTEGER_LITERAL, 0); }
		public ITerminalNode SCIENTIFIC_LITERAL() { return GetToken(AnnotatedAntlr4Parser.SCIENTIFIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(AnnotatedAntlr4Parser.STRING_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_literal);
		try {
			State = 729;
			switch (TokenStream.La(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 724; nullLiteral();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 725; boolLiteral();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 726; Match(INTEGER_LITERAL);
				}
				break;
			case SCIENTIFIC_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 727; Match(SCIENTIFIC_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 728; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(AnnotatedAntlr4Parser.TOKEN_REF, 0); }
		public ITerminalNode RULE_REF() { return GetToken(AnnotatedAntlr4Parser.RULE_REF, 0); }
		public ITerminalNode ID() { return GetToken(AnnotatedAntlr4Parser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 138, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(AnnotatedAntlr4Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(AnnotatedAntlr4Parser.FALSE, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 140, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			_la = TokenStream.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(AnnotatedAntlr4Parser.NULL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnnotatedAntlr4ParserListener typedListener = listener as IAnnotatedAntlr4ParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnnotatedAntlr4ParserVisitor<TResult> typedVisitor = visitor as IAnnotatedAntlr4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 142, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x42\x2E4\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x3\x2\x5\x2\x94\n\x2\x3\x2\a\x2\x97"+
		"\n\x2\f\x2\xE\x2\x9A\v\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\xA0\n\x2\f\x2\xE"+
		"\x2\xA3\v\x2\x3\x2\x3\x2\a\x2\xA7\n\x2\f\x2\xE\x2\xAA\v\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xB3\n\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x5\x4\xB9\n\x4\x3\x5\x3\x5\a\x5\xBD\n\x5\f\x5\xE\x5\xC0\v\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\xCC\n\a\f\a\xE\a"+
		"\xCF\v\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xD6\n\a\x3\b\x3\b\x3\b\x3\b\a\b"+
		"\xDC\n\b\f\b\xE\b\xDF\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xE8"+
		"\n\t\x3\n\x3\n\x3\n\x3\n\a\n\xEE\n\n\f\n\xE\n\xF1\v\n\x3\n\x5\n\xF4\n"+
		"\n\x3\n\x3\n\x3\v\a\v\xF9\n\v\f\v\xE\v\xFC\v\v\x3\v\x3\v\x3\f\x3\f\x3"+
		"\f\x3\f\x5\f\x104\n\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x5\r\x10C\n\r\x3\xE"+
		"\a\xE\x10F\n\xE\f\xE\xE\xE\x112\v\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x118"+
		"\n\xE\f\xE\xE\xE\x11B\v\xE\x3\xF\a\xF\x11E\n\xF\f\xF\xE\xF\x121\v\xF\x3"+
		"\x10\x3\x10\x5\x10\x125\n\x10\x3\x11\x5\x11\x128\n\x11\x3\x11\a\x11\x12B"+
		"\n\x11\f\x11\xE\x11\x12E\v\x11\x3\x11\x5\x11\x131\n\x11\x3\x11\x3\x11"+
		"\x5\x11\x135\n\x11\x3\x11\x5\x11\x138\n\x11\x3\x11\x5\x11\x13B\n\x11\x3"+
		"\x11\x5\x11\x13E\n\x11\x3\x11\a\x11\x141\n\x11\f\x11\xE\x11\x144\v\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\a\x12\x14C\n\x12\f\x12\xE\x12"+
		"\x14F\v\x12\x3\x12\x5\x12\x152\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x5\x15\x15D\n\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\a\x17\x166\n\x17\f\x17\xE\x17\x169\v\x17\x3"+
		"\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x6\x1A\x173\n\x1A"+
		"\r\x1A\xE\x1A\x174\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\a"+
		"\x1D\x17E\n\x1D\f\x1D\xE\x1D\x181\v\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a"+
		"\x1E\x187\n\x1E\f\x1E\xE\x1E\x18A\v\x1E\x5\x1E\x18C\n\x1E\x3\x1E\x5\x1E"+
		"\x18F\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x5 \x195\n \x3 \a \x198\n \f \xE"+
		" \x19B\v \x3 \x5 \x19E\n \x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\a"+
		"\"\x1AA\n\"\f\"\xE\"\x1AD\v\"\x3#\x3#\x5#\x1B1\n#\x3#\x5#\x1B4\n#\x3$"+
		"\x6$\x1B7\n$\r$\xE$\x1B8\x3%\x3%\x5%\x1BD\n%\x3%\x3%\x5%\x1C1\n%\x3%\x3"+
		"%\x5%\x1C5\n%\x3%\x3%\x5%\x1C9\n%\x5%\x1CB\n%\x3&\x3&\x3&\x3&\x5&\x1D1"+
		"\n&\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\a(\x1DB\n(\f(\xE(\x1DE\v(\x3)"+
		"\x3)\x3)\x3)\x3)\x3)\x5)\x1E6\n)\x3*\x3*\x5*\x1EA\n*\x3+\x3+\x5+\x1EE"+
		"\n+\x3,\x3,\x3,\a,\x1F3\n,\f,\xE,\x1F6\v,\x3-\x5-\x1F9\n-\x3-\a-\x1FC"+
		"\n-\f-\xE-\x1FF\v-\x3.\a.\x202\n.\f.\xE.\x205\v.\x3.\x3.\x3.\x5.\x20A"+
		"\n.\x3.\a.\x20D\n.\f.\xE.\x210\v.\x3.\x3.\x3.\x5.\x215\n.\x3.\x3.\x3."+
		"\x5.\x21A\n.\x5.\x21C\n.\x3/\x3/\x3/\x3/\x5/\x222\n/\x3\x30\x3\x30\x5"+
		"\x30\x226\n\x30\x3\x31\x3\x31\x3\x32\x3\x32\x5\x32\x22C\n\x32\x3\x32\x3"+
		"\x32\x5\x32\x230\n\x32\x3\x32\x3\x32\x5\x32\x234\n\x32\x5\x32\x236\n\x32"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x23F\n\x33\x5"+
		"\x33\x241\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x249"+
		"\n\x34\x5\x34\x24B\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x251\n\x35"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x257\n\x36\f\x36\xE\x36\x25A\v\x36"+
		"\x3\x36\x3\x36\x3\x37\x3\x37\x5\x37\x260\n\x37\x3\x37\x3\x37\x5\x37\x264"+
		"\n\x37\x3\x37\x3\x37\x5\x37\x268\n\x37\x3\x38\x3\x38\x5\x38\x26C\n\x38"+
		"\x3\x38\a\x38\x26F\n\x38\f\x38\xE\x38\x272\v\x38\x3\x38\x5\x38\x275\n"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x5\x39\x27C\n\x39\x3\x39\x5\x39"+
		"\x27F\n\x39\x3:\x3:\x3:\x3:\x3;\x3;\x5;\x287\n;\x3;\x3;\x5;\x28B\n;\x5"+
		";\x28D\n;\x3<\x3<\x3<\x3<\a<\x293\n<\f<\xE<\x296\v<\x3<\x3<\x3=\x3=\x3"+
		"=\x3=\x3=\x5=\x29F\n=\x5=\x2A1\n=\x3>\x3>\x3?\x3?\x3?\x5?\x2A8\n?\x3@"+
		"\x3@\x3@\x3@\x5@\x2AE\n@\x3@\x3@\x3\x41\x3\x41\x3\x41\a\x41\x2B5\n\x41"+
		"\f\x41\xE\x41\x2B8\v\x41\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x2BE\n\x42"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\a\x43\x2C4\n\x43\f\x43\xE\x43\x2C7\v\x43"+
		"\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\a\x44\x2CE\n\x44\f\x44\xE\x44\x2D1"+
		"\v\x44\x3\x45\x3\x45\x5\x45\x2D5\n\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x5\x46\x2DC\n\x46\x3G\x3G\x3H\x3H\x3I\x3I\x3I\x2\x2J\x2\x4\x6\b\n"+
		"\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>"+
		"@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88"+
		"\x8A\x8C\x8E\x90\x2\a\x4\x2\v\v\xF\x11\x4\x2%%))\x3\x2\x3\x4\x4\x2\x3"+
		"\x4\x35\x35\x3\x2\x18\x19\x316\x2\x93\x3\x2\x2\x2\x4\xB2\x3\x2\x2\x2\x6"+
		"\xB8\x3\x2\x2\x2\b\xBA\x3\x2\x2\x2\n\xC3\x3\x2\x2\x2\f\xD5\x3\x2\x2\x2"+
		"\xE\xD7\x3\x2\x2\x2\x10\xE7\x3\x2\x2\x2\x12\xE9\x3\x2\x2\x2\x14\xFA\x3"+
		"\x2\x2\x2\x16\xFF\x3\x2\x2\x2\x18\x10B\x3\x2\x2\x2\x1A\x110\x3\x2\x2\x2"+
		"\x1C\x11F\x3\x2\x2\x2\x1E\x124\x3\x2\x2\x2 \x127\x3\x2\x2\x2\"\x14D\x3"+
		"\x2\x2\x2$\x153\x3\x2\x2\x2&\x157\x3\x2\x2\x2(\x15C\x3\x2\x2\x2*\x15E"+
		"\x3\x2\x2\x2,\x161\x3\x2\x2\x2.\x16A\x3\x2\x2\x2\x30\x16D\x3\x2\x2\x2"+
		"\x32\x172\x3\x2\x2\x2\x34\x176\x3\x2\x2\x2\x36\x178\x3\x2\x2\x2\x38\x17A"+
		"\x3\x2\x2\x2:\x182\x3\x2\x2\x2<\x190\x3\x2\x2\x2>\x194\x3\x2\x2\x2@\x1A4"+
		"\x3\x2\x2\x2\x42\x1A6\x3\x2\x2\x2\x44\x1B3\x3\x2\x2\x2\x46\x1B6\x3\x2"+
		"\x2\x2H\x1CA\x3\x2\x2\x2J\x1CC\x3\x2\x2\x2L\x1D2\x3\x2\x2\x2N\x1D6\x3"+
		"\x2\x2\x2P\x1E5\x3\x2\x2\x2R\x1E9\x3\x2\x2\x2T\x1ED\x3\x2\x2\x2V\x1EF"+
		"\x3\x2\x2\x2X\x1F8\x3\x2\x2\x2Z\x21B\x3\x2\x2\x2\\\x21D\x3\x2\x2\x2^\x223"+
		"\x3\x2\x2\x2`\x227\x3\x2\x2\x2\x62\x235\x3\x2\x2\x2\x64\x240\x3\x2\x2"+
		"\x2\x66\x24A\x3\x2\x2\x2h\x250\x3\x2\x2\x2j\x252\x3\x2\x2\x2l\x267\x3"+
		"\x2\x2\x2n\x269\x3\x2\x2\x2p\x279\x3\x2\x2\x2r\x280\x3\x2\x2\x2t\x28C"+
		"\x3\x2\x2\x2v\x28E\x3\x2\x2\x2x\x2A0\x3\x2\x2\x2z\x2A2\x3\x2\x2\x2|\x2A4"+
		"\x3\x2\x2\x2~\x2A9\x3\x2\x2\x2\x80\x2B1\x3\x2\x2\x2\x82\x2B9\x3\x2\x2"+
		"\x2\x84\x2BF\x3\x2\x2\x2\x86\x2CA\x3\x2\x2\x2\x88\x2D4\x3\x2\x2\x2\x8A"+
		"\x2DB\x3\x2\x2\x2\x8C\x2DD\x3\x2\x2\x2\x8E\x2DF\x3\x2\x2\x2\x90\x2E1\x3"+
		"\x2\x2\x2\x92\x94\a\x41\x2\x2\x93\x92\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2"+
		"\x94\x98\x3\x2\x2\x2\x95\x97\x5|?\x2\x96\x95\x3\x2\x2\x2\x97\x9A\x3\x2"+
		"\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9B\x3\x2\x2\x2\x9A"+
		"\x98\x3\x2\x2\x2\x9B\x9C\x5\x4\x3\x2\x9C\x9D\x5z>\x2\x9D\xA1\a\x1E\x2"+
		"\x2\x9E\xA0\x5\x6\x4\x2\x9F\x9E\x3\x2\x2\x2\xA0\xA3\x3\x2\x2\x2\xA1\x9F"+
		"\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4\x3\x2\x2\x2\xA3\xA1\x3\x2\x2"+
		"\x2\xA4\xA8\x5\x1C\xF\x2\xA5\xA7\x5\x1A\xE\x2\xA6\xA5\x3\x2\x2\x2\xA7"+
		"\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAB\x3\x2"+
		"\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xAC\a\x2\x2\x3\xAC\x3\x3\x2\x2\x2\xAD\xAE"+
		"\a\f\x2\x2\xAE\xB3\a\xE\x2\x2\xAF\xB0\a\r\x2\x2\xB0\xB3\a\xE\x2\x2\xB1"+
		"\xB3\a\xE\x2\x2\xB2\xAD\x3\x2\x2\x2\xB2\xAF\x3\x2\x2\x2\xB2\xB1\x3\x2"+
		"\x2\x2\xB3\x5\x3\x2\x2\x2\xB4\xB9\x5\b\x5\x2\xB5\xB9\x5\xE\b\x2\xB6\xB9"+
		"\x5\x12\n\x2\xB7\xB9\x5\x16\f\x2\xB8\xB4\x3\x2\x2\x2\xB8\xB5\x3\x2\x2"+
		"\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB7\x3\x2\x2\x2\xB9\a\x3\x2\x2\x2\xBA\xBE"+
		"\a\b\x2\x2\xBB\xBD\x5\n\x6\x2\xBC\xBB\x3\x2\x2\x2\xBD\xC0\x3\x2\x2\x2"+
		"\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC1\x3\x2\x2\x2\xC0\xBE\x3"+
		"\x2\x2\x2\xC1\xC2\a\x32\x2\x2\xC2\t\x3\x2\x2\x2\xC3\xC4\x5z>\x2\xC4\xC5"+
		"\a%\x2\x2\xC5\xC6\x5\f\a\x2\xC6\xC7\a\x1E\x2\x2\xC7\v\x3\x2\x2\x2\xC8"+
		"\xCD\x5z>\x2\xC9\xCA\a,\x2\x2\xCA\xCC\x5z>\x2\xCB\xC9\x3\x2\x2\x2\xCC"+
		"\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xD6\x3\x2"+
		"\x2\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD6\x5\x8EH\x2\xD1\xD6\x5\x90I\x2\xD2\xD6"+
		"\a\x39\x2\x2\xD3\xD6\a<\x2\x2\xD4\xD6\a\x36\x2\x2\xD5\xC8\x3\x2\x2\x2"+
		"\xD5\xD0\x3\x2\x2\x2\xD5\xD1\x3\x2\x2\x2\xD5\xD2\x3\x2\x2\x2\xD5\xD3\x3"+
		"\x2\x2\x2\xD5\xD4\x3\x2\x2\x2\xD6\r\x3\x2\x2\x2\xD7\xD8\a\n\x2\x2\xD8"+
		"\xDD\x5\x10\t\x2\xD9\xDA\a\x1D\x2\x2\xDA\xDC\x5\x10\t\x2\xDB\xD9\x3\x2"+
		"\x2\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE"+
		"\xE0\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xE0\xE1\a\x1E\x2\x2\xE1\xF\x3\x2"+
		"\x2\x2\xE2\xE3\x5z>\x2\xE3\xE4\a%\x2\x2\xE4\xE5\x5z>\x2\xE5\xE8\x3\x2"+
		"\x2\x2\xE6\xE8\x5z>\x2\xE7\xE2\x3\x2\x2\x2\xE7\xE6\x3\x2\x2\x2\xE8\x11"+
		"\x3\x2\x2\x2\xE9\xEA\a\t\x2\x2\xEA\xEF\x5\x14\v\x2\xEB\xEC\a\x1D\x2\x2"+
		"\xEC\xEE\x5\x14\v\x2\xED\xEB\x3\x2\x2\x2\xEE\xF1\x3\x2\x2\x2\xEF\xED\x3"+
		"\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\xF3\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2"+
		"\xF2\xF4\a\x1D\x2\x2\xF3\xF2\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\x3"+
		"\x2\x2\x2\xF5\xF6\a\x32\x2\x2\xF6\x13\x3\x2\x2\x2\xF7\xF9\x5|?\x2\xF8"+
		"\xF7\x3\x2\x2\x2\xF9\xFC\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFA\xFB\x3\x2"+
		"\x2\x2\xFB\xFD\x3\x2\x2\x2\xFC\xFA\x3\x2\x2\x2\xFD\xFE\x5z>\x2\xFE\x15"+
		"\x3\x2\x2\x2\xFF\x103\a.\x2\x2\x100\x101\x5\x18\r\x2\x101\x102\a\x1C\x2"+
		"\x2\x102\x104\x3\x2\x2\x2\x103\x100\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2"+
		"\x104\x105\x3\x2\x2\x2\x105\x106\x5z>\x2\x106\x107\a<\x2\x2\x107\x17\x3"+
		"\x2\x2\x2\x108\x10C\x5z>\x2\x109\x10C\a\f\x2\x2\x10A\x10C\a\r\x2\x2\x10B"+
		"\x108\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10B\x10A\x3\x2\x2\x2\x10C\x19"+
		"\x3\x2\x2\x2\x10D\x10F\x5|?\x2\x10E\x10D\x3\x2\x2\x2\x10F\x112\x3\x2\x2"+
		"\x2\x110\x10E\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111\x113\x3\x2\x2\x2"+
		"\x112\x110\x3\x2\x2\x2\x113\x114\a\x17\x2\x2\x114\x115\x5z>\x2\x115\x119"+
		"\a\x1E\x2\x2\x116\x118\x5> \x2\x117\x116\x3\x2\x2\x2\x118\x11B\x3\x2\x2"+
		"\x2\x119\x117\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x1B\x3\x2\x2\x2\x11B"+
		"\x119\x3\x2\x2\x2\x11C\x11E\x5\x1E\x10\x2\x11D\x11C\x3\x2\x2\x2\x11E\x121"+
		"\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x1D\x3\x2"+
		"\x2\x2\x121\x11F\x3\x2\x2\x2\x122\x125\x5 \x11\x2\x123\x125\x5> \x2\x124"+
		"\x122\x3\x2\x2\x2\x124\x123\x3\x2\x2\x2\x125\x1F\x3\x2\x2\x2\x126\x128"+
		"\a\x41\x2\x2\x127\x126\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x12C\x3"+
		"\x2\x2\x2\x129\x12B\x5|?\x2\x12A\x129\x3\x2\x2\x2\x12B\x12E\x3\x2\x2\x2"+
		"\x12C\x12A\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x130\x3\x2\x2\x2\x12E"+
		"\x12C\x3\x2\x2\x2\x12F\x131\x5\x32\x1A\x2\x130\x12F\x3\x2\x2\x2\x130\x131"+
		"\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x134\a\x4\x2\x2\x133\x135\a>\x2"+
		"\x2\x134\x133\x3\x2\x2\x2\x134\x135\x3\x2\x2\x2\x135\x137\x3\x2\x2\x2"+
		"\x136\x138\x5*\x16\x2\x137\x136\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138"+
		"\x13A\x3\x2\x2\x2\x139\x13B\x5,\x17\x2\x13A\x139\x3\x2\x2\x2\x13A\x13B"+
		"\x3\x2\x2\x2\x13B\x13D\x3\x2\x2\x2\x13C\x13E\x5.\x18\x2\x13D\x13C\x3\x2"+
		"\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x142\x3\x2\x2\x2\x13F\x141\x5(\x15\x2"+
		"\x140\x13F\x3\x2\x2\x2\x141\x144\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2\x142"+
		"\x143\x3\x2\x2\x2\x143\x145\x3\x2\x2\x2\x144\x142\x3\x2\x2\x2\x145\x146"+
		"\a\x1B\x2\x2\x146\x147\x5\x36\x1C\x2\x147\x148\a\x1E\x2\x2\x148\x149\x5"+
		"\"\x12\x2\x149!\x3\x2\x2\x2\x14A\x14C\x5$\x13\x2\x14B\x14A\x3\x2\x2\x2"+
		"\x14C\x14F\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E"+
		"\x151\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x150\x152\x5&\x14\x2\x151\x150"+
		"\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152#\x3\x2\x2\x2\x153\x154\a\x15\x2"+
		"\x2\x154\x155\a>\x2\x2\x155\x156\a<\x2\x2\x156%\x3\x2\x2\x2\x157\x158"+
		"\a\x16\x2\x2\x158\x159\a<\x2\x2\x159\'\x3\x2\x2\x2\x15A\x15D\x5\b\x5\x2"+
		"\x15B\x15D\x5\x30\x19\x2\x15C\x15A\x3\x2\x2\x2\x15C\x15B\x3\x2\x2\x2\x15D"+
		")\x3\x2\x2\x2\x15E\x15F\a\x12\x2\x2\x15F\x160\a>\x2\x2\x160+\x3\x2\x2"+
		"\x2\x161\x162\a\x14\x2\x2\x162\x167\x5z>\x2\x163\x164\a\x1D\x2\x2\x164"+
		"\x166\x5z>\x2\x165\x163\x3\x2\x2\x2\x166\x169\x3\x2\x2\x2\x167\x165\x3"+
		"\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168-\x3\x2\x2\x2\x169\x167\x3\x2\x2\x2"+
		"\x16A\x16B\a\x13\x2\x2\x16B\x16C\a>\x2\x2\x16C/\x3\x2\x2\x2\x16D\x16E"+
		"\a.\x2\x2\x16E\x16F\x5z>\x2\x16F\x170\a<\x2\x2\x170\x31\x3\x2\x2\x2\x171"+
		"\x173\x5\x34\x1B\x2\x172\x171\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x172"+
		"\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x33\x3\x2\x2\x2\x176\x177\t\x2"+
		"\x2\x2\x177\x35\x3\x2\x2\x2\x178\x179\x5\x38\x1D\x2\x179\x37\x3\x2\x2"+
		"\x2\x17A\x17F\x5:\x1E\x2\x17B\x17C\a*\x2\x2\x17C\x17E\x5:\x1E\x2\x17D"+
		"\x17B\x3\x2\x2\x2\x17E\x181\x3\x2\x2\x2\x17F\x17D\x3\x2\x2\x2\x17F\x180"+
		"\x3\x2\x2\x2\x180\x39\x3\x2\x2\x2\x181\x17F\x3\x2\x2\x2\x182\x18B\x5X"+
		"-\x2\x183\x184\a/\x2\x2\x184\x188\x5z>\x2\x185\x187\x5|?\x2\x186\x185"+
		"\x3\x2\x2\x2\x187\x18A\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x188\x189\x3"+
		"\x2\x2\x2\x189\x18C\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18B\x183\x3\x2"+
		"\x2\x2\x18B\x18C\x3\x2\x2\x2\x18C\x18E\x3\x2\x2\x2\x18D\x18F\x5<\x1F\x2"+
		"\x18E\x18D\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F;\x3\x2\x2\x2\x190\x191"+
		"\a!\x2\x2\x191\x192\a<\x2\x2\x192=\x3\x2\x2\x2\x193\x195\a\x41\x2\x2\x194"+
		"\x193\x3\x2\x2\x2\x194\x195\x3\x2\x2\x2\x195\x199\x3\x2\x2\x2\x196\x198"+
		"\x5|?\x2\x197\x196\x3\x2\x2\x2\x198\x19B\x3\x2\x2\x2\x199\x197\x3\x2\x2"+
		"\x2\x199\x19A\x3\x2\x2\x2\x19A\x19D\x3\x2\x2\x2\x19B\x199\x3\x2\x2\x2"+
		"\x19C\x19E\a\v\x2\x2\x19D\x19C\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E"+
		"\x19F\x3\x2\x2\x2\x19F\x1A0\a\x3\x2\x2\x1A0\x1A1\a\x1B\x2\x2\x1A1\x1A2"+
		"\x5@!\x2\x1A2\x1A3\a\x1E\x2\x2\x1A3?\x3\x2\x2\x2\x1A4\x1A5\x5\x42\"\x2"+
		"\x1A5\x41\x3\x2\x2\x2\x1A6\x1AB\x5\x44#\x2\x1A7\x1A8\a*\x2\x2\x1A8\x1AA"+
		"\x5\x44#\x2\x1A9\x1A7\x3\x2\x2\x2\x1AA\x1AD\x3\x2\x2\x2\x1AB\x1A9\x3\x2"+
		"\x2\x2\x1AB\x1AC\x3\x2\x2\x2\x1AC\x43\x3\x2\x2\x2\x1AD\x1AB\x3\x2\x2\x2"+
		"\x1AE\x1B0\x5\x46$\x2\x1AF\x1B1\x5N(\x2\x1B0\x1AF\x3\x2\x2\x2\x1B0\x1B1"+
		"\x3\x2\x2\x2\x1B1\x1B4\x3\x2\x2\x2\x1B2\x1B4\x3\x2\x2\x2\x1B3\x1AE\x3"+
		"\x2\x2\x2\x1B3\x1B2\x3\x2\x2\x2\x1B4\x45\x3\x2\x2\x2\x1B5\x1B7\x5H%\x2"+
		"\x1B6\x1B5\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8\x1B6\x3\x2\x2\x2\x1B8"+
		"\x1B9\x3\x2\x2\x2\x1B9G\x3\x2\x2\x2\x1BA\x1BC\x5J&\x2\x1BB\x1BD\x5\x62"+
		"\x32\x2\x1BC\x1BB\x3\x2\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BD\x1CB\x3\x2\x2"+
		"\x2\x1BE\x1C0\x5\x64\x33\x2\x1BF\x1C1\x5\x62\x32\x2\x1C0\x1BF\x3\x2\x2"+
		"\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1CB\x3\x2\x2\x2\x1C2\x1C4\x5L\'\x2\x1C3"+
		"\x1C5\x5\x62\x32\x2\x1C4\x1C3\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1CB"+
		"\x3\x2\x2\x2\x1C6\x1C8\a<\x2\x2\x1C7\x1C9\a&\x2\x2\x1C8\x1C7\x3\x2\x2"+
		"\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CB\x3\x2\x2\x2\x1CA\x1BA\x3\x2\x2\x2"+
		"\x1CA\x1BE\x3\x2\x2\x2\x1CA\x1C2\x3\x2\x2\x2\x1CA\x1C6\x3\x2\x2\x2\x1CB"+
		"I\x3\x2\x2\x2\x1CC\x1CD\x5z>\x2\x1CD\x1D0\t\x3\x2\x2\x1CE\x1D1\x5\x64"+
		"\x33\x2\x1CF\x1D1\x5n\x38\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1CF\x3\x2\x2"+
		"\x2\x1D1K\x3\x2\x2\x2\x1D2\x1D3\a\x1F\x2\x2\x1D3\x1D4\x5\x42\"\x2\x1D4"+
		"\x1D5\a \x2\x2\x1D5M\x3\x2\x2\x2\x1D6\x1D7\a!\x2\x2\x1D7\x1DC\x5P)\x2"+
		"\x1D8\x1D9\a\x1D\x2\x2\x1D9\x1DB\x5P)\x2\x1DA\x1D8\x3\x2\x2\x2\x1DB\x1DE"+
		"\x3\x2\x2\x2\x1DC\x1DA\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2\x1DDO\x3\x2\x2"+
		"\x2\x1DE\x1DC\x3\x2\x2\x2\x1DF\x1E0\x5R*\x2\x1E0\x1E1\a\x1F\x2\x2\x1E1"+
		"\x1E2\x5T+\x2\x1E2\x1E3\a \x2\x2\x1E3\x1E6\x3\x2\x2\x2\x1E4\x1E6\x5R*"+
		"\x2\x1E5\x1DF\x3\x2\x2\x2\x1E5\x1E4\x3\x2\x2\x2\x1E6Q\x3\x2\x2\x2\x1E7"+
		"\x1EA\x5z>\x2\x1E8\x1EA\a\x17\x2\x2\x1E9\x1E7\x3\x2\x2\x2\x1E9\x1E8\x3"+
		"\x2\x2\x2\x1EAS\x3\x2\x2\x2\x1EB\x1EE\x5z>\x2\x1EC\x1EE\a\x36\x2\x2\x1ED"+
		"\x1EB\x3\x2\x2\x2\x1ED\x1EC\x3\x2\x2\x2\x1EEU\x3\x2\x2\x2\x1EF\x1F4\x5"+
		"X-\x2\x1F0\x1F1\a*\x2\x2\x1F1\x1F3\x5X-\x2\x1F2\x1F0\x3\x2\x2\x2\x1F3"+
		"\x1F6\x3\x2\x2\x2\x1F4\x1F2\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5W\x3"+
		"\x2\x2\x2\x1F6\x1F4\x3\x2\x2\x2\x1F7\x1F9\x5v<\x2\x1F8\x1F7\x3\x2\x2\x2"+
		"\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1FD\x3\x2\x2\x2\x1FA\x1FC\x5Z.\x2\x1FB\x1FA"+
		"\x3\x2\x2\x2\x1FC\x1FF\x3\x2\x2\x2\x1FD\x1FB\x3\x2\x2\x2\x1FD\x1FE\x3"+
		"\x2\x2\x2\x1FEY\x3\x2\x2\x2\x1FF\x1FD\x3\x2\x2\x2\x200\x202\x5|?\x2\x201"+
		"\x200\x3\x2\x2\x2\x202\x205\x3\x2\x2\x2\x203\x201\x3\x2\x2\x2\x203\x204"+
		"\x3\x2\x2\x2\x204\x206\x3\x2\x2\x2\x205\x203\x3\x2\x2\x2\x206\x209\x5"+
		"\\/\x2\x207\x20A\x5\x62\x32\x2\x208\x20A\x3\x2\x2\x2\x209\x207\x3\x2\x2"+
		"\x2\x209\x208\x3\x2\x2\x2\x20A\x21C\x3\x2\x2\x2\x20B\x20D\x5|?\x2\x20C"+
		"\x20B\x3\x2\x2\x2\x20D\x210\x3\x2\x2\x2\x20E\x20C\x3\x2\x2\x2\x20E\x20F"+
		"\x3\x2\x2\x2\x20F\x211\x3\x2\x2\x2\x210\x20E\x3\x2\x2\x2\x211\x214\x5"+
		"\x66\x34\x2\x212\x215\x5\x62\x32\x2\x213\x215\x3\x2\x2\x2\x214\x212\x3"+
		"\x2\x2\x2\x214\x213\x3\x2\x2\x2\x215\x21C\x3\x2\x2\x2\x216\x21C\x5^\x30"+
		"\x2\x217\x219\a<\x2\x2\x218\x21A\a&\x2\x2\x219\x218\x3\x2\x2\x2\x219\x21A"+
		"\x3\x2\x2\x2\x21A\x21C\x3\x2\x2\x2\x21B\x203\x3\x2\x2\x2\x21B\x20E\x3"+
		"\x2\x2\x2\x21B\x216\x3\x2\x2\x2\x21B\x217\x3\x2\x2\x2\x21C[\x3\x2\x2\x2"+
		"\x21D\x21E\x5z>\x2\x21E\x221\t\x3\x2\x2\x21F\x222\x5\x66\x34\x2\x220\x222"+
		"\x5n\x38\x2\x221\x21F\x3\x2\x2\x2\x221\x220\x3\x2\x2\x2\x222]\x3\x2\x2"+
		"\x2\x223\x225\x5n\x38\x2\x224\x226\x5`\x31\x2\x225\x224\x3\x2\x2\x2\x225"+
		"\x226\x3\x2\x2\x2\x226_\x3\x2\x2\x2\x227\x228\x5\x62\x32\x2\x228\x61\x3"+
		"\x2\x2\x2\x229\x22B\a&\x2\x2\x22A\x22C\a&\x2\x2\x22B\x22A\x3\x2\x2\x2"+
		"\x22B\x22C\x3\x2\x2\x2\x22C\x236\x3\x2\x2\x2\x22D\x22F\a\'\x2\x2\x22E"+
		"\x230\a&\x2\x2\x22F\x22E\x3\x2\x2\x2\x22F\x230\x3\x2\x2\x2\x230\x236\x3"+
		"\x2\x2\x2\x231\x233\a(\x2\x2\x232\x234\a&\x2\x2\x233\x232\x3\x2\x2\x2"+
		"\x233\x234\x3\x2\x2\x2\x234\x236\x3\x2\x2\x2\x235\x229\x3\x2\x2\x2\x235"+
		"\x22D\x3\x2\x2\x2\x235\x231\x3\x2\x2\x2\x236\x63\x3\x2\x2\x2\x237\x241"+
		"\x5r:\x2\x238\x241\x5t;\x2\x239\x241\a\x4\x2\x2\x23A\x241\x5h\x35\x2\x23B"+
		"\x241\a\x5\x2\x2\x23C\x23E\a,\x2\x2\x23D\x23F\x5v<\x2\x23E\x23D\x3\x2"+
		"\x2\x2\x23E\x23F\x3\x2\x2\x2\x23F\x241\x3\x2\x2\x2\x240\x237\x3\x2\x2"+
		"\x2\x240\x238\x3\x2\x2\x2\x240\x239\x3\x2\x2\x2\x240\x23A\x3\x2\x2\x2"+
		"\x240\x23B\x3\x2\x2\x2\x240\x23C\x3\x2\x2\x2\x241\x65\x3\x2\x2\x2\x242"+
		"\x24B\x5r:\x2\x243\x24B\x5t;\x2\x244\x24B\x5p\x39\x2\x245\x24B\x5h\x35"+
		"\x2\x246\x248\a,\x2\x2\x247\x249\x5v<\x2\x248\x247\x3\x2\x2\x2\x248\x249"+
		"\x3\x2\x2\x2\x249\x24B\x3\x2\x2\x2\x24A\x242\x3\x2\x2\x2\x24A\x243\x3"+
		"\x2\x2\x2\x24A\x244\x3\x2\x2\x2\x24A\x245\x3\x2\x2\x2\x24A\x246\x3\x2"+
		"\x2\x2\x24Bg\x3\x2\x2\x2\x24C\x24D\a\x30\x2\x2\x24D\x251\x5l\x37\x2\x24E"+
		"\x24F\a\x30\x2\x2\x24F\x251\x5j\x36\x2\x250\x24C\x3\x2\x2\x2\x250\x24E"+
		"\x3\x2\x2\x2\x251i\x3\x2\x2\x2\x252\x253\a\x1F\x2\x2\x253\x258\x5l\x37"+
		"\x2\x254\x255\a*\x2\x2\x255\x257\x5l\x37\x2\x256\x254\x3\x2\x2\x2\x257"+
		"\x25A\x3\x2\x2\x2\x258\x256\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259\x25B"+
		"\x3\x2\x2\x2\x25A\x258\x3\x2\x2\x2\x25B\x25C\a \x2\x2\x25Ck\x3\x2\x2\x2"+
		"\x25D\x25F\a\x3\x2\x2\x25E\x260\x5v<\x2\x25F\x25E\x3\x2\x2\x2\x25F\x260"+
		"\x3\x2\x2\x2\x260\x268\x3\x2\x2\x2\x261\x263\a\x39\x2\x2\x262\x264\x5"+
		"v<\x2\x263\x262\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2\x264\x268\x3\x2\x2\x2"+
		"\x265\x268\x5r:\x2\x266\x268\a\x5\x2\x2\x267\x25D\x3\x2\x2\x2\x267\x261"+
		"\x3\x2\x2\x2\x267\x265\x3\x2\x2\x2\x267\x266\x3\x2\x2\x2\x268m\x3\x2\x2"+
		"\x2\x269\x274\a\x1F\x2\x2\x26A\x26C\x5\b\x5\x2\x26B\x26A\x3\x2\x2\x2\x26B"+
		"\x26C\x3\x2\x2\x2\x26C\x270\x3\x2\x2\x2\x26D\x26F\x5\x30\x19\x2\x26E\x26D"+
		"\x3\x2\x2\x2\x26F\x272\x3\x2\x2\x2\x270\x26E\x3\x2\x2\x2\x270\x271\x3"+
		"\x2\x2\x2\x271\x273\x3\x2\x2\x2\x272\x270\x3\x2\x2\x2\x273\x275\a\x1B"+
		"\x2\x2\x274\x26B\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x276\x3\x2\x2"+
		"\x2\x276\x277\x5V,\x2\x277\x278\a \x2\x2\x278o\x3\x2\x2\x2\x279\x27B\a"+
		"\x4\x2\x2\x27A\x27C\a>\x2\x2\x27B\x27A\x3\x2\x2\x2\x27B\x27C\x3\x2\x2"+
		"\x2\x27C\x27E\x3\x2\x2\x2\x27D\x27F\x5v<\x2\x27E\x27D\x3\x2\x2\x2\x27E"+
		"\x27F\x3\x2\x2\x2\x27Fq\x3\x2\x2\x2\x280\x281\a\x39\x2\x2\x281\x282\a"+
		"-\x2\x2\x282\x283\a\x39\x2\x2\x283s\x3\x2\x2\x2\x284\x286\a\x3\x2\x2\x285"+
		"\x287\x5v<\x2\x286\x285\x3\x2\x2\x2\x286\x287\x3\x2\x2\x2\x287\x28D\x3"+
		"\x2\x2\x2\x288\x28A\a\x39\x2\x2\x289\x28B\x5v<\x2\x28A\x289\x3\x2\x2\x2"+
		"\x28A\x28B\x3\x2\x2\x2\x28B\x28D\x3\x2\x2\x2\x28C\x284\x3\x2\x2\x2\x28C"+
		"\x288\x3\x2\x2\x2\x28Du\x3\x2\x2\x2\x28E\x28F\a#\x2\x2\x28F\x294\x5x="+
		"\x2\x290\x291\a\x1D\x2\x2\x291\x293\x5x=\x2\x292\x290\x3\x2\x2\x2\x293"+
		"\x296\x3\x2\x2\x2\x294\x292\x3\x2\x2\x2\x294\x295\x3\x2\x2\x2\x295\x297"+
		"\x3\x2\x2\x2\x296\x294\x3\x2\x2\x2\x297\x298\a$\x2\x2\x298w\x3\x2\x2\x2"+
		"\x299\x2A1\x5z>\x2\x29A\x29B\x5z>\x2\x29B\x29E\a%\x2\x2\x29C\x29F\x5z"+
		">\x2\x29D\x29F\a\x39\x2\x2\x29E\x29C\x3\x2\x2\x2\x29E\x29D\x3\x2\x2\x2"+
		"\x29F\x2A1\x3\x2\x2\x2\x2A0\x299\x3\x2\x2\x2\x2A0\x29A\x3\x2\x2\x2\x2A1"+
		"y\x3\x2\x2\x2\x2A2\x2A3\t\x4\x2\x2\x2A3{\x3\x2\x2\x2\x2A4\x2A5\a+\x2\x2"+
		"\x2A5\x2A7\x5\x86\x44\x2\x2A6\x2A8\x5~@\x2\x2A7\x2A6\x3\x2\x2\x2\x2A7"+
		"\x2A8\x3\x2\x2\x2\x2A8}\x3\x2\x2\x2\x2A9\x2AD\a\x1F\x2\x2\x2AA\x2AE\x5"+
		"\x88\x45\x2\x2AB\x2AE\x5\x84\x43\x2\x2AC\x2AE\x5\x80\x41\x2\x2AD\x2AA"+
		"\x3\x2\x2\x2\x2AD\x2AB\x3\x2\x2\x2\x2AD\x2AC\x3\x2\x2\x2\x2AE\x2AF\x3"+
		"\x2\x2\x2\x2AF\x2B0\a \x2\x2\x2B0\x7F\x3\x2\x2\x2\x2B1\x2B6\x5\x82\x42"+
		"\x2\x2B2\x2B3\a\x1D\x2\x2\x2B3\x2B5\x5\x82\x42\x2\x2B4\x2B2\x3\x2\x2\x2"+
		"\x2B5\x2B8\x3\x2\x2\x2\x2B6\x2B4\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7"+
		"\x81\x3\x2\x2\x2\x2B8\x2B6\x3\x2\x2\x2\x2B9\x2BA\x5\x8CG\x2\x2BA\x2BD"+
		"\a%\x2\x2\x2BB\x2BE\x5\x88\x45\x2\x2BC\x2BE\x5\x84\x43\x2\x2BD\x2BB\x3"+
		"\x2\x2\x2\x2BD\x2BC\x3\x2\x2\x2\x2BE\x83\x3\x2\x2\x2\x2BF\x2C0\a\x1F\x2"+
		"\x2\x2C0\x2C5\x5\x88\x45\x2\x2C1\x2C2\a\x1D\x2\x2\x2C2\x2C4\x5\x88\x45"+
		"\x2\x2C3\x2C1\x3\x2\x2\x2\x2C4\x2C7\x3\x2\x2\x2\x2C5\x2C3\x3\x2\x2\x2"+
		"\x2C5\x2C6\x3\x2\x2\x2\x2C6\x2C8\x3\x2\x2\x2\x2C7\x2C5\x3\x2\x2\x2\x2C8"+
		"\x2C9\a \x2\x2\x2C9\x85\x3\x2\x2\x2\x2CA\x2CF\x5\x8CG\x2\x2CB\x2CC\a,"+
		"\x2\x2\x2CC\x2CE\x5\x8CG\x2\x2CD\x2CB\x3\x2\x2\x2\x2CE\x2D1\x3\x2\x2\x2"+
		"\x2CF\x2CD\x3\x2\x2\x2\x2CF\x2D0\x3\x2\x2\x2\x2D0\x87\x3\x2\x2\x2\x2D1"+
		"\x2CF\x3\x2\x2\x2\x2D2\x2D5\x5\x8A\x46\x2\x2D3\x2D5\x5\x86\x44\x2\x2D4"+
		"\x2D2\x3\x2\x2\x2\x2D4\x2D3\x3\x2\x2\x2\x2D5\x89\x3\x2\x2\x2\x2D6\x2DC"+
		"\x5\x90I\x2\x2D7\x2DC\x5\x8EH\x2\x2D8\x2DC\a\x36\x2\x2\x2D9\x2DC\a\x38"+
		"\x2\x2\x2DA\x2DC\a\x39\x2\x2\x2DB\x2D6\x3\x2\x2\x2\x2DB\x2D7\x3\x2\x2"+
		"\x2\x2DB\x2D8\x3\x2\x2\x2\x2DB\x2D9\x3\x2\x2\x2\x2DB\x2DA\x3\x2\x2\x2"+
		"\x2DC\x8B\x3\x2\x2\x2\x2DD\x2DE\t\x5\x2\x2\x2DE\x8D\x3\x2\x2\x2\x2DF\x2E0"+
		"\t\x6\x2\x2\x2E0\x8F\x3\x2\x2\x2\x2E1\x2E2\a\x1A\x2\x2\x2E2\x91\x3\x2"+
		"\x2\x2\x63\x93\x98\xA1\xA8\xB2\xB8\xBE\xCD\xD5\xDD\xE7\xEF\xF3\xFA\x103"+
		"\x10B\x110\x119\x11F\x124\x127\x12C\x130\x134\x137\x13A\x13D\x142\x14D"+
		"\x151\x15C\x167\x174\x17F\x188\x18B\x18E\x194\x199\x19D\x1AB\x1B0\x1B3"+
		"\x1B8\x1BC\x1C0\x1C4\x1C8\x1CA\x1D0\x1DC\x1E5\x1E9\x1ED\x1F4\x1F8\x1FD"+
		"\x203\x209\x20E\x214\x219\x21B\x221\x225\x22B\x22F\x233\x235\x23E\x240"+
		"\x248\x24A\x250\x258\x25F\x263\x267\x26B\x270\x274\x27B\x27E\x286\x28A"+
		"\x28C\x294\x29E\x2A0\x2A7\x2AD\x2B6\x2BD\x2C5\x2CF\x2D4\x2DB";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Compiler
