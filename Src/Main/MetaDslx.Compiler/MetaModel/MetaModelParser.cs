//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\dy3g25jl.fox\MetaModelParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Compiler {

using MetaDslx.Core;

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class MetaModelParser : Parser {
	public const int
		KNamespace=1, KUsing=2, KMetamodel=3, KExtern=4, KTypeDef=5, KAbstract=6, 
		KClass=7, KEnum=8, KAssociation=9, KContainment=10, KWith=11, KNew=12, 
		KNull=13, KTrue=14, KFalse=15, KVoid=16, KObject=17, KSymbol=18, KString=19, 
		KInt=20, KLong=21, KFloat=22, KDouble=23, KByte=24, KBool=25, KList=26, 
		KAny=27, KNone=28, KError=29, KSet=30, KMultiList=31, KMultiSet=32, KThis=33, 
		KTypeof=34, KAs=35, KIs=36, KBase=37, KConst=38, KRedefines=39, KSubsets=40, 
		KReadonly=41, KLazy=42, KSynthetized=43, KInherited=44, KDerived=45, KStatic=46, 
		TSemicolon=47, TColon=48, TDot=49, TComma=50, TAssign=51, TOpenParen=52, 
		TCloseParen=53, TOpenBracket=54, TCloseBracket=55, TOpenBrace=56, TCloseBrace=57, 
		TLessThan=58, TGreaterThan=59, TQuestion=60, TQuestionQuestion=61, TAmpersand=62, 
		THat=63, TBar=64, TAndAlso=65, TOrElse=66, TPlusPlus=67, TMinusMinus=68, 
		TPlus=69, TMinus=70, TTilde=71, TExclamation=72, TSlash=73, TAsterisk=74, 
		TPercent=75, TLessThanOrEqual=76, TGreaterThanOrEqual=77, TEqual=78, TNotEqual=79, 
		TAsteriskAssign=80, TSlashAssign=81, TPercentAssign=82, TPlusAssign=83, 
		TMinusAssign=84, TLeftShiftAssign=85, TRightShiftAssign=86, TAmpersandAssign=87, 
		THatAssign=88, TBarAssign=89, IdentifierNormal=90, IdentifierVerbatim=91, 
		IntegerLiteral=92, DecimalLiteral=93, ScientificLiteral=94, DateTimeOffsetLiteral=95, 
		DateTimeLiteral=96, DateLiteral=97, TimeLiteral=98, RegularStringLiteral=99, 
		GuidLiteral=100, UTF8BOM=101, WHITESPACE=102, CRLF=103, LINEBREAK=104, 
		LINE_COMMENT=105, COMMENT=106;
	public const int
		RULE_main = 0, RULE_qualifiedName = 1, RULE_identifierList = 2, RULE_qualifiedNameList = 3, 
		RULE_annotation = 4, RULE_namespaceDeclaration = 5, RULE_metamodelDeclaration = 6, 
		RULE_metamodelPropertyList = 7, RULE_metamodelProperty = 8, RULE_declaration = 9, 
		RULE_enumDeclaration = 10, RULE_enumValues = 11, RULE_enumValue = 12, 
		RULE_enumMemberDeclaration = 13, RULE_classDeclaration = 14, RULE_classAncestors = 15, 
		RULE_classAncestor = 16, RULE_classMemberDeclaration = 17, RULE_fieldDeclaration = 18, 
		RULE_fieldModifier = 19, RULE_redefinitions = 20, RULE_subsettings = 21, 
		RULE_nameUseList = 22, RULE_constDeclaration = 23, RULE_returnType = 24, 
		RULE_typeOfReference = 25, RULE_typeReference = 26, RULE_simpleType = 27, 
		RULE_classType = 28, RULE_objectType = 29, RULE_primitiveType = 30, RULE_voidType = 31, 
		RULE_nullableType = 32, RULE_collectionType = 33, RULE_collectionKind = 34, 
		RULE_operationDeclaration = 35, RULE_parameterList = 36, RULE_parameter = 37, 
		RULE_associationDeclaration = 38, RULE_identifier = 39, RULE_literal = 40, 
		RULE_nullLiteral = 41, RULE_booleanLiteral = 42, RULE_integerLiteral = 43, 
		RULE_decimalLiteral = 44, RULE_scientificLiteral = 45, RULE_stringLiteral = 46;
	public static readonly string[] ruleNames = {
		"main", "qualifiedName", "identifierList", "qualifiedNameList", "annotation", 
		"namespaceDeclaration", "metamodelDeclaration", "metamodelPropertyList", 
		"metamodelProperty", "declaration", "enumDeclaration", "enumValues", "enumValue", 
		"enumMemberDeclaration", "classDeclaration", "classAncestors", "classAncestor", 
		"classMemberDeclaration", "fieldDeclaration", "fieldModifier", "redefinitions", 
		"subsettings", "nameUseList", "constDeclaration", "returnType", "typeOfReference", 
		"typeReference", "simpleType", "classType", "objectType", "primitiveType", 
		"voidType", "nullableType", "collectionType", "collectionKind", "operationDeclaration", 
		"parameterList", "parameter", "associationDeclaration", "identifier", 
		"literal", "nullLiteral", "booleanLiteral", "integerLiteral", "decimalLiteral", 
		"scientificLiteral", "stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'using'", "'metamodel'", "'extern'", "'typedef'", 
		"'abstract'", "'class'", "'enum'", "'association'", "'containment'", "'with'", 
		"'new'", "'null'", "'true'", "'false'", "'void'", "'object'", "'symbol'", 
		"'string'", "'int'", "'long'", "'float'", "'double'", "'byte'", "'bool'", 
		"'list'", "'any'", "'none'", "'error'", "'set'", "'multi_list'", "'multi_set'", 
		"'this'", "'typeof'", "'as'", "'is'", "'base'", "'const'", "'redefines'", 
		"'subsets'", "'readonly'", "'lazy'", "'synthetized'", "'inherited'", "'derived'", 
		"'static'", "';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", 
		"'<='", "'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'&='", "'^='", "'|='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KUsing", "KMetamodel", "KExtern", "KTypeDef", "KAbstract", 
		"KClass", "KEnum", "KAssociation", "KContainment", "KWith", "KNew", "KNull", 
		"KTrue", "KFalse", "KVoid", "KObject", "KSymbol", "KString", "KInt", "KLong", 
		"KFloat", "KDouble", "KByte", "KBool", "KList", "KAny", "KNone", "KError", 
		"KSet", "KMultiList", "KMultiSet", "KThis", "KTypeof", "KAs", "KIs", "KBase", 
		"KConst", "KRedefines", "KSubsets", "KReadonly", "KLazy", "KSynthetized", 
		"KInherited", "KDerived", "KStatic", "TSemicolon", "TColon", "TDot", "TComma", 
		"TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", "TCloseBracket", 
		"TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", "TQuestion", 
		"TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", "TOrElse", 
		"TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IdentifierNormal", "IdentifierVerbatim", 
		"IntegerLiteral", "DecimalLiteral", "ScientificLiteral", "DateTimeOffsetLiteral", 
		"DateTimeLiteral", "DateLiteral", "TimeLiteral", "RegularStringLiteral", 
		"GuidLiteral", "UTF8BOM", "WHITESPACE", "CRLF", "LINEBREAK", "LINE_COMMENT", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaModelParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaModelParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; namespaceDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaModelParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaModelParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; identifier();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TDot) {
				{
				{
				State = 97; Match(TDot);
				State = 98; identifier();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; identifier();
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 105; Match(TComma);
				State = 106; identifier();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; qualifiedName();
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 113; Match(TComma);
				State = 114; qualifiedName();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaModelParser.TOpenBracket, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaModelParser.TCloseBracket, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 8, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(TOpenBracket);
			State = 121; identifier();
			State = 122; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaModelParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public MetamodelDeclarationContext metamodelDeclaration() {
			return GetRuleContext<MetamodelDeclarationContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 124; annotation();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 130; Match(KNamespace);
			State = 131; qualifiedName();
			State = 132; Match(TOpenBrace);
			State = 133; metamodelDeclaration();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KAbstract) | (1L << KClass) | (1L << KEnum) | (1L << KAssociation) | (1L << KConst) | (1L << TOpenBracket))) != 0)) {
				{
				{
				State = 134; declaration();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 140; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelDeclarationContext : ParserRuleContext {
		public ITerminalNode KMetamodel() { return GetToken(MetaModelParser.KMetamodel, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public MetamodelPropertyListContext metamodelPropertyList() {
			return GetRuleContext<MetamodelPropertyListContext>(0);
		}
		public MetamodelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMetamodelDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMetamodelDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelDeclarationContext metamodelDeclaration() {
		MetamodelDeclarationContext _localctx = new MetamodelDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_metamodelDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 142; annotation();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 148; Match(KMetamodel);
			State = 149; identifier();
			State = 155;
			_la = TokenStream.La(1);
			if (_la==TOpenParen) {
				{
				State = 150; Match(TOpenParen);
				State = 152;
				_la = TokenStream.La(1);
				if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
					{
					State = 151; metamodelPropertyList();
					}
				}

				State = 154; Match(TCloseParen);
				}
			}

			State = 157; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyListContext : ParserRuleContext {
		public MetamodelPropertyContext[] metamodelProperty() {
			return GetRuleContexts<MetamodelPropertyContext>();
		}
		public MetamodelPropertyContext metamodelProperty(int i) {
			return GetRuleContext<MetamodelPropertyContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public MetamodelPropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelPropertyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMetamodelPropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMetamodelPropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyListContext metamodelPropertyList() {
		MetamodelPropertyListContext _localctx = new MetamodelPropertyListContext(Context, State);
		EnterRule(_localctx, 14, RULE_metamodelPropertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; metamodelProperty();
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 160; Match(TComma);
				State = 161; metamodelProperty();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public MetamodelPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMetamodelProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMetamodelProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyContext metamodelProperty() {
		MetamodelPropertyContext _localctx = new MetamodelPropertyContext(Context, State);
		EnterRule(_localctx, 16, RULE_metamodelProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; identifier();
			State = 168; Match(TAssign);
			State = 169; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public AssociationDeclarationContext associationDeclaration() {
			return GetRuleContext<AssociationDeclarationContext>(0);
		}
		public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_declaration);
		try {
			State = 175;
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171; enumDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; classDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 173; associationDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 174; constDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnum() { return GetToken(MetaModelParser.KEnum, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 177; annotation();
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 183; Match(KEnum);
			State = 184; identifier();
			State = 185; Match(TOpenBrace);
			State = 186; enumValues();
			State = 194;
			_la = TokenStream.La(1);
			if (_la==TSemicolon) {
				{
				State = 187; Match(TSemicolon);
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KVoid) | (1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KStatic) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
					{
					{
					State = 188; enumMemberDeclaration();
					}
					}
					State = 193;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 196; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; enumValue();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 199; Match(TComma);
				State = 200; enumValue();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 206; annotation();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 212; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext enumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; operationDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode KClass() { return GetToken(MetaModelParser.KClass, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode KAbstract() { return GetToken(MetaModelParser.KAbstract, 0); }
		public ITerminalNode TColon() { return GetToken(MetaModelParser.TColon, 0); }
		public ClassAncestorsContext classAncestors() {
			return GetRuleContext<ClassAncestorsContext>(0);
		}
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 216; annotation();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 223;
			_la = TokenStream.La(1);
			if (_la==KAbstract) {
				{
				State = 222; Match(KAbstract);
				}
			}

			State = 225; Match(KClass);
			State = 226; identifier();
			State = 229;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 227; Match(TColon);
				State = 228; classAncestors();
				}
			}

			State = 231; Match(TOpenBrace);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KVoid) | (1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived) | (1L << KStatic) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				{
				State = 232; classMemberDeclaration();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 238; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorsContext : ParserRuleContext {
		public ClassAncestorContext[] classAncestor() {
			return GetRuleContexts<ClassAncestorContext>();
		}
		public ClassAncestorContext classAncestor(int i) {
			return GetRuleContext<ClassAncestorContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public ClassAncestorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestors; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassAncestors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassAncestors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorsContext classAncestors() {
		ClassAncestorsContext _localctx = new ClassAncestorsContext(Context, State);
		EnterRule(_localctx, 30, RULE_classAncestors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; classAncestor();
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 241; Match(TComma);
				State = 242; classAncestor();
				}
				}
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ClassAncestorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassAncestor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassAncestor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorContext classAncestor() {
		ClassAncestorContext _localctx = new ClassAncestorContext(Context, State);
		EnterRule(_localctx, 32, RULE_classAncestor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_classMemberDeclaration);
		try {
			State = 252;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; fieldDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251; operationDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FieldModifierContext fieldModifier() {
			return GetRuleContext<FieldModifierContext>(0);
		}
		public RedefinitionsContext redefinitions() {
			return GetRuleContext<RedefinitionsContext>(0);
		}
		public SubsettingsContext subsettings() {
			return GetRuleContext<SubsettingsContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 254; annotation();
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 261;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived))) != 0)) {
				{
				State = 260; fieldModifier();
				}
			}

			State = 263; typeReference();
			State = 264; identifier();
			State = 267;
			switch (TokenStream.La(1)) {
			case KRedefines:
				{
				State = 265; redefinitions();
				}
				break;
			case KSubsets:
				{
				State = 266; subsettings();
				}
				break;
			case TSemicolon:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 269; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public ITerminalNode KContainment() { return GetToken(MetaModelParser.KContainment, 0); }
		public ITerminalNode KReadonly() { return GetToken(MetaModelParser.KReadonly, 0); }
		public ITerminalNode KLazy() { return GetToken(MetaModelParser.KLazy, 0); }
		public ITerminalNode KDerived() { return GetToken(MetaModelParser.KDerived, 0); }
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_fieldModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KReadonly) | (1L << KLazy) | (1L << KDerived))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedefinitionsContext : ParserRuleContext {
		public ITerminalNode KRedefines() { return GetToken(MetaModelParser.KRedefines, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public RedefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterRedefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitRedefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedefinitionsContext redefinitions() {
		RedefinitionsContext _localctx = new RedefinitionsContext(Context, State);
		EnterRule(_localctx, 40, RULE_redefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(KRedefines);
			State = 275;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 274; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsettingsContext : ParserRuleContext {
		public ITerminalNode KSubsets() { return GetToken(MetaModelParser.KSubsets, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public SubsettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsettings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterSubsettings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitSubsettings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsettingsContext subsettings() {
		SubsettingsContext _localctx = new SubsettingsContext(Context, State);
		EnterRule(_localctx, 42, RULE_subsettings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(KSubsets);
			State = 279;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 278; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameUseListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public NameUseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameUseList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNameUseList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNameUseList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameUseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameUseListContext nameUseList() {
		NameUseListContext _localctx = new NameUseListContext(Context, State);
		EnterRule(_localctx, 44, RULE_nameUseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; qualifiedName();
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 282; Match(TComma);
				State = 283; qualifiedName();
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		public ITerminalNode KConst() { return GetToken(MetaModelParser.KConst, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterConstDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitConstDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_constDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(KConst);
			State = 290; typeReference();
			State = 291; identifier();
			State = 292; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnType);
		try {
			State = 296;
			switch (TokenStream.La(1)) {
			case KObject:
			case KSymbol:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfReferenceContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeOfReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeOfReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeOfReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfReferenceContext typeOfReference() {
		TypeOfReferenceContext _localctx = new TypeOfReferenceContext(Context, State);
		EnterRule(_localctx, 50, RULE_typeOfReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 52, RULE_typeReference);
		try {
			State = 302;
			switch (TokenStream.La(1)) {
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300; collectionType();
				}
				break;
			case KObject:
			case KSymbol:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301; simpleType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_simpleType);
		try {
			State = 308;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305; objectType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 306; nullableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 307; qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_classType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(MetaModelParser.KObject, 0); }
		public ITerminalNode KSymbol() { return GetToken(MetaModelParser.KSymbol, 0); }
		public ITerminalNode KString() { return GetToken(MetaModelParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KSymbol) | (1L << KString))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(MetaModelParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaModelParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaModelParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaModelParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(MetaModelParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(MetaModelParser.KBool, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaModelParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaModelParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; primitiveType();
			State = 319; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		public CollectionKindContext collectionKind() {
			return GetRuleContext<CollectionKindContext>(0);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaModelParser.TLessThan, 0); }
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaModelParser.TGreaterThan, 0); }
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterCollectionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitCollectionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_collectionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; collectionKind();
			State = 322; Match(TLessThan);
			State = 323; simpleType();
			State = 324; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionKindContext : ParserRuleContext {
		public ITerminalNode KSet() { return GetToken(MetaModelParser.KSet, 0); }
		public ITerminalNode KList() { return GetToken(MetaModelParser.KList, 0); }
		public ITerminalNode KMultiSet() { return GetToken(MetaModelParser.KMultiSet, 0); }
		public ITerminalNode KMultiList() { return GetToken(MetaModelParser.KMultiList, 0); }
		public CollectionKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterCollectionKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitCollectionKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionKindContext collectionKind() {
		CollectionKindContext _localctx = new CollectionKindContext(Context, State);
		EnterRule(_localctx, 68, RULE_collectionKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode KStatic() { return GetToken(MetaModelParser.KStatic, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterOperationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitOperationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 328; annotation();
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 335;
			_la = TokenStream.La(1);
			if (_la==KStatic) {
				{
				State = 334; Match(KStatic);
				}
			}

			State = 337; returnType();
			State = 338; identifier();
			State = 339; Match(TOpenParen);
			State = 341;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KSymbol) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 340; parameterList();
				}
			}

			State = 343; Match(TCloseParen);
			State = 344; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 72, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; parameter();
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 347; Match(TComma);
				State = 348; parameter();
				}
				}
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 74, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 354; annotation();
				}
				}
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 360; typeReference();
			State = 361; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationDeclarationContext : ParserRuleContext {
		public QualifiedNameContext source;
		public QualifiedNameContext target;
		public ITerminalNode KAssociation() { return GetToken(MetaModelParser.KAssociation, 0); }
		public ITerminalNode KWith() { return GetToken(MetaModelParser.KWith, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AssociationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAssociationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAssociationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationDeclarationContext associationDeclaration() {
		AssociationDeclarationContext _localctx = new AssociationDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_associationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 363; annotation();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 369; Match(KAssociation);
			State = 370; _localctx.source = qualifiedName();
			State = 371; Match(KWith);
			State = 372; _localctx.target = qualifiedName();
			State = 373; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaModelParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(MetaModelParser.IdentifierVerbatim, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 78, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			_la = TokenStream.La(1);
			if ( !(_la==IdentifierNormal || _la==IdentifierVerbatim) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 80, RULE_literal);
		try {
			State = 383;
			switch (TokenStream.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 377; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378; booleanLiteral();
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 379; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 380; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 381; scientificLiteral();
				}
				break;
			case RegularStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 382; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaModelParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 82, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaModelParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaModelParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 84, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			_la = TokenStream.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(MetaModelParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 86, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(MetaModelParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 88, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(MetaModelParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(MetaModelParser.RegularStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(RegularStringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3l\x190\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\a\x3\x66\n\x3\f\x3\xE\x3i\v\x3\x3\x4\x3\x4\x3\x4\a\x4n\n\x4"+
		"\f\x4\xE\x4q\v\x4\x3\x5\x3\x5\x3\x5\a\x5v\n\x5\f\x5\xE\x5y\v\x5\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\a\a\a\x80\n\a\f\a\xE\a\x83\v\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\a\a\x8A\n\a\f\a\xE\a\x8D\v\a\x3\a\x3\a\x3\b\a\b\x92\n\b\f\b\xE"+
		"\b\x95\v\b\x3\b\x3\b\x3\b\x3\b\x5\b\x9B\n\b\x3\b\x5\b\x9E\n\b\x3\b\x3"+
		"\b\x3\t\x3\t\x3\t\a\t\xA5\n\t\f\t\xE\t\xA8\v\t\x3\n\x3\n\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\v\x5\v\xB2\n\v\x3\f\a\f\xB5\n\f\f\f\xE\f\xB8\v\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\xC0\n\f\f\f\xE\f\xC3\v\f\x5\f\xC5\n\f\x3"+
		"\f\x3\f\x3\r\x3\r\x3\r\a\r\xCC\n\r\f\r\xE\r\xCF\v\r\x3\xE\a\xE\xD2\n\xE"+
		"\f\xE\xE\xE\xD5\v\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\a\x10\xDC\n\x10\f"+
		"\x10\xE\x10\xDF\v\x10\x3\x10\x5\x10\xE2\n\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x5\x10\xE8\n\x10\x3\x10\x3\x10\a\x10\xEC\n\x10\f\x10\xE\x10\xEF\v"+
		"\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\a\x11\xF6\n\x11\f\x11\xE\x11\xF9"+
		"\v\x11\x3\x12\x3\x12\x3\x13\x3\x13\x5\x13\xFF\n\x13\x3\x14\a\x14\x102"+
		"\n\x14\f\x14\xE\x14\x105\v\x14\x3\x14\x5\x14\x108\n\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x5\x14\x10E\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x5\x16\x116\n\x16\x3\x17\x3\x17\x5\x17\x11A\n\x17\x3\x18\x3\x18\x3"+
		"\x18\a\x18\x11F\n\x18\f\x18\xE\x18\x122\v\x18\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\x5\x1A\x12B\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x5\x1C\x131\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x137\n\x1D\x3\x1E"+
		"\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3"+
		"#\x3$\x3$\x3%\a%\x14C\n%\f%\xE%\x14F\v%\x3%\x5%\x152\n%\x3%\x3%\x3%\x3"+
		"%\x5%\x158\n%\x3%\x3%\x3%\x3&\x3&\x3&\a&\x160\n&\f&\xE&\x163\v&\x3\'\a"+
		"\'\x166\n\'\f\'\xE\'\x169\v\'\x3\'\x3\'\x3\'\x3(\a(\x16F\n(\f(\xE(\x172"+
		"\v(\x3(\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x182\n"+
		"*\x3+\x3+\x3,\x3,\x3-\x3-\x3.\x3.\x3/\x3/\x3\x30\x3\x30\x3\x30\x2\x2\x31"+
		"\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34"+
		"\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^\x2\b\x5\x2\f\f+,//\x3\x2\x13\x15"+
		"\x3\x2\x16\x1B\x4\x2\x1C\x1C \"\x3\x2\\]\x3\x2\x10\x11\x18E\x2`\x3\x2"+
		"\x2\x2\x4\x62\x3\x2\x2\x2\x6j\x3\x2\x2\x2\br\x3\x2\x2\x2\nz\x3\x2\x2\x2"+
		"\f\x81\x3\x2\x2\x2\xE\x93\x3\x2\x2\x2\x10\xA1\x3\x2\x2\x2\x12\xA9\x3\x2"+
		"\x2\x2\x14\xB1\x3\x2\x2\x2\x16\xB6\x3\x2\x2\x2\x18\xC8\x3\x2\x2\x2\x1A"+
		"\xD3\x3\x2\x2\x2\x1C\xD8\x3\x2\x2\x2\x1E\xDD\x3\x2\x2\x2 \xF2\x3\x2\x2"+
		"\x2\"\xFA\x3\x2\x2\x2$\xFE\x3\x2\x2\x2&\x103\x3\x2\x2\x2(\x111\x3\x2\x2"+
		"\x2*\x113\x3\x2\x2\x2,\x117\x3\x2\x2\x2.\x11B\x3\x2\x2\x2\x30\x123\x3"+
		"\x2\x2\x2\x32\x12A\x3\x2\x2\x2\x34\x12C\x3\x2\x2\x2\x36\x130\x3\x2\x2"+
		"\x2\x38\x136\x3\x2\x2\x2:\x138\x3\x2\x2\x2<\x13A\x3\x2\x2\x2>\x13C\x3"+
		"\x2\x2\x2@\x13E\x3\x2\x2\x2\x42\x140\x3\x2\x2\x2\x44\x143\x3\x2\x2\x2"+
		"\x46\x148\x3\x2\x2\x2H\x14D\x3\x2\x2\x2J\x15C\x3\x2\x2\x2L\x167\x3\x2"+
		"\x2\x2N\x170\x3\x2\x2\x2P\x179\x3\x2\x2\x2R\x181\x3\x2\x2\x2T\x183\x3"+
		"\x2\x2\x2V\x185\x3\x2\x2\x2X\x187\x3\x2\x2\x2Z\x189\x3\x2\x2\x2\\\x18B"+
		"\x3\x2\x2\x2^\x18D\x3\x2\x2\x2`\x61\x5\f\a\x2\x61\x3\x3\x2\x2\x2\x62g"+
		"\x5P)\x2\x63\x64\a\x33\x2\x2\x64\x66\x5P)\x2\x65\x63\x3\x2\x2\x2\x66i"+
		"\x3\x2\x2\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2h\x5\x3\x2\x2\x2ig\x3\x2\x2"+
		"\x2jo\x5P)\x2kl\a\x34\x2\x2ln\x5P)\x2mk\x3\x2\x2\x2nq\x3\x2\x2\x2om\x3"+
		"\x2\x2\x2op\x3\x2\x2\x2p\a\x3\x2\x2\x2qo\x3\x2\x2\x2rw\x5\x4\x3\x2st\a"+
		"\x34\x2\x2tv\x5\x4\x3\x2us\x3\x2\x2\x2vy\x3\x2\x2\x2wu\x3\x2\x2\x2wx\x3"+
		"\x2\x2\x2x\t\x3\x2\x2\x2yw\x3\x2\x2\x2z{\a\x38\x2\x2{|\x5P)\x2|}\a\x39"+
		"\x2\x2}\v\x3\x2\x2\x2~\x80\x5\n\x6\x2\x7F~\x3\x2\x2\x2\x80\x83\x3\x2\x2"+
		"\x2\x81\x7F\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x84\x3\x2\x2\x2\x83\x81"+
		"\x3\x2\x2\x2\x84\x85\a\x3\x2\x2\x85\x86\x5\x4\x3\x2\x86\x87\a:\x2\x2\x87"+
		"\x8B\x5\xE\b\x2\x88\x8A\x5\x14\v\x2\x89\x88\x3\x2\x2\x2\x8A\x8D\x3\x2"+
		"\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8E\x3\x2\x2\x2\x8D"+
		"\x8B\x3\x2\x2\x2\x8E\x8F\a;\x2\x2\x8F\r\x3\x2\x2\x2\x90\x92\x5\n\x6\x2"+
		"\x91\x90\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x93\x94\x3"+
		"\x2\x2\x2\x94\x96\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\x97\a\x5\x2\x2\x97"+
		"\x9D\x5P)\x2\x98\x9A\a\x36\x2\x2\x99\x9B\x5\x10\t\x2\x9A\x99\x3\x2\x2"+
		"\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9E\a\x37\x2\x2\x9D\x98"+
		"\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\a\x31\x2"+
		"\x2\xA0\xF\x3\x2\x2\x2\xA1\xA6\x5\x12\n\x2\xA2\xA3\a\x34\x2\x2\xA3\xA5"+
		"\x5\x12\n\x2\xA4\xA2\x3\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4\x3\x2\x2"+
		"\x2\xA6\xA7\x3\x2\x2\x2\xA7\x11\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9\xAA"+
		"\x5P)\x2\xAA\xAB\a\x35\x2\x2\xAB\xAC\x5^\x30\x2\xAC\x13\x3\x2\x2\x2\xAD"+
		"\xB2\x5\x16\f\x2\xAE\xB2\x5\x1E\x10\x2\xAF\xB2\x5N(\x2\xB0\xB2\x5\x30"+
		"\x19\x2\xB1\xAD\x3\x2\x2\x2\xB1\xAE\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1"+
		"\xB0\x3\x2\x2\x2\xB2\x15\x3\x2\x2\x2\xB3\xB5\x5\n\x6\x2\xB4\xB3\x3\x2"+
		"\x2\x2\xB5\xB8\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7"+
		"\xB9\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBA\a\n\x2\x2\xBA\xBB\x5P)\x2"+
		"\xBB\xBC\a:\x2\x2\xBC\xC4\x5\x18\r\x2\xBD\xC1\a\x31\x2\x2\xBE\xC0\x5\x1C"+
		"\xF\x2\xBF\xBE\x3\x2\x2\x2\xC0\xC3\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1"+
		"\xC2\x3\x2\x2\x2\xC2\xC5\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xBD\x3\x2"+
		"\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC7\a;\x2\x2\xC7\x17"+
		"\x3\x2\x2\x2\xC8\xCD\x5\x1A\xE\x2\xC9\xCA\a\x34\x2\x2\xCA\xCC\x5\x1A\xE"+
		"\x2\xCB\xC9\x3\x2\x2\x2\xCC\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE"+
		"\x3\x2\x2\x2\xCE\x19\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD2\x5\n\x6\x2"+
		"\xD1\xD0\x3\x2\x2\x2\xD2\xD5\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4\x3"+
		"\x2\x2\x2\xD4\xD6\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6\xD7\x5P)\x2\xD7"+
		"\x1B\x3\x2\x2\x2\xD8\xD9\x5H%\x2\xD9\x1D\x3\x2\x2\x2\xDA\xDC\x5\n\x6\x2"+
		"\xDB\xDA\x3\x2\x2\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE\x3"+
		"\x2\x2\x2\xDE\xE1\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xE0\xE2\a\b\x2\x2\xE1"+
		"\xE0\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE4\a\t\x2"+
		"\x2\xE4\xE7\x5P)\x2\xE5\xE6\a\x32\x2\x2\xE6\xE8\x5 \x11\x2\xE7\xE5\x3"+
		"\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xED\a:\x2\x2\xEA"+
		"\xEC\x5$\x13\x2\xEB\xEA\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED\xEB\x3\x2"+
		"\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xF0\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xF0"+
		"\xF1\a;\x2\x2\xF1\x1F\x3\x2\x2\x2\xF2\xF7\x5\"\x12\x2\xF3\xF4\a\x34\x2"+
		"\x2\xF4\xF6\x5\"\x12\x2\xF5\xF3\x3\x2\x2\x2\xF6\xF9\x3\x2\x2\x2\xF7\xF5"+
		"\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8!\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2"+
		"\xFA\xFB\x5\x4\x3\x2\xFB#\x3\x2\x2\x2\xFC\xFF\x5&\x14\x2\xFD\xFF\x5H%"+
		"\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFD\x3\x2\x2\x2\xFF%\x3\x2\x2\x2\x100\x102"+
		"\x5\n\x6\x2\x101\x100\x3\x2\x2\x2\x102\x105\x3\x2\x2\x2\x103\x101\x3\x2"+
		"\x2\x2\x103\x104\x3\x2\x2\x2\x104\x107\x3\x2\x2\x2\x105\x103\x3\x2\x2"+
		"\x2\x106\x108\x5(\x15\x2\x107\x106\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108"+
		"\x109\x3\x2\x2\x2\x109\x10A\x5\x36\x1C\x2\x10A\x10D\x5P)\x2\x10B\x10E"+
		"\x5*\x16\x2\x10C\x10E\x5,\x17\x2\x10D\x10B\x3\x2\x2\x2\x10D\x10C\x3\x2"+
		"\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x110\a\x31\x2"+
		"\x2\x110\'\x3\x2\x2\x2\x111\x112\t\x2\x2\x2\x112)\x3\x2\x2\x2\x113\x115"+
		"\a)\x2\x2\x114\x116\x5.\x18\x2\x115\x114\x3\x2\x2\x2\x115\x116\x3\x2\x2"+
		"\x2\x116+\x3\x2\x2\x2\x117\x119\a*\x2\x2\x118\x11A\x5.\x18\x2\x119\x118"+
		"\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A-\x3\x2\x2\x2\x11B\x120\x5\x4\x3"+
		"\x2\x11C\x11D\a\x34\x2\x2\x11D\x11F\x5\x4\x3\x2\x11E\x11C\x3\x2\x2\x2"+
		"\x11F\x122\x3\x2\x2\x2\x120\x11E\x3\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121"+
		"/\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2\x123\x124\a(\x2\x2\x124\x125\x5\x36"+
		"\x1C\x2\x125\x126\x5P)\x2\x126\x127\a\x31\x2\x2\x127\x31\x3\x2\x2\x2\x128"+
		"\x12B\x5\x36\x1C\x2\x129\x12B\x5@!\x2\x12A\x128\x3\x2\x2\x2\x12A\x129"+
		"\x3\x2\x2\x2\x12B\x33\x3\x2\x2\x2\x12C\x12D\x5\x36\x1C\x2\x12D\x35\x3"+
		"\x2\x2\x2\x12E\x131\x5\x44#\x2\x12F\x131\x5\x38\x1D\x2\x130\x12E\x3\x2"+
		"\x2\x2\x130\x12F\x3\x2\x2\x2\x131\x37\x3\x2\x2\x2\x132\x137\x5> \x2\x133"+
		"\x137\x5<\x1F\x2\x134\x137\x5\x42\"\x2\x135\x137\x5\x4\x3\x2\x136\x132"+
		"\x3\x2\x2\x2\x136\x133\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2\x136\x135\x3"+
		"\x2\x2\x2\x137\x39\x3\x2\x2\x2\x138\x139\x5\x4\x3\x2\x139;\x3\x2\x2\x2"+
		"\x13A\x13B\t\x3\x2\x2\x13B=\x3\x2\x2\x2\x13C\x13D\t\x4\x2\x2\x13D?\x3"+
		"\x2\x2\x2\x13E\x13F\a\x12\x2\x2\x13F\x41\x3\x2\x2\x2\x140\x141\x5> \x2"+
		"\x141\x142\a>\x2\x2\x142\x43\x3\x2\x2\x2\x143\x144\x5\x46$\x2\x144\x145"+
		"\a<\x2\x2\x145\x146\x5\x38\x1D\x2\x146\x147\a=\x2\x2\x147\x45\x3\x2\x2"+
		"\x2\x148\x149\t\x5\x2\x2\x149G\x3\x2\x2\x2\x14A\x14C\x5\n\x6\x2\x14B\x14A"+
		"\x3\x2\x2\x2\x14C\x14F\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14D\x14E\x3"+
		"\x2\x2\x2\x14E\x151\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x150\x152\a\x30"+
		"\x2\x2\x151\x150\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x153\x3\x2\x2"+
		"\x2\x153\x154\x5\x32\x1A\x2\x154\x155\x5P)\x2\x155\x157\a\x36\x2\x2\x156"+
		"\x158\x5J&\x2\x157\x156\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x159\x3"+
		"\x2\x2\x2\x159\x15A\a\x37\x2\x2\x15A\x15B\a\x31\x2\x2\x15BI\x3\x2\x2\x2"+
		"\x15C\x161\x5L\'\x2\x15D\x15E\a\x34\x2\x2\x15E\x160\x5L\'\x2\x15F\x15D"+
		"\x3\x2\x2\x2\x160\x163\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2\x161\x162\x3"+
		"\x2\x2\x2\x162K\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2\x164\x166\x5\n\x6\x2"+
		"\x165\x164\x3\x2\x2\x2\x166\x169\x3\x2\x2\x2\x167\x165\x3\x2\x2\x2\x167"+
		"\x168\x3\x2\x2\x2\x168\x16A\x3\x2\x2\x2\x169\x167\x3\x2\x2\x2\x16A\x16B"+
		"\x5\x36\x1C\x2\x16B\x16C\x5P)\x2\x16CM\x3\x2\x2\x2\x16D\x16F\x5\n\x6\x2"+
		"\x16E\x16D\x3\x2\x2\x2\x16F\x172\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x170"+
		"\x171\x3\x2\x2\x2\x171\x173\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x173\x174"+
		"\a\v\x2\x2\x174\x175\x5\x4\x3\x2\x175\x176\a\r\x2\x2\x176\x177\x5\x4\x3"+
		"\x2\x177\x178\a\x31\x2\x2\x178O\x3\x2\x2\x2\x179\x17A\t\x6\x2\x2\x17A"+
		"Q\x3\x2\x2\x2\x17B\x182\x5T+\x2\x17C\x182\x5V,\x2\x17D\x182\x5X-\x2\x17E"+
		"\x182\x5Z.\x2\x17F\x182\x5\\/\x2\x180\x182\x5^\x30\x2\x181\x17B\x3\x2"+
		"\x2\x2\x181\x17C\x3\x2\x2\x2\x181\x17D\x3\x2\x2\x2\x181\x17E\x3\x2\x2"+
		"\x2\x181\x17F\x3\x2\x2\x2\x181\x180\x3\x2\x2\x2\x182S\x3\x2\x2\x2\x183"+
		"\x184\a\xF\x2\x2\x184U\x3\x2\x2\x2\x185\x186\t\a\x2\x2\x186W\x3\x2\x2"+
		"\x2\x187\x188\a^\x2\x2\x188Y\x3\x2\x2\x2\x189\x18A\a_\x2\x2\x18A[\x3\x2"+
		"\x2\x2\x18B\x18C\a`\x2\x2\x18C]\x3\x2\x2\x2\x18D\x18E\a\x65\x2\x2\x18E"+
		"_\x3\x2\x2\x2\'gow\x81\x8B\x93\x9A\x9D\xA6\xB1\xB6\xC1\xC4\xCD\xD3\xDD"+
		"\xE1\xE7\xED\xF7\xFE\x103\x107\x10D\x115\x119\x120\x12A\x130\x136\x14D"+
		"\x151\x157\x161\x167\x170\x181";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Compiler
