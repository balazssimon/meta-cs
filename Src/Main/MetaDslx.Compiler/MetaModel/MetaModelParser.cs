//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\myxjdut1.33a\MetaModelParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Compiler {

using MetaDslx.Core;

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class MetaModelParser : Parser {
	public const int
		KNamespace=1, KUsing=2, KMetamodel=3, KExtern=4, KTypeDef=5, KAbstract=6, 
		KClass=7, KEnum=8, KAssociation=9, KContainment=10, KWith=11, KNew=12, 
		KNull=13, KTrue=14, KFalse=15, KVoid=16, KObject=17, KString=18, KInt=19, 
		KLong=20, KFloat=21, KDouble=22, KByte=23, KBool=24, KList=25, KAny=26, 
		KNone=27, KError=28, KSet=29, KMultiList=30, KMultiSet=31, KThis=32, KTypeof=33, 
		KAs=34, KIs=35, KBase=36, KConst=37, KRedefines=38, KSubsets=39, KReadonly=40, 
		KLazy=41, KSynthetized=42, KInherited=43, KDerived=44, KStatic=45, TSemicolon=46, 
		TColon=47, TDot=48, TComma=49, TAssign=50, TOpenParen=51, TCloseParen=52, 
		TOpenBracket=53, TCloseBracket=54, TOpenBrace=55, TCloseBrace=56, TLessThan=57, 
		TGreaterThan=58, TQuestion=59, TQuestionQuestion=60, TAmpersand=61, THat=62, 
		TBar=63, TAndAlso=64, TOrElse=65, TPlusPlus=66, TMinusMinus=67, TPlus=68, 
		TMinus=69, TTilde=70, TExclamation=71, TSlash=72, TAsterisk=73, TPercent=74, 
		TLessThanOrEqual=75, TGreaterThanOrEqual=76, TEqual=77, TNotEqual=78, 
		TAsteriskAssign=79, TSlashAssign=80, TPercentAssign=81, TPlusAssign=82, 
		TMinusAssign=83, TLeftShiftAssign=84, TRightShiftAssign=85, TAmpersandAssign=86, 
		THatAssign=87, TBarAssign=88, IdentifierNormal=89, IdentifierVerbatim=90, 
		IntegerLiteral=91, DecimalLiteral=92, ScientificLiteral=93, DateTimeOffsetLiteral=94, 
		DateTimeLiteral=95, DateLiteral=96, TimeLiteral=97, RegularStringLiteral=98, 
		GuidLiteral=99, UTF8BOM=100, WHITESPACE=101, CRLF=102, LINEBREAK=103, 
		LINE_COMMENT=104, COMMENT=105;
	public const int
		RULE_main = 0, RULE_qualifiedName = 1, RULE_identifierList = 2, RULE_qualifiedNameList = 3, 
		RULE_annotation = 4, RULE_annotationParams = 5, RULE_annotationParamList = 6, 
		RULE_annotationParam = 7, RULE_namespaceDeclaration = 8, RULE_metamodelDeclaration = 9, 
		RULE_metamodelPropertyList = 10, RULE_metamodelProperty = 11, RULE_declaration = 12, 
		RULE_enumDeclaration = 13, RULE_enumValues = 14, RULE_enumValue = 15, 
		RULE_enumMemberDeclaration = 16, RULE_classDeclaration = 17, RULE_classAncestors = 18, 
		RULE_classAncestor = 19, RULE_classMemberDeclaration = 20, RULE_fieldDeclaration = 21, 
		RULE_fieldModifier = 22, RULE_redefinitions = 23, RULE_subsettings = 24, 
		RULE_nameUseList = 25, RULE_constDeclaration = 26, RULE_functionDeclaration = 27, 
		RULE_returnType = 28, RULE_typeOfReference = 29, RULE_typeReference = 30, 
		RULE_simpleType = 31, RULE_classType = 32, RULE_objectType = 33, RULE_primitiveType = 34, 
		RULE_voidType = 35, RULE_invisibleType = 36, RULE_nullableType = 37, RULE_collectionType = 38, 
		RULE_collectionKind = 39, RULE_operationDeclaration = 40, RULE_parameterList = 41, 
		RULE_parameter = 42, RULE_constructorDeclaration = 43, RULE_initializerDeclaration = 44, 
		RULE_synthetizedPropertyInitializer = 45, RULE_inheritedPropertyInitializer = 46, 
		RULE_expressionList = 47, RULE_expressionOrNewExpressionList = 48, RULE_expressionOrNewExpression = 49, 
		RULE_expression = 50, RULE_literalExpression = 51, RULE_newExpression = 52, 
		RULE_newPropertyInitList = 53, RULE_newPropertyInit = 54, RULE_postOperator = 55, 
		RULE_preOperator = 56, RULE_unaryOperator = 57, RULE_multiplicativeOperator = 58, 
		RULE_additiveOperator = 59, RULE_shiftOperator = 60, RULE_comparisonOperator = 61, 
		RULE_equalityOperator = 62, RULE_assignmentOperator = 63, RULE_associationDeclaration = 64, 
		RULE_identifier = 65, RULE_literal = 66, RULE_nullLiteral = 67, RULE_booleanLiteral = 68, 
		RULE_integerLiteral = 69, RULE_decimalLiteral = 70, RULE_scientificLiteral = 71, 
		RULE_stringLiteral = 72;
	public static readonly string[] ruleNames = {
		"main", "qualifiedName", "identifierList", "qualifiedNameList", "annotation", 
		"annotationParams", "annotationParamList", "annotationParam", "namespaceDeclaration", 
		"metamodelDeclaration", "metamodelPropertyList", "metamodelProperty", 
		"declaration", "enumDeclaration", "enumValues", "enumValue", "enumMemberDeclaration", 
		"classDeclaration", "classAncestors", "classAncestor", "classMemberDeclaration", 
		"fieldDeclaration", "fieldModifier", "redefinitions", "subsettings", "nameUseList", 
		"constDeclaration", "functionDeclaration", "returnType", "typeOfReference", 
		"typeReference", "simpleType", "classType", "objectType", "primitiveType", 
		"voidType", "invisibleType", "nullableType", "collectionType", "collectionKind", 
		"operationDeclaration", "parameterList", "parameter", "constructorDeclaration", 
		"initializerDeclaration", "synthetizedPropertyInitializer", "inheritedPropertyInitializer", 
		"expressionList", "expressionOrNewExpressionList", "expressionOrNewExpression", 
		"expression", "literalExpression", "newExpression", "newPropertyInitList", 
		"newPropertyInit", "postOperator", "preOperator", "unaryOperator", "multiplicativeOperator", 
		"additiveOperator", "shiftOperator", "comparisonOperator", "equalityOperator", 
		"assignmentOperator", "associationDeclaration", "identifier", "literal", 
		"nullLiteral", "booleanLiteral", "integerLiteral", "decimalLiteral", "scientificLiteral", 
		"stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'using'", "'metamodel'", "'extern'", "'typedef'", 
		"'abstract'", "'class'", "'enum'", "'association'", "'containment'", "'with'", 
		"'new'", "'null'", "'true'", "'false'", "'void'", "'object'", "'string'", 
		"'int'", "'long'", "'float'", "'double'", "'byte'", "'bool'", "'list'", 
		"'any'", "'none'", "'error'", "'set'", "'multi_list'", "'multi_set'", 
		"'this'", "'typeof'", "'as'", "'is'", "'base'", "'const'", "'redefines'", 
		"'subsets'", "'readonly'", "'lazy'", "'synthetized'", "'inherited'", "'derived'", 
		"'static'", "';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", 
		"'<='", "'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'&='", "'^='", "'|='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KUsing", "KMetamodel", "KExtern", "KTypeDef", "KAbstract", 
		"KClass", "KEnum", "KAssociation", "KContainment", "KWith", "KNew", "KNull", 
		"KTrue", "KFalse", "KVoid", "KObject", "KString", "KInt", "KLong", "KFloat", 
		"KDouble", "KByte", "KBool", "KList", "KAny", "KNone", "KError", "KSet", 
		"KMultiList", "KMultiSet", "KThis", "KTypeof", "KAs", "KIs", "KBase", 
		"KConst", "KRedefines", "KSubsets", "KReadonly", "KLazy", "KSynthetized", 
		"KInherited", "KDerived", "KStatic", "TSemicolon", "TColon", "TDot", "TComma", 
		"TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", "TCloseBracket", 
		"TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", "TQuestion", 
		"TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", "TOrElse", 
		"TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IdentifierNormal", "IdentifierVerbatim", 
		"IntegerLiteral", "DecimalLiteral", "ScientificLiteral", "DateTimeOffsetLiteral", 
		"DateTimeLiteral", "DateLiteral", "TimeLiteral", "RegularStringLiteral", 
		"GuidLiteral", "UTF8BOM", "WHITESPACE", "CRLF", "LINEBREAK", "LINE_COMMENT", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaModelParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaModelParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; namespaceDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(MetaModelParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaModelParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; identifier();
			State = 153;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 149; Match(TDot);
					State = 150; identifier();
					}
					} 
				}
				State = 155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; identifier();
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 157; Match(TComma);
				State = 158; identifier();
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; qualifiedName();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 165; Match(TComma);
				State = 166; qualifiedName();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(MetaModelParser.TOpenBracket, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaModelParser.TCloseBracket, 0); }
		public AnnotationParamsContext annotationParams() {
			return GetRuleContext<AnnotationParamsContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 8, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(TOpenBracket);
			State = 173; identifier();
			State = 175;
			_la = TokenStream.La(1);
			if (_la==TOpenParen) {
				{
				State = 174; annotationParams();
				}
			}

			State = 177; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationParamsContext : ParserRuleContext {
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public AnnotationParamListContext annotationParamList() {
			return GetRuleContext<AnnotationParamListContext>(0);
		}
		public AnnotationParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationParams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationParamsContext annotationParams() {
		AnnotationParamsContext _localctx = new AnnotationParamsContext(Context, State);
		EnterRule(_localctx, 10, RULE_annotationParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(TOpenParen);
			State = 181;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 180; annotationParamList();
				}
			}

			State = 183; Match(TCloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationParamListContext : ParserRuleContext {
		public AnnotationParamContext[] annotationParam() {
			return GetRuleContexts<AnnotationParamContext>();
		}
		public AnnotationParamContext annotationParam(int i) {
			return GetRuleContext<AnnotationParamContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public AnnotationParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationParamListContext annotationParamList() {
		AnnotationParamListContext _localctx = new AnnotationParamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_annotationParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; annotationParam();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 186; Match(TComma);
				State = 187; annotationParam();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationParamContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationParamContext annotationParam() {
		AnnotationParamContext _localctx = new AnnotationParamContext(Context, State);
		EnterRule(_localctx, 14, RULE_annotationParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; identifier();
			State = 194; Match(TAssign);
			State = 195; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(MetaModelParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public MetamodelDeclarationContext metamodelDeclaration() {
			return GetRuleContext<MetamodelDeclarationContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 197; annotation();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 203; Match(KNamespace);
			State = 204; qualifiedName();
			State = 205; Match(TOpenBrace);
			State = 206; metamodelDeclaration();
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KExtern) | (1L << KAbstract) | (1L << KClass) | (1L << KEnum) | (1L << KAssociation) | (1L << KConst) | (1L << TOpenBracket))) != 0)) {
				{
				{
				State = 207; declaration();
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 213; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelDeclarationContext : ParserRuleContext {
		public ITerminalNode KMetamodel() { return GetToken(MetaModelParser.KMetamodel, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public MetamodelPropertyListContext metamodelPropertyList() {
			return GetRuleContext<MetamodelPropertyListContext>(0);
		}
		public MetamodelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMetamodelDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMetamodelDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelDeclarationContext metamodelDeclaration() {
		MetamodelDeclarationContext _localctx = new MetamodelDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_metamodelDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 215; annotation();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 221; Match(KMetamodel);
			State = 222; identifier();
			State = 228;
			_la = TokenStream.La(1);
			if (_la==TOpenParen) {
				{
				State = 223; Match(TOpenParen);
				State = 225;
				_la = TokenStream.La(1);
				if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
					{
					State = 224; metamodelPropertyList();
					}
				}

				State = 227; Match(TCloseParen);
				}
			}

			State = 230; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyListContext : ParserRuleContext {
		public MetamodelPropertyContext[] metamodelProperty() {
			return GetRuleContexts<MetamodelPropertyContext>();
		}
		public MetamodelPropertyContext metamodelProperty(int i) {
			return GetRuleContext<MetamodelPropertyContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public MetamodelPropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelPropertyList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMetamodelPropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMetamodelPropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyListContext metamodelPropertyList() {
		MetamodelPropertyListContext _localctx = new MetamodelPropertyListContext(Context, State);
		EnterRule(_localctx, 20, RULE_metamodelPropertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; metamodelProperty();
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 233; Match(TComma);
				State = 234; metamodelProperty();
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetamodelPropertyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public MetamodelPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metamodelProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMetamodelProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMetamodelProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetamodelProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetamodelPropertyContext metamodelProperty() {
		MetamodelPropertyContext _localctx = new MetamodelPropertyContext(Context, State);
		EnterRule(_localctx, 22, RULE_metamodelProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; identifier();
			State = 241; Match(TAssign);
			State = 242; stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public AssociationDeclarationContext associationDeclaration() {
			return GetRuleContext<AssociationDeclarationContext>(0);
		}
		public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_declaration);
		try {
			State = 249;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 244; enumDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245; classDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 246; associationDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 247; constDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 248; functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnum() { return GetToken(MetaModelParser.KEnum, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 251; annotation();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 257; Match(KEnum);
			State = 258; identifier();
			State = 259; Match(TOpenBrace);
			State = 260; enumValues();
			State = 268;
			_la = TokenStream.La(1);
			if (_la==TSemicolon) {
				{
				State = 261; Match(TSemicolon);
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KVoid) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KStatic) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
					{
					{
					State = 262; enumMemberDeclaration();
					}
					}
					State = 267;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 270; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; enumValue();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 273; Match(TComma);
				State = 274; enumValue();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 280; annotation();
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 286; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext enumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; operationDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode KClass() { return GetToken(MetaModelParser.KClass, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode KAbstract() { return GetToken(MetaModelParser.KAbstract, 0); }
		public ITerminalNode TColon() { return GetToken(MetaModelParser.TColon, 0); }
		public ClassAncestorsContext classAncestors() {
			return GetRuleContext<ClassAncestorsContext>(0);
		}
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 290; annotation();
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 297;
			_la = TokenStream.La(1);
			if (_la==KAbstract) {
				{
				State = 296; Match(KAbstract);
				}
			}

			State = 299; Match(KClass);
			State = 300; identifier();
			State = 303;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 301; Match(TColon);
				State = 302; classAncestors();
				}
			}

			State = 305; Match(TOpenBrace);
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KVoid) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << KReadonly) | (1L << KLazy) | (1L << KSynthetized) | (1L << KInherited) | (1L << KDerived) | (1L << KStatic) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				{
				State = 306; classMemberDeclaration();
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 312; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorsContext : ParserRuleContext {
		public ClassAncestorContext[] classAncestor() {
			return GetRuleContexts<ClassAncestorContext>();
		}
		public ClassAncestorContext classAncestor(int i) {
			return GetRuleContext<ClassAncestorContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public ClassAncestorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestors; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassAncestors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassAncestors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorsContext classAncestors() {
		ClassAncestorsContext _localctx = new ClassAncestorsContext(Context, State);
		EnterRule(_localctx, 36, RULE_classAncestors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; classAncestor();
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 315; Match(TComma);
				State = 316; classAncestor();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassAncestorContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ClassAncestorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classAncestor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassAncestor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassAncestor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassAncestor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassAncestorContext classAncestor() {
		ClassAncestorContext _localctx = new ClassAncestorContext(Context, State);
		EnterRule(_localctx, 38, RULE_classAncestor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public OperationDeclarationContext operationDeclaration() {
			return GetRuleContext<OperationDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_classMemberDeclaration);
		try {
			State = 327;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; fieldDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325; operationDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 326; constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FieldModifierContext fieldModifier() {
			return GetRuleContext<FieldModifierContext>(0);
		}
		public RedefinitionsContext redefinitions() {
			return GetRuleContext<RedefinitionsContext>(0);
		}
		public SubsettingsContext subsettings() {
			return GetRuleContext<SubsettingsContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 329; annotation();
				}
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 336;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KReadonly) | (1L << KLazy) | (1L << KSynthetized) | (1L << KInherited) | (1L << KDerived))) != 0)) {
				{
				State = 335; fieldModifier();
				}
			}

			State = 338; typeReference();
			State = 339; identifier();
			State = 342;
			switch (TokenStream.La(1)) {
			case KRedefines:
				{
				State = 340; redefinitions();
				}
				break;
			case KSubsets:
				{
				State = 341; subsettings();
				}
				break;
			case TSemicolon:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 344; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public ITerminalNode KContainment() { return GetToken(MetaModelParser.KContainment, 0); }
		public ITerminalNode KReadonly() { return GetToken(MetaModelParser.KReadonly, 0); }
		public ITerminalNode KLazy() { return GetToken(MetaModelParser.KLazy, 0); }
		public ITerminalNode KDerived() { return GetToken(MetaModelParser.KDerived, 0); }
		public ITerminalNode KSynthetized() { return GetToken(MetaModelParser.KSynthetized, 0); }
		public ITerminalNode KInherited() { return GetToken(MetaModelParser.KInherited, 0); }
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_fieldModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KContainment) | (1L << KReadonly) | (1L << KLazy) | (1L << KSynthetized) | (1L << KInherited) | (1L << KDerived))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedefinitionsContext : ParserRuleContext {
		public ITerminalNode KRedefines() { return GetToken(MetaModelParser.KRedefines, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public RedefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterRedefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitRedefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedefinitionsContext redefinitions() {
		RedefinitionsContext _localctx = new RedefinitionsContext(Context, State);
		EnterRule(_localctx, 46, RULE_redefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(KRedefines);
			State = 350;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 349; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsettingsContext : ParserRuleContext {
		public ITerminalNode KSubsets() { return GetToken(MetaModelParser.KSubsets, 0); }
		public NameUseListContext nameUseList() {
			return GetRuleContext<NameUseListContext>(0);
		}
		public SubsettingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subsettings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterSubsettings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitSubsettings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubsettings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubsettingsContext subsettings() {
		SubsettingsContext _localctx = new SubsettingsContext(Context, State);
		EnterRule(_localctx, 48, RULE_subsettings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(KSubsets);
			State = 354;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 353; nameUseList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameUseListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public NameUseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameUseList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNameUseList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNameUseList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameUseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameUseListContext nameUseList() {
		NameUseListContext _localctx = new NameUseListContext(Context, State);
		EnterRule(_localctx, 50, RULE_nameUseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; qualifiedName();
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 357; Match(TComma);
				State = 358; qualifiedName();
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		public ITerminalNode KConst() { return GetToken(MetaModelParser.KConst, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ExpressionOrNewExpressionContext expressionOrNewExpression() {
			return GetRuleContext<ExpressionOrNewExpressionContext>(0);
		}
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterConstDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitConstDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_constDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(KConst);
			State = 365; typeReference();
			State = 366; identifier();
			State = 369;
			_la = TokenStream.La(1);
			if (_la==TAssign) {
				{
				State = 367; Match(TAssign);
				State = 368; expressionOrNewExpression();
				}
			}

			State = 371; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode KExtern() { return GetToken(MetaModelParser.KExtern, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 373; annotation();
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 379; Match(KExtern);
			State = 380; returnType();
			State = 381; identifier();
			State = 382; Match(TOpenParen);
			State = 384;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 383; parameterList();
				}
			}

			State = 386; Match(TCloseParen);
			State = 387; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_returnType);
		try {
			State = 391;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 389; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 390; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfReferenceContext : ParserRuleContext {
		public InvisibleTypeContext invisibleType() {
			return GetRuleContext<InvisibleTypeContext>(0);
		}
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeOfReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeOfReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeOfReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfReferenceContext typeOfReference() {
		TypeOfReferenceContext _localctx = new TypeOfReferenceContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeOfReference);
		try {
			State = 395;
			switch (TokenStream.La(1)) {
			case KAny:
			case KNone:
			case KError:
				EnterOuterAlt(_localctx, 1);
				{
				State = 393; invisibleType();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394; typeReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeReference);
		try {
			State = 399;
			switch (TokenStream.La(1)) {
			case KList:
			case KSet:
			case KMultiList:
			case KMultiSet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 397; collectionType();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 2);
				{
				State = 398; simpleType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_simpleType);
		try {
			State = 405;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 402; objectType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 403; nullableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 404; qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_classType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(MetaModelParser.KObject, 0); }
		public ITerminalNode KString() { return GetToken(MetaModelParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			_la = TokenStream.La(1);
			if ( !(_la==KObject || _la==KString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(MetaModelParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(MetaModelParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(MetaModelParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(MetaModelParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(MetaModelParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(MetaModelParser.KBool, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(MetaModelParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvisibleTypeContext : ParserRuleContext {
		public ITerminalNode KAny() { return GetToken(MetaModelParser.KAny, 0); }
		public ITerminalNode KNone() { return GetToken(MetaModelParser.KNone, 0); }
		public ITerminalNode KError() { return GetToken(MetaModelParser.KError, 0); }
		public InvisibleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invisibleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterInvisibleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitInvisibleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvisibleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvisibleTypeContext invisibleType() {
		InvisibleTypeContext _localctx = new InvisibleTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_invisibleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KAny) | (1L << KNone) | (1L << KError))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(MetaModelParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; primitiveType();
			State = 418; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		public CollectionKindContext collectionKind() {
			return GetRuleContext<CollectionKindContext>(0);
		}
		public ITerminalNode TLessThan() { return GetToken(MetaModelParser.TLessThan, 0); }
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TGreaterThan() { return GetToken(MetaModelParser.TGreaterThan, 0); }
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterCollectionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitCollectionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_collectionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; collectionKind();
			State = 421; Match(TLessThan);
			State = 422; simpleType();
			State = 423; Match(TGreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionKindContext : ParserRuleContext {
		public ITerminalNode KSet() { return GetToken(MetaModelParser.KSet, 0); }
		public ITerminalNode KList() { return GetToken(MetaModelParser.KList, 0); }
		public ITerminalNode KMultiSet() { return GetToken(MetaModelParser.KMultiSet, 0); }
		public ITerminalNode KMultiList() { return GetToken(MetaModelParser.KMultiList, 0); }
		public CollectionKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterCollectionKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitCollectionKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionKindContext collectionKind() {
		CollectionKindContext _localctx = new CollectionKindContext(Context, State);
		EnterRule(_localctx, 78, RULE_collectionKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode KStatic() { return GetToken(MetaModelParser.KStatic, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterOperationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitOperationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 427; annotation();
				}
				}
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 434;
			_la = TokenStream.La(1);
			if (_la==KStatic) {
				{
				State = 433; Match(KStatic);
				}
			}

			State = 436; returnType();
			State = 437; identifier();
			State = 438; Match(TOpenParen);
			State = 440;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KList) | (1L << KSet) | (1L << KMultiList) | (1L << KMultiSet) | (1L << TOpenBracket))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 439; parameterList();
				}
			}

			State = 442; Match(TCloseParen);
			State = 443; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 82, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; parameter();
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 446; Match(TComma);
				State = 447; parameter();
				}
				}
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 84, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 453; annotation();
				}
				}
				State = 458;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 459; typeReference();
			State = 460; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public InitializerDeclarationContext[] initializerDeclaration() {
			return GetRuleContexts<InitializerDeclarationContext>();
		}
		public InitializerDeclarationContext initializerDeclaration(int i) {
			return GetRuleContext<InitializerDeclarationContext>(i);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 86, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 462; annotation();
				}
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 468; identifier();
			State = 469; Match(TOpenParen);
			State = 470; Match(TCloseParen);
			State = 471; Match(TOpenBrace);
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (KThis - 32)) | (1L << (TOpenBracket - 32)) | (1L << (IdentifierNormal - 32)) | (1L << (IdentifierVerbatim - 32)))) != 0)) {
				{
				{
				State = 472; initializerDeclaration();
				}
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 478; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerDeclarationContext : ParserRuleContext {
		public SynthetizedPropertyInitializerContext synthetizedPropertyInitializer() {
			return GetRuleContext<SynthetizedPropertyInitializerContext>(0);
		}
		public InheritedPropertyInitializerContext inheritedPropertyInitializer() {
			return GetRuleContext<InheritedPropertyInitializerContext>(0);
		}
		public InitializerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterInitializerDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitInitializerDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerDeclarationContext initializerDeclaration() {
		InitializerDeclarationContext _localctx = new InitializerDeclarationContext(Context, State);
		EnterRule(_localctx, 88, RULE_initializerDeclaration);
		try {
			State = 482;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 480; synthetizedPropertyInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 481; inheritedPropertyInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SynthetizedPropertyInitializerContext : ParserRuleContext {
		public IdentifierContext property;
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode KThis() { return GetToken(MetaModelParser.KThis, 0); }
		public ITerminalNode TDot() { return GetToken(MetaModelParser.TDot, 0); }
		public ITerminalNode TOpenBracket() { return GetToken(MetaModelParser.TOpenBracket, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaModelParser.TCloseBracket, 0); }
		public SynthetizedPropertyInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synthetizedPropertyInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterSynthetizedPropertyInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitSynthetizedPropertyInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSynthetizedPropertyInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SynthetizedPropertyInitializerContext synthetizedPropertyInitializer() {
		SynthetizedPropertyInitializerContext _localctx = new SynthetizedPropertyInitializerContext(Context, State);
		EnterRule(_localctx, 90, RULE_synthetizedPropertyInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			_la = TokenStream.La(1);
			if (_la==KThis) {
				{
				State = 484; Match(KThis);
				State = 485; Match(TDot);
				}
			}

			State = 492;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 488; Match(TOpenBracket);
				State = 489; qualifiedName();
				State = 490; Match(TCloseBracket);
				}
			}

			State = 494; _localctx.property = identifier();
			State = 495; Match(TAssign);
			State = 496; expression(0);
			State = 497; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritedPropertyInitializerContext : ParserRuleContext {
		public IdentifierContext @object;
		public IdentifierContext property;
		public ITerminalNode[] TDot() { return GetTokens(MetaModelParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(MetaModelParser.TDot, i);
		}
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode KThis() { return GetToken(MetaModelParser.KThis, 0); }
		public ITerminalNode TOpenBracket() { return GetToken(MetaModelParser.TOpenBracket, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaModelParser.TCloseBracket, 0); }
		public InheritedPropertyInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritedPropertyInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterInheritedPropertyInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitInheritedPropertyInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritedPropertyInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritedPropertyInitializerContext inheritedPropertyInitializer() {
		InheritedPropertyInitializerContext _localctx = new InheritedPropertyInitializerContext(Context, State);
		EnterRule(_localctx, 92, RULE_inheritedPropertyInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			_la = TokenStream.La(1);
			if (_la==KThis) {
				{
				State = 499; Match(KThis);
				State = 500; Match(TDot);
				}
			}

			State = 503; _localctx.@object = identifier();
			State = 504; Match(TDot);
			State = 509;
			_la = TokenStream.La(1);
			if (_la==TOpenBracket) {
				{
				State = 505; Match(TOpenBracket);
				State = 506; qualifiedName();
				State = 507; Match(TCloseBracket);
				}
			}

			State = 511; _localctx.property = identifier();
			State = 512; Match(TAssign);
			State = 513; expression(0);
			State = 514; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 94, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; expression(0);
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 517; Match(TComma);
				State = 518; expression(0);
				}
				}
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrNewExpressionListContext : ParserRuleContext {
		public ExpressionOrNewExpressionContext[] expressionOrNewExpression() {
			return GetRuleContexts<ExpressionOrNewExpressionContext>();
		}
		public ExpressionOrNewExpressionContext expressionOrNewExpression(int i) {
			return GetRuleContext<ExpressionOrNewExpressionContext>(i);
		}
		public ExpressionOrNewExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrNewExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterExpressionOrNewExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitExpressionOrNewExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrNewExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrNewExpressionListContext expressionOrNewExpressionList() {
		ExpressionOrNewExpressionListContext _localctx = new ExpressionOrNewExpressionListContext(Context, State);
		EnterRule(_localctx, 96, RULE_expressionOrNewExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524; expressionOrNewExpression();
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 525; Match(TComma);
				State = 526; expressionOrNewExpression();
				}
				}
				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrNewExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		public ExpressionOrNewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrNewExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterExpressionOrNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitExpressionOrNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrNewExpressionContext expressionOrNewExpression() {
		ExpressionOrNewExpressionContext _localctx = new ExpressionOrNewExpressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_expressionOrNewExpression);
		try {
			State = 534;
			switch (TokenStream.La(1)) {
			case KNull:
			case KTrue:
			case KFalse:
			case KThis:
			case KTypeof:
			case TOpenParen:
			case TPlusPlus:
			case TMinusMinus:
			case TPlus:
			case TMinus:
			case TTilde:
			case TExclamation:
			case IdentifierNormal:
			case IdentifierVerbatim:
			case IntegerLiteral:
			case DecimalLiteral:
			case ScientificLiteral:
			case RegularStringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 532; expression(0);
				}
				break;
			case KNew:
				EnterOuterAlt(_localctx, 2);
				{
				State = 533; newExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexerExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(MetaModelParser.TOpenBracket, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(MetaModelParser.TCloseBracket, 0); }
		public IndexerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIndexerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIndexerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public AdditiveOperatorContext kind;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveOperatorContext additiveOperator() {
			return GetRuleContext<AdditiveOperatorContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ComparisonOperatorContext kind;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostExpressionContext : ExpressionContext {
		public PostOperatorContext kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostOperatorContext postOperator() {
			return GetRuleContext<PostOperatorContext>(0);
		}
		public PostExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterPostExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitPostExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public BracketExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterBracketExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitBracketExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TAmpersand() { return GetToken(MetaModelParser.TAmpersand, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterBitwiseAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitBitwiseAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TAndAlso() { return GetToken(MetaModelParser.TAndAlso, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		public IdentifierContext name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TDot() { return GetToken(MetaModelParser.TDot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConversionExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode KAs() { return GetToken(MetaModelParser.KAs, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeConversionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeConversionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeConversionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConversionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public UnaryOperatorContext kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseXorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode THat() { return GetToken(MetaModelParser.THat, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterBitwiseXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitBitwiseXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public LiteralExpressionContext value;
		public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ShiftOperatorContext kind;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftOperatorContext shiftOperator() {
			return GetRuleContext<ShiftOperatorContext>(0);
		}
		public ShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ITerminalNode TQuestion() { return GetToken(MetaModelParser.TQuestion, 0); }
		public ITerminalNode TColon() { return GetToken(MetaModelParser.TColon, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public AssignmentOperatorContext @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public MultiplicativeOperatorContext kind;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeOperatorContext multiplicativeOperator() {
			return GetRuleContext<MultiplicativeOperatorContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TOrElse() { return GetToken(MetaModelParser.TOrElse, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreExpressionContext : ExpressionContext {
		public PreOperatorContext kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreOperatorContext preOperator() {
			return GetRuleContext<PreOperatorContext>(0);
		}
		public PreExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterPreExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitPreExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TBar() { return GetToken(MetaModelParser.TBar, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterBitwiseOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitBitwiseOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExpressionContext : ExpressionContext {
		public ITerminalNode KTypeof() { return GetToken(MetaModelParser.KTypeof, 0); }
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public TypeOfReferenceContext typeOfReference() {
			return GetRuleContext<TypeOfReferenceContext>(0);
		}
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public TypeofExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode KIs() { return GetToken(MetaModelParser.KIs, 0); }
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public TypeCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterTypeCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitTypeCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		public ITerminalNode KThis() { return GetToken(MetaModelParser.KThis, 0); }
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public EqualityOperatorContext kind;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityOperatorContext equalityOperator() {
			return GetRuleContext<EqualityOperatorContext>(0);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullCoalescingExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode TQuestionQuestion() { return GetToken(MetaModelParser.TQuestionQuestion, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NullCoalescingExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNullCoalescingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNullCoalescingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalescingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 100;
		EnterRecursionRule(_localctx, 100, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 537; Match(TOpenParen);
				State = 538; typeReference();
				State = 539; Match(TCloseParen);
				State = 540; expression(27);
				}
				break;
			case 2:
				{
				_localctx = new PreExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 542; ((PreExpressionContext)_localctx).kind = preOperator();
				State = 543; expression(17);
				}
				break;
			case 3:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 545; ((UnaryExpressionContext)_localctx).kind = unaryOperator();
				State = 546; expression(16);
				}
				break;
			case 4:
				{
				_localctx = new TypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 548; Match(KTypeof);
				State = 549; Match(TOpenParen);
				State = 550; typeOfReference();
				State = 551; Match(TCloseParen);
				}
				break;
			case 5:
				{
				_localctx = new BracketExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 553; Match(TOpenParen);
				State = 554; expression(0);
				State = 555; Match(TCloseParen);
				}
				break;
			case 6:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 557; Match(KThis);
				}
				break;
			case 7:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 558; ((ConstantExpressionContext)_localctx).value = literalExpression();
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 559; ((IdentifierExpressionContext)_localctx).name = identifier();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 634;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 632;
					switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicativeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 562;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 563; ((MultiplicativeExpressionContext)_localctx).kind = multiplicativeOperator();
						State = 564; ((MultiplicativeExpressionContext)_localctx).right = expression(14);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 566;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 567; ((AdditiveExpressionContext)_localctx).kind = additiveOperator();
						State = 568; ((AdditiveExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ShiftExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 570;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 571; ((ShiftExpressionContext)_localctx).kind = shiftOperator();
						State = 572; ((ShiftExpressionContext)_localctx).right = expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparisonExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 574;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 575; ((ComparisonExpressionContext)_localctx).kind = comparisonOperator();
						State = 576; ((ComparisonExpressionContext)_localctx).right = expression(11);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 578;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 579; ((EqualityExpressionContext)_localctx).kind = equalityOperator();
						State = 580; ((EqualityExpressionContext)_localctx).right = expression(10);
						}
						break;
					case 6:
						{
						_localctx = new BitwiseAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 582;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 583; Match(TAmpersand);
						State = 584; ((BitwiseAndExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 7:
						{
						_localctx = new BitwiseXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseXorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 585;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 586; Match(THat);
						State = 587; ((BitwiseXorExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 8:
						{
						_localctx = new BitwiseOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 588;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 589; Match(TBar);
						State = 590; ((BitwiseOrExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 9:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 591;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 592; Match(TAndAlso);
						State = 593; ((LogicalAndExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 10:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 594;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 595; Match(TOrElse);
						State = 596; ((LogicalOrExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 11:
						{
						_localctx = new NullCoalescingExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((NullCoalescingExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 597;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 598; Match(TQuestionQuestion);
						State = 599; ((NullCoalescingExpressionContext)_localctx).right = expression(4);
						}
						break;
					case 12:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ConditionalExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 600;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 601; Match(TQuestion);
						State = 602; ((ConditionalExpressionContext)_localctx).then = expression(0);
						State = 603; Match(TColon);
						State = 604; ((ConditionalExpressionContext)_localctx).@else = expression(3);
						}
						break;
					case 13:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 606;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 607; ((AssignmentExpressionContext)_localctx).@operator = assignmentOperator();
						State = 608; ((AssignmentExpressionContext)_localctx).right = expression(2);
						}
						break;
					case 14:
						{
						_localctx = new IndexerExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 610;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 611; Match(TOpenBracket);
						State = 612; expressionList();
						State = 613; Match(TCloseBracket);
						}
						break;
					case 15:
						{
						_localctx = new FunctionCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 615;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 616; Match(TOpenParen);
						State = 618;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KThis) | (1L << KTypeof) | (1L << TOpenParen))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (TPlusPlus - 66)) | (1L << (TMinusMinus - 66)) | (1L << (TPlus - 66)) | (1L << (TMinus - 66)) | (1L << (TTilde - 66)) | (1L << (TExclamation - 66)) | (1L << (IdentifierNormal - 66)) | (1L << (IdentifierVerbatim - 66)) | (1L << (IntegerLiteral - 66)) | (1L << (DecimalLiteral - 66)) | (1L << (ScientificLiteral - 66)) | (1L << (RegularStringLiteral - 66)))) != 0)) {
							{
							State = 617; expressionList();
							}
						}

						State = 620; Match(TCloseParen);
						}
						break;
					case 16:
						{
						_localctx = new MemberAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 621;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 622; Match(TDot);
						State = 623; ((MemberAccessExpressionContext)_localctx).name = identifier();
						}
						break;
					case 17:
						{
						_localctx = new PostExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 624;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 625; ((PostExpressionContext)_localctx).kind = postOperator();
						}
						break;
					case 18:
						{
						_localctx = new TypeConversionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 626;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 627; Match(KAs);
						State = 628; typeReference();
						}
						break;
					case 19:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 629;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 630; Match(KIs);
						State = 631; typeReference();
						}
						break;
					}
					} 
				}
				State = 636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralExpressionContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpressionContext literalExpression() {
		LiteralExpressionContext _localctx = new LiteralExpressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_literalExpression);
		try {
			State = 643;
			switch (TokenStream.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 637; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 638; booleanLiteral();
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 639; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 640; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 641; scientificLiteral();
				}
				break;
			case RegularStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 642; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
	 
		public NewExpressionContext() { }
		public virtual void CopyFrom(NewExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewObjectExpressionContext : NewExpressionContext {
		public ITerminalNode KNew() { return GetToken(MetaModelParser.KNew, 0); }
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public NewPropertyInitListContext newPropertyInitList() {
			return GetRuleContext<NewPropertyInitListContext>(0);
		}
		public NewObjectExpressionContext(NewExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewCollectionExpressionContext : NewExpressionContext {
		public ITerminalNode KNew() { return GetToken(MetaModelParser.KNew, 0); }
		public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(MetaModelParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(MetaModelParser.TCloseParen, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(MetaModelParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(MetaModelParser.TCloseBrace, 0); }
		public ExpressionOrNewExpressionContext expressionOrNewExpression() {
			return GetRuleContext<ExpressionOrNewExpressionContext>(0);
		}
		public NewCollectionExpressionContext(NewExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNewCollectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNewCollectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewCollectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_newExpression);
		int _la;
		try {
			State = 667;
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				_localctx = new NewObjectExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 645; Match(KNew);
				State = 646; classType();
				State = 647; Match(TOpenParen);
				State = 648; Match(TCloseParen);
				State = 654;
				_la = TokenStream.La(1);
				if (_la==TOpenBrace) {
					{
					State = 649; Match(TOpenBrace);
					State = 651;
					_la = TokenStream.La(1);
					if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
						{
						State = 650; newPropertyInitList();
						}
					}

					State = 653; Match(TCloseBrace);
					}
				}

				}
				break;
			case 2:
				_localctx = new NewCollectionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 656; Match(KNew);
				State = 657; collectionType();
				State = 658; Match(TOpenParen);
				State = 659; Match(TCloseParen);
				State = 665;
				_la = TokenStream.La(1);
				if (_la==TOpenBrace) {
					{
					State = 660; Match(TOpenBrace);
					State = 662;
					_la = TokenStream.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KNew) | (1L << KNull) | (1L << KTrue) | (1L << KFalse) | (1L << KThis) | (1L << KTypeof) | (1L << TOpenParen))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (TPlusPlus - 66)) | (1L << (TMinusMinus - 66)) | (1L << (TPlus - 66)) | (1L << (TMinus - 66)) | (1L << (TTilde - 66)) | (1L << (TExclamation - 66)) | (1L << (IdentifierNormal - 66)) | (1L << (IdentifierVerbatim - 66)) | (1L << (IntegerLiteral - 66)) | (1L << (DecimalLiteral - 66)) | (1L << (ScientificLiteral - 66)) | (1L << (RegularStringLiteral - 66)))) != 0)) {
						{
						State = 661; expressionOrNewExpression();
						}
					}

					State = 664; Match(TCloseBrace);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewPropertyInitListContext : ParserRuleContext {
		public NewPropertyInitContext[] newPropertyInit() {
			return GetRuleContexts<NewPropertyInitContext>();
		}
		public NewPropertyInitContext newPropertyInit(int i) {
			return GetRuleContext<NewPropertyInitContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(MetaModelParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(MetaModelParser.TComma, i);
		}
		public NewPropertyInitListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newPropertyInitList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNewPropertyInitList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNewPropertyInitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewPropertyInitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewPropertyInitListContext newPropertyInitList() {
		NewPropertyInitListContext _localctx = new NewPropertyInitListContext(Context, State);
		EnterRule(_localctx, 106, RULE_newPropertyInitList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 669; newPropertyInit();
			State = 674;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 670; Match(TComma);
					State = 671; newPropertyInit();
					}
					} 
				}
				State = 676;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			State = 678;
			_la = TokenStream.La(1);
			if (_la==TComma) {
				{
				State = 677; Match(TComma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewPropertyInitContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ExpressionOrNewExpressionContext expressionOrNewExpression() {
			return GetRuleContext<ExpressionOrNewExpressionContext>(0);
		}
		public NewPropertyInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newPropertyInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNewPropertyInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNewPropertyInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewPropertyInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewPropertyInitContext newPropertyInit() {
		NewPropertyInitContext _localctx = new NewPropertyInitContext(Context, State);
		EnterRule(_localctx, 108, RULE_newPropertyInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; identifier();
			State = 681; Match(TAssign);
			State = 682; expressionOrNewExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostOperatorContext : ParserRuleContext {
		public ITerminalNode TPlusPlus() { return GetToken(MetaModelParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaModelParser.TMinusMinus, 0); }
		public PostOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterPostOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitPostOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostOperatorContext postOperator() {
		PostOperatorContext _localctx = new PostOperatorContext(Context, State);
		EnterRule(_localctx, 110, RULE_postOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			_la = TokenStream.La(1);
			if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreOperatorContext : ParserRuleContext {
		public ITerminalNode TPlusPlus() { return GetToken(MetaModelParser.TPlusPlus, 0); }
		public ITerminalNode TMinusMinus() { return GetToken(MetaModelParser.TMinusMinus, 0); }
		public PreOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterPreOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitPreOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreOperatorContext preOperator() {
		PreOperatorContext _localctx = new PreOperatorContext(Context, State);
		EnterRule(_localctx, 112, RULE_preOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			_la = TokenStream.La(1);
			if ( !(_la==TPlusPlus || _la==TMinusMinus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public ITerminalNode TPlus() { return GetToken(MetaModelParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaModelParser.TMinus, 0); }
		public ITerminalNode TTilde() { return GetToken(MetaModelParser.TTilde, 0); }
		public ITerminalNode TExclamation() { return GetToken(MetaModelParser.TExclamation, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 114, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			_la = TokenStream.La(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (TPlus - 68)) | (1L << (TMinus - 68)) | (1L << (TTilde - 68)) | (1L << (TExclamation - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeOperatorContext : ParserRuleContext {
		public ITerminalNode TAsterisk() { return GetToken(MetaModelParser.TAsterisk, 0); }
		public ITerminalNode TSlash() { return GetToken(MetaModelParser.TSlash, 0); }
		public ITerminalNode TPercent() { return GetToken(MetaModelParser.TPercent, 0); }
		public MultiplicativeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeOperatorContext multiplicativeOperator() {
		MultiplicativeOperatorContext _localctx = new MultiplicativeOperatorContext(Context, State);
		EnterRule(_localctx, 116, RULE_multiplicativeOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			_la = TokenStream.La(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (TSlash - 72)) | (1L << (TAsterisk - 72)) | (1L << (TPercent - 72)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveOperatorContext : ParserRuleContext {
		public ITerminalNode TPlus() { return GetToken(MetaModelParser.TPlus, 0); }
		public ITerminalNode TMinus() { return GetToken(MetaModelParser.TMinus, 0); }
		public AdditiveOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAdditiveOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAdditiveOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveOperatorContext additiveOperator() {
		AdditiveOperatorContext _localctx = new AdditiveOperatorContext(Context, State);
		EnterRule(_localctx, 118, RULE_additiveOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			_la = TokenStream.La(1);
			if ( !(_la==TPlus || _la==TMinus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOperatorContext : ParserRuleContext {
		public ITerminalNode[] TLessThan() { return GetTokens(MetaModelParser.TLessThan); }
		public ITerminalNode TLessThan(int i) {
			return GetToken(MetaModelParser.TLessThan, i);
		}
		public ITerminalNode[] TGreaterThan() { return GetTokens(MetaModelParser.TGreaterThan); }
		public ITerminalNode TGreaterThan(int i) {
			return GetToken(MetaModelParser.TGreaterThan, i);
		}
		public ShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterShiftOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitShiftOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOperatorContext shiftOperator() {
		ShiftOperatorContext _localctx = new ShiftOperatorContext(Context, State);
		EnterRule(_localctx, 120, RULE_shiftOperator);
		try {
			State = 698;
			switch (TokenStream.La(1)) {
			case TLessThan:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694; Match(TLessThan);
				State = 695; Match(TLessThan);
				}
				break;
			case TGreaterThan:
				EnterOuterAlt(_localctx, 2);
				{
				State = 696; Match(TGreaterThan);
				State = 697; Match(TGreaterThan);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode TLessThan() { return GetToken(MetaModelParser.TLessThan, 0); }
		public ITerminalNode TGreaterThan() { return GetToken(MetaModelParser.TGreaterThan, 0); }
		public ITerminalNode TLessThanOrEqual() { return GetToken(MetaModelParser.TLessThanOrEqual, 0); }
		public ITerminalNode TGreaterThanOrEqual() { return GetToken(MetaModelParser.TGreaterThanOrEqual, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 122, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			_la = TokenStream.La(1);
			if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (TLessThan - 57)) | (1L << (TGreaterThan - 57)) | (1L << (TLessThanOrEqual - 57)) | (1L << (TGreaterThanOrEqual - 57)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityOperatorContext : ParserRuleContext {
		public ITerminalNode TEqual() { return GetToken(MetaModelParser.TEqual, 0); }
		public ITerminalNode TNotEqual() { return GetToken(MetaModelParser.TNotEqual, 0); }
		public EqualityOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterEqualityOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitEqualityOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityOperatorContext equalityOperator() {
		EqualityOperatorContext _localctx = new EqualityOperatorContext(Context, State);
		EnterRule(_localctx, 124, RULE_equalityOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			_la = TokenStream.La(1);
			if ( !(_la==TEqual || _la==TNotEqual) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode TAssign() { return GetToken(MetaModelParser.TAssign, 0); }
		public ITerminalNode TAsteriskAssign() { return GetToken(MetaModelParser.TAsteriskAssign, 0); }
		public ITerminalNode TSlashAssign() { return GetToken(MetaModelParser.TSlashAssign, 0); }
		public ITerminalNode TPercentAssign() { return GetToken(MetaModelParser.TPercentAssign, 0); }
		public ITerminalNode TPlusAssign() { return GetToken(MetaModelParser.TPlusAssign, 0); }
		public ITerminalNode TMinusAssign() { return GetToken(MetaModelParser.TMinusAssign, 0); }
		public ITerminalNode TLeftShiftAssign() { return GetToken(MetaModelParser.TLeftShiftAssign, 0); }
		public ITerminalNode TRightShiftAssign() { return GetToken(MetaModelParser.TRightShiftAssign, 0); }
		public ITerminalNode TAmpersandAssign() { return GetToken(MetaModelParser.TAmpersandAssign, 0); }
		public ITerminalNode THatAssign() { return GetToken(MetaModelParser.THatAssign, 0); }
		public ITerminalNode TBarAssign() { return GetToken(MetaModelParser.TBarAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 126, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			_la = TokenStream.La(1);
			if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (TAssign - 50)) | (1L << (TAsteriskAssign - 50)) | (1L << (TSlashAssign - 50)) | (1L << (TPercentAssign - 50)) | (1L << (TPlusAssign - 50)) | (1L << (TMinusAssign - 50)) | (1L << (TLeftShiftAssign - 50)) | (1L << (TRightShiftAssign - 50)) | (1L << (TAmpersandAssign - 50)) | (1L << (THatAssign - 50)) | (1L << (TBarAssign - 50)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationDeclarationContext : ParserRuleContext {
		public QualifiedNameContext source;
		public QualifiedNameContext target;
		public ITerminalNode KAssociation() { return GetToken(MetaModelParser.KAssociation, 0); }
		public ITerminalNode KWith() { return GetToken(MetaModelParser.KWith, 0); }
		public ITerminalNode TSemicolon() { return GetToken(MetaModelParser.TSemicolon, 0); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AssociationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterAssociationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitAssociationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationDeclarationContext associationDeclaration() {
		AssociationDeclarationContext _localctx = new AssociationDeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_associationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TOpenBracket) {
				{
				{
				State = 706; annotation();
				}
				}
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 712; Match(KAssociation);
			State = 713; _localctx.source = qualifiedName();
			State = 714; Match(KWith);
			State = 715; _localctx.target = qualifiedName();
			State = 716; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(MetaModelParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(MetaModelParser.IdentifierVerbatim, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 130, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			_la = TokenStream.La(1);
			if ( !(_la==IdentifierNormal || _la==IdentifierVerbatim) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 132, RULE_literal);
		try {
			State = 726;
			switch (TokenStream.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 720; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 721; booleanLiteral();
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 722; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 723; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 724; scientificLiteral();
				}
				break;
			case RegularStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 725; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(MetaModelParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 134, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(MetaModelParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(MetaModelParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			_la = TokenStream.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(MetaModelParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 138, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(MetaModelParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 140, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(MetaModelParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 142, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(MetaModelParser.RegularStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaModelParserListener typedListener = listener as IMetaModelParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaModelParserVisitor<TResult> typedVisitor = visitor as IMetaModelParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 144, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738; Match(RegularStringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 50: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 21);
		case 14: return Precpred(Context, 20);
		case 15: return Precpred(Context, 19);
		case 16: return Precpred(Context, 18);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 14);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3k\x2E7\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\a\x3\x9A\n\x3\f\x3\xE\x3\x9D\v\x3\x3\x4\x3\x4\x3\x4\a\x4\xA2\n\x4\f\x4"+
		"\xE\x4\xA5\v\x4\x3\x5\x3\x5\x3\x5\a\x5\xAA\n\x5\f\x5\xE\x5\xAD\v\x5\x3"+
		"\x6\x3\x6\x3\x6\x5\x6\xB2\n\x6\x3\x6\x3\x6\x3\a\x3\a\x5\a\xB8\n\a\x3\a"+
		"\x3\a\x3\b\x3\b\x3\b\a\b\xBF\n\b\f\b\xE\b\xC2\v\b\x3\t\x3\t\x3\t\x3\t"+
		"\x3\n\a\n\xC9\n\n\f\n\xE\n\xCC\v\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\xD3\n"+
		"\n\f\n\xE\n\xD6\v\n\x3\n\x3\n\x3\v\a\v\xDB\n\v\f\v\xE\v\xDE\v\v\x3\v\x3"+
		"\v\x3\v\x3\v\x5\v\xE4\n\v\x3\v\x5\v\xE7\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\a"+
		"\f\xEE\n\f\f\f\xE\f\xF1\v\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x5\xE\xFC\n\xE\x3\xF\a\xF\xFF\n\xF\f\xF\xE\xF\x102\v\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x10A\n\xF\f\xF\xE\xF\x10D\v\xF\x5\xF"+
		"\x10F\n\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\a\x10\x116\n\x10\f\x10\xE"+
		"\x10\x119\v\x10\x3\x11\a\x11\x11C\n\x11\f\x11\xE\x11\x11F\v\x11\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x13\a\x13\x126\n\x13\f\x13\xE\x13\x129\v\x13"+
		"\x3\x13\x5\x13\x12C\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x132\n\x13"+
		"\x3\x13\x3\x13\a\x13\x136\n\x13\f\x13\xE\x13\x139\v\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\a\x14\x140\n\x14\f\x14\xE\x14\x143\v\x14\x3\x15"+
		"\x3\x15\x3\x16\x3\x16\x3\x16\x5\x16\x14A\n\x16\x3\x17\a\x17\x14D\n\x17"+
		"\f\x17\xE\x17\x150\v\x17\x3\x17\x5\x17\x153\n\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x5\x17\x159\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x5"+
		"\x19\x161\n\x19\x3\x1A\x3\x1A\x5\x1A\x165\n\x1A\x3\x1B\x3\x1B\x3\x1B\a"+
		"\x1B\x16A\n\x1B\f\x1B\xE\x1B\x16D\v\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x5\x1C\x174\n\x1C\x3\x1C\x3\x1C\x3\x1D\a\x1D\x179\n\x1D\f\x1D\xE"+
		"\x1D\x17C\v\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x183\n\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x5\x1E\x18A\n\x1E\x3\x1F\x3\x1F\x5\x1F"+
		"\x18E\n\x1F\x3 \x3 \x5 \x192\n \x3!\x3!\x3!\x3!\x5!\x198\n!\x3\"\x3\""+
		"\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3"+
		")\x3)\x3*\a*\x1AF\n*\f*\xE*\x1B2\v*\x3*\x5*\x1B5\n*\x3*\x3*\x3*\x3*\x5"+
		"*\x1BB\n*\x3*\x3*\x3*\x3+\x3+\x3+\a+\x1C3\n+\f+\xE+\x1C6\v+\x3,\a,\x1C9"+
		"\n,\f,\xE,\x1CC\v,\x3,\x3,\x3,\x3-\a-\x1D2\n-\f-\xE-\x1D5\v-\x3-\x3-\x3"+
		"-\x3-\x3-\a-\x1DC\n-\f-\xE-\x1DF\v-\x3-\x3-\x3.\x3.\x5.\x1E5\n.\x3/\x3"+
		"/\x5/\x1E9\n/\x3/\x3/\x3/\x3/\x5/\x1EF\n/\x3/\x3/\x3/\x3/\x3/\x3\x30\x3"+
		"\x30\x5\x30\x1F8\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30"+
		"\x200\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\a"+
		"\x31\x20A\n\x31\f\x31\xE\x31\x20D\v\x31\x3\x32\x3\x32\x3\x32\a\x32\x212"+
		"\n\x32\f\x32\xE\x32\x215\v\x32\x3\x33\x3\x33\x5\x33\x219\n\x33\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x5\x34\x233\n\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x5\x34\x26D\n\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\a\x34\x27B\n\x34\f\x34\xE\x34"+
		"\x27E\v\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x286\n\x35"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x28E\n\x36\x3\x36\x5"+
		"\x36\x291\n\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x299"+
		"\n\x36\x3\x36\x5\x36\x29C\n\x36\x5\x36\x29E\n\x36\x3\x37\x3\x37\x3\x37"+
		"\a\x37\x2A3\n\x37\f\x37\xE\x37\x2A6\v\x37\x3\x37\x5\x37\x2A9\n\x37\x3"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x3;\x3;\x3<\x3<\x3=\x3"+
		"=\x3>\x3>\x3>\x3>\x5>\x2BD\n>\x3?\x3?\x3@\x3@\x3\x41\x3\x41\x3\x42\a\x42"+
		"\x2C6\n\x42\f\x42\xE\x42\x2C9\v\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44"+
		"\x2D9\n\x44\x3\x45\x3\x45\x3\x46\x3\x46\x3G\x3G\x3H\x3H\x3I\x3I\x3J\x3"+
		"J\x3J\x2\x3\x66K\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \""+
		"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66h"+
		"jlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x2\x10\x4\x2\f\f*"+
		".\x3\x2\x13\x14\x3\x2\x15\x1A\x3\x2\x1C\x1E\x4\x2\x1B\x1B\x1F!\x3\x2\x44"+
		"\x45\x3\x2\x46I\x3\x2JL\x3\x2\x46G\x4\x2;<MN\x3\x2OP\x4\x2\x34\x34QZ\x3"+
		"\x2[\\\x3\x2\x10\x11\x306\x2\x94\x3\x2\x2\x2\x4\x96\x3\x2\x2\x2\x6\x9E"+
		"\x3\x2\x2\x2\b\xA6\x3\x2\x2\x2\n\xAE\x3\x2\x2\x2\f\xB5\x3\x2\x2\x2\xE"+
		"\xBB\x3\x2\x2\x2\x10\xC3\x3\x2\x2\x2\x12\xCA\x3\x2\x2\x2\x14\xDC\x3\x2"+
		"\x2\x2\x16\xEA\x3\x2\x2\x2\x18\xF2\x3\x2\x2\x2\x1A\xFB\x3\x2\x2\x2\x1C"+
		"\x100\x3\x2\x2\x2\x1E\x112\x3\x2\x2\x2 \x11D\x3\x2\x2\x2\"\x122\x3\x2"+
		"\x2\x2$\x127\x3\x2\x2\x2&\x13C\x3\x2\x2\x2(\x144\x3\x2\x2\x2*\x149\x3"+
		"\x2\x2\x2,\x14E\x3\x2\x2\x2.\x15C\x3\x2\x2\x2\x30\x15E\x3\x2\x2\x2\x32"+
		"\x162\x3\x2\x2\x2\x34\x166\x3\x2\x2\x2\x36\x16E\x3\x2\x2\x2\x38\x17A\x3"+
		"\x2\x2\x2:\x189\x3\x2\x2\x2<\x18D\x3\x2\x2\x2>\x191\x3\x2\x2\x2@\x197"+
		"\x3\x2\x2\x2\x42\x199\x3\x2\x2\x2\x44\x19B\x3\x2\x2\x2\x46\x19D\x3\x2"+
		"\x2\x2H\x19F\x3\x2\x2\x2J\x1A1\x3\x2\x2\x2L\x1A3\x3\x2\x2\x2N\x1A6\x3"+
		"\x2\x2\x2P\x1AB\x3\x2\x2\x2R\x1B0\x3\x2\x2\x2T\x1BF\x3\x2\x2\x2V\x1CA"+
		"\x3\x2\x2\x2X\x1D3\x3\x2\x2\x2Z\x1E4\x3\x2\x2\x2\\\x1E8\x3\x2\x2\x2^\x1F7"+
		"\x3\x2\x2\x2`\x206\x3\x2\x2\x2\x62\x20E\x3\x2\x2\x2\x64\x218\x3\x2\x2"+
		"\x2\x66\x232\x3\x2\x2\x2h\x285\x3\x2\x2\x2j\x29D\x3\x2\x2\x2l\x29F\x3"+
		"\x2\x2\x2n\x2AA\x3\x2\x2\x2p\x2AE\x3\x2\x2\x2r\x2B0\x3\x2\x2\x2t\x2B2"+
		"\x3\x2\x2\x2v\x2B4\x3\x2\x2\x2x\x2B6\x3\x2\x2\x2z\x2BC\x3\x2\x2\x2|\x2BE"+
		"\x3\x2\x2\x2~\x2C0\x3\x2\x2\x2\x80\x2C2\x3\x2\x2\x2\x82\x2C7\x3\x2\x2"+
		"\x2\x84\x2D0\x3\x2\x2\x2\x86\x2D8\x3\x2\x2\x2\x88\x2DA\x3\x2\x2\x2\x8A"+
		"\x2DC\x3\x2\x2\x2\x8C\x2DE\x3\x2\x2\x2\x8E\x2E0\x3\x2\x2\x2\x90\x2E2\x3"+
		"\x2\x2\x2\x92\x2E4\x3\x2\x2\x2\x94\x95\x5\x12\n\x2\x95\x3\x3\x2\x2\x2"+
		"\x96\x9B\x5\x84\x43\x2\x97\x98\a\x32\x2\x2\x98\x9A\x5\x84\x43\x2\x99\x97"+
		"\x3\x2\x2\x2\x9A\x9D\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2"+
		"\x2\x9C\x5\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9E\xA3\x5\x84\x43\x2\x9F\xA0"+
		"\a\x33\x2\x2\xA0\xA2\x5\x84\x43\x2\xA1\x9F\x3\x2\x2\x2\xA2\xA5\x3\x2\x2"+
		"\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\a\x3\x2\x2\x2\xA5\xA3"+
		"\x3\x2\x2\x2\xA6\xAB\x5\x4\x3\x2\xA7\xA8\a\x33\x2\x2\xA8\xAA\x5\x4\x3"+
		"\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAD\x3\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAB\xAC"+
		"\x3\x2\x2\x2\xAC\t\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2\xAE\xAF\a\x37\x2\x2"+
		"\xAF\xB1\x5\x84\x43\x2\xB0\xB2\x5\f\a\x2\xB1\xB0\x3\x2\x2\x2\xB1\xB2\x3"+
		"\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB4\a\x38\x2\x2\xB4\v\x3\x2\x2\x2\xB5"+
		"\xB7\a\x35\x2\x2\xB6\xB8\x5\xE\b\x2\xB7\xB6\x3\x2\x2\x2\xB7\xB8\x3\x2"+
		"\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\a\x36\x2\x2\xBA\r\x3\x2\x2\x2\xBB\xC0"+
		"\x5\x10\t\x2\xBC\xBD\a\x33\x2\x2\xBD\xBF\x5\x10\t\x2\xBE\xBC\x3\x2\x2"+
		"\x2\xBF\xC2\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xF"+
		"\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC4\x5\x84\x43\x2\xC4\xC5\a\x34\x2"+
		"\x2\xC5\xC6\x5\x66\x34\x2\xC6\x11\x3\x2\x2\x2\xC7\xC9\x5\n\x6\x2\xC8\xC7"+
		"\x3\x2\x2\x2\xC9\xCC\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2\x2"+
		"\x2\xCB\xCD\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD\xCE\a\x3\x2\x2\xCE\xCF"+
		"\x5\x4\x3\x2\xCF\xD0\a\x39\x2\x2\xD0\xD4\x5\x14\v\x2\xD1\xD3\x5\x1A\xE"+
		"\x2\xD2\xD1\x3\x2\x2\x2\xD3\xD6\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5"+
		"\x3\x2\x2\x2\xD5\xD7\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD7\xD8\a:\x2\x2"+
		"\xD8\x13\x3\x2\x2\x2\xD9\xDB\x5\n\x6\x2\xDA\xD9\x3\x2\x2\x2\xDB\xDE\x3"+
		"\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDF\x3\x2\x2\x2"+
		"\xDE\xDC\x3\x2\x2\x2\xDF\xE0\a\x5\x2\x2\xE0\xE6\x5\x84\x43\x2\xE1\xE3"+
		"\a\x35\x2\x2\xE2\xE4\x5\x16\f\x2\xE3\xE2\x3\x2\x2\x2\xE3\xE4\x3\x2\x2"+
		"\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE7\a\x36\x2\x2\xE6\xE1\x3\x2\x2\x2\xE6\xE7"+
		"\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xE9\a\x30\x2\x2\xE9\x15\x3\x2\x2"+
		"\x2\xEA\xEF\x5\x18\r\x2\xEB\xEC\a\x33\x2\x2\xEC\xEE\x5\x18\r\x2\xED\xEB"+
		"\x3\x2\x2\x2\xEE\xF1\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xF0\x3\x2\x2"+
		"\x2\xF0\x17\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2\xF2\xF3\x5\x84\x43\x2\xF3"+
		"\xF4\a\x34\x2\x2\xF4\xF5\x5\x92J\x2\xF5\x19\x3\x2\x2\x2\xF6\xFC\x5\x1C"+
		"\xF\x2\xF7\xFC\x5$\x13\x2\xF8\xFC\x5\x82\x42\x2\xF9\xFC\x5\x36\x1C\x2"+
		"\xFA\xFC\x5\x38\x1D\x2\xFB\xF6\x3\x2\x2\x2\xFB\xF7\x3\x2\x2\x2\xFB\xF8"+
		"\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFB\xFA\x3\x2\x2\x2\xFC\x1B\x3\x2\x2"+
		"\x2\xFD\xFF\x5\n\x6\x2\xFE\xFD\x3\x2\x2\x2\xFF\x102\x3\x2\x2\x2\x100\xFE"+
		"\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101\x103\x3\x2\x2\x2\x102\x100\x3"+
		"\x2\x2\x2\x103\x104\a\n\x2\x2\x104\x105\x5\x84\x43\x2\x105\x106\a\x39"+
		"\x2\x2\x106\x10E\x5\x1E\x10\x2\x107\x10B\a\x30\x2\x2\x108\x10A\x5\"\x12"+
		"\x2\x109\x108\x3\x2\x2\x2\x10A\x10D\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2"+
		"\x10B\x10C\x3\x2\x2\x2\x10C\x10F\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2\x10E"+
		"\x107\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x111"+
		"\a:\x2\x2\x111\x1D\x3\x2\x2\x2\x112\x117\x5 \x11\x2\x113\x114\a\x33\x2"+
		"\x2\x114\x116\x5 \x11\x2\x115\x113\x3\x2\x2\x2\x116\x119\x3\x2\x2\x2\x117"+
		"\x115\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x1F\x3\x2\x2\x2\x119\x117"+
		"\x3\x2\x2\x2\x11A\x11C\x5\n\x6\x2\x11B\x11A\x3\x2\x2\x2\x11C\x11F\x3\x2"+
		"\x2\x2\x11D\x11B\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x120\x3\x2\x2"+
		"\x2\x11F\x11D\x3\x2\x2\x2\x120\x121\x5\x84\x43\x2\x121!\x3\x2\x2\x2\x122"+
		"\x123\x5R*\x2\x123#\x3\x2\x2\x2\x124\x126\x5\n\x6\x2\x125\x124\x3\x2\x2"+
		"\x2\x126\x129\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2"+
		"\x128\x12B\x3\x2\x2\x2\x129\x127\x3\x2\x2\x2\x12A\x12C\a\b\x2\x2\x12B"+
		"\x12A\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x12E"+
		"\a\t\x2\x2\x12E\x131\x5\x84\x43\x2\x12F\x130\a\x31\x2\x2\x130\x132\x5"+
		"&\x14\x2\x131\x12F\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133\x3\x2\x2"+
		"\x2\x133\x137\a\x39\x2\x2\x134\x136\x5*\x16\x2\x135\x134\x3\x2\x2\x2\x136"+
		"\x139\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138\x13A"+
		"\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x13A\x13B\a:\x2\x2\x13B%\x3\x2\x2\x2"+
		"\x13C\x141\x5(\x15\x2\x13D\x13E\a\x33\x2\x2\x13E\x140\x5(\x15\x2\x13F"+
		"\x13D\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x141\x142"+
		"\x3\x2\x2\x2\x142\'\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x144\x145\x5\x4"+
		"\x3\x2\x145)\x3\x2\x2\x2\x146\x14A\x5,\x17\x2\x147\x14A\x5R*\x2\x148\x14A"+
		"\x5X-\x2\x149\x146\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x149\x148\x3\x2\x2"+
		"\x2\x14A+\x3\x2\x2\x2\x14B\x14D\x5\n\x6\x2\x14C\x14B\x3\x2\x2\x2\x14D"+
		"\x150\x3\x2\x2\x2\x14E\x14C\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x152"+
		"\x3\x2\x2\x2\x150\x14E\x3\x2\x2\x2\x151\x153\x5.\x18\x2\x152\x151\x3\x2"+
		"\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x155\x5> \x2\x155"+
		"\x158\x5\x84\x43\x2\x156\x159\x5\x30\x19\x2\x157\x159\x5\x32\x1A\x2\x158"+
		"\x156\x3\x2\x2\x2\x158\x157\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15A"+
		"\x3\x2\x2\x2\x15A\x15B\a\x30\x2\x2\x15B-\x3\x2\x2\x2\x15C\x15D\t\x2\x2"+
		"\x2\x15D/\x3\x2\x2\x2\x15E\x160\a(\x2\x2\x15F\x161\x5\x34\x1B\x2\x160"+
		"\x15F\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x31\x3\x2\x2\x2\x162\x164"+
		"\a)\x2\x2\x163\x165\x5\x34\x1B\x2\x164\x163\x3\x2\x2\x2\x164\x165\x3\x2"+
		"\x2\x2\x165\x33\x3\x2\x2\x2\x166\x16B\x5\x4\x3\x2\x167\x168\a\x33\x2\x2"+
		"\x168\x16A\x5\x4\x3\x2\x169\x167\x3\x2\x2\x2\x16A\x16D\x3\x2\x2\x2\x16B"+
		"\x169\x3\x2\x2\x2\x16B\x16C\x3\x2\x2\x2\x16C\x35\x3\x2\x2\x2\x16D\x16B"+
		"\x3\x2\x2\x2\x16E\x16F\a\'\x2\x2\x16F\x170\x5> \x2\x170\x173\x5\x84\x43"+
		"\x2\x171\x172\a\x34\x2\x2\x172\x174\x5\x64\x33\x2\x173\x171\x3\x2\x2\x2"+
		"\x173\x174\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x176\a\x30\x2\x2\x176"+
		"\x37\x3\x2\x2\x2\x177\x179\x5\n\x6\x2\x178\x177\x3\x2\x2\x2\x179\x17C"+
		"\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17D\x3"+
		"\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17D\x17E\a\x6\x2\x2\x17E\x17F\x5:\x1E"+
		"\x2\x17F\x180\x5\x84\x43\x2\x180\x182\a\x35\x2\x2\x181\x183\x5T+\x2\x182"+
		"\x181\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x185"+
		"\a\x36\x2\x2\x185\x186\a\x30\x2\x2\x186\x39\x3\x2\x2\x2\x187\x18A\x5>"+
		" \x2\x188\x18A\x5H%\x2\x189\x187\x3\x2\x2\x2\x189\x188\x3\x2\x2\x2\x18A"+
		";\x3\x2\x2\x2\x18B\x18E\x5J&\x2\x18C\x18E\x5> \x2\x18D\x18B\x3\x2\x2\x2"+
		"\x18D\x18C\x3\x2\x2\x2\x18E=\x3\x2\x2\x2\x18F\x192\x5N(\x2\x190\x192\x5"+
		"@!\x2\x191\x18F\x3\x2\x2\x2\x191\x190\x3\x2\x2\x2\x192?\x3\x2\x2\x2\x193"+
		"\x198\x5\x46$\x2\x194\x198\x5\x44#\x2\x195\x198\x5L\'\x2\x196\x198\x5"+
		"\x4\x3\x2\x197\x193\x3\x2\x2\x2\x197\x194\x3\x2\x2\x2\x197\x195\x3\x2"+
		"\x2\x2\x197\x196\x3\x2\x2\x2\x198\x41\x3\x2\x2\x2\x199\x19A\x5\x4\x3\x2"+
		"\x19A\x43\x3\x2\x2\x2\x19B\x19C\t\x3\x2\x2\x19C\x45\x3\x2\x2\x2\x19D\x19E"+
		"\t\x4\x2\x2\x19EG\x3\x2\x2\x2\x19F\x1A0\a\x12\x2\x2\x1A0I\x3\x2\x2\x2"+
		"\x1A1\x1A2\t\x5\x2\x2\x1A2K\x3\x2\x2\x2\x1A3\x1A4\x5\x46$\x2\x1A4\x1A5"+
		"\a=\x2\x2\x1A5M\x3\x2\x2\x2\x1A6\x1A7\x5P)\x2\x1A7\x1A8\a;\x2\x2\x1A8"+
		"\x1A9\x5@!\x2\x1A9\x1AA\a<\x2\x2\x1AAO\x3\x2\x2\x2\x1AB\x1AC\t\x6\x2\x2"+
		"\x1ACQ\x3\x2\x2\x2\x1AD\x1AF\x5\n\x6\x2\x1AE\x1AD\x3\x2\x2\x2\x1AF\x1B2"+
		"\x3\x2\x2\x2\x1B0\x1AE\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B4\x3"+
		"\x2\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B3\x1B5\a/\x2\x2\x1B4\x1B3\x3\x2\x2"+
		"\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B7\x5:\x1E\x2\x1B7"+
		"\x1B8\x5\x84\x43\x2\x1B8\x1BA\a\x35\x2\x2\x1B9\x1BB\x5T+\x2\x1BA\x1B9"+
		"\x3\x2\x2\x2\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BD\a\x36"+
		"\x2\x2\x1BD\x1BE\a\x30\x2\x2\x1BES\x3\x2\x2\x2\x1BF\x1C4\x5V,\x2\x1C0"+
		"\x1C1\a\x33\x2\x2\x1C1\x1C3\x5V,\x2\x1C2\x1C0\x3\x2\x2\x2\x1C3\x1C6\x3"+
		"\x2\x2\x2\x1C4\x1C2\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5U\x3\x2\x2\x2"+
		"\x1C6\x1C4\x3\x2\x2\x2\x1C7\x1C9\x5\n\x6\x2\x1C8\x1C7\x3\x2\x2\x2\x1C9"+
		"\x1CC\x3\x2\x2\x2\x1CA\x1C8\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1CD"+
		"\x3\x2\x2\x2\x1CC\x1CA\x3\x2\x2\x2\x1CD\x1CE\x5> \x2\x1CE\x1CF\x5\x84"+
		"\x43\x2\x1CFW\x3\x2\x2\x2\x1D0\x1D2\x5\n\x6\x2\x1D1\x1D0\x3\x2\x2\x2\x1D2"+
		"\x1D5\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x1D6"+
		"\x3\x2\x2\x2\x1D5\x1D3\x3\x2\x2\x2\x1D6\x1D7\x5\x84\x43\x2\x1D7\x1D8\a"+
		"\x35\x2\x2\x1D8\x1D9\a\x36\x2\x2\x1D9\x1DD\a\x39\x2\x2\x1DA\x1DC\x5Z."+
		"\x2\x1DB\x1DA\x3\x2\x2\x2\x1DC\x1DF\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2"+
		"\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1E0\x3\x2\x2\x2\x1DF\x1DD\x3\x2\x2\x2\x1E0"+
		"\x1E1\a:\x2\x2\x1E1Y\x3\x2\x2\x2\x1E2\x1E5\x5\\/\x2\x1E3\x1E5\x5^\x30"+
		"\x2\x1E4\x1E2\x3\x2\x2\x2\x1E4\x1E3\x3\x2\x2\x2\x1E5[\x3\x2\x2\x2\x1E6"+
		"\x1E7\a\"\x2\x2\x1E7\x1E9\a\x32\x2\x2\x1E8\x1E6\x3\x2\x2\x2\x1E8\x1E9"+
		"\x3\x2\x2\x2\x1E9\x1EE\x3\x2\x2\x2\x1EA\x1EB\a\x37\x2\x2\x1EB\x1EC\x5"+
		"\x4\x3\x2\x1EC\x1ED\a\x38\x2\x2\x1ED\x1EF\x3\x2\x2\x2\x1EE\x1EA\x3\x2"+
		"\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x1F1\x5\x84\x43"+
		"\x2\x1F1\x1F2\a\x34\x2\x2\x1F2\x1F3\x5\x66\x34\x2\x1F3\x1F4\a\x30\x2\x2"+
		"\x1F4]\x3\x2\x2\x2\x1F5\x1F6\a\"\x2\x2\x1F6\x1F8\a\x32\x2\x2\x1F7\x1F5"+
		"\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1FA\x5"+
		"\x84\x43\x2\x1FA\x1FF\a\x32\x2\x2\x1FB\x1FC\a\x37\x2\x2\x1FC\x1FD\x5\x4"+
		"\x3\x2\x1FD\x1FE\a\x38\x2\x2\x1FE\x200\x3\x2\x2\x2\x1FF\x1FB\x3\x2\x2"+
		"\x2\x1FF\x200\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2\x201\x202\x5\x84\x43\x2"+
		"\x202\x203\a\x34\x2\x2\x203\x204\x5\x66\x34\x2\x204\x205\a\x30\x2\x2\x205"+
		"_\x3\x2\x2\x2\x206\x20B\x5\x66\x34\x2\x207\x208\a\x33\x2\x2\x208\x20A"+
		"\x5\x66\x34\x2\x209\x207\x3\x2\x2\x2\x20A\x20D\x3\x2\x2\x2\x20B\x209\x3"+
		"\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x61\x3\x2\x2\x2\x20D\x20B\x3\x2\x2"+
		"\x2\x20E\x213\x5\x64\x33\x2\x20F\x210\a\x33\x2\x2\x210\x212\x5\x64\x33"+
		"\x2\x211\x20F\x3\x2\x2\x2\x212\x215\x3\x2\x2\x2\x213\x211\x3\x2\x2\x2"+
		"\x213\x214\x3\x2\x2\x2\x214\x63\x3\x2\x2\x2\x215\x213\x3\x2\x2\x2\x216"+
		"\x219\x5\x66\x34\x2\x217\x219\x5j\x36\x2\x218\x216\x3\x2\x2\x2\x218\x217"+
		"\x3\x2\x2\x2\x219\x65\x3\x2\x2\x2\x21A\x21B\b\x34\x1\x2\x21B\x21C\a\x35"+
		"\x2\x2\x21C\x21D\x5> \x2\x21D\x21E\a\x36\x2\x2\x21E\x21F\x5\x66\x34\x1D"+
		"\x21F\x233\x3\x2\x2\x2\x220\x221\x5r:\x2\x221\x222\x5\x66\x34\x13\x222"+
		"\x233\x3\x2\x2\x2\x223\x224\x5t;\x2\x224\x225\x5\x66\x34\x12\x225\x233"+
		"\x3\x2\x2\x2\x226\x227\a#\x2\x2\x227\x228\a\x35\x2\x2\x228\x229\x5<\x1F"+
		"\x2\x229\x22A\a\x36\x2\x2\x22A\x233\x3\x2\x2\x2\x22B\x22C\a\x35\x2\x2"+
		"\x22C\x22D\x5\x66\x34\x2\x22D\x22E\a\x36\x2\x2\x22E\x233\x3\x2\x2\x2\x22F"+
		"\x233\a\"\x2\x2\x230\x233\x5h\x35\x2\x231\x233\x5\x84\x43\x2\x232\x21A"+
		"\x3\x2\x2\x2\x232\x220\x3\x2\x2\x2\x232\x223\x3\x2\x2\x2\x232\x226\x3"+
		"\x2\x2\x2\x232\x22B\x3\x2\x2\x2\x232\x22F\x3\x2\x2\x2\x232\x230\x3\x2"+
		"\x2\x2\x232\x231\x3\x2\x2\x2\x233\x27C\x3\x2\x2\x2\x234\x235\f\xF\x2\x2"+
		"\x235\x236\x5v<\x2\x236\x237\x5\x66\x34\x10\x237\x27B\x3\x2\x2\x2\x238"+
		"\x239\f\xE\x2\x2\x239\x23A\x5x=\x2\x23A\x23B\x5\x66\x34\xF\x23B\x27B\x3"+
		"\x2\x2\x2\x23C\x23D\f\r\x2\x2\x23D\x23E\x5z>\x2\x23E\x23F\x5\x66\x34\xE"+
		"\x23F\x27B\x3\x2\x2\x2\x240\x241\f\f\x2\x2\x241\x242\x5|?\x2\x242\x243"+
		"\x5\x66\x34\r\x243\x27B\x3\x2\x2\x2\x244\x245\f\v\x2\x2\x245\x246\x5~"+
		"@\x2\x246\x247\x5\x66\x34\f\x247\x27B\x3\x2\x2\x2\x248\x249\f\n\x2\x2"+
		"\x249\x24A\a?\x2\x2\x24A\x27B\x5\x66\x34\v\x24B\x24C\f\t\x2\x2\x24C\x24D"+
		"\a@\x2\x2\x24D\x27B\x5\x66\x34\n\x24E\x24F\f\b\x2\x2\x24F\x250\a\x41\x2"+
		"\x2\x250\x27B\x5\x66\x34\t\x251\x252\f\a\x2\x2\x252\x253\a\x42\x2\x2\x253"+
		"\x27B\x5\x66\x34\b\x254\x255\f\x6\x2\x2\x255\x256\a\x43\x2\x2\x256\x27B"+
		"\x5\x66\x34\a\x257\x258\f\x5\x2\x2\x258\x259\a>\x2\x2\x259\x27B\x5\x66"+
		"\x34\x6\x25A\x25B\f\x4\x2\x2\x25B\x25C\a=\x2\x2\x25C\x25D\x5\x66\x34\x2"+
		"\x25D\x25E\a\x31\x2\x2\x25E\x25F\x5\x66\x34\x5\x25F\x27B\x3\x2\x2\x2\x260"+
		"\x261\f\x3\x2\x2\x261\x262\x5\x80\x41\x2\x262\x263\x5\x66\x34\x4\x263"+
		"\x27B\x3\x2\x2\x2\x264\x265\f\x17\x2\x2\x265\x266\a\x37\x2\x2\x266\x267"+
		"\x5`\x31\x2\x267\x268\a\x38\x2\x2\x268\x27B\x3\x2\x2\x2\x269\x26A\f\x16"+
		"\x2\x2\x26A\x26C\a\x35\x2\x2\x26B\x26D\x5`\x31\x2\x26C\x26B\x3\x2\x2\x2"+
		"\x26C\x26D\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x27B\a\x36\x2\x2\x26F"+
		"\x270\f\x15\x2\x2\x270\x271\a\x32\x2\x2\x271\x27B\x5\x84\x43\x2\x272\x273"+
		"\f\x14\x2\x2\x273\x27B\x5p\x39\x2\x274\x275\f\x11\x2\x2\x275\x276\a$\x2"+
		"\x2\x276\x27B\x5> \x2\x277\x278\f\x10\x2\x2\x278\x279\a%\x2\x2\x279\x27B"+
		"\x5> \x2\x27A\x234\x3\x2\x2\x2\x27A\x238\x3\x2\x2\x2\x27A\x23C\x3\x2\x2"+
		"\x2\x27A\x240\x3\x2\x2\x2\x27A\x244\x3\x2\x2\x2\x27A\x248\x3\x2\x2\x2"+
		"\x27A\x24B\x3\x2\x2\x2\x27A\x24E\x3\x2\x2\x2\x27A\x251\x3\x2\x2\x2\x27A"+
		"\x254\x3\x2\x2\x2\x27A\x257\x3\x2\x2\x2\x27A\x25A\x3\x2\x2\x2\x27A\x260"+
		"\x3\x2\x2\x2\x27A\x264\x3\x2\x2\x2\x27A\x269\x3\x2\x2\x2\x27A\x26F\x3"+
		"\x2\x2\x2\x27A\x272\x3\x2\x2\x2\x27A\x274\x3\x2\x2\x2\x27A\x277\x3\x2"+
		"\x2\x2\x27B\x27E\x3\x2\x2\x2\x27C\x27A\x3\x2\x2\x2\x27C\x27D\x3\x2\x2"+
		"\x2\x27Dg\x3\x2\x2\x2\x27E\x27C\x3\x2\x2\x2\x27F\x286\x5\x88\x45\x2\x280"+
		"\x286\x5\x8A\x46\x2\x281\x286\x5\x8CG\x2\x282\x286\x5\x8EH\x2\x283\x286"+
		"\x5\x90I\x2\x284\x286\x5\x92J\x2\x285\x27F\x3\x2\x2\x2\x285\x280\x3\x2"+
		"\x2\x2\x285\x281\x3\x2\x2\x2\x285\x282\x3\x2\x2\x2\x285\x283\x3\x2\x2"+
		"\x2\x285\x284\x3\x2\x2\x2\x286i\x3\x2\x2\x2\x287\x288\a\xE\x2\x2\x288"+
		"\x289\x5\x42\"\x2\x289\x28A\a\x35\x2\x2\x28A\x290\a\x36\x2\x2\x28B\x28D"+
		"\a\x39\x2\x2\x28C\x28E\x5l\x37\x2\x28D\x28C\x3\x2\x2\x2\x28D\x28E\x3\x2"+
		"\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x291\a:\x2\x2\x290\x28B\x3\x2\x2\x2"+
		"\x290\x291\x3\x2\x2\x2\x291\x29E\x3\x2\x2\x2\x292\x293\a\xE\x2\x2\x293"+
		"\x294\x5N(\x2\x294\x295\a\x35\x2\x2\x295\x29B\a\x36\x2\x2\x296\x298\a"+
		"\x39\x2\x2\x297\x299\x5\x64\x33\x2\x298\x297\x3\x2\x2\x2\x298\x299\x3"+
		"\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x29A\x29C\a:\x2\x2\x29B\x296\x3\x2\x2"+
		"\x2\x29B\x29C\x3\x2\x2\x2\x29C\x29E\x3\x2\x2\x2\x29D\x287\x3\x2\x2\x2"+
		"\x29D\x292\x3\x2\x2\x2\x29Ek\x3\x2\x2\x2\x29F\x2A4\x5n\x38\x2\x2A0\x2A1"+
		"\a\x33\x2\x2\x2A1\x2A3\x5n\x38\x2\x2A2\x2A0\x3\x2\x2\x2\x2A3\x2A6\x3\x2"+
		"\x2\x2\x2A4\x2A2\x3\x2\x2\x2\x2A4\x2A5\x3\x2\x2\x2\x2A5\x2A8\x3\x2\x2"+
		"\x2\x2A6\x2A4\x3\x2\x2\x2\x2A7\x2A9\a\x33\x2\x2\x2A8\x2A7\x3\x2\x2\x2"+
		"\x2A8\x2A9\x3\x2\x2\x2\x2A9m\x3\x2\x2\x2\x2AA\x2AB\x5\x84\x43\x2\x2AB"+
		"\x2AC\a\x34\x2\x2\x2AC\x2AD\x5\x64\x33\x2\x2ADo\x3\x2\x2\x2\x2AE\x2AF"+
		"\t\a\x2\x2\x2AFq\x3\x2\x2\x2\x2B0\x2B1\t\a\x2\x2\x2B1s\x3\x2\x2\x2\x2B2"+
		"\x2B3\t\b\x2\x2\x2B3u\x3\x2\x2\x2\x2B4\x2B5\t\t\x2\x2\x2B5w\x3\x2\x2\x2"+
		"\x2B6\x2B7\t\n\x2\x2\x2B7y\x3\x2\x2\x2\x2B8\x2B9\a;\x2\x2\x2B9\x2BD\a"+
		";\x2\x2\x2BA\x2BB\a<\x2\x2\x2BB\x2BD\a<\x2\x2\x2BC\x2B8\x3\x2\x2\x2\x2BC"+
		"\x2BA\x3\x2\x2\x2\x2BD{\x3\x2\x2\x2\x2BE\x2BF\t\v\x2\x2\x2BF}\x3\x2\x2"+
		"\x2\x2C0\x2C1\t\f\x2\x2\x2C1\x7F\x3\x2\x2\x2\x2C2\x2C3\t\r\x2\x2\x2C3"+
		"\x81\x3\x2\x2\x2\x2C4\x2C6\x5\n\x6\x2\x2C5\x2C4\x3\x2\x2\x2\x2C6\x2C9"+
		"\x3\x2\x2\x2\x2C7\x2C5\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\x2CA\x3"+
		"\x2\x2\x2\x2C9\x2C7\x3\x2\x2\x2\x2CA\x2CB\a\v\x2\x2\x2CB\x2CC\x5\x4\x3"+
		"\x2\x2CC\x2CD\a\r\x2\x2\x2CD\x2CE\x5\x4\x3\x2\x2CE\x2CF\a\x30\x2\x2\x2CF"+
		"\x83\x3\x2\x2\x2\x2D0\x2D1\t\xE\x2\x2\x2D1\x85\x3\x2\x2\x2\x2D2\x2D9\x5"+
		"\x88\x45\x2\x2D3\x2D9\x5\x8A\x46\x2\x2D4\x2D9\x5\x8CG\x2\x2D5\x2D9\x5"+
		"\x8EH\x2\x2D6\x2D9\x5\x90I\x2\x2D7\x2D9\x5\x92J\x2\x2D8\x2D2\x3\x2\x2"+
		"\x2\x2D8\x2D3\x3\x2\x2\x2\x2D8\x2D4\x3\x2\x2\x2\x2D8\x2D5\x3\x2\x2\x2"+
		"\x2D8\x2D6\x3\x2\x2\x2\x2D8\x2D7\x3\x2\x2\x2\x2D9\x87\x3\x2\x2\x2\x2DA"+
		"\x2DB\a\xF\x2\x2\x2DB\x89\x3\x2\x2\x2\x2DC\x2DD\t\xF\x2\x2\x2DD\x8B\x3"+
		"\x2\x2\x2\x2DE\x2DF\a]\x2\x2\x2DF\x8D\x3\x2\x2\x2\x2E0\x2E1\a^\x2\x2\x2E1"+
		"\x8F\x3\x2\x2\x2\x2E2\x2E3\a_\x2\x2\x2E3\x91\x3\x2\x2\x2\x2E4\x2E5\a\x64"+
		"\x2\x2\x2E5\x93\x3\x2\x2\x2\x45\x9B\xA3\xAB\xB1\xB7\xC0\xCA\xD4\xDC\xE3"+
		"\xE6\xEF\xFB\x100\x10B\x10E\x117\x11D\x127\x12B\x131\x137\x141\x149\x14E"+
		"\x152\x158\x160\x164\x16B\x173\x17A\x182\x189\x18D\x191\x197\x1B0\x1B4"+
		"\x1BA\x1C4\x1CA\x1D3\x1DD\x1E4\x1E8\x1EE\x1F7\x1FF\x20B\x213\x218\x232"+
		"\x26C\x27A\x27C\x285\x28D\x290\x298\x29B\x29D\x2A4\x2A8\x2BC\x2C7\x2D8";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Compiler
