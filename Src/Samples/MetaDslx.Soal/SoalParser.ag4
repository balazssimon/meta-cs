parser grammar SoalParser;

options {
	tokenVocab=SoalLexer;
	generateCompiler=true;
	generateCompilerBase=true;
}

main : namespaceDeclaration*;

$QualifiedName
qualifiedName : identifier (TDot identifier)*;
identifierList : identifier (TComma identifier)*;
qualifiedNameList : qualifiedName (TComma qualifiedName)*;

annotationList : annotation+;

returnAnnotationList : returnAnnotation+;

$Property(Annotations)
$Symbol(Annotation)
annotation : TOpenBracket annotationBody TCloseBracket;

$Property(Annotations)
$Symbol(Annotation)
returnAnnotation : TOpenBracket KReturn TColon annotationBody TCloseBracket;

annotationBody : $Property(Name) $Value identifier annotationProperties?;

annotationProperties : TOpenParen annotationPropertyList? TCloseParen;

annotationPropertyList : annotationProperty (TComma annotationProperty)*;

$Property(Properties)
$Symbol(AnnotationProperty)
annotationProperty : $Property(Name) $Value identifier TAssign $Property(Value) annotationPropertyValue;

annotationPropertyValue
	: constantValue
	| typeofValue
	;

$NameDef(symbolType=Namespace,nestingProperty=Declarations,merge=true)
namespaceDeclaration: annotationList? KNamespace qualifiedName TAssign ($Property(Prefix) $Value identifier TColon)? $Property(Uri) $Value stringLiteral TOpenBrace declaration* TCloseBrace;

$Property(Declarations)
declaration : enumDeclaration | structDeclaration | databaseDeclaration | interfaceDeclaration | componentDeclaration | compositeDeclaration | assemblyDeclaration | bindingDeclaration | endpointDeclaration | deploymentDeclaration;

// Enums

$TypeDef(Enum)
enumDeclaration : annotationList? KEnum identifier (TColon $Property(BaseType) $TypeUse(symbolType=Enum,location=ResolutionLocation.Parent) qualifiedName)? TOpenBrace enumLiterals? TCloseBrace;

enumLiterals : enumLiteral (TComma enumLiteral)* TComma?;

$Property(EnumLiterals)
$NameDef(EnumLiteral)
enumLiteral : annotationList? identifier;

// Structs and exceptions

$TypeDef(Struct)
structDeclaration : annotationList? KStruct identifier (TColon $Property(BaseType) $TypeUse(symbolType=Struct,location=ResolutionLocation.Parent) qualifiedName)? TOpenBrace propertyDeclaration* TCloseBrace;

$Property(Properties)
$NameDef(Property)
propertyDeclaration : annotationList? $Property(Type) $TypeUse typeReference identifier TSemicolon;


// Database

$TypeDef(Database)
databaseDeclaration : annotationList? KDatabase identifier TOpenBrace entityReference* operationDeclaration* TCloseBrace;

$Property(Entities)
entityReference : KEntity $TypeUse(Struct) qualifiedName TSemicolon;


// Interface

$TypeDef(Interface)
interfaceDeclaration : annotationList? KInterface identifier TOpenBrace operationDeclaration* TCloseBrace;

$Property(Operations)
$NameDef(Operation)
operationDeclaration : annotationList? operationResult identifier TOpenParen parameterList? TCloseParen (KThrows $Property(Exceptions) $TypeUse(Struct) qualifiedNameList)? TSemicolon;

parameterList : parameter (',' parameter)*;

$Property(Parameters)
$NameDef(InputParameter)
parameter : annotationList? $Property(Type) $TypeUse typeReference identifier;

$Property(Result)
$Symbol(OutputParameter)
operationResult : returnAnnotationList? ($Property(Type) $TypeUse returnType| onewayType);

// Component

$TypeDef(Component)
componentDeclaration : $Property(name=IsAbstract,value=true) KAbstract? KComponent identifier (TColon $Property(BaseComponent) $TypeUse(symbolType=Component,location=ResolutionLocation.Parent) qualifiedName)? TOpenBrace componentElements? TCloseBrace;

componentElements : componentElement+;

componentElement
	: componentService
	| componentReference
	| componentProperty
	| componentImplementation
	| componentLanguage
	;

$Property(Services)
$Symbol(Service)
componentService : KService $Property(Interface) $TypeUse(Interface) qualifiedName $Property(OptionalName) $Value identifier? componentServiceOrReferenceBody;
$Property(References)
$Symbol(Reference)
componentReference : KReference $Property(Interface) $TypeUse(Interface) qualifiedName $Property(OptionalName) $Value identifier? componentServiceOrReferenceBody;

componentServiceOrReferenceBody 
	: TSemicolon
	| TOpenBrace componentServiceOrReferenceElement* TCloseBrace;

componentServiceOrReferenceElement
	: KBinding $Property(Binding) $NameUse(Binding) qualifiedName TSemicolon;

$Property(Properties)
$NameDef(Property)
componentProperty : $TypeUse typeReference identifier TSemicolon;

$Property(Implementation)
$NameDef(Implementation)
componentImplementation : KImplementation identifier TSemicolon;

$Property(Language)
$NameDef(Language)
componentLanguage : KLanguage identifier TSemicolon;

$TypeDef(Composite)
compositeDeclaration : KComposite identifier (TColon $Property(BaseComponent) $TypeUse(symbolTypes=(Component,Composite),location=ResolutionLocation.Parent) qualifiedName)? TOpenBrace compositeElements? TCloseBrace;

$TypeDef(Assembly)
assemblyDeclaration : KAssembly identifier (TColon $Property(BaseComponent) $TypeUse(symbolTypes=(Component,Composite),location=ResolutionLocation.Parent) qualifiedName)? TOpenBrace compositeElements? TCloseBrace;

compositeElements : compositeElement+;

compositeElement
	: componentService
	| componentReference
	| componentProperty
	| componentImplementation
	| componentLanguage
	| compositeComponent
	| compositeWire
	;

$Property(Components)
compositeComponent : KComponent $NameUse(Component) qualifiedName TSemicolon;

$Property(Wires)
$Symbol(Wire)
compositeWire : KWire wireSource KTo wireTarget TSemicolon;

wireSource : $Property(Source) $NameUse(Port) qualifiedName;
wireTarget : $Property(Target) $NameUse(Port) qualifiedName;

$NameDef(Deployment)
deploymentDeclaration : KDeployment identifier TOpenBrace deploymentElements? TCloseBrace;

deploymentElements : deploymentElement+;

deploymentElement
	: environmentDeclaration
	| compositeWire
	;

$Property(Environments)
$NameDef(Environment)
environmentDeclaration : KEnvironment identifier TOpenBrace runtimeDeclaration runtimeReference* TCloseBrace;

$Property(Runtime)
$NameDef(Runtime)
runtimeDeclaration : KRuntime identifier TSemicolon;

runtimeReference
	: assemblyReference
	| databaseReference
	;

$Property(Assemblies)
assemblyReference : KAssembly $TypeUse(Assembly) qualifiedName TSemicolon;

$Property(Databases)
databaseReference : KDatabase $TypeUse(Database) qualifiedName TSemicolon;

// Binding

$NameDef(Binding)
bindingDeclaration : KBinding identifier TOpenBrace bindingLayers? TCloseBrace;

bindingLayers : transportLayer encodingLayer+ protocolLayer*;


$Property(Transport)
transportLayer 
	: httpTransportLayer 
	| restTransportLayer 
	| webSocketTransportLayer
	;

$Symbol(HttpTransportBindingElement) 
httpTransportLayer : KTransport IHTTP (TSemicolon | TOpenBrace httpTransportLayerProperties* TCloseBrace);
$Symbol(RestTransportBindingElement) 
restTransportLayer : KTransport IREST (TSemicolon | TOpenBrace TCloseBrace);
$Symbol(WebSocketTransportBindingElement) 
webSocketTransportLayer : KTransport IWebSocket (TSemicolon | TOpenBrace TCloseBrace);

httpTransportLayerProperties
	: httpSslProperty
	| httpClientAuthenticationProperty
	;

$Property(Ssl)
httpSslProperty : ISSL TAssign $Value booleanLiteral TSemicolon;
$Property(ClientAuthentication)
httpClientAuthenticationProperty : IClientAuthentication TAssign $Value booleanLiteral TSemicolon;

$Property(Encodings)
encodingLayer 
	: soapEncodingLayer
	| xmlEncodingLayer
	| jsonEncodingLayer
	;

$Symbol(SoapEncodingBindingElement) 
soapEncodingLayer : KEncoding ISOAP (TSemicolon | TOpenBrace soapEncodingProperties* TCloseBrace);
$Symbol(XmlEncodingBindingElement) 
xmlEncodingLayer : KEncoding IXML (TSemicolon | TOpenBrace TCloseBrace);
$Symbol(JsonEncodingBindingElement) 
jsonEncodingLayer : KEncoding IJSON (TSemicolon | TOpenBrace TCloseBrace);

soapEncodingProperties
	: soapVersionProperty
	| soapMtomProperty
	| soapStyleProperty
	;

$Property(Version)
soapVersionProperty : IVersion TAssign $EnumValue(SoapVersion) identifier TSemicolon;

$Property(Mtom)
soapMtomProperty : IMTOM TAssign $Value booleanLiteral TSemicolon;

$Property(Style)
soapStyleProperty : IStyle TAssign $EnumValue(SoapEncodingStyle) identifier TSemicolon;

$Property(Protocols)
$Symbol
protocolLayer : KProtocol protocolLayerKind TSemicolon;

protocolLayerKind : 
	$SymbolType(name='WsAddressing',symbolType=WsAddressingBindingElement) 
	identifier;

// Endpoint:

$NameDef(Endpoint)
endpointDeclaration : KEndpoint identifier TColon $Property(Interface) $TypeUse(Interface) qualifiedName TOpenBrace endpointProperties? TCloseBrace;

endpointProperties : endpointProperty+;

endpointProperty
	: endpointBindingProperty
	| endpointAddressProperty
	;

endpointBindingProperty : KBinding $Property(Binding) $NameUse(Binding) qualifiedName TSemicolon;
endpointAddressProperty : KAddress $Property(Address) $Value stringLiteral TSemicolon;

// Types

returnType 
	: typeReference
	| voidType
	;

typeReference 
	: nonNullableArrayType
	| arrayType
	| simpleType
	| nulledType
	;

simpleType : valueType | objectType | qualifiedName;

nulledType : nullableType | nonNullableType;

referenceType : objectType | qualifiedName;

$Name
objectType 
	: KObject 
	| KString
	;
$Name
valueType 
	: KInt 
	| KLong 
	| KFloat 
	| KDouble 
	| KByte 
	| KBool
	| IDate
	| ITime
	| IDateTime
	| ITimeSpan
	;
$Name
voidType 
	: KVoid
	;
$Property(name=IsOneway,value=true)
$Property(name=Type,value=SoalInstance.Void)
onewayType
	: KOneway
	;

$TypeCtr(NullableType)
nullableType : $Property(InnerType) $TypeUse valueType TQuestion;

$TypeCtr(NonNullableType)
nonNullableType : $Property(InnerType) $TypeUse referenceType TExclamation;

$TypeCtr(NonNullableType)
nonNullableArrayType : $Property(InnerType) $TypeUse arrayType TExclamation;

arrayType
	: simpleArrayType
	| nulledArrayType
	;

$TypeCtr(ArrayType)
simpleArrayType : $Property(InnerType) $TypeUse simpleType TOpenBracket TCloseBracket;

$TypeCtr(ArrayType)
nulledArrayType : $Property(InnerType) $TypeUse nulledType TOpenBracket TCloseBracket;


constantValue
	: literal
	| identifier
	;

typeofValue : KTypeof TOpenParen $TypeUse returnType TCloseParen;

// Identifiers
$Name
$Identifier
identifier 
	: IdentifierNormal 
	| IdentifierVerbatim
	| contextualKeywords;

// Literals
literal 
    : $Value nullLiteral
	| $Value booleanLiteral
	| $Value integerLiteral
	| $Value decimalLiteral
	| $Value scientificLiteral
    | $Value stringLiteral
	;

// Null literal
nullLiteral : KNull;

// Boolean literals
booleanLiteral : KTrue | KFalse;

// Number literals
integerLiteral : IntegerLiteral;
decimalLiteral : DecimalLiteral;
scientificLiteral : ScientificLiteral;

// String literals
stringLiteral 
	: RegularStringLiteral 
	| SingleQuoteVerbatimStringLiteral 
	| DoubleQuoteVerbatimStringLiteral;

contextualKeywords
	: IDate
	| ITime
	| IDateTime
	| ITimeSpan
	| IVersion
	| IStyle
	| IMTOM
	| ISSL
	| IHTTP
	| IREST
	| IWebSocket
	| ISOAP
	| IXML
	| IJSON
	| IClientAuthentication
	;
