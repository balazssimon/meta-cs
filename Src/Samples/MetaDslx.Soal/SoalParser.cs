//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\ua31pibc.e3o\SoalParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaDslx.Soal {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SoalParser : Parser {
	public const int
		KNamespace=1, KException=2, KStruct=3, KInterface=4, KThrows=5, KOneway=6, 
		KBinding=7, KTransport=8, KEncoding=9, KProtocol=10, KEndpoint=11, KAddress=12, 
		KDatabase=13, KEntity=14, KAbstract=15, KComponent=16, KComposite=17, 
		KReference=18, KService=19, KWire=20, KTo=21, KImplementation=22, KLanguage=23, 
		KAssembly=24, KDeployment=25, KEnvironment=26, KRuntime=27, KNull=28, 
		KTrue=29, KFalse=30, KDateTime=31, KTimeSpan=32, KObject=33, KString=34, 
		KInt=35, KLong=36, KFloat=37, KDouble=38, KByte=39, KBool=40, KAny=41, 
		KVoid=42, TSemicolon=43, TColon=44, TDot=45, TComma=46, TAssign=47, TOpenParen=48, 
		TCloseParen=49, TOpenBracket=50, TCloseBracket=51, TOpenBrace=52, TCloseBrace=53, 
		TLessThan=54, TGreaterThan=55, TQuestion=56, TQuestionQuestion=57, TAmpersand=58, 
		THat=59, TBar=60, TAndAlso=61, TOrElse=62, TPlusPlus=63, TMinusMinus=64, 
		TPlus=65, TMinus=66, TTilde=67, TExclamation=68, TSlash=69, TAsterisk=70, 
		TPercent=71, TLessThanOrEqual=72, TGreaterThanOrEqual=73, TEqual=74, TNotEqual=75, 
		TAsteriskAssign=76, TSlashAssign=77, TPercentAssign=78, TPlusAssign=79, 
		TMinusAssign=80, TLeftShiftAssign=81, TRightShiftAssign=82, TAmpersandAssign=83, 
		THatAssign=84, TBarAssign=85, IdentifierNormal=86, IdentifierVerbatim=87, 
		IntegerLiteral=88, DecimalLiteral=89, ScientificLiteral=90, DateTimeOffsetLiteral=91, 
		DateTimeLiteral=92, DateLiteral=93, TimeLiteral=94, RegularStringLiteral=95, 
		GuidLiteral=96, UTF8BOM=97, WHITESPACE=98, CRLF=99, LINEBREAK=100, LINE_COMMENT=101, 
		COMMENT=102, DoubleQuoteVerbatimStringLiteral=103, SingleQuoteVerbatimStringLiteral=104, 
		DoubleQuoteVerbatimStringLiteralStart=105;
	public const int
		RULE_main = 0, RULE_qualifiedName = 1, RULE_identifierList = 2, RULE_qualifiedNameList = 3, 
		RULE_namespaceDeclaration = 4, RULE_declaration = 5, RULE_structDeclaration = 6, 
		RULE_exceptionDeclaration = 7, RULE_entityDeclaration = 8, RULE_propertyDeclaration = 9, 
		RULE_databaseDeclaration = 10, RULE_entityReference = 11, RULE_interfaceDeclaration = 12, 
		RULE_operationDeclaration = 13, RULE_parameterList = 14, RULE_parameter = 15, 
		RULE_componentDeclaration = 16, RULE_componentElements = 17, RULE_componentElement = 18, 
		RULE_componentService = 19, RULE_componentReference = 20, RULE_componentServiceOrReferenceBody = 21, 
		RULE_componentServiceOrReferenceElement = 22, RULE_componentProperty = 23, 
		RULE_componentImplementation = 24, RULE_componentLanguage = 25, RULE_compositeDeclaration = 26, 
		RULE_compositeElements = 27, RULE_compositeElement = 28, RULE_compositeComponent = 29, 
		RULE_compositeWire = 30, RULE_wireSource = 31, RULE_wireTarget = 32, RULE_deploymentDeclaration = 33, 
		RULE_deploymentElements = 34, RULE_deploymentElement = 35, RULE_environmentDeclaration = 36, 
		RULE_runtimeDeclaration = 37, RULE_runtimeReference = 38, RULE_assemblyReference = 39, 
		RULE_databaseReference = 40, RULE_bindingDeclaration = 41, RULE_bindingLayers = 42, 
		RULE_transportLayer = 43, RULE_transportLayerKind = 44, RULE_encodingLayer = 45, 
		RULE_encodingLayerKind = 46, RULE_protocolLayer = 47, RULE_protocolLayerKind = 48, 
		RULE_endpointDeclaration = 49, RULE_endpointProperties = 50, RULE_endpointProperty = 51, 
		RULE_endpointBindingProperty = 52, RULE_endpointAddressProperty = 53, 
		RULE_returnType = 54, RULE_typeReference = 55, RULE_simpleType = 56, RULE_objectType = 57, 
		RULE_primitiveType = 58, RULE_voidType = 59, RULE_onewayType = 60, RULE_nullableType = 61, 
		RULE_arrayType = 62, RULE_identifier = 63, RULE_literal = 64, RULE_nullLiteral = 65, 
		RULE_booleanLiteral = 66, RULE_integerLiteral = 67, RULE_decimalLiteral = 68, 
		RULE_scientificLiteral = 69, RULE_stringLiteral = 70;
	public static readonly string[] ruleNames = {
		"main", "qualifiedName", "identifierList", "qualifiedNameList", "namespaceDeclaration", 
		"declaration", "structDeclaration", "exceptionDeclaration", "entityDeclaration", 
		"propertyDeclaration", "databaseDeclaration", "entityReference", "interfaceDeclaration", 
		"operationDeclaration", "parameterList", "parameter", "componentDeclaration", 
		"componentElements", "componentElement", "componentService", "componentReference", 
		"componentServiceOrReferenceBody", "componentServiceOrReferenceElement", 
		"componentProperty", "componentImplementation", "componentLanguage", "compositeDeclaration", 
		"compositeElements", "compositeElement", "compositeComponent", "compositeWire", 
		"wireSource", "wireTarget", "deploymentDeclaration", "deploymentElements", 
		"deploymentElement", "environmentDeclaration", "runtimeDeclaration", "runtimeReference", 
		"assemblyReference", "databaseReference", "bindingDeclaration", "bindingLayers", 
		"transportLayer", "transportLayerKind", "encodingLayer", "encodingLayerKind", 
		"protocolLayer", "protocolLayerKind", "endpointDeclaration", "endpointProperties", 
		"endpointProperty", "endpointBindingProperty", "endpointAddressProperty", 
		"returnType", "typeReference", "simpleType", "objectType", "primitiveType", 
		"voidType", "onewayType", "nullableType", "arrayType", "identifier", "literal", 
		"nullLiteral", "booleanLiteral", "integerLiteral", "decimalLiteral", "scientificLiteral", 
		"stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'exception'", "'struct'", "'interface'", "'throws'", 
		"'oneway'", "'binding'", "'transport'", "'encoding'", "'protocol'", "'endpoint'", 
		"'address'", "'database'", "'entity'", "'abstract'", "'component'", "'composite'", 
		"'reference'", "'service'", "'wire'", "'to'", "'implementation'", "'language'", 
		"'assembly'", "'deployment'", "'environment'", "'runtime'", "'null'", 
		"'true'", "'false'", "'DateTime'", "'TimeSpan'", "'object'", "'string'", 
		"'int'", "'long'", "'float'", "'double'", "'byte'", "'bool'", "'any'", 
		"'void'", "';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "'?'", "'??'", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'/'", null, "'%'", 
		"'<='", "'>='", "'=='", "'!='", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'&='", "'^='", "'|='", null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'@\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KNamespace", "KException", "KStruct", "KInterface", "KThrows", 
		"KOneway", "KBinding", "KTransport", "KEncoding", "KProtocol", "KEndpoint", 
		"KAddress", "KDatabase", "KEntity", "KAbstract", "KComponent", "KComposite", 
		"KReference", "KService", "KWire", "KTo", "KImplementation", "KLanguage", 
		"KAssembly", "KDeployment", "KEnvironment", "KRuntime", "KNull", "KTrue", 
		"KFalse", "KDateTime", "KTimeSpan", "KObject", "KString", "KInt", "KLong", 
		"KFloat", "KDouble", "KByte", "KBool", "KAny", "KVoid", "TSemicolon", 
		"TColon", "TDot", "TComma", "TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", 
		"TCloseBracket", "TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", 
		"TQuestion", "TQuestionQuestion", "TAmpersand", "THat", "TBar", "TAndAlso", 
		"TOrElse", "TPlusPlus", "TMinusMinus", "TPlus", "TMinus", "TTilde", "TExclamation", 
		"TSlash", "TAsterisk", "TPercent", "TLessThanOrEqual", "TGreaterThanOrEqual", 
		"TEqual", "TNotEqual", "TAsteriskAssign", "TSlashAssign", "TPercentAssign", 
		"TPlusAssign", "TMinusAssign", "TLeftShiftAssign", "TRightShiftAssign", 
		"TAmpersandAssign", "THatAssign", "TBarAssign", "IdentifierNormal", "IdentifierVerbatim", 
		"IntegerLiteral", "DecimalLiteral", "ScientificLiteral", "DateTimeOffsetLiteral", 
		"DateTimeLiteral", "DateLiteral", "TimeLiteral", "RegularStringLiteral", 
		"GuidLiteral", "UTF8BOM", "WHITESPACE", "CRLF", "LINEBREAK", "LINE_COMMENT", 
		"COMMENT", "DoubleQuoteVerbatimStringLiteral", "SingleQuoteVerbatimStringLiteral", 
		"DoubleQuoteVerbatimStringLiteralStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SoalParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SoalParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KNamespace) {
				{
				{
				State = 142; namespaceDeclaration();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(SoalParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(SoalParser.TDot, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; identifier();
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TDot) {
				{
				{
				State = 149; Match(TDot);
				State = 150; identifier();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; identifier();
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 157; Match(TComma);
				State = 158; identifier();
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(SoalParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(SoalParser.TComma, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; qualifiedName();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 165; Match(TComma);
				State = 166; qualifiedName();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(SoalParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(KNamespace);
			State = 173; qualifiedName();
			State = 174; Match(TOpenBrace);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KException) | (1L << KStruct) | (1L << KInterface) | (1L << KBinding) | (1L << KEndpoint) | (1L << KDatabase) | (1L << KEntity) | (1L << KAbstract) | (1L << KComponent) | (1L << KComposite) | (1L << KAssembly) | (1L << KDeployment))) != 0)) {
				{
				{
				State = 175; declaration();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 181; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public ExceptionDeclarationContext exceptionDeclaration() {
			return GetRuleContext<ExceptionDeclarationContext>(0);
		}
		public EntityDeclarationContext entityDeclaration() {
			return GetRuleContext<EntityDeclarationContext>(0);
		}
		public DatabaseDeclarationContext databaseDeclaration() {
			return GetRuleContext<DatabaseDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ComponentDeclarationContext componentDeclaration() {
			return GetRuleContext<ComponentDeclarationContext>(0);
		}
		public CompositeDeclarationContext compositeDeclaration() {
			return GetRuleContext<CompositeDeclarationContext>(0);
		}
		public BindingDeclarationContext bindingDeclaration() {
			return GetRuleContext<BindingDeclarationContext>(0);
		}
		public EndpointDeclarationContext endpointDeclaration() {
			return GetRuleContext<EndpointDeclarationContext>(0);
		}
		public DeploymentDeclarationContext deploymentDeclaration() {
			return GetRuleContext<DeploymentDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			State = 193;
			switch (TokenStream.La(1)) {
			case KStruct:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183; structDeclaration();
				}
				break;
			case KException:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; exceptionDeclaration();
				}
				break;
			case KEntity:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185; entityDeclaration();
				}
				break;
			case KDatabase:
				EnterOuterAlt(_localctx, 4);
				{
				State = 186; databaseDeclaration();
				}
				break;
			case KInterface:
				EnterOuterAlt(_localctx, 5);
				{
				State = 187; interfaceDeclaration();
				}
				break;
			case KAbstract:
			case KComponent:
				EnterOuterAlt(_localctx, 6);
				{
				State = 188; componentDeclaration();
				}
				break;
			case KComposite:
			case KAssembly:
				EnterOuterAlt(_localctx, 7);
				{
				State = 189; compositeDeclaration();
				}
				break;
			case KBinding:
				EnterOuterAlt(_localctx, 8);
				{
				State = 190; bindingDeclaration();
				}
				break;
			case KEndpoint:
				EnterOuterAlt(_localctx, 9);
				{
				State = 191; endpointDeclaration();
				}
				break;
			case KDeployment:
				EnterOuterAlt(_localctx, 10);
				{
				State = 192; deploymentDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode KStruct() { return GetToken(SoalParser.KStruct, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(KStruct);
			State = 196; identifier();
			State = 199;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 197; Match(TColon);
				State = 198; qualifiedName();
				}
			}

			State = 201; Match(TOpenBrace);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (KObject - 33)) | (1L << (KString - 33)) | (1L << (KInt - 33)) | (1L << (KLong - 33)) | (1L << (KFloat - 33)) | (1L << (KDouble - 33)) | (1L << (KByte - 33)) | (1L << (KBool - 33)) | (1L << (IdentifierNormal - 33)) | (1L << (IdentifierVerbatim - 33)))) != 0)) {
				{
				{
				State = 202; propertyDeclaration();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 208; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionDeclarationContext : ParserRuleContext {
		public ITerminalNode KException() { return GetToken(SoalParser.KException, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public ExceptionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterExceptionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitExceptionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionDeclarationContext exceptionDeclaration() {
		ExceptionDeclarationContext _localctx = new ExceptionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_exceptionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(KException);
			State = 211; identifier();
			State = 214;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 212; Match(TColon);
				State = 213; qualifiedName();
				}
			}

			State = 216; Match(TOpenBrace);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (KObject - 33)) | (1L << (KString - 33)) | (1L << (KInt - 33)) | (1L << (KLong - 33)) | (1L << (KFloat - 33)) | (1L << (KDouble - 33)) | (1L << (KByte - 33)) | (1L << (KBool - 33)) | (1L << (IdentifierNormal - 33)) | (1L << (IdentifierVerbatim - 33)))) != 0)) {
				{
				{
				State = 217; propertyDeclaration();
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 223; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclarationContext : ParserRuleContext {
		public ITerminalNode KEntity() { return GetToken(SoalParser.KEntity, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public EntityDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEntityDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEntityDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclarationContext entityDeclaration() {
		EntityDeclarationContext _localctx = new EntityDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_entityDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(KEntity);
			State = 226; identifier();
			State = 229;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 227; Match(TColon);
				State = 228; qualifiedName();
				}
			}

			State = 231; Match(TOpenBrace);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (KObject - 33)) | (1L << (KString - 33)) | (1L << (KInt - 33)) | (1L << (KLong - 33)) | (1L << (KFloat - 33)) | (1L << (KDouble - 33)) | (1L << (KByte - 33)) | (1L << (KBool - 33)) | (1L << (IdentifierNormal - 33)) | (1L << (IdentifierVerbatim - 33)))) != 0)) {
				{
				{
				State = 232; propertyDeclaration();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 238; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_propertyDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; typeReference();
			State = 241; identifier();
			State = 242; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseDeclarationContext : ParserRuleContext {
		public ITerminalNode KDatabase() { return GetToken(SoalParser.KDatabase, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EntityReferenceContext[] entityReference() {
			return GetRuleContexts<EntityReferenceContext>();
		}
		public EntityReferenceContext entityReference(int i) {
			return GetRuleContext<EntityReferenceContext>(i);
		}
		public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public DatabaseDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseDeclarationContext databaseDeclaration() {
		DatabaseDeclarationContext _localctx = new DatabaseDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_databaseDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(KDatabase);
			State = 245; identifier();
			State = 246; Match(TOpenBrace);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KEntity) {
				{
				{
				State = 247; entityReference();
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KOneway) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KVoid))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				{
				State = 253; operationDeclaration();
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 259; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityReferenceContext : ParserRuleContext {
		public ITerminalNode KEntity() { return GetToken(SoalParser.KEntity, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EntityReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEntityReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEntityReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityReferenceContext entityReference() {
		EntityReferenceContext _localctx = new EntityReferenceContext(Context, State);
		EnterRule(_localctx, 22, RULE_entityReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(KEntity);
			State = 262; qualifiedName();
			State = 263; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode KInterface() { return GetToken(SoalParser.KInterface, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(KInterface);
			State = 266; identifier();
			State = 267; Match(TOpenBrace);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KOneway) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool) | (1L << KVoid))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				{
				State = 268; operationDeclaration();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 274; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenParen() { return GetToken(SoalParser.TOpenParen, 0); }
		public ITerminalNode TCloseParen() { return GetToken(SoalParser.TCloseParen, 0); }
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public OnewayTypeContext onewayType() {
			return GetRuleContext<OnewayTypeContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode KThrows() { return GetToken(SoalParser.KThrows, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOperationDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOperationDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case KVoid:
			case IdentifierNormal:
			case IdentifierVerbatim:
				{
				State = 276; returnType();
				}
				break;
			case KOneway:
				{
				State = 277; onewayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 280; identifier();
			State = 281; Match(TOpenParen);
			State = 283;
			_la = TokenStream.La(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (KObject - 33)) | (1L << (KString - 33)) | (1L << (KInt - 33)) | (1L << (KLong - 33)) | (1L << (KFloat - 33)) | (1L << (KDouble - 33)) | (1L << (KByte - 33)) | (1L << (KBool - 33)) | (1L << (IdentifierNormal - 33)) | (1L << (IdentifierVerbatim - 33)))) != 0)) {
				{
				State = 282; parameterList();
				}
			}

			State = 285; Match(TCloseParen);
			State = 288;
			_la = TokenStream.La(1);
			if (_la==KThrows) {
				{
				State = 286; Match(KThrows);
				State = 287; qualifiedNameList();
				}
			}

			State = 290; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; parameter();
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TComma) {
				{
				{
				State = 293; Match(TComma);
				State = 294; parameter();
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 30, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; typeReference();
			State = 301; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentDeclarationContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode KAbstract() { return GetToken(SoalParser.KAbstract, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentElementsContext componentElements() {
			return GetRuleContext<ComponentElementsContext>(0);
		}
		public ComponentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDeclarationContext componentDeclaration() {
		ComponentDeclarationContext _localctx = new ComponentDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_componentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			_la = TokenStream.La(1);
			if (_la==KAbstract) {
				{
				State = 303; Match(KAbstract);
				}
			}

			State = 306; Match(KComponent);
			State = 307; identifier();
			State = 310;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 308; Match(TColon);
				State = 309; qualifiedName();
				}
			}

			State = 312; Match(TOpenBrace);
			State = 314;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 313; componentElements();
				}
			}

			State = 316; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementsContext : ParserRuleContext {
		public ComponentElementContext[] componentElement() {
			return GetRuleContexts<ComponentElementContext>();
		}
		public ComponentElementContext componentElement(int i) {
			return GetRuleContext<ComponentElementContext>(i);
		}
		public ComponentElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementsContext componentElements() {
		ComponentElementsContext _localctx = new ComponentElementsContext(Context, State);
		EnterRule(_localctx, 34, RULE_componentElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 318; componentElement();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KReference) | (1L << KService) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public ComponentImplementationContext componentImplementation() {
			return GetRuleContext<ComponentImplementationContext>(0);
		}
		public ComponentLanguageContext componentLanguage() {
			return GetRuleContext<ComponentLanguageContext>(0);
		}
		public ComponentElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentElementContext componentElement() {
		ComponentElementContext _localctx = new ComponentElementContext(Context, State);
		EnterRule(_localctx, 36, RULE_componentElement);
		try {
			State = 328;
			switch (TokenStream.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 324; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 325; componentProperty();
				}
				break;
			case KImplementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 326; componentImplementation();
				}
				break;
			case KLanguage:
				EnterOuterAlt(_localctx, 5);
				{
				State = 327; componentLanguage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceContext : ParserRuleContext {
		public ITerminalNode KService() { return GetToken(SoalParser.KService, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ComponentServiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentService; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentService(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentService(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentService(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceContext componentService() {
		ComponentServiceContext _localctx = new ComponentServiceContext(Context, State);
		EnterRule(_localctx, 38, RULE_componentService);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(KService);
			State = 331; qualifiedName();
			State = 333;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 332; identifier();
				}
			}

			State = 335; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentReferenceContext : ParserRuleContext {
		public ITerminalNode KReference() { return GetToken(SoalParser.KReference, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
			return GetRuleContext<ComponentServiceOrReferenceBodyContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ComponentReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentReferenceContext componentReference() {
		ComponentReferenceContext _localctx = new ComponentReferenceContext(Context, State);
		EnterRule(_localctx, 40, RULE_componentReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(KReference);
			State = 338; qualifiedName();
			State = 340;
			_la = TokenStream.La(1);
			if (_la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 339; identifier();
				}
			}

			State = 342; componentServiceOrReferenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceBodyContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ComponentServiceOrReferenceElementContext[] componentServiceOrReferenceElement() {
			return GetRuleContexts<ComponentServiceOrReferenceElementContext>();
		}
		public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement(int i) {
			return GetRuleContext<ComponentServiceOrReferenceElementContext>(i);
		}
		public ComponentServiceOrReferenceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceBodyContext componentServiceOrReferenceBody() {
		ComponentServiceOrReferenceBodyContext _localctx = new ComponentServiceOrReferenceBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_componentServiceOrReferenceBody);
		int _la;
		try {
			State = 353;
			switch (TokenStream.La(1)) {
			case TSemicolon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344; Match(TSemicolon);
				}
				break;
			case TOpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345; Match(TOpenBrace);
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==KBinding) {
					{
					{
					State = 346; componentServiceOrReferenceElement();
					}
					}
					State = 351;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 352; Match(TCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentServiceOrReferenceElementContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentServiceOrReferenceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentServiceOrReferenceElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentServiceOrReferenceElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentServiceOrReferenceElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentServiceOrReferenceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentServiceOrReferenceElementContext componentServiceOrReferenceElement() {
		ComponentServiceOrReferenceElementContext _localctx = new ComponentServiceOrReferenceElementContext(Context, State);
		EnterRule(_localctx, 44, RULE_componentServiceOrReferenceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(KBinding);
			State = 356; qualifiedName();
			State = 357; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentPropertyContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentPropertyContext componentProperty() {
		ComponentPropertyContext _localctx = new ComponentPropertyContext(Context, State);
		EnterRule(_localctx, 46, RULE_componentProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; typeReference();
			State = 360; identifier();
			State = 361; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentImplementationContext : ParserRuleContext {
		public ITerminalNode KImplementation() { return GetToken(SoalParser.KImplementation, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentImplementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentImplementation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentImplementation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentImplementation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentImplementation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentImplementationContext componentImplementation() {
		ComponentImplementationContext _localctx = new ComponentImplementationContext(Context, State);
		EnterRule(_localctx, 48, RULE_componentImplementation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; Match(KImplementation);
			State = 364; identifier();
			State = 365; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentLanguageContext : ParserRuleContext {
		public ITerminalNode KLanguage() { return GetToken(SoalParser.KLanguage, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ComponentLanguageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentLanguage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterComponentLanguage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitComponentLanguage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentLanguageContext componentLanguage() {
		ComponentLanguageContext _localctx = new ComponentLanguageContext(Context, State);
		EnterRule(_localctx, 50, RULE_componentLanguage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(KLanguage);
			State = 368; identifier();
			State = 369; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public ITerminalNode KAssembly() { return GetToken(SoalParser.KAssembly, 0); }
		public ITerminalNode KComposite() { return GetToken(SoalParser.KComposite, 0); }
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public CompositeElementsContext compositeElements() {
			return GetRuleContext<CompositeElementsContext>(0);
		}
		public CompositeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeDeclarationContext compositeDeclaration() {
		CompositeDeclarationContext _localctx = new CompositeDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_compositeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			_la = TokenStream.La(1);
			if ( !(_la==KComposite || _la==KAssembly) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 372; identifier();
			State = 375;
			_la = TokenStream.La(1);
			if (_la==TColon) {
				{
				State = 373; Match(TColon);
				State = 374; qualifiedName();
				}
			}

			State = 377; Match(TOpenBrace);
			State = 379;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim) {
				{
				State = 378; compositeElements();
				}
			}

			State = 381; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementsContext : ParserRuleContext {
		public CompositeElementContext[] compositeElement() {
			return GetRuleContexts<CompositeElementContext>();
		}
		public CompositeElementContext compositeElement(int i) {
			return GetRuleContext<CompositeElementContext>(i);
		}
		public CompositeElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementsContext compositeElements() {
		CompositeElementsContext _localctx = new CompositeElementsContext(Context, State);
		EnterRule(_localctx, 54, RULE_compositeElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 383; compositeElement();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KComponent) | (1L << KReference) | (1L << KService) | (1L << KWire) | (1L << KImplementation) | (1L << KLanguage) | (1L << KObject) | (1L << KString) | (1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0) || _la==IdentifierNormal || _la==IdentifierVerbatim );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeElementContext : ParserRuleContext {
		public ComponentServiceContext componentService() {
			return GetRuleContext<ComponentServiceContext>(0);
		}
		public ComponentReferenceContext componentReference() {
			return GetRuleContext<ComponentReferenceContext>(0);
		}
		public ComponentPropertyContext componentProperty() {
			return GetRuleContext<ComponentPropertyContext>(0);
		}
		public ComponentImplementationContext componentImplementation() {
			return GetRuleContext<ComponentImplementationContext>(0);
		}
		public ComponentLanguageContext componentLanguage() {
			return GetRuleContext<ComponentLanguageContext>(0);
		}
		public CompositeComponentContext compositeComponent() {
			return GetRuleContext<CompositeComponentContext>(0);
		}
		public CompositeWireContext compositeWire() {
			return GetRuleContext<CompositeWireContext>(0);
		}
		public CompositeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeElementContext compositeElement() {
		CompositeElementContext _localctx = new CompositeElementContext(Context, State);
		EnterRule(_localctx, 56, RULE_compositeElement);
		try {
			State = 395;
			switch (TokenStream.La(1)) {
			case KService:
				EnterOuterAlt(_localctx, 1);
				{
				State = 388; componentService();
				}
				break;
			case KReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 389; componentReference();
				}
				break;
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 3);
				{
				State = 390; componentProperty();
				}
				break;
			case KImplementation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 391; componentImplementation();
				}
				break;
			case KLanguage:
				EnterOuterAlt(_localctx, 5);
				{
				State = 392; componentLanguage();
				}
				break;
			case KComponent:
				EnterOuterAlt(_localctx, 6);
				{
				State = 393; compositeComponent();
				}
				break;
			case KWire:
				EnterOuterAlt(_localctx, 7);
				{
				State = 394; compositeWire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeComponentContext : ParserRuleContext {
		public ITerminalNode KComponent() { return GetToken(SoalParser.KComponent, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeComponentContext compositeComponent() {
		CompositeComponentContext _localctx = new CompositeComponentContext(Context, State);
		EnterRule(_localctx, 58, RULE_compositeComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(KComponent);
			State = 398; qualifiedName();
			State = 399; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeWireContext : ParserRuleContext {
		public ITerminalNode KWire() { return GetToken(SoalParser.KWire, 0); }
		public WireSourceContext wireSource() {
			return GetRuleContext<WireSourceContext>(0);
		}
		public ITerminalNode KTo() { return GetToken(SoalParser.KTo, 0); }
		public WireTargetContext wireTarget() {
			return GetRuleContext<WireTargetContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public CompositeWireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeWire; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterCompositeWire(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitCompositeWire(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeWire(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeWireContext compositeWire() {
		CompositeWireContext _localctx = new CompositeWireContext(Context, State);
		EnterRule(_localctx, 60, RULE_compositeWire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(KWire);
			State = 402; wireSource();
			State = 403; Match(KTo);
			State = 404; wireTarget();
			State = 405; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireSourceContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WireSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireSourceContext wireSource() {
		WireSourceContext _localctx = new WireSourceContext(Context, State);
		EnterRule(_localctx, 62, RULE_wireSource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WireTargetContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WireTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wireTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterWireTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitWireTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWireTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WireTargetContext wireTarget() {
		WireTargetContext _localctx = new WireTargetContext(Context, State);
		EnterRule(_localctx, 64, RULE_wireTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentDeclarationContext : ParserRuleContext {
		public ITerminalNode KDeployment() { return GetToken(SoalParser.KDeployment, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public DeploymentElementsContext deploymentElements() {
			return GetRuleContext<DeploymentElementsContext>(0);
		}
		public DeploymentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentDeclarationContext deploymentDeclaration() {
		DeploymentDeclarationContext _localctx = new DeploymentDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_deploymentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; Match(KDeployment);
			State = 412; identifier();
			State = 413; Match(TOpenBrace);
			State = 415;
			_la = TokenStream.La(1);
			if (_la==KWire || _la==KEnvironment) {
				{
				State = 414; deploymentElements();
				}
			}

			State = 417; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentElementsContext : ParserRuleContext {
		public DeploymentElementContext[] deploymentElement() {
			return GetRuleContexts<DeploymentElementContext>();
		}
		public DeploymentElementContext deploymentElement(int i) {
			return GetRuleContext<DeploymentElementContext>(i);
		}
		public DeploymentElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentElementsContext deploymentElements() {
		DeploymentElementsContext _localctx = new DeploymentElementsContext(Context, State);
		EnterRule(_localctx, 68, RULE_deploymentElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 419; deploymentElement();
				}
				}
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KWire || _la==KEnvironment );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeploymentElementContext : ParserRuleContext {
		public EnvironmentDeclarationContext environmentDeclaration() {
			return GetRuleContext<EnvironmentDeclarationContext>(0);
		}
		public CompositeWireContext compositeWire() {
			return GetRuleContext<CompositeWireContext>(0);
		}
		public DeploymentElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deploymentElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDeploymentElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDeploymentElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeploymentElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeploymentElementContext deploymentElement() {
		DeploymentElementContext _localctx = new DeploymentElementContext(Context, State);
		EnterRule(_localctx, 70, RULE_deploymentElement);
		try {
			State = 426;
			switch (TokenStream.La(1)) {
			case KEnvironment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 424; environmentDeclaration();
				}
				break;
			case KWire:
				EnterOuterAlt(_localctx, 2);
				{
				State = 425; compositeWire();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvironmentDeclarationContext : ParserRuleContext {
		public ITerminalNode KEnvironment() { return GetToken(SoalParser.KEnvironment, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public RuntimeDeclarationContext runtimeDeclaration() {
			return GetRuleContext<RuntimeDeclarationContext>(0);
		}
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public RuntimeReferenceContext[] runtimeReference() {
			return GetRuleContexts<RuntimeReferenceContext>();
		}
		public RuntimeReferenceContext runtimeReference(int i) {
			return GetRuleContext<RuntimeReferenceContext>(i);
		}
		public EnvironmentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_environmentDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEnvironmentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEnvironmentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnvironmentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnvironmentDeclarationContext environmentDeclaration() {
		EnvironmentDeclarationContext _localctx = new EnvironmentDeclarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_environmentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; Match(KEnvironment);
			State = 429; identifier();
			State = 430; Match(TOpenBrace);
			State = 431; runtimeDeclaration();
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KDatabase || _la==KAssembly) {
				{
				{
				State = 432; runtimeReference();
				}
				}
				State = 437;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 438; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeDeclarationContext : ParserRuleContext {
		public ITerminalNode KRuntime() { return GetToken(SoalParser.KRuntime, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public RuntimeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRuntimeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRuntimeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeDeclarationContext runtimeDeclaration() {
		RuntimeDeclarationContext _localctx = new RuntimeDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_runtimeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(KRuntime);
			State = 441; identifier();
			State = 442; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeReferenceContext : ParserRuleContext {
		public AssemblyReferenceContext assemblyReference() {
			return GetRuleContext<AssemblyReferenceContext>(0);
		}
		public DatabaseReferenceContext databaseReference() {
			return GetRuleContext<DatabaseReferenceContext>(0);
		}
		public RuntimeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterRuntimeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitRuntimeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeReferenceContext runtimeReference() {
		RuntimeReferenceContext _localctx = new RuntimeReferenceContext(Context, State);
		EnterRule(_localctx, 76, RULE_runtimeReference);
		try {
			State = 446;
			switch (TokenStream.La(1)) {
			case KAssembly:
				EnterOuterAlt(_localctx, 1);
				{
				State = 444; assemblyReference();
				}
				break;
			case KDatabase:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445; databaseReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyReferenceContext : ParserRuleContext {
		public ITerminalNode KAssembly() { return GetToken(SoalParser.KAssembly, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public AssemblyReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterAssemblyReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitAssemblyReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyReferenceContext assemblyReference() {
		AssemblyReferenceContext _localctx = new AssemblyReferenceContext(Context, State);
		EnterRule(_localctx, 78, RULE_assemblyReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(KAssembly);
			State = 449; qualifiedName();
			State = 450; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseReferenceContext : ParserRuleContext {
		public ITerminalNode KDatabase() { return GetToken(SoalParser.KDatabase, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public DatabaseReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDatabaseReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDatabaseReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseReferenceContext databaseReference() {
		DatabaseReferenceContext _localctx = new DatabaseReferenceContext(Context, State);
		EnterRule(_localctx, 80, RULE_databaseReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; Match(KDatabase);
			State = 453; qualifiedName();
			State = 454; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingDeclarationContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public BindingLayersContext bindingLayers() {
			return GetRuleContext<BindingLayersContext>(0);
		}
		public BindingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingDeclarationContext bindingDeclaration() {
		BindingDeclarationContext _localctx = new BindingDeclarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_bindingDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; Match(KBinding);
			State = 457; identifier();
			State = 458; Match(TOpenBrace);
			State = 460;
			_la = TokenStream.La(1);
			if (_la==KTransport) {
				{
				State = 459; bindingLayers();
				}
			}

			State = 462; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingLayersContext : ParserRuleContext {
		public TransportLayerContext transportLayer() {
			return GetRuleContext<TransportLayerContext>(0);
		}
		public EncodingLayerContext[] encodingLayer() {
			return GetRuleContexts<EncodingLayerContext>();
		}
		public EncodingLayerContext encodingLayer(int i) {
			return GetRuleContext<EncodingLayerContext>(i);
		}
		public ProtocolLayerContext[] protocolLayer() {
			return GetRuleContexts<ProtocolLayerContext>();
		}
		public ProtocolLayerContext protocolLayer(int i) {
			return GetRuleContext<ProtocolLayerContext>(i);
		}
		public BindingLayersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingLayers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBindingLayers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBindingLayers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingLayers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingLayersContext bindingLayers() {
		BindingLayersContext _localctx = new BindingLayersContext(Context, State);
		EnterRule(_localctx, 84, RULE_bindingLayers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464; transportLayer();
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 465; encodingLayer();
				}
				}
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KEncoding );
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==KProtocol) {
				{
				{
				State = 470; protocolLayer();
				}
				}
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransportLayerContext : ParserRuleContext {
		public ITerminalNode KTransport() { return GetToken(SoalParser.KTransport, 0); }
		public TransportLayerKindContext transportLayerKind() {
			return GetRuleContext<TransportLayerKindContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public TransportLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transportLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTransportLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTransportLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransportLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransportLayerContext transportLayer() {
		TransportLayerContext _localctx = new TransportLayerContext(Context, State);
		EnterRule(_localctx, 86, RULE_transportLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476; Match(KTransport);
			State = 477; transportLayerKind();
			State = 478; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransportLayerKindContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TransportLayerKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transportLayerKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTransportLayerKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTransportLayerKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransportLayerKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransportLayerKindContext transportLayerKind() {
		TransportLayerKindContext _localctx = new TransportLayerKindContext(Context, State);
		EnterRule(_localctx, 88, RULE_transportLayerKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingLayerContext : ParserRuleContext {
		public ITerminalNode KEncoding() { return GetToken(SoalParser.KEncoding, 0); }
		public EncodingLayerKindContext encodingLayerKind() {
			return GetRuleContext<EncodingLayerKindContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EncodingLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEncodingLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEncodingLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingLayerContext encodingLayer() {
		EncodingLayerContext _localctx = new EncodingLayerContext(Context, State);
		EnterRule(_localctx, 90, RULE_encodingLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; Match(KEncoding);
			State = 483; encodingLayerKind();
			State = 484; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingLayerKindContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EncodingLayerKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingLayerKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEncodingLayerKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEncodingLayerKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingLayerKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingLayerKindContext encodingLayerKind() {
		EncodingLayerKindContext _localctx = new EncodingLayerKindContext(Context, State);
		EnterRule(_localctx, 92, RULE_encodingLayerKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerContext : ParserRuleContext {
		public ITerminalNode KProtocol() { return GetToken(SoalParser.KProtocol, 0); }
		public ProtocolLayerKindContext protocolLayerKind() {
			return GetRuleContext<ProtocolLayerKindContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public ProtocolLayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerContext protocolLayer() {
		ProtocolLayerContext _localctx = new ProtocolLayerContext(Context, State);
		EnterRule(_localctx, 94, RULE_protocolLayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488; Match(KProtocol);
			State = 489; protocolLayerKind();
			State = 490; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtocolLayerKindContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ProtocolLayerKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocolLayerKind; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterProtocolLayerKind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitProtocolLayerKind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProtocolLayerKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProtocolLayerKindContext protocolLayerKind() {
		ProtocolLayerKindContext _localctx = new ProtocolLayerKindContext(Context, State);
		EnterRule(_localctx, 96, RULE_protocolLayerKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointDeclarationContext : ParserRuleContext {
		public ITerminalNode KEndpoint() { return GetToken(SoalParser.KEndpoint, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(SoalParser.TColon, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SoalParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SoalParser.TCloseBrace, 0); }
		public EndpointPropertiesContext endpointProperties() {
			return GetRuleContext<EndpointPropertiesContext>(0);
		}
		public EndpointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointDeclarationContext endpointDeclaration() {
		EndpointDeclarationContext _localctx = new EndpointDeclarationContext(Context, State);
		EnterRule(_localctx, 98, RULE_endpointDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494; Match(KEndpoint);
			State = 495; identifier();
			State = 496; Match(TColon);
			State = 497; qualifiedName();
			State = 498; Match(TOpenBrace);
			State = 500;
			_la = TokenStream.La(1);
			if (_la==KBinding || _la==KAddress) {
				{
				State = 499; endpointProperties();
				}
			}

			State = 502; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertiesContext : ParserRuleContext {
		public EndpointPropertyContext[] endpointProperty() {
			return GetRuleContexts<EndpointPropertyContext>();
		}
		public EndpointPropertyContext endpointProperty(int i) {
			return GetRuleContext<EndpointPropertyContext>(i);
		}
		public EndpointPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertiesContext endpointProperties() {
		EndpointPropertiesContext _localctx = new EndpointPropertiesContext(Context, State);
		EnterRule(_localctx, 100, RULE_endpointProperties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 504; endpointProperty();
				}
				}
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==KBinding || _la==KAddress );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointPropertyContext : ParserRuleContext {
		public EndpointBindingPropertyContext endpointBindingProperty() {
			return GetRuleContext<EndpointBindingPropertyContext>(0);
		}
		public EndpointAddressPropertyContext endpointAddressProperty() {
			return GetRuleContext<EndpointAddressPropertyContext>(0);
		}
		public EndpointPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointPropertyContext endpointProperty() {
		EndpointPropertyContext _localctx = new EndpointPropertyContext(Context, State);
		EnterRule(_localctx, 102, RULE_endpointProperty);
		try {
			State = 511;
			switch (TokenStream.La(1)) {
			case KBinding:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509; endpointBindingProperty();
				}
				break;
			case KAddress:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510; endpointAddressProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointBindingPropertyContext : ParserRuleContext {
		public ITerminalNode KBinding() { return GetToken(SoalParser.KBinding, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointBindingPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointBindingProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointBindingProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointBindingProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointBindingProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointBindingPropertyContext endpointBindingProperty() {
		EndpointBindingPropertyContext _localctx = new EndpointBindingPropertyContext(Context, State);
		EnterRule(_localctx, 104, RULE_endpointBindingProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(KBinding);
			State = 514; qualifiedName();
			State = 515; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndpointAddressPropertyContext : ParserRuleContext {
		public ITerminalNode KAddress() { return GetToken(SoalParser.KAddress, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SoalParser.TSemicolon, 0); }
		public EndpointAddressPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endpointAddressProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterEndpointAddressProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitEndpointAddressProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndpointAddressProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndpointAddressPropertyContext endpointAddressProperty() {
		EndpointAddressPropertyContext _localctx = new EndpointAddressPropertyContext(Context, State);
		EnterRule(_localctx, 106, RULE_endpointAddressProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517; Match(KAddress);
			State = 518; stringLiteral();
			State = 519; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 108, RULE_returnType);
		try {
			State = 523;
			switch (TokenStream.La(1)) {
			case KObject:
			case KString:
			case KInt:
			case KLong:
			case KFloat:
			case KDouble:
			case KByte:
			case KBool:
			case IdentifierNormal:
			case IdentifierVerbatim:
				EnterOuterAlt(_localctx, 1);
				{
				State = 521; typeReference();
				}
				break;
			case KVoid:
				EnterOuterAlt(_localctx, 2);
				{
				State = 522; voidType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 110, RULE_typeReference);
		try {
			State = 527;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 525; arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 526; simpleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_simpleType);
		try {
			State = 533;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530; objectType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 531; nullableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 532; qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ITerminalNode KObject() { return GetToken(SoalParser.KObject, 0); }
		public ITerminalNode KString() { return GetToken(SoalParser.KString, 0); }
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			_la = TokenStream.La(1);
			if ( !(_la==KObject || _la==KString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode KInt() { return GetToken(SoalParser.KInt, 0); }
		public ITerminalNode KLong() { return GetToken(SoalParser.KLong, 0); }
		public ITerminalNode KFloat() { return GetToken(SoalParser.KFloat, 0); }
		public ITerminalNode KDouble() { return GetToken(SoalParser.KDouble, 0); }
		public ITerminalNode KByte() { return GetToken(SoalParser.KByte, 0); }
		public ITerminalNode KBool() { return GetToken(SoalParser.KBool, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KInt) | (1L << KLong) | (1L << KFloat) | (1L << KDouble) | (1L << KByte) | (1L << KBool))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public ITerminalNode KVoid() { return GetToken(SoalParser.KVoid, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterVoidType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitVoidType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539; Match(KVoid);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnewayTypeContext : ParserRuleContext {
		public ITerminalNode KOneway() { return GetToken(SoalParser.KOneway, 0); }
		public OnewayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onewayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterOnewayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitOnewayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnewayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnewayTypeContext onewayType() {
		OnewayTypeContext _localctx = new OnewayTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_onewayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541; Match(KOneway);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode TQuestion() { return GetToken(SoalParser.TQuestion, 0); }
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_nullableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543; primitiveType();
			State = 544; Match(TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode TOpenBracket() { return GetToken(SoalParser.TOpenBracket, 0); }
		public ITerminalNode TCloseBracket() { return GetToken(SoalParser.TCloseBracket, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546; simpleType();
			State = 547; Match(TOpenBracket);
			State = 548; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IdentifierNormal() { return GetToken(SoalParser.IdentifierNormal, 0); }
		public ITerminalNode IdentifierVerbatim() { return GetToken(SoalParser.IdentifierVerbatim, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 126, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			_la = TokenStream.La(1);
			if ( !(_la==IdentifierNormal || _la==IdentifierVerbatim) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ScientificLiteralContext scientificLiteral() {
			return GetRuleContext<ScientificLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 128, RULE_literal);
		try {
			State = 558;
			switch (TokenStream.La(1)) {
			case KNull:
				EnterOuterAlt(_localctx, 1);
				{
				State = 552; nullLiteral();
				}
				break;
			case KTrue:
			case KFalse:
				EnterOuterAlt(_localctx, 2);
				{
				State = 553; booleanLiteral();
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 554; integerLiteral();
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 555; decimalLiteral();
				}
				break;
			case ScientificLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 556; scientificLiteral();
				}
				break;
			case RegularStringLiteral:
			case DoubleQuoteVerbatimStringLiteral:
			case SingleQuoteVerbatimStringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 557; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public ITerminalNode KNull() { return GetToken(SoalParser.KNull, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 130, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560; Match(KNull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode KTrue() { return GetToken(SoalParser.KTrue, 0); }
		public ITerminalNode KFalse() { return GetToken(SoalParser.KFalse, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 132, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			_la = TokenStream.La(1);
			if ( !(_la==KTrue || _la==KFalse) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(SoalParser.IntegerLiteral, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 134, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(SoalParser.DecimalLiteral, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_decimalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; Match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificLiteralContext : ParserRuleContext {
		public ITerminalNode ScientificLiteral() { return GetToken(SoalParser.ScientificLiteral, 0); }
		public ScientificLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientificLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterScientificLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitScientificLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificLiteralContext scientificLiteral() {
		ScientificLiteralContext _localctx = new ScientificLiteralContext(Context, State);
		EnterRule(_localctx, 138, RULE_scientificLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; Match(ScientificLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode RegularStringLiteral() { return GetToken(SoalParser.RegularStringLiteral, 0); }
		public ITerminalNode SingleQuoteVerbatimStringLiteral() { return GetToken(SoalParser.SingleQuoteVerbatimStringLiteral, 0); }
		public ITerminalNode DoubleQuoteVerbatimStringLiteral() { return GetToken(SoalParser.DoubleQuoteVerbatimStringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoalParserListener typedListener = listener as ISoalParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 140, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			_la = TokenStream.La(1);
			if ( !(((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (RegularStringLiteral - 95)) | (1L << (DoubleQuoteVerbatimStringLiteral - 95)) | (1L << (SingleQuoteVerbatimStringLiteral - 95)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3k\x23F\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x3\x2\a\x2\x92\n\x2\f\x2\xE\x2\x95\v\x2\x3"+
		"\x3\x3\x3\x3\x3\a\x3\x9A\n\x3\f\x3\xE\x3\x9D\v\x3\x3\x4\x3\x4\x3\x4\a"+
		"\x4\xA2\n\x4\f\x4\xE\x4\xA5\v\x4\x3\x5\x3\x5\x3\x5\a\x5\xAA\n\x5\f\x5"+
		"\xE\x5\xAD\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\xB3\n\x6\f\x6\xE\x6\xB6\v"+
		"\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a"+
		"\xC4\n\a\x3\b\x3\b\x3\b\x3\b\x5\b\xCA\n\b\x3\b\x3\b\a\b\xCE\n\b\f\b\xE"+
		"\b\xD1\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x5\t\xD9\n\t\x3\t\x3\t\a\t\xDD"+
		"\n\t\f\t\xE\t\xE0\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x5\n\xE8\n\n\x3\n"+
		"\x3\n\a\n\xEC\n\n\f\n\xE\n\xEF\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f"+
		"\x3\f\x3\f\x3\f\a\f\xFB\n\f\f\f\xE\f\xFE\v\f\x3\f\a\f\x101\n\f\f\f\xE"+
		"\f\x104\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\a\xE"+
		"\x110\n\xE\f\xE\xE\xE\x113\v\xE\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\x119\n\xF"+
		"\x3\xF\x3\xF\x3\xF\x5\xF\x11E\n\xF\x3\xF\x3\xF\x3\xF\x5\xF\x123\n\xF\x3"+
		"\xF\x3\xF\x3\x10\x3\x10\x3\x10\a\x10\x12A\n\x10\f\x10\xE\x10\x12D\v\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x12\x5\x12\x133\n\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x5\x12\x139\n\x12\x3\x12\x3\x12\x5\x12\x13D\n\x12\x3\x12\x3\x12\x3"+
		"\x13\x6\x13\x142\n\x13\r\x13\xE\x13\x143\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x5\x14\x14B\n\x14\x3\x15\x3\x15\x3\x15\x5\x15\x150\n\x15\x3\x15\x3"+
		"\x15\x3\x16\x3\x16\x3\x16\x5\x16\x157\n\x16\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x17\a\x17\x15E\n\x17\f\x17\xE\x17\x161\v\x17\x3\x17\x5\x17\x164\n"+
		"\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x5\x1C\x17A\n\x1C\x3\x1C\x3\x1C\x5\x1C\x17E\n\x1C\x3\x1C\x3\x1C\x3"+
		"\x1D\x6\x1D\x183\n\x1D\r\x1D\xE\x1D\x184\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x5\x1E\x18E\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x3#\x5#\x1A2\n#\x3#\x3"+
		"#\x3$\x6$\x1A7\n$\r$\xE$\x1A8\x3%\x3%\x5%\x1AD\n%\x3&\x3&\x3&\x3&\x3&"+
		"\a&\x1B4\n&\f&\xE&\x1B7\v&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x5(\x1C1"+
		"\n(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x5+\x1CF\n+\x3+\x3"+
		"+\x3,\x3,\x6,\x1D5\n,\r,\xE,\x1D6\x3,\a,\x1DA\n,\f,\xE,\x1DD\v,\x3-\x3"+
		"-\x3-\x3-\x3.\x3.\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x1F7"+
		"\n\x33\x3\x33\x3\x33\x3\x34\x6\x34\x1FC\n\x34\r\x34\xE\x34\x1FD\x3\x35"+
		"\x3\x35\x5\x35\x202\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3"+
		"\x37\x3\x37\x3\x38\x3\x38\x5\x38\x20E\n\x38\x3\x39\x3\x39\x5\x39\x212"+
		"\n\x39\x3:\x3:\x3:\x3:\x5:\x218\n:\x3;\x3;\x3<\x3<\x3=\x3=\x3>\x3>\x3"+
		"?\x3?\x3?\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x5\x42\x231\n\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45"+
		"\x3\x46\x3\x46\x3G\x3G\x3H\x3H\x3H\x2\x2I\x2\x4\x6\b\n\f\xE\x10\x12\x14"+
		"\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLN"+
		"PRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x2"+
		"\b\x4\x2\x13\x13\x1A\x1A\x3\x2#$\x3\x2%*\x3\x2XY\x3\x2\x1F \x4\x2\x61"+
		"\x61ij\x23C\x2\x93\x3\x2\x2\x2\x4\x96\x3\x2\x2\x2\x6\x9E\x3\x2\x2\x2\b"+
		"\xA6\x3\x2\x2\x2\n\xAE\x3\x2\x2\x2\f\xC3\x3\x2\x2\x2\xE\xC5\x3\x2\x2\x2"+
		"\x10\xD4\x3\x2\x2\x2\x12\xE3\x3\x2\x2\x2\x14\xF2\x3\x2\x2\x2\x16\xF6\x3"+
		"\x2\x2\x2\x18\x107\x3\x2\x2\x2\x1A\x10B\x3\x2\x2\x2\x1C\x118\x3\x2\x2"+
		"\x2\x1E\x126\x3\x2\x2\x2 \x12E\x3\x2\x2\x2\"\x132\x3\x2\x2\x2$\x141\x3"+
		"\x2\x2\x2&\x14A\x3\x2\x2\x2(\x14C\x3\x2\x2\x2*\x153\x3\x2\x2\x2,\x163"+
		"\x3\x2\x2\x2.\x165\x3\x2\x2\x2\x30\x169\x3\x2\x2\x2\x32\x16D\x3\x2\x2"+
		"\x2\x34\x171\x3\x2\x2\x2\x36\x175\x3\x2\x2\x2\x38\x182\x3\x2\x2\x2:\x18D"+
		"\x3\x2\x2\x2<\x18F\x3\x2\x2\x2>\x193\x3\x2\x2\x2@\x199\x3\x2\x2\x2\x42"+
		"\x19B\x3\x2\x2\x2\x44\x19D\x3\x2\x2\x2\x46\x1A6\x3\x2\x2\x2H\x1AC\x3\x2"+
		"\x2\x2J\x1AE\x3\x2\x2\x2L\x1BA\x3\x2\x2\x2N\x1C0\x3\x2\x2\x2P\x1C2\x3"+
		"\x2\x2\x2R\x1C6\x3\x2\x2\x2T\x1CA\x3\x2\x2\x2V\x1D2\x3\x2\x2\x2X\x1DE"+
		"\x3\x2\x2\x2Z\x1E2\x3\x2\x2\x2\\\x1E4\x3\x2\x2\x2^\x1E8\x3\x2\x2\x2`\x1EA"+
		"\x3\x2\x2\x2\x62\x1EE\x3\x2\x2\x2\x64\x1F0\x3\x2\x2\x2\x66\x1FB\x3\x2"+
		"\x2\x2h\x201\x3\x2\x2\x2j\x203\x3\x2\x2\x2l\x207\x3\x2\x2\x2n\x20D\x3"+
		"\x2\x2\x2p\x211\x3\x2\x2\x2r\x217\x3\x2\x2\x2t\x219\x3\x2\x2\x2v\x21B"+
		"\x3\x2\x2\x2x\x21D\x3\x2\x2\x2z\x21F\x3\x2\x2\x2|\x221\x3\x2\x2\x2~\x224"+
		"\x3\x2\x2\x2\x80\x228\x3\x2\x2\x2\x82\x230\x3\x2\x2\x2\x84\x232\x3\x2"+
		"\x2\x2\x86\x234\x3\x2\x2\x2\x88\x236\x3\x2\x2\x2\x8A\x238\x3\x2\x2\x2"+
		"\x8C\x23A\x3\x2\x2\x2\x8E\x23C\x3\x2\x2\x2\x90\x92\x5\n\x6\x2\x91\x90"+
		"\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x93\x94\x3\x2\x2"+
		"\x2\x94\x3\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\x9B\x5\x80\x41\x2\x97\x98"+
		"\a/\x2\x2\x98\x9A\x5\x80\x41\x2\x99\x97\x3\x2\x2\x2\x9A\x9D\x3\x2\x2\x2"+
		"\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x5\x3\x2\x2\x2\x9D\x9B\x3"+
		"\x2\x2\x2\x9E\xA3\x5\x80\x41\x2\x9F\xA0\a\x30\x2\x2\xA0\xA2\x5\x80\x41"+
		"\x2\xA1\x9F\x3\x2\x2\x2\xA2\xA5\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA4"+
		"\x3\x2\x2\x2\xA4\a\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA6\xAB\x5\x4\x3\x2"+
		"\xA7\xA8\a\x30\x2\x2\xA8\xAA\x5\x4\x3\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAD\x3"+
		"\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\t\x3\x2\x2\x2\xAD"+
		"\xAB\x3\x2\x2\x2\xAE\xAF\a\x3\x2\x2\xAF\xB0\x5\x4\x3\x2\xB0\xB4\a\x36"+
		"\x2\x2\xB1\xB3\x5\f\a\x2\xB2\xB1\x3\x2\x2\x2\xB3\xB6\x3\x2\x2\x2\xB4\xB2"+
		"\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB7\x3\x2\x2\x2\xB6\xB4\x3\x2\x2"+
		"\x2\xB7\xB8\a\x37\x2\x2\xB8\v\x3\x2\x2\x2\xB9\xC4\x5\xE\b\x2\xBA\xC4\x5"+
		"\x10\t\x2\xBB\xC4\x5\x12\n\x2\xBC\xC4\x5\x16\f\x2\xBD\xC4\x5\x1A\xE\x2"+
		"\xBE\xC4\x5\"\x12\x2\xBF\xC4\x5\x36\x1C\x2\xC0\xC4\x5T+\x2\xC1\xC4\x5"+
		"\x64\x33\x2\xC2\xC4\x5\x44#\x2\xC3\xB9\x3\x2\x2\x2\xC3\xBA\x3\x2\x2\x2"+
		"\xC3\xBB\x3\x2\x2\x2\xC3\xBC\x3\x2\x2\x2\xC3\xBD\x3\x2\x2\x2\xC3\xBE\x3"+
		"\x2\x2\x2\xC3\xBF\x3\x2\x2\x2\xC3\xC0\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2"+
		"\xC3\xC2\x3\x2\x2\x2\xC4\r\x3\x2\x2\x2\xC5\xC6\a\x5\x2\x2\xC6\xC9\x5\x80"+
		"\x41\x2\xC7\xC8\a.\x2\x2\xC8\xCA\x5\x4\x3\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA"+
		"\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCF\a\x36\x2\x2\xCC\xCE\x5\x14\v"+
		"\x2\xCD\xCC\x3\x2\x2\x2\xCE\xD1\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xCF\xD0"+
		"\x3\x2\x2\x2\xD0\xD2\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD2\xD3\a\x37\x2"+
		"\x2\xD3\xF\x3\x2\x2\x2\xD4\xD5\a\x4\x2\x2\xD5\xD8\x5\x80\x41\x2\xD6\xD7"+
		"\a.\x2\x2\xD7\xD9\x5\x4\x3\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2"+
		"\xD9\xDA\x3\x2\x2\x2\xDA\xDE\a\x36\x2\x2\xDB\xDD\x5\x14\v\x2\xDC\xDB\x3"+
		"\x2\x2\x2\xDD\xE0\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2"+
		"\xDF\xE1\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE1\xE2\a\x37\x2\x2\xE2\x11\x3"+
		"\x2\x2\x2\xE3\xE4\a\x10\x2\x2\xE4\xE7\x5\x80\x41\x2\xE5\xE6\a.\x2\x2\xE6"+
		"\xE8\x5\x4\x3\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xE9\x3\x2"+
		"\x2\x2\xE9\xED\a\x36\x2\x2\xEA\xEC\x5\x14\v\x2\xEB\xEA\x3\x2\x2\x2\xEC"+
		"\xEF\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xF0\x3\x2"+
		"\x2\x2\xEF\xED\x3\x2\x2\x2\xF0\xF1\a\x37\x2\x2\xF1\x13\x3\x2\x2\x2\xF2"+
		"\xF3\x5p\x39\x2\xF3\xF4\x5\x80\x41\x2\xF4\xF5\a-\x2\x2\xF5\x15\x3\x2\x2"+
		"\x2\xF6\xF7\a\xF\x2\x2\xF7\xF8\x5\x80\x41\x2\xF8\xFC\a\x36\x2\x2\xF9\xFB"+
		"\x5\x18\r\x2\xFA\xF9\x3\x2\x2\x2\xFB\xFE\x3\x2\x2\x2\xFC\xFA\x3\x2\x2"+
		"\x2\xFC\xFD\x3\x2\x2\x2\xFD\x102\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFF\x101"+
		"\x5\x1C\xF\x2\x100\xFF\x3\x2\x2\x2\x101\x104\x3\x2\x2\x2\x102\x100\x3"+
		"\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103\x105\x3\x2\x2\x2\x104\x102\x3\x2"+
		"\x2\x2\x105\x106\a\x37\x2\x2\x106\x17\x3\x2\x2\x2\x107\x108\a\x10\x2\x2"+
		"\x108\x109\x5\x4\x3\x2\x109\x10A\a-\x2\x2\x10A\x19\x3\x2\x2\x2\x10B\x10C"+
		"\a\x6\x2\x2\x10C\x10D\x5\x80\x41\x2\x10D\x111\a\x36\x2\x2\x10E\x110\x5"+
		"\x1C\xF\x2\x10F\x10E\x3\x2\x2\x2\x110\x113\x3\x2\x2\x2\x111\x10F\x3\x2"+
		"\x2\x2\x111\x112\x3\x2\x2\x2\x112\x114\x3\x2\x2\x2\x113\x111\x3\x2\x2"+
		"\x2\x114\x115\a\x37\x2\x2\x115\x1B\x3\x2\x2\x2\x116\x119\x5n\x38\x2\x117"+
		"\x119\x5z>\x2\x118\x116\x3\x2\x2\x2\x118\x117\x3\x2\x2\x2\x119\x11A\x3"+
		"\x2\x2\x2\x11A\x11B\x5\x80\x41\x2\x11B\x11D\a\x32\x2\x2\x11C\x11E\x5\x1E"+
		"\x10\x2\x11D\x11C\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x11F\x3\x2\x2"+
		"\x2\x11F\x122\a\x33\x2\x2\x120\x121\a\a\x2\x2\x121\x123\x5\b\x5\x2\x122"+
		"\x120\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x125"+
		"\a-\x2\x2\x125\x1D\x3\x2\x2\x2\x126\x12B\x5 \x11\x2\x127\x128\a\x30\x2"+
		"\x2\x128\x12A\x5 \x11\x2\x129\x127\x3\x2\x2\x2\x12A\x12D\x3\x2\x2\x2\x12B"+
		"\x129\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x1F\x3\x2\x2\x2\x12D\x12B"+
		"\x3\x2\x2\x2\x12E\x12F\x5p\x39\x2\x12F\x130\x5\x80\x41\x2\x130!\x3\x2"+
		"\x2\x2\x131\x133\a\x11\x2\x2\x132\x131\x3\x2\x2\x2\x132\x133\x3\x2\x2"+
		"\x2\x133\x134\x3\x2\x2\x2\x134\x135\a\x12\x2\x2\x135\x138\x5\x80\x41\x2"+
		"\x136\x137\a.\x2\x2\x137\x139\x5\x4\x3\x2\x138\x136\x3\x2\x2\x2\x138\x139"+
		"\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x13C\a\x36\x2\x2\x13B\x13D\x5"+
		"$\x13\x2\x13C\x13B\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13E\x3\x2\x2"+
		"\x2\x13E\x13F\a\x37\x2\x2\x13F#\x3\x2\x2\x2\x140\x142\x5&\x14\x2\x141"+
		"\x140\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x143\x144"+
		"\x3\x2\x2\x2\x144%\x3\x2\x2\x2\x145\x14B\x5(\x15\x2\x146\x14B\x5*\x16"+
		"\x2\x147\x14B\x5\x30\x19\x2\x148\x14B\x5\x32\x1A\x2\x149\x14B\x5\x34\x1B"+
		"\x2\x14A\x145\x3\x2\x2\x2\x14A\x146\x3\x2\x2\x2\x14A\x147\x3\x2\x2\x2"+
		"\x14A\x148\x3\x2\x2\x2\x14A\x149\x3\x2\x2\x2\x14B\'\x3\x2\x2\x2\x14C\x14D"+
		"\a\x15\x2\x2\x14D\x14F\x5\x4\x3\x2\x14E\x150\x5\x80\x41\x2\x14F\x14E\x3"+
		"\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x152\x5,\x17"+
		"\x2\x152)\x3\x2\x2\x2\x153\x154\a\x14\x2\x2\x154\x156\x5\x4\x3\x2\x155"+
		"\x157\x5\x80\x41\x2\x156\x155\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x158"+
		"\x3\x2\x2\x2\x158\x159\x5,\x17\x2\x159+\x3\x2\x2\x2\x15A\x164\a-\x2\x2"+
		"\x15B\x15F\a\x36\x2\x2\x15C\x15E\x5.\x18\x2\x15D\x15C\x3\x2\x2\x2\x15E"+
		"\x161\x3\x2\x2\x2\x15F\x15D\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x162"+
		"\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2\x162\x164\a\x37\x2\x2\x163\x15A\x3"+
		"\x2\x2\x2\x163\x15B\x3\x2\x2\x2\x164-\x3\x2\x2\x2\x165\x166\a\t\x2\x2"+
		"\x166\x167\x5\x4\x3\x2\x167\x168\a-\x2\x2\x168/\x3\x2\x2\x2\x169\x16A"+
		"\x5p\x39\x2\x16A\x16B\x5\x80\x41\x2\x16B\x16C\a-\x2\x2\x16C\x31\x3\x2"+
		"\x2\x2\x16D\x16E\a\x18\x2\x2\x16E\x16F\x5\x80\x41\x2\x16F\x170\a-\x2\x2"+
		"\x170\x33\x3\x2\x2\x2\x171\x172\a\x19\x2\x2\x172\x173\x5\x80\x41\x2\x173"+
		"\x174\a-\x2\x2\x174\x35\x3\x2\x2\x2\x175\x176\t\x2\x2\x2\x176\x179\x5"+
		"\x80\x41\x2\x177\x178\a.\x2\x2\x178\x17A\x5\x4\x3\x2\x179\x177\x3\x2\x2"+
		"\x2\x179\x17A\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17D\a\x36\x2\x2"+
		"\x17C\x17E\x5\x38\x1D\x2\x17D\x17C\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E"+
		"\x17F\x3\x2\x2\x2\x17F\x180\a\x37\x2\x2\x180\x37\x3\x2\x2\x2\x181\x183"+
		"\x5:\x1E\x2\x182\x181\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x182\x3\x2"+
		"\x2\x2\x184\x185\x3\x2\x2\x2\x185\x39\x3\x2\x2\x2\x186\x18E\x5(\x15\x2"+
		"\x187\x18E\x5*\x16\x2\x188\x18E\x5\x30\x19\x2\x189\x18E\x5\x32\x1A\x2"+
		"\x18A\x18E\x5\x34\x1B\x2\x18B\x18E\x5<\x1F\x2\x18C\x18E\x5> \x2\x18D\x186"+
		"\x3\x2\x2\x2\x18D\x187\x3\x2\x2\x2\x18D\x188\x3\x2\x2\x2\x18D\x189\x3"+
		"\x2\x2\x2\x18D\x18A\x3\x2\x2\x2\x18D\x18B\x3\x2\x2\x2\x18D\x18C\x3\x2"+
		"\x2\x2\x18E;\x3\x2\x2\x2\x18F\x190\a\x12\x2\x2\x190\x191\x5\x4\x3\x2\x191"+
		"\x192\a-\x2\x2\x192=\x3\x2\x2\x2\x193\x194\a\x16\x2\x2\x194\x195\x5@!"+
		"\x2\x195\x196\a\x17\x2\x2\x196\x197\x5\x42\"\x2\x197\x198\a-\x2\x2\x198"+
		"?\x3\x2\x2\x2\x199\x19A\x5\x4\x3\x2\x19A\x41\x3\x2\x2\x2\x19B\x19C\x5"+
		"\x4\x3\x2\x19C\x43\x3\x2\x2\x2\x19D\x19E\a\x1B\x2\x2\x19E\x19F\x5\x80"+
		"\x41\x2\x19F\x1A1\a\x36\x2\x2\x1A0\x1A2\x5\x46$\x2\x1A1\x1A0\x3\x2\x2"+
		"\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x1A4\a\x37\x2\x2"+
		"\x1A4\x45\x3\x2\x2\x2\x1A5\x1A7\x5H%\x2\x1A6\x1A5\x3\x2\x2\x2\x1A7\x1A8"+
		"\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9G\x3\x2\x2"+
		"\x2\x1AA\x1AD\x5J&\x2\x1AB\x1AD\x5> \x2\x1AC\x1AA\x3\x2\x2\x2\x1AC\x1AB"+
		"\x3\x2\x2\x2\x1ADI\x3\x2\x2\x2\x1AE\x1AF\a\x1C\x2\x2\x1AF\x1B0\x5\x80"+
		"\x41\x2\x1B0\x1B1\a\x36\x2\x2\x1B1\x1B5\x5L\'\x2\x1B2\x1B4\x5N(\x2\x1B3"+
		"\x1B2\x3\x2\x2\x2\x1B4\x1B7\x3\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B5\x1B6"+
		"\x3\x2\x2\x2\x1B6\x1B8\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B8\x1B9\a\x37"+
		"\x2\x2\x1B9K\x3\x2\x2\x2\x1BA\x1BB\a\x1D\x2\x2\x1BB\x1BC\x5\x80\x41\x2"+
		"\x1BC\x1BD\a-\x2\x2\x1BDM\x3\x2\x2\x2\x1BE\x1C1\x5P)\x2\x1BF\x1C1\x5R"+
		"*\x2\x1C0\x1BE\x3\x2\x2\x2\x1C0\x1BF\x3\x2\x2\x2\x1C1O\x3\x2\x2\x2\x1C2"+
		"\x1C3\a\x1A\x2\x2\x1C3\x1C4\x5\x4\x3\x2\x1C4\x1C5\a-\x2\x2\x1C5Q\x3\x2"+
		"\x2\x2\x1C6\x1C7\a\xF\x2\x2\x1C7\x1C8\x5\x4\x3\x2\x1C8\x1C9\a-\x2\x2\x1C9"+
		"S\x3\x2\x2\x2\x1CA\x1CB\a\t\x2\x2\x1CB\x1CC\x5\x80\x41\x2\x1CC\x1CE\a"+
		"\x36\x2\x2\x1CD\x1CF\x5V,\x2\x1CE\x1CD\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2"+
		"\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0\x1D1\a\x37\x2\x2\x1D1U\x3\x2\x2\x2\x1D2"+
		"\x1D4\x5X-\x2\x1D3\x1D5\x5\\/\x2\x1D4\x1D3\x3\x2\x2\x2\x1D5\x1D6\x3\x2"+
		"\x2\x2\x1D6\x1D4\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1DB\x3\x2\x2"+
		"\x2\x1D8\x1DA\x5`\x31\x2\x1D9\x1D8\x3\x2\x2\x2\x1DA\x1DD\x3\x2\x2\x2\x1DB"+
		"\x1D9\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DCW\x3\x2\x2\x2\x1DD\x1DB\x3"+
		"\x2\x2\x2\x1DE\x1DF\a\n\x2\x2\x1DF\x1E0\x5Z.\x2\x1E0\x1E1\a-\x2\x2\x1E1"+
		"Y\x3\x2\x2\x2\x1E2\x1E3\x5\x80\x41\x2\x1E3[\x3\x2\x2\x2\x1E4\x1E5\a\v"+
		"\x2\x2\x1E5\x1E6\x5^\x30\x2\x1E6\x1E7\a-\x2\x2\x1E7]\x3\x2\x2\x2\x1E8"+
		"\x1E9\x5\x80\x41\x2\x1E9_\x3\x2\x2\x2\x1EA\x1EB\a\f\x2\x2\x1EB\x1EC\x5"+
		"\x62\x32\x2\x1EC\x1ED\a-\x2\x2\x1ED\x61\x3\x2\x2\x2\x1EE\x1EF\x5\x80\x41"+
		"\x2\x1EF\x63\x3\x2\x2\x2\x1F0\x1F1\a\r\x2\x2\x1F1\x1F2\x5\x80\x41\x2\x1F2"+
		"\x1F3\a.\x2\x2\x1F3\x1F4\x5\x4\x3\x2\x1F4\x1F6\a\x36\x2\x2\x1F5\x1F7\x5"+
		"\x66\x34\x2\x1F6\x1F5\x3\x2\x2\x2\x1F6\x1F7\x3\x2\x2\x2\x1F7\x1F8\x3\x2"+
		"\x2\x2\x1F8\x1F9\a\x37\x2\x2\x1F9\x65\x3\x2\x2\x2\x1FA\x1FC\x5h\x35\x2"+
		"\x1FB\x1FA\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FB\x3\x2\x2\x2\x1FD"+
		"\x1FE\x3\x2\x2\x2\x1FEg\x3\x2\x2\x2\x1FF\x202\x5j\x36\x2\x200\x202\x5"+
		"l\x37\x2\x201\x1FF\x3\x2\x2\x2\x201\x200\x3\x2\x2\x2\x202i\x3\x2\x2\x2"+
		"\x203\x204\a\t\x2\x2\x204\x205\x5\x4\x3\x2\x205\x206\a-\x2\x2\x206k\x3"+
		"\x2\x2\x2\x207\x208\a\xE\x2\x2\x208\x209\x5\x8EH\x2\x209\x20A\a-\x2\x2"+
		"\x20Am\x3\x2\x2\x2\x20B\x20E\x5p\x39\x2\x20C\x20E\x5x=\x2\x20D\x20B\x3"+
		"\x2\x2\x2\x20D\x20C\x3\x2\x2\x2\x20Eo\x3\x2\x2\x2\x20F\x212\x5~@\x2\x210"+
		"\x212\x5r:\x2\x211\x20F\x3\x2\x2\x2\x211\x210\x3\x2\x2\x2\x212q\x3\x2"+
		"\x2\x2\x213\x218\x5v<\x2\x214\x218\x5t;\x2\x215\x218\x5|?\x2\x216\x218"+
		"\x5\x4\x3\x2\x217\x213\x3\x2\x2\x2\x217\x214\x3\x2\x2\x2\x217\x215\x3"+
		"\x2\x2\x2\x217\x216\x3\x2\x2\x2\x218s\x3\x2\x2\x2\x219\x21A\t\x3\x2\x2"+
		"\x21Au\x3\x2\x2\x2\x21B\x21C\t\x4\x2\x2\x21Cw\x3\x2\x2\x2\x21D\x21E\a"+
		",\x2\x2\x21Ey\x3\x2\x2\x2\x21F\x220\a\b\x2\x2\x220{\x3\x2\x2\x2\x221\x222"+
		"\x5v<\x2\x222\x223\a:\x2\x2\x223}\x3\x2\x2\x2\x224\x225\x5r:\x2\x225\x226"+
		"\a\x34\x2\x2\x226\x227\a\x35\x2\x2\x227\x7F\x3\x2\x2\x2\x228\x229\t\x5"+
		"\x2\x2\x229\x81\x3\x2\x2\x2\x22A\x231\x5\x84\x43\x2\x22B\x231\x5\x86\x44"+
		"\x2\x22C\x231\x5\x88\x45\x2\x22D\x231\x5\x8A\x46\x2\x22E\x231\x5\x8CG"+
		"\x2\x22F\x231\x5\x8EH\x2\x230\x22A\x3\x2\x2\x2\x230\x22B\x3\x2\x2\x2\x230"+
		"\x22C\x3\x2\x2\x2\x230\x22D\x3\x2\x2\x2\x230\x22E\x3\x2\x2\x2\x230\x22F"+
		"\x3\x2\x2\x2\x231\x83\x3\x2\x2\x2\x232\x233\a\x1E\x2\x2\x233\x85\x3\x2"+
		"\x2\x2\x234\x235\t\x6\x2\x2\x235\x87\x3\x2\x2\x2\x236\x237\aZ\x2\x2\x237"+
		"\x89\x3\x2\x2\x2\x238\x239\a[\x2\x2\x239\x8B\x3\x2\x2\x2\x23A\x23B\a\\"+
		"\x2\x2\x23B\x8D\x3\x2\x2\x2\x23C\x23D\t\a\x2\x2\x23D\x8F\x3\x2\x2\x2\x31"+
		"\x93\x9B\xA3\xAB\xB4\xC3\xC9\xCF\xD8\xDE\xE7\xED\xFC\x102\x111\x118\x11D"+
		"\x122\x12B\x132\x138\x13C\x143\x14A\x14F\x156\x15F\x163\x179\x17D\x184"+
		"\x18D\x1A1\x1A8\x1AC\x1B5\x1C0\x1CE\x1D6\x1DB\x1F6\x1FD\x201\x20D\x211"+
		"\x217\x230";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Soal
