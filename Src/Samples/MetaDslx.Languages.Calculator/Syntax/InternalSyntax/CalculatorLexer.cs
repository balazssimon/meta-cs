//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\balaz\AppData\Local\Temp\5c33mcvm.d0l\CalculatorLexer.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Calculator.Syntax.InternalSyntax {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class CalculatorLexer : Lexer {
	public const int
		TSemicolon=1, TOpenParen=2, TCloseParen=3, TComma=4, TAssign=5, TAdd=6, 
		TSub=7, TMul=8, TDiv=9, KPrint=10, STRING=11, ID=12, INT=13, UTF8BOM=14, 
		WHITESPACE=15, ENDL=16, COMMENT=17;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TSemicolon", "TOpenParen", "TCloseParen", "TComma", "TAssign", "TAdd", 
		"TSub", "TMul", "TDiv", "KPrint", "STRING", "ID", "INT", "UTF8BOM", "WHITESPACE", 
		"ENDL", "COMMENT"
	};


	public CalculatorLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "','", "'='", "'+'", "'-'", "'*'", "'/'", "'print'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TSemicolon", "TOpenParen", "TCloseParen", "TComma", "TAssign", 
		"TAdd", "TSub", "TMul", "TDiv", "KPrint", "STRING", "ID", "INT", "UTF8BOM", 
		"WHITESPACE", "ENDL", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CalculatorLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x13");
		sb.Append("o\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6");
		sb.Append("\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\x3\v\x3\f\x3\f\a\f@\n\f\f\f\xE\f\x43\v\f\x3\f\x3");
		sb.Append("\f\x3\r\x6\rH\n\r\r\r\xE\rI\x3\xE\x6\xEM\n\xE\r\xE\xE\xEN\x3");
		sb.Append("\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x6\x10X\n\x10\r\x10");
		sb.Append("\xE\x10Y\x3\x10\x3\x10\x3\x11\x5\x11_\n\x11\x3\x11\x3\x11\x3");
		sb.Append("\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12i\n\x12\f\x12\xE");
		sb.Append("\x12l\v\x12\x3\x12\x3\x12\x2\x2\x13\x3\x3\x5\x4\a\x5\t\x6\v");
		sb.Append("\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F");
		sb.Append("\x11!\x12#\x13\x3\x2\b\x5\x2\x43\\\x61\x61\x63|\x3\x2\xF1\xF1");
		sb.Append("\x3\x2\xBD\xBD\x3\x2\xC1\xC1\a\x2\v\v\r\xE\x1C\x1C\"\"\xA2\xA2");
		sb.Append("\x4\x2\f\f\xF\xFt\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3");
		sb.Append("\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2");
		sb.Append("\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2");
		sb.Append("\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B");
		sb.Append("\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2");
		sb.Append("\x2\x2\x2#\x3\x2\x2\x2\x3%\x3\x2\x2\x2\x5\'\x3\x2\x2\x2\a)\x3");
		sb.Append("\x2\x2\x2\t+\x3\x2\x2\x2\v-\x3\x2\x2\x2\r/\x3\x2\x2\x2\xF\x31");
		sb.Append("\x3\x2\x2\x2\x11\x33\x3\x2\x2\x2\x13\x35\x3\x2\x2\x2\x15\x37");
		sb.Append("\x3\x2\x2\x2\x17=\x3\x2\x2\x2\x19G\x3\x2\x2\x2\x1BL\x3\x2\x2");
		sb.Append("\x2\x1DP\x3\x2\x2\x2\x1FW\x3\x2\x2\x2!^\x3\x2\x2\x2#\x64\x3");
		sb.Append("\x2\x2\x2%&\a=\x2\x2&\x4\x3\x2\x2\x2\'(\a*\x2\x2(\x6\x3\x2\x2");
		sb.Append("\x2)*\a+\x2\x2*\b\x3\x2\x2\x2+,\a.\x2\x2,\n\x3\x2\x2\x2-.\a");
		sb.Append("?\x2\x2.\f\x3\x2\x2\x2/\x30\a-\x2\x2\x30\xE\x3\x2\x2\x2\x31");
		sb.Append("\x32\a/\x2\x2\x32\x10\x3\x2\x2\x2\x33\x34\a,\x2\x2\x34\x12\x3");
		sb.Append("\x2\x2\x2\x35\x36\a\x31\x2\x2\x36\x14\x3\x2\x2\x2\x37\x38\a");
		sb.Append("r\x2\x2\x38\x39\at\x2\x2\x39:\ak\x2\x2:;\ap\x2\x2;<\av\x2\x2");
		sb.Append("<\x16\x3\x2\x2\x2=\x41\a$\x2\x2>@\x4\"\x80\x2?>\x3\x2\x2\x2");
		sb.Append("@\x43\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x44");
		sb.Append("\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x44\x45\a$\x2\x2\x45\x18\x3");
		sb.Append("\x2\x2\x2\x46H\t\x2\x2\x2G\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IG\x3");
		sb.Append("\x2\x2\x2IJ\x3\x2\x2\x2J\x1A\x3\x2\x2\x2KM\x4\x32;\x2LK\x3\x2");
		sb.Append("\x2\x2MN\x3\x2\x2\x2NL\x3\x2\x2\x2NO\x3\x2\x2\x2O\x1C\x3\x2");
		sb.Append("\x2\x2PQ\t\x3\x2\x2QR\t\x4\x2\x2RS\t\x5\x2\x2ST\x3\x2\x2\x2");
		sb.Append("TU\b\xF\x2\x2U\x1E\x3\x2\x2\x2VX\t\x6\x2\x2WV\x3\x2\x2\x2XY");
		sb.Append("\x3\x2\x2\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2Z[\x3\x2\x2\x2[\\\b");
		sb.Append("\x10\x2\x2\\ \x3\x2\x2\x2]_\a\xF\x2\x2^]\x3\x2\x2\x2^_\x3\x2");
		sb.Append("\x2\x2_`\x3\x2\x2\x2`\x61\a\f\x2\x2\x61\x62\x3\x2\x2\x2\x62");
		sb.Append("\x63\b\x11\x2\x2\x63\"\x3\x2\x2\x2\x64\x65\a\x31\x2\x2\x65\x66");
		sb.Append("\a\x31\x2\x2\x66j\x3\x2\x2\x2gi\n\a\x2\x2hg\x3\x2\x2\x2il\x3");
		sb.Append("\x2\x2\x2jh\x3\x2\x2\x2jk\x3\x2\x2\x2km\x3\x2\x2\x2lj\x3\x2");
		sb.Append("\x2\x2mn\b\x12\x3\x2n$\x3\x2\x2\x2\t\x2\x41INY^j\x4\x2\x11\x2");
		sb.Append("\x2\x13\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaDslx.Languages.Calculator.Syntax.InternalSyntax
