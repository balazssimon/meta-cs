//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CalculatorLexer.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Calculator.Syntax.InternalSyntax {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class CalculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TSemicolon=1, TOpenParen=2, TCloseParen=3, TComma=4, TAssign=5, TAdd=6, 
		TSub=7, TMul=8, TDiv=9, KPrint=10, LString=11, LId=12, LInt=13, LUtf8Bom=14, 
		LWhitespace=15, LEndl=16, LComment=17;
	public const int
		COMMENT=2, WHITESPACE=3;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENT", "WHITESPACE"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TSemicolon", "TOpenParen", "TCloseParen", "TComma", "TAssign", "TAdd", 
		"TSub", "TMul", "TDiv", "KPrint", "LString", "LId", "LInt", "LUtf8Bom", 
		"LWhitespace", "LEndl", "LComment"
	};


	public CalculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "','", "'='", "'+'", "'-'", "'*'", "'/'", "'print'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TSemicolon", "TOpenParen", "TCloseParen", "TComma", "TAssign", 
		"TAdd", "TSub", "TMul", "TDiv", "KPrint", "LString", "LId", "LInt", "LUtf8Bom", 
		"LWhitespace", "LEndl", "LComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CalculatorLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x13', 'o', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\a', '\f', '@', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\x43', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x6', '\r', 'H', '\n', '\r', '\r', '\r', '\xE', '\r', 'I', '\x3', 
		'\xE', '\x6', '\xE', 'M', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 'N', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x6', '\x10', 'X', '\n', '\x10', '\r', '\x10', 
		'\xE', '\x10', 'Y', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x5', 
		'\x11', '_', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\a', '\x12', 'i', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 'l', '\v', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x2', '\x2', '\x13', '\x3', '\x3', 
		'\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', 
		'\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', 
		'\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', 
		'\x13', '\x3', '\x2', '\b', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', 
		'\x63', '|', '\x3', '\x2', '\xF1', '\xF1', '\x3', '\x2', '\xBD', '\xBD', 
		'\x3', '\x2', '\xC1', '\xC1', '\a', '\x2', '\v', '\v', '\r', '\xE', '\x1C', 
		'\x1C', '\"', '\"', '\xA2', '\xA2', '\x4', '\x2', '\f', '\f', '\xF', '\xF', 
		'\x2', 't', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x3', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '\'', '\x3', '\x2', '\x2', '\x2', '\a', 
		')', '\x3', '\x2', '\x2', '\x2', '\t', '+', '\x3', '\x2', '\x2', '\x2', 
		'\v', '-', '\x3', '\x2', '\x2', '\x2', '\r', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x31', '\x3', '\x2', '\x2', '\x2', '\x11', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x35', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x17', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x19', 'G', '\x3', '\x2', '\x2', '\x2', '\x1B', 'L', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', 'P', '\x3', '\x2', '\x2', '\x2', '\x1F', 'W', '\x3', 
		'\x2', '\x2', '\x2', '!', '^', '\x3', '\x2', '\x2', '\x2', '#', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '=', '\x2', '\x2', '&', '\x4', 
		'\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '*', '\x2', '\x2', '(', '\x6', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '+', '\x2', '\x2', '*', '\b', 
		'\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '.', '\x2', '\x2', ',', '\n', 
		'\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '?', '\x2', '\x2', '.', '\f', 
		'\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '-', '\x2', '\x2', '\x30', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '/', '\x2', '\x2', 
		'\x32', '\x10', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', ',', 
		'\x2', '\x2', '\x34', '\x12', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\a', '\x31', '\x2', '\x2', '\x36', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x38', '\a', 'r', '\x2', '\x2', '\x38', '\x39', '\a', 't', '\x2', 
		'\x2', '\x39', ':', '\a', 'k', '\x2', '\x2', ':', ';', '\a', 'p', '\x2', 
		'\x2', ';', '<', '\a', 'v', '\x2', '\x2', '<', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '=', '\x41', '\a', '$', '\x2', '\x2', '>', '@', '\x4', '\"', '\x80', 
		'\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '$', 
		'\x2', '\x2', '\x45', '\x18', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', 
		'\t', '\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'M', '\x4', '\x32', ';', '\x2', 'L', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\t', '\x3', '\x2', '\x2', 'Q', 'R', '\t', '\x4', 
		'\x2', '\x2', 'R', 'S', '\t', '\x5', '\x2', '\x2', 'S', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\b', '\xF', '\x2', '\x2', 'U', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'X', '\t', '\x6', '\x2', '\x2', 'W', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', 
		'\x2', '\x2', '\x2', '[', '\\', '\b', '\x10', '\x2', '\x2', '\\', ' ', 
		'\x3', '\x2', '\x2', '\x2', ']', '_', '\a', '\xF', '\x2', '\x2', '^', 
		']', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '\f', '\x2', 
		'\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\b', 
		'\x11', '\x2', '\x2', '\x63', '\"', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\a', '\x31', '\x2', '\x2', '\x65', '\x66', '\a', '\x31', '\x2', 
		'\x2', '\x66', 'j', '\x3', '\x2', '\x2', '\x2', 'g', 'i', '\n', '\a', 
		'\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\b', '\x12', '\x3', '\x2', 'n', '$', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\x2', '\x41', 'I', 'N', 'Y', '^', 'j', '\x4', '\x2', 
		'\x5', '\x2', '\x2', '\x4', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.Calculator.Syntax.InternalSyntax

