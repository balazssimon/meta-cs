//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CalculatorParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Calculator.Syntax.InternalSyntax {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ICalculatorParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class CalculatorParserBaseListener : ICalculatorParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.main"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMain([NotNull] CalculatorParser.MainContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.main"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMain([NotNull] CalculatorParser.MainContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.statementLine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatementLine([NotNull] CalculatorParser.StatementLineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.statementLine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatementLine([NotNull] CalculatorParser.StatementLineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] CalculatorParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] CalculatorParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] CalculatorParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] CalculatorParser.AssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>valueExpression</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValueExpression([NotNull] CalculatorParser.ValueExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>valueExpression</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValueExpression([NotNull] CalculatorParser.ValueExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>printExpression</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrintExpression([NotNull] CalculatorParser.PrintExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>printExpression</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrintExpression([NotNull] CalculatorParser.PrintExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>mulOrDivExpression</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulOrDivExpression([NotNull] CalculatorParser.MulOrDivExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>mulOrDivExpression</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulOrDivExpression([NotNull] CalculatorParser.MulOrDivExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenExpression</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenExpression([NotNull] CalculatorParser.ParenExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenExpression</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenExpression([NotNull] CalculatorParser.ParenExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addOrSubExpression</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddOrSubExpression([NotNull] CalculatorParser.AddOrSubExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addOrSubExpression</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddOrSubExpression([NotNull] CalculatorParser.AddOrSubExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgs([NotNull] CalculatorParser.ArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgs([NotNull] CalculatorParser.ArgsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValue([NotNull] CalculatorParser.ValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValue([NotNull] CalculatorParser.ValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] CalculatorParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] CalculatorParser.IdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString([NotNull] CalculatorParser.StringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString([NotNull] CalculatorParser.StringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInteger([NotNull] CalculatorParser.IntegerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInteger([NotNull] CalculatorParser.IntegerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.arg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArg([NotNull] CalculatorParser.ArgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.arg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArg([NotNull] CalculatorParser.ArgContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace MetaDslx.Languages.Calculator.Syntax.InternalSyntax

