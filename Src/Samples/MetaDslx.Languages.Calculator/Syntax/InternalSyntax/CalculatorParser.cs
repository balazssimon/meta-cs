//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CalculatorParser.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.Calculator.Syntax.InternalSyntax {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TSemicolon=1, TOpenParen=2, TCloseParen=3, TComma=4, TAssign=5, TAdd=6, 
		TSub=7, TMul=8, TDiv=9, KPrint=10, LString=11, LId=12, LInt=13, LUtf8Bom=14, 
		LWhitespace=15, LEndl=16, LComment=17;
	public const int
		RULE_main = 0, RULE_statementLine = 1, RULE_statement = 2, RULE_assignment = 3, 
		RULE_expression = 4, RULE_args = 5, RULE_value = 6, RULE_identifier = 7, 
		RULE_string = 8, RULE_integer = 9, RULE_arg = 10;
	public static readonly string[] ruleNames = {
		"main", "statementLine", "statement", "assignment", "expression", "args", 
		"value", "identifier", "string", "integer", "arg"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "','", "'='", "'+'", "'-'", "'*'", "'/'", "'print'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TSemicolon", "TOpenParen", "TCloseParen", "TComma", "TAssign", 
		"TAdd", "TSub", "TMul", "TDiv", "KPrint", "LString", "LId", "LInt", "LUtf8Bom", 
		"LWhitespace", "LEndl", "LComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CalculatorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public CalculatorParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class MainContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CalculatorParser.Eof, 0); }
		public StatementLineContext[] statementLine() {
			return GetRuleContexts<StatementLineContext>();
		}
		public StatementLineContext statementLine(int i) {
			return GetRuleContext<StatementLineContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 22; statementLine();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOpenParen) | (1L << KPrint) | (1L << LString) | (1L << LId) | (1L << LInt))) != 0) );
			State = 27; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(CalculatorParser.TSemicolon, 0); }
		public StatementLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterStatementLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitStatementLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLineContext statementLine() {
		StatementLineContext _localctx = new StatementLineContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; statement();
			State = 30; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TAssign() { return GetToken(CalculatorParser.TAssign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; identifier();
			State = 37; Match(TAssign);
			State = 38; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueExpressionContext : ExpressionContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ValueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintExpressionContext : ExpressionContext {
		public ITerminalNode KPrint() { return GetToken(CalculatorParser.KPrint, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public PrintExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterPrintExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitPrintExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulOrDivExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TMul() { return GetToken(CalculatorParser.TMul, 0); }
		public ITerminalNode TDiv() { return GetToken(CalculatorParser.TDiv, 0); }
		public MulOrDivExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterMulOrDivExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitMulOrDivExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulOrDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExpressionContext {
		public ITerminalNode TOpenParen() { return GetToken(CalculatorParser.TOpenParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TCloseParen() { return GetToken(CalculatorParser.TCloseParen, 0); }
		public ParenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddOrSubExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TAdd() { return GetToken(CalculatorParser.TAdd, 0); }
		public ITerminalNode TSub() { return GetToken(CalculatorParser.TSub, 0); }
		public AddOrSubExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterAddOrSubExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitAddOrSubExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOrSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOpenParen:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 41; Match(TOpenParen);
				State = 42; expression(0);
				State = 43; Match(TCloseParen);
				}
				break;
			case KPrint:
				{
				_localctx = new PrintExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 45; Match(KPrint);
				State = 46; args();
				}
				break;
			case LString:
			case LId:
			case LInt:
				{
				_localctx = new ValueExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 47; value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 58;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 56;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new MulOrDivExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MulOrDivExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 50;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 51;
						((MulOrDivExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TMul || _la==TDiv) ) {
							((MulOrDivExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 52; ((MulOrDivExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 2:
						{
						_localctx = new AddOrSubExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AddOrSubExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 53;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 54;
						((AddOrSubExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TAdd || _la==TSub) ) {
							((AddOrSubExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 55; ((AddOrSubExpressionContext)_localctx).right = expression(4);
						}
						break;
					}
					} 
				}
				State = 60;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode[] TComma() { return GetTokens(CalculatorParser.TComma); }
		public ITerminalNode TComma(int i) {
			return GetToken(CalculatorParser.TComma, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 10, RULE_args);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; arg();
			State = 66;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 62; Match(TComma);
					State = 63; arg();
					}
					} 
				}
				State = 68;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_value);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LId:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; identifier();
				}
				break;
			case LString:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; @string();
				}
				break;
			case LInt:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71; integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode LId() { return GetToken(CalculatorParser.LId, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(LId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode LString() { return GetToken(CalculatorParser.LString, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 16, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(LString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode LInt() { return GetToken(CalculatorParser.LInt, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 18, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(LInt);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorParserListener typedListener = listener as ICalculatorParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorParserVisitor<TResult> typedVisitor = visitor as ICalculatorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 20, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x13");
		sb.Append("U\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4");
		sb.Append("\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x6");
		sb.Append("\x2\x1A\n\x2\r\x2\xE\x2\x1B\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x4\x3\x4\x5\x4%\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x33\n\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\x6\a\x6;\n\x6\f\x6\xE\x6>\v\x6\x3\a\x3");
		sb.Append("\a\x3\a\a\a\x43\n\a\f\a\xE\a\x46\v\a\x3\b\x3\b\x3\b\x5\bK\n");
		sb.Append("\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x2\x3\n\r\x2");
		sb.Append("\x4\x6\b\n\f\xE\x10\x12\x14\x16\x2\x4\x3\x2\n\v\x3\x2\b\tR\x2");
		sb.Append("\x19\x3\x2\x2\x2\x4\x1F\x3\x2\x2\x2\x6$\x3\x2\x2\x2\b&\x3\x2");
		sb.Append("\x2\x2\n\x32\x3\x2\x2\x2\f?\x3\x2\x2\x2\xEJ\x3\x2\x2\x2\x10");
		sb.Append("L\x3\x2\x2\x2\x12N\x3\x2\x2\x2\x14P\x3\x2\x2\x2\x16R\x3\x2\x2");
		sb.Append("\x2\x18\x1A\x5\x4\x3\x2\x19\x18\x3\x2\x2\x2\x1A\x1B\x3\x2\x2");
		sb.Append("\x2\x1B\x19\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1D\x3\x2\x2");
		sb.Append("\x2\x1D\x1E\a\x2\x2\x3\x1E\x3\x3\x2\x2\x2\x1F \x5\x6\x4\x2 ");
		sb.Append("!\a\x3\x2\x2!\x5\x3\x2\x2\x2\"%\x5\b\x5\x2#%\x5\n\x6\x2$\"\x3");
		sb.Append("\x2\x2\x2$#\x3\x2\x2\x2%\a\x3\x2\x2\x2&\'\x5\x10\t\x2\'(\a\a");
		sb.Append("\x2\x2()\x5\n\x6\x2)\t\x3\x2\x2\x2*+\b\x6\x1\x2+,\a\x4\x2\x2");
		sb.Append(",-\x5\n\x6\x2-.\a\x5\x2\x2.\x33\x3\x2\x2\x2/\x30\a\f\x2\x2\x30");
		sb.Append("\x33\x5\f\a\x2\x31\x33\x5\xE\b\x2\x32*\x3\x2\x2\x2\x32/\x3\x2");
		sb.Append("\x2\x2\x32\x31\x3\x2\x2\x2\x33<\x3\x2\x2\x2\x34\x35\f\x6\x2");
		sb.Append("\x2\x35\x36\t\x2\x2\x2\x36;\x5\n\x6\a\x37\x38\f\x5\x2\x2\x38");
		sb.Append("\x39\t\x3\x2\x2\x39;\x5\n\x6\x6:\x34\x3\x2\x2\x2:\x37\x3\x2");
		sb.Append("\x2\x2;>\x3\x2\x2\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2=\v\x3\x2\x2");
		sb.Append("\x2><\x3\x2\x2\x2?\x44\x5\x16\f\x2@\x41\a\x6\x2\x2\x41\x43\x5");
		sb.Append("\x16\f\x2\x42@\x3\x2\x2\x2\x43\x46\x3\x2\x2\x2\x44\x42\x3\x2");
		sb.Append("\x2\x2\x44\x45\x3\x2\x2\x2\x45\r\x3\x2\x2\x2\x46\x44\x3\x2\x2");
		sb.Append("\x2GK\x5\x10\t\x2HK\x5\x12\n\x2IK\x5\x14\v\x2JG\x3\x2\x2\x2");
		sb.Append("JH\x3\x2\x2\x2JI\x3\x2\x2\x2K\xF\x3\x2\x2\x2LM\a\xE\x2\x2M\x11");
		sb.Append("\x3\x2\x2\x2NO\a\r\x2\x2O\x13\x3\x2\x2\x2PQ\a\xF\x2\x2Q\x15");
		sb.Append("\x3\x2\x2\x2RS\x5\xE\b\x2S\x17\x3\x2\x2\x2\t\x1B$\x32:<\x44");
		sb.Append("J");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace MetaDslx.Languages.Calculator.Syntax.InternalSyntax
